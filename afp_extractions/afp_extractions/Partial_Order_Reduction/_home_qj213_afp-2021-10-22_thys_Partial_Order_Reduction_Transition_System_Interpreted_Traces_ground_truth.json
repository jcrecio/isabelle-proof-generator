{"file_name": "/home/qj213/afp-2021-10-22/thys/Partial_Order_Reduction/Transition_System_Interpreted_Traces.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Partial_Order_Reduction", "problem_names": ["lemma eq_swap_lproject_visible:\n      assumes \"u =\\<^sub>S v\"\n      shows \"lproject visible (llist_of u) = lproject visible (llist_of v)\"", "lemma eq_fin_lproject_visible:\n      assumes \"u =\\<^sub>F v\"\n      shows \"lproject visible (llist_of u) = lproject visible (llist_of v)\"", "lemma le_fin_lproject_visible:\n      assumes \"u \\<preceq>\\<^sub>F v\"\n      shows \"lproject visible (llist_of u) \\<le> lproject visible (llist_of v)\"", "lemma le_fininf_lproject_visible:\n      assumes \"u \\<preceq>\\<^sub>F\\<^sub>I v\"\n      shows \"lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)\"", "lemma le_inf_lproject_visible:\n      assumes \"u \\<preceq>\\<^sub>I v\"\n      shows \"lproject visible (llist_of_stream u) \\<le> lproject visible (llist_of_stream v)\"", "lemma eq_inf_lproject_visible:\n      assumes \"u =\\<^sub>I v\"\n      shows \"lproject visible (llist_of_stream u) = lproject visible (llist_of_stream v)\"", "lemma stutter_selection_lproject_visible:\n      assumes \"run u p\"\n      shows \"stutter_selection (lift (liset visible (llist_of_stream u)))\n        (llist_of_stream (smap int (p ## trace u p)))\"", "lemma execute_fin_visible:\n      assumes \"path u q\" \"path v q\" \"u \\<preceq>\\<^sub>F\\<^sub>I w\" \"v \\<preceq>\\<^sub>F\\<^sub>I w\"\n      assumes \"project visible u = project visible v\"\n      shows \"int (target u q) = int (target v q)\"", "lemma execute_inf_visible:\n      assumes \"run u q\" \"run v q\" \"u \\<preceq>\\<^sub>I w\" \"v \\<preceq>\\<^sub>I w\"\n      assumes \"lproject visible (llist_of_stream u) = lproject visible (llist_of_stream v)\"\n      shows \"snth (smap int (q ## trace u q)) \\<approx> snth (smap int (q ## trace v q))\""], "translations": [["", "lemma eq_swap_lproject_visible:\n      assumes \"u =\\<^sub>S v\"\n      shows \"lproject visible (llist_of u) = lproject visible (llist_of v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) = lproject visible (llist_of v)", "using assms independence_invisible"], ["proof (prove)\nusing this:\n  u =\\<^sub>S v\n  \\<lbrakk>?a \\<in> visible; ?b \\<in> visible\\<rbrakk>\n  \\<Longrightarrow> \\<not> ind ?a ?b\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) = lproject visible (llist_of v)", "by (induct, auto)"], ["", "lemma eq_fin_lproject_visible:\n      assumes \"u =\\<^sub>F v\"\n      shows \"lproject visible (llist_of u) = lproject visible (llist_of v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) = lproject visible (llist_of v)", "using assms eq_swap_lproject_visible"], ["proof (prove)\nusing this:\n  u =\\<^sub>F v\n  ?u =\\<^sub>S ?v \\<Longrightarrow>\n  lproject visible (llist_of ?u) = lproject visible (llist_of ?v)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) = lproject visible (llist_of v)", "by (induct, auto)"], ["", "lemma le_fin_lproject_visible:\n      assumes \"u \\<preceq>\\<^sub>F v\"\n      shows \"lproject visible (llist_of u) \\<le> lproject visible (llist_of v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "obtain w where 1: \"u @ w =\\<^sub>F v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w. u @ w =\\<^sub>F v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>F v\n\ngoal (1 subgoal):\n 1. (\\<And>w. u @ w =\\<^sub>F v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by rule"], ["proof (state)\nthis:\n  u @ w =\\<^sub>F v\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "have \"lproject visible (llist_of u) \\<le>\n        lproject visible (llist_of u) $ lproject visible (llist_of w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u)\n    \\<le> lproject visible (llist_of u) $ lproject visible (llist_of w)", "by auto"], ["proof (state)\nthis:\n  lproject visible (llist_of u)\n  \\<le> lproject visible (llist_of u) $ lproject visible (llist_of w)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "also"], ["proof (state)\nthis:\n  lproject visible (llist_of u)\n  \\<le> lproject visible (llist_of u) $ lproject visible (llist_of w)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "have \"\\<dots> = lproject visible (llist_of (u @ w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) $ lproject visible (llist_of w) =\n    lproject visible (llist_of (u @ w))", "using lappend_llist_of_llist_of"], ["proof (prove)\nusing this:\n  llist_of ?xs $ llist_of ?ys = llist_of (?xs @ ?ys)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) $ lproject visible (llist_of w) =\n    lproject visible (llist_of (u @ w))", "by auto"], ["proof (state)\nthis:\n  lproject visible (llist_of u) $ lproject visible (llist_of w) =\n  lproject visible (llist_of (u @ w))\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "also"], ["proof (state)\nthis:\n  lproject visible (llist_of u) $ lproject visible (llist_of w) =\n  lproject visible (llist_of (u @ w))\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "have \"\\<dots> = lproject visible (llist_of v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of (u @ w)) = lproject visible (llist_of v)", "using eq_fin_lproject_visible 1"], ["proof (prove)\nusing this:\n  ?u =\\<^sub>F ?v \\<Longrightarrow>\n  lproject visible (llist_of ?u) = lproject visible (llist_of ?v)\n  u @ w =\\<^sub>F v\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of (u @ w)) = lproject visible (llist_of v)", "by this"], ["proof (state)\nthis:\n  lproject visible (llist_of (u @ w)) = lproject visible (llist_of v)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "finally"], ["proof (chain)\npicking this:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "show ?thesis"], ["proof (prove)\nusing this:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of v)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of v)", "by this"], ["proof (state)\nthis:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_fininf_lproject_visible:\n      assumes \"u \\<preceq>\\<^sub>F\\<^sub>I v\"\n      shows \"lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "obtain w where 1: \"w \\<le>\\<^sub>F\\<^sub>I v\" \"u \\<preceq>\\<^sub>F w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<le>\\<^sub>F\\<^sub>I v; u \\<preceq>\\<^sub>F w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>F\\<^sub>I v\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<le>\\<^sub>F\\<^sub>I v; u \\<preceq>\\<^sub>F w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by rule"], ["proof (state)\nthis:\n  w \\<le>\\<^sub>F\\<^sub>I v\n  u \\<preceq>\\<^sub>F w\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "have \"lproject visible (llist_of u) \\<le> lproject visible (llist_of w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of w)", "using le_fin_lproject_visible 1(2)"], ["proof (prove)\nusing this:\n  ?u \\<preceq>\\<^sub>F ?v \\<Longrightarrow>\n  lproject visible (llist_of ?u) \\<le> lproject visible (llist_of ?v)\n  u \\<preceq>\\<^sub>F w\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of w)", "by this"], ["proof (state)\nthis:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of w)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "also"], ["proof (state)\nthis:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of w)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "have \"\\<dots> \\<le> lproject visible (llist_of_stream v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of w) \\<le> lproject visible (llist_of_stream v)", "using 1(1)"], ["proof (prove)\nusing this:\n  w \\<le>\\<^sub>F\\<^sub>I v\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of w) \\<le> lproject visible (llist_of_stream v)", "by blast"], ["proof (state)\nthis:\n  lproject visible (llist_of w) \\<le> lproject visible (llist_of_stream v)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "finally"], ["proof (chain)\npicking this:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "show ?thesis"], ["proof (prove)\nusing this:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)", "by this"], ["proof (state)\nthis:\n  lproject visible (llist_of u) \\<le> lproject visible (llist_of_stream v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_inf_lproject_visible:\n      assumes \"u \\<preceq>\\<^sub>I v\"\n      shows \"lproject visible (llist_of_stream u) \\<le> lproject visible (llist_of_stream v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of_stream u)\n    \\<le> lproject visible (llist_of_stream v)", "proof (rule lproject_prefix_limit)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "assume 1: \"w \\<le> llist_of_stream u\" \"lfinite w\""], ["proof (state)\nthis:\n  w \\<le> llist_of_stream u\n  lfinite w\n\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "have 2: \"list_of w \\<le>\\<^sub>F\\<^sub>I stream_of_llist (llist_of_stream u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of w \\<le>\\<^sub>F\\<^sub>I stream_of_llist (llist_of_stream u)", "using 1"], ["proof (prove)\nusing this:\n  w \\<le> llist_of_stream u\n  lfinite w\n\ngoal (1 subgoal):\n 1. list_of w \\<le>\\<^sub>F\\<^sub>I stream_of_llist (llist_of_stream u)", "by blast"], ["proof (state)\nthis:\n  list_of w \\<le>\\<^sub>F\\<^sub>I stream_of_llist (llist_of_stream u)\n\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "have 3: \"list_of w \\<preceq>\\<^sub>F\\<^sub>I v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of w \\<preceq>\\<^sub>F\\<^sub>I v", "using assms 2"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>I v\n  list_of w \\<le>\\<^sub>F\\<^sub>I stream_of_llist (llist_of_stream u)\n\ngoal (1 subgoal):\n 1. list_of w \\<preceq>\\<^sub>F\\<^sub>I v", "by auto"], ["proof (state)\nthis:\n  list_of w \\<preceq>\\<^sub>F\\<^sub>I v\n\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "have \"lproject visible w = lproject visible (llist_of (list_of w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible w = lproject visible (llist_of (list_of w))", "using 1(2)"], ["proof (prove)\nusing this:\n  lfinite w\n\ngoal (1 subgoal):\n 1. lproject visible w = lproject visible (llist_of (list_of w))", "by simp"], ["proof (state)\nthis:\n  lproject visible w = lproject visible (llist_of (list_of w))\n\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "also"], ["proof (state)\nthis:\n  lproject visible w = lproject visible (llist_of (list_of w))\n\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "have \"\\<dots> \\<le> lproject visible (llist_of_stream v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of (list_of w))\n    \\<le> lproject visible (llist_of_stream v)", "using le_fininf_lproject_visible 3"], ["proof (prove)\nusing this:\n  ?u \\<preceq>\\<^sub>F\\<^sub>I ?v \\<Longrightarrow>\n  lproject visible (llist_of ?u) \\<le> lproject visible (llist_of_stream ?v)\n  list_of w \\<preceq>\\<^sub>F\\<^sub>I v\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of (list_of w))\n    \\<le> lproject visible (llist_of_stream v)", "by this"], ["proof (state)\nthis:\n  lproject visible (llist_of (list_of w))\n  \\<le> lproject visible (llist_of_stream v)\n\ngoal (1 subgoal):\n 1. \\<And>va.\n       \\<lbrakk>va \\<le> llist_of_stream u; lfinite va\\<rbrakk>\n       \\<Longrightarrow> lproject visible va\n                         \\<le> lproject visible (llist_of_stream v)", "finally"], ["proof (chain)\npicking this:\n  lproject visible w \\<le> lproject visible (llist_of_stream v)", "show \"lproject visible w \\<le> lproject visible (llist_of_stream v)\""], ["proof (prove)\nusing this:\n  lproject visible w \\<le> lproject visible (llist_of_stream v)\n\ngoal (1 subgoal):\n 1. lproject visible w \\<le> lproject visible (llist_of_stream v)", "by this"], ["proof (state)\nthis:\n  lproject visible w \\<le> lproject visible (llist_of_stream v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eq_inf_lproject_visible:\n      assumes \"u =\\<^sub>I v\"\n      shows \"lproject visible (llist_of_stream u) = lproject visible (llist_of_stream v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lproject visible (llist_of_stream u) =\n    lproject visible (llist_of_stream v)", "using le_inf_lproject_visible assms"], ["proof (prove)\nusing this:\n  ?u \\<preceq>\\<^sub>I ?v \\<Longrightarrow>\n  lproject visible (llist_of_stream ?u)\n  \\<le> lproject visible (llist_of_stream ?v)\n  u =\\<^sub>I v\n\ngoal (1 subgoal):\n 1. lproject visible (llist_of_stream u) =\n    lproject visible (llist_of_stream v)", "by (metis antisym eq_infE)"], ["", "lemma stutter_selection_lproject_visible:\n      assumes \"run u p\"\n      shows \"stutter_selection (lift (liset visible (llist_of_stream u)))\n        (llist_of_stream (smap int (p ## trace u p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stutter_selection (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (p ## trace u p)))", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 \\<in> lift (liset visible (llist_of_stream u))\n 2. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 3. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "show \"0 \\<in> lift (liset visible (llist_of_stream u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> lift (liset visible (llist_of_stream u))", "by auto"], ["proof (state)\nthis:\n  0 \\<in> lift (liset visible (llist_of_stream u))\n\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "fix k i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "assume 3: \"enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))\""], ["proof (state)\nthis:\n  enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))\n\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "assume 4: \"nth_least (lift (liset visible (llist_of_stream u))) k < i\""], ["proof (state)\nthis:\n  nth_least (lift (liset visible (llist_of_stream u))) k < i\n\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "assume 5: \"i < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)\""], ["proof (state)\nthis:\n  i < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)\n\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "have 6: \"int ((p ## trace u p) !! nth_least (lift (liset visible (llist_of_stream u))) k) =\n        int ((p ## trace u p) !! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((p ## trace u p) !!\n         nth_least (lift (liset visible (llist_of_stream u))) k) =\n    int ((p ## trace u p) !! i)", "proof (rule execute_inf_word_invisible)"], ["proof (state)\ngoal (3 subgoals):\n 1. run u p\n 2. nth_least (lift (liset visible (llist_of_stream u))) k \\<le> i\n 3. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "show \"run u p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run u p", "using assms"], ["proof (prove)\nusing this:\n  run u p\n\ngoal (1 subgoal):\n 1. run u p", "by this"], ["proof (state)\nthis:\n  run u p\n\ngoal (2 subgoals):\n 1. nth_least (lift (liset visible (llist_of_stream u))) k \\<le> i\n 2. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "show \"nth_least (lift (liset visible (llist_of_stream u))) k \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_least (lift (liset visible (llist_of_stream u))) k \\<le> i", "using 4"], ["proof (prove)\nusing this:\n  nth_least (lift (liset visible (llist_of_stream u))) k < i\n\ngoal (1 subgoal):\n 1. nth_least (lift (liset visible (llist_of_stream u))) k \\<le> i", "by auto"], ["proof (state)\nthis:\n  nth_least (lift (liset visible (llist_of_stream u))) k \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "assume 6: \"nth_least (lift (liset visible (llist_of_stream u))) k \\<le> j\""], ["proof (state)\nthis:\n  nth_least (lift (liset visible (llist_of_stream u))) k \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "assume 7: \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "have 8: \"Suc j \\<notin> lift (liset visible (llist_of_stream u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc j \\<notin> lift (liset visible (llist_of_stream u))", "proof (rule nth_least_not_contains)"], ["proof (state)\ngoal (3 subgoals):\n 1. enat (Suc ?n) < esize (lift (liset visible (llist_of_stream u)))\n 2. nth_least (lift (liset visible (llist_of_stream u))) ?n < Suc j\n 3. Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc ?n)", "show \"enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))", "using 3"], ["proof (prove)\nusing this:\n  enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))", "by this"], ["proof (state)\nthis:\n  enat (Suc k) < esize (lift (liset visible (llist_of_stream u)))\n\ngoal (2 subgoals):\n 1. nth_least (lift (liset visible (llist_of_stream u))) k < Suc j\n 2. Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)", "show \"nth_least (lift (liset visible (llist_of_stream u))) k < Suc j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_least (lift (liset visible (llist_of_stream u))) k < Suc j", "using 6"], ["proof (prove)\nusing this:\n  nth_least (lift (liset visible (llist_of_stream u))) k \\<le> j\n\ngoal (1 subgoal):\n 1. nth_least (lift (liset visible (llist_of_stream u))) k < Suc j", "by auto"], ["proof (state)\nthis:\n  nth_least (lift (liset visible (llist_of_stream u))) k < Suc j\n\ngoal (1 subgoal):\n 1. Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)", "show \"Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)", "using 5 7"], ["proof (prove)\nusing this:\n  i < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)\n  j < i\n\ngoal (1 subgoal):\n 1. Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)", "by simp"], ["proof (state)\nthis:\n  Suc j < nth_least (lift (liset visible (llist_of_stream u))) (Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc j \\<notin> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "have 9: \"j \\<notin> liset visible (llist_of_stream u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<notin> liset visible (llist_of_stream u)", "using 8"], ["proof (prove)\nusing this:\n  Suc j \\<notin> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. j \\<notin> liset visible (llist_of_stream u)", "by auto"], ["proof (state)\nthis:\n  j \\<notin> liset visible (llist_of_stream u)\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>nth_least (lift (liset visible (llist_of_stream u))) k\n                \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "show \"u !! j \\<notin> visible\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u !! j \\<notin> visible", "using 9"], ["proof (prove)\nusing this:\n  j \\<notin> liset visible (llist_of_stream u)\n\ngoal (1 subgoal):\n 1. u !! j \\<notin> visible", "by auto"], ["proof (state)\nthis:\n  u !! j \\<notin> visible\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int ((p ## trace u p) !!\n       nth_least (lift (liset visible (llist_of_stream u))) k) =\n  int ((p ## trace u p) !! i)\n\ngoal (2 subgoals):\n 1. \\<And>k i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        enat (Suc k) < esize (lift (liset visible (llist_of_stream u)));\n        nth_least (lift (liset visible (llist_of_stream u))) k < i;\n        i < nth_least (lift (liset visible (llist_of_stream u)))\n             (Suc k)\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         nth_least\n                          (lift (liset visible (llist_of_stream u))) k\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "show \"llist_of_stream (smap int (p ## trace u p)) ?! i = llist_of_stream (smap int (p ## trace u p)) ?!\n        nth_least (lift (liset visible (llist_of_stream u))) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_of_stream (smap int (p ## trace u p)) ?! i =\n    llist_of_stream (smap int (p ## trace u p)) ?!\n    nth_least (lift (liset visible (llist_of_stream u))) k", "using 6"], ["proof (prove)\nusing this:\n  int ((p ## trace u p) !!\n       nth_least (lift (liset visible (llist_of_stream u))) k) =\n  int ((p ## trace u p) !! i)\n\ngoal (1 subgoal):\n 1. llist_of_stream (smap int (p ## trace u p)) ?! i =\n    llist_of_stream (smap int (p ## trace u p)) ?!\n    nth_least (lift (liset visible (llist_of_stream u))) k", "by (metis lnth_list_of_stream snth_smap)"], ["proof (state)\nthis:\n  llist_of_stream (smap int (p ## trace u p)) ?! i =\n  llist_of_stream (smap int (p ## trace u p)) ?!\n  nth_least (lift (liset visible (llist_of_stream u))) k\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "assume 1: \"finite (lift (liset visible (llist_of_stream u)))\""], ["proof (state)\nthis:\n  finite (lift (liset visible (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "assume 3: \"Max (lift (liset visible (llist_of_stream u))) < i\""], ["proof (state)\nthis:\n  Max (lift (liset visible (llist_of_stream u))) < i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "have 4: \"int ((p ## trace u p) !! Max (lift (liset visible (llist_of_stream u)))) =\n        int ((p ## trace u p) !! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((p ## trace u p) !!\n         Max (lift (liset visible (llist_of_stream u)))) =\n    int ((p ## trace u p) !! i)", "proof (rule execute_inf_word_invisible)"], ["proof (state)\ngoal (3 subgoals):\n 1. run u p\n 2. Max (lift (liset visible (llist_of_stream u))) \\<le> i\n 3. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "show \"run u p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run u p", "using assms"], ["proof (prove)\nusing this:\n  run u p\n\ngoal (1 subgoal):\n 1. run u p", "by this"], ["proof (state)\nthis:\n  run u p\n\ngoal (2 subgoals):\n 1. Max (lift (liset visible (llist_of_stream u))) \\<le> i\n 2. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "show \"Max (lift (liset visible (llist_of_stream u))) \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (lift (liset visible (llist_of_stream u))) \\<le> i", "using 3"], ["proof (prove)\nusing this:\n  Max (lift (liset visible (llist_of_stream u))) < i\n\ngoal (1 subgoal):\n 1. Max (lift (liset visible (llist_of_stream u))) \\<le> i", "by auto"], ["proof (state)\nthis:\n  Max (lift (liset visible (llist_of_stream u))) \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "assume 6: \"Max (lift (liset visible (llist_of_stream u))) \\<le> j\""], ["proof (state)\nthis:\n  Max (lift (liset visible (llist_of_stream u))) \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "assume 7: \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "have 8: \"Suc j \\<notin> lift (liset visible (llist_of_stream u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc j \\<notin> lift (liset visible (llist_of_stream u))", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc j\n           \\<notin> lift\n                     (liset visible (llist_of_stream u)) \\<Longrightarrow>\n    False", "assume 9: \"\\<not> Suc j \\<notin> lift (liset visible (llist_of_stream u))\""], ["proof (state)\nthis:\n  \\<not> Suc j \\<notin> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. \\<not> Suc j\n           \\<notin> lift\n                     (liset visible (llist_of_stream u)) \\<Longrightarrow>\n    False", "have 10: \"Suc j \\<in> lift (liset visible (llist_of_stream u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc j \\<in> lift (liset visible (llist_of_stream u))", "using 9"], ["proof (prove)\nusing this:\n  \\<not> Suc j \\<notin> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. Suc j \\<in> lift (liset visible (llist_of_stream u))", "by simp"], ["proof (state)\nthis:\n  Suc j \\<in> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. \\<not> Suc j\n           \\<notin> lift\n                     (liset visible (llist_of_stream u)) \\<Longrightarrow>\n    False", "have 11: \"Suc j \\<le> Max (lift (liset visible (llist_of_stream u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc j \\<le> Max (lift (liset visible (llist_of_stream u)))", "using Max_ge 1 10"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?x \\<le> Max ?A\n  finite (lift (liset visible (llist_of_stream u)))\n  Suc j \\<in> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. Suc j \\<le> Max (lift (liset visible (llist_of_stream u)))", "by this"], ["proof (state)\nthis:\n  Suc j \\<le> Max (lift (liset visible (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. \\<not> Suc j\n           \\<notin> lift\n                     (liset visible (llist_of_stream u)) \\<Longrightarrow>\n    False", "show \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using 6 11"], ["proof (prove)\nusing this:\n  Max (lift (liset visible (llist_of_stream u))) \\<le> j\n  Suc j \\<le> Max (lift (liset visible (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc j \\<notin> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "have 9: \"j \\<notin> liset visible (llist_of_stream u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<notin> liset visible (llist_of_stream u)", "using 8"], ["proof (prove)\nusing this:\n  Suc j \\<notin> lift (liset visible (llist_of_stream u))\n\ngoal (1 subgoal):\n 1. j \\<notin> liset visible (llist_of_stream u)", "by auto"], ["proof (state)\nthis:\n  j \\<notin> liset visible (llist_of_stream u)\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Max (lift (liset visible (llist_of_stream u))) \\<le> ia;\n        ia < i\\<rbrakk>\n       \\<Longrightarrow> u !! ia \\<notin> visible", "show \"u !! j \\<notin> visible\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u !! j \\<notin> visible", "using 9"], ["proof (prove)\nusing this:\n  j \\<notin> liset visible (llist_of_stream u)\n\ngoal (1 subgoal):\n 1. u !! j \\<notin> visible", "by auto"], ["proof (state)\nthis:\n  u !! j \\<notin> visible\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int ((p ## trace u p) !! Max (lift (liset visible (llist_of_stream u)))) =\n  int ((p ## trace u p) !! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength (llist_of_stream (smap int (p ## trace u p)));\n        finite (lift (liset visible (llist_of_stream u)));\n        Max (lift (liset visible (llist_of_stream u))) < i\\<rbrakk>\n       \\<Longrightarrow> llist_of_stream (smap int (p ## trace u p)) ?! i =\n                         llist_of_stream (smap int (p ## trace u p)) ?!\n                         Max (lift (liset visible (llist_of_stream u)))", "show \"llist_of_stream (smap int (p ## trace u p)) ?! i = llist_of_stream (smap int (p ## trace u p)) ?!\n        Max (lift (liset visible (llist_of_stream u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_of_stream (smap int (p ## trace u p)) ?! i =\n    llist_of_stream (smap int (p ## trace u p)) ?!\n    Max (lift (liset visible (llist_of_stream u)))", "using 4"], ["proof (prove)\nusing this:\n  int ((p ## trace u p) !! Max (lift (liset visible (llist_of_stream u)))) =\n  int ((p ## trace u p) !! i)\n\ngoal (1 subgoal):\n 1. llist_of_stream (smap int (p ## trace u p)) ?! i =\n    llist_of_stream (smap int (p ## trace u p)) ?!\n    Max (lift (liset visible (llist_of_stream u)))", "by (metis lnth_list_of_stream snth_smap)"], ["proof (state)\nthis:\n  llist_of_stream (smap int (p ## trace u p)) ?! i =\n  llist_of_stream (smap int (p ## trace u p)) ?!\n  Max (lift (liset visible (llist_of_stream u)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma execute_fin_visible:\n      assumes \"path u q\" \"path v q\" \"u \\<preceq>\\<^sub>F\\<^sub>I w\" \"v \\<preceq>\\<^sub>F\\<^sub>I w\"\n      assumes \"project visible u = project visible v\"\n      shows \"int (target u q) = int (target v q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "obtain w' where 1: \"u \\<preceq>\\<^sub>F w'\" \"v \\<preceq>\\<^sub>F w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        \\<lbrakk>u \\<preceq>\\<^sub>F w'; v \\<preceq>\\<^sub>F w'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using subsume_fin assms(3, 4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u\\<^sub>1 \\<preceq>\\<^sub>F\\<^sub>I ?w;\n   ?v\\<^sub>1 \\<preceq>\\<^sub>F\\<^sub>I ?w;\n   \\<And>w\\<^sub>1.\n      \\<lbrakk>?u\\<^sub>1 \\<preceq>\\<^sub>F w\\<^sub>1;\n       ?v\\<^sub>1 \\<preceq>\\<^sub>F w\\<^sub>1\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  u \\<preceq>\\<^sub>F\\<^sub>I w\n  v \\<preceq>\\<^sub>F\\<^sub>I w\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        \\<lbrakk>u \\<preceq>\\<^sub>F w'; v \\<preceq>\\<^sub>F w'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by this"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>F w'\n  v \\<preceq>\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "obtain u' v' where 2: \"u @ u' =\\<^sub>F w'\" \"v @ v' =\\<^sub>F w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u' v'.\n        \\<lbrakk>u @ u' =\\<^sub>F w'; v @ v' =\\<^sub>F w'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>F w'\n  v \\<preceq>\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. (\\<And>u' v'.\n        \\<lbrakk>u @ u' =\\<^sub>F w'; v @ v' =\\<^sub>F w'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u @ u' =\\<^sub>F w'\n  v @ v' =\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have \"u @ u' =\\<^sub>F w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @ u' =\\<^sub>F w'", "using 2(1)"], ["proof (prove)\nusing this:\n  u @ u' =\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. u @ u' =\\<^sub>F w'", "by this"], ["proof (state)\nthis:\n  u @ u' =\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "also"], ["proof (state)\nthis:\n  u @ u' =\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have \"\\<dots> =\\<^sub>F v @ v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' =\\<^sub>F v @ v'", "using 2(2)"], ["proof (prove)\nusing this:\n  v @ v' =\\<^sub>F w'\n\ngoal (1 subgoal):\n 1. w' =\\<^sub>F v @ v'", "by blast"], ["proof (state)\nthis:\n  w' =\\<^sub>F v @ v'\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "finally"], ["proof (chain)\npicking this:\n  u @ u' =\\<^sub>F v @ v'", "have 3: \"u @ u' =\\<^sub>F v @ v'\""], ["proof (prove)\nusing this:\n  u @ u' =\\<^sub>F v @ v'\n\ngoal (1 subgoal):\n 1. u @ u' =\\<^sub>F v @ v'", "by this"], ["proof (state)\nthis:\n  u @ u' =\\<^sub>F v @ v'\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "obtain s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 where 4: \"u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2\" \"v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3\" \"Ind (set s\\<^sub>2) (set s\\<^sub>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        \\<lbrakk>u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2;\n         v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3;\n         Ind (set s\\<^sub>2) (set s\\<^sub>3)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using levi_lemma 3"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t @ ?u =\\<^sub>F ?v @ ?w;\n   \\<And>p r s q.\n      \\<lbrakk>?t =\\<^sub>F p @ r; ?u =\\<^sub>F s @ q; ?v =\\<^sub>F p @ s;\n       ?w =\\<^sub>F r @ q; Ind (set r) (set s)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  u @ u' =\\<^sub>F v @ v'\n\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        \\<lbrakk>u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2;\n         v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3;\n         Ind (set s\\<^sub>2) (set s\\<^sub>3)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by this"], ["proof (state)\nthis:\n  u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2\n  v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3\n  Ind (set s\\<^sub>2) (set s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 5: \"project visible (s\\<^sub>1 @ s\\<^sub>2) = project visible (s\\<^sub>1 @ s\\<^sub>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project visible (s\\<^sub>1 @ s\\<^sub>2) =\n    project visible (s\\<^sub>1 @ s\\<^sub>3)", "using eq_fin_lproject_visible assms(5) 4(1, 2)"], ["proof (prove)\nusing this:\n  ?u =\\<^sub>F ?v \\<Longrightarrow>\n  lproject visible (llist_of ?u) = lproject visible (llist_of ?v)\n  project visible u = project visible v\n  u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2\n  v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3\n\ngoal (1 subgoal):\n 1. project visible (s\\<^sub>1 @ s\\<^sub>2) =\n    project visible (s\\<^sub>1 @ s\\<^sub>3)", "by auto"], ["proof (state)\nthis:\n  project visible (s\\<^sub>1 @ s\\<^sub>2) =\n  project visible (s\\<^sub>1 @ s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 6: \"project visible s\\<^sub>2 = project visible s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project visible s\\<^sub>2 = project visible s\\<^sub>3", "using 5"], ["proof (prove)\nusing this:\n  project visible (s\\<^sub>1 @ s\\<^sub>2) =\n  project visible (s\\<^sub>1 @ s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. project visible s\\<^sub>2 = project visible s\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  project visible s\\<^sub>2 = project visible s\\<^sub>3\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 7: \"set (project visible s\\<^sub>2) = set (project visible s\\<^sub>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (project visible s\\<^sub>2) = set (project visible s\\<^sub>3)", "using 6"], ["proof (prove)\nusing this:\n  project visible s\\<^sub>2 = project visible s\\<^sub>3\n\ngoal (1 subgoal):\n 1. set (project visible s\\<^sub>2) = set (project visible s\\<^sub>3)", "by simp"], ["proof (state)\nthis:\n  set (project visible s\\<^sub>2) = set (project visible s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 8: \"set s\\<^sub>2 \\<inter> visible = set s\\<^sub>3 \\<inter> visible\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set s\\<^sub>2 \\<inter> visible = set s\\<^sub>3 \\<inter> visible", "using 7"], ["proof (prove)\nusing this:\n  set (project visible s\\<^sub>2) = set (project visible s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. set s\\<^sub>2 \\<inter> visible = set s\\<^sub>3 \\<inter> visible", "by auto"], ["proof (state)\nthis:\n  set s\\<^sub>2 \\<inter> visible = set s\\<^sub>3 \\<inter> visible\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 9: \"set s\\<^sub>2 \\<subseteq> invisible \\<or> set s\\<^sub>3 \\<subseteq> invisible\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set s\\<^sub>2 \\<subseteq> invisible \\<or>\n    set s\\<^sub>3 \\<subseteq> invisible", "using independence_invisible 4(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> visible; ?b \\<in> visible\\<rbrakk>\n  \\<Longrightarrow> \\<not> ind ?a ?b\n  Ind (set s\\<^sub>2) (set s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. set s\\<^sub>2 \\<subseteq> invisible \\<or>\n    set s\\<^sub>3 \\<subseteq> invisible", "by auto"], ["proof (state)\nthis:\n  set s\\<^sub>2 \\<subseteq> invisible \\<or>\n  set s\\<^sub>3 \\<subseteq> invisible\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 10: \"set s\\<^sub>2 \\<subseteq> invisible\" \"set s\\<^sub>3 \\<subseteq> invisible\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set s\\<^sub>2 \\<subseteq> invisible &&&\n    set s\\<^sub>3 \\<subseteq> invisible", "using 8 9"], ["proof (prove)\nusing this:\n  set s\\<^sub>2 \\<inter> visible = set s\\<^sub>3 \\<inter> visible\n  set s\\<^sub>2 \\<subseteq> invisible \\<or>\n  set s\\<^sub>3 \\<subseteq> invisible\n\ngoal (1 subgoal):\n 1. set s\\<^sub>2 \\<subseteq> invisible &&&\n    set s\\<^sub>3 \\<subseteq> invisible", "by auto"], ["proof (state)\nthis:\n  set s\\<^sub>2 \\<subseteq> invisible\n  set s\\<^sub>3 \\<subseteq> invisible\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 11: \"path s\\<^sub>2 (target s\\<^sub>1 q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path s\\<^sub>2 (target s\\<^sub>1 q)", "using eq_fin_word 4(1) assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?w\\<^sub>1 =\\<^sub>F ?w\\<^sub>2; path ?w\\<^sub>1 ?p\\<rbrakk>\n  \\<Longrightarrow> path ?w\\<^sub>2 ?p\n  u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2\n  path u q\n\ngoal (1 subgoal):\n 1. path s\\<^sub>2 (target s\\<^sub>1 q)", "by auto"], ["proof (state)\nthis:\n  path s\\<^sub>2 (target s\\<^sub>1 q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have 12: \"path s\\<^sub>3 (target s\\<^sub>1 q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path s\\<^sub>3 (target s\\<^sub>1 q)", "using eq_fin_word 4(2) assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?w\\<^sub>1 =\\<^sub>F ?w\\<^sub>2; path ?w\\<^sub>1 ?p\\<rbrakk>\n  \\<Longrightarrow> path ?w\\<^sub>2 ?p\n  v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3\n  path v q\n\ngoal (1 subgoal):\n 1. path s\\<^sub>3 (target s\\<^sub>1 q)", "by auto"], ["proof (state)\nthis:\n  path s\\<^sub>3 (target s\\<^sub>1 q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have \"int (fold ex u q) = int (fold ex (s\\<^sub>1 @ s\\<^sub>2) q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (target u q) = int (target (s\\<^sub>1 @ s\\<^sub>2) q)", "using eq_fin_execute assms(1) 4(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>path ?w\\<^sub>1 ?p; ?w\\<^sub>1 =\\<^sub>F ?w\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> target ?w\\<^sub>1 ?p = target ?w\\<^sub>2 ?p\n  path u q\n  u =\\<^sub>F s\\<^sub>1 @ s\\<^sub>2\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target (s\\<^sub>1 @ s\\<^sub>2) q)", "by simp"], ["proof (state)\nthis:\n  int (target u q) = int (target (s\\<^sub>1 @ s\\<^sub>2) q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "also"], ["proof (state)\nthis:\n  int (target u q) = int (target (s\\<^sub>1 @ s\\<^sub>2) q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have \"\\<dots> = int (fold ex s\\<^sub>1 q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (target (s\\<^sub>1 @ s\\<^sub>2) q) = int (target s\\<^sub>1 q)", "using execute_fin_word_invisible 11 10(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>path ?w ?p; set ?w \\<subseteq> invisible\\<rbrakk>\n  \\<Longrightarrow> int (target ?w ?p) = int ?p\n  path s\\<^sub>2 (target s\\<^sub>1 q)\n  set s\\<^sub>2 \\<subseteq> invisible\n\ngoal (1 subgoal):\n 1. int (target (s\\<^sub>1 @ s\\<^sub>2) q) = int (target s\\<^sub>1 q)", "by simp"], ["proof (state)\nthis:\n  int (target (s\\<^sub>1 @ s\\<^sub>2) q) = int (target s\\<^sub>1 q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "also"], ["proof (state)\nthis:\n  int (target (s\\<^sub>1 @ s\\<^sub>2) q) = int (target s\\<^sub>1 q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have \"\\<dots> = int (fold ex (s\\<^sub>1 @ s\\<^sub>3) q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (target s\\<^sub>1 q) = int (target (s\\<^sub>1 @ s\\<^sub>3) q)", "using execute_fin_word_invisible 12 10(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>path ?w ?p; set ?w \\<subseteq> invisible\\<rbrakk>\n  \\<Longrightarrow> int (target ?w ?p) = int ?p\n  path s\\<^sub>3 (target s\\<^sub>1 q)\n  set s\\<^sub>3 \\<subseteq> invisible\n\ngoal (1 subgoal):\n 1. int (target s\\<^sub>1 q) = int (target (s\\<^sub>1 @ s\\<^sub>3) q)", "by simp"], ["proof (state)\nthis:\n  int (target s\\<^sub>1 q) = int (target (s\\<^sub>1 @ s\\<^sub>3) q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "also"], ["proof (state)\nthis:\n  int (target s\\<^sub>1 q) = int (target (s\\<^sub>1 @ s\\<^sub>3) q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "have \"\\<dots> = int (fold ex v q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (target (s\\<^sub>1 @ s\\<^sub>3) q) = int (target v q)", "using eq_fin_execute assms(2) 4(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>path ?w\\<^sub>1 ?p; ?w\\<^sub>1 =\\<^sub>F ?w\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> target ?w\\<^sub>1 ?p = target ?w\\<^sub>2 ?p\n  path v q\n  v =\\<^sub>F s\\<^sub>1 @ s\\<^sub>3\n\ngoal (1 subgoal):\n 1. int (target (s\\<^sub>1 @ s\\<^sub>3) q) = int (target v q)", "by simp"], ["proof (state)\nthis:\n  int (target (s\\<^sub>1 @ s\\<^sub>3) q) = int (target v q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "finally"], ["proof (chain)\npicking this:\n  int (target u q) = int (target v q)", "show ?thesis"], ["proof (prove)\nusing this:\n  int (target u q) = int (target v q)\n\ngoal (1 subgoal):\n 1. int (target u q) = int (target v q)", "by this"], ["proof (state)\nthis:\n  int (target u q) = int (target v q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma execute_inf_visible:\n      assumes \"run u q\" \"run v q\" \"u \\<preceq>\\<^sub>I w\" \"v \\<preceq>\\<^sub>I w\"\n      assumes \"lproject visible (llist_of_stream u) = lproject visible (llist_of_stream v)\"\n      shows \"snth (smap int (q ## trace u q)) \\<approx> snth (smap int (q ## trace v q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (!!) (smap int (q ## trace u q)) \\<approx>\n    (!!) (smap int (q ## trace v q))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (!!) (smap int (q ## trace u q)) \\<approx>\n    (!!) (smap int (q ## trace v q))", "have 1: \"lnth (llist_of_stream (smap int (q ## trace u q))) \\<approx>\n        lnth (llist_of_stream (smap int (q ## trace v q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?!) (llist_of_stream (smap int (q ## trace u q))) \\<approx>\n    (?!) (llist_of_stream (smap int (q ## trace v q)))", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. linfinite (llist_of_stream (smap int (q ## trace u q)))\n 2. linfinite (llist_of_stream (smap int (q ## trace v q)))\n 3. stutter_selection ?s (llist_of_stream (smap int (q ## trace u q)))\n 4. stutter_selection ?t (llist_of_stream (smap int (q ## trace v q)))\n 5. lselect ?s (llist_of_stream (smap int (q ## trace u q))) =\n    lselect ?t (llist_of_stream (smap int (q ## trace v q)))", "show \"linfinite (llist_of_stream (smap int (q ## trace u q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linfinite (llist_of_stream (smap int (q ## trace u q)))", "by simp"], ["proof (state)\nthis:\n  linfinite (llist_of_stream (smap int (q ## trace u q)))\n\ngoal (4 subgoals):\n 1. linfinite (llist_of_stream (smap int (q ## trace v q)))\n 2. stutter_selection ?s (llist_of_stream (smap int (q ## trace u q)))\n 3. stutter_selection ?t (llist_of_stream (smap int (q ## trace v q)))\n 4. lselect ?s (llist_of_stream (smap int (q ## trace u q))) =\n    lselect ?t (llist_of_stream (smap int (q ## trace v q)))", "show \"linfinite (llist_of_stream (smap int (q ## trace v q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linfinite (llist_of_stream (smap int (q ## trace v q)))", "by simp"], ["proof (state)\nthis:\n  linfinite (llist_of_stream (smap int (q ## trace v q)))\n\ngoal (3 subgoals):\n 1. stutter_selection ?s (llist_of_stream (smap int (q ## trace u q)))\n 2. stutter_selection ?t (llist_of_stream (smap int (q ## trace v q)))\n 3. lselect ?s (llist_of_stream (smap int (q ## trace u q))) =\n    lselect ?t (llist_of_stream (smap int (q ## trace v q)))", "show \"stutter_selection (lift (liset visible (llist_of_stream u))) (llist_of_stream (smap int (q ## trace u q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stutter_selection (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))", "using stutter_selection_lproject_visible assms(1)"], ["proof (prove)\nusing this:\n  run ?u ?p \\<Longrightarrow>\n  stutter_selection (lift (liset visible (llist_of_stream ?u)))\n   (llist_of_stream (smap int (?p ## trace ?u ?p)))\n  run u q\n\ngoal (1 subgoal):\n 1. stutter_selection (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))", "by this"], ["proof (state)\nthis:\n  stutter_selection (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q)))\n\ngoal (2 subgoals):\n 1. stutter_selection ?t (llist_of_stream (smap int (q ## trace v q)))\n 2. lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q))) =\n    lselect ?t (llist_of_stream (smap int (q ## trace v q)))", "show \"stutter_selection (lift (liset visible (llist_of_stream v))) (llist_of_stream (smap int (q ## trace v q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stutter_selection (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q)))", "using stutter_selection_lproject_visible assms(2)"], ["proof (prove)\nusing this:\n  run ?u ?p \\<Longrightarrow>\n  stutter_selection (lift (liset visible (llist_of_stream ?u)))\n   (llist_of_stream (smap int (?p ## trace ?u ?p)))\n  run v q\n\ngoal (1 subgoal):\n 1. stutter_selection (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q)))", "by this"], ["proof (state)\nthis:\n  stutter_selection (lift (liset visible (llist_of_stream v)))\n   (llist_of_stream (smap int (q ## trace v q)))\n\ngoal (1 subgoal):\n 1. lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q))) =\n    lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q)))", "show \"lselect (lift (liset visible (llist_of_stream u))) (llist_of_stream (smap int (q ## trace u q))) =\n          lselect (lift (liset visible (llist_of_stream v))) (llist_of_stream (smap int (q ## trace v q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q))) =\n    lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"llength (lselect (lift (liset visible (llist_of_stream u)))\n            (llist_of_stream (smap int (q ## trace u q)))) = eSuc (llength (lproject visible (llist_of_stream u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    eSuc (llength (lproject visible (llist_of_stream u)))", "by (simp add: lselect_llength)"], ["proof (state)\nthis:\n  llength\n   (lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))) =\n  eSuc (llength (lproject visible (llist_of_stream u)))\n\ngoal (2 subgoals):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "also"], ["proof (state)\nthis:\n  llength\n   (lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))) =\n  eSuc (llength (lproject visible (llist_of_stream u)))\n\ngoal (2 subgoals):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"\\<dots> = eSuc (llength (lproject visible (llist_of_stream v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (llength (lproject visible (llist_of_stream u))) =\n    eSuc (llength (lproject visible (llist_of_stream v)))", "unfolding assms(5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (llength (lproject visible (llist_of_stream v))) =\n    eSuc (llength (lproject visible (llist_of_stream v)))", "by rule"], ["proof (state)\nthis:\n  eSuc (llength (lproject visible (llist_of_stream u))) =\n  eSuc (llength (lproject visible (llist_of_stream v)))\n\ngoal (2 subgoals):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "also"], ["proof (state)\nthis:\n  eSuc (llength (lproject visible (llist_of_stream u))) =\n  eSuc (llength (lproject visible (llist_of_stream v)))\n\ngoal (2 subgoals):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"\\<dots> = llength (lselect (lift (liset visible (llist_of_stream v)))\n            (llist_of_stream (smap int (q ## trace v q))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (llength (lproject visible (llist_of_stream v))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))", "by (simp add: lselect_llength)"], ["proof (state)\nthis:\n  eSuc (llength (lproject visible (llist_of_stream v))) =\n  llength\n   (lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))))\n\ngoal (2 subgoals):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n 2. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "finally"], ["proof (chain)\npicking this:\n  llength\n   (lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))) =\n  llength\n   (lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))))", "show \"llength (lselect (lift (liset visible (llist_of_stream u)))\n            (llist_of_stream (smap int (q ## trace u q)))) = llength (lselect (lift (liset visible (llist_of_stream v)))\n            (llist_of_stream (smap int (q ## trace v q))))\""], ["proof (prove)\nusing this:\n  llength\n   (lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))) =\n  llength\n   (lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))))\n\ngoal (1 subgoal):\n 1. llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q)))) =\n    llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))", "by this"], ["proof (state)\nthis:\n  llength\n   (lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q)))) =\n  llength\n   (lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "assume 1:\n            \"enat i < llength (lselect (lift (liset visible (llist_of_stream u)))\n              (llist_of_stream (smap int (q ## trace u q))))\"\n            \"enat i < llength (lselect (lift (liset visible (llist_of_stream v)))\n              (llist_of_stream (smap int (q ## trace v q))))\""], ["proof (state)\nthis:\n  enat i\n  < llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q))))\n  enat i\n  < llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have 2:\n            \"enat i \\<le> llength (lproject visible (llist_of_stream u))\"\n            \"enat i \\<le> llength (lproject visible (llist_of_stream v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat i \\<le> llength (lproject visible (llist_of_stream u)) &&&\n    enat i \\<le> llength (lproject visible (llist_of_stream v))", "using 1"], ["proof (prove)\nusing this:\n  enat i\n  < llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q))))\n  enat i\n  < llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n\ngoal (1 subgoal):\n 1. enat i \\<le> llength (lproject visible (llist_of_stream u)) &&&\n    enat i \\<le> llength (lproject visible (llist_of_stream v))", "by (simp add: lselect_llength)+"], ["proof (state)\nthis:\n  enat i \\<le> llength (lproject visible (llist_of_stream u))\n  enat i \\<le> llength (lproject visible (llist_of_stream v))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "define k where \"k \\<equiv> nth_least (lift (liset visible (llist_of_stream u))) i\""], ["proof (state)\nthis:\n  k \\<equiv> nth_least (lift (liset visible (llist_of_stream u))) i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "define l where \"l \\<equiv> nth_least (lift (liset visible (llist_of_stream v))) i\""], ["proof (state)\nthis:\n  l \\<equiv> nth_least (lift (liset visible (llist_of_stream v))) i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"lselect (lift (liset visible (llist_of_stream u))) (llist_of_stream (smap int (q ## trace u q))) ?! i =\n            int ((q ## trace u q) !! nth_least (lift (liset visible (llist_of_stream u))) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q))) ?!\n    i =\n    int ((q ## trace u q) !!\n         nth_least (lift (liset visible (llist_of_stream u))) i)", "by (metis 1(1) lnth_list_of_stream lselect_lnth snth_smap)"], ["proof (state)\nthis:\n  lselect (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q))) ?!\n  i =\n  int ((q ## trace u q) !!\n       nth_least (lift (liset visible (llist_of_stream u))) i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "also"], ["proof (state)\nthis:\n  lselect (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q))) ?!\n  i =\n  int ((q ## trace u q) !!\n       nth_least (lift (liset visible (llist_of_stream u))) i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"\\<dots> = int ((q ## trace u q) !! k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((q ## trace u q) !!\n         nth_least (lift (liset visible (llist_of_stream u))) i) =\n    int ((q ## trace u q) !! k)", "unfolding k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((q ## trace u q) !!\n         nth_least (lift (liset visible (llist_of_stream u))) i) =\n    int ((q ## trace u q) !!\n         nth_least (lift (liset visible (llist_of_stream u))) i)", "by rule"], ["proof (state)\nthis:\n  int ((q ## trace u q) !!\n       nth_least (lift (liset visible (llist_of_stream u))) i) =\n  int ((q ## trace u q) !! k)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "also"], ["proof (state)\nthis:\n  int ((q ## trace u q) !!\n       nth_least (lift (liset visible (llist_of_stream u))) i) =\n  int ((q ## trace u q) !! k)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"\\<dots> = int ((q ## trace v q) !! l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((q ## trace u q) !! k) = int ((q ## trace v q) !! l)", "unfolding sscan_scons_snth"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (target (stake k u) q) = int (target (stake l v) q)", "proof (rule execute_fin_visible)"], ["proof (state)\ngoal (5 subgoals):\n 1. path (stake k u) q\n 2. path (stake l v) q\n 3. stake k u \\<preceq>\\<^sub>F\\<^sub>I ?w\n 4. stake l v \\<preceq>\\<^sub>F\\<^sub>I ?w\n 5. project visible (stake k u) = project visible (stake l v)", "show \"path (stake k u) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path (stake k u) q", "using assms(1)"], ["proof (prove)\nusing this:\n  run u q\n\ngoal (1 subgoal):\n 1. path (stake k u) q", "by (metis run_shift_elim stake_sdrop)"], ["proof (state)\nthis:\n  path (stake k u) q\n\ngoal (4 subgoals):\n 1. path (stake l v) q\n 2. stake k u \\<preceq>\\<^sub>F\\<^sub>I ?w\n 3. stake l v \\<preceq>\\<^sub>F\\<^sub>I ?w\n 4. project visible (stake k u) = project visible (stake l v)", "show \"path (stake l v) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path (stake l v) q", "using assms(2)"], ["proof (prove)\nusing this:\n  run v q\n\ngoal (1 subgoal):\n 1. path (stake l v) q", "by (metis run_shift_elim stake_sdrop)"], ["proof (state)\nthis:\n  path (stake l v) q\n\ngoal (3 subgoals):\n 1. stake k u \\<preceq>\\<^sub>F\\<^sub>I ?w\n 2. stake l v \\<preceq>\\<^sub>F\\<^sub>I ?w\n 3. project visible (stake k u) = project visible (stake l v)", "show \"stake k u \\<preceq>\\<^sub>F\\<^sub>I w\" \"stake l v \\<preceq>\\<^sub>F\\<^sub>I w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stake k u \\<preceq>\\<^sub>F\\<^sub>I w &&&\n    stake l v \\<preceq>\\<^sub>F\\<^sub>I w", "using assms(3, 4)"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>I w\n  v \\<preceq>\\<^sub>I w\n\ngoal (1 subgoal):\n 1. stake k u \\<preceq>\\<^sub>F\\<^sub>I w &&&\n    stake l v \\<preceq>\\<^sub>F\\<^sub>I w", "by auto"], ["proof (state)\nthis:\n  stake k u \\<preceq>\\<^sub>F\\<^sub>I w\n  stake l v \\<preceq>\\<^sub>F\\<^sub>I w\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "have \"project visible (stake k u) =\n              list_of (lproject visible (llist_of (stake k u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project visible (stake k u) =\n    list_of (lproject visible (llist_of (stake k u)))", "by simp"], ["proof (state)\nthis:\n  project visible (stake k u) =\n  list_of (lproject visible (llist_of (stake k u)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "also"], ["proof (state)\nthis:\n  project visible (stake k u) =\n  list_of (lproject visible (llist_of (stake k u)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "have \"\\<dots> = list_of (lproject visible (ltake (enat k) (llist_of_stream u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (lproject visible (llist_of (stake k u))) =\n    list_of (lproject visible (ltake (enat k) (llist_of_stream u)))", "by (metis length_stake llength_llist_of llist_of_inf_llist_prefix lprefix_ltake prefix_fininf_prefix)"], ["proof (state)\nthis:\n  list_of (lproject visible (llist_of (stake k u))) =\n  list_of (lproject visible (ltake (enat k) (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "also"], ["proof (state)\nthis:\n  list_of (lproject visible (llist_of (stake k u))) =\n  list_of (lproject visible (ltake (enat k) (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "have \"\\<dots> = list_of (ltake (enat i) (lproject visible (llist_of_stream u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (lproject visible (ltake (enat k) (llist_of_stream u))) =\n    list_of (ltake (enat i) (lproject visible (llist_of_stream u)))", "unfolding k_def lproject_ltake[OF 2(1)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (ltake (enat i) (lproject visible (llist_of_stream u))) =\n    list_of (ltake (enat i) (lproject visible (llist_of_stream u)))", "by rule"], ["proof (state)\nthis:\n  list_of (lproject visible (ltake (enat k) (llist_of_stream u))) =\n  list_of (ltake (enat i) (lproject visible (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "also"], ["proof (state)\nthis:\n  list_of (lproject visible (ltake (enat k) (llist_of_stream u))) =\n  list_of (ltake (enat i) (lproject visible (llist_of_stream u)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "have \"\\<dots> = list_of (ltake (enat i) (lproject visible (llist_of_stream v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (ltake (enat i) (lproject visible (llist_of_stream u))) =\n    list_of (ltake (enat i) (lproject visible (llist_of_stream v)))", "unfolding assms(5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (ltake (enat i) (lproject visible (llist_of_stream v))) =\n    list_of (ltake (enat i) (lproject visible (llist_of_stream v)))", "by rule"], ["proof (state)\nthis:\n  list_of (ltake (enat i) (lproject visible (llist_of_stream u))) =\n  list_of (ltake (enat i) (lproject visible (llist_of_stream v)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "also"], ["proof (state)\nthis:\n  list_of (ltake (enat i) (lproject visible (llist_of_stream u))) =\n  list_of (ltake (enat i) (lproject visible (llist_of_stream v)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "have \"\\<dots> = list_of (lproject visible (ltake (enat l) (llist_of_stream v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (ltake (enat i) (lproject visible (llist_of_stream v))) =\n    list_of (lproject visible (ltake (enat l) (llist_of_stream v)))", "unfolding l_def lproject_ltake[OF 2(2)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (ltake (enat i) (lproject visible (llist_of_stream v))) =\n    list_of (ltake (enat i) (lproject visible (llist_of_stream v)))", "by rule"], ["proof (state)\nthis:\n  list_of (ltake (enat i) (lproject visible (llist_of_stream v))) =\n  list_of (lproject visible (ltake (enat l) (llist_of_stream v)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "also"], ["proof (state)\nthis:\n  list_of (ltake (enat i) (lproject visible (llist_of_stream v))) =\n  list_of (lproject visible (ltake (enat l) (llist_of_stream v)))\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "have \"\\<dots> = project visible (stake l v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (lproject visible (ltake (enat l) (llist_of_stream v))) =\n    project visible (stake l v)", "by (metis length_stake lfilter_llist_of list_of_llist_of llength_llist_of\n                llist_of_inf_llist_prefix lprefix_ltake prefix_fininf_prefix)"], ["proof (state)\nthis:\n  list_of (lproject visible (ltake (enat l) (llist_of_stream v))) =\n  project visible (stake l v)\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "finally"], ["proof (chain)\npicking this:\n  project visible (stake k u) = project visible (stake l v)", "show \"project visible (stake k u) = project visible (stake l v)\""], ["proof (prove)\nusing this:\n  project visible (stake k u) = project visible (stake l v)\n\ngoal (1 subgoal):\n 1. project visible (stake k u) = project visible (stake l v)", "by this"], ["proof (state)\nthis:\n  project visible (stake k u) = project visible (stake l v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int ((q ## trace u q) !! k) = int ((q ## trace v q) !! l)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "also"], ["proof (state)\nthis:\n  int ((q ## trace u q) !! k) = int ((q ## trace v q) !! l)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"\\<dots> = int ((q ## trace v q) !! nth_least (lift (liset visible (llist_of_stream v))) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((q ## trace v q) !! l) =\n    int ((q ## trace v q) !!\n         nth_least (lift (liset visible (llist_of_stream v))) i)", "unfolding l_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((q ## trace v q) !!\n         nth_least (lift (liset visible (llist_of_stream v))) i) =\n    int ((q ## trace v q) !!\n         nth_least (lift (liset visible (llist_of_stream v))) i)", "by simp"], ["proof (state)\nthis:\n  int ((q ## trace v q) !! l) =\n  int ((q ## trace v q) !!\n       nth_least (lift (liset visible (llist_of_stream v))) i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "also"], ["proof (state)\nthis:\n  int ((q ## trace v q) !! l) =\n  int ((q ## trace v q) !!\n       nth_least (lift (liset visible (llist_of_stream v))) i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "have \"\\<dots> = lselect (lift (liset visible (llist_of_stream v)))\n            (llist_of_stream (smap int (q ## trace v q))) ?! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((q ## trace v q) !!\n         nth_least (lift (liset visible (llist_of_stream v))) i) =\n    lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))) ?!\n    i", "using 1"], ["proof (prove)\nusing this:\n  enat i\n  < llength\n     (lselect (lift (liset visible (llist_of_stream u)))\n       (llist_of_stream (smap int (q ## trace u q))))\n  enat i\n  < llength\n     (lselect (lift (liset visible (llist_of_stream v)))\n       (llist_of_stream (smap int (q ## trace v q))))\n\ngoal (1 subgoal):\n 1. int ((q ## trace v q) !!\n         nth_least (lift (liset visible (llist_of_stream v))) i) =\n    lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))) ?!\n    i", "by (metis lnth_list_of_stream lselect_lnth snth_smap)"], ["proof (state)\nthis:\n  int ((q ## trace v q) !!\n       nth_least (lift (liset visible (llist_of_stream v))) i) =\n  lselect (lift (liset visible (llist_of_stream v)))\n   (llist_of_stream (smap int (q ## trace v q))) ?!\n  i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat i\n                < llength\n                   (lselect (lift (liset visible (llist_of_stream u)))\n                     (llist_of_stream (smap int (q ## trace u q))));\n        enat i\n        < llength\n           (lselect (lift (liset visible (llist_of_stream v)))\n             (llist_of_stream (smap int (q ## trace v q))))\\<rbrakk>\n       \\<Longrightarrow> lselect (lift (liset visible (llist_of_stream u)))\n                          (llist_of_stream (smap int (q ## trace u q))) ?!\n                         i =\n                         lselect (lift (liset visible (llist_of_stream v)))\n                          (llist_of_stream (smap int (q ## trace v q))) ?!\n                         i", "finally"], ["proof (chain)\npicking this:\n  lselect (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q))) ?!\n  i =\n  lselect (lift (liset visible (llist_of_stream v)))\n   (llist_of_stream (smap int (q ## trace v q))) ?!\n  i", "show \"lselect (lift (liset visible (llist_of_stream u)))\n            (llist_of_stream (smap int (q ## trace u q))) ?! i = lselect (lift (liset visible (llist_of_stream v)))\n            (llist_of_stream (smap int (q ## trace v q))) ?! i\""], ["proof (prove)\nusing this:\n  lselect (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q))) ?!\n  i =\n  lselect (lift (liset visible (llist_of_stream v)))\n   (llist_of_stream (smap int (q ## trace v q))) ?!\n  i\n\ngoal (1 subgoal):\n 1. lselect (lift (liset visible (llist_of_stream u)))\n     (llist_of_stream (smap int (q ## trace u q))) ?!\n    i =\n    lselect (lift (liset visible (llist_of_stream v)))\n     (llist_of_stream (smap int (q ## trace v q))) ?!\n    i", "by this"], ["proof (state)\nthis:\n  lselect (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q))) ?!\n  i =\n  lselect (lift (liset visible (llist_of_stream v)))\n   (llist_of_stream (smap int (q ## trace v q))) ?!\n  i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lselect (lift (liset visible (llist_of_stream u)))\n   (llist_of_stream (smap int (q ## trace u q))) =\n  lselect (lift (liset visible (llist_of_stream v)))\n   (llist_of_stream (smap int (q ## trace v q)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?!) (llist_of_stream (smap int (q ## trace u q))) \\<approx>\n  (?!) (llist_of_stream (smap int (q ## trace v q)))\n\ngoal (1 subgoal):\n 1. (!!) (smap int (q ## trace u q)) \\<approx>\n    (!!) (smap int (q ## trace v q))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (!!) (smap int (q ## trace u q)) \\<approx>\n    (!!) (smap int (q ## trace v q))", "using 1"], ["proof (prove)\nusing this:\n  (?!) (llist_of_stream (smap int (q ## trace u q))) \\<approx>\n  (?!) (llist_of_stream (smap int (q ## trace v q)))\n\ngoal (1 subgoal):\n 1. (!!) (smap int (q ## trace u q)) \\<approx>\n    (!!) (smap int (q ## trace v q))", "by simp"], ["proof (state)\nthis:\n  (!!) (smap int (q ## trace u q)) \\<approx>\n  (!!) (smap int (q ## trace v q))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}