{"file_name": "/home/qj213/afp-2021-10-22/thys/List_Update/MTF2_Effects.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List_Update", "problem_names": ["lemma difind_difelem: \n       \"i < length xs \\<Longrightarrow> distinct xs \\<Longrightarrow> xs ! j = a \\<Longrightarrow> j < length xs \\<Longrightarrow> i \\<noteq> j \n          \\<Longrightarrow> ~ a = xs ! i\"", "lemma fullchar: assumes  \"index xs q < length xs\"\n  shows \n    \"(i < length xs) =\n  (index xs q < i \\<and> i < length xs\n    \\<or> index xs q = i\n    \\<or> index xs q - n \\<le> i \\<and> i < index xs q\n    \\<or> i < index xs q - n)\"", "lemma mtf2_effect:\n    \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>( index (mtf2 n q xs) (xs!i) = index xs (xs!i) \\<and> index xs q < index (mtf2 n q xs) (xs!i) \\<and> index (mtf2 n q xs) (xs!i) < length xs))\n    \\<and> (index xs q = i \\<longrightarrow> (index (mtf2 n q xs) (xs!i) = index xs q - n \\<and> index (mtf2 n q xs) (xs!i) = index xs q - n))\n    \\<and> (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow> (index (mtf2 n q xs) (xs!i) = Suc (index xs (xs!i)) \\<and> index xs q - n < index (mtf2 n q xs) (xs!i) \\<and> index (mtf2 n q xs) (xs!i) \\<le> index xs q))\n    \\<and> (i < index xs q - n \\<longrightarrow> (index (mtf2 n q xs) (xs!i) = index xs (xs!i) \\<and> index (mtf2 n q xs) (xs!i) < index xs q - n))\"", "lemma mtf2_forward_effect1:\n  \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q < i \\<and> i < length xs \n      \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs (xs ! i) \\<and> index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs\" and    \n  mtf2_forward_effect2: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q = i\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!i) = index xs q - n \\<and> index xs q - n = index (mtf2 n q xs) (xs!i)\" and    \n  mtf2_forward_effect3: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q - n \\<le> i \\<and> i < index xs q\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!i) = Suc (index xs (xs!i)) \\<and> index xs q - n < index (mtf2 n q xs) (xs!i) \\<and> index (mtf2 n q xs) (xs!i) \\<le> index xs q\" and    \n  mtf2_forward_effect4: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> i < index xs q - n \n      \\<Longrightarrow> index (mtf2 n q xs) (xs!i) = index xs (xs!i) \\<and> index (mtf2 n q xs) (xs!i) < index xs q - n\"", "lemma yes[simp]: \"index xs x < length xs \n      \\<Longrightarrow> (xs!index xs x ) = x\"", "lemma mtf2_forward_effect1':\n  \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q < index xs x \\<and> index xs x < length xs \n      \\<Longrightarrow> index (mtf2 n q xs) x = index xs x \\<and> index xs q < index (mtf2 n q xs) x \\<and> index (mtf2 n q xs) x < length xs\"", "lemma\n mtf2_forward_effect2': \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q = index xs x\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!index xs x) = index xs q - n \\<and> index xs q - n = index (mtf2 n q xs) (xs!index xs x)\"", "lemma\n  mtf2_forward_effect3': \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q - n \\<le> index xs x \\<Longrightarrow> index xs x < index xs q\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!index xs x) = Suc (index xs (xs!index xs x)) \\<and> index xs q - n < index (mtf2 n q xs) (xs!index xs x) \\<and> index (mtf2 n q xs) (xs!index xs x) \\<le> index xs q\"", "lemma    \n  mtf2_forward_effect4': \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs x < index xs q - n \n      \\<Longrightarrow> index (mtf2 n q xs) (xs!index xs x) = index xs (xs!index xs x) \\<and> index (mtf2 n q xs) (xs!index xs x) < index xs q - n\"", "lemma splitit: \" (index xs q < i \\<and> i < length xs  \\<Longrightarrow> P)\n     \\<Longrightarrow> (index xs q = i \\<Longrightarrow> P)\n     \\<Longrightarrow> (index xs q - n \\<le> i \\<and> i < index xs q \\<Longrightarrow> P)\n     \\<Longrightarrow> (i < index xs q - n \\<Longrightarrow> P)\n   \\<Longrightarrow> (i < length xs \\<Longrightarrow> P)\"", "lemma mtf2_forward_beforeq: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> i < index xs q \n        \\<Longrightarrow> index (mtf2 n q xs) (xs!i) \\<le> index xs q\"", "lemma x_stays_before_y_if_y_not_moved_to_front:\n  assumes \"q \\<in> set xs\" \"distinct xs\" \"x \\<in> set xs\" \"y \\<in> set xs\" \"y \\<noteq> q\"\n   and \"x < y in xs\"\n  shows \"x < y in (mtf2 n q xs)\"", "lemma x_stays_before_y_if_y_not_moved_to_front_2dir: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow>  y \\<in> set xs \\<Longrightarrow> y \\<noteq> q \\<Longrightarrow> \n      x < y in xs = x < y in (mtf2 n q xs)\"", "lemma mtf2_backwards_effect1:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\" \n    \"index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs\"\n    \"i < length xs\"\n  shows  \"index xs q <  i \\<and> i  < length xs\"", "lemma mtf2_backwards_effect2:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\" \"index (mtf2 n q xs) (xs ! i) = index xs q - n\"\n    \"i < length xs\" \n    shows \"index xs q = i\"", "lemma mtf2_backwards_effect3:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\"\n    \"index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) \\<le> index xs q\"\n    \"i < length xs\"\n  shows \"index xs q - n \\<le> i \\<and> i < index xs q\"", "lemma mtf2_backwards_effect4:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\"\n   \"index (mtf2 n q xs) (xs ! i) < index xs q - n\"\n   \"i < length xs\" \n  shows \"i < index xs q - n\"", "lemma mtf2_backwards_effect4':\n assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\"\n  \"index (mtf2 n q xs) x < index xs q - n\"\n  \"x \\<in> set xs\"\n shows \"(index xs x) < index xs q - n\"", "lemma \n  assumes distA: \"distinct A\" and\n          asm: \"q \\<in> set A\"\n  shows \n      mtf2_mono:  \"q< x in A \\<Longrightarrow> q < x in (mtf2 n q A)\" and\n      mtf2_q_after: \"index (mtf2 n q A) q =  index A q - n\"", "lemma swapsthrough: \"distinct xs \\<Longrightarrow> q \\<in> set xs \\<Longrightarrow> index ( swaps [index xs q - entf..<index xs q] xs ) q = index xs q - entf\"", "lemma mtf2_moves_to_front: \"distinct xs \\<Longrightarrow> q \\<in> set xs \\<Longrightarrow> index (mtf2 (length xs) q xs) q  = 0\"", "lemma xy_relativorder_mtf2:\n  assumes \n    \"q\\<noteq>x\" \"q\\<noteq>y\" \"distinct xs\" \"x\\<in>set xs\" \"y\\<in>set xs\" \"q\\<in>set xs\"\n  shows \"x < y in mtf2 n q xs\n          = x < y in xs\"", "lemma mtf2_moves_to_frontm1: \"distinct xs \\<Longrightarrow> q \\<in> set xs \\<Longrightarrow> index (mtf2 (length xs -1) q xs) q  = 0\"", "lemma mtf2_moves_to_front': \"distinct xs \\<Longrightarrow> y \\<in> set xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> x\\<noteq>y \\<Longrightarrow> x < y in mtf2 (length xs-1) x xs = True\"", "lemma mtf2_moves_to_front'': \"distinct xs \\<Longrightarrow> y \\<in> set xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> x\\<noteq>y \\<Longrightarrow> x < y in mtf2 (length xs) x xs = True\""], "translations": [["", "lemma difind_difelem: \n       \"i < length xs \\<Longrightarrow> distinct xs \\<Longrightarrow> xs ! j = a \\<Longrightarrow> j < length xs \\<Longrightarrow> i \\<noteq> j \n          \\<Longrightarrow> ~ a = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; distinct xs; xs ! j = a; j < length xs;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> xs ! i", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; distinct xs; xs ! j = a; j < length xs;\n     i \\<noteq> j; \\<not> a \\<noteq> xs ! i\\<rbrakk>\n    \\<Longrightarrow> False", "by(metis index_nth_id)"], ["", "lemma fullchar: assumes  \"index xs q < length xs\"\n  shows \n    \"(i < length xs) =\n  (index xs q < i \\<and> i < length xs\n    \\<or> index xs q = i\n    \\<or> index xs q - n \\<le> i \\<and> i < index xs q\n    \\<or> i < index xs q - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < length xs) =\n    (index xs q < i \\<and> i < length xs \\<or>\n     index xs q = i \\<or>\n     index xs q - n \\<le> i \\<and> i < index xs q \\<or> i < index xs q - n)", "using assms"], ["proof (prove)\nusing this:\n  index xs q < length xs\n\ngoal (1 subgoal):\n 1. (i < length xs) =\n    (index xs q < i \\<and> i < length xs \\<or>\n     index xs q = i \\<or>\n     index xs q - n \\<le> i \\<and> i < index xs q \\<or> i < index xs q - n)", "by auto"], ["", "lemma mtf2_effect:\n    \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>( index (mtf2 n q xs) (xs!i) = index xs (xs!i) \\<and> index xs q < index (mtf2 n q xs) (xs!i) \\<and> index (mtf2 n q xs) (xs!i) < length xs))\n    \\<and> (index xs q = i \\<longrightarrow> (index (mtf2 n q xs) (xs!i) = index xs q - n \\<and> index (mtf2 n q xs) (xs!i) = index xs q - n))\n    \\<and> (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow> (index (mtf2 n q xs) (xs!i) = Suc (index xs (xs!i)) \\<and> index xs q - n < index (mtf2 n q xs) (xs!i) \\<and> index (mtf2 n q xs) (xs!i) \\<le> index xs q))\n    \\<and> (i < index xs q - n \\<longrightarrow> (index (mtf2 n q xs) (xs!i) = index xs (xs!i) \\<and> index (mtf2 n q xs) (xs!i) < index xs q - n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index (mtf2 n q xs) (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n                       index (mtf2 n q xs) (xs ! i) < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index (mtf2 n q xs) (xs ! i) = index xs q - n \\<and>\n                       index (mtf2 n q xs) (xs ! i) = index xs q - n) \\<and>\n                      (index xs q - n \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index (mtf2 n q xs) (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n                       index (mtf2 n q xs) (xs ! i) \\<le> index xs q) \\<and>\n                      (i < index xs q - n \\<longrightarrow>\n                       index (mtf2 n q xs) (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index (mtf2 n q xs) (xs ! i) < index xs q - n)", "unfolding mtf2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - n..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - n \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - n) \\<and>\n                      (index xs q - n \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - n\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - n..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - n \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - n)", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> (index xs q < i \\<and>\n                                   i < length xs \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index xs q\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < length xs) \\<and>\n                                  (index xs q = i \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n) \\<and>\n                                  (index xs q - n \\<le> i \\<and>\n                                   i < index xs q \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   Suc (index xs (xs ! i)) \\<and>\n                                   index xs q - n\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   \\<le> index xs q) \\<and>\n                                  (i < index xs q - n \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < index xs q - n);\n        q \\<in> set xs; distinct xs\\<rbrakk>\n       \\<Longrightarrow> (index xs q < i \\<and>\n                          i < length xs \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index xs q\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < length xs) \\<and>\n                         (index xs q = i \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n) \\<and>\n                         (index xs q - Suc n \\<le> i \\<and>\n                          i < index xs q \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          Suc (index xs (xs ! i)) \\<and>\n                          index xs q - Suc n\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          \\<le> index xs q) \\<and>\n                         (i < index xs q - Suc n \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < index xs q - Suc n)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> (index xs q < i \\<and>\n                                   i < length xs \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index xs q\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < length xs) \\<and>\n                                  (index xs q = i \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n) \\<and>\n                                  (index xs q - n \\<le> i \\<and>\n                                   i < index xs q \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   Suc (index xs (xs ! i)) \\<and>\n                                   index xs q - n\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   \\<le> index xs q) \\<and>\n                                  (i < index xs q - n \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < index xs q - n);\n        q \\<in> set xs; distinct xs\\<rbrakk>\n       \\<Longrightarrow> (index xs q < i \\<and>\n                          i < length xs \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index xs q\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < length xs) \\<and>\n                         (index xs q = i \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n) \\<and>\n                         (index xs q - Suc n \\<le> i \\<and>\n                          i < index xs q \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          Suc (index xs (xs ! i)) \\<and>\n                          index xs q - Suc n\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          \\<le> index xs q) \\<and>\n                         (i < index xs q - Suc n \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < index xs q - Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n  \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i) =\n                     index xs (xs ! i) \\<and>\n                     index xs q\n                     < index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) \\<and>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i)\n                     < length xs) \\<and>\n                    (index xs q = i \\<longrightarrow>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i) =\n                     index xs q - n \\<and>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i) =\n                     index xs q - n) \\<and>\n                    (index xs q - n \\<le> i \\<and>\n                     i < index xs q \\<longrightarrow>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i) =\n                     Suc (index xs (xs ! i)) \\<and>\n                     index xs q - n\n                     < index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - n..<index xs q] xs\n                         else xs)\n                        (xs ! i) \\<and>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i)\n                     \\<le> index xs q) \\<and>\n                    (i < index xs q - n \\<longrightarrow>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i) =\n                     index xs (xs ! i) \\<and>\n                     index\n                      (if q \\<in> set xs\n                       then swaps [index xs q - n..<index xs q] xs else xs)\n                      (xs ! i)\n                     < index xs q - n)\n  q \\<in> set xs\n  distinct xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> (index xs q < i \\<and>\n                                   i < length xs \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index xs q\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < length xs) \\<and>\n                                  (index xs q = i \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n) \\<and>\n                                  (index xs q - n \\<le> i \\<and>\n                                   i < index xs q \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   Suc (index xs (xs ! i)) \\<and>\n                                   index xs q - n\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   \\<le> index xs q) \\<and>\n                                  (i < index xs q - n \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < index xs q - n);\n        q \\<in> set xs; distinct xs\\<rbrakk>\n       \\<Longrightarrow> (index xs q < i \\<and>\n                          i < length xs \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index xs q\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < length xs) \\<and>\n                         (index xs q = i \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n) \\<and>\n                         (index xs q - Suc n \\<le> i \\<and>\n                          i < index xs q \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          Suc (index xs (xs ! i)) \\<and>\n                          index xs q - Suc n\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          \\<le> index xs q) \\<and>\n                         (i < index xs q - Suc n \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < index xs q - Suc n)", "note indH=Suc(1)[OF Suc(2) Suc(3), simplified Suc(2) if_True]"], ["proof (state)\nthis:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n) \\<and>\n  (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - n\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - n \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) < index xs q - n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> (index xs q < i \\<and>\n                                   i < length xs \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index xs q\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < length xs) \\<and>\n                                  (index xs q = i \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n) \\<and>\n                                  (index xs q - n \\<le> i \\<and>\n                                   i < index xs q \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   Suc (index xs (xs ! i)) \\<and>\n                                   index xs q - n\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   \\<le> index xs q) \\<and>\n                                  (i < index xs q - n \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < index xs q - n);\n        q \\<in> set xs; distinct xs\\<rbrakk>\n       \\<Longrightarrow> (index xs q < i \\<and>\n                          i < length xs \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index xs q\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < length xs) \\<and>\n                         (index xs q = i \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n) \\<and>\n                         (index xs q - Suc n \\<le> i \\<and>\n                          i < index xs q \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          Suc (index xs (xs ! i)) \\<and>\n                          index xs q - Suc n\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          \\<le> index xs q) \\<and>\n                         (i < index xs q - Suc n \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < index xs q - Suc n)", "note qinxs=Suc(2)[simp]"], ["proof (state)\nthis:\n  q \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> (index xs q < i \\<and>\n                                   i < length xs \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index xs q\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < length xs) \\<and>\n                                  (index xs q = i \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n) \\<and>\n                                  (index xs q - n \\<le> i \\<and>\n                                   i < index xs q \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   Suc (index xs (xs ! i)) \\<and>\n                                   index xs q - n\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   \\<le> index xs q) \\<and>\n                                  (i < index xs q - n \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < index xs q - n);\n        q \\<in> set xs; distinct xs\\<rbrakk>\n       \\<Longrightarrow> (index xs q < i \\<and>\n                          i < length xs \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index xs q\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < length xs) \\<and>\n                         (index xs q = i \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n) \\<and>\n                         (index xs q - Suc n \\<le> i \\<and>\n                          i < index xs q \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          Suc (index xs (xs ! i)) \\<and>\n                          index xs q - Suc n\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          \\<le> index xs q) \\<and>\n                         (i < index xs q - Suc n \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < index xs q - Suc n)", "note distxs=Suc(3)[simp]"], ["proof (state)\nthis:\n  distinct xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> (index xs q < i \\<and>\n                                   i < length xs \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index xs q\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < length xs) \\<and>\n                                  (index xs q = i \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs q - n) \\<and>\n                                  (index xs q - n \\<le> i \\<and>\n                                   i < index xs q \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   Suc (index xs (xs ! i)) \\<and>\n                                   index xs q - n\n                                   < index\n(if q \\<in> set xs then swaps [index xs q - n..<index xs q] xs else xs)\n(xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   \\<le> index xs q) \\<and>\n                                  (i < index xs q - n \\<longrightarrow>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i) =\n                                   index xs (xs ! i) \\<and>\n                                   index\n                                    (if q \\<in> set xs\n                                     then swaps\n     [index xs q - n..<index xs q] xs\n                                     else xs)\n                                    (xs ! i)\n                                   < index xs q - n);\n        q \\<in> set xs; distinct xs\\<rbrakk>\n       \\<Longrightarrow> (index xs q < i \\<and>\n                          i < length xs \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index xs q\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < length xs) \\<and>\n                         (index xs q = i \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs q - Suc n) \\<and>\n                         (index xs q - Suc n \\<le> i \\<and>\n                          i < index xs q \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          Suc (index xs (xs ! i)) \\<and>\n                          index xs q - Suc n\n                          < index\n                             (if q \\<in> set xs\n                              then swaps [index xs q - Suc n..<index xs q]\n                                    xs\n                              else xs)\n                             (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          \\<le> index xs q) \\<and>\n                         (i < index xs q - Suc n \\<longrightarrow>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i) =\n                          index xs (xs ! i) \\<and>\n                          index\n                           (if q \\<in> set xs\n                            then swaps [index xs q - Suc n..<index xs q] xs\n                            else xs)\n                           (xs ! i)\n                          < index xs q - Suc n)", "show ?case (is ?toshow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index\n        (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n         else xs)\n        (xs ! i) \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs q - Suc n \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index\n        (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n         else xs)\n        (xs ! i) \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i)\n     < index xs q - Suc n)", "apply(simp only: qinxs if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "proof (cases \"index xs q \\<ge> Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "case True"], ["proof (state)\nthis:\n  Suc n \\<le> index xs q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "note True1=this"], ["proof (state)\nthis:\n  Suc n \\<le> index xs q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "from True"], ["proof (chain)\npicking this:\n  Suc n \\<le> index xs q", "have onemore: \"[index xs q - Suc n..<index xs q] = (index xs q - Suc n) # [index xs q - n..<index xs q]\""], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n\ngoal (1 subgoal):\n 1. [index xs q - Suc n..<index xs q] =\n    (index xs q - Suc n) # [index xs q - n..<index xs q]", "using Suc_diff_Suc upt_rec"], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  [?i..<?j] = (if ?i < ?j then ?i # [Suc ?i..<?j] else [])\n\ngoal (1 subgoal):\n 1. [index xs q - Suc n..<index xs q] =\n    (index xs q - Suc n) # [index xs q - n..<index xs q]", "by auto"], ["proof (state)\nthis:\n  [index xs q - Suc n..<index xs q] =\n  (index xs q - Suc n) # [index xs q - n..<index xs q]\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "from onemore"], ["proof (chain)\npicking this:\n  [index xs q - Suc n..<index xs q] =\n  (index xs q - Suc n) # [index xs q - n..<index xs q]", "have yeah: \"swaps [index xs q - Suc n..<index xs q] xs\n            = swap (index xs q - Suc n) (swaps  [index xs q - n..<index xs q] xs)\""], ["proof (prove)\nusing this:\n  [index xs q - Suc n..<index xs q] =\n  (index xs q - Suc n) # [index xs q - n..<index xs q]\n\ngoal (1 subgoal):\n 1. swaps [index xs q - Suc n..<index xs q] xs =\n    swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs)", "by auto"], ["proof (state)\nthis:\n  swaps [index xs q - Suc n..<index xs q] xs =\n  swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "have sis: \"Suc (index xs q - Suc n) = index xs q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) = index xs q - n", "using True Suc_diff_Suc"], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) = index xs q - n", "by auto"], ["proof (state)\nthis:\n  Suc (index xs q - Suc n) = index xs q - n\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "have indq: \"index xs q < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q < length xs", "apply(rule index_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. q \\<in> set xs\n 2. length xs \\<le> length xs", "by auto"], ["proof (state)\nthis:\n  index xs q < length xs\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "let ?i' = \"index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "let ?x = \"(xs!i)\" and  ?xs=\"(swaps  [index xs q - n..<index xs q] xs)\"\n              and ?n=\"(index xs q - Suc n)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "have \"?i'\n          =  index (swap (index xs q - Suc n) (swaps  [index xs q - n..<index xs q] xs)) (xs!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index\n     (swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs))\n     (xs ! i)", "using yeah"], ["proof (prove)\nusing this:\n  swaps [index xs q - Suc n..<index xs q] xs =\n  swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index\n     (swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs))\n     (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index (swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs))\n   (xs ! i)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index (swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs))\n   (xs ! i)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "have \"\\<dots> = (if ?x = ?xs ! ?n then Suc ?n else if ?x = ?xs ! Suc ?n then ?n else index ?xs ?x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index\n     (swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs))\n     (xs ! i) =\n    (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i))", "apply(rule index_swap_distinct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)", "apply(simp add: sis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - n < length xs", "using indq"], ["proof (prove)\nusing this:\n  index xs q < length xs\n\ngoal (1 subgoal):\n 1. index xs q - n < length xs", "by linarith"], ["proof (state)\nthis:\n  index (swap (index xs q - Suc n) (swaps [index xs q - n..<index xs q] xs))\n   (xs ! i) =\n  (if xs ! i = swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n   then Suc (index xs q - Suc n)\n   else if xs ! i =\n           swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n        then index xs q - Suc n\n        else index (swaps [index xs q - n..<index xs q] xs) (xs ! i))\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "finally"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  (if xs ! i = swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n   then Suc (index xs q - Suc n)\n   else if xs ! i =\n           swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n        then index xs q - Suc n\n        else index (swaps [index xs q - n..<index xs q] xs) (xs ! i))", "have i': \"?i' = (if ?x = ?xs ! ?n then Suc ?n else if ?x = ?xs ! Suc ?n then ?n else index ?xs ?x)\""], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  (if xs ! i = swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n   then Suc (index xs q - Suc n)\n   else if xs ! i =\n           swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n        then index xs q - Suc n\n        else index (swaps [index xs q - n..<index xs q] xs) (xs ! i))\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i))", "."], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  (if xs ! i = swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n   then Suc (index xs q - Suc n)\n   else if xs ! i =\n           swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n        then index xs q - Suc n\n        else index (swaps [index xs q - n..<index xs q] xs) (xs ! i))\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "let ?i''=\"index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)\n 2. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "show \"(index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs (xs ! i) \\<and>\n     index xs q < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < index xs q - Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "apply(intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. index xs q < i \\<and> i < length xs \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index xs q\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs\n 2. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 4. i < index xs q - Suc n \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "apply(intro impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. index xs q < i \\<and> i < length xs \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index xs q\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs\n 2. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 4. i < index xs q - Suc n \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "apply(elim conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 4. i < index xs q - Suc n \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. i < index xs q - Suc n \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 2. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 3. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 4. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "apply(intro impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 2. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 3. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 4. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 3. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 4. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n", "apply(intro impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. index xs q - Suc n \\<le> i \\<and> i < index xs q \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 3. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 4. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n", "apply(elim conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 3. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 4. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 4. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs", "apply(intro impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n\n 4. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "proof (goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "case 1"], ["proof (state)\nthis:\n  index xs q < i\n  i < length xs\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have indH1: \"(index xs q < i \\<and> i < length xs \\<longrightarrow>\n                      ?i'' =  index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "using indH"], ["proof (prove)\nusing this:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n) \\<and>\n  (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - n\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - n \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) < index xs q - n)\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index xs q < i \\<and> i < length xs \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "assume ass: \"index xs q < i\" and ass2:\"i < length xs\""], ["proof (state)\nthis:\n  index xs q < i\n  i < length xs\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "then"], ["proof (chain)\npicking this:\n  index xs q < i\n  i < length xs", "have a: \"?i'' =  index xs (xs ! i)\""], ["proof (prove)\nusing this:\n  index xs q < i\n  i < length xs\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "using indH1"], ["proof (prove)\nusing this:\n  index xs q < i\n  i < length xs\n  index xs q < i \\<and> i < length xs \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have a': \"\\<dots> = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "apply(rule index_nth_id)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "using ass2"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "by(auto)"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "finally"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) = i", "have ii: \"?i'' = i\""], ["proof (prove)\nusing this:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) = i\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) = i", "."], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) = i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have fstF: \"~ ?x = ?xs ! ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using indq"], ["proof (prove)\nusing this:\n  index xs q < length xs\n\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ass2"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ass2"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ii ass"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) = i\n  index xs q < i\n\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have sndF: \"~ ?x = ?xs ! Suc ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using indq True"], ["proof (prove)\nusing this:\n  index xs q < length xs\n  Suc n \\<le> index xs q\n\ngoal (5 subgoals):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: Suc_diff_Suc less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ass2"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ass2"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ii ass Suc_diff_Suc True"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) = i\n  index xs q < i\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  Suc n \\<le> index xs q\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have \"?i' = index xs (xs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "unfolding i'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    index xs (xs ! i)", "using fstF sndF a"], ["proof (prove)\nusing this:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    index xs (xs ! i)", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>index xs q < i; i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      index xs (xs ! i) \\<and>\n                      index xs q\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      < length xs\n 2. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 3. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 4. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "then"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)", "show ?case"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index xs q\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs", "using a' ass ass2"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n  index xs (xs ! i) = i\n  index xs q < i\n  i < length xs\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index xs q\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i) \\<and>\n  index xs q\n  < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "case 2"], ["proof (state)\nthis:\n  index xs q = i\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have indH2: \"index xs q = i \\<longrightarrow> ?i'' = index xs (xs ! i) - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) - n", "using indH"], ["proof (prove)\nusing this:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n) \\<and>\n  (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - n\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - n \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) < index xs q - n)\n\ngoal (1 subgoal):\n 1. index xs q = i \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) - n", "by auto"], ["proof (state)\nthis:\n  index xs q = i \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i) - n\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "assume \"index xs q = i\""], ["proof (state)\nthis:\n  index xs q = i\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "then"], ["proof (chain)\npicking this:\n  index xs q = i", "have ass: \"i = index xs q\""], ["proof (prove)\nusing this:\n  index xs q = i\n\ngoal (1 subgoal):\n 1. i = index xs q", "by auto"], ["proof (state)\nthis:\n  i = index xs q\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "with indH2"], ["proof (chain)\npicking this:\n  index xs q = i \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i) - n\n  i = index xs q", "have a: \"i - n = ?i''\""], ["proof (prove)\nusing this:\n  index xs q = i \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i) - n\n  i = index xs q\n\ngoal (1 subgoal):\n 1. i - n = index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  i - n = index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "from ass"], ["proof (chain)\npicking this:\n  i = index xs q", "have c: \"index xs (xs ! i) = i\""], ["proof (prove)\nusing this:\n  i = index xs q\n\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "by auto"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have \"Suc (index xs q - Suc n) = i - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) = i - n", "using ass True Suc_diff_Suc"], ["proof (prove)\nusing this:\n  i = index xs q\n  Suc n \\<le> index xs q\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) = i - n", "by auto"], ["proof (state)\nthis:\n  Suc (index xs q - Suc n) = i - n\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "also"], ["proof (state)\nthis:\n  Suc (index xs q - Suc n) = i - n\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have \"\\<dots> = ?i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i - n = index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using a"], ["proof (prove)\nusing this:\n  i - n = index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. i - n = index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  i - n = index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "finally"], ["proof (chain)\npicking this:\n  Suc (index xs q - Suc n) =\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "have a: \"Suc ?n = ?i''\""], ["proof (prove)\nusing this:\n  Suc (index xs q - Suc n) =\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) =\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "."], ["proof (state)\nthis:\n  Suc (index xs q - Suc n) =\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have sndTrue: \"?x = ?xs ! Suc ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i =\n    swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)", "apply(simp add: a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i =\n    swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)", "by (simp add: ass)"], ["proof (state)\nthis:\n  xs ! i = swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have fstFalse: \"~ ?x = ?xs ! ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using indq True"], ["proof (prove)\nusing this:\n  index xs q < length xs\n  Suc n \\<le> index xs q\n\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: Suc_diff_Suc less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ass"], ["proof (prove)\nusing this:\n  i = index xs q\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ass"], ["proof (prove)\nusing this:\n  i = index xs q\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using a"], ["proof (prove)\nusing this:\n  Suc (index xs q - Suc n) =\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have \"?i' = index xs (xs ! index xs q) - Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! index xs q) - Suc n", "unfolding i'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    index xs (xs ! index xs q) - Suc n", "using sndTrue fstFalse"], ["proof (prove)\nusing this:\n  xs ! i = swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    index xs (xs ! index xs q) - Suc n", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! index xs q) - Suc n\n\ngoal (3 subgoals):\n 1. index xs q = i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n\n 2. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 3. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "with ass"], ["proof (chain)\npicking this:\n  i = index xs q\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! index xs q) - Suc n", "show ?case"], ["proof (prove)\nusing this:\n  i = index xs q\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! index xs q) - Suc n\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs q - Suc n \\<and>\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs q - Suc n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "case 3"], ["proof (state)\nthis:\n  index xs q - Suc n \\<le> i\n  i < index xs q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have indH3: \"index xs q - n \\<le> i \\<and> i < index xs q\n              \\<longrightarrow>  ?i'' = Suc (index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i))", "using indH"], ["proof (prove)\nusing this:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n) \\<and>\n  (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - n\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - n \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) < index xs q - n)\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i))", "by auto"], ["proof (state)\nthis:\n  index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "assume ass: \"index xs q - Suc n \\<le> i\" and\n              ass2: \"i < index xs q\""], ["proof (state)\nthis:\n  index xs q - Suc n \\<le> i\n  i < index xs q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "from ass2"], ["proof (chain)\npicking this:\n  i < index xs q", "have ilen: \"i < length xs\""], ["proof (prove)\nusing this:\n  i < index xs q\n\ngoal (1 subgoal):\n 1. i < length xs", "using indq dual_order.strict_trans"], ["proof (prove)\nusing this:\n  i < index xs q\n  index xs q < length xs\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. i < length xs", "by blast"], ["proof (state)\nthis:\n  i < length xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>index xs q - Suc n \\<le> i; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i) =\n                      Suc (index xs (xs ! i)) \\<and>\n                      index xs q - Suc n\n                      < index (swaps [index xs q - Suc n..<index xs q] xs)\n                         (xs ! i) \\<and>\n                      index (swaps [index xs q - Suc n..<index xs q] xs)\n                       (xs ! i)\n                      \\<le> index xs q\n 2. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "proof (cases \"index xs q - n \\<le> i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "case False"], ["proof (state)\nthis:\n  \\<not> index xs q - n \\<le> i\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "then"], ["proof (chain)\npicking this:\n  \\<not> index xs q - n \\<le> i", "have \"i < index xs q - n\""], ["proof (prove)\nusing this:\n  \\<not> index xs q - n \\<le> i\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "by auto"], ["proof (state)\nthis:\n  i < index xs q - n\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "moreover"], ["proof (state)\nthis:\n  i < index xs q - n\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have \"(i < index xs q - n \\<longrightarrow> ?i'' = index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < index xs q - n \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "using indH"], ["proof (prove)\nusing this:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n) \\<and>\n  (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - n\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - n \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) < index xs q - n)\n\ngoal (1 subgoal):\n 1. i < index xs q - n \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "by auto"], ["proof (state)\nthis:\n  i < index xs q - n \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "ultimately"], ["proof (chain)\npicking this:\n  i < index xs q - n\n  i < index xs q - n \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)", "have d: \"?i'' = index xs (xs ! i)\""], ["proof (prove)\nusing this:\n  i < index xs q - n\n  i < index xs q - n \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "from False ass"], ["proof (chain)\npicking this:\n  \\<not> index xs q - n \\<le> i\n  index xs q - Suc n \\<le> i", "have b: \"index xs q - Suc n = i\""], ["proof (prove)\nusing this:\n  \\<not> index xs q - n \\<le> i\n  index xs q - Suc n \\<le> i\n\ngoal (1 subgoal):\n 1. index xs q - Suc n = i", "by auto"], ["proof (state)\nthis:\n  index xs q - Suc n = i\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have \"index xs q < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q < length xs", "apply(rule index_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. q \\<in> set xs\n 2. length xs \\<le> length xs", "by (auto)"], ["proof (state)\nthis:\n  index xs q < length xs\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have c: \"index xs (xs ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "apply(rule index_nth_id)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs", "using indq ass2"], ["proof (prove)\nusing this:\n  index xs q < length xs\n  i < index xs q\n\ngoal (1 subgoal):\n 1. i < length xs", "using less_trans"], ["proof (prove)\nusing this:\n  index xs q < length xs\n  i < index xs q\n  \\<lbrakk>?x < ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. i < length xs", "by blast"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "from b c d"], ["proof (chain)\npicking this:\n  index xs q - Suc n = i\n  index xs (xs ! i) = i\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)", "have f: \"?i'' = index xs q - Suc n\""], ["proof (prove)\nusing this:\n  index xs q - Suc n = i\n  index xs (xs ! i) = i\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs q - Suc n", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs q - Suc n\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have fstT: \"?xs ! ?n = ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n) = xs ! i", "apply(simp only: f[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i", "apply(rule nth_index)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)", "by (simp add: ilen)"], ["proof (state)\nthis:\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n) = xs ! i\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have \"?i' = Suc (index xs q - Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs q - Suc n)", "unfolding i'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    Suc (index xs q - Suc n)", "using fstT"], ["proof (prove)\nusing this:\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n) = xs ! i\n\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    Suc (index xs q - Suc n)", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs q - Suc n)\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs q - Suc n)\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have \"\\<dots> = Suc (index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) = Suc (index xs (xs ! i))", "by(simp only: b c)"], ["proof (state)\nthis:\n  Suc (index xs q - Suc n) = Suc (index xs (xs ! i))\n\ngoal (2 subgoals):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q\n 2. \\<not> index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "finally"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))", "show ?thesis"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "using c False ass"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n  index xs (xs ! i) = i\n  \\<not> index xs q - n \\<le> i\n  index xs q - Suc n \\<le> i\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i)) \\<and>\n  index xs q - Suc n\n  < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n  \\<le> index xs q\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "case True"], ["proof (state)\nthis:\n  index xs q - n \\<le> i\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "with ass2 indH3"], ["proof (chain)\npicking this:\n  i < index xs q\n  index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n  index xs q - n \\<le> i", "have a: \"?i'' = Suc (index xs (xs ! i))\""], ["proof (prove)\nusing this:\n  i < index xs q\n  index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n  index xs q - n \\<le> i\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i))", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have jo: \"index xs (xs ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "apply(rule index_nth_id)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "by(auto)"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have fstF: \"~ ?x = ?xs ! ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using indq"], ["proof (prove)\nusing this:\n  index xs q < length xs\n\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp only: a jo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq> Suc i", "using True"], ["proof (prove)\nusing this:\n  index xs q - n \\<le> i\n\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq> Suc i", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have sndF: \"~ ?x = ?xs ! Suc ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using True1"], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n\ngoal (5 subgoals):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: Suc_diff_Suc less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp only: a jo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq> Suc i", "using True1"], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq> Suc i", "apply (simp add: Suc_diff_Suc less_imp_diff_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> index xs q \\<Longrightarrow> index xs q - n \\<noteq> Suc i", "using True"], ["proof (prove)\nusing this:\n  index xs q - n \\<le> i\n\ngoal (1 subgoal):\n 1. Suc n \\<le> index xs q \\<Longrightarrow> index xs q - n \\<noteq> Suc i", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "have \"?i' = Suc (index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i))", "unfolding i'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    Suc (index xs (xs ! i))", "using fstF sndF a"], ["proof (prove)\nusing this:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    Suc (index xs (xs ! i))", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "then"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))", "show ?thesis"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "using ass ass2 jo"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i))\n  index xs q - Suc n \\<le> i\n  i < index xs q\n  index xs (xs ! i) = i\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    Suc (index xs (xs ! i)) \\<and>\n    index xs q - Suc n\n    < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    \\<le> index xs q", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i)) \\<and>\n  index xs q - Suc n\n  < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n  \\<le> index xs q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  Suc (index xs (xs ! i)) \\<and>\n  index xs q - Suc n\n  < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n  \\<le> index xs q\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "case 4"], ["proof (state)\nthis:\n  i < index xs q - Suc n\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "assume ass: \"i < index xs q - Suc n\""], ["proof (state)\nthis:\n  i < index xs q - Suc n\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "then"], ["proof (chain)\npicking this:\n  i < index xs q - Suc n", "have ass2: \"i < index xs q - n\""], ["proof (prove)\nusing this:\n  i < index xs q - Suc n\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "by auto"], ["proof (state)\nthis:\n  i < index xs q - n\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "moreover"], ["proof (state)\nthis:\n  i < index xs q - n\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have \"(i < index xs q - n \\<longrightarrow> ?i'' = index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < index xs q - n \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "using indH"], ["proof (prove)\nusing this:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs q - n) \\<and>\n  (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - n\n   < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - n \\<longrightarrow>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - n..<index xs q] xs) (xs ! i) < index xs q - n)\n\ngoal (1 subgoal):\n 1. i < index xs q - n \\<longrightarrow>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "by auto"], ["proof (state)\nthis:\n  i < index xs q - n \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "ultimately"], ["proof (chain)\npicking this:\n  i < index xs q - n\n  i < index xs q - n \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)", "have a: \"?i'' = index xs (xs ! i)\""], ["proof (prove)\nusing this:\n  i < index xs q - n\n  i < index xs q - n \\<longrightarrow>\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "from ass2"], ["proof (chain)\npicking this:\n  i < index xs q - n", "have \"i < index xs q\""], ["proof (prove)\nusing this:\n  i < index xs q - n\n\ngoal (1 subgoal):\n 1. i < index xs q", "by auto"], ["proof (state)\nthis:\n  i < index xs q\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "then"], ["proof (chain)\npicking this:\n  i < index xs q", "have ilen: \"i < length xs\""], ["proof (prove)\nusing this:\n  i < index xs q\n\ngoal (1 subgoal):\n 1. i < length xs", "using indq dual_order.strict_trans"], ["proof (prove)\nusing this:\n  i < index xs q\n  index xs q < length xs\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. i < length xs", "by blast"], ["proof (state)\nthis:\n  i < length xs\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have jo: \"index xs (xs ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "apply(rule index_nth_id)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "by(auto)"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have fstF: \"~ ?x = ?xs ! ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using indq"], ["proof (prove)\nusing this:\n  index xs q < length xs\n\ngoal (5 subgoals):\n 1. index xs q - Suc n < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp only: a jo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq> i", "using ass"], ["proof (prove)\nusing this:\n  i < index xs q - Suc n\n\ngoal (1 subgoal):\n 1. index xs q - Suc n \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have sndF: \"~ ?x = ?xs ! Suc ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<noteq>\n    swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)", "apply(rule difind_difelem[where j=\"index (swaps [index xs q - n..<index xs q] xs) (xs!i)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using True1"], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n\ngoal (5 subgoals):\n 1. Suc (index xs q - Suc n)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. distinct (swaps [index xs q - n..<index xs q] xs)\n 3. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 4. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 5. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply (simp add: Suc_diff_Suc less_imp_diff_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (swaps [index xs q - n..<index xs q] xs)\n 2. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 3. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 4. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. swaps [index xs q - n..<index xs q] xs !\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n    xs ! i\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule nth_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n    < length (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(rule index_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set (swaps [index xs q - n..<index xs q] xs)\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "using ilen"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (3 subgoals):\n 1. xs ! i \\<in> set xs\n 2. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 3. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (swaps [index xs q - n..<index xs q] xs)\n    \\<le> length (swaps [index xs q - n..<index xs q] xs)\n 2. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq>\n    index (swaps [index xs q - n..<index xs q] xs) (xs ! i)", "apply(simp only: a jo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq> i", "using True1"], ["proof (prove)\nusing this:\n  Suc n \\<le> index xs q\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc n) \\<noteq> i", "apply (simp add: Suc_diff_Suc less_imp_diff_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> index xs q \\<Longrightarrow> index xs q - n \\<noteq> i", "using ass"], ["proof (prove)\nusing this:\n  i < index xs q - Suc n\n\ngoal (1 subgoal):\n 1. Suc n \\<le> index xs q \\<Longrightarrow> index xs q - n \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "have \"?i' = (index xs (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i)", "unfolding i'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    index xs (xs ! i)", "using fstF sndF a"], ["proof (prove)\nusing this:\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n  xs ! i \\<noteq>\n  swaps [index xs q - n..<index xs q] xs ! Suc (index xs q - Suc n)\n  index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. (if xs ! i =\n        swaps [index xs q - n..<index xs q] xs ! (index xs q - Suc n)\n     then Suc (index xs q - Suc n)\n     else if xs ! i =\n             swaps [index xs q - n..<index xs q] xs !\n             Suc (index xs q - Suc n)\n          then index xs q - Suc n\n          else index (swaps [index xs q - n..<index xs q] xs) (xs ! i)) =\n    index xs (xs ! i)", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. i < index xs q - Suc n \\<Longrightarrow>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "then"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)", "show ?case"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "using jo ass"], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i)\n  index xs (xs ! i) = i\n  i < index xs q - Suc n\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n    index xs (xs ! i) \\<and>\n    index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n    < index xs q - Suc n", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n  index xs (xs ! i) \\<and>\n  index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n  < index xs q - Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs q - Suc n \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs q - Suc n) \\<and>\n  (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - Suc n\n   < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - Suc n \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n   < index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "case False"], ["proof (state)\nthis:\n  \\<not> Suc n \\<le> index xs q\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<not> Suc n \\<le> index xs q", "have smalla: \"index xs q - Suc n = index xs q - n\""], ["proof (prove)\nusing this:\n  \\<not> Suc n \\<le> index xs q\n\ngoal (1 subgoal):\n 1. index xs q - Suc n = index xs q - n", "by auto"], ["proof (state)\nthis:\n  index xs q - Suc n = index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "then"], ["proof (chain)\npicking this:\n  index xs q - Suc n = index xs q - n", "have nomore: \"swaps [index xs q - Suc n..<index xs q] xs\n            =swaps [index xs q - n..<index xs q] xs\""], ["proof (prove)\nusing this:\n  index xs q - Suc n = index xs q - n\n\ngoal (1 subgoal):\n 1. swaps [index xs q - Suc n..<index xs q] xs =\n    swaps [index xs q - n..<index xs q] xs", "by auto"], ["proof (state)\nthis:\n  swaps [index xs q - Suc n..<index xs q] xs =\n  swaps [index xs q - n..<index xs q] xs\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index xs q \\<Longrightarrow>\n    (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "show \"(index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs (xs ! i) \\<and>\n     index xs q < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) = index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) < index xs q - Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs q - Suc n) \\<and>\n    (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - Suc n\n     < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - Suc n \\<longrightarrow>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n     < index xs q - Suc n)", "unfolding nomore smalla"], ["proof (prove)\ngoal (1 subgoal):\n 1. (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n     index xs q - n \\<and>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n     index xs q - n) \\<and>\n    (index xs q - n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - n\n     < index (swaps [index xs q - n..<index xs q] xs) (xs ! i) \\<and>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - n \\<longrightarrow>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index (swaps [index xs q - n..<index xs q] xs) (xs ! i)\n     < index xs q - n)", "by (rule indH)"], ["proof (state)\nthis:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs q - Suc n \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs q - Suc n) \\<and>\n  (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - Suc n\n   < index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - Suc n \\<longrightarrow>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index (swaps [index xs q - Suc n..<index xs q] xs) (xs ! i)\n   < index xs q - Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i) =\n   index xs q - Suc n \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i) =\n   index xs q - Suc n) \\<and>\n  (index xs q - Suc n \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - Suc n\n   < index\n      (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n       else xs)\n      (xs ! i) \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - Suc n \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - Suc n..<index xs q] xs\n     else xs)\n    (xs ! i)\n   < index xs q - Suc n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)", "case 0"], ["proof (state)\nthis:\n  q \\<in> set xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index xs q\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < length xs) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0 \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs q - 0) \\<and>\n                      (index xs q - 0 \\<le> i \\<and>\n                       i < index xs q \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - 0\n                       < index\n                          (if q \\<in> set xs\n                           then swaps [index xs q - 0..<index xs q] xs\n                           else xs)\n                          (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       \\<le> index xs q) \\<and>\n                      (i < index xs q - 0 \\<longrightarrow>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index\n                        (if q \\<in> set xs\n                         then swaps [index xs q - 0..<index xs q] xs\n                         else xs)\n                        (xs ! i)\n                       < index xs q - 0)", "then"], ["proof (chain)\npicking this:\n  q \\<in> set xs\n  distinct xs", "show ?case"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. (index xs q < i \\<and> i < length xs \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index xs q\n     < index\n        (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n         else xs)\n        (xs ! i) \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i)\n     < length xs) \\<and>\n    (index xs q = i \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs q - 0 \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs q - 0) \\<and>\n    (index xs q - 0 \\<le> i \\<and> i < index xs q \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     Suc (index xs (xs ! i)) \\<and>\n     index xs q - 0\n     < index\n        (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n         else xs)\n        (xs ! i) \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i)\n     \\<le> index xs q) \\<and>\n    (i < index xs q - 0 \\<longrightarrow>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) =\n     index xs (xs ! i) \\<and>\n     index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i)\n     < index xs q - 0)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> (index xs q < i \\<and> i < length xs \\<longrightarrow>\n                       index xs q < index xs (xs ! i)) \\<and>\n                      (index xs q = i \\<longrightarrow>\n                       index xs (xs ! i) = i) \\<and>\n                      (i < index xs q \\<longrightarrow>\n                       index xs (xs ! i) < index xs q)", "proof (safe, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index xs q < index xs (xs ! i)\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 3. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "case 1"], ["proof (state)\nthis:\n  q \\<in> set xs\n  distinct xs\n  index xs q < i\n  i < length xs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index xs q < index xs (xs ! i)\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 3. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "have \" index xs (xs ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "apply(rule index_nth_id)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "using 1"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n  index xs q < i\n  i < length xs\n\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "by auto"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index xs q < index xs (xs ! i)\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 3. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "with 1"], ["proof (chain)\npicking this:\n  q \\<in> set xs\n  distinct xs\n  index xs q < i\n  i < length xs\n  index xs (xs ! i) = i", "show ?case"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n  index xs q < i\n  i < length xs\n  index xs (xs ! i) = i\n\ngoal (1 subgoal):\n 1. index xs q < index xs (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index xs q < index xs (xs ! i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "case 2"], ["proof (state)\nthis:\n  q \\<in> set xs\n  distinct xs\n  i = index xs q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "have \"xs ! index xs q = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! index xs q = q", "using 2"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n  i = index xs q\n\ngoal (1 subgoal):\n 1. xs ! index xs q = q", "by(auto)"], ["proof (state)\nthis:\n  xs ! index xs q = q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! index xs q) = index xs q\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "with 2"], ["proof (chain)\npicking this:\n  q \\<in> set xs\n  distinct xs\n  i = index xs q\n  xs ! index xs q = q", "show ?case"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n  i = index xs q\n  xs ! index xs q = q\n\ngoal (1 subgoal):\n 1. index xs (xs ! index xs q) = index xs q", "by auto"], ["proof (state)\nthis:\n  index xs (xs ! index xs q) = index xs q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "case 3"], ["proof (state)\nthis:\n  q \\<in> set xs\n  distinct xs\n  i < index xs q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "have a: \"index xs q < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q < length xs", "apply(rule index_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. q \\<in> set xs\n 2. length xs \\<le> length xs", "using 3"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n  i < index xs q\n\ngoal (2 subgoals):\n 1. q \\<in> set xs\n 2. length xs \\<le> length xs", "by auto"], ["proof (state)\nthis:\n  index xs q < length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "have \"index xs (xs ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs (xs ! i) = i", "apply(rule index_nth_id)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. i < length xs", "apply(fact 3(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs", "using 3(3) a"], ["proof (prove)\nusing this:\n  i < index xs q\n  index xs q < length xs\n\ngoal (1 subgoal):\n 1. i < length xs", "by auto"], ["proof (state)\nthis:\n  index xs (xs ! i) = i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs (xs ! i) < index xs q", "with 3"], ["proof (chain)\npicking this:\n  q \\<in> set xs\n  distinct xs\n  i < index xs q\n  index xs (xs ! i) = i", "show ?case"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n  distinct xs\n  i < index xs q\n  index xs (xs ! i) = i\n\ngoal (1 subgoal):\n 1. index xs (xs ! i) < index xs q", "by auto"], ["proof (state)\nthis:\n  index xs (xs ! i) < index xs q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (index xs q < i \\<and> i < length xs \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index xs q\n   < index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i)\n   < length xs) \\<and>\n  (index xs q = i \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i) =\n   index xs q - 0 \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i) =\n   index xs q - 0) \\<and>\n  (index xs q - 0 \\<le> i \\<and> i < index xs q \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i) =\n   Suc (index xs (xs ! i)) \\<and>\n   index xs q - 0\n   < index\n      (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs\n       else xs)\n      (xs ! i) \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i)\n   \\<le> index xs q) \\<and>\n  (i < index xs q - 0 \\<longrightarrow>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i) =\n   index xs (xs ! i) \\<and>\n   index\n    (if q \\<in> set xs then swaps [index xs q - 0..<index xs q] xs else xs)\n    (xs ! i)\n   < index xs q - 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtf2_forward_effect1:\n  \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q < i \\<and> i < length xs \n      \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs (xs ! i) \\<and> index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs\" and    \n  mtf2_forward_effect2: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q = i\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!i) = index xs q - n \\<and> index xs q - n = index (mtf2 n q xs) (xs!i)\" and    \n  mtf2_forward_effect3: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q - n \\<le> i \\<and> i < index xs q\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!i) = Suc (index xs (xs!i)) \\<and> index xs q - n < index (mtf2 n q xs) (xs!i) \\<and> index (mtf2 n q xs) (xs!i) \\<le> index xs q\" and    \n  mtf2_forward_effect4: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> i < index xs q - n \n      \\<Longrightarrow> index (mtf2 n q xs) (xs!i) = index xs (xs!i) \\<and> index (mtf2 n q xs) (xs!i) < index xs q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>q \\<in> set xs; distinct xs;\n       index xs q < i \\<and> i < length xs\\<rbrakk>\n      \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) =\n                        index xs (xs ! i) \\<and>\n                        index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n                        index (mtf2 n q xs) (xs ! i) < length xs) &&&\n     (\\<lbrakk>q \\<in> set xs; distinct xs; index xs q = i\\<rbrakk>\n      \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs q - n \\<and>\n                        index xs q - n = index (mtf2 n q xs) (xs ! i))) &&&\n    (\\<lbrakk>q \\<in> set xs; distinct xs;\n      index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n     \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) =\n                       Suc (index xs (xs ! i)) \\<and>\n                       index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n                       index (mtf2 n q xs) (xs ! i) \\<le> index xs q) &&&\n    (\\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q - n\\<rbrakk>\n     \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) =\n                       index xs (xs ! i) \\<and>\n                       index (mtf2 n q xs) (xs ! i) < index xs q - n)", "apply(safe)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs (xs ! i)\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index xs q < index (mtf2 n q xs) (xs ! i)\n 3. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) < length xs\n 4. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs q) = index xs q - n\n 5. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs q - n = index (mtf2 n q xs) (xs ! index xs q)\n 6. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> i;\n     i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = Suc (index xs (xs ! i))\n 7. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> i;\n     i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs q - n < index (mtf2 n q xs) (xs ! i)\n 8. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> i;\n     i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n 9. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs (xs ! i)\n 10. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q - n\\<rbrakk>\n     \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) < index xs q - n", "using mtf2_effect"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs\\<rbrakk>\n  \\<Longrightarrow> (index ?xs ?q < ?i \\<and>\n                     ?i < length ?xs \\<longrightarrow>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                     index ?xs (?xs ! ?i) \\<and>\n                     index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs) \\<and>\n                    (index ?xs ?q = ?i \\<longrightarrow>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                     index ?xs ?q - ?n \\<and>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                     index ?xs ?q - ?n) \\<and>\n                    (index ?xs ?q - ?n \\<le> ?i \\<and>\n                     ?i < index ?xs ?q \\<longrightarrow>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                     Suc (index ?xs (?xs ! ?i)) \\<and>\n                     index ?xs ?q - ?n\n                     < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n                     \\<le> index ?xs ?q) \\<and>\n                    (?i < index ?xs ?q - ?n \\<longrightarrow>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                     index ?xs (?xs ! ?i) \\<and>\n                     index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n)\n\ngoal (10 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs (xs ! i)\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index xs q < index (mtf2 n q xs) (xs ! i)\n 3. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q < i;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) < length xs\n 4. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs q) = index xs q - n\n 5. \\<lbrakk>q \\<in> set xs; distinct xs; i = index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs q - n = index (mtf2 n q xs) (xs ! index xs q)\n 6. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> i;\n     i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = Suc (index xs (xs ! i))\n 7. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> i;\n     i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index xs q - n < index (mtf2 n q xs) (xs ! i)\n 8. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> i;\n     i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n 9. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) = index xs (xs ! i)\n 10. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q - n\\<rbrakk>\n     \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) < index xs q - n", "by metis+"], ["", "lemma yes[simp]: \"index xs x < length xs \n      \\<Longrightarrow> (xs!index xs x ) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs x < length xs \\<Longrightarrow> xs ! index xs x = x", "apply(rule nth_index)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs x < length xs \\<Longrightarrow> x \\<in> set xs", "by (simp add: index_less_size_conv)"], ["", "lemma mtf2_forward_effect1':\n  \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q < index xs x \\<and> index xs x < length xs \n      \\<Longrightarrow> index (mtf2 n q xs) x = index xs x \\<and> index xs q < index (mtf2 n q xs) x \\<and> index (mtf2 n q xs) x < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs;\n     index xs q < index xs x \\<and> index xs x < length xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) x = index xs x \\<and>\n                      index xs q < index (mtf2 n q xs) x \\<and>\n                      index (mtf2 n q xs) x < length xs", "using mtf2_forward_effect1[where xs=xs and i=\"index xs x\"] yes"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set xs; distinct xs;\n   index xs ?q < index xs x \\<and> index xs x < length xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q xs) (xs ! index xs x) =\n                    index xs (xs ! index xs x) \\<and>\n                    index xs ?q\n                    < index (mtf2 ?n ?q xs) (xs ! index xs x) \\<and>\n                    index (mtf2 ?n ?q xs) (xs ! index xs x) < length xs\n  index ?xs ?x < length ?xs \\<Longrightarrow> ?xs ! index ?xs ?x = ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs;\n     index xs q < index xs x \\<and> index xs x < length xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) x = index xs x \\<and>\n                      index xs q < index (mtf2 n q xs) x \\<and>\n                      index (mtf2 n q xs) x < length xs", "by(auto)"], ["", "lemma\n mtf2_forward_effect2': \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q = index xs x\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!index xs x) = index xs q - n \\<and> index xs q - n = index (mtf2 n q xs) (xs!index xs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q = index xs x\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs x) =\n                      index xs q - n \\<and>\n                      index xs q - n = index (mtf2 n q xs) (xs ! index xs x)", "using mtf2_forward_effect2[where xs=xs and i=\"index xs x\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set xs; distinct xs; index xs ?q = index xs x\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q xs) (xs ! index xs x) =\n                    index xs ?q - ?n \\<and>\n                    index xs ?q - ?n =\n                    index (mtf2 ?n ?q xs) (xs ! index xs x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q = index xs x\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs x) =\n                      index xs q - n \\<and>\n                      index xs q - n = index (mtf2 n q xs) (xs ! index xs x)", "by fast"], ["", "lemma\n  mtf2_forward_effect3': \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs q - n \\<le> index xs x \\<Longrightarrow> index xs x < index xs q\n      \\<Longrightarrow> index (mtf2 n q xs) (xs!index xs x) = Suc (index xs (xs!index xs x)) \\<and> index xs q - n < index (mtf2 n q xs) (xs!index xs x) \\<and> index (mtf2 n q xs) (xs!index xs x) \\<le> index xs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> index xs x;\n     index xs x < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs x) =\n                      Suc (index xs (xs ! index xs x)) \\<and>\n                      index xs q - n\n                      < index (mtf2 n q xs) (xs ! index xs x) \\<and>\n                      index (mtf2 n q xs) (xs ! index xs x) \\<le> index xs q", "using mtf2_forward_effect3[where xs=xs and i=\"index xs x\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set xs; distinct xs;\n   index xs ?q - ?n \\<le> index xs x \\<and>\n   index xs x < index xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q xs) (xs ! index xs x) =\n                    Suc (index xs (xs ! index xs x)) \\<and>\n                    index xs ?q - ?n\n                    < index (mtf2 ?n ?q xs) (xs ! index xs x) \\<and>\n                    index (mtf2 ?n ?q xs) (xs ! index xs x)\n                    \\<le> index xs ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; index xs q - n \\<le> index xs x;\n     index xs x < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs x) =\n                      Suc (index xs (xs ! index xs x)) \\<and>\n                      index xs q - n\n                      < index (mtf2 n q xs) (xs ! index xs x) \\<and>\n                      index (mtf2 n q xs) (xs ! index xs x) \\<le> index xs q", "by fast"], ["", "lemma    \n  mtf2_forward_effect4': \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> index xs x < index xs q - n \n      \\<Longrightarrow> index (mtf2 n q xs) (xs!index xs x) = index xs (xs!index xs x) \\<and> index (mtf2 n q xs) (xs!index xs x) < index xs q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs;\n     index xs x < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs x) =\n                      index xs (xs ! index xs x) \\<and>\n                      index (mtf2 n q xs) (xs ! index xs x) < index xs q - n", "using mtf2_forward_effect4[where xs=xs and i=\"index xs x\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set xs; distinct xs;\n   index xs x < index xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q xs) (xs ! index xs x) =\n                    index xs (xs ! index xs x) \\<and>\n                    index (mtf2 ?n ?q xs) (xs ! index xs x)\n                    < index xs ?q - ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs;\n     index xs x < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! index xs x) =\n                      index xs (xs ! index xs x) \\<and>\n                      index (mtf2 n q xs) (xs ! index xs x) < index xs q - n", "by fast"], ["", "lemma splitit: \" (index xs q < i \\<and> i < length xs  \\<Longrightarrow> P)\n     \\<Longrightarrow> (index xs q = i \\<Longrightarrow> P)\n     \\<Longrightarrow> (index xs q - n \\<le> i \\<and> i < index xs q \\<Longrightarrow> P)\n     \\<Longrightarrow> (i < index xs q - n \\<Longrightarrow> P)\n   \\<Longrightarrow> (i < length xs \\<Longrightarrow> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>index xs q < i \\<and> i < length xs \\<Longrightarrow> P;\n     index xs q = i \\<Longrightarrow> P;\n     index xs q - n \\<le> i \\<and> i < index xs q \\<Longrightarrow> P;\n     i < index xs q - n \\<Longrightarrow> P; i < length xs\\<rbrakk>\n    \\<Longrightarrow> P", "by force"], ["", "lemma mtf2_forward_beforeq: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> i < index xs q \n        \\<Longrightarrow> index (mtf2 n q xs) (xs!i) \\<le> index xs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "apply (cases \"i < index xs q - n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     \\<not> i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "using mtf2_forward_effect4"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n 2. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     \\<not> i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     \\<not> i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "using mtf2_forward_effect3"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     \\<not> i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "using leI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> ?x < ?y \\<Longrightarrow> ?y \\<le> ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; i < index xs q;\n     \\<not> i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "by metis"], ["", "lemma x_stays_before_y_if_y_not_moved_to_front:\n  assumes \"q \\<in> set xs\" \"distinct xs\" \"x \\<in> set xs\" \"y \\<in> set xs\" \"y \\<noteq> q\"\n   and \"x < y in xs\"\n  shows \"x < y in (mtf2 n q xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs", "from assms(3)"], ["proof (chain)\npicking this:\n  x \\<in> set xs", "obtain i where i: \"i = index xs x\" and i2: \"i < length xs\""], ["proof (prove)\nusing this:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i = index xs x; i < length xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i = index xs x\n  i < length xs\n\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs", "from assms(4)"], ["proof (chain)\npicking this:\n  y \\<in> set xs", "obtain j where j: \"j = index xs y\" and j2: \"j < length xs\""], ["proof (prove)\nusing this:\n  y \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j = index xs y; j < length xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j = index xs y\n  j < length xs\n\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs", "have \"x < y in xs \\<Longrightarrow> x < y in (mtf2 n q xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y in xs \\<Longrightarrow> x < y in mtf2 n q xs", "apply(cases i xs rule: splitit[where q=q and n=n])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q < i \\<and> i < length xs\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. x < y in xs \\<Longrightarrow> i < length xs", "apply(simp add: i  assms(1,2) mtf2_forward_effect1' before_in_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. x < y in xs \\<Longrightarrow> i < length xs", "apply(cases j xs rule: splitit[where q=q and n=n])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q = i;\n     index xs q < j \\<and> j < length xs\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q = i; index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; index xs q = i;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; index xs q = i; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 6. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 7. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 8. x < y in xs \\<Longrightarrow> i < length xs", "apply (metis before_in_def assms(1-3) i j less_imp_diff_less mtf2_effect nth_index set_mtf2)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q = i; index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q = i;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; index xs q = i; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 5. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 6. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 7. x < y in xs \\<Longrightarrow> i < length xs", "apply(simp add: i j assms mtf2_forward_effect1' mtf2_forward_effect2' before_in_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q = i;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q = i; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 4. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 6. x < y in xs \\<Longrightarrow> i < length xs", "apply(simp add: i j assms mtf2_forward_effect1' mtf2_forward_effect2' before_in_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q = i; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 3. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. x < y in xs \\<Longrightarrow> i < length xs", "apply(simp add: i j assms mtf2_forward_effect1' mtf2_forward_effect3' before_in_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q = i\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 2. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. x < y in xs \\<Longrightarrow> i < length xs", "apply(rule j2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. x < y in xs \\<Longrightarrow> i < length xs", "apply(cases j xs rule: splitit[where q=q and n=n])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q < j \\<and> j < length xs\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 6. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 7. x < y in xs \\<Longrightarrow> i < length xs", "apply (smt before_in_def assms(1-3) i j le_less_trans mtf2_forward_effect1 mtf2_forward_effect3 nth_index set_mtf2)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 5. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 6. x < y in xs \\<Longrightarrow> i < length xs", "using assms(4,5) j"], ["proof (prove)\nusing this:\n  y \\<in> set xs\n  y \\<noteq> q\n  j = index xs y\n\ngoal (6 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 5. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 6. x < y in xs \\<Longrightarrow> i < length xs", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 4. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. x < y in xs \\<Longrightarrow> i < length xs", "apply (smt Suc_leI before_in_def assms(1-3) i j le_less_trans lessI mtf2_forward_effect3 nth_index set_mtf2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x < y in xs; index xs q - n \\<le> i \\<and> i < index xs q;\n     j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. x < y in xs \\<Longrightarrow> i < length xs", "apply (simp add: before_in_def i j)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x < y in xs;\n     index xs q - n \\<le> i \\<and> i < index xs q\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. x < y in xs \\<Longrightarrow> i < length xs", "apply(rule j2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. x < y in xs \\<Longrightarrow> i < length xs", "apply(cases j xs rule: splitit[where q=q and n=n])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n;\n     index xs q < j \\<and> j < length xs\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n; index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; i < index xs q - n; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 5. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 6. x < y in xs \\<Longrightarrow> i < length xs", "apply (smt before_in_def assms(1-3) i j le_less_trans mtf2_forward_effect1 mtf2_forward_effect4 nth_index set_mtf2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n; index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 5. x < y in xs \\<Longrightarrow> i < length xs", "using assms(4-5) j"], ["proof (prove)\nusing this:\n  y \\<in> set xs\n  y \\<noteq> q\n  j = index xs y\n\ngoal (5 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n; index xs q = j\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 4. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 5. x < y in xs \\<Longrightarrow> i < length xs", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n;\n     index xs q - n \\<le> j \\<and> j < index xs q\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 3. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 4. x < y in xs \\<Longrightarrow> i < length xs", "apply (smt before_in_def assms(1-3) i j le_less_trans less_imp_le_nat mtf2_forward_effect3 mtf2_forward_effect4 nth_index set_mtf2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n; j < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 n q xs\n 2. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 3. x < y in xs \\<Longrightarrow> i < length xs", "apply (metis before_in_def assms(1-3) i j mtf2_forward_effect4 nth_index set_mtf2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x < y in xs; i < index xs q - n\\<rbrakk>\n    \\<Longrightarrow> j < length xs\n 2. x < y in xs \\<Longrightarrow> i < length xs", "apply(rule j2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y in xs \\<Longrightarrow> i < length xs", "apply(rule i2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x < y in xs \\<Longrightarrow> x < y in mtf2 n q xs\n\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs", "with assms(6)"], ["proof (chain)\npicking this:\n  x < y in xs\n  x < y in xs \\<Longrightarrow> x < y in mtf2 n q xs", "show ?thesis"], ["proof (prove)\nusing this:\n  x < y in xs\n  x < y in xs \\<Longrightarrow> x < y in mtf2 n q xs\n\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs", "by auto"], ["proof (state)\nthis:\n  x < y in mtf2 n q xs\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary swapped_by_mtf2: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow>  y \\<in> set xs \\<Longrightarrow> \n      x < y in xs \\<Longrightarrow> y < x in (mtf2 n q xs) \\<Longrightarrow> y = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; x \\<in> set xs; y \\<in> set xs;\n     x < y in xs; y < x in mtf2 n q xs\\<rbrakk>\n    \\<Longrightarrow> y = q", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; x \\<in> set xs; y \\<in> set xs;\n     x < y in xs; y < x in mtf2 n q xs; y \\<noteq> q\\<rbrakk>\n    \\<Longrightarrow> False", "using x_stays_before_y_if_y_not_moved_to_front not_before_in"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?x \\<in> set ?xs;\n   ?y \\<in> set ?xs; ?y \\<noteq> ?q; ?x < ?y in ?xs\\<rbrakk>\n  \\<Longrightarrow> ?x < ?y in mtf2 ?n ?q ?xs\n  \\<lbrakk>?x \\<in> set ?xs; ?y \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> (\\<not> ?x < ?y in ?xs) = (?y < ?x in ?xs \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; x \\<in> set xs; y \\<in> set xs;\n     x < y in xs; y < x in mtf2 n q xs; y \\<noteq> q\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis before_in_setD1)"], ["", "lemma x_stays_before_y_if_y_not_moved_to_front_2dir: \"q \\<in> set xs \\<Longrightarrow> distinct xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow>  y \\<in> set xs \\<Longrightarrow> y \\<noteq> q \\<Longrightarrow> \n      x < y in xs = x < y in (mtf2 n q xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> set xs; distinct xs; x \\<in> set xs; y \\<in> set xs;\n     y \\<noteq> q\\<rbrakk>\n    \\<Longrightarrow> x < y in xs = x < y in mtf2 n q xs", "oops"], ["", "lemma mtf2_backwards_effect1:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\" \n    \"index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs\"\n    \"i < length xs\"\n  shows  \"index xs q <  i \\<and> i  < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "from assms(4)"], ["proof (chain)\npicking this:\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs", "have \"~ (index xs q - n = index (mtf2 n q xs) (xs ! i))\""], ["proof (prove)\nusing this:\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n\ngoal (1 subgoal):\n 1. index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "with assms mtf2_forward_effect2"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; index ?xs ?q = ?i\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs ?q - ?n \\<and>\n                    index ?xs ?q - ?n = index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)", "have 1: \"~ (index xs q = i)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; index ?xs ?q = ?i\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs ?q - ?n \\<and>\n                    index ?xs ?q - ?n = index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. index xs q \\<noteq> i", "by metis"], ["proof (state)\nthis:\n  index xs q \\<noteq> i\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "from assms(4)"], ["proof (chain)\npicking this:\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs", "have \"~ (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\""], ["proof (prove)\nusing this:\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n            index (mtf2 n q xs) (xs ! i) \\<le> index xs q)", "by auto"], ["proof (state)\nthis:\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "with assms mtf2_forward_effect3"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)", "have 2: \"~ (index xs q - n \\<le> i \\<and> i < index xs q)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)", "by metis"], ["proof (state)\nthis:\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "from assms(4)"], ["proof (chain)\npicking this:\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs", "have \"~ (index (mtf2 n q xs) (xs ! i) < index xs q - n)\""], ["proof (prove)\nusing this:\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n\ngoal (1 subgoal):\n 1. \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n", "by auto"], ["proof (state)\nthis:\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "with assms mtf2_forward_effect4"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n", "have 3: \"~ (i < index xs q - n)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) < length xs\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> i < index xs q - n", "by metis"], ["proof (state)\nthis:\n  \\<not> i < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "from fullchar[OF assms(1)] assms(5) 1 2 3"], ["proof (chain)\npicking this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  index xs q \\<noteq> i\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n  \\<not> i < index xs q - n", "show \"index xs q <  i \\<and> i  < length xs\""], ["proof (prove)\nusing this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  index xs q \\<noteq> i\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n  \\<not> i < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q < i \\<and> i < length xs", "by metis"], ["proof (state)\nthis:\n  index xs q < i \\<and> i < length xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtf2_backwards_effect2:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\" \"index (mtf2 n q xs) (xs ! i) = index xs q - n\"\n    \"i < length xs\" \n    shows \"index xs q = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q = i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. index xs q = i", "from assms(4)"], ["proof (chain)\npicking this:\n  index (mtf2 n q xs) (xs ! i) = index xs q - n", "have \"~ (index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs)\""], ["proof (prove)\nusing this:\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n            index (mtf2 n q xs) (xs ! i) < length xs)", "by auto"], ["proof (state)\nthis:\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)\n\ngoal (1 subgoal):\n 1. index xs q = i", "with assms mtf2_forward_effect1"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q < ?i \\<and> ?i < length ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)", "have 1: \"~ (index xs q < i \\<and> i < length xs)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q < ?i \\<and> ?i < length ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q < i \\<and> i < length xs)", "by metis"], ["proof (state)\nthis:\n  \\<not> (index xs q < i \\<and> i < length xs)\n\ngoal (1 subgoal):\n 1. index xs q = i", "from assms(4)"], ["proof (chain)\npicking this:\n  index (mtf2 n q xs) (xs ! i) = index xs q - n", "have \"~ (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\""], ["proof (prove)\nusing this:\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n            index (mtf2 n q xs) (xs ! i) \\<le> index xs q)", "by auto"], ["proof (state)\nthis:\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\n\ngoal (1 subgoal):\n 1. index xs q = i", "with assms mtf2_forward_effect3"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)", "have 2: \"~ (index xs q - n \\<le> i \\<and> i < index xs q)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)", "by metis"], ["proof (state)\nthis:\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n\ngoal (1 subgoal):\n 1. index xs q = i", "from assms(4)"], ["proof (chain)\npicking this:\n  index (mtf2 n q xs) (xs ! i) = index xs q - n", "have \"~ (index (mtf2 n q xs) (xs ! i) < index xs q - n)\""], ["proof (prove)\nusing this:\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n", "by auto"], ["proof (state)\nthis:\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q = i", "with assms mtf2_forward_effect4"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n", "have 3: \"~ (i < index xs q - n)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) = index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> i < index xs q - n", "by metis"], ["proof (state)\nthis:\n  \\<not> i < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q = i", "from fullchar[OF assms(1)] assms(5) 1 2 3"], ["proof (chain)\npicking this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  \\<not> (index xs q < i \\<and> i < length xs)\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n  \\<not> i < index xs q - n", "show \"index xs q = i\""], ["proof (prove)\nusing this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  \\<not> (index xs q < i \\<and> i < length xs)\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n  \\<not> i < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q = i", "by metis"], ["proof (state)\nthis:\n  index xs q = i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtf2_backwards_effect3:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\"\n    \"index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) \\<le> index xs q\"\n    \"i < length xs\"\n  shows \"index xs q - n \\<le> i \\<and> i < index xs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "from assms(4)"], ["proof (chain)\npicking this:\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "have \"~ (index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs)\""], ["proof (prove)\nusing this:\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n            index (mtf2 n q xs) (xs ! i) < length xs)", "by auto"], ["proof (state)\nthis:\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "with assms mtf2_forward_effect1"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q < ?i \\<and> ?i < length ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)", "have 2: \"~ (index xs q <  i \\<and> i  < length xs)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q < ?i \\<and> ?i < length ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q < i \\<and> i < length xs)", "by metis"], ["proof (state)\nthis:\n  \\<not> (index xs q < i \\<and> i < length xs)\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "from assms(4)"], ["proof (chain)\npicking this:\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "have \"~ (index xs q - n = index (mtf2 n q xs) (xs ! i))\""], ["proof (prove)\nusing this:\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n\ngoal (1 subgoal):\n 1. index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "with assms mtf2_forward_effect2"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; index ?xs ?q = ?i\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs ?q - ?n \\<and>\n                    index ?xs ?q - ?n = index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)", "have 1: \"~ (index xs q = i)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; index ?xs ?q = ?i\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs ?q - ?n \\<and>\n                    index ?xs ?q - ?n = index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. index xs q \\<noteq> i", "by metis"], ["proof (state)\nthis:\n  index xs q \\<noteq> i\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "from assms(4)"], ["proof (chain)\npicking this:\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q", "have \"~ (index (mtf2 n q xs) (xs ! i) < index xs q - n)\""], ["proof (prove)\nusing this:\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n\ngoal (1 subgoal):\n 1. \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n", "by auto"], ["proof (state)\nthis:\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "with assms mtf2_forward_effect4"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n", "have 3: \"~ (i < index xs q - n)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n  index (mtf2 n q xs) (xs ! i) \\<le> index xs q\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; ?i < index ?xs ?q - ?n\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < index ?xs ?q - ?n\n  \\<not> index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> i < index xs q - n", "by metis"], ["proof (state)\nthis:\n  \\<not> i < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "from fullchar[OF assms(1)] assms(5) 1 2 3"], ["proof (chain)\npicking this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  index xs q \\<noteq> i\n  \\<not> (index xs q < i \\<and> i < length xs)\n  \\<not> i < index xs q - n", "show \"index xs q - n \\<le> i \\<and> i < index xs q\""], ["proof (prove)\nusing this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  index xs q \\<noteq> i\n  \\<not> (index xs q < i \\<and> i < length xs)\n  \\<not> i < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q - n \\<le> i \\<and> i < index xs q", "by metis"], ["proof (state)\nthis:\n  index xs q - n \\<le> i \\<and> i < index xs q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtf2_backwards_effect4:\n  assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\"\n   \"index (mtf2 n q xs) (xs ! i) < index xs q - n\"\n   \"i < length xs\" \n  shows \"i < index xs q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < index xs q - n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i < index xs q - n", "from assms(4)"], ["proof (chain)\npicking this:\n  index (mtf2 n q xs) (xs ! i) < index xs q - n", "have \"~ (index xs q < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) < length xs)\""], ["proof (prove)\nusing this:\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n            index (mtf2 n q xs) (xs ! i) < length xs)", "by auto"], ["proof (state)\nthis:\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "with assms mtf2_forward_effect1"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q < ?i \\<and> ?i < length ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)", "have 2: \"~ (index xs q <  i \\<and> i  < length xs)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q < ?i \\<and> ?i < length ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs (?xs ! ?i) \\<and>\n                    index ?xs ?q < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) < length ?xs\n  \\<not> (index xs q < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) < length xs)\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q < i \\<and> i < length xs)", "by metis"], ["proof (state)\nthis:\n  \\<not> (index xs q < i \\<and> i < length xs)\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "from assms(4)"], ["proof (chain)\npicking this:\n  index (mtf2 n q xs) (xs ! i) < index xs q - n", "have \"~ (index xs q - n = index (mtf2 n q xs) (xs ! i))\""], ["proof (prove)\nusing this:\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)", "by auto"], ["proof (state)\nthis:\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "with assms mtf2_forward_effect2"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; index ?xs ?q = ?i\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs ?q - ?n \\<and>\n                    index ?xs ?q - ?n = index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)", "have 1: \"~ (index xs q = i)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs; index ?xs ?q = ?i\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    index ?xs ?q - ?n \\<and>\n                    index ?xs ?q - ?n = index (mtf2 ?n ?q ?xs) (?xs ! ?i)\n  index xs q - n \\<noteq> index (mtf2 n q xs) (xs ! i)\n\ngoal (1 subgoal):\n 1. index xs q \\<noteq> i", "by metis"], ["proof (state)\nthis:\n  index xs q \\<noteq> i\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "from assms(4)"], ["proof (chain)\npicking this:\n  index (mtf2 n q xs) (xs ! i) < index xs q - n", "have \"~ (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and> index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\""], ["proof (prove)\nusing this:\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n            index (mtf2 n q xs) (xs ! i) \\<le> index xs q)", "by auto"], ["proof (state)\nthis:\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "with assms mtf2_forward_effect3"], ["proof (chain)\npicking this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)", "have 3: \"~ (index xs q - n \\<le> i \\<and> i < index xs q)\""], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) (xs ! i) < index xs q - n\n  i < length xs\n  \\<lbrakk>?q \\<in> set ?xs; distinct ?xs;\n   index ?xs ?q - ?n \\<le> ?i \\<and> ?i < index ?xs ?q\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 ?n ?q ?xs) (?xs ! ?i) =\n                    Suc (index ?xs (?xs ! ?i)) \\<and>\n                    index ?xs ?q - ?n\n                    < index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<and>\n                    index (mtf2 ?n ?q ?xs) (?xs ! ?i) \\<le> index ?xs ?q\n  \\<not> (index xs q - n < index (mtf2 n q xs) (xs ! i) \\<and>\n          index (mtf2 n q xs) (xs ! i) \\<le> index xs q)\n\ngoal (1 subgoal):\n 1. \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)", "by metis"], ["proof (state)\nthis:\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "from fullchar[OF assms(1)] assms(5) 1 2 3"], ["proof (chain)\npicking this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  index xs q \\<noteq> i\n  \\<not> (index xs q < i \\<and> i < length xs)\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)", "show \"i < index xs q - n\""], ["proof (prove)\nusing this:\n  (?i < length xs) =\n  (index xs q < ?i \\<and> ?i < length xs \\<or>\n   index xs q = ?i \\<or>\n   index xs q - ?n \\<le> ?i \\<and> ?i < index xs q \\<or>\n   ?i < index xs q - ?n)\n  i < length xs\n  index xs q \\<noteq> i\n  \\<not> (index xs q < i \\<and> i < length xs)\n  \\<not> (index xs q - n \\<le> i \\<and> i < index xs q)\n\ngoal (1 subgoal):\n 1. i < index xs q - n", "by metis"], ["proof (state)\nthis:\n  i < index xs q - n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtf2_backwards_effect4':\n assumes \"index xs q < length xs\" \"q \\<in> set xs\" \"distinct xs\"\n  \"index (mtf2 n q xs) x < index xs q - n\"\n  \"x \\<in> set xs\"\n shows \"(index xs x) < index xs q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs x < index xs q - n", "using assms mtf2_backwards_effect4[where xs=xs and i=\"index xs x\"] yes"], ["proof (prove)\nusing this:\n  index xs q < length xs\n  q \\<in> set xs\n  distinct xs\n  index (mtf2 n q xs) x < index xs q - n\n  x \\<in> set xs\n  \\<lbrakk>index xs ?q < length xs; ?q \\<in> set xs; distinct xs;\n   index (mtf2 ?n ?q xs) (xs ! index xs x) < index xs ?q - ?n;\n   index xs x < length xs\\<rbrakk>\n  \\<Longrightarrow> index xs x < index xs ?q - ?n\n  index ?xs ?x < length ?xs \\<Longrightarrow> ?xs ! index ?xs ?x = ?x\n\ngoal (1 subgoal):\n 1. index xs x < index xs q - n", "by auto"], ["", "lemma \n  assumes distA: \"distinct A\" and\n          asm: \"q \\<in> set A\"\n  shows \n      mtf2_mono:  \"q< x in A \\<Longrightarrow> q < x in (mtf2 n q A)\" and\n      mtf2_q_after: \"index (mtf2 n q A) q =  index A q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<Longrightarrow> q < x in mtf2 n q A) &&&\n    index (mtf2 n q A) q = index A q - n", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. q < x in A \\<Longrightarrow> q < x in mtf2 n q A\n 2. index (mtf2 n q A) q = index A q - n", "have lele: \"(q < x in A \\<longrightarrow> q < x in swaps [index A q - n..<index A q] A) \\<and> (index (swaps [index A q - n..<index A q] A) q =  index A q - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - n..<index A q] A) \\<and>\n    index (swaps [index A q - n..<index A q] A) q = index A q - n", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - 0..<index A q] A) \\<and>\n    index (swaps [index A q - 0..<index A q] A) q = index A q - 0\n 2. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "assume ind: \"(q < x in A \\<longrightarrow> q < x in swaps [index A q - n..<index A q] A)\n            \\<and> index (swaps [index A q - n..<index A q] A) q =  index A q - n\""], ["proof (state)\nthis:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "then"], ["proof (chain)\npicking this:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n", "have iH: \" q < x in A \\<Longrightarrow> q < x in swaps [index A q - n..<index A q] A\""], ["proof (prove)\nusing this:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - n..<index A q] A", "by auto"], ["proof (state)\nthis:\n  q < x in A \\<Longrightarrow> q < x in swaps [index A q - n..<index A q] A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "from ind"], ["proof (chain)\npicking this:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n", "have indH2: \"index (swaps [index A q - n..<index A q] A) q =  index A q - n\""], ["proof (prove)\nusing this:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. index (swaps [index A q - n..<index A q] A) q = index A q - n", "by auto"], ["proof (state)\nthis:\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - n..<index A q] A) \\<and>\n       index (swaps [index A q - n..<index A q] A) q =\n       index A q - n \\<Longrightarrow>\n       (q < x in A \\<longrightarrow>\n        q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n       index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "show \"(q < x in A \\<longrightarrow> q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n          index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\" (is \"?part1 \\<and> ?part2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "proof (cases \"index A q \\<ge> Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "case True"], ["proof (state)\nthis:\n  Suc n \\<le> index A q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "then"], ["proof (chain)\npicking this:\n  Suc n \\<le> index A q", "have onemore: \"[index A q - Suc n..<index A q] = (index A q - Suc n) # [index A q - n..<index A q]\""], ["proof (prove)\nusing this:\n  Suc n \\<le> index A q\n\ngoal (1 subgoal):\n 1. [index A q - Suc n..<index A q] =\n    (index A q - Suc n) # [index A q - n..<index A q]", "using Suc_diff_Suc upt_rec"], ["proof (prove)\nusing this:\n  Suc n \\<le> index A q\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  [?i..<?j] = (if ?i < ?j then ?i # [Suc ?i..<?j] else [])\n\ngoal (1 subgoal):\n 1. [index A q - Suc n..<index A q] =\n    (index A q - Suc n) # [index A q - n..<index A q]", "by auto"], ["proof (state)\nthis:\n  [index A q - Suc n..<index A q] =\n  (index A q - Suc n) # [index A q - n..<index A q]\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "from onemore"], ["proof (chain)\npicking this:\n  [index A q - Suc n..<index A q] =\n  (index A q - Suc n) # [index A q - n..<index A q]", "have yeah: \"swaps [index A q - Suc n..<index A q] A\n              = swap (index A q - Suc n) (swaps  [index A q - n..<index A q] A)\""], ["proof (prove)\nusing this:\n  [index A q - Suc n..<index A q] =\n  (index A q - Suc n) # [index A q - n..<index A q]\n\ngoal (1 subgoal):\n 1. swaps [index A q - Suc n..<index A q] A =\n    swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)", "by auto"], ["proof (state)\nthis:\n  swaps [index A q - Suc n..<index A q] A =\n  swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "from indH2"], ["proof (chain)\npicking this:\n  index (swaps [index A q - n..<index A q] A) q = index A q - n", "have gr: \"index (swaps [index A q - n..<index A q] A) q =  Suc(index A q - Suc n)\""], ["proof (prove)\nusing this:\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. index (swaps [index A q - n..<index A q] A) q = Suc (index A q - Suc n)", "using Suc_diff_Suc True"], ["proof (prove)\nusing this:\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  Suc n \\<le> index A q\n\ngoal (1 subgoal):\n 1. index (swaps [index A q - n..<index A q] A) q = Suc (index A q - Suc n)", "by auto"], ["proof (state)\nthis:\n  index (swaps [index A q - n..<index A q] A) q = Suc (index A q - Suc n)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have whereisq: \"swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q", "unfolding gr[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A !\n    index (swaps [index A q - n..<index A q] A) q =\n    q", "apply(rule nth_index)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> set (swaps [index A q - n..<index A q] A)", "using asm"], ["proof (prove)\nusing this:\n  q \\<in> set A\n\ngoal (1 subgoal):\n 1. q \\<in> set (swaps [index A q - n..<index A q] A)", "by auto"], ["proof (state)\nthis:\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have indSi: \"index A q < length A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index A q < length A", "using asm index_less"], ["proof (prove)\nusing this:\n  q \\<in> set A\n  \\<lbrakk>?x \\<in> set ?xs; length ?xs \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> index ?xs ?x < ?n\n\ngoal (1 subgoal):\n 1. index A q < length A", "by auto"], ["proof (state)\nthis:\n  index A q < length A\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have 3: \"Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)", "using True"], ["proof (prove)\nusing this:\n  Suc n \\<le> index A q\n\ngoal (1 subgoal):\n 1. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)", "apply(auto simp: Suc_diff_Suc asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> index A q \\<Longrightarrow> index A q - n < length A", "using indSi"], ["proof (prove)\nusing this:\n  index A q < length A\n\ngoal (1 subgoal):\n 1. Suc n \\<le> index A q \\<Longrightarrow> index A q - n < length A", "by auto"], ["proof (state)\nthis:\n  Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have 1: \"q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "assume as: \"q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\""], ["proof (state)\nthis:\n  q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "{"], ["proof (state)\nthis:\n  q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "fix xs x"], ["proof (state)\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "have \"Suc x < length xs \\<Longrightarrow> xs ! x = q \\<Longrightarrow> xs ! Suc x = q \\<Longrightarrow> \\<not> distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc x < length xs; xs ! x = q; xs ! Suc x = q\\<rbrakk>\n    \\<Longrightarrow> \\<not> distinct xs", "by (metis Suc_lessD index_nth_id n_not_Suc_n)"], ["proof (state)\nthis:\n  \\<lbrakk>Suc x < length xs; xs ! x = q; xs ! Suc x = q\\<rbrakk>\n  \\<Longrightarrow> \\<not> distinct xs\n\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Suc ?xa2 < length ?xs2; ?xs2 ! ?xa2 = q;\n   ?xs2 ! Suc ?xa2 = q\\<rbrakk>\n  \\<Longrightarrow> \\<not> distinct ?xs2\n\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "note cool=this"], ["proof (state)\nthis:\n  \\<lbrakk>Suc ?xa2 < length ?xs2; ?xs2 ! ?xa2 = q;\n   ?xs2 ! Suc ?xa2 = q\\<rbrakk>\n  \\<Longrightarrow> \\<not> distinct ?xs2\n\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "have \"\\<not> distinct (swaps [index A q - n..<index A q] A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> distinct (swaps [index A q - n..<index A q] A)", "apply(rule cool[of \"(index A q - Suc n)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)\n 2. swaps [index A q - n..<index A q] A ! (index A q - Suc n) = q\n 3. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q", "apply(simp only: 3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. swaps [index A q - n..<index A q] A ! (index A q - Suc n) = q\n 2. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q", "apply(simp only: as[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q", "by(simp only: whereisq)"], ["proof (state)\nthis:\n  \\<not> distinct (swaps [index A q - n..<index A q] A)\n\ngoal (1 subgoal):\n 1. q =\n    swaps [index A q - n..<index A q] A !\n    (index A q - Suc n) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> distinct (swaps [index A q - n..<index A q] A)", "show \"False\""], ["proof (prove)\nusing this:\n  \\<not> distinct (swaps [index A q - n..<index A q] A)\n\ngoal (1 subgoal):\n 1. False", "using distA"], ["proof (prove)\nusing this:\n  \\<not> distinct (swaps [index A q - n..<index A q] A)\n  distinct A\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have part1: ?part1"], ["proof (prove)\ngoal (1 subgoal):\n 1. q < x in A \\<longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "assume qx: \"q < x in A\""], ["proof (state)\nthis:\n  q < x in A\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "{"], ["proof (state)\nthis:\n  q < x in A\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "fix q x B i"], ["proof (state)\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "assume a1: \"q < x in B\""], ["proof (state)\nthis:\n  q < x in B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "assume a2: \"~ q = B ! i\""], ["proof (state)\nthis:\n  q \\<noteq> B ! i\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "assume a3: \"distinct B\""], ["proof (state)\nthis:\n  distinct B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "assume a4: \"Suc i < length B\""], ["proof (state)\nthis:\n  Suc i < length B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "have \"dist_perm B B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_perm B B", "by(simp add: a3)"], ["proof (state)\nthis:\n  dist_perm B B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "moreover"], ["proof (state)\nthis:\n  dist_perm B B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "have \"Suc i < length B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc i < length B", "using a4"], ["proof (prove)\nusing this:\n  Suc i < length B\n\ngoal (1 subgoal):\n 1. Suc i < length B", "by auto"], ["proof (state)\nthis:\n  Suc i < length B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "moreover"], ["proof (state)\nthis:\n  Suc i < length B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "have \"q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)", "using a1 a2"], ["proof (prove)\nusing this:\n  q < x in B\n  q \\<noteq> B ! i\n\ngoal (1 subgoal):\n 1. q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)", "by auto"], ["proof (state)\nthis:\n  q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "ultimately"], ["proof (chain)\npicking this:\n  dist_perm B B\n  Suc i < length B\n  q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)", "have \"q < x in swap i B\""], ["proof (prove)\nusing this:\n  dist_perm B B\n  Suc i < length B\n  q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)\n\ngoal (1 subgoal):\n 1. q < x in swap i B", "using before_in_swap[of B B]"], ["proof (prove)\nusing this:\n  dist_perm B B\n  Suc i < length B\n  q < x in B \\<and> \\<not> (q = B ! i \\<and> x = B ! Suc i)\n  \\<lbrakk>dist_perm B B; Suc ?n < length B\\<rbrakk>\n  \\<Longrightarrow> ?x < ?y in swap ?n B =\n                    (?x < ?y in B \\<and>\n                     \\<not> (?x = B ! ?n \\<and> ?y = B ! Suc ?n) \\<or>\n                     ?x = B ! Suc ?n \\<and> ?y = B ! ?n)\n\ngoal (1 subgoal):\n 1. q < x in swap i B", "by simp"], ["proof (state)\nthis:\n  q < x in swap i B\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?qa2 < ?xa2 in ?B2; ?qa2 \\<noteq> ?B2 ! ?i2; distinct ?B2;\n   Suc ?i2 < length ?B2\\<rbrakk>\n  \\<Longrightarrow> ?qa2 < ?xa2 in swap ?i2 ?B2\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "note grr=this"], ["proof (state)\nthis:\n  \\<lbrakk>?qa2 < ?xa2 in ?B2; ?qa2 \\<noteq> ?B2 ! ?i2; distinct ?B2;\n   Suc ?i2 < length ?B2\\<rbrakk>\n  \\<Longrightarrow> ?qa2 < ?xa2 in swap ?i2 ?B2\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "have 2: \"distinct (swaps [index A q - n..<index A q] A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (swaps [index A q - n..<index A q] A)", "using distA"], ["proof (prove)\nusing this:\n  distinct A\n\ngoal (1 subgoal):\n 1. distinct (swaps [index A q - n..<index A q] A)", "by auto"], ["proof (state)\nthis:\n  distinct (swaps [index A q - n..<index A q] A)\n\ngoal (1 subgoal):\n 1. q < x in A \\<Longrightarrow>\n    q < x in swaps [index A q - Suc n..<index A q] A", "show \"q < x in swaps [index A q - Suc n..<index A q] A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q < x in swaps [index A q - Suc n..<index A q] A", "apply(simp only: yeah)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q < x in swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)", "apply(rule grr[OF iH[OF qx]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n 2. distinct (swaps [index A q - n..<index A q] A)\n 3. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)", "using 1 2 3"], ["proof (prove)\nusing this:\n  q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n  distinct (swaps [index A q - n..<index A q] A)\n  Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)\n\ngoal (3 subgoals):\n 1. q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n 2. distinct (swaps [index A q - n..<index A q] A)\n 3. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)", "by auto"], ["proof (state)\nthis:\n  q < x in swaps [index A q - Suc n..<index A q] A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q < x in A \\<longrightarrow>\n  q < x in swaps [index A q - Suc n..<index A q] A\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "let ?xs = \"(swaps [index A q - n..<index A q] A)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "let ?n = \"(index A q - Suc n)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have \"?xs ! Suc ?n = swaps [index A q - n..<index A q] A ! (index (swaps [index A q - n..<index A q] A) q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) =\n    swaps [index A q - n..<index A q] A !\n    index (swaps [index A q - n..<index A q] A) q", "using indH2 Suc_diff_Suc True"], ["proof (prove)\nusing this:\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  Suc n \\<le> index A q\n\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) =\n    swaps [index A q - n..<index A q] A !\n    index (swaps [index A q - n..<index A q] A) q", "by auto"], ["proof (state)\nthis:\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) =\n  swaps [index A q - n..<index A q] A !\n  index (swaps [index A q - n..<index A q] A) q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "also"], ["proof (state)\nthis:\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) =\n  swaps [index A q - n..<index A q] A !\n  index (swaps [index A q - n..<index A q] A) q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have \"\\<dots> = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A !\n    index (swaps [index A q - n..<index A q] A) q =\n    q", "apply(rule nth_index)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> set (swaps [index A q - n..<index A q] A)", "using asm"], ["proof (prove)\nusing this:\n  q \\<in> set A\n\ngoal (1 subgoal):\n 1. q \\<in> set (swaps [index A q - n..<index A q] A)", "by auto"], ["proof (state)\nthis:\n  swaps [index A q - n..<index A q] A !\n  index (swaps [index A q - n..<index A q] A) q =\n  q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "finally"], ["proof (chain)\npicking this:\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q", "have sndTrue: \"?xs ! Suc ?n = q\""], ["proof (prove)\nusing this:\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q\n\ngoal (1 subgoal):\n 1. swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q", "."], ["proof (state)\nthis:\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have fstFalse: \"~ q = ?xs ! ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)", "by (fact 1)"], ["proof (state)\nthis:\n  q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have \"index (swaps [index A q - Suc n..<index A q] A) q\n              = index (swap (index A q - Suc n) ?xs) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index A q - Suc n..<index A q] A) q =\n    index (swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)) q", "by (simp only: yeah)"], ["proof (state)\nthis:\n  index (swaps [index A q - Suc n..<index A q] A) q =\n  index (swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)) q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "also"], ["proof (state)\nthis:\n  index (swaps [index A q - Suc n..<index A q] A) q =\n  index (swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)) q\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have \"\\<dots> = (if q = ?xs ! ?n then Suc ?n else if q = ?xs ! Suc ?n then ?n else index ?xs q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swap (index A q - Suc n) (swaps [index A q - n..<index A q] A))\n     q =\n    (if q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n     then Suc (index A q - Suc n)\n     else if q =\n             swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n)\n          then index A q - Suc n\n          else index (swaps [index A q - n..<index A q] A) q)", "apply(rule index_swap_distinct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (swaps [index A q - n..<index A q] A)\n 2. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)", "apply(simp add: distA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index A q - Suc n) < length (swaps [index A q - n..<index A q] A)", "by (fact 3)"], ["proof (state)\nthis:\n  index (swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)) q =\n  (if q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n   then Suc (index A q - Suc n)\n   else if q = swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n)\n        then index A q - Suc n\n        else index (swaps [index A q - n..<index A q] A) q)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "also"], ["proof (state)\nthis:\n  index (swap (index A q - Suc n) (swaps [index A q - n..<index A q] A)) q =\n  (if q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n   then Suc (index A q - Suc n)\n   else if q = swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n)\n        then index A q - Suc n\n        else index (swaps [index A q - n..<index A q] A) q)\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have \"\\<dots> = ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n     then Suc (index A q - Suc n)\n     else if q =\n             swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n)\n          then index A q - Suc n\n          else index (swaps [index A q - n..<index A q] A) q) =\n    index A q - Suc n", "using fstFalse sndTrue"], ["proof (prove)\nusing this:\n  q \\<noteq> swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n  swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n) = q\n\ngoal (1 subgoal):\n 1. (if q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n     then Suc (index A q - Suc n)\n     else if q =\n             swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n)\n          then index A q - Suc n\n          else index (swaps [index A q - n..<index A q] A) q) =\n    index A q - Suc n", "by auto"], ["proof (state)\nthis:\n  (if q = swaps [index A q - n..<index A q] A ! (index A q - Suc n)\n   then Suc (index A q - Suc n)\n   else if q = swaps [index A q - n..<index A q] A ! Suc (index A q - Suc n)\n        then index A q - Suc n\n        else index (swaps [index A q - n..<index A q] A) q) =\n  index A q - Suc n\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "finally"], ["proof (chain)\npicking this:\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "have part2: ?part2"], ["proof (prove)\nusing this:\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n\ngoal (1 subgoal):\n 1. index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "."], ["proof (state)\nthis:\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n\ngoal (2 subgoals):\n 1. Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n 2. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "from part1 part2"], ["proof (chain)\npicking this:\n  q < x in A \\<longrightarrow>\n  q < x in swaps [index A q - Suc n..<index A q] A\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "show \"?part1 \\<and> ?part2\""], ["proof (prove)\nusing this:\n  q < x in A \\<longrightarrow>\n  q < x in swaps [index A q - Suc n..<index A q] A\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n\ngoal (1 subgoal):\n 1. (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "by simp"], ["proof (state)\nthis:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "case False"], ["proof (state)\nthis:\n  \\<not> Suc n \\<le> index A q\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "then"], ["proof (chain)\npicking this:\n  \\<not> Suc n \\<le> index A q", "have a: \"index A q - Suc n = index A q - n\""], ["proof (prove)\nusing this:\n  \\<not> Suc n \\<le> index A q\n\ngoal (1 subgoal):\n 1. index A q - Suc n = index A q - n", "by auto"], ["proof (state)\nthis:\n  index A q - Suc n = index A q - n\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "then"], ["proof (chain)\npicking this:\n  index A q - Suc n = index A q - n", "have b: \"[index A q - Suc n..<index A q] = [index A q - n..<index A q]\""], ["proof (prove)\nusing this:\n  index A q - Suc n = index A q - n\n\ngoal (1 subgoal):\n 1. [index A q - Suc n..<index A q] = [index A q - n..<index A q]", "by auto"], ["proof (state)\nthis:\n  [index A q - Suc n..<index A q] = [index A q - n..<index A q]\n\ngoal (1 subgoal):\n 1. \\<not> Suc n \\<le> index A q \\<Longrightarrow>\n    (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n    index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n", "apply(simp only: b a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<longrightarrow>\n     q < x in swaps [index A q - n..<index A q] A) \\<and>\n    index (swaps [index A q - n..<index A q] A) q = index A q - n", "by (fact ind)"], ["proof (state)\nthis:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - Suc n..<index A q] A) \\<and>\n  index (swaps [index A q - Suc n..<index A q] A) q = index A q - Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (2 subgoals):\n 1. q < x in A \\<Longrightarrow> q < x in mtf2 n q A\n 2. index (mtf2 n q A) q = index A q - n", "show \"q < x in A \\<Longrightarrow> q < x in (mtf2 n q A)\"\n        \"(index (mtf2 n q A) q) =  index A q - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<Longrightarrow> q < x in mtf2 n q A) &&&\n    index (mtf2 n q A) q = index A q - n", "unfolding mtf2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (q < x in A \\<Longrightarrow>\n     q < x\n     in (if q \\<in> set A then swaps [index A q - n..<index A q] A\n         else A)) &&&\n    index (if q \\<in> set A then swaps [index A q - n..<index A q] A else A)\n     q =\n    index A q - n", "using asm lele"], ["proof (prove)\nusing this:\n  q \\<in> set A\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. (q < x in A \\<Longrightarrow>\n     q < x\n     in (if q \\<in> set A then swaps [index A q - n..<index A q] A\n         else A)) &&&\n    index (if q \\<in> set A then swaps [index A q - n..<index A q] A else A)\n     q =\n    index A q - n", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index (if q \\<in> set A then swaps [index A q - n..<index A q] A else A)\n     q =\n    index A q - n", "using asm lele"], ["proof (prove)\nusing this:\n  q \\<in> set A\n  (q < x in A \\<longrightarrow>\n   q < x in swaps [index A q - n..<index A q] A) \\<and>\n  index (swaps [index A q - n..<index A q] A) q = index A q - n\n\ngoal (1 subgoal):\n 1. index (if q \\<in> set A then swaps [index A q - n..<index A q] A else A)\n     q =\n    index A q - n", "by(simp)"], ["proof (state)\nthis:\n  q < x in A \\<Longrightarrow> q < x in mtf2 n q A\n  index (mtf2 n q A) q = index A q - n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"effect of mtf2 on index\""], ["", "lemma swapsthrough: \"distinct xs \\<Longrightarrow> q \\<in> set xs \\<Longrightarrow> index ( swaps [index xs q - entf..<index xs q] xs ) q = index xs q - entf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - entf..<index xs q] xs) q =\n                      index xs q - entf", "proof (induct entf)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - 0..<index xs q] xs) q =\n                      index xs q - 0\n 2. \\<And>entf.\n       \\<lbrakk>\\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> index\n                                   (swaps [index xs q - entf..<index xs q]\n                                     xs)\n                                   q =\n                                  index xs q - entf;\n        distinct xs; q \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> index\n                          (swaps [index xs q - Suc entf..<index xs q] xs)\n                          q =\n                         index xs q - Suc entf", "case (Suc e)"], ["proof (state)\nthis:\n  \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> index (swaps [index xs q - e..<index xs q] xs) q =\n                    index xs q - e\n  distinct xs\n  q \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - 0..<index xs q] xs) q =\n                      index xs q - 0\n 2. \\<And>entf.\n       \\<lbrakk>\\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> index\n                                   (swaps [index xs q - entf..<index xs q]\n                                     xs)\n                                   q =\n                                  index xs q - entf;\n        distinct xs; q \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> index\n                          (swaps [index xs q - Suc entf..<index xs q] xs)\n                          q =\n                         index xs q - Suc entf", "note iH=this"], ["proof (state)\nthis:\n  \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> index (swaps [index xs q - e..<index xs q] xs) q =\n                    index xs q - e\n  distinct xs\n  q \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - 0..<index xs q] xs) q =\n                      index xs q - 0\n 2. \\<And>entf.\n       \\<lbrakk>\\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> index\n                                   (swaps [index xs q - entf..<index xs q]\n                                     xs)\n                                   q =\n                                  index xs q - entf;\n        distinct xs; q \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> index\n                          (swaps [index xs q - Suc entf..<index xs q] xs)\n                          q =\n                         index xs q - Suc entf", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e", "proof (cases \"index xs q - e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. index xs q - e = 0 \\<Longrightarrow>\n    index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e\n 2. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "case 0"], ["proof (state)\nthis:\n  index xs q - e = 0\n\ngoal (2 subgoals):\n 1. index xs q - e = 0 \\<Longrightarrow>\n    index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e\n 2. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "then"], ["proof (chain)\npicking this:\n  index xs q - e = 0", "have \"[index xs q - Suc e..<index xs q]\n        = [index xs q - e..<index xs q]\""], ["proof (prove)\nusing this:\n  index xs q - e = 0\n\ngoal (1 subgoal):\n 1. [index xs q - Suc e..<index xs q] = [index xs q - e..<index xs q]", "by force"], ["proof (state)\nthis:\n  [index xs q - Suc e..<index xs q] = [index xs q - e..<index xs q]\n\ngoal (2 subgoals):\n 1. index xs q - e = 0 \\<Longrightarrow>\n    index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e\n 2. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "then"], ["proof (chain)\npicking this:\n  [index xs q - Suc e..<index xs q] = [index xs q - e..<index xs q]", "have \"index (swaps [index xs q - Suc e..<index xs q] xs) q\n          =  index xs q - e\""], ["proof (prove)\nusing this:\n  [index xs q - Suc e..<index xs q] = [index xs q - e..<index xs q]\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - e", "using Suc"], ["proof (prove)\nusing this:\n  [index xs q - Suc e..<index xs q] = [index xs q - e..<index xs q]\n  \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> index (swaps [index xs q - e..<index xs q] xs) q =\n                    index xs q - e\n  distinct xs\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - e", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - e\n\ngoal (2 subgoals):\n 1. index xs q - e = 0 \\<Longrightarrow>\n    index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e\n 2. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - e\n\ngoal (2 subgoals):\n 1. index xs q - e = 0 \\<Longrightarrow>\n    index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e\n 2. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have \"\\<dots> = index xs q - (Suc e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - e = index xs q - Suc e", "using 0"], ["proof (prove)\nusing this:\n  index xs q - e = 0\n\ngoal (1 subgoal):\n 1. index xs q - e = index xs q - Suc e", "by auto"], ["proof (state)\nthis:\n  index xs q - e = index xs q - Suc e\n\ngoal (2 subgoals):\n 1. index xs q - e = 0 \\<Longrightarrow>\n    index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e\n 2. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "finally"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e", "show \"index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e\""], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e", "."], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "case (Suc f)"], ["proof (state)\nthis:\n  index xs q - e = Suc f\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have gaa: \"Suc (index xs q - Suc e) = index xs q - e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc e) = index xs q - e", "using Suc"], ["proof (prove)\nusing this:\n  index xs q - e = Suc f\n\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc e) = index xs q - e", "by auto"], ["proof (state)\nthis:\n  Suc (index xs q - Suc e) = index xs q - e\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "from Suc"], ["proof (chain)\npicking this:\n  index xs q - e = Suc f", "have \"index xs q - e \\<le> index xs q\""], ["proof (prove)\nusing this:\n  index xs q - e = Suc f\n\ngoal (1 subgoal):\n 1. index xs q - e \\<le> index xs q", "by auto"], ["proof (state)\nthis:\n  index xs q - e \\<le> index xs q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "also"], ["proof (state)\nthis:\n  index xs q - e \\<le> index xs q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have \"\\<dots> < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q < length xs", "by(simp add: index_less_size_conv iH)"], ["proof (state)\nthis:\n  index xs q < length xs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "finally"], ["proof (chain)\npicking this:\n  index xs q - e < length xs", "have indle: \"index xs q - e < length xs\""], ["proof (prove)\nusing this:\n  index xs q - e < length xs\n\ngoal (1 subgoal):\n 1. index xs q - e < length xs", "."], ["proof (state)\nthis:\n  index xs q - e < length xs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have arg: \"Suc (index xs q - Suc e) < length (swaps [index xs q - e..<index xs q] xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc e)\n    < length (swaps [index xs q - e..<index xs q] xs)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc e) < length xs", "unfolding gaa"], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - e < length xs", "using indle"], ["proof (prove)\nusing this:\n  index xs q - e < length xs\n\ngoal (1 subgoal):\n 1. index xs q - e < length xs", "by simp"], ["proof (state)\nthis:\n  Suc (index xs q - Suc e) < length (swaps [index xs q - e..<index xs q] xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "then"], ["proof (chain)\npicking this:\n  Suc (index xs q - Suc e) < length (swaps [index xs q - e..<index xs q] xs)", "have arg2: \"index xs q - Suc e < length (swaps [index xs q - e..<index xs q] xs)\""], ["proof (prove)\nusing this:\n  Suc (index xs q - Suc e) < length (swaps [index xs q - e..<index xs q] xs)\n\ngoal (1 subgoal):\n 1. index xs q - Suc e < length (swaps [index xs q - e..<index xs q] xs)", "by auto"], ["proof (state)\nthis:\n  index xs q - Suc e < length (swaps [index xs q - e..<index xs q] xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "from Suc"], ["proof (chain)\npicking this:\n  index xs q - e = Suc f", "have nexter: \"index xs q - e = Suc (index xs q - (Suc e))\""], ["proof (prove)\nusing this:\n  index xs q - e = Suc f\n\ngoal (1 subgoal):\n 1. index xs q - e = Suc (index xs q - Suc e)", "by auto"], ["proof (state)\nthis:\n  index xs q - e = Suc (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "then"], ["proof (chain)\npicking this:\n  index xs q - e = Suc (index xs q - Suc e)", "have aaa: \"[index xs q - Suc e..<index xs q]\n        = (index xs q - Suc e)#[index xs q - e..<index xs q]\""], ["proof (prove)\nusing this:\n  index xs q - e = Suc (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. [index xs q - Suc e..<index xs q] =\n    (index xs q - Suc e) # [index xs q - e..<index xs q]", "using upt_rec"], ["proof (prove)\nusing this:\n  index xs q - e = Suc (index xs q - Suc e)\n  [?i..<?j] = (if ?i < ?j then ?i # [Suc ?i..<?j] else [])\n\ngoal (1 subgoal):\n 1. [index xs q - Suc e..<index xs q] =\n    (index xs q - Suc e) # [index xs q - e..<index xs q]", "by auto"], ["proof (state)\nthis:\n  [index xs q - Suc e..<index xs q] =\n  (index xs q - Suc e) # [index xs q - e..<index xs q]\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "let ?i=\"index xs q - Suc e\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "let ?rest=\"swaps [index xs q - e..<index xs q] xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "from iH nexter"], ["proof (chain)\npicking this:\n  \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> index (swaps [index xs q - e..<index xs q] xs) q =\n                    index xs q - e\n  distinct xs\n  q \\<in> set xs\n  index xs q - e = Suc (index xs q - Suc e)", "have indj: \"index ?rest q = Suc ?i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> index (swaps [index xs q - e..<index xs q] xs) q =\n                    index xs q - e\n  distinct xs\n  q \\<in> set xs\n  index xs q - e = Suc (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - e..<index xs q] xs) q =\n    Suc (index xs q - Suc e)", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - e..<index xs q] xs) q =\n  Suc (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "from iH(2)"], ["proof (chain)\npicking this:\n  distinct xs", "have \"distinct ?rest\""], ["proof (prove)\nusing this:\n  distinct xs\n\ngoal (1 subgoal):\n 1. distinct (swaps [index xs q - e..<index xs q] xs)", "by auto"], ["proof (state)\nthis:\n  distinct (swaps [index xs q - e..<index xs q] xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have \"?rest ! (index ?rest q) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaps [index xs q - e..<index xs q] xs !\n    index (swaps [index xs q - e..<index xs q] xs) q =\n    q", "apply(rule nth_index)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> set (swaps [index xs q - e..<index xs q] xs)", "by(simp add: iH)"], ["proof (state)\nthis:\n  swaps [index xs q - e..<index xs q] xs !\n  index (swaps [index xs q - e..<index xs q] xs) q =\n  q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "with indj"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - e..<index xs q] xs) q =\n  Suc (index xs q - Suc e)\n  swaps [index xs q - e..<index xs q] xs !\n  index (swaps [index xs q - e..<index xs q] xs) q =\n  q", "have whichcase: \"q = ?rest ! Suc ?i\""], ["proof (prove)\nusing this:\n  index (swaps [index xs q - e..<index xs q] xs) q =\n  Suc (index xs q - Suc e)\n  swaps [index xs q - e..<index xs q] xs !\n  index (swaps [index xs q - e..<index xs q] xs) q =\n  q\n\ngoal (1 subgoal):\n 1. q = swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)", "by auto"], ["proof (state)\nthis:\n  q = swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "with \\<open>distinct ?rest\\<close>"], ["proof (chain)\npicking this:\n  distinct (swaps [index xs q - e..<index xs q] xs)\n  q = swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)", "have whichcase2: \"~ q = ?rest ! ?i\""], ["proof (prove)\nusing this:\n  distinct (swaps [index xs q - e..<index xs q] xs)\n  q = swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. q \\<noteq> swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)", "by (metis Suc_lessD arg index_nth_id n_not_Suc_n)"], ["proof (state)\nthis:\n  q \\<noteq> swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "from aaa"], ["proof (chain)\npicking this:\n  [index xs q - Suc e..<index xs q] =\n  (index xs q - Suc e) # [index xs q - e..<index xs q]", "have \"index (swaps [index xs q - Suc e..<index xs q] xs) q\n        = index (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs)) q\""], ["proof (prove)\nusing this:\n  [index xs q - Suc e..<index xs q] =\n  (index xs q - Suc e) # [index xs q - e..<index xs q]\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index\n     (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs)) q", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q =\n  index (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs))\n   q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q =\n  index (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs))\n   q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have \"\\<dots> = (if q = ?rest ! ?i then (Suc ?i) else if q = ?rest ! (Suc ?i) then ?i else index ?rest q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index\n     (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs))\n     q =\n    (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n     then Suc (index xs q - Suc e)\n     else if q =\n             swaps [index xs q - e..<index xs q] xs !\n             Suc (index xs q - Suc e)\n          then index xs q - Suc e\n          else index (swaps [index xs q - e..<index xs q] xs) q)", "apply(simp only: swap_def arg if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. index\n     ((swaps [index xs q - e..<index xs q] xs)\n      [index xs q - Suc e :=\n         swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e),\n       Suc (index xs q - Suc e) :=\n         swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)])\n     q =\n    (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n     then Suc (index xs q - Suc e)\n     else if q =\n             swaps [index xs q - e..<index xs q] xs !\n             Suc (index xs q - Suc e)\n          then index xs q - Suc e\n          else index (swaps [index xs q - e..<index xs q] xs) q)", "apply(rule index_swap_if_distinct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. distinct (swaps [index xs q - e..<index xs q] xs)\n 2. index xs q - Suc e < length (swaps [index xs q - e..<index xs q] xs)\n 3. Suc (index xs q - Suc e)\n    < length (swaps [index xs q - e..<index xs q] xs)", "apply(simp add: iH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. index xs q - Suc e < length (swaps [index xs q - e..<index xs q] xs)\n 2. Suc (index xs q - Suc e)\n    < length (swaps [index xs q - e..<index xs q] xs)", "apply(simp only: arg2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (index xs q - Suc e)\n    < length (swaps [index xs q - e..<index xs q] xs)", "by(simp only: arg)"], ["proof (state)\nthis:\n  index (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs))\n   q =\n  (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n   then Suc (index xs q - Suc e)\n   else if q =\n           swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)\n        then index xs q - Suc e\n        else index (swaps [index xs q - e..<index xs q] xs) q)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "also"], ["proof (state)\nthis:\n  index (swap (index xs q - Suc e) (swaps [index xs q - e..<index xs q] xs))\n   q =\n  (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n   then Suc (index xs q - Suc e)\n   else if q =\n           swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)\n        then index xs q - Suc e\n        else index (swaps [index xs q - e..<index xs q] xs) q)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "have \"\\<dots> = ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n     then Suc (index xs q - Suc e)\n     else if q =\n             swaps [index xs q - e..<index xs q] xs !\n             Suc (index xs q - Suc e)\n          then index xs q - Suc e\n          else index (swaps [index xs q - e..<index xs q] xs) q) =\n    index xs q - Suc e", "using whichcase whichcase2"], ["proof (prove)\nusing this:\n  q = swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)\n  q \\<noteq> swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n\ngoal (1 subgoal):\n 1. (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n     then Suc (index xs q - Suc e)\n     else if q =\n             swaps [index xs q - e..<index xs q] xs !\n             Suc (index xs q - Suc e)\n          then index xs q - Suc e\n          else index (swaps [index xs q - e..<index xs q] xs) q) =\n    index xs q - Suc e", "by simp"], ["proof (state)\nthis:\n  (if q = swaps [index xs q - e..<index xs q] xs ! (index xs q - Suc e)\n   then Suc (index xs q - Suc e)\n   else if q =\n           swaps [index xs q - e..<index xs q] xs ! Suc (index xs q - Suc e)\n        then index xs q - Suc e\n        else index (swaps [index xs q - e..<index xs q] xs) q) =\n  index xs q - Suc e\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       index xs q - e = Suc nat \\<Longrightarrow>\n       index (swaps [index xs q - Suc e..<index xs q] xs) q =\n       index xs q - Suc e", "finally"], ["proof (chain)\npicking this:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e", "show \"index (swaps [index xs q - Suc e..<index xs q] xs) q =\n              index xs q - Suc e\""], ["proof (prove)\nusing this:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e\n\ngoal (1 subgoal):\n 1. index (swaps [index xs q - Suc e..<index xs q] xs) q =\n    index xs q - Suc e", "."], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  index (swaps [index xs q - Suc e..<index xs q] xs) q = index xs q - Suc e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - 0..<index xs q] xs) q =\n                      index xs q - 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - 0..<index xs q] xs) q =\n                      index xs q - 0", "case 0"], ["proof (state)\nthis:\n  distinct xs\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (swaps [index xs q - 0..<index xs q] xs) q =\n                      index xs q - 0", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - 0..<index xs q] xs) q = index xs q - 0", "by simp"], ["proof (state)\nthis:\n  index (swaps [index xs q - 0..<index xs q] xs) q = index xs q - 0\n\ngoal:\nNo subgoals!", "qed"], ["", "term \"mtf2\""], ["", "lemma mtf2_moves_to_front: \"distinct xs \\<Longrightarrow> q \\<in> set xs \\<Longrightarrow> index (mtf2 (length xs) q xs) q  = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 (length xs) q xs) q = 0", "unfolding mtf2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "assume distxs: \"distinct xs\""], ["proof (state)\nthis:\n  distinct xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "assume qinxs: \"q \\<in> set xs\""], ["proof (state)\nthis:\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "have \" index (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs else xs) q \n    = index ( swaps [index xs q - length xs..<index xs q] xs) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index\n     (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n      else xs)\n     q =\n    index (swaps [index xs q - length xs..<index xs q] xs) q", "using qinxs"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. index\n     (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n      else xs)\n     q =\n    index (swaps [index xs q - length xs..<index xs q] xs) q", "by auto"], ["proof (state)\nthis:\n  index\n   (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n    else xs)\n   q =\n  index (swaps [index xs q - length xs..<index xs q] xs) q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "also"], ["proof (state)\nthis:\n  index\n   (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n    else xs)\n   q =\n  index (swaps [index xs q - length xs..<index xs q] xs) q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "have \"\\<dots> = index xs q - (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - length xs..<index xs q] xs) q =\n    index xs q - length xs", "apply(rule swapsthrough)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. q \\<in> set xs", "using distxs qinxs"], ["proof (prove)\nusing this:\n  distinct xs\n  q \\<in> set xs\n\ngoal (2 subgoals):\n 1. distinct xs\n 2. q \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - length xs..<index xs q] xs) q =\n  index xs q - length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - length xs..<index xs q] xs) q =\n  index xs q - length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - length xs = 0", "using index_less_size_conv qinxs"], ["proof (prove)\nusing this:\n  (index ?xs ?x < length ?xs) = (?x \\<in> set ?xs)\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. index xs q - length xs = 0", "by (simp add: index_le_size)"], ["proof (state)\nthis:\n  index xs q - length xs = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps [index xs q - length xs..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "finally"], ["proof (chain)\npicking this:\n  index\n   (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n    else xs)\n   q =\n  0", "show \"index (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs else xs) q = 0\""], ["proof (prove)\nusing this:\n  index\n   (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n    else xs)\n   q =\n  0\n\ngoal (1 subgoal):\n 1. index\n     (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n      else xs)\n     q =\n    0", "."], ["proof (state)\nthis:\n  index\n   (if q \\<in> set xs then swaps [index xs q - length xs..<index xs q] xs\n    else xs)\n   q =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma xy_relativorder_mtf2:\n  assumes \n    \"q\\<noteq>x\" \"q\\<noteq>y\" \"distinct xs\" \"x\\<in>set xs\" \"y\\<in>set xs\" \"q\\<in>set xs\"\n  shows \"x < y in mtf2 n q xs\n          = x < y in xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs = x < y in xs", "using assms"], ["proof (prove)\nusing this:\n  q \\<noteq> x\n  q \\<noteq> y\n  distinct xs\n  x \\<in> set xs\n  y \\<in> set xs\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. x < y in mtf2 n q xs = x < y in xs", "by (metis before_in_setD2 not_before_in x_stays_before_y_if_y_not_moved_to_front)"], ["", "lemma mtf2_moves_to_frontm1: \"distinct xs \\<Longrightarrow> q \\<in> set xs \\<Longrightarrow> index (mtf2 (length xs -1) q xs) q  = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index (mtf2 (length xs - 1) q xs) q = 0", "unfolding mtf2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "assume distxs: \"distinct xs\""], ["proof (state)\nthis:\n  distinct xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "assume qinxs: \"q \\<in> set xs\""], ["proof (state)\nthis:\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "have \" index (if q \\<in> set xs then swaps [index xs q - (length xs -1)..<index xs q] xs else xs) q \n    = index ( swaps [index xs q - (length xs -1)..<index xs q] xs) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index\n     (if q \\<in> set xs\n      then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n     q =\n    index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q", "using qinxs"], ["proof (prove)\nusing this:\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. index\n     (if q \\<in> set xs\n      then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n     q =\n    index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q", "by auto"], ["proof (state)\nthis:\n  index\n   (if q \\<in> set xs\n    then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n   q =\n  index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "also"], ["proof (state)\nthis:\n  index\n   (if q \\<in> set xs\n    then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n   q =\n  index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "have \"\\<dots> = index xs q - (length xs -1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q =\n    index xs q - (length xs - 1)", "apply(rule swapsthrough)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct xs\n 2. q \\<in> set xs", "using distxs qinxs"], ["proof (prove)\nusing this:\n  distinct xs\n  q \\<in> set xs\n\ngoal (2 subgoals):\n 1. distinct xs\n 2. q \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q =\n  index xs q - (length xs - 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "also"], ["proof (state)\nthis:\n  index (swaps [index xs q - (length xs - 1)..<index xs q] xs) q =\n  index xs q - (length xs - 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index xs q - (length xs - 1) = 0", "using index_less_size_conv qinxs"], ["proof (prove)\nusing this:\n  (index ?xs ?x < length ?xs) = (?x \\<in> set ?xs)\n  q \\<in> set xs\n\ngoal (1 subgoal):\n 1. index xs q - (length xs - 1) = 0", "by (metis Suc_pred' gr0I length_pos_if_in_set less_irrefl less_trans_Suc zero_less_diff)"], ["proof (state)\nthis:\n  index xs q - (length xs - 1) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; q \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> index\n                       (if q \\<in> set xs\n                        then swaps\n                              [index xs q - (length xs - 1)..<index xs q] xs\n                        else xs)\n                       q =\n                      0", "finally"], ["proof (chain)\npicking this:\n  index\n   (if q \\<in> set xs\n    then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n   q =\n  0", "show \"index (if q \\<in> set xs then swaps [index xs q - (length xs -1)..<index xs q] xs else xs) q = 0\""], ["proof (prove)\nusing this:\n  index\n   (if q \\<in> set xs\n    then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n   q =\n  0\n\ngoal (1 subgoal):\n 1. index\n     (if q \\<in> set xs\n      then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n     q =\n    0", "."], ["proof (state)\nthis:\n  index\n   (if q \\<in> set xs\n    then swaps [index xs q - (length xs - 1)..<index xs q] xs else xs)\n   q =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtf2_moves_to_front': \"distinct xs \\<Longrightarrow> y \\<in> set xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> x\\<noteq>y \\<Longrightarrow> x < y in mtf2 (length xs-1) x xs = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; y \\<in> set xs; x \\<in> set xs;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 (length xs - 1) x xs = True", "using mtf2_moves_to_frontm1"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct ?xs; ?q \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 (length ?xs - 1) ?q ?xs) ?q = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; y \\<in> set xs; x \\<in> set xs;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 (length xs - 1) x xs = True", "by (metis before_in_def gr0I index_eq_index_conv set_mtf2)"], ["", "lemma mtf2_moves_to_front'': \"distinct xs \\<Longrightarrow> y \\<in> set xs \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> x\\<noteq>y \\<Longrightarrow> x < y in mtf2 (length xs) x xs = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; y \\<in> set xs; x \\<in> set xs;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 (length xs) x xs = True", "using mtf2_moves_to_front"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct ?xs; ?q \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> index (mtf2 (length ?xs) ?q ?xs) ?q = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; y \\<in> set xs; x \\<in> set xs;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> x < y in mtf2 (length xs) x xs = True", "by (metis before_in_def gr0I index_eq_index_conv set_mtf2)"], ["", "end"]]}