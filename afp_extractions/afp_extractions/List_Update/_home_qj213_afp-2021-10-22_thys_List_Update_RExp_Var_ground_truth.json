{"file_name": "/home/qj213/afp-2021-10-22/thys/List_Update/RExp_Var.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List_Update", "problem_names": ["lemma \"castdown (castup r) = r\"", "lemma \"lang (w2rexp as) = { as }\"", "lemma subst_w2rexp: \"lang (subst (w2rexp (xs @ ys)) \\<sigma>) = lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\"", "lemma L_mono: \"S1 \\<subseteq> S2 \\<Longrightarrow> L S1 \\<subseteq> L S2\"", "lemma substL_conc: \"L (substL (L1 @@ L2) \\<sigma>) = L (concS (substL L1 \\<sigma>) (substL L2 \\<sigma>))\"", "lemma L_conc: \"L(concS M1 M2) = (L M1) @@ (L M2)\"", "lemma \"L(M1 \\<union> M2) = (L M1) \\<union> (L M2)\"", "lemma lang_verund: \"r \\<in> L (set rs) = (r \\<in> lang (verund rs))\"", "lemma obtainit: \n  assumes \"r \\<in> lang (verund rs)\"\n  shows \"\\<exists>x\\<in>(set (rs::nat rexp list)). r \\<in> lang x\"", "lemma lang_verund4: \"L (set rs) = lang (verund rs)\"", "lemma lang_verund1: \"r \\<in> L (set rs) \\<Longrightarrow> r \\<in> lang (verund rs)\"", "lemma lang_verund2: \"r \\<in> lang (verund rs) \\<Longrightarrow> r \\<in> L (set rs)\"", "lemma \"[] \\<in> L (starS S)\"", "lemma power_mono: \"L1 \\<subseteq> L2 \\<Longrightarrow> (L1::'a lang) ^^ n \\<subseteq> L2 ^^ n\"", "lemma star_mono: \"L1 \\<subseteq> L2 \\<Longrightarrow> star L1 \\<subseteq> star L2\"", "lemma Lstar: \"L(starS M) = star ( L(M) )\"", "lemma substL_star: \"L (substL (star L1) \\<sigma>) = L (starS (substL L1 \\<sigma>))\"", "lemma substituitionslemma: \n  fixes E :: \"nat rexp\"\n  shows \"L (substL ( lang(E) ) \\<sigma>) = lang (subst E \\<sigma>)\"", "lemma \"lang (Plus (Atom (x::nat)) (Atom x))  = lang (Atom x)\"", "lemma \"L_4cases x y = verund [L_A x y, L_B x y, L_C x y, L_D x y]\"", "lemma lastxx_com: \"lang (L_lasthasxx (x::nat) y) = lang (L_lasthasxx y x)\" (is \"lang ?A = lang ?B\")", "lemma lastxx_is_4cases: \"lang (L_4cases x y) = lang (L_lasthasxx x y)\" (is \"lang ?A = lang ?B\")", "lemma myUNIV_alle: \"lang (myUNIV x y) = {xs. set xs \\<subseteq> {x,y}}\"", "lemma myUNIV_char: \"lang (myUNIV (x::nat) y) = lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))\" (is \"lang ?A = lang ?B\")", "lemma mycases_char: \"lang (myUNIV (x::nat) y) = lang (mycases x y)\" (is \"lang ?A = lang ?B\")"], "translations": [["", "lemma \"castdown (castup r) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. castdown (castup r) = r", "apply(induct r)"], ["proof (prove)\ngoal (6 subgoals):\n 1. castdown (castup Zero) = Zero\n 2. castdown (castup One) = One\n 3. \\<And>x. castdown (castup (Atom x)) = Atom x\n 4. \\<And>r1 r2.\n       \\<lbrakk>castdown (castup r1) = r1;\n        castdown (castup r2) = r2\\<rbrakk>\n       \\<Longrightarrow> castdown (castup (Plus r1 r2)) = Plus r1 r2\n 5. \\<And>r1 r2.\n       \\<lbrakk>castdown (castup r1) = r1;\n        castdown (castup r2) = r2\\<rbrakk>\n       \\<Longrightarrow> castdown (castup (Times r1 r2)) = Times r1 r2\n 6. \\<And>r.\n       castdown (castup r) = r \\<Longrightarrow>\n       castdown (castup (Star r)) = Star r", "by(auto)"], ["", "fun substvar :: \"nat \\<Rightarrow> (nat \\<Rightarrow> ((nat rexp) option)) \\<Rightarrow> nat rexp\" where\n  \"substvar i \\<sigma> = (case \\<sigma> i of Some x \\<Rightarrow> x\n                              | None \\<Rightarrow> Atom (2*i+1))\""], ["", "fun w2rexp :: \"nat list \\<Rightarrow> nat rexp\" where\n  \"w2rexp [] = One\"\n| \"w2rexp (a#as) = Times (Atom a) (w2rexp as)\""], ["", "lemma \"lang (w2rexp as) = { as }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (w2rexp as) = {as}", "apply(induct as)"], ["proof (prove)\ngoal (2 subgoals):\n 1. lang (w2rexp []) = {[]}\n 2. \\<And>a as.\n       lang (w2rexp as) = {as} \\<Longrightarrow>\n       lang (w2rexp (a # as)) = {a # as}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       lang (w2rexp as) = {as} \\<Longrightarrow>\n       lang (w2rexp (a # as)) = {a # as}", "by(simp add: conc_def)"], ["", "fun subst :: \"nat rexp \\<Rightarrow> (nat \\<Rightarrow> nat rexp option) \\<Rightarrow> nat rexp\" where\n  \"subst Zero _ = Zero\"\n| \"subst One _ = One\"\n| \"subst (Atom i) \\<sigma> = (if i mod 2 = 0 then Atom i else substvar (i div 2) \\<sigma>)\"\n| \"subst (Plus a b) \\<sigma> = Plus (subst a \\<sigma>) (subst b \\<sigma>)\"\n| \"subst (Times a b) \\<sigma> = Times (subst a \\<sigma>) (subst b \\<sigma>)\"\n| \"subst (Star a) \\<sigma> = Star (subst a \\<sigma>)\""], ["", "lemma subst_w2rexp: \"lang (subst (w2rexp (xs @ ys)) \\<sigma>) = lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n    lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)", "proof(induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "case (Cons x xs)"], ["proof (state)\nthis:\n  lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n  lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>)\n        = lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n    lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n  lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n  lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"\\<dots> = lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>) =\n    lang\n     (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>))", "by simp"], ["proof (state)\nthis:\n  lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>) =\n  lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>))\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (subst (Times (Atom x) (w2rexp (xs @ ys))) \\<sigma>) =\n  lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>))\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"\\<dots> = lang (subst (Atom x) \\<sigma>) @@ (lang (subst (w2rexp (xs @ ys)) \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>)) =\n    lang (subst (Atom x) \\<sigma>) @@\n    lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  lang\n   (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>)) =\n  lang (subst (Atom x) \\<sigma>) @@ lang (subst (w2rexp (xs @ ys)) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang\n   (Times (subst (Atom x) \\<sigma>) (subst (w2rexp (xs @ ys)) \\<sigma>)) =\n  lang (subst (Atom x) \\<sigma>) @@ lang (subst (w2rexp (xs @ ys)) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"\\<dots> = lang (subst (Atom x) \\<sigma>) @@ ( lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (Atom x) \\<sigma>) @@\n    lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n    lang (subst (Atom x) \\<sigma>) @@\n    lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)", "by(simp only: Cons)"], ["proof (state)\nthis:\n  lang (subst (Atom x) \\<sigma>) @@\n  lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n  lang (subst (Atom x) \\<sigma>) @@\n  lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (subst (Atom x) \\<sigma>) @@\n  lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n  lang (subst (Atom x) \\<sigma>) @@\n  lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"\\<dots> = lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@ lang (subst (w2rexp ys) \\<sigma>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (Atom x) \\<sigma>) @@\n    lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>) =\n    lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@\n    lang (subst (w2rexp ys) \\<sigma>)", "apply(simp del: subst.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (Atom x) \\<sigma>) @@\n    lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>) =\n    (lang (subst (Atom x) \\<sigma>) @@ lang (subst (w2rexp xs) \\<sigma>)) @@\n    lang (subst (w2rexp ys) \\<sigma>)", "by(rule conc_assoc[symmetric])"], ["proof (state)\nthis:\n  lang (subst (Atom x) \\<sigma>) @@\n  lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>) =\n  lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (subst (Atom x) \\<sigma>) @@\n  lang (subst (w2rexp xs) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>) =\n  lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"\\<dots> = lang (subst (Times (Atom x) (w2rexp xs)) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@\n    lang (subst (w2rexp ys) \\<sigma>) =\n    lang (subst (Times (Atom x) (w2rexp xs)) \\<sigma>) @@\n    lang (subst (w2rexp ys) \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@\n  lang (subst (w2rexp ys) \\<sigma>) =\n  lang (subst (Times (Atom x) (w2rexp xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (Times (subst (Atom x) \\<sigma>) (subst (w2rexp xs) \\<sigma>)) @@\n  lang (subst (w2rexp ys) \\<sigma>) =\n  lang (subst (Times (Atom x) (w2rexp xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "have \"\\<dots> = lang (subst (w2rexp (x # xs)) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst (Times (Atom x) (w2rexp xs)) \\<sigma>) @@\n    lang (subst (w2rexp ys) \\<sigma>) =\n    lang (subst (w2rexp (x # xs)) \\<sigma>) @@\n    lang (subst (w2rexp ys) \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  lang (subst (Times (Atom x) (w2rexp xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>) =\n  lang (subst (w2rexp (x # xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (2 subgoals):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)\n 2. \\<And>a xs.\n       lang (subst (w2rexp (xs @ ys)) \\<sigma>) =\n       lang (subst (w2rexp xs) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>) \\<Longrightarrow>\n       lang (subst (w2rexp ((a # xs) @ ys)) \\<sigma>) =\n       lang (subst (w2rexp (a # xs)) \\<sigma>) @@\n       lang (subst (w2rexp ys) \\<sigma>)", "finally"], ["proof (chain)\npicking this:\n  lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n  lang (subst (w2rexp (x # xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n  lang (subst (w2rexp (x # xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n    lang (subst (w2rexp (x # xs)) \\<sigma>) @@\n    lang (subst (w2rexp ys) \\<sigma>)", "."], ["proof (state)\nthis:\n  lang (subst (w2rexp ((x # xs) @ ys)) \\<sigma>) =\n  lang (subst (w2rexp (x # xs)) \\<sigma>) @@\n  lang (subst (w2rexp ys) \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang (subst (w2rexp ([] @ ys)) \\<sigma>) =\n    lang (subst (w2rexp []) \\<sigma>) @@ lang (subst (w2rexp ys) \\<sigma>)", "qed simp"], ["", "fun substW :: \"nat list \\<Rightarrow> (nat \\<Rightarrow> nat rexp option) \\<Rightarrow> nat rexp\" where\n  \"substW as \\<sigma> = subst (w2rexp as) \\<sigma>\""], ["", "fun substL :: \"nat lang \\<Rightarrow> (nat \\<Rightarrow> nat rexp option) \\<Rightarrow> nat rexp set\" where\n  \"substL S \\<sigma> = {substW a \\<sigma>|a. a \\<in> S}\""], ["", "fun L :: \"nat rexp set \\<Rightarrow> nat lang\" where\n  \"L S = (\\<Union>r\\<in>S. lang r)\""], ["", "lemma L_mono: \"S1 \\<subseteq> S2 \\<Longrightarrow> L S1 \\<subseteq> L S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S1 \\<subseteq> S2 \\<Longrightarrow> L S1 \\<subseteq> L S2", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. S1 \\<subseteq> S2 \\<Longrightarrow>\n    \\<Union> (lang ` S1) \\<subseteq> \\<Union> (lang ` S2)", "by blast"], ["", "definition concS :: \"'b rexp set \\<Rightarrow> 'b rexp set \\<Rightarrow> 'b rexp set\" where\n  \"concS S1 S2 = {Times a b|a b. a\\<in>S1 \\<and> b\\<in>S2}\""], ["", "lemma substL_conc: \"L (substL (L1 @@ L2) \\<sigma>) = L (concS (substL L1 \\<sigma>) (substL L2 \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (L1 @@ L2) \\<sigma>) =\n    L (concS (substL L1 \\<sigma>) (substL L2 \\<sigma>))", "apply(simp add: concS_def conc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (lang `\n      {subst (w2rexp a) \\<sigma> |a.\n       \\<exists>xs ys. a = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2}) =\n    \\<Union>\n     (lang `\n      {Times a b |a b.\n       (\\<exists>aa.\n           a = subst (w2rexp aa) \\<sigma> \\<and> aa \\<in> L1) \\<and>\n       (\\<exists>a. b = subst (w2rexp a) \\<sigma> \\<and> a \\<in> L2)})", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs ys.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>);\n        xs \\<in> L1; ys \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a b.\n                                xa = Times a b \\<and>\n                                (\\<exists>aa.\n                                    a = subst (w2rexp aa) \\<sigma> \\<and>\n                                    aa \\<in> L1) \\<and>\n                                (\\<exists>a.\n                                    b = subst (w2rexp a) \\<sigma> \\<and>\n                                    a \\<in> L2)) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x aa ab.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp aa) \\<sigma>) @@\n                        lang (subst (w2rexp ab) \\<sigma>);\n        aa \\<in> L1; ab \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>xs ys.\n                                    a = xs @ ys \\<and>\n                                    xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n                            x \\<in> lang xa", "proof (goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xs ys.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>);\n        xs \\<in> L1; ys \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a b.\n                                xa = Times a b \\<and>\n                                (\\<exists>aa.\n                                    a = subst (w2rexp aa) \\<sigma> \\<and>\n                                    aa \\<in> L1) \\<and>\n                                (\\<exists>a.\n                                    b = subst (w2rexp a) \\<sigma> \\<and>\n                                    a \\<in> L2)) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x aa ab.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp aa) \\<sigma>) @@\n                        lang (subst (w2rexp ab) \\<sigma>);\n        aa \\<in> L1; ab \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>xs ys.\n                                    a = xs @ ys \\<and>\n                                    xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n                            x \\<in> lang xa", "case (1 x xs ys)"], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)\n  xs \\<in> L1\n  ys \\<in> L2\n\ngoal (2 subgoals):\n 1. \\<And>x xs ys.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>);\n        xs \\<in> L1; ys \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a b.\n                                xa = Times a b \\<and>\n                                (\\<exists>aa.\n                                    a = subst (w2rexp aa) \\<sigma> \\<and>\n                                    aa \\<in> L1) \\<and>\n                                (\\<exists>a.\n                                    b = subst (w2rexp a) \\<sigma> \\<and>\n                                    a \\<in> L2)) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x aa ab.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp aa) \\<sigma>) @@\n                        lang (subst (w2rexp ab) \\<sigma>);\n        aa \\<in> L1; ab \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>xs ys.\n                                    a = xs @ ys \\<and>\n                                    xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       (\\<exists>a b.\n           xa = Times a b \\<and>\n           (\\<exists>aa.\n               a = subst (w2rexp aa) \\<sigma> \\<and> aa \\<in> L1) \\<and>\n           (\\<exists>a.\n               b = subst (w2rexp a) \\<sigma> \\<and> a \\<in> L2)) \\<and>\n       x \\<in> lang xa", "apply(rule exI[where x=\"Times (subst (w2rexp xs) \\<sigma>) (subst (w2rexp ys) \\<sigma>)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a b.\n        Times (subst (w2rexp xs) \\<sigma>) (subst (w2rexp ys) \\<sigma>) =\n        Times a b \\<and>\n        (\\<exists>aa.\n            a = subst (w2rexp aa) \\<sigma> \\<and> aa \\<in> L1) \\<and>\n        (\\<exists>a.\n            b = subst (w2rexp a) \\<sigma> \\<and> a \\<in> L2)) \\<and>\n    x \\<in> lang\n             (Times (subst (w2rexp xs) \\<sigma>)\n               (subst (w2rexp ys) \\<sigma>))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        subst (w2rexp xs) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n        a \\<in> L1) \\<and>\n    (\\<exists>a.\n        subst (w2rexp ys) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n        a \\<in> L2) \\<and>\n    x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>a.\n       subst (w2rexp xs) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n       a \\<in> L1\n 2. \\<exists>a.\n       subst (w2rexp ys) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n       a \\<in> L2\n 3. x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "apply(rule exI[where x=\"xs\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. subst (w2rexp xs) \\<sigma> = subst (w2rexp xs) \\<sigma> \\<and>\n    xs \\<in> L1\n 2. \\<exists>a.\n       subst (w2rexp ys) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n       a \\<in> L2\n 3. x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "apply(simp add: 1(2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a.\n       subst (w2rexp ys) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n       a \\<in> L2\n 2. x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "apply(rule exI[where x=\"ys\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. subst (w2rexp ys) \\<sigma> = subst (w2rexp ys) \\<sigma> \\<and>\n    ys \\<in> L2\n 2. x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "apply(simp add: 1(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "using 1(1) subst_w2rexp"], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)\n  lang (subst (w2rexp (?xs @ ?ys)) ?\\<sigma>) =\n  lang (subst (w2rexp ?xs) ?\\<sigma>) @@ lang (subst (w2rexp ?ys) ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n            lang (subst (w2rexp ys) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa.\n     (\\<exists>a b.\n         xa = Times a b \\<and>\n         (\\<exists>aa.\n             a = subst (w2rexp aa) \\<sigma> \\<and> aa \\<in> L1) \\<and>\n         (\\<exists>a.\n             b = subst (w2rexp a) \\<sigma> \\<and> a \\<in> L2)) \\<and>\n     x \\<in> lang xa\n\ngoal (1 subgoal):\n 1. \\<And>x aa ab.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp aa) \\<sigma>) @@\n                        lang (subst (w2rexp ab) \\<sigma>);\n        aa \\<in> L1; ab \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>xs ys.\n                                    a = xs @ ys \\<and>\n                                    xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n                            x \\<in> lang xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x aa ab.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp aa) \\<sigma>) @@\n                        lang (subst (w2rexp ab) \\<sigma>);\n        aa \\<in> L1; ab \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>xs ys.\n                                    a = xs @ ys \\<and>\n                                    xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n                            x \\<in> lang xa", "case (2 x xs ys)"], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n          lang (subst (w2rexp ys) \\<sigma>)\n  xs \\<in> L1\n  ys \\<in> L2\n\ngoal (1 subgoal):\n 1. \\<And>x aa ab.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp aa) \\<sigma>) @@\n                        lang (subst (w2rexp ab) \\<sigma>);\n        aa \\<in> L1; ab \\<in> L2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>xs ys.\n                                    a = xs @ ys \\<and>\n                                    xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       (\\<exists>a.\n           xa = subst (w2rexp a) \\<sigma> \\<and>\n           (\\<exists>xs ys.\n               a = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n       x \\<in> lang xa", "apply(rule exI[where x=\"subst (w2rexp (xs @ ys)) \\<sigma>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        subst (w2rexp (xs @ ys)) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n        (\\<exists>xs ys.\n            a = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n    x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a.\n       subst (w2rexp (xs @ ys)) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n       (\\<exists>xs ys. a = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2)\n 2. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "apply(rule exI[where x=\"xs@ys\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. subst (w2rexp (xs @ ys)) \\<sigma> =\n    subst (w2rexp (xs @ ys)) \\<sigma> \\<and>\n    (\\<exists>xsa ysa.\n        xs @ ys = xsa @ ysa \\<and> xsa \\<in> L1 \\<and> ysa \\<in> L2)\n 2. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>xsa ysa.\n       xs @ ys = xsa @ ysa \\<and> xsa \\<in> L1 \\<and> ysa \\<in> L2\n 2. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "apply(rule exI[where x=\"xs\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>ysa. xs @ ys = xs @ ysa \\<and> xs \\<in> L1 \\<and> ysa \\<in> L2\n 2. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "apply(rule exI[where x=\"ys\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs @ ys = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2\n 2. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "using 2(2,3)"], ["proof (prove)\nusing this:\n  xs \\<in> L1\n  ys \\<in> L2\n\ngoal (2 subgoals):\n 1. xs @ ys = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2\n 2. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "using 2(1) subst_w2rexp"], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp xs) \\<sigma>) @@\n          lang (subst (w2rexp ys) \\<sigma>)\n  lang (subst (w2rexp (?xs @ ?ys)) ?\\<sigma>) =\n  lang (subst (w2rexp ?xs) ?\\<sigma>) @@ lang (subst (w2rexp ?ys) ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (xs @ ys)) \\<sigma>)", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>xa.\n     (\\<exists>a.\n         xa = subst (w2rexp a) \\<sigma> \\<and>\n         (\\<exists>xs ys.\n             a = xs @ ys \\<and> xs \\<in> L1 \\<and> ys \\<in> L2)) \\<and>\n     x \\<in> lang xa\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma L_conc: \"L(concS M1 M2) = (L M1) @@ (L M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"L(concS M1 M2) = (\\<Union>x\\<in>{Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2}. lang x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (concS M1 M2) =\n    \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2})", "unfolding concS_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. L {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n    \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2})", "by(simp)"], ["proof (state)\nthis:\n  L (concS M1 M2) =\n  \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2})\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "also"], ["proof (state)\nthis:\n  L (concS M1 M2) =\n  \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2})\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"\\<dots> = (\\<Union>{lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2} )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2}) =\n    \\<Union> {lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2}", "by blast"], ["proof (state)\nthis:\n  \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2}) =\n  \\<Union> {lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "also"], ["proof (state)\nthis:\n  \\<Union> (lang ` {Times a b |a b. a \\<in> M1 \\<and> b \\<in> M2}) =\n  \\<Union> {lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"\\<dots> = (\\<Union>{lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2} )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n    \\<Union> {lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2}", "by simp"], ["proof (state)\nthis:\n  \\<Union> {lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n  \\<Union> {lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "also"], ["proof (state)\nthis:\n  \\<Union> {lang (Times a b) |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n  \\<Union> {lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"\\<dots> = (\\<Union>{{xs@ys | xs ys. xs \\<in> lang a & ys \\<in> lang b} |a b. a \\<in> M1 \\<and> b \\<in> M2} )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n    \\<Union>\n     {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n      a \\<in> M1 \\<and> b \\<in> M2}", "unfolding conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n      a \\<in> M1 \\<and> b \\<in> M2} =\n    \\<Union>\n     {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n      a \\<in> M1 \\<and> b \\<in> M2}", "by simp"], ["proof (state)\nthis:\n  \\<Union> {lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n  \\<Union>\n   {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n    a \\<in> M1 \\<and> b \\<in> M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "also"], ["proof (state)\nthis:\n  \\<Union> {lang a @@ lang b |a b. a \\<in> M1 \\<and> b \\<in> M2} =\n  \\<Union>\n   {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n    a \\<in> M1 \\<and> b \\<in> M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"\\<dots> = {xs@ys | xs ys. xs\\<in> (\\<Union>r\\<in>M1. lang r) \\<and> ys \\<in> (\\<Union>r\\<in>M2. lang r) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n      a \\<in> M1 \\<and> b \\<in> M2} =\n    {xs @ ys |xs ys.\n     xs \\<in> \\<Union> (lang ` M1) \\<and> ys \\<in> \\<Union> (lang ` M2)}", "by blast"], ["proof (state)\nthis:\n  \\<Union>\n   {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n    a \\<in> M1 \\<and> b \\<in> M2} =\n  {xs @ ys |xs ys.\n   xs \\<in> \\<Union> (lang ` M1) \\<and> ys \\<in> \\<Union> (lang ` M2)}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "also"], ["proof (state)\nthis:\n  \\<Union>\n   {{xs @ ys |xs ys. xs \\<in> lang a \\<and> ys \\<in> lang b} |a b.\n    a \\<in> M1 \\<and> b \\<in> M2} =\n  {xs @ ys |xs ys.\n   xs \\<in> \\<Union> (lang ` M1) \\<and> ys \\<in> \\<Union> (lang ` M2)}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"\\<dots> = {xs@ys | xs ys. xs\\<in> L(M1) \\<and> ys \\<in> L(M2) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs @ ys |xs ys.\n     xs \\<in> \\<Union> (lang ` M1) \\<and> ys \\<in> \\<Union> (lang ` M2)} =\n    {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2}", "by simp"], ["proof (state)\nthis:\n  {xs @ ys |xs ys.\n   xs \\<in> \\<Union> (lang ` M1) \\<and> ys \\<in> \\<Union> (lang ` M2)} =\n  {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "also"], ["proof (state)\nthis:\n  {xs @ ys |xs ys.\n   xs \\<in> \\<Union> (lang ` M1) \\<and> ys \\<in> \\<Union> (lang ` M2)} =\n  {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2}\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "have \"\\<dots> = (L M1) @@ (L M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2} = L M1 @@ L M2", "unfolding conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2} =\n    {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2}", "by simp"], ["proof (state)\nthis:\n  {xs @ ys |xs ys. xs \\<in> L M1 \\<and> ys \\<in> L M2} = L M1 @@ L M2\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "finally"], ["proof (chain)\npicking this:\n  L (concS M1 M2) = L M1 @@ L M2", "show ?thesis"], ["proof (prove)\nusing this:\n  L (concS M1 M2) = L M1 @@ L M2\n\ngoal (1 subgoal):\n 1. L (concS M1 M2) = L M1 @@ L M2", "."], ["proof (state)\nthis:\n  L (concS M1 M2) = L M1 @@ L M2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"L(M1 \\<union> M2) = (L M1) \\<union> (L M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (M1 \\<union> M2) = L M1 \\<union> L M2", "by simp"], ["", "fun verund :: \"'b rexp list \\<Rightarrow> 'b rexp\" where\n  \"verund [] = Zero\"\n| \"verund [r] = r\"\n| \"verund (r#rs) = Plus r (verund rs)\""], ["", "lemma lang_verund: \"r \\<in> L (set rs) = (r \\<in> lang (verund rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r \\<in> L (set rs)) = (r \\<in> lang (verund rs))", "apply(induct rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (r \\<in> L (set [])) = (r \\<in> lang (verund []))\n 2. \\<And>a rs.\n       (r \\<in> L (set rs)) = (r \\<in> lang (verund rs)) \\<Longrightarrow>\n       (r \\<in> L (set (a # rs))) = (r \\<in> lang (verund (a # rs)))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       (r \\<in> L (set rs)) = (r \\<in> lang (verund rs)) \\<Longrightarrow>\n       (r \\<in> L (set (a # rs))) = (r \\<in> lang (verund (a # rs)))", "apply(case_tac rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs.\n       \\<lbrakk>(r \\<in> L (set rs)) = (r \\<in> lang (verund rs));\n        rs = []\\<rbrakk>\n       \\<Longrightarrow> (r \\<in> L (set (a # rs))) =\n                         (r \\<in> lang (verund (a # rs)))\n 2. \\<And>a rs aa list.\n       \\<lbrakk>(r \\<in> L (set rs)) = (r \\<in> lang (verund rs));\n        rs = aa # list\\<rbrakk>\n       \\<Longrightarrow> (r \\<in> L (set (a # rs))) =\n                         (r \\<in> lang (verund (a # rs)))", "by auto"], ["", "lemma obtainit: \n  assumes \"r \\<in> lang (verund rs)\"\n  shows \"\\<exists>x\\<in>(set (rs::nat rexp list)). r \\<in> lang x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set rs. r \\<in> lang x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set rs. r \\<in> lang x", "from assms"], ["proof (chain)\npicking this:\n  r \\<in> lang (verund rs)", "have \"r \\<in> L (set rs)\""], ["proof (prove)\nusing this:\n  r \\<in> lang (verund rs)\n\ngoal (1 subgoal):\n 1. r \\<in> L (set rs)", "by(simp only: lang_verund)"], ["proof (state)\nthis:\n  r \\<in> L (set rs)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set rs. r \\<in> lang x", "then"], ["proof (chain)\npicking this:\n  r \\<in> L (set rs)", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> L (set rs)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set rs. r \\<in> lang x", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set rs. r \\<in> lang x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang_verund4: \"L (set rs) = lang (verund rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (set rs) = lang (verund rs)", "apply(induct rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. L (set []) = lang (verund [])\n 2. \\<And>a rs.\n       L (set rs) = lang (verund rs) \\<Longrightarrow>\n       L (set (a # rs)) = lang (verund (a # rs))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       L (set rs) = lang (verund rs) \\<Longrightarrow>\n       L (set (a # rs)) = lang (verund (a # rs))", "apply(case_tac rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs.\n       \\<lbrakk>L (set rs) = lang (verund rs); rs = []\\<rbrakk>\n       \\<Longrightarrow> L (set (a # rs)) = lang (verund (a # rs))\n 2. \\<And>a rs aa list.\n       \\<lbrakk>L (set rs) = lang (verund rs); rs = aa # list\\<rbrakk>\n       \\<Longrightarrow> L (set (a # rs)) = lang (verund (a # rs))", "by auto"], ["", "lemma lang_verund1: \"r \\<in> L (set rs) \\<Longrightarrow> r \\<in> lang (verund rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> L (set rs) \\<Longrightarrow> r \\<in> lang (verund rs)", "apply(induct rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. r \\<in> L (set []) \\<Longrightarrow> r \\<in> lang (verund [])\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<in> L (set rs) \\<Longrightarrow>\n                r \\<in> lang (verund rs);\n        r \\<in> L (set (a # rs))\\<rbrakk>\n       \\<Longrightarrow> r \\<in> lang (verund (a # rs))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>r \\<in> L (set rs) \\<Longrightarrow>\n                r \\<in> lang (verund rs);\n        r \\<in> L (set (a # rs))\\<rbrakk>\n       \\<Longrightarrow> r \\<in> lang (verund (a # rs))", "apply(case_tac rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs.\n       \\<lbrakk>r \\<in> L (set rs) \\<Longrightarrow>\n                r \\<in> lang (verund rs);\n        r \\<in> L (set (a # rs)); rs = []\\<rbrakk>\n       \\<Longrightarrow> r \\<in> lang (verund (a # rs))\n 2. \\<And>a rs aa list.\n       \\<lbrakk>r \\<in> L (set rs) \\<Longrightarrow>\n                r \\<in> lang (verund rs);\n        r \\<in> L (set (a # rs)); rs = aa # list\\<rbrakk>\n       \\<Longrightarrow> r \\<in> lang (verund (a # rs))", "by auto"], ["", "lemma lang_verund2: \"r \\<in> lang (verund rs) \\<Longrightarrow> r \\<in> L (set rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> lang (verund rs) \\<Longrightarrow> r \\<in> L (set rs)", "apply(induct rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. r \\<in> lang (verund []) \\<Longrightarrow> r \\<in> L (set [])\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<in> lang (verund rs) \\<Longrightarrow>\n                r \\<in> L (set rs);\n        r \\<in> lang (verund (a # rs))\\<rbrakk>\n       \\<Longrightarrow> r \\<in> L (set (a # rs))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>r \\<in> lang (verund rs) \\<Longrightarrow>\n                r \\<in> L (set rs);\n        r \\<in> lang (verund (a # rs))\\<rbrakk>\n       \\<Longrightarrow> r \\<in> L (set (a # rs))", "apply(case_tac rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs.\n       \\<lbrakk>r \\<in> lang (verund rs) \\<Longrightarrow>\n                r \\<in> L (set rs);\n        r \\<in> lang (verund (a # rs)); rs = []\\<rbrakk>\n       \\<Longrightarrow> r \\<in> L (set (a # rs))\n 2. \\<And>a rs aa list.\n       \\<lbrakk>r \\<in> lang (verund rs) \\<Longrightarrow>\n                r \\<in> L (set rs);\n        r \\<in> lang (verund (a # rs)); rs = aa # list\\<rbrakk>\n       \\<Longrightarrow> r \\<in> L (set (a # rs))", "by auto"], ["", "definition starS :: \"'b rexp set \\<Rightarrow> 'b rexp set\" where\n  \"starS S = {Star (verund xs)|xs. set xs \\<subseteq> S}\""], ["", "lemma \"[] \\<in> L (starS S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> L (starS S)", "unfolding starS_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> L {Star (verund xs) |xs. set xs \\<subseteq> S}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>xs.\n           x = Star (verund xs) \\<and> set xs \\<subseteq> S) \\<and>\n       [] \\<in> lang x", "apply(rule exI[where x=\"Star(verund [])\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs.\n        Star (verund []) = Star (verund xs) \\<and>\n        set xs \\<subseteq> S) \\<and>\n    [] \\<in> lang (Star (verund []))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. Zero = verund xs \\<and> set xs \\<subseteq> S", "apply(rule exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero = verund [] \\<and> set [] \\<subseteq> S", "by (simp)"], ["", "lemma power_mono: \"L1 \\<subseteq> L2 \\<Longrightarrow> (L1::'a lang) ^^ n \\<subseteq> L2 ^^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L1 \\<subseteq> L2 \\<Longrightarrow> L1 ^^ n \\<subseteq> L2 ^^ n", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>L1 \\<subseteq> L2; x \\<in> L1 ^^ n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> L2 ^^ n", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>L1 \\<subseteq> L2; x \\<in> L1 ^^ 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> L2 ^^ 0\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>L1 \\<subseteq> L2; x \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> L2 ^^ n;\n        L1 \\<subseteq> L2; x \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> L2 ^^ Suc n", "by(auto simp: conc_def)"], ["", "lemma star_mono: \"L1 \\<subseteq> L2 \\<Longrightarrow> star L1 \\<subseteq> star L2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L1 \\<subseteq> L2 \\<Longrightarrow> star L1 \\<subseteq> star L2", "apply (simp add: star_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. L1 \\<subseteq> L2 \\<Longrightarrow>\n    \\<Union> (range ((^^) L1)) \\<subseteq> \\<Union> (range ((^^) L2))", "apply (rule UN_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. L1 \\<subseteq> L2 \\<Longrightarrow> UNIV \\<subseteq> UNIV\n 2. \\<And>n.\n       \\<lbrakk>L1 \\<subseteq> L2; n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> L1 ^^ n \\<subseteq> L2 ^^ n", "apply (auto simp: power_mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Lstar: \"L(starS M) = star ( L(M) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (starS M) = star (L M)", "unfolding starS_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. L {Star (verund xs) |xs. set xs \\<subseteq> M} = star (L M)", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "proof (goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "case (1 x xs)"], ["proof (state)\nthis:\n  x \\<in> star (lang (verund xs))\n  set xs \\<subseteq> M\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "from 1(2)"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> M", "have \"L (set xs) \\<subseteq> L (M)\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> M\n\ngoal (1 subgoal):\n 1. L (set xs) \\<subseteq> L M", "by(rule L_mono)"], ["proof (state)\nthis:\n  L (set xs) \\<subseteq> L M\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  L (set xs) \\<subseteq> L M", "have a: \"star (L (set xs)) \\<subseteq> star (L (M))\""], ["proof (prove)\nusing this:\n  L (set xs) \\<subseteq> L M\n\ngoal (1 subgoal):\n 1. star (L (set xs)) \\<subseteq> star (L M)", "by (rule star_mono)"], ["proof (state)\nthis:\n  star (L (set xs)) \\<subseteq> star (L M)\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "from 1(1)"], ["proof (chain)\npicking this:\n  x \\<in> star (lang (verund xs))", "obtain n where \"x \\<in> (lang (verund xs)) ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> star (lang (verund xs))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        x \\<in> lang (verund xs) ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding star_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (range ((^^) (lang (verund xs))))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        x \\<in> lang (verund xs) ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  x \\<in> lang (verund xs) ^^ n\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "thm lang_verund4"], ["proof (state)\nthis:\n  x \\<in> lang (verund xs) ^^ n\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang (verund xs) ^^ n", "have \"x \\<in> (L (set xs)) ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> lang (verund xs) ^^ n\n\ngoal (1 subgoal):\n 1. x \\<in> L (set xs) ^^ n", "by(simp only: lang_verund4)"], ["proof (state)\nthis:\n  x \\<in> L (set xs) ^^ n\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> L (set xs) ^^ n", "have \"x \\<in> star (L (set xs))\""], ["proof (prove)\nusing this:\n  x \\<in> L (set xs) ^^ n\n\ngoal (1 subgoal):\n 1. x \\<in> star (L (set xs))", "unfolding star_def"], ["proof (prove)\nusing this:\n  x \\<in> L (set xs) ^^ n\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (range ((^^) (L (set xs))))", "by auto"], ["proof (state)\nthis:\n  x \\<in> star (L (set xs))\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "with a"], ["proof (chain)\npicking this:\n  star (L (set xs)) \\<subseteq> star (L M)\n  x \\<in> star (L (set xs))", "have \"x \\<in> star (L (M))\""], ["proof (prove)\nusing this:\n  star (L (set xs)) \\<subseteq> star (L M)\n  x \\<in> star (L (set xs))\n\ngoal (1 subgoal):\n 1. x \\<in> star (L M)", "by auto"], ["proof (state)\nthis:\n  x \\<in> star (L M)\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs \\<subseteq> M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> star (\\<Union> (lang ` M))\n 2. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> star (L M)", "show \"x \\<in> star (\\<Union>x\\<in>M. lang x)\""], ["proof (prove)\nusing this:\n  x \\<in> star (L M)\n\ngoal (1 subgoal):\n 1. x \\<in> star (\\<Union> (lang ` M))", "unfolding starS_def"], ["proof (prove)\nusing this:\n  x \\<in> star (L M)\n\ngoal (1 subgoal):\n 1. x \\<in> star (\\<Union> (lang ` M))", "by auto"], ["proof (state)\nthis:\n  x \\<in> star (\\<Union> (lang ` M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "case (2 x)"], ["proof (state)\nthis:\n  x \\<in> star (\\<Union> (lang ` M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> star (\\<Union> (lang ` M))", "obtain n where \"x \\<in> (\\<Union>x\\<in>M. lang x) ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> star (\\<Union> (lang ` M))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding star_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (range ((^^) (\\<Union> (lang ` M))))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<Union> (lang ` M) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> star (\\<Union> (lang ` M)) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> (lang ` M) ^^ n", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (lang ` M) ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       (\\<exists>xs.\n           xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n       x \\<in> lang xa", "proof (induct n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union> (lang ` M) ^^ 0 \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "case 0"], ["proof (state)\nthis:\n  x \\<in> \\<Union> (lang ` M) ^^ 0\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union> (lang ` M) ^^ 0 \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> (lang ` M) ^^ 0", "have t: \"x=[]\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (lang ` M) ^^ 0\n\ngoal (1 subgoal):\n 1. x = []", "by(simp)"], ["proof (state)\nthis:\n  x = []\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union> (lang ` M) ^^ 0 \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<exists>xs.\n              xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n          x \\<in> lang xa\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>xs.\n           x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n       x \\<in> lang x", "apply(rule exI[where x=\"Star Zero\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs.\n        Star Zero = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n    x \\<in> lang (Star Zero)", "apply(auto simp: t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. Zero = verund xs \\<and> set xs \\<subseteq> M", "apply(rule exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero = verund [] \\<and> set [] \\<subseteq> M", "by(simp)"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>xs. x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n     x \\<in> lang x\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "case (Suc n)"], ["proof (state)\nthis:\n  ?x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n  \\<exists>x.\n     (\\<exists>xs. x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n     ?x \\<in> lang x\n  x \\<in> \\<Union> (lang ` M) ^^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "from Suc(2)"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> (lang ` M) ^^ Suc n", "have t: \"x \\<in> (\\<Union>a\\<in>M. lang a) @@ (\\<Union>a\\<in>M. lang a) ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (lang ` M) ^^ Suc n\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (lang ` M) @@ \\<Union> (lang ` M) ^^ n", "by (simp)"], ["proof (state)\nthis:\n  x \\<in> \\<Union> (lang ` M) @@ \\<Union> (lang ` M) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> (lang ` M) @@ \\<Union> (lang ` M) ^^ n", "obtain A B where x: \"x = A @ B\" and A: \"A \\<in> (\\<Union>a\\<in>M. lang a)\" and B: \"B \\<in> (\\<Union>a\\<in>M. lang a) ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (lang ` M) @@ \\<Union> (lang ` M) ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        \\<lbrakk>x = A @ B; A \\<in> \\<Union> (lang ` M);\n         B \\<in> \\<Union> (lang ` M) ^^ n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp: conc_def)"], ["proof (state)\nthis:\n  x = A @ B\n  A \\<in> \\<Union> (lang ` M)\n  B \\<in> \\<Union> (lang ` M) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x = A @ B\n  A \\<in> \\<Union> (lang ` M)\n  B \\<in> \\<Union> (lang ` M) ^^ n", "obtain m where am: \"A \\<in> lang m\" and mM: \"m\\<in>M\""], ["proof (prove)\nusing this:\n  x = A @ B\n  A \\<in> \\<Union> (lang ` M)\n  B \\<in> \\<Union> (lang ` M) ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>A \\<in> lang m; m \\<in> M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  A \\<in> lang m\n  m \\<in> M\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "from Suc(1)[OF B]"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>xs. x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n     B \\<in> lang x", "obtain b bs where \"b = Star (verund bs)\" and bsM: \"set bs \\<subseteq> M\" \"B \\<in> lang b\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>xs. x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n     B \\<in> lang x\n\ngoal (1 subgoal):\n 1. (\\<And>b bs.\n        \\<lbrakk>b = Star (verund bs); set bs \\<subseteq> M;\n         B \\<in> lang b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b = Star (verund bs)\n  set bs \\<subseteq> M\n  B \\<in> lang b\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  b = Star (verund bs)\n  set bs \\<subseteq> M\n  B \\<in> lang b", "have Bin:  \"B \\<in> lang (Star (verund bs))\""], ["proof (prove)\nusing this:\n  b = Star (verund bs)\n  set bs \\<subseteq> M\n  B \\<in> lang b\n\ngoal (1 subgoal):\n 1. B \\<in> lang (Star (verund bs))", "by simp"], ["proof (state)\nthis:\n  B \\<in> lang (Star (verund bs))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "let ?c = \"Star (verund (m#bs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "have ac: \"lang m \\<subseteq> lang (Star (verund (m # bs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang m \\<subseteq> lang (Star (verund (m # bs)))", "apply(cases bs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. bs = [] \\<Longrightarrow>\n    lang m \\<subseteq> lang (Star (verund (m # bs)))\n 2. \\<And>a list.\n       bs = a # list \\<Longrightarrow>\n       lang m \\<subseteq> lang (Star (verund (m # bs)))", "by(auto)"], ["proof (state)\nthis:\n  lang m \\<subseteq> lang (Star (verund (m # bs)))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "have ad: \"(lang (Star (verund bs))) \\<subseteq> lang (Star (verund (m # bs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Star (verund bs)) \\<subseteq> lang (Star (verund (m # bs)))", "apply (simp add: star_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range ((^^) (lang (verund bs))))\n    \\<subseteq> \\<Union> (range ((^^) (lang (verund (m # bs)))))", "apply (rule UN_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. UNIV \\<subseteq> UNIV\n 2. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n", "have t: \"(lang (verund bs) ^^ n) \\<subseteq> (lang m \\<union> lang (verund bs)) ^^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (verund bs) ^^ n\n    \\<subseteq> (lang m \\<union> lang (verund bs)) ^^ n", "by (rule power_mono) simp"], ["proof (state)\nthis:\n  lang (verund bs) ^^ n \\<subseteq> (lang m \\<union> lang (verund bs)) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n. lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n", "then"], ["proof (chain)\npicking this:\n  lang (verund bs) ^^ n \\<subseteq> (lang m \\<union> lang (verund bs)) ^^ n", "show \"lang (verund bs) ^^ n\n          \\<subseteq> lang (verund (m # bs)) ^^ n\""], ["proof (prove)\nusing this:\n  lang (verund bs) ^^ n \\<subseteq> (lang m \\<union> lang (verund bs)) ^^ n\n\ngoal (1 subgoal):\n 1. lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n", "by (cases bs) simp_all"], ["proof (state)\nthis:\n  lang (verund bs) ^^ n \\<subseteq> lang (verund (m # bs)) ^^ n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang (Star (verund bs)) \\<subseteq> lang (Star (verund (m # bs)))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "from Bin am mM x"], ["proof (chain)\npicking this:\n  B \\<in> lang (Star (verund bs))\n  A \\<in> lang m\n  m \\<in> M\n  x = A @ B", "have \"x \\<in> lang m @@ (lang (Star (verund bs)))\""], ["proof (prove)\nusing this:\n  B \\<in> lang (Star (verund bs))\n  A \\<in> lang m\n  m \\<in> M\n  x = A @ B\n\ngoal (1 subgoal):\n 1. x \\<in> lang m @@ lang (Star (verund bs))", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang m @@ lang (Star (verund bs))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang m @@ lang (Star (verund bs))", "have \" x \\<in> lang (Star (verund (m # bs))) @@ lang (Star (verund (m # bs)))\""], ["proof (prove)\nusing this:\n  x \\<in> lang m @@ lang (Star (verund bs))\n\ngoal (1 subgoal):\n 1. x \\<in> lang (Star (verund (m # bs))) @@ lang (Star (verund (m # bs)))", "using ac ad"], ["proof (prove)\nusing this:\n  x \\<in> lang m @@ lang (Star (verund bs))\n  lang m \\<subseteq> lang (Star (verund (m # bs)))\n  lang (Star (verund bs)) \\<subseteq> lang (Star (verund (m # bs)))\n\ngoal (1 subgoal):\n 1. x \\<in> lang (Star (verund (m # bs))) @@ lang (Star (verund (m # bs)))", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang (Star (verund (m # bs))) @@ lang (Star (verund (m # bs)))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang (Star (verund (m # bs))) @@ lang (Star (verund (m # bs)))", "have x_in: \"x \\<in> lang (Star (verund (m # bs)))\""], ["proof (prove)\nusing this:\n  x \\<in> lang (Star (verund (m # bs))) @@ lang (Star (verund (m # bs)))\n\ngoal (1 subgoal):\n 1. x \\<in> lang (Star (verund (m # bs)))", "by (auto)"], ["proof (state)\nthis:\n  x \\<in> lang (Star (verund (m # bs)))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> \\<Union> (lang ` M) ^^ n \\<Longrightarrow>\n                   \\<exists>xa.\n                      (\\<exists>xs.\n                          xa = Star (verund xs) \\<and>\n                          set xs \\<subseteq> M) \\<and>\n                      x \\<in> lang xa;\n        x \\<in> \\<Union> (lang ` M) ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs \\<subseteq> M) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>xs.\n           x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n       x \\<in> lang x", "apply(rule exI[where x=\"?c\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs.\n        Star (verund (m # bs)) = Star (verund xs) \\<and>\n        set xs \\<subseteq> M) \\<and>\n    x \\<in> lang (Star (verund (m # bs)))", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       Star (verund (m # bs)) = Star (verund xs) \\<and> set xs \\<subseteq> M\n 2. x \\<in> lang (Star (verund (m # bs)))", "apply(rule exI[where x=\"m#bs\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. Star (verund (m # bs)) = Star (verund (m # bs)) \\<and>\n    set (m # bs) \\<subseteq> M\n 2. x \\<in> lang (Star (verund (m # bs)))", "apply(simp add: bsM mM)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lang (Star (verund (m # bs)))", "by(fact x_in)"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>xs. x = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n     x \\<in> lang x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xa.\n     (\\<exists>xs. xa = Star (verund xs) \\<and> set xs \\<subseteq> M) \\<and>\n     x \\<in> lang xa\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substL_star: \"L (substL (star L1) \\<sigma>) = L (starS (substL L1 \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (star L1) \\<sigma>) = L (starS (substL L1 \\<sigma>))", "apply (simp add: concS_def conc_def starS_def star_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (lang ` {subst (w2rexp a) \\<sigma> |a. \\<exists>x. a \\<in> L1 ^^ x}) =\n    \\<Union>\n     (lang `\n      {Star (verund xs) |xs.\n       set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}})", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> star (lang (verund xs));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "unfolding star_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "fix x a n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "assume \"x \\<in> lang (subst (w2rexp a) \\<sigma>)\""], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "moreover"], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "assume \"a \\<in> L1 ^^ n\""], ["proof (state)\nthis:\n  a \\<in> L1 ^^ n\n\ngoal (2 subgoals):\n 1. \\<And>x a xb.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ n", "show \"\\<exists>xa. (\\<exists>xs. xa = Star (verund xs) \\<and> set xs\n    \\<subseteq> {subst (w2rexp a) \\<sigma> | a. a \\<in> L1}) \\<and> x \\<in> lang xa\""], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       (\\<exists>xs.\n           xa = Star (verund xs) \\<and>\n           set xs\n           \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n       x \\<in> lang xa", "proof(induct n arbitrary: x a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x a.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "case 0"], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ 0\n\ngoal (2 subgoals):\n 1. \\<And>x a.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ 0", "have \"a=[]\""], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ 0\n\ngoal (1 subgoal):\n 1. a = []", "by auto"], ["proof (state)\nthis:\n  a = []\n\ngoal (2 subgoals):\n 1. \\<And>x a.\n       \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "with 0"], ["proof (chain)\npicking this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ 0\n  a = []", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ 0\n  a = []\n\ngoal (1 subgoal):\n 1. \\<exists>xaa.\n       (\\<exists>xs.\n           xaa = Star (verund xs) \\<and>\n           set xs\n           \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n       x \\<in> lang xaa", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = []; a = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         (\\<exists>xs.\n                             xa = Star (verund xs) \\<and>\n                             set xs\n                             \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n    a \\<in> L1}) \\<and>\n                         [] \\<in> lang xa", "apply(rule exI[where x=\"Star (Zero)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = []; a = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>xs.\n                          Star Zero = Star (verund xs) \\<and>\n                          set xs\n                          \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n a \\<in> L1}) \\<and>\n                      [] \\<in> lang (Star Zero)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = []; a = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         Zero = verund xs \\<and>\n                         set xs\n                         \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\na \\<in> L1}", "apply(rule exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = []; a = []\\<rbrakk>\n    \\<Longrightarrow> Zero = verund [] \\<and>\n                      set []\n                      \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}", "by(simp)"], ["proof (state)\nthis:\n  \\<exists>xaa.\n     (\\<exists>xs.\n         xaa = Star (verund xs) \\<and>\n         set xs\n         \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n     x \\<in> lang xaa\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> lang (subst (w2rexp ?a) \\<sigma>);\n   ?a \\<in> L1 ^^ n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       (\\<exists>xs.\n                           xa = Star (verund xs) \\<and>\n                           set xs\n                           \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n  a \\<in> L1}) \\<and>\n                       ?x \\<in> lang xa\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> lang (subst (w2rexp ?a) \\<sigma>);\n   ?a \\<in> L1 ^^ n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       (\\<exists>xs.\n                           xa = Star (verund xs) \\<and>\n                           set xs\n                           \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n  a \\<in> L1}) \\<and>\n                       ?x \\<in> lang xa\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ Suc n", "have a1: \"a \\<in> L1 @@ L1 ^^ n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> lang (subst (w2rexp ?a) \\<sigma>);\n   ?a \\<in> L1 ^^ n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       (\\<exists>xs.\n                           xa = Star (verund xs) \\<and>\n                           set xs\n                           \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n  a \\<in> L1}) \\<and>\n                       ?x \\<in> lang xa\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n  a \\<in> L1 ^^ Suc n\n\ngoal (1 subgoal):\n 1. a \\<in> L1 @@ L1 ^^ n", "by auto"], ["proof (state)\nthis:\n  a \\<in> L1 @@ L1 ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  a \\<in> L1 @@ L1 ^^ n", "obtain A B where a2: \"a = A @ B\" and A: \"A \\<in> L1\" and B: \"B \\<in> L1 ^^ n\""], ["proof (prove)\nusing this:\n  a \\<in> L1 @@ L1 ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        \\<lbrakk>a = A @ B; A \\<in> L1; B \\<in> L1 ^^ n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a = A @ B\n  A \\<in> L1\n  B \\<in> L1 ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "thm subst_w2rexp"], ["proof (state)\nthis:\n  a = A @ B\n  A \\<in> L1\n  B \\<in> L1 ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "from Suc(2)"], ["proof (chain)\npicking this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)", "have \"x \\<in> lang (subst (w2rexp A) \\<sigma>) @@ lang (subst (w2rexp B) \\<sigma>)\""], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp a) \\<sigma>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp A) \\<sigma>) @@\n            lang (subst (w2rexp B) \\<sigma>)", "unfolding a2"], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp (A @ B)) \\<sigma>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp A) \\<sigma>) @@\n            lang (subst (w2rexp B) \\<sigma>)", "by(simp only: subst_w2rexp)"], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp A) \\<sigma>) @@\n          lang (subst (w2rexp B) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang (subst (w2rexp A) \\<sigma>) @@\n          lang (subst (w2rexp B) \\<sigma>)", "obtain x1 x2 where x: \"x = x1@x2\" and x1: \"x1 \\<in> lang (subst (w2rexp A) \\<sigma>)\"\n                    and  x2: \"x2 \\<in> lang (subst (w2rexp B) \\<sigma>)\""], ["proof (prove)\nusing this:\n  x \\<in> lang (subst (w2rexp A) \\<sigma>) @@\n          lang (subst (w2rexp B) \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        \\<lbrakk>x = x1 @ x2; x1 \\<in> lang (subst (w2rexp A) \\<sigma>);\n         x2 \\<in> lang (subst (w2rexp B) \\<sigma>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = x1 @ x2\n  x1 \\<in> lang (subst (w2rexp A) \\<sigma>)\n  x2 \\<in> lang (subst (w2rexp B) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "from Suc(1)[OF x2 B]"], ["proof (chain)\npicking this:\n  \\<exists>xa.\n     (\\<exists>xs.\n         xa = Star (verund xs) \\<and>\n         set xs\n         \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n     x2 \\<in> lang xa", "obtain R li where\n          R: \"R = Star (verund li)\" and li: \"set li \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\"\n              and x2R: \"x2 \\<in> lang R\""], ["proof (prove)\nusing this:\n  \\<exists>xa.\n     (\\<exists>xs.\n         xa = Star (verund xs) \\<and>\n         set xs\n         \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n     x2 \\<in> lang xa\n\ngoal (1 subgoal):\n 1. (\\<And>R li.\n        \\<lbrakk>R = Star (verund li);\n         set li \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1};\n         x2 \\<in> lang R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  R = Star (verund li)\n  set li \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n  x2 \\<in> lang R\n\ngoal (1 subgoal):\n 1. \\<And>n x a.\n       \\<lbrakk>\\<And>x a.\n                   \\<lbrakk>x \\<in> lang (subst (w2rexp a) \\<sigma>);\n                    a \\<in> L1 ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>xs.\n      xa = Star (verund xs) \\<and>\n      set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (subst (w2rexp a) \\<sigma>);\n        a \\<in> L1 ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs.\n                                xa = Star (verund xs) \\<and>\n                                set xs\n                                \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n       a \\<in> L1}) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xaa.\n       (\\<exists>xs.\n           xaa = Star (verund xs) \\<and>\n           set xs\n           \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n       x \\<in> lang xaa", "apply(rule exI[where x=\"Star (verund ((subst (w2rexp A) \\<sigma>)#li))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs.\n        Star (verund (subst (w2rexp A) \\<sigma> # li)) =\n        Star (verund xs) \\<and>\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n    x \\<in> lang (Star (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs.\n        verund (subst (w2rexp A) \\<sigma> # li) = verund xs \\<and>\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n    x \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       verund (subst (w2rexp A) \\<sigma> # li) = verund xs \\<and>\n       set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n 2. x \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(rule exI[where x=\"((subst (w2rexp A) \\<sigma>)#li)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. verund (subst (w2rexp A) \\<sigma> # li) =\n    verund (subst (w2rexp A) \\<sigma> # li) \\<and>\n    set (subst (w2rexp A) \\<sigma> # li)\n    \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n 2. x \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(simp add: li)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a.\n       subst (w2rexp A) \\<sigma> = subst (w2rexp a) \\<sigma> \\<and>\n       a \\<in> L1\n 2. x \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(rule exI[where x=\"A\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. subst (w2rexp A) \\<sigma> = subst (w2rexp A) \\<sigma> \\<and> A \\<in> L1\n 2. x \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(simp add: A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "unfolding x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "let ?L = \"(lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))\""], ["proof (state)\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "have t1: \"x1 \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)", "using x1 star_mono"], ["proof (prove)\nusing this:\n  x1 \\<in> lang (subst (w2rexp A) \\<sigma>)\n  ?L1.0 \\<subseteq> ?L2.0 \\<Longrightarrow>\n  star ?L1.0 \\<subseteq> star ?L2.0\n\ngoal (1 subgoal):\n 1. x1 \\<in> lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)", "by blast"], ["proof (state)\nthis:\n  x1 \\<in> lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)\n\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "have t2: \"x2 \\<in> star ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 \\<in> star\n              (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))", "using x2R R star_mono"], ["proof (prove)\nusing this:\n  x2 \\<in> lang R\n  R = Star (verund li)\n  ?L1.0 \\<subseteq> ?L2.0 \\<Longrightarrow>\n  star ?L1.0 \\<subseteq> star ?L2.0\n\ngoal (1 subgoal):\n 1. x2 \\<in> star\n              (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x2 \\<in> star (lang (verund li)); R = Star (verund li);\n     \\<And>L1 L2.\n        L1 \\<subseteq> L2 \\<Longrightarrow>\n        star L1 \\<subseteq> star L2\\<rbrakk>\n    \\<Longrightarrow> x2 \\<in> star\n                                (lang (subst (w2rexp A) \\<sigma>) \\<union>\n                                 lang (verund li))", "by blast"], ["proof (state)\nthis:\n  x2 \\<in> star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))\n\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "have \"x1 @ x2 \\<in> (?L @@ star ?L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 @ x2\n    \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)) @@\n          star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))", "using t1 t2"], ["proof (prove)\nusing this:\n  x1 \\<in> lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)\n  x2 \\<in> star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))\n\ngoal (1 subgoal):\n 1. x1 @ x2\n    \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)) @@\n          star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))", "by auto"], ["proof (state)\nthis:\n  x1 @ x2\n  \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)) @@\n        star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))\n\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "then"], ["proof (chain)\npicking this:\n  x1 @ x2\n  \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)) @@\n        star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))", "show ?case"], ["proof (prove)\nusing this:\n  x1 @ x2\n  \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li)) @@\n        star (lang (subst (w2rexp A) \\<sigma>) \\<union> lang (verund li))\n\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))", "apply(cases li)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x1 @ x2\n             \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union>\n                    lang (verund li)) @@\n                   star\n                    (lang (subst (w2rexp A) \\<sigma>) \\<union>\n                     lang (verund li));\n     li = []\\<rbrakk>\n    \\<Longrightarrow> x1 @ x2\n                      \\<in> star\n                             (lang\n                               (verund (subst (w2rexp A) \\<sigma> # li)))\n 2. \\<And>a list.\n       \\<lbrakk>x1 @ x2\n                \\<in> (lang (subst (w2rexp A) \\<sigma>) \\<union>\n                       lang (verund li)) @@\n                      star\n                       (lang (subst (w2rexp A) \\<sigma>) \\<union>\n                        lang (verund li));\n        li = a # list\\<rbrakk>\n       \\<Longrightarrow> x1 @ x2\n                         \\<in> star\n                                (lang\n                                  (verund (subst (w2rexp A) \\<sigma> # li)))", "by(auto)"], ["proof (state)\nthis:\n  x1 @ x2 \\<in> star (lang (verund (subst (w2rexp A) \\<sigma> # li)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xaa.\n     (\\<exists>xs.\n         xaa = Star (verund xs) \\<and>\n         set xs\n         \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n     x \\<in> lang xaa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xa.\n     (\\<exists>xs.\n         xa = Star (verund xs) \\<and>\n         set xs\n         \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}) \\<and>\n     x \\<in> lang xa\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "fix x and xs :: \"nat rexp list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "assume \"x \\<in> (\\<Union>n. lang (verund xs) ^^ n)\""], ["proof (state)\nthis:\n  x \\<in> \\<Union> (range ((^^) (lang (verund xs))))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> (range ((^^) (lang (verund xs))))", "obtain n where \"x \\<in> lang (verund xs) ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (range ((^^) (lang (verund xs))))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        x \\<in> lang (verund xs) ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang (verund xs) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "moreover"], ["proof (state)\nthis:\n  x \\<in> lang (verund xs) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "assume \"set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\""], ["proof (state)\nthis:\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> \\<Union> (range ((^^) (lang (verund xs))));\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>x. a \\<in> L1 ^^ x)) \\<and>\n                            x \\<in> lang xa", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> lang (verund xs) ^^ n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}", "show \"\\<exists>xa. (\\<exists>a. xa = subst (w2rexp a) \\<sigma> \\<and>\n    (\\<exists>n. a \\<in> L1 ^^ n)) \\<and> x \\<in> lang xa\""], ["proof (prove)\nusing this:\n  x \\<in> lang (verund xs) ^^ n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       (\\<exists>a.\n           xa = subst (w2rexp a) \\<sigma> \\<and>\n           (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n       x \\<in> lang xa", "proof (induct n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lang (verund xs) ^^ 0;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "case 0"], ["proof (state)\nthis:\n  x \\<in> lang (verund xs) ^^ 0\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lang (verund xs) ^^ 0;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang (verund xs) ^^ 0\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}", "have xe: \"x=[]\""], ["proof (prove)\nusing this:\n  x \\<in> lang (verund xs) ^^ 0\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n\ngoal (1 subgoal):\n 1. x = []", "by auto"], ["proof (state)\nthis:\n  x = []\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lang (verund xs) ^^ 0;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xaa.\n       (\\<exists>a.\n           xaa = subst (w2rexp a) \\<sigma> \\<and>\n           (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n       x \\<in> lang xaa", "apply(rule exI[where x=\"One\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        One = subst (w2rexp a) \\<sigma> \\<and>\n        (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n    x \\<in> lang One", "apply(simp add: xe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       One = subst (w2rexp a) \\<sigma> \\<and> (\\<exists>n. a \\<in> L1 ^^ n)", "apply(rule exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. One = subst (w2rexp []) \\<sigma> \\<and> (\\<exists>n. [] \\<in> L1 ^^ n)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. [] \\<in> L1 ^^ n", "apply(rule exI[where x=\"0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> L1 ^^ 0", "by(simp)"], ["proof (state)\nthis:\n  \\<exists>xaa.\n     (\\<exists>a.\n         xaa = subst (w2rexp a) \\<sigma> \\<and>\n         (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n     x \\<in> lang xaa\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> lang (verund xs) ^^ n;\n   set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       (\\<exists>a.\n                           xa = subst (w2rexp a) \\<sigma> \\<and>\n                           (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                       ?x \\<in> lang xa\n  x \\<in> lang (verund xs) ^^ Suc n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> lang (verund xs) ^^ n;\n   set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       (\\<exists>a.\n                           xa = subst (w2rexp a) \\<sigma> \\<and>\n                           (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                       ?x \\<in> lang xa\n  x \\<in> lang (verund xs) ^^ Suc n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}", "have \"x \\<in> lang (verund xs) @@ (lang (verund xs) ^^ n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> lang (verund xs) ^^ n;\n   set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       (\\<exists>a.\n                           xa = subst (w2rexp a) \\<sigma> \\<and>\n                           (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                       ?x \\<in> lang xa\n  x \\<in> lang (verund xs) ^^ Suc n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n\ngoal (1 subgoal):\n 1. x \\<in> lang (verund xs) @@ lang (verund xs) ^^ n", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang (verund xs) @@ lang (verund xs) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang (verund xs) @@ lang (verund xs) ^^ n", "obtain x1 x2 where x: \"x=x1@x2\" and x1: \"x1\\<in>lang (verund xs)\"\n                      and x2: \"x2 \\<in> (lang (verund xs) ^^ n)\""], ["proof (prove)\nusing this:\n  x \\<in> lang (verund xs) @@ lang (verund xs) ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        \\<lbrakk>x = x1 @ x2; x1 \\<in> lang (verund xs);\n         x2 \\<in> lang (verund xs) ^^ n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = x1 @ x2\n  x1 \\<in> lang (verund xs)\n  x2 \\<in> lang (verund xs) ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "from obtainit [OF x1]"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set xs. x1 \\<in> lang x", "obtain el\n      where \"el \\<in> set xs\" and \"x1 \\<in> lang el\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set xs. x1 \\<in> lang x\n\ngoal (1 subgoal):\n 1. (\\<And>el.\n        \\<lbrakk>el \\<in> set xs; x1 \\<in> lang el\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  el \\<in> set xs\n  x1 \\<in> lang el\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "with Suc.prems"], ["proof (chain)\npicking this:\n  x \\<in> lang (verund xs) ^^ Suc n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n  el \\<in> set xs\n  x1 \\<in> lang el", "obtain elem\n      where x1elem: \"x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\"\n      and elemL1: \"elem \\<in> L1\""], ["proof (prove)\nusing this:\n  x \\<in> lang (verund xs) ^^ Suc n\n  set xs \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\n  el \\<in> set xs\n  x1 \\<in> lang el\n\ngoal (1 subgoal):\n 1. (\\<And>elem.\n        \\<lbrakk>x1 \\<in> lang (subst (w2rexp elem) \\<sigma>);\n         elem \\<in> L1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\n  elem \\<in> L1\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "from Suc.hyps [OF x2 Suc.prems(2)]"], ["proof (chain)\npicking this:\n  \\<exists>xa.\n     (\\<exists>a.\n         xa = subst (w2rexp a) \\<sigma> \\<and>\n         (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n     x2 \\<in> lang xa", "obtain R word n where\n         R: \"R = subst (w2rexp word) \\<sigma>\" and word: \"word \\<in> L1 ^^ n\" and x2: \"x2 \\<in> lang R\""], ["proof (prove)\nusing this:\n  \\<exists>xa.\n     (\\<exists>a.\n         xa = subst (w2rexp a) \\<sigma> \\<and>\n         (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n     x2 \\<in> lang xa\n\ngoal (1 subgoal):\n 1. (\\<And>R word n.\n        \\<lbrakk>R = subst (w2rexp word) \\<sigma>; word \\<in> L1 ^^ n;\n         x2 \\<in> lang R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  R = subst (w2rexp word) \\<sigma>\n  word \\<in> L1 ^^ n\n  x2 \\<in> lang R\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> lang (verund xs) ^^ n;\n                    set xs\n                    \\<subseteq> {subst (w2rexp a) \\<sigma> |a.\n                                 a \\<in> L1}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xa.\n  (\\<exists>a.\n      xa = subst (w2rexp a) \\<sigma> \\<and>\n      (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n  x \\<in> lang xa;\n        x \\<in> lang (verund xs) ^^ Suc n;\n        set xs\n        \\<subseteq> {subst (w2rexp a) \\<sigma> |a. a \\<in> L1}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                xa = subst (w2rexp a) \\<sigma> \\<and>\n                                (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n                            x \\<in> lang xa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xaa.\n       (\\<exists>a.\n           xaa = subst (w2rexp a) \\<sigma> \\<and>\n           (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n       x \\<in> lang xaa", "apply(rule exI[where x=\"subst (w2rexp (elem@word)) \\<sigma>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        subst (w2rexp (elem @ word)) \\<sigma> =\n        subst (w2rexp a) \\<sigma> \\<and>\n        (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n    x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a.\n       subst (w2rexp (elem @ word)) \\<sigma> =\n       subst (w2rexp a) \\<sigma> \\<and>\n       (\\<exists>n. a \\<in> L1 ^^ n)\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "apply(rule exI[where x=\"elem@word\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. subst (w2rexp (elem @ word)) \\<sigma> =\n    subst (w2rexp (elem @ word)) \\<sigma> \\<and>\n    (\\<exists>n. elem @ word \\<in> L1 ^^ n)\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>n. elem @ word \\<in> L1 ^^ n\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "apply(rule exI[where x=\"Suc n\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. elem @ word \\<in> L1 ^^ Suc n\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "proof (goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. elem @ word \\<in> L1 ^^ Suc n\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. elem @ word \\<in> L1 ^^ Suc n\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "have \"elem \\<in> L1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elem \\<in> L1", "by(fact elemL1)"], ["proof (state)\nthis:\n  elem \\<in> L1\n\ngoal (2 subgoals):\n 1. elem @ word \\<in> L1 ^^ Suc n\n 2. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "with word"], ["proof (chain)\npicking this:\n  word \\<in> L1 ^^ n\n  elem \\<in> L1", "show \"elem @ word \\<in> L1 ^^ Suc n\""], ["proof (prove)\nusing this:\n  word \\<in> L1 ^^ n\n  elem \\<in> L1\n\ngoal (1 subgoal):\n 1. elem @ word \\<in> L1 ^^ Suc n", "by simp"], ["proof (state)\nthis:\n  elem @ word \\<in> L1 ^^ Suc n\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "have \"x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)", "by(fact x1elem)"], ["proof (state)\nthis:\n  x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "with x2[unfolded R]"], ["proof (chain)\npicking this:\n  x2 \\<in> lang (subst (w2rexp word) \\<sigma>)\n  x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  x2 \\<in> lang (subst (w2rexp word) \\<sigma>)\n  x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "unfolding x"], ["proof (prove)\nusing this:\n  x2 \\<in> lang (subst (w2rexp word) \\<sigma>)\n  x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\n\ngoal (1 subgoal):\n 1. x1 @ x2 \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)", "apply(simp only: subst_w2rexp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x2 \\<in> lang (subst (w2rexp word) \\<sigma>);\n     x1 \\<in> lang (subst (w2rexp elem) \\<sigma>)\\<rbrakk>\n    \\<Longrightarrow> x1 @ x2\n                      \\<in> lang (subst (w2rexp elem) \\<sigma>) @@\n                            lang (subst (w2rexp word) \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang (subst (w2rexp (elem @ word)) \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xaa.\n     (\\<exists>a.\n         xaa = subst (w2rexp a) \\<sigma> \\<and>\n         (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n     x \\<in> lang xaa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xa.\n     (\\<exists>a.\n         xa = subst (w2rexp a) \\<sigma> \\<and>\n         (\\<exists>n. a \\<in> L1 ^^ n)) \\<and>\n     x \\<in> lang xa\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substituitionslemma: \n  fixes E :: \"nat rexp\"\n  shows \"L (substL ( lang(E) ) \\<sigma>) = lang (subst E \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang E) \\<sigma>) = lang (subst E \\<sigma>)", "proof (induct E)"], ["proof (state)\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "case (Star e)"], ["proof (state)\nthis:\n  L (substL (lang e) \\<sigma>) = lang (subst e \\<sigma>)\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "have \"L (substL (lang (Star e)) \\<sigma>) = L (substL (star (lang e)) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang (Star e)) \\<sigma>) =\n    L (substL (star (lang e)) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  L (substL (lang (Star e)) \\<sigma>) = L (substL (star (lang e)) \\<sigma>)\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang (Star e)) \\<sigma>) = L (substL (star (lang e)) \\<sigma>)\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "have \"\\<dots> = L (starS (substL (lang e) \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (star (lang e)) \\<sigma>) =\n    L (starS (substL (lang e) \\<sigma>))", "by(simp only: substL_star)"], ["proof (state)\nthis:\n  L (substL (star (lang e)) \\<sigma>) = L (starS (substL (lang e) \\<sigma>))\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (star (lang e)) \\<sigma>) = L (starS (substL (lang e) \\<sigma>))\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "have \"\\<dots> = star ( L (substL (lang e) \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (starS (substL (lang e) \\<sigma>)) =\n    star (L (substL (lang e) \\<sigma>))", "by(simp only: Lstar)"], ["proof (state)\nthis:\n  L (starS (substL (lang e) \\<sigma>)) = star (L (substL (lang e) \\<sigma>))\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (starS (substL (lang e) \\<sigma>)) = star (L (substL (lang e) \\<sigma>))\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "have \"\\<dots> = star (lang (subst e \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star (L (substL (lang e) \\<sigma>)) = star (lang (subst e \\<sigma>))", "by(simp only: Star)"], ["proof (state)\nthis:\n  star (L (substL (lang e) \\<sigma>)) = star (lang (subst e \\<sigma>))\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "also"], ["proof (state)\nthis:\n  star (L (substL (lang e) \\<sigma>)) = star (lang (subst e \\<sigma>))\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "have \"\\<dots> = lang ((subst (Star e) \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star (lang (subst e \\<sigma>)) = lang (subst (Star e) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  star (lang (subst e \\<sigma>)) = lang (subst (Star e) \\<sigma>)\n\ngoal (6 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)\n 6. \\<And>E.\n       L (substL (lang E) \\<sigma>) =\n       lang (subst E \\<sigma>) \\<Longrightarrow>\n       L (substL (lang (Star E)) \\<sigma>) = lang (subst (Star E) \\<sigma>)", "finally"], ["proof (chain)\npicking this:\n  L (substL (lang (Star e)) \\<sigma>) = lang (subst (Star e) \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  L (substL (lang (Star e)) \\<sigma>) = lang (subst (Star e) \\<sigma>)\n\ngoal (1 subgoal):\n 1. L (substL (lang (Star e)) \\<sigma>) = lang (subst (Star e) \\<sigma>)", "."], ["proof (state)\nthis:\n  L (substL (lang (Star e)) \\<sigma>) = lang (subst (Star e) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "case (Plus e1 e2)"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) = lang (subst e1 \\<sigma>)\n  L (substL (lang e2) \\<sigma>) = lang (subst e2 \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"L (substL (lang (Plus e1 e2)) \\<sigma>) = L (substL (lang e1 \\<union> lang e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang (Plus e1 e2)) \\<sigma>) =\n    L (substL (lang e1 \\<union> lang e2) \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  L (substL (lang (Plus e1 e2)) \\<sigma>) =\n  L (substL (lang e1 \\<union> lang e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang (Plus e1 e2)) \\<sigma>) =\n  L (substL (lang e1 \\<union> lang e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> =  L ( substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e1 \\<union> lang e2) \\<sigma>) =\n    L (substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  L (substL (lang e1 \\<union> lang e2) \\<sigma>) =\n  L (substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang e1 \\<union> lang e2) \\<sigma>) =\n  L (substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>) =\n    L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>) =\n  L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma> \\<union> substL (lang e2) \\<sigma>) =\n  L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = lang (subst e1 \\<sigma>) \\<union> lang (subst e2 \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>) =\n    lang (subst e1 \\<sigma>) \\<union> lang (subst e2 \\<sigma>)", "by(simp only: Plus)"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>) =\n  lang (subst e1 \\<sigma>) \\<union> lang (subst e2 \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) \\<union> L (substL (lang e2) \\<sigma>) =\n  lang (subst e1 \\<sigma>) \\<union> lang (subst e2 \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = lang (subst (Plus e1 e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst e1 \\<sigma>) \\<union> lang (subst e2 \\<sigma>) =\n    lang (subst (Plus e1 e2) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  lang (subst e1 \\<sigma>) \\<union> lang (subst e2 \\<sigma>) =\n  lang (subst (Plus e1 e2) \\<sigma>)\n\ngoal (5 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Plus E1 E2)) \\<sigma>) =\n                         lang (subst (Plus E1 E2) \\<sigma>)\n 5. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "finally"], ["proof (chain)\npicking this:\n  L (substL (lang (Plus e1 e2)) \\<sigma>) =\n  lang (subst (Plus e1 e2) \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  L (substL (lang (Plus e1 e2)) \\<sigma>) =\n  lang (subst (Plus e1 e2) \\<sigma>)\n\ngoal (1 subgoal):\n 1. L (substL (lang (Plus e1 e2)) \\<sigma>) =\n    lang (subst (Plus e1 e2) \\<sigma>)", "."], ["proof (state)\nthis:\n  L (substL (lang (Plus e1 e2)) \\<sigma>) =\n  lang (subst (Plus e1 e2) \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "case (Times e1 e2)"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) = lang (subst e1 \\<sigma>)\n  L (substL (lang e2) \\<sigma>) = lang (subst e2 \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"L (substL (lang (Times e1 e2)) \\<sigma>) = L (substL (lang e1 @@ lang e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang (Times e1 e2)) \\<sigma>) =\n    L (substL (lang e1 @@ lang e2) \\<sigma>)", "by(simp)"], ["proof (state)\nthis:\n  L (substL (lang (Times e1 e2)) \\<sigma>) =\n  L (substL (lang e1 @@ lang e2) \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang (Times e1 e2)) \\<sigma>) =\n  L (substL (lang e1 @@ lang e2) \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> =  L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e1 @@ lang e2) \\<sigma>) =\n    L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>))", "by(simp only: substL_conc)"], ["proof (state)\nthis:\n  L (substL (lang e1 @@ lang e2) \\<sigma>) =\n  L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>))\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "thm L_conc"], ["proof (state)\nthis:\n  L (substL (lang e1 @@ lang e2) \\<sigma>) =\n  L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>))\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang e1 @@ lang e2) \\<sigma>) =\n  L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>))\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>)) =\n    L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>)", "by(simp only: L_conc)"], ["proof (state)\nthis:\n  L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>)) =\n  L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (concS (substL (lang e1) \\<sigma>) (substL (lang e2) \\<sigma>)) =\n  L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>) =\n    lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>)", "by(simp only: Times)"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>) =\n  lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) @@ L (substL (lang e2) \\<sigma>) =\n  lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = lang (Times (subst e1 \\<sigma>) (subst e2 \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>) =\n    lang (Times (subst e1 \\<sigma>) (subst e2 \\<sigma>))", "by auto"], ["proof (state)\nthis:\n  lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>) =\n  lang (Times (subst e1 \\<sigma>) (subst e2 \\<sigma>))\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (subst e1 \\<sigma>) @@ lang (subst e2 \\<sigma>) =\n  lang (Times (subst e1 \\<sigma>) (subst e2 \\<sigma>))\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "have \"\\<dots> = lang (subst (Times e1 e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Times (subst e1 \\<sigma>) (subst e2 \\<sigma>)) =\n    lang (subst (Times e1 e2) \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  lang (Times (subst e1 \\<sigma>) (subst e2 \\<sigma>)) =\n  lang (subst (Times e1 e2) \\<sigma>)\n\ngoal (4 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)\n 4. \\<And>E1 E2.\n       \\<lbrakk>L (substL (lang E1) \\<sigma>) = lang (subst E1 \\<sigma>);\n        L (substL (lang E2) \\<sigma>) = lang (subst E2 \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> L (substL (lang (Times E1 E2)) \\<sigma>) =\n                         lang (subst (Times E1 E2) \\<sigma>)", "finally"], ["proof (chain)\npicking this:\n  L (substL (lang (Times e1 e2)) \\<sigma>) =\n  lang (subst (Times e1 e2) \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  L (substL (lang (Times e1 e2)) \\<sigma>) =\n  lang (subst (Times e1 e2) \\<sigma>)\n\ngoal (1 subgoal):\n 1. L (substL (lang (Times e1 e2)) \\<sigma>) =\n    lang (subst (Times e1 e2) \\<sigma>)", "."], ["proof (state)\nthis:\n  L (substL (lang (Times e1 e2)) \\<sigma>) =\n  lang (subst (Times e1 e2) \\<sigma>)\n\ngoal (3 subgoals):\n 1. L (substL (lang Zero) \\<sigma>) = lang (subst Zero \\<sigma>)\n 2. L (substL (lang One) \\<sigma>) = lang (subst One \\<sigma>)\n 3. \\<And>x.\n       L (substL (lang (Atom x)) \\<sigma>) = lang (subst (Atom x) \\<sigma>)", "qed simp_all"], ["", "corollary lift: \"lang e1 = lang e2 \\<Longrightarrow> lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "assume eq: \"lang e1 = lang e2\""], ["proof (state)\nthis:\n  lang e1 = lang e2\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "thm substituitionslemma"], ["proof (state)\nthis:\n  lang e1 = lang e2\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "have \"lang (subst e1 \\<sigma>) = L (substL (lang e1) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subst e1 \\<sigma>) = L (substL (lang e1) \\<sigma>)", "by(simp only: substituitionslemma)"], ["proof (state)\nthis:\n  lang (subst e1 \\<sigma>) = L (substL (lang e1) \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "also"], ["proof (state)\nthis:\n  lang (subst e1 \\<sigma>) = L (substL (lang e1) \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "have \"\\<dots> = L (substL (lang e2) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e1) \\<sigma>) = L (substL (lang e2) \\<sigma>)", "using eq"], ["proof (prove)\nusing this:\n  lang e1 = lang e2\n\ngoal (1 subgoal):\n 1. L (substL (lang e1) \\<sigma>) = L (substL (lang e2) \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) = L (substL (lang e2) \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "also"], ["proof (state)\nthis:\n  L (substL (lang e1) \\<sigma>) = L (substL (lang e2) \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "have \"\\<dots> = lang (subst e2 \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (substL (lang e2) \\<sigma>) = lang (subst e2 \\<sigma>)", "by(simp only: substituitionslemma)"], ["proof (state)\nthis:\n  L (substL (lang e2) \\<sigma>) = lang (subst e2 \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang e1 = lang e2 \\<Longrightarrow>\n    lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "finally"], ["proof (chain)\npicking this:\n  lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)\n\ngoal (1 subgoal):\n 1. lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)", "."], ["proof (state)\nthis:\n  lang (subst e1 \\<sigma>) = lang (subst e2 \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Examples\\<close>"], ["", "lemma \"lang (Plus (Atom (x::nat)) (Atom x))  = lang (Atom x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "let ?\\<sigma> = \"(\\<lambda>i. (if i=0 then Some (Atom x) else None))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "let ?e1 = \"Plus (Atom 1) (Atom 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "let ?e2 = \"Atom 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "have \"lang (Plus (Atom x) (Atom x)) = lang (subst ?e1 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) =\n    lang\n     (subst (Plus (Atom 1) (Atom 1))\n       (\\<lambda>i. if i = 0 then Some (Atom x) else None))", "by (simp)"], ["proof (state)\nthis:\n  lang (Plus (Atom x) (Atom x)) =\n  lang\n   (subst (Plus (Atom 1) (Atom 1))\n     (\\<lambda>i. if i = 0 then Some (Atom x) else None))\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "thm soundness"], ["proof (state)\nthis:\n  lang (Plus (Atom x) (Atom x)) =\n  lang\n   (subst (Plus (Atom 1) (Atom 1))\n     (\\<lambda>i. if i = 0 then Some (Atom x) else None))\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "also"], ["proof (state)\nthis:\n  lang (Plus (Atom x) (Atom x)) =\n  lang\n   (subst (Plus (Atom 1) (Atom 1))\n     (\\<lambda>i. if i = 0 then Some (Atom x) else None))\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "have \"\\<dots> = lang (subst ?e2 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst (Plus (Atom 1) (Atom 1))\n       (\\<lambda>i. if i = 0 then Some (Atom x) else None)) =\n    lang\n     (subst (Atom 1) (\\<lambda>i. if i = 0 then Some (Atom x) else None))", "apply(rule lift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Plus (Atom 1) (Atom 1)) = lang (Atom 1)", "apply(rule soundness)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_eqv (Plus (Atom 1) (Atom 1)) (Atom 1)", "by eval"], ["proof (state)\nthis:\n  lang\n   (subst (Plus (Atom 1) (Atom 1))\n     (\\<lambda>i. if i = 0 then Some (Atom x) else None)) =\n  lang (subst (Atom 1) (\\<lambda>i. if i = 0 then Some (Atom x) else None))\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "also"], ["proof (state)\nthis:\n  lang\n   (subst (Plus (Atom 1) (Atom 1))\n     (\\<lambda>i. if i = 0 then Some (Atom x) else None)) =\n  lang (subst (Atom 1) (\\<lambda>i. if i = 0 then Some (Atom x) else None))\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "have \"\\<dots> = lang (Atom x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst (Atom 1) (\\<lambda>i. if i = 0 then Some (Atom x) else None)) =\n    lang (Atom x)", "by auto"], ["proof (state)\nthis:\n  lang\n   (subst (Atom 1) (\\<lambda>i. if i = 0 then Some (Atom x) else None)) =\n  lang (Atom x)\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "finally"], ["proof (chain)\npicking this:\n  lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "show ?thesis"], ["proof (prove)\nusing this:\n  lang (Plus (Atom x) (Atom x)) = lang (Atom x)\n\ngoal (1 subgoal):\n 1. lang (Plus (Atom x) (Atom x)) = lang (Atom x)", "."], ["proof (state)\nthis:\n  lang (Plus (Atom x) (Atom x)) = lang (Atom x)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun seq :: \"'a rexp list \\<Rightarrow> 'a rexp\" where\n\"seq [] = One\" |\n\"seq [r] = r\" |\n\"seq (r#rs) = Times r (seq rs)\""], ["", "abbreviation question where \"question x == Plus x One\""], ["", "definition \"L_4cases (x::nat) y=\n    verund [seq[question (Atom x),(Atom y), (Atom y)],\n            seq[question (Atom x),(Atom y),(Atom x),Star(Times (Atom y)(Atom x)),(Atom y),(Atom y)],\n            seq[question (Atom x),(Atom y),(Atom x),Star(Times (Atom y)(Atom x)),(Atom x)],\n            seq[(Atom x),(Atom x)] ]\""], ["", "definition \"L_A x y = seq[question (Atom x),(Atom y), (Atom y)]\""], ["", "definition \"L_B x y = seq[question (Atom x),(Atom y),(Atom x),Star(Times (Atom y)(Atom x)),(Atom y),(Atom y)]\""], ["", "definition \"L_C x y = seq[question (Atom x),(Atom y),(Atom x),Star(Times (Atom y)(Atom x)),(Atom x)]\""], ["", "definition \"L_D x y = seq[(Atom x),(Atom x)]\""], ["", "lemma \"L_4cases x y = verund [L_A x y, L_B x y, L_C x y, L_D x y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_4cases x y = verund [L_A x y, L_B x y, L_C x y, L_D x y]", "unfolding L_A_def L_B_def L_C_def L_D_def L_4cases_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. verund\n     [seq [question (Atom x), Atom y, Atom y],\n      seq [question (Atom x), Atom y, Atom x,\n           Star (Times (Atom y) (Atom x)), Atom y, Atom y],\n      seq [question (Atom x), Atom y, Atom x,\n           Star (Times (Atom y) (Atom x)), Atom x],\n      seq [Atom x, Atom x]] =\n    verund\n     [seq [question (Atom x), Atom y, Atom y],\n      seq [question (Atom x), Atom y, Atom x,\n           Star (Times (Atom y) (Atom x)), Atom y, Atom y],\n      seq [question (Atom x), Atom y, Atom x,\n           Star (Times (Atom y) (Atom x)), Atom x],\n      seq [Atom x, Atom x]]", "by auto"], ["", "definition \"L_lasthasxx x y = (Plus (seq[question (Atom x), Star(Times (Atom y)(Atom x)),(Atom y),(Atom y)])\n       (seq[question (Atom y), Star(Times(Atom x) (Atom y)),(Atom x),(Atom x)]))\""], ["", "lemma lastxx_com: \"lang (L_lasthasxx (x::nat) y) = lang (L_lasthasxx y x)\" (is \"lang ?A = lang ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "let ?\\<sigma> = \"(\\<lambda>i. (if i=0 then Some (Atom x) else (if i=1 then Some (Atom y) else None)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "let ?e1 = \"Plus (seq[Plus (Atom 1) One, Star(Times (Atom 3) (Atom 1)),(Atom 3),(Atom 3)])\n       (seq[Plus (Atom 3) One, Star(Times (Atom 1) (Atom 3)),(Atom 1),(Atom 1)])\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "let ?e2 = \"Plus (seq[Plus (Atom 3) One, Star(Times (Atom 1) (Atom 3)),(Atom 1),(Atom 1)])\n           (seq[Plus (Atom 1) One, Star(Times (Atom 3) (Atom 1)),(Atom 3),(Atom 3)])\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "have \"lang ?A = lang (subst ?e1 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) =\n    lang\n     (subst\n       (Plus\n         (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n               Atom 3])\n         (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n               Atom 1]))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "by(simp add: L_lasthasxx_def)"], ["proof (state)\nthis:\n  lang (L_lasthasxx x y) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "thm soundness"], ["proof (state)\nthis:\n  lang (L_lasthasxx x y) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "also"], ["proof (state)\nthis:\n  lang (L_lasthasxx x y) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "have \"\\<dots> = lang (subst ?e2 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst\n       (Plus\n         (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n               Atom 3])\n         (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n               Atom 1]))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang\n     (subst\n       (Plus\n         (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n               Atom 1])\n         (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n               Atom 3]))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "apply(rule lift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1])) =\n    lang\n     (Plus\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1])\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3]))", "apply(rule soundness)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_eqv\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (Plus\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1])\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3]))", "by eval"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1])\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "also"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1])\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "have \"\\<dots> = lang ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst\n       (Plus\n         (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n               Atom 1])\n         (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n               Atom 3]))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang (L_lasthasxx y x)", "by (simp add: L_lasthasxx_def)"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1])\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang (L_lasthasxx y x)\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "finally"], ["proof (chain)\npicking this:\n  lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "show ?thesis"], ["proof (prove)\nusing this:\n  lang (L_lasthasxx x y) = lang (L_lasthasxx y x)\n\ngoal (1 subgoal):\n 1. lang (L_lasthasxx x y) = lang (L_lasthasxx y x)", "."], ["proof (state)\nthis:\n  lang (L_lasthasxx x y) = lang (L_lasthasxx y x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lastxx_is_4cases: \"lang (L_4cases x y) = lang (L_lasthasxx x y)\" (is \"lang ?A = lang ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "let ?\\<sigma> = \"(\\<lambda>i. (if i=0 then Some (Atom x) else (if i=1 then Some (Atom y) else None)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "let ?e1 = \"(Plus (seq[Plus (Atom 1) One,(Atom 3), (Atom 3)])\n            (Plus (seq[Plus (Atom 1) One,(Atom 3),(Atom 1),Star(Times (Atom 3) (Atom 1)),(Atom 3),(Atom 3)])\n            (Plus (seq[Plus (Atom 1) One,(Atom 3),(Atom 1),Star(Times (Atom 3) (Atom 1)),(Atom 1)])\n                  (seq[(Atom 1),(Atom 1)]))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "let ?e2 = \"Plus (seq[Plus (Atom 1) One, Star(Times (Atom 3) (Atom 1)),(Atom 3),(Atom 3)])\n       (seq[Plus (Atom 3) One, Star(Times (Atom 1) (Atom 3)),(Atom 1),(Atom 1)])\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "have \"lang ?A = lang (subst ?e1 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (L_4cases x y) =\n    lang\n     (subst\n       (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n           (Plus\n             (seq [question (Atom 1), Atom 3, Atom 1,\n                   Star (Times (Atom 3) (Atom 1)), Atom 1])\n             (seq [Atom 1, Atom 1]))))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "by (simp add: L_4cases_def)"], ["proof (state)\nthis:\n  lang (L_4cases x y) =\n  lang\n   (subst\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "thm soundness"], ["proof (state)\nthis:\n  lang (L_4cases x y) =\n  lang\n   (subst\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "also"], ["proof (state)\nthis:\n  lang (L_4cases x y) =\n  lang\n   (subst\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "have \"\\<dots> = lang (subst ?e2 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst\n       (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n           (Plus\n             (seq [question (Atom 1), Atom 3, Atom 1,\n                   Star (Times (Atom 3) (Atom 1)), Atom 1])\n             (seq [Atom 1, Atom 1]))))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang\n     (subst\n       (Plus\n         (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n               Atom 3])\n         (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n               Atom 1]))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "apply(rule lift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1])))) =\n    lang\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))", "apply(rule soundness)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_eqv\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1]))))\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))", "by eval"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "also"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus (seq [question (Atom 1), Atom 3, Atom 3])\n       (Plus\n         (seq [question (Atom 1), Atom 3, Atom 1,\n               Star (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n         (Plus\n           (seq [question (Atom 1), Atom 3, Atom 1,\n                 Star (Times (Atom 3) (Atom 1)), Atom 1])\n           (seq [Atom 1, Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "have \"\\<dots> = lang ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst\n       (Plus\n         (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n               Atom 3])\n         (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n               Atom 1]))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang (L_lasthasxx x y)", "by (simp add: L_lasthasxx_def)"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus\n       (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n             Atom 3])\n       (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n             Atom 1]))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang (L_lasthasxx x y)\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "finally"], ["proof (chain)\npicking this:\n  lang (L_4cases x y) = lang (L_lasthasxx x y)", "show ?thesis"], ["proof (prove)\nusing this:\n  lang (L_4cases x y) = lang (L_lasthasxx x y)\n\ngoal (1 subgoal):\n 1. lang (L_4cases x y) = lang (L_lasthasxx x y)", "."], ["proof (state)\nthis:\n  lang (L_4cases x y) = lang (L_lasthasxx x y)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"myUNIV x y = Star (Plus (Atom x) (Atom y))\""], ["", "lemma myUNIV_alle: \"lang (myUNIV x y) = {xs. set xs \\<subseteq> {x,y}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}", "have \"star {[y], [x]}  = {concat ws |ws. set ws \\<subseteq> {[y], [x]}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star {[y], [x]} = {concat ws |ws. set ws \\<subseteq> {[y], [x]}}", "by(simp only: star_conv_concat)"], ["proof (state)\nthis:\n  star {[y], [x]} = {concat ws |ws. set ws \\<subseteq> {[y], [x]}}\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}", "also"], ["proof (state)\nthis:\n  star {[y], [x]} = {concat ws |ws. set ws \\<subseteq> {[y], [x]}}\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}", "have \"\\<dots> = {xs. set xs \\<subseteq> {x, y}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {concat ws |ws. set ws \\<subseteq> {[y], [x]}} =\n    {xs. set xs \\<subseteq> {x, y}}", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> x; set ws \\<subseteq> {[y], [x]};\n        xb \\<in> set ws; xa \\<in> set xb\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "apply(cases \"x=y\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> x; set ws \\<subseteq> {[y], [x]};\n        xb \\<in> set ws; xa \\<in> set xb; x = y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> x; set ws \\<subseteq> {[y], [x]};\n        xb \\<in> set ws; xa \\<in> set xb; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 3. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> y; set ws \\<subseteq> {[y]}; xb \\<in> set ws;\n        xa \\<in> set xb; x = y\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> x; set ws \\<subseteq> {[y], [x]};\n        xb \\<in> set ws; xa \\<in> set xb; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 3. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "apply(case_tac ws)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> y; set ws \\<subseteq> {[y]}; xb \\<in> set ws;\n        xa \\<in> set xb; x = y; ws = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa ws xb a list.\n       \\<lbrakk>xa \\<noteq> y; set ws \\<subseteq> {[y]}; xb \\<in> set ws;\n        xa \\<in> set xb; x = y; ws = a # list\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> x; set ws \\<subseteq> {[y], [x]};\n        xb \\<in> set ws; xa \\<in> set xb; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 4. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa ws xb a list.\n       \\<lbrakk>xa \\<noteq> y; set ws \\<subseteq> {[y]}; xb \\<in> set ws;\n        xa \\<in> set xb; x = y; ws = a # list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa ws xb.\n       \\<lbrakk>xa \\<noteq> x; set ws \\<subseteq> {[y], [x]};\n        xb \\<in> set ws; xa \\<in> set xb; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 3. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "case (1 as)"], ["proof (state)\nthis:\n  set as \\<subseteq> {x, y}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       set xa \\<subseteq> {x, y} \\<Longrightarrow>\n       \\<exists>ws. xa = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "then"], ["proof (chain)\npicking this:\n  set as \\<subseteq> {x, y}", "show ?case"], ["proof (prove)\nusing this:\n  set as \\<subseteq> {x, y}\n\ngoal (1 subgoal):\n 1. \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "proof (induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> {x, y} \\<Longrightarrow>\n    \\<exists>ws. [] = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n 2. \\<And>a as.\n       \\<lbrakk>set as \\<subseteq> {x, y} \\<Longrightarrow>\n                \\<exists>ws.\n                   as = concat ws \\<and> set ws \\<subseteq> {[y], [x]};\n        set (a # as) \\<subseteq> {x, y}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            a # as = concat ws \\<and>\n                            set ws \\<subseteq> {[y], [x]}", "case (Cons a as)"], ["proof (state)\nthis:\n  set as \\<subseteq> {x, y} \\<Longrightarrow>\n  \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n  set (a # as) \\<subseteq> {x, y}\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> {x, y} \\<Longrightarrow>\n    \\<exists>ws. [] = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n 2. \\<And>a as.\n       \\<lbrakk>set as \\<subseteq> {x, y} \\<Longrightarrow>\n                \\<exists>ws.\n                   as = concat ws \\<and> set ws \\<subseteq> {[y], [x]};\n        set (a # as) \\<subseteq> {x, y}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            a # as = concat ws \\<and>\n                            set ws \\<subseteq> {[y], [x]}", "then"], ["proof (chain)\npicking this:\n  set as \\<subseteq> {x, y} \\<Longrightarrow>\n  \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n  set (a # as) \\<subseteq> {x, y}", "have as: \"set as \\<subseteq> {x,y}\" and axy: \"a \\<in> {x,y}\""], ["proof (prove)\nusing this:\n  set as \\<subseteq> {x, y} \\<Longrightarrow>\n  \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n  set (a # as) \\<subseteq> {x, y}\n\ngoal (1 subgoal):\n 1. set as \\<subseteq> {x, y} &&& a \\<in> {x, y}", "by auto"], ["proof (state)\nthis:\n  set as \\<subseteq> {x, y}\n  a \\<in> {x, y}\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> {x, y} \\<Longrightarrow>\n    \\<exists>ws. [] = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n 2. \\<And>a as.\n       \\<lbrakk>set as \\<subseteq> {x, y} \\<Longrightarrow>\n                \\<exists>ws.\n                   as = concat ws \\<and> set ws \\<subseteq> {[y], [x]};\n        set (a # as) \\<subseteq> {x, y}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            a # as = concat ws \\<and>\n                            set ws \\<subseteq> {[y], [x]}", "from Cons(1)[OF as]"], ["proof (chain)\npicking this:\n  \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "obtain ws where asco: \"as = concat ws\" and ws: \"set ws \\<subseteq> {[y],[x]}\""], ["proof (prove)\nusing this:\n  \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>as = concat ws; set ws \\<subseteq> {[y], [x]}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  as = concat ws\n  set ws \\<subseteq> {[y], [x]}\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> {x, y} \\<Longrightarrow>\n    \\<exists>ws. [] = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n 2. \\<And>a as.\n       \\<lbrakk>set as \\<subseteq> {x, y} \\<Longrightarrow>\n                \\<exists>ws.\n                   as = concat ws \\<and> set ws \\<subseteq> {[y], [x]};\n        set (a # as) \\<subseteq> {x, y}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            a # as = concat ws \\<and>\n                            set ws \\<subseteq> {[y], [x]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ws. a # as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "apply(rule exI[where x=\"[a]#ws\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a # as = concat ([a] # ws) \\<and> set ([a] # ws) \\<subseteq> {[y], [x]}", "using axy"], ["proof (prove)\nusing this:\n  a \\<in> {x, y}\n\ngoal (1 subgoal):\n 1. a # as = concat ([a] # ws) \\<and> set ([a] # ws) \\<subseteq> {[y], [x]}", "by(auto simp add: asco ws)"], ["proof (state)\nthis:\n  \\<exists>ws. a # as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> {x, y} \\<Longrightarrow>\n    \\<exists>ws. [] = concat ws \\<and> set ws \\<subseteq> {[y], [x]}", "qed (rule exI[where x=\"[]\"], simp)"], ["proof (state)\nthis:\n  \\<exists>ws. as = concat ws \\<and> set ws \\<subseteq> {[y], [x]}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {concat ws |ws. set ws \\<subseteq> {[y], [x]}} =\n  {xs. set xs \\<subseteq> {x, y}}\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}", "finally"], ["proof (chain)\npicking this:\n  star {[y], [x]} = {xs. set xs \\<subseteq> {x, y}}", "show ?thesis"], ["proof (prove)\nusing this:\n  star {[y], [x]} = {xs. set xs \\<subseteq> {x, y}}\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}", "by(simp add: myUNIV_def)"], ["proof (state)\nthis:\n  lang (myUNIV x y) = {xs. set xs \\<subseteq> {x, y}}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"nodouble x y = (Plus\n                   (seq[question (Atom x), Star(Times(Atom y)(Atom x)),(Atom y)])\n                   (seq[question (Atom y), Star(Times(Atom x) (Atom y)),(Atom x)]))\""], ["", "lemma myUNIV_char: \"lang (myUNIV (x::nat) y) = lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))\" (is \"lang ?A = lang ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "let ?\\<sigma> = \"(\\<lambda>i. (if i=0 then Some (Atom x) else (if i=1 then Some (Atom y) else None)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "let ?e1 = \"Star (Plus (Atom 1) (Atom 3))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "let ?e2 = \"(Times (Star (Plus (seq [Plus (Atom 1) One, Star  (Times (Atom 3) (Atom 1)), Atom 3, Atom 3])\n           (seq [Plus (Atom 3) One, Star (Times (Atom 1) (Atom 3)), Atom 1, Atom 1])))\n       (Plus One\n         (Plus\n           (seq\n             [Plus (Atom 1)\n               One,\n              Star\n               (Times (Atom 3)\n (Atom 1)),\n              Atom 3])\n           (seq\n             [Plus (Atom 3)\n               One,\n              Star\n               (Times (Atom 1)\n (Atom 3)),\n              Atom 1]))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "have \"lang ?A = lang (subst ?e1 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang\n     (subst (Star (Plus (Atom 1) (Atom 3)))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "by(simp add: myUNIV_def)"], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "thm soundness"], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "also"], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "have \"\\<dots> = lang (subst ?e2 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst (Star (Plus (Atom 1) (Atom 3)))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang\n     (subst\n       (Times\n         (Star\n           (Plus\n             (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)),\n                   Atom 3, Atom 3])\n             (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                   Atom 1, Atom 1])))\n         (Plus One\n           (Plus\n             (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)),\n                   Atom 3])\n             (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                   Atom 1]))))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "apply(rule lift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Star (Plus (Atom 1) (Atom 3))) =\n    lang\n     (Times\n       (Star\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n                 Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n                 Atom 1])))\n       (Plus One\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                 Atom 1]))))", "apply(rule soundness)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_eqv (Star (Plus (Atom 1) (Atom 3)))\n     (Times\n       (Star\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n                 Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n                 Atom 1])))\n       (Plus One\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                 Atom 1]))))", "by eval"], ["proof (state)\nthis:\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Times\n       (Star\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n                 Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n                 Atom 1])))\n       (Plus One\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                 Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "also"], ["proof (state)\nthis:\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Times\n       (Star\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n                 Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n                 Atom 1])))\n       (Plus One\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                 Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "have \"\\<dots> = lang ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst\n       (Times\n         (Star\n           (Plus\n             (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)),\n                   Atom 3, Atom 3])\n             (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                   Atom 1, Atom 1])))\n         (Plus One\n           (Plus\n             (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)),\n                   Atom 3])\n             (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                   Atom 1]))))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "by (simp add: L_lasthasxx_def nodouble_def)"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Times\n       (Star\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3,\n                 Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)), Atom 1,\n                 Atom 1])))\n       (Plus One\n         (Plus\n           (seq [question (Atom 1), Star (Times (Atom 3) (Atom 1)), Atom 3])\n           (seq [question (Atom 3), Star (Times (Atom 1) (Atom 3)),\n                 Atom 1]))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "finally"], ["proof (chain)\npicking this:\n  lang (myUNIV x y) =\n  lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "show ?thesis"], ["proof (prove)\nusing this:\n  lang (myUNIV x y) =\n  lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))", "."], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang (Times (Star (L_lasthasxx x y)) (Plus One (nodouble x y)))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"mycasexxy x y = Plus (seq[Star (Plus (Atom x) (Atom y)), Atom x, Atom x, Atom y])\n                (seq[Star (Plus (Atom x) (Atom y)), Atom y, Atom y, Atom x])\""], ["", "definition \"mycasexyx x y = Plus (seq[Star (Plus (Atom x) (Atom y)), Atom x, Atom y, Atom x])\n                (seq[Star (Plus (Atom x) (Atom y)), Atom y, Atom x, Atom y])\""], ["", "definition \"mycasexx x y = Plus (seq[Star (Plus (Atom x) (Atom y)), Atom x,  Atom x])\n                (seq[Star (Plus (Atom x) (Atom y)), Atom y, Atom y])\""], ["", "definition \"mycasexy x y = Plus (seq[Atom x,  Atom y]) (seq[Atom y, Atom x])\""], ["", "definition \"mycasex x y = Plus (Atom y) (Atom x)\""], ["", "definition \"mycases x y = Plus\n                   (mycasexxy x y)\n              (Plus (mycasexyx x y)\n              (Plus (mycasexx x y) \n                    (Plus (mycasexy x y) (Plus (mycasex x y) (One)))))\""], ["", "lemma mycases_char: \"lang (myUNIV (x::nat) y) = lang (mycases x y)\" (is \"lang ?A = lang ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "let ?\\<sigma> = \"(\\<lambda>i. (if i=0 then Some (Atom x) else (if i=1 then Some (Atom y) else None)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "let ?e1 = \"Star (Plus (Atom 1) (Atom 3))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "let ?e2 = \"Plus (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n     (Plus (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n       (Plus (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n               (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n         (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1])) (Plus (Plus (Atom 3) (Atom 1)) One))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "have \"lang ?A = lang (subst ?e1 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (myUNIV x y) =\n    lang\n     (subst (Star (Plus (Atom 1) (Atom 3)))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "by(simp add: myUNIV_def)"], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "thm soundness"], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "also"], ["proof (state)\nthis:\n  lang (myUNIV x y) =\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "have \"\\<dots> = lang (subst ?e2 ?\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst (Star (Plus (Atom 1) (Atom 3)))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang\n     (subst\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n         (Plus\n           (Plus\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n           (Plus\n             (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n               (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n             (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n               (question (Plus (Atom 3) (Atom 1)))))))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None))", "apply(rule lift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Star (Plus (Atom 1) (Atom 3))) =\n    lang\n     (Plus\n       (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n         (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n         (Plus\n           (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n           (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n             (question (Plus (Atom 3) (Atom 1)))))))", "apply(rule soundness)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_eqv (Star (Plus (Atom 1) (Atom 3)))\n     (Plus\n       (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n         (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n         (Plus\n           (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n           (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n             (question (Plus (Atom 3) (Atom 1)))))))", "by eval"], ["proof (state)\nthis:\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Plus\n       (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n         (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n         (Plus\n           (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n           (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n             (question (Plus (Atom 3) (Atom 1)))))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "also"], ["proof (state)\nthis:\n  lang\n   (subst (Star (Plus (Atom 1) (Atom 3)))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang\n   (subst\n     (Plus\n       (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n         (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n         (Plus\n           (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n           (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n             (question (Plus (Atom 3) (Atom 1)))))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None))\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "have \"\\<dots> = lang ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\n     (subst\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n         (Plus\n           (Plus\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n           (Plus\n             (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n               (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n             (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n               (question (Plus (Atom 3) (Atom 1)))))))\n       (\\<lambda>i.\n           if i = 0 then Some (Atom x)\n           else if i = 1 then Some (Atom y) else None)) =\n    lang (mycases x y)", "by (simp add:  mycases_def mycasexxy_def mycasexyx_def \n                                          mycasexx_def mycasex_def mycasexy_def)"], ["proof (state)\nthis:\n  lang\n   (subst\n     (Plus\n       (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1, Atom 3])\n         (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3, Atom 1]))\n       (Plus\n         (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 3, Atom 1])\n           (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 1, Atom 3]))\n         (Plus\n           (Plus (seq [Star (Plus (Atom 1) (Atom 3)), Atom 1, Atom 1])\n             (seq [Star (Plus (Atom 1) (Atom 3)), Atom 3, Atom 3]))\n           (Plus (Plus (seq [Atom 1, Atom 3]) (seq [Atom 3, Atom 1]))\n             (question (Plus (Atom 3) (Atom 1)))))))\n     (\\<lambda>i.\n         if i = 0 then Some (Atom x)\n         else if i = 1 then Some (Atom y) else None)) =\n  lang (mycases x y)\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "finally"], ["proof (chain)\npicking this:\n  lang (myUNIV x y) = lang (mycases x y)", "show ?thesis"], ["proof (prove)\nusing this:\n  lang (myUNIV x y) = lang (mycases x y)\n\ngoal (1 subgoal):\n 1. lang (myUNIV x y) = lang (mycases x y)", "."], ["proof (state)\nthis:\n  lang (myUNIV x y) = lang (mycases x y)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}