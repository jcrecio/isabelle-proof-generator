{"file_name": "/home/qj213/afp-2021-10-22/thys/Myhill-Nerode/Closures2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Myhill-Nerode", "problem_names": ["lemma subseq_strict_length:\n  assumes a: \"subseq x y\" \"x \\<noteq> y\" \n  shows \"length x < length y\"", "lemma subseq_wf:\n  shows \"wf {(x, y). subseq x y \\<and> x \\<noteq> y}\"", "lemma subseq_good:\n  shows \"good subseq (f :: nat \\<Rightarrow> ('a::finite) list)\"", "lemma subseq_Higman_antichains:\n  assumes a: \"\\<forall>(x::('a::finite) list) \\<in> A. \\<forall>y \\<in> A. x \\<noteq> y \\<longrightarrow> \\<not>(subseq x y) \\<and> \\<not>(subseq y x)\"\n  shows \"finite A\"", "lemma SUPSEQ_simps [simp]:\n  shows \"SUPSEQ {} = {}\"\n  and   \"SUPSEQ {[]} = UNIV\"", "lemma SUPSEQ_atom [simp]:\n  shows \"SUPSEQ {[c]} = UNIV \\<cdot> {[c]} \\<cdot> UNIV\"", "lemma SUPSEQ_union [simp]:\n  shows \"SUPSEQ (A \\<union> B) = SUPSEQ A \\<union> SUPSEQ B\"", "lemma SUPSEQ_conc [simp]:\n  shows \"SUPSEQ (A \\<cdot> B) = SUPSEQ A \\<cdot> SUPSEQ B\"", "lemma SUPSEQ_star [simp]:\n  shows \"SUPSEQ (A\\<star>) = UNIV\"", "lemma Allreg_lang [simp]:\n  shows \"lang Allreg = (\\<Union>a. {[a]})\"", "lemma [simp]:\n  shows \"(\\<Union>a. {[a]})\\<star> = UNIV\"", "lemma Star_Allreg_lang [simp]:\n  shows \"lang (Star Allreg) = UNIV\"", "lemma lang_UP:\n  fixes r::\"'a::finite rexp\"\n  shows \"lang (UP r) = SUPSEQ (lang r)\"", "lemma SUPSEQ_regular: \n  fixes A::\"'a::finite lang\"\n  assumes \"regular A\"\n  shows \"regular (SUPSEQ A)\"", "lemma SUPSEQ_subset:\n  fixes A::\"'a::finite list set\"\n  shows \"A \\<subseteq> SUPSEQ A\"", "lemma SUBSEQ_complement:\n  shows \"- (SUBSEQ A) = SUPSEQ (- (SUBSEQ A))\"", "lemma main_lemma:\n  shows \"\\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M\"", "lemma closure_SUPSEQ:\n  fixes A::\"'a::finite lang\" \n  shows \"regular (SUPSEQ A)\"", "lemma closure_SUBSEQ:\n  fixes A::\"'a::finite lang\"\n  shows \"regular (SUBSEQ A)\""], "translations": [["", "lemma subseq_strict_length:\n  assumes a: \"subseq x y\" \"x \\<noteq> y\" \n  shows \"length x < length y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x < length y", "using a"], ["proof (prove)\nusing this:\n  subseq x y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. length x < length y", "by (induct) (auto simp add: less_Suc_eq)"], ["", "lemma subseq_wf:\n  shows \"wf {(x, y). subseq x y \\<and> x \\<noteq> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). subseq x y \\<and> x \\<noteq> y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y). subseq x y \\<and> x \\<noteq> y}", "have \"wf (measure length)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure length)", "by simp"], ["proof (state)\nthis:\n  wf (measure length)\n\ngoal (1 subgoal):\n 1. wf {(x, y). subseq x y \\<and> x \\<noteq> y}", "moreover"], ["proof (state)\nthis:\n  wf (measure length)\n\ngoal (1 subgoal):\n 1. wf {(x, y). subseq x y \\<and> x \\<noteq> y}", "have \"{(x, y). subseq x y \\<and> x \\<noteq> y} \\<subseteq> measure length\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). subseq x y \\<and> x \\<noteq> y} \\<subseteq> measure length", "unfolding measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). subseq x y \\<and> x \\<noteq> y}\n    \\<subseteq> inv_image less_than length", "by (auto simp add: subseq_strict_length)"], ["proof (state)\nthis:\n  {(x, y). subseq x y \\<and> x \\<noteq> y} \\<subseteq> measure length\n\ngoal (1 subgoal):\n 1. wf {(x, y). subseq x y \\<and> x \\<noteq> y}", "ultimately"], ["proof (chain)\npicking this:\n  wf (measure length)\n  {(x, y). subseq x y \\<and> x \\<noteq> y} \\<subseteq> measure length", "show \"wf {(x, y). subseq x y \\<and> x \\<noteq> y}\""], ["proof (prove)\nusing this:\n  wf (measure length)\n  {(x, y). subseq x y \\<and> x \\<noteq> y} \\<subseteq> measure length\n\ngoal (1 subgoal):\n 1. wf {(x, y). subseq x y \\<and> x \\<noteq> y}", "by (rule wf_subset)"], ["proof (state)\nthis:\n  wf {(x, y). subseq x y \\<and> x \\<noteq> y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subseq_good:\n  shows \"good subseq (f :: nat \\<Rightarrow> ('a::finite) list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good subseq f", "using wqo_on_imp_good[where f=\"f\", OF wqo_on_lists_over_finite_sets]"], ["proof (prove)\nusing this:\n  \\<forall>i. f i \\<in> UNIV \\<Longrightarrow> good subseq f\n\ngoal (1 subgoal):\n 1. good subseq f", "by simp"], ["", "lemma subseq_Higman_antichains:\n  assumes a: \"\\<forall>(x::('a::finite) list) \\<in> A. \\<forall>y \\<in> A. x \\<noteq> y \\<longrightarrow> \\<not>(subseq x y) \\<and> \\<not>(subseq y x)\"\n  shows \"finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "assume \"infinite A\""], ["proof (state)\nthis:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  infinite A", "obtain f::\"nat \\<Rightarrow> 'a::finite list\" where b: \"inj f\" and c: \"range f \\<subseteq> A\""], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>inj f; range f \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: infinite_iff_countable_subset)"], ["proof (state)\nthis:\n  inj f\n  range f \\<subseteq> A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "from subseq_good[where f=\"f\"]"], ["proof (chain)\npicking this:\n  good subseq f", "obtain i j where d: \"i < j\" and e: \"subseq (f i) (f j) \\<or> f i = f j\""], ["proof (prove)\nusing this:\n  good subseq f\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; subseq (f i) (f j) \\<or> f i = f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding good_def"], ["proof (prove)\nusing this:\n  \\<exists>i j. i < j \\<and> subseq (f i) (f j)\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; subseq (f i) (f j) \\<or> f i = f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < j\n  subseq (f i) (f j) \\<or> f i = f j\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "have \"f i \\<noteq> f j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i \\<noteq> f j", "using b d"], ["proof (prove)\nusing this:\n  inj f\n  i < j\n\ngoal (1 subgoal):\n 1. f i \\<noteq> f j", "by (auto simp add: inj_on_def)"], ["proof (state)\nthis:\n  f i \\<noteq> f j\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  f i \\<noteq> f j\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "have \"f i \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i \\<in> A", "using c"], ["proof (prove)\nusing this:\n  range f \\<subseteq> A\n\ngoal (1 subgoal):\n 1. f i \\<in> A", "by auto"], ["proof (state)\nthis:\n  f i \\<in> A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  f i \\<in> A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "have \"f j \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f j \\<in> A", "using c"], ["proof (prove)\nusing this:\n  range f \\<subseteq> A\n\ngoal (1 subgoal):\n 1. f j \\<in> A", "by auto"], ["proof (state)\nthis:\n  f j \\<in> A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  f i \\<noteq> f j\n  f i \\<in> A\n  f j \\<in> A", "have \"\\<not>(subseq (f i) (f j))\""], ["proof (prove)\nusing this:\n  f i \\<noteq> f j\n  f i \\<in> A\n  f j \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> subseq (f i) (f j)", "using a"], ["proof (prove)\nusing this:\n  f i \\<noteq> f j\n  f i \\<in> A\n  f j \\<in> A\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        x \\<noteq> y \\<longrightarrow> incomparable subseq x y\n\ngoal (1 subgoal):\n 1. \\<not> subseq (f i) (f j)", "by simp"], ["proof (state)\nthis:\n  \\<not> subseq (f i) (f j)\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> False", "with e"], ["proof (chain)\npicking this:\n  subseq (f i) (f j) \\<or> f i = f j\n  \\<not> subseq (f i) (f j)", "show \"False\""], ["proof (prove)\nusing this:\n  subseq (f i) (f j) \\<or> f i = f j\n  \\<not> subseq (f i) (f j)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Sub- and Supersequences\\<close>"], ["", "definition\n \"SUBSEQ A \\<equiv> {x::('a::finite) list. \\<exists>y \\<in> A. subseq x y}\""], ["", "definition\n \"SUPSEQ A \\<equiv> {x::('a::finite) list. \\<exists>y \\<in> A. subseq y x}\""], ["", "lemma SUPSEQ_simps [simp]:\n  shows \"SUPSEQ {} = {}\"\n  and   \"SUPSEQ {[]} = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ {} = {} &&& SUPSEQ {[]} = UNIV", "unfolding SUPSEQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>y\\<in>{}. subseq y x} = {} &&&\n    {x. \\<exists>y\\<in>{[]}. subseq y x} = UNIV", "by auto"], ["", "lemma SUPSEQ_atom [simp]:\n  shows \"SUPSEQ {[c]} = UNIV \\<cdot> {[c]} \\<cdot> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ {[c]} = UNIV \\<cdot> {[c]} \\<cdot> UNIV", "unfolding SUPSEQ_def conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>y\\<in>{[c]}. subseq y x} =\n    {xs @ ys |xs ys.\n     xs \\<in> UNIV \\<and>\n     ys \\<in> {xs @ ys |xs ys. xs \\<in> {[c]} \\<and> ys \\<in> UNIV}}", "by (auto dest: list_emb_ConsD)"], ["", "lemma SUPSEQ_union [simp]:\n  shows \"SUPSEQ (A \\<union> B) = SUPSEQ A \\<union> SUPSEQ B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ (A \\<union> B) = SUPSEQ A \\<union> SUPSEQ B", "unfolding SUPSEQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>y\\<in>A \\<union> B. subseq y x} =\n    {x. \\<exists>y\\<in>A. subseq y x} \\<union>\n    {x. \\<exists>y\\<in>B. subseq y x}", "by auto"], ["", "lemma SUPSEQ_conc [simp]:\n  shows \"SUPSEQ (A \\<cdot> B) = SUPSEQ A \\<cdot> SUPSEQ B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ (A \\<cdot> B) = SUPSEQ A \\<cdot> SUPSEQ B", "unfolding SUPSEQ_def conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>y\\<in>{xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B}.\n           subseq y x} =\n    {xs @ ys |xs ys.\n     xs \\<in> {x. \\<exists>y\\<in>A. subseq y x} \\<and>\n     ys \\<in> {x. \\<exists>y\\<in>B. subseq y x}}", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs ys.\n       \\<lbrakk>subseq (xs @ ys) x; xs \\<in> A; ys \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs ys.\n                            x = xs @ ys \\<and>\n                            (\\<exists>y\\<in>A. subseq y xs) \\<and>\n                            (\\<exists>y\\<in>B. subseq y ys)\n 2. \\<And>xs ys y ya.\n       \\<lbrakk>y \\<in> A; subseq y xs; ya \\<in> B; subseq ya ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (\\<exists>xs ys.\n                                y = xs @ ys \\<and>\n                                xs \\<in> A \\<and> ys \\<in> B) \\<and>\n                            subseq y (xs @ ys)", "apply(drule list_emb_appendD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs ys.\n       \\<lbrakk>xs \\<in> A; ys \\<in> B;\n        \\<exists>us vs.\n           x = us @ vs \\<and> subseq xs us \\<and> subseq ys vs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs ys.\n                            x = xs @ ys \\<and>\n                            (\\<exists>y\\<in>A. subseq y xs) \\<and>\n                            (\\<exists>y\\<in>B. subseq y ys)\n 2. \\<And>xs ys y ya.\n       \\<lbrakk>y \\<in> A; subseq y xs; ya \\<in> B; subseq ya ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (\\<exists>xs ys.\n                                y = xs @ ys \\<and>\n                                xs \\<in> A \\<and> ys \\<in> B) \\<and>\n                            subseq y (xs @ ys)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys y ya.\n       \\<lbrakk>y \\<in> A; subseq y xs; ya \\<in> B; subseq ya ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (\\<exists>xs ys.\n                                y = xs @ ys \\<and>\n                                xs \\<in> A \\<and> ys \\<in> B) \\<and>\n                            subseq y (xs @ ys)", "by (metis list_emb_append_mono)"], ["", "lemma SUPSEQ_star [simp]:\n  shows \"SUPSEQ (A\\<star>) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ (A\\<star>) = UNIV", "apply(subst star_unfold_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ (A \\<cdot> A\\<star> \\<union> {[]}) = UNIV", "apply(simp only: SUPSEQ_union)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ (A \\<cdot> A\\<star>) \\<union> SUPSEQ {[]} = UNIV", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Regular expression that recognises every character\\<close>"], ["", "definition\n  Allreg :: \"'a::finite rexp\"\nwhere\n  \"Allreg \\<equiv> \\<Uplus>(Atom ` UNIV)\""], ["", "lemma Allreg_lang [simp]:\n  shows \"lang Allreg = (\\<Union>a. {[a]})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang Allreg = (\\<Union>a. {[a]})", "unfolding Allreg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (\\<Uplus>(range Atom)) = (\\<Union>a. {[a]})", "by auto"], ["", "lemma [simp]:\n  shows \"(\\<Union>a. {[a]})\\<star> = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>a. {[a]})\\<star> = UNIV", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> (\\<Union>a. {[a]})\\<star>", "apply(induct_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. [] \\<in> (\\<Union>a. {[a]})\\<star>\n 2. \\<And>x a list.\n       list \\<in> (\\<Union>a. {[a]})\\<star> \\<Longrightarrow>\n       a # list \\<in> (\\<Union>a. {[a]})\\<star>", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       list \\<in> (\\<Union>a. {[a]})\\<star> \\<Longrightarrow>\n       a # list \\<in> (\\<Union>a. {[a]})\\<star>", "apply(subgoal_tac \"[a] @ list \\<in> (\\<Union>a. {[a]})\\<star>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>list \\<in> (\\<Union>a. {[a]})\\<star>;\n        [a] @ list \\<in> (\\<Union>a. {[a]})\\<star>\\<rbrakk>\n       \\<Longrightarrow> a # list \\<in> (\\<Union>a. {[a]})\\<star>\n 2. \\<And>a list.\n       list \\<in> (\\<Union>a. {[a]})\\<star> \\<Longrightarrow>\n       [a] @ list \\<in> (\\<Union>a. {[a]})\\<star>", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       list \\<in> (\\<Union>a. {[a]})\\<star> \\<Longrightarrow>\n       [a] @ list \\<in> (\\<Union>a. {[a]})\\<star>", "apply(rule append_in_starI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       list \\<in> (\\<Union>a. {[a]})\\<star> \\<Longrightarrow>\n       [a] \\<in> (\\<Union>a. {[a]})\\<star>\n 2. \\<And>a list.\n       list \\<in> (\\<Union>a. {[a]})\\<star> \\<Longrightarrow>\n       list \\<in> (\\<Union>a. {[a]})\\<star>", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Star_Allreg_lang [simp]:\n  shows \"lang (Star Allreg) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (Star Allreg) = UNIV", "by simp"], ["", "fun \n  UP :: \"'a::finite rexp \\<Rightarrow> 'a rexp\"\nwhere\n  \"UP (Zero) = Zero\"\n| \"UP (One) = Star Allreg\"\n| \"UP (Atom c) = Times (Star Allreg) (Times (Atom c) (Star Allreg))\"   \n| \"UP (Plus r1 r2) = Plus (UP r1) (UP r2)\"\n| \"UP (Times r1 r2) = Times (UP r1) (UP r2)\"\n| \"UP (Star r) = Star Allreg\""], ["", "lemma lang_UP:\n  fixes r::\"'a::finite rexp\"\n  shows \"lang (UP r) = SUPSEQ (lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (UP r) = SUPSEQ (lang r)", "by (induct r) (simp_all)"], ["", "lemma SUPSEQ_regular: \n  fixes A::\"'a::finite lang\"\n  assumes \"regular A\"\n  shows \"regular (SUPSEQ A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "from assms"], ["proof (chain)\npicking this:\n  regular A", "obtain r::\"'a::finite rexp\" where \"lang r = A\""], ["proof (prove)\nusing this:\n  regular A\n\ngoal (1 subgoal):\n 1. (\\<And>r. lang r = A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  lang r = A\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "then"], ["proof (chain)\npicking this:\n  lang r = A", "have \"lang (UP r) = SUPSEQ A\""], ["proof (prove)\nusing this:\n  lang r = A\n\ngoal (1 subgoal):\n 1. lang (UP r) = SUPSEQ A", "by (simp add: lang_UP)"], ["proof (state)\nthis:\n  lang (UP r) = SUPSEQ A\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "then"], ["proof (chain)\npicking this:\n  lang (UP r) = SUPSEQ A", "show \"regular (SUPSEQ A)\""], ["proof (prove)\nusing this:\n  lang (UP r) = SUPSEQ A\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "by auto"], ["proof (state)\nthis:\n  regular (SUPSEQ A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SUPSEQ_subset:\n  fixes A::\"'a::finite list set\"\n  shows \"A \\<subseteq> SUPSEQ A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> SUPSEQ A", "unfolding SUPSEQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> {x. \\<exists>y\\<in>A. subseq y x}", "by auto"], ["", "lemma SUBSEQ_complement:\n  shows \"- (SUBSEQ A) = SUPSEQ (- (SUBSEQ A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - SUBSEQ A = SUPSEQ (- SUBSEQ A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - SUBSEQ A = SUPSEQ (- SUBSEQ A)", "have \"- (SUBSEQ A) \\<subseteq> SUPSEQ (- (SUBSEQ A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - SUBSEQ A \\<subseteq> SUPSEQ (- SUBSEQ A)", "by (rule SUPSEQ_subset)"], ["proof (state)\nthis:\n  - SUBSEQ A \\<subseteq> SUPSEQ (- SUBSEQ A)\n\ngoal (1 subgoal):\n 1. - SUBSEQ A = SUPSEQ (- SUBSEQ A)", "moreover"], ["proof (state)\nthis:\n  - SUBSEQ A \\<subseteq> SUPSEQ (- SUBSEQ A)\n\ngoal (1 subgoal):\n 1. - SUBSEQ A = SUPSEQ (- SUBSEQ A)", "have \"SUPSEQ (- (SUBSEQ A)) \\<subseteq> - (SUBSEQ A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "assume \"\\<not> (SUPSEQ (- (SUBSEQ A)) \\<subseteq> - (SUBSEQ A))\""], ["proof (state)\nthis:\n  \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A", "obtain x where \n       a: \"x \\<in> SUPSEQ (- (SUBSEQ A))\" and \n       b: \"x \\<notin> - (SUBSEQ A)\""], ["proof (prove)\nusing this:\n  \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> SUPSEQ (- SUBSEQ A); x \\<notin> - SUBSEQ A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> SUPSEQ (- SUBSEQ A)\n  x \\<notin> - SUBSEQ A\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "from a"], ["proof (chain)\npicking this:\n  x \\<in> SUPSEQ (- SUBSEQ A)", "obtain y where c: \"y \\<in> - (SUBSEQ A)\" and d: \"subseq y x\""], ["proof (prove)\nusing this:\n  x \\<in> SUPSEQ (- SUBSEQ A)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> - SUBSEQ A; subseq y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: SUPSEQ_def)"], ["proof (state)\nthis:\n  y \\<in> - SUBSEQ A\n  subseq y x\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "from b"], ["proof (chain)\npicking this:\n  x \\<notin> - SUBSEQ A", "have \"x \\<in> SUBSEQ A\""], ["proof (prove)\nusing this:\n  x \\<notin> - SUBSEQ A\n\ngoal (1 subgoal):\n 1. x \\<in> SUBSEQ A", "by simp"], ["proof (state)\nthis:\n  x \\<in> SUBSEQ A\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  x \\<in> SUBSEQ A", "obtain x' where f: \"x' \\<in> A\" and e: \"subseq x x'\""], ["proof (prove)\nusing this:\n  x \\<in> SUBSEQ A\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> A; subseq x x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: SUBSEQ_def)"], ["proof (state)\nthis:\n  x' \\<in> A\n  subseq x x'\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "from d e"], ["proof (chain)\npicking this:\n  subseq y x\n  subseq x x'", "have \"subseq y x'\""], ["proof (prove)\nusing this:\n  subseq y x\n  subseq x x'\n\ngoal (1 subgoal):\n 1. subseq y x'", "by (rule subseq_order.order_trans)"], ["proof (state)\nthis:\n  subseq y x'\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  subseq y x'", "have \"y \\<in> SUBSEQ A\""], ["proof (prove)\nusing this:\n  subseq y x'\n\ngoal (1 subgoal):\n 1. y \\<in> SUBSEQ A", "using f"], ["proof (prove)\nusing this:\n  subseq y x'\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. y \\<in> SUBSEQ A", "by (auto simp add: SUBSEQ_def)"], ["proof (state)\nthis:\n  y \\<in> SUBSEQ A\n\ngoal (1 subgoal):\n 1. \\<not> SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A \\<Longrightarrow>\n    False", "with c"], ["proof (chain)\npicking this:\n  y \\<in> - SUBSEQ A\n  y \\<in> SUBSEQ A", "show \"False\""], ["proof (prove)\nusing this:\n  y \\<in> - SUBSEQ A\n  y \\<in> SUBSEQ A\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A\n\ngoal (1 subgoal):\n 1. - SUBSEQ A = SUPSEQ (- SUBSEQ A)", "ultimately"], ["proof (chain)\npicking this:\n  - SUBSEQ A \\<subseteq> SUPSEQ (- SUBSEQ A)\n  SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A", "show \"- (SUBSEQ A) = SUPSEQ (- (SUBSEQ A))\""], ["proof (prove)\nusing this:\n  - SUBSEQ A \\<subseteq> SUPSEQ (- SUBSEQ A)\n  SUPSEQ (- SUBSEQ A) \\<subseteq> - SUBSEQ A\n\ngoal (1 subgoal):\n 1. - SUBSEQ A = SUPSEQ (- SUBSEQ A)", "by simp"], ["proof (state)\nthis:\n  - SUBSEQ A = SUPSEQ (- SUBSEQ A)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  minimal :: \"'a::finite list \\<Rightarrow> 'a lang \\<Rightarrow> bool\"\nwhere\n  \"minimal x A \\<equiv> (\\<forall>y \\<in> A. subseq y x \\<longrightarrow> subseq x y)\""], ["", "lemma main_lemma:\n  shows \"\\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "define M where \"M = {x \\<in> A. minimal x A}\""], ["proof (state)\nthis:\n  M = {x \\<in> A. minimal x A}\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "have \"finite M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite M", "unfolding M_def minimal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {x \\<in> A. \\<forall>y\\<in>A. subseq y x \\<longrightarrow> subseq x y}", "by (rule subseq_Higman_antichains) (auto simp add: subseq_order.antisym)"], ["proof (state)\nthis:\n  finite M\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "moreover"], ["proof (state)\nthis:\n  finite M\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "have \"SUPSEQ A \\<subseteq> SUPSEQ M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ A \\<subseteq> SUPSEQ M", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "assume \"x \\<in> SUPSEQ A\""], ["proof (state)\nthis:\n  x \\<in> SUPSEQ A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "then"], ["proof (chain)\npicking this:\n  x \\<in> SUPSEQ A", "obtain y where \"y \\<in> A\" and \"subseq y x\""], ["proof (prove)\nusing this:\n  x \\<in> SUPSEQ A\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> A; subseq y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: SUPSEQ_def)"], ["proof (state)\nthis:\n  y \\<in> A\n  subseq y x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "then"], ["proof (chain)\npicking this:\n  y \\<in> A\n  subseq y x", "have a: \"y \\<in> {y' \\<in> A. subseq y' x}\""], ["proof (prove)\nusing this:\n  y \\<in> A\n  subseq y x\n\ngoal (1 subgoal):\n 1. y \\<in> {y' \\<in> A. subseq y' x}", "by simp"], ["proof (state)\nthis:\n  y \\<in> {y' \\<in> A. subseq y' x}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "obtain z where b: \"z \\<in> A\" \"subseq z x\" and c: \"\\<forall>y. subseq y z \\<and> y \\<noteq> z \\<longrightarrow> y \\<notin> {y' \\<in> A. subseq y' x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> A; subseq z x;\n         \\<forall>y.\n            subseq y z \\<and> y \\<noteq> z \\<longrightarrow>\n            y \\<notin> {y' \\<in> A. subseq y' x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wfE_min[OF subseq_wf a]"], ["proof (prove)\nusing this:\n  (\\<And>z.\n      \\<lbrakk>z \\<in> {y' \\<in> A. subseq y' x};\n       \\<And>y.\n          (y, z)\n          \\<in> {(x, y). subseq x y \\<and> x \\<noteq> y} \\<Longrightarrow>\n          y \\<notin> {y' \\<in> A. subseq y' x}\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> A; subseq z x;\n         \\<forall>y.\n            subseq y z \\<and> y \\<noteq> z \\<longrightarrow>\n            y \\<notin> {y' \\<in> A. subseq y' x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> A\n  subseq z x\n  \\<forall>y.\n     subseq y z \\<and> y \\<noteq> z \\<longrightarrow>\n     y \\<notin> {y' \\<in> A. subseq y' x}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "then"], ["proof (chain)\npicking this:\n  z \\<in> A\n  subseq z x\n  \\<forall>y.\n     subseq y z \\<and> y \\<noteq> z \\<longrightarrow>\n     y \\<notin> {y' \\<in> A. subseq y' x}", "have \"z \\<in> M\""], ["proof (prove)\nusing this:\n  z \\<in> A\n  subseq z x\n  \\<forall>y.\n     subseq y z \\<and> y \\<noteq> z \\<longrightarrow>\n     y \\<notin> {y' \\<in> A. subseq y' x}\n\ngoal (1 subgoal):\n 1. z \\<in> M", "unfolding M_def minimal_def"], ["proof (prove)\nusing this:\n  z \\<in> A\n  subseq z x\n  \\<forall>y.\n     subseq y z \\<and> y \\<noteq> z \\<longrightarrow>\n     y \\<notin> {y' \\<in> A. subseq y' x}\n\ngoal (1 subgoal):\n 1. z \\<in> {x \\<in> A.\n             \\<forall>y\\<in>A. subseq y x \\<longrightarrow> subseq x y}", "by (auto intro: subseq_order.order_trans)"], ["proof (state)\nthis:\n  z \\<in> M\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> SUPSEQ A \\<Longrightarrow> x \\<in> SUPSEQ M", "with b(2)"], ["proof (chain)\npicking this:\n  subseq z x\n  z \\<in> M", "show \"x \\<in> SUPSEQ M\""], ["proof (prove)\nusing this:\n  subseq z x\n  z \\<in> M\n\ngoal (1 subgoal):\n 1. x \\<in> SUPSEQ M", "by (auto simp add: SUPSEQ_def)"], ["proof (state)\nthis:\n  x \\<in> SUPSEQ M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SUPSEQ A \\<subseteq> SUPSEQ M\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "moreover"], ["proof (state)\nthis:\n  SUPSEQ A \\<subseteq> SUPSEQ M\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "have \"SUPSEQ M \\<subseteq> SUPSEQ A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SUPSEQ M \\<subseteq> SUPSEQ A", "by (auto simp add: SUPSEQ_def M_def)"], ["proof (state)\nthis:\n  SUPSEQ M \\<subseteq> SUPSEQ A\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "ultimately"], ["proof (chain)\npicking this:\n  finite M\n  SUPSEQ A \\<subseteq> SUPSEQ M\n  SUPSEQ M \\<subseteq> SUPSEQ A", "show \"\\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M\""], ["proof (prove)\nusing this:\n  finite M\n  SUPSEQ A \\<subseteq> SUPSEQ M\n  SUPSEQ M \\<subseteq> SUPSEQ A\n\ngoal (1 subgoal):\n 1. \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M", "by blast"], ["proof (state)\nthis:\n  \\<exists>M. finite M \\<and> SUPSEQ A = SUPSEQ M\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Closure of @{const SUBSEQ} and @{const SUPSEQ}\\<close>"], ["", "lemma closure_SUPSEQ:\n  fixes A::\"'a::finite lang\" \n  shows \"regular (SUPSEQ A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "obtain M where a: \"finite M\" and b: \"SUPSEQ A = SUPSEQ M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>finite M; SUPSEQ A = SUPSEQ M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using main_lemma"], ["proof (prove)\nusing this:\n  \\<exists>M. finite M \\<and> SUPSEQ ?A = SUPSEQ M\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>finite M; SUPSEQ A = SUPSEQ M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite M\n  SUPSEQ A = SUPSEQ M\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "have \"regular M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular M", "using a"], ["proof (prove)\nusing this:\n  finite M\n\ngoal (1 subgoal):\n 1. regular M", "by (rule finite_regular)"], ["proof (state)\nthis:\n  regular M\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "then"], ["proof (chain)\npicking this:\n  regular M", "have \"regular (SUPSEQ M)\""], ["proof (prove)\nusing this:\n  regular M\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ M)", "by (rule SUPSEQ_regular)"], ["proof (state)\nthis:\n  regular (SUPSEQ M)\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "then"], ["proof (chain)\npicking this:\n  regular (SUPSEQ M)", "show \"regular (SUPSEQ A)\""], ["proof (prove)\nusing this:\n  regular (SUPSEQ M)\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "using b"], ["proof (prove)\nusing this:\n  regular (SUPSEQ M)\n  SUPSEQ A = SUPSEQ M\n\ngoal (1 subgoal):\n 1. regular (SUPSEQ A)", "by simp"], ["proof (state)\nthis:\n  regular (SUPSEQ A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closure_SUBSEQ:\n  fixes A::\"'a::finite lang\"\n  shows \"regular (SUBSEQ A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (SUBSEQ A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. regular (SUBSEQ A)", "have \"regular (SUPSEQ (- SUBSEQ A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (SUPSEQ (- SUBSEQ A))", "by (rule closure_SUPSEQ)"], ["proof (state)\nthis:\n  regular (SUPSEQ (- SUBSEQ A))\n\ngoal (1 subgoal):\n 1. regular (SUBSEQ A)", "then"], ["proof (chain)\npicking this:\n  regular (SUPSEQ (- SUBSEQ A))", "have \"regular (- SUBSEQ A)\""], ["proof (prove)\nusing this:\n  regular (SUPSEQ (- SUBSEQ A))\n\ngoal (1 subgoal):\n 1. regular (- SUBSEQ A)", "by (subst SUBSEQ_complement) (simp)"], ["proof (state)\nthis:\n  regular (- SUBSEQ A)\n\ngoal (1 subgoal):\n 1. regular (SUBSEQ A)", "then"], ["proof (chain)\npicking this:\n  regular (- SUBSEQ A)", "have \"regular (- (- (SUBSEQ A)))\""], ["proof (prove)\nusing this:\n  regular (- SUBSEQ A)\n\ngoal (1 subgoal):\n 1. regular (- (- SUBSEQ A))", "by (rule closure_complement)"], ["proof (state)\nthis:\n  regular (- (- SUBSEQ A))\n\ngoal (1 subgoal):\n 1. regular (SUBSEQ A)", "then"], ["proof (chain)\npicking this:\n  regular (- (- SUBSEQ A))", "show \"regular (SUBSEQ A)\""], ["proof (prove)\nusing this:\n  regular (- (- SUBSEQ A))\n\ngoal (1 subgoal):\n 1. regular (SUBSEQ A)", "by simp"], ["proof (state)\nthis:\n  regular (SUBSEQ A)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}