{"file_name": "/home/qj213/afp-2021-10-22/thys/Myhill-Nerode/Non_Regular_Languages.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Myhill-Nerode", "problem_names": ["lemma bij_betw_image_quotient:\n  \"bij_betw (\\<lambda>y. f -` {y}) (f ` A) (A // {(a,b). f a = f b})\"", "lemma regular_Derivs_finite:\n  fixes r :: \"'a :: finite rexp\"\n  shows \"finite (range (\\<lambda>w. Derivs w (lang r)))\"", "lemma Nil_in_Derivs_iff: \"[] \\<in> Derivs w A \\<longleftrightarrow> w \\<in> A\"", "lemma repeat_Cons_left: \"repeat (Suc n) xs = xs @ repeat n xs\"", "lemma repeat_Cons_right: \"repeat (Suc n) xs = repeat n xs @ xs\"", "lemma repeat_Cons_append_commute [simp]: \"repeat n xs @ xs = xs @ repeat n xs\"", "lemma repeat_Cons_add [simp]: \"repeat (m + n) xs = repeat m xs @ repeat n xs\"", "lemma repeat_Nil [simp]: \"repeat n [] = []\"", "lemma repeat_conv_replicate: \"repeat n xs = concat (replicate n xs)\"", "lemma nth_prefixes [simp]: \"n \\<le> length xs \\<Longrightarrow> prefixes xs ! n = take n xs\"", "lemma nth_suffixes [simp]: \"n \\<le> length xs \\<Longrightarrow> suffixes xs ! n = drop (length xs - n) xs\"", "lemma length_take_prefixes:\n  assumes \"xs \\<in> set (take n (prefixes ys))\"\n  shows   \"length xs < n\"", "lemma not_regular_langI:\n  assumes \"infinite B\" \"\\<And>x y. x \\<in> B \\<Longrightarrow> y \\<in> B \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> \\<exists>w. \\<not>(x @ w \\<in> A \\<longleftrightarrow> y @ w \\<in> A)\"\n  shows   \"\\<not>regular_lang (A :: 'a :: finite list set)\"", "lemma not_regular_langI':\n  assumes \"infinite B\" \"\\<And>x y. x \\<in> B \\<Longrightarrow> y \\<in> B \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> \\<exists>w. \\<not>(f x @ w \\<in> A \\<longleftrightarrow> f y @ w \\<in> A)\"\n  shows   \"\\<not>regular_lang (A :: 'a :: finite list set)\"", "lemma pumping_lemma_aux:\n  fixes A :: \"'a list set\"\n  defines \"\\<delta> \\<equiv> \\<lambda>w. Derivs w A\"\n  defines \"n \\<equiv> card (range \\<delta>)\"\n  assumes \"z \\<in> A\" \"finite (range \\<delta>)\" \"length z \\<ge> n\"\n  shows \"\\<exists>u v w. z = u @ v @ w \\<and> length (u @ v) \\<le> n \\<and> v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)\"", "theorem pumping_lemma:\n  fixes r :: \"'a :: finite rexp\"\n  obtains n where \n    \"\\<And>z. z \\<in> lang r \\<Longrightarrow> length z \\<ge> n \\<Longrightarrow> \n            \\<exists>u v w. z = u @ v @ w \\<and> length (u @ v) \\<le> n \\<and> v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\"", "lemma \"\\<not>regular_lang {w. length (filter id w) = length (filter Not w)}\" (is \"\\<not>regular_lang ?A\")", "lemma eq_replicate_iff:\n  \"xs = replicate n x \\<longleftrightarrow> set xs \\<subseteq> {x} \\<and> length xs = n\"", "lemma replicate_eq_appendE:\n  assumes \"xs @ ys = replicate n x\"\n  obtains i j where \"n = i + j\" \"xs = replicate i x\" \"ys = replicate j x\"", "lemma \"\\<not>regular_lang (range (\\<lambda>i. replicate i True @ replicate i False))\" (is \"\\<not>regular_lang ?A\")"], "translations": [["", "lemma bij_betw_image_quotient:\n  \"bij_betw (\\<lambda>y. f -` {y}) (f ` A) (A // {(a,b). f a = f b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>y. f -` {y}) (f ` A) (A // {(a, b). f a = f b})", "by (force simp: bij_betw_def inj_on_def image_image quotient_def)"], ["", "lemma regular_Derivs_finite:\n  fixes r :: \"'a :: finite rexp\"\n  shows \"finite (range (\\<lambda>w. Derivs w (lang r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r)))", "have \"?thesis \\<longleftrightarrow> finite (UNIV // \\<approx>lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r))) =\n    finite (UNIV // \\<approx>lang r)", "unfolding str_eq_conv_Derivs"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r))) =\n    finite (UNIV // {(u, v). Derivs u (lang r) = Derivs v (lang r)})", "by (rule bij_betw_finite bij_betw_image_quotient)+"], ["proof (state)\nthis:\n  finite (range (\\<lambda>w. Derivs w (lang r))) =\n  finite (UNIV // \\<approx>lang r)\n\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r)))", "also"], ["proof (state)\nthis:\n  finite (range (\\<lambda>w. Derivs w (lang r))) =\n  finite (UNIV // \\<approx>lang r)\n\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r)))", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (UNIV // \\<approx>lang r)", "by (subst Myhill_Nerode [symmetric]) auto"], ["proof (state)\nthis:\n  finite (UNIV // \\<approx>lang r)\n\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r)))", "finally"], ["proof (chain)\npicking this:\n  finite (range (\\<lambda>w. Derivs w (lang r)))", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (range (\\<lambda>w. Derivs w (lang r)))\n\ngoal (1 subgoal):\n 1. finite (range (\\<lambda>w. Derivs w (lang r)))", "."], ["proof (state)\nthis:\n  finite (range (\\<lambda>w. Derivs w (lang r)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Nil_in_Derivs_iff: \"[] \\<in> Derivs w A \\<longleftrightarrow> w \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] \\<in> Derivs w A) = (w \\<in> A)", "by (auto simp: Derivs_def)"], ["", "(* TODO: Move to distribution? *)"], ["", "text \\<open>\n  The following operation repeats a list $n$ times (usually written as $w ^ n$).\n\\<close>"], ["", "primrec repeat :: \"nat \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n  \"repeat 0 xs = []\"\n| \"repeat (Suc n) xs = xs @ repeat n xs\""], ["", "lemma repeat_Cons_left: \"repeat (Suc n) xs = xs @ repeat n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeat (Suc n) xs = xs @ repeat n xs", "by simp"], ["", "lemma repeat_Cons_right: \"repeat (Suc n) xs = repeat n xs @ xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeat (Suc n) xs = repeat n xs @ xs", "by (induction n) simp_all"], ["", "lemma repeat_Cons_append_commute [simp]: \"repeat n xs @ xs = xs @ repeat n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeat n xs @ xs = xs @ repeat n xs", "by (subst repeat_Cons_right [symmetric]) simp"], ["", "lemma repeat_Cons_add [simp]: \"repeat (m + n) xs = repeat m xs @ repeat n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeat (m + n) xs = repeat m xs @ repeat n xs", "by (induction m) simp_all"], ["", "lemma repeat_Nil [simp]: \"repeat n [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeat n [] = []", "by (induction n) simp_all"], ["", "lemma repeat_conv_replicate: \"repeat n xs = concat (replicate n xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeat n xs = concat (replicate n xs)", "by (induction n) simp_all"], ["", "(* TODO: Move to distribution? *)"], ["", "lemma nth_prefixes [simp]: \"n \\<le> length xs \\<Longrightarrow> prefixes xs ! n = take n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow> prefixes xs ! n = take n xs", "by (induction xs arbitrary: n) (auto simp: nth_Cons split: nat.splits)"], ["", "lemma nth_suffixes [simp]: \"n \\<le> length xs \\<Longrightarrow> suffixes xs ! n = drop (length xs - n) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow>\n    suffixes xs ! n = drop (length xs - n) xs", "by (subst suffixes_conv_prefixes) (simp_all add: rev_take)"], ["", "lemma length_take_prefixes:\n  assumes \"xs \\<in> set (take n (prefixes ys))\"\n  shows   \"length xs < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs < n", "proof (cases \"n \\<le> Suc (length ys)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n\n 2. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "case True"], ["proof (state)\nthis:\n  n \\<le> Suc (length ys)\n\ngoal (2 subgoals):\n 1. n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n\n 2. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "with assms"], ["proof (chain)\npicking this:\n  xs \\<in> set (take n (prefixes ys))\n  n \\<le> Suc (length ys)", "obtain i where \"i < n\" \"xs = take i ys\""], ["proof (prove)\nusing this:\n  xs \\<in> set (take n (prefixes ys))\n  n \\<le> Suc (length ys)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < n; xs = take i ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (subst (asm) nth_image [symmetric]) auto"], ["proof (state)\nthis:\n  i < n\n  xs = take i ys\n\ngoal (2 subgoals):\n 1. n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n\n 2. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "thus ?thesis"], ["proof (prove)\nusing this:\n  i < n\n  xs = take i ys\n\ngoal (1 subgoal):\n 1. length xs < n", "by simp"], ["proof (state)\nthis:\n  length xs < n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> Suc (length ys)\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "with assms"], ["proof (chain)\npicking this:\n  xs \\<in> set (take n (prefixes ys))\n  \\<not> n \\<le> Suc (length ys)", "have \"prefix xs ys\""], ["proof (prove)\nusing this:\n  xs \\<in> set (take n (prefixes ys))\n  \\<not> n \\<le> Suc (length ys)\n\ngoal (1 subgoal):\n 1. prefix xs ys", "by simp"], ["proof (state)\nthis:\n  prefix xs ys\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "hence \"length xs \\<le> length ys\""], ["proof (prove)\nusing this:\n  prefix xs ys\n\ngoal (1 subgoal):\n 1. length xs \\<le> length ys", "by (rule prefix_length_le)"], ["proof (state)\nthis:\n  length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "also"], ["proof (state)\nthis:\n  length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "from False"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> Suc (length ys)", "have \"\\<dots> < n\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> Suc (length ys)\n\ngoal (1 subgoal):\n 1. length ys < n", "by simp"], ["proof (state)\nthis:\n  length ys < n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> Suc (length ys) \\<Longrightarrow> length xs < n", "finally"], ["proof (chain)\npicking this:\n  length xs < n", "show ?thesis"], ["proof (prove)\nusing this:\n  length xs < n\n\ngoal (1 subgoal):\n 1. length xs < n", "."], ["proof (state)\nthis:\n  length xs < n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Non-regularity by giving an infinite set of equivalence classes\\<close>"], ["", "text \\<open>\n  Non-regularity can be shown by giving an infinite set of non-equivalent words (w.r.t. the \n  Myhill--Nerode relation).\n\\<close>"], ["", "lemma not_regular_langI:\n  assumes \"infinite B\" \"\\<And>x y. x \\<in> B \\<Longrightarrow> y \\<in> B \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> \\<exists>w. \\<not>(x @ w \\<in> A \\<longleftrightarrow> y @ w \\<in> A)\"\n  shows   \"\\<not>regular_lang (A :: 'a :: finite list set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "have \"(\\<lambda>w. Derivs w A) ` B \\<subseteq> range (\\<lambda>w. Derivs w A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. Derivs w A) ` B \\<subseteq> range (\\<lambda>w. Derivs w A)", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>w. Derivs w A) ` B \\<subseteq> range (\\<lambda>w. Derivs w A)\n\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>w. Derivs w A) ` B \\<subseteq> range (\\<lambda>w. Derivs w A)\n\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> B; ?y \\<in> B; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w. (?x @ w \\<in> A) \\<noteq> (?y @ w \\<in> A)", "have \"inj_on (\\<lambda>w. Derivs w A) B\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> B; ?y \\<in> B; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w. (?x @ w \\<in> A) \\<noteq> (?y @ w \\<in> A)\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>w. Derivs w A) B", "by (auto simp: inj_on_def Derivs_def)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>w. Derivs w A) B\n\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "with assms(1)"], ["proof (chain)\npicking this:\n  infinite B\n  inj_on (\\<lambda>w. Derivs w A) B", "have \"infinite ((\\<lambda>w. Derivs w A) ` B)\""], ["proof (prove)\nusing this:\n  infinite B\n  inj_on (\\<lambda>w. Derivs w A) B\n\ngoal (1 subgoal):\n 1. infinite ((\\<lambda>w. Derivs w A) ` B)", "by (blast dest: finite_imageD)"], ["proof (state)\nthis:\n  infinite ((\\<lambda>w. Derivs w A) ` B)\n\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>w. Derivs w A) ` B \\<subseteq> range (\\<lambda>w. Derivs w A)\n  infinite ((\\<lambda>w. Derivs w A) ` B)", "have \"infinite (range (\\<lambda>w. Derivs w A))\""], ["proof (prove)\nusing this:\n  (\\<lambda>w. Derivs w A) ` B \\<subseteq> range (\\<lambda>w. Derivs w A)\n  infinite ((\\<lambda>w. Derivs w A) ` B)\n\ngoal (1 subgoal):\n 1. infinite (range (\\<lambda>w. Derivs w A))", "by (rule infinite_super)"], ["proof (state)\nthis:\n  infinite (range (\\<lambda>w. Derivs w A))\n\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "with regular_Derivs_finite"], ["proof (chain)\npicking this:\n  finite (range (\\<lambda>w. Derivs w (lang ?r)))\n  infinite (range (\\<lambda>w. Derivs w A))", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (range (\\<lambda>w. Derivs w (lang ?r)))\n  infinite (range (\\<lambda>w. Derivs w A))\n\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "by blast"], ["proof (state)\nthis:\n  \\<nexists>r. lang r = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_regular_langI':\n  assumes \"infinite B\" \"\\<And>x y. x \\<in> B \\<Longrightarrow> y \\<in> B \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> \\<exists>w. \\<not>(f x @ w \\<in> A \\<longleftrightarrow> f y @ w \\<in> A)\"\n  shows   \"\\<not>regular_lang (A :: 'a :: finite list set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "proof (rule not_regular_langI)"], ["proof (state)\ngoal (2 subgoals):\n 1. infinite ?B\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ?B; y \\<in> ?B; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (x @ w \\<in> A) \\<noteq> (y @ w \\<in> A)", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> B; ?y \\<in> B; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       (f ?x @ w \\<in> A) \\<noteq> (f ?y @ w \\<in> A)", "have \"inj_on f B\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> B; ?y \\<in> B; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       (f ?x @ w \\<in> A) \\<noteq> (f ?y @ w \\<in> A)\n\ngoal (1 subgoal):\n 1. inj_on f B", "by (force simp: inj_on_def)"], ["proof (state)\nthis:\n  inj_on f B\n\ngoal (2 subgoals):\n 1. infinite ?B\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ?B; y \\<in> ?B; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (x @ w \\<in> A) \\<noteq> (y @ w \\<in> A)", "with \\<open>infinite B\\<close>"], ["proof (chain)\npicking this:\n  infinite B\n  inj_on f B", "show \"infinite (f ` B)\""], ["proof (prove)\nusing this:\n  infinite B\n  inj_on f B\n\ngoal (1 subgoal):\n 1. infinite (f ` B)", "by (simp add: finite_image_iff)"], ["proof (state)\nthis:\n  infinite (f ` B)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> f ` B; y \\<in> f ` B; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (x @ w \\<in> A) \\<noteq> (y @ w \\<in> A)", "qed (insert assms, auto)"], ["", "subsection \\<open>The Pumping Lemma\\<close>"], ["", "text \\<open>\n  The Pumping lemma can be shown very easily from the Myhill--Nerode theorem: if we have \n  a word whose length is more than the (finite) number of equivalence classes, then it must \n  have two different prefixes in the same class and the difference between these two \n  prefixes can then be ``pumped''.\n\\<close>"], ["", "lemma pumping_lemma_aux:\n  fixes A :: \"'a list set\"\n  defines \"\\<delta> \\<equiv> \\<lambda>w. Derivs w A\"\n  defines \"n \\<equiv> card (range \\<delta>)\"\n  assumes \"z \\<in> A\" \"finite (range \\<delta>)\" \"length z \\<ge> n\"\n  shows \"\\<exists>u v w. z = u @ v @ w \\<and> length (u @ v) \\<le> n \\<and> v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "define P where \"P = set (take (Suc n) (prefixes z))\""], ["proof (state)\nthis:\n  P = set (take (Suc n) (prefixes z))\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from \\<open>length z \\<ge> n\\<close>"], ["proof (chain)\npicking this:\n  n \\<le> length z", "have [simp]: \"card P = Suc n\""], ["proof (prove)\nusing this:\n  n \\<le> length z\n\ngoal (1 subgoal):\n 1. card P = Suc n", "unfolding P_def"], ["proof (prove)\nusing this:\n  n \\<le> length z\n\ngoal (1 subgoal):\n 1. card (set (take (Suc n) (prefixes z))) = Suc n", "by (subst distinct_card) (auto intro!: distinct_take)"], ["proof (state)\nthis:\n  card P = Suc n\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "have length_le: \"length y \\<le> n\" if \"y \\<in> P\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. length y \\<le> n", "using length_take_prefixes[OF that [unfolded P_def]]"], ["proof (prove)\nusing this:\n  length y < Suc n\n\ngoal (1 subgoal):\n 1. length y \\<le> n", "by simp"], ["proof (state)\nthis:\n  ?y \\<in> P \\<Longrightarrow> length ?y \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "have \"card (\\<delta> ` P) \\<le> card (range \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<delta> ` P) \\<le> card (range \\<delta>)", "by (intro card_mono assms) auto"], ["proof (state)\nthis:\n  card (\\<delta> ` P) \\<le> card (range \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "also"], ["proof (state)\nthis:\n  card (\\<delta> ` P) \\<le> card (range \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from assms"], ["proof (chain)\npicking this:\n  \\<delta> \\<equiv> \\<lambda>w. Derivs w A\n  n \\<equiv> card (range \\<delta>)\n  z \\<in> A\n  finite (range \\<delta>)\n  n \\<le> length z", "have \"\\<dots> < card P\""], ["proof (prove)\nusing this:\n  \\<delta> \\<equiv> \\<lambda>w. Derivs w A\n  n \\<equiv> card (range \\<delta>)\n  z \\<in> A\n  finite (range \\<delta>)\n  n \\<le> length z\n\ngoal (1 subgoal):\n 1. card (range \\<delta>) < card P", "by simp"], ["proof (state)\nthis:\n  card (range \\<delta>) < card P\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "finally"], ["proof (chain)\npicking this:\n  card (\\<delta> ` P) < card P", "have \"\\<not>inj_on \\<delta> P\""], ["proof (prove)\nusing this:\n  card (\\<delta> ` P) < card P\n\ngoal (1 subgoal):\n 1. \\<not> inj_on \\<delta> P", "by (rule pigeonhole)"], ["proof (state)\nthis:\n  \\<not> inj_on \\<delta> P\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "then"], ["proof (chain)\npicking this:\n  \\<not> inj_on \\<delta> P", "obtain a b where ab: \"a \\<in> P\" \"b \\<in> P\" \"a \\<noteq> b\" \"Derivs a A = Derivs b A\""], ["proof (prove)\nusing this:\n  \\<not> inj_on \\<delta> P\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<in> P; b \\<in> P; a \\<noteq> b;\n         Derivs a A = Derivs b A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: inj_on_def \\<delta>_def)"], ["proof (state)\nthis:\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from ab"], ["proof (chain)\npicking this:\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A", "have prefix_ab: \"prefix a z\" \"prefix b z\""], ["proof (prove)\nusing this:\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A\n\ngoal (1 subgoal):\n 1. prefix a z &&& prefix b z", "by (auto simp: P_def dest: in_set_takeD)"], ["proof (state)\nthis:\n  prefix a z\n  prefix b z\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from ab"], ["proof (chain)\npicking this:\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A", "have length_ab: \"length a \\<le> n\" \"length b \\<le> n\""], ["proof (prove)\nusing this:\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A\n\ngoal (1 subgoal):\n 1. length a \\<le> n &&& length b \\<le> n", "by (simp_all add: length_le)"], ["proof (state)\nthis:\n  length a \\<le> n\n  length b \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "have *: ?thesis \n    if uz': \"prefix u z'\" \"prefix z' z\" \"length z' \\<le> n\" \n            \"u \\<noteq> z'\" \"Derivs z' A = Derivs u A\" for u z'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from \\<open>prefix u z'\\<close> and \\<open>u \\<noteq> z'\\<close>"], ["proof (chain)\npicking this:\n  prefix u z'\n  u \\<noteq> z'", "obtain v where v [simp]: \"z' = u @ v\" \"v \\<noteq> []\""], ["proof (prove)\nusing this:\n  prefix u z'\n  u \\<noteq> z'\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>z' = u @ v; v \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: prefix_def)"], ["proof (state)\nthis:\n  z' = u @ v\n  v \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from \\<open>prefix z' z\\<close>"], ["proof (chain)\npicking this:\n  prefix z' z", "obtain w where [simp]: \"z = u @ v @ w\""], ["proof (prove)\nusing this:\n  prefix z' z\n\ngoal (1 subgoal):\n 1. (\\<And>w. z = u @ v @ w \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: prefix_def)"], ["proof (state)\nthis:\n  z = u @ v @ w\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "hence [simp]: \"Derivs (repeat i v) (Derivs u A) = Derivs u A\" for i"], ["proof (prove)\nusing this:\n  z = u @ v @ w\n\ngoal (1 subgoal):\n 1. Derivs (repeat i v) (Derivs u A) = Derivs u A", "by (induction i) (use uz' in simp_all)"], ["proof (state)\nthis:\n  Derivs (repeat ?i v) (Derivs u A) = Derivs u A\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "have \"Derivs z A = Derivs (u @ repeat i v @ w) A\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivs z A = Derivs (u @ repeat i v @ w) A", "using uz'"], ["proof (prove)\nusing this:\n  prefix u z'\n  prefix z' z\n  length z' \\<le> n\n  u \\<noteq> z'\n  Derivs z' A = Derivs u A\n\ngoal (1 subgoal):\n 1. Derivs z A = Derivs (u @ repeat i v @ w) A", "by simp"], ["proof (state)\nthis:\n  Derivs z A = Derivs (u @ repeat ?i v @ w) A\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "with \\<open>z \\<in> A\\<close> and uz'"], ["proof (chain)\npicking this:\n  z \\<in> A\n  prefix u z'\n  prefix z' z\n  length z' \\<le> n\n  u \\<noteq> z'\n  Derivs z' A = Derivs u A\n  Derivs z A = Derivs (u @ repeat ?i v @ w) A", "have \"\\<forall>i. u @ repeat i v @ w \\<in> A\""], ["proof (prove)\nusing this:\n  z \\<in> A\n  prefix u z'\n  prefix z' z\n  length z' \\<le> n\n  u \\<noteq> z'\n  Derivs z' A = Derivs u A\n  Derivs z A = Derivs (u @ repeat ?i v @ w) A\n\ngoal (1 subgoal):\n 1. \\<forall>i. u @ repeat i v @ w \\<in> A", "by (simp add: Nil_in_Derivs_iff [of _ A, symmetric])"], ["proof (state)\nthis:\n  \\<forall>i. u @ repeat i v @ w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "moreover"], ["proof (state)\nthis:\n  \\<forall>i. u @ repeat i v @ w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "have \"z = u @ v @ w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z = u @ v @ w", "by simp"], ["proof (state)\nthis:\n  z = u @ v @ w\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "moreover"], ["proof (state)\nthis:\n  z = u @ v @ w\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from \\<open>length z' \\<le> n\\<close>"], ["proof (chain)\npicking this:\n  length z' \\<le> n", "have \"length (u @ v) \\<le> n\""], ["proof (prove)\nusing this:\n  length z' \\<le> n\n\ngoal (1 subgoal):\n 1. length (u @ v) \\<le> n", "by simp"], ["proof (state)\nthis:\n  length (u @ v) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i. u @ repeat i v @ w \\<in> A\n  z = u @ v @ w\n  length (u @ v) \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i. u @ repeat i v @ w \\<in> A\n  z = u @ v @ w\n  length (u @ v) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "using \\<open>v \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. u @ repeat i v @ w \\<in> A\n  z = u @ v @ w\n  length (u @ v) \\<le> n\n  v \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "by blast"], ["proof (state)\nthis:\n  \\<exists>u v w.\n     z = u @ v @ w \\<and>\n     length (u @ v) \\<le> n \\<and>\n     v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>prefix ?u ?z'; prefix ?z' z; length ?z' \\<le> n; ?u \\<noteq> ?z';\n   Derivs ?z' A = Derivs ?u A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> A)\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "from prefix_ab"], ["proof (chain)\npicking this:\n  prefix a z\n  prefix b z", "have \"prefix a b \\<or> prefix b a\""], ["proof (prove)\nusing this:\n  prefix a z\n  prefix b z\n\ngoal (1 subgoal):\n 1. prefix a b \\<or> prefix b a", "by (rule prefix_same_cases)"], ["proof (state)\nthis:\n  prefix a b \\<or> prefix b a\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "with *[of a b] and *[of b a] and ab and prefix_ab and length_ab"], ["proof (chain)\npicking this:\n  \\<lbrakk>prefix a b; prefix b z; length b \\<le> n; a \\<noteq> b;\n   Derivs b A = Derivs a A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> A)\n  \\<lbrakk>prefix b a; prefix a z; length a \\<le> n; b \\<noteq> a;\n   Derivs a A = Derivs b A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> A)\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A\n  prefix a z\n  prefix b z\n  length a \\<le> n\n  length b \\<le> n\n  prefix a b \\<or> prefix b a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>prefix a b; prefix b z; length b \\<le> n; a \\<noteq> b;\n   Derivs b A = Derivs a A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> A)\n  \\<lbrakk>prefix b a; prefix a z; length a \\<le> n; b \\<noteq> a;\n   Derivs a A = Derivs b A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> A)\n  a \\<in> P\n  b \\<in> P\n  a \\<noteq> b\n  Derivs a A = Derivs b A\n  prefix a z\n  prefix b z\n  length a \\<le> n\n  length b \\<le> n\n  prefix a b \\<or> prefix b a\n\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v) \\<le> n \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)", "by blast"], ["proof (state)\nthis:\n  \\<exists>u v w.\n     z = u @ v @ w \\<and>\n     length (u @ v) \\<le> n \\<and>\n     v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> A)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem pumping_lemma:\n  fixes r :: \"'a :: finite rexp\"\n  obtains n where \n    \"\\<And>z. z \\<in> lang r \\<Longrightarrow> length z \\<ge> n \\<Longrightarrow> \n            \\<exists>u v w. z = u @ v @ w \\<and> length (u @ v) \\<le> n \\<and> v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>z.\n            \\<lbrakk>z \\<in> lang r; n \\<le> length z\\<rbrakk>\n            \\<Longrightarrow> \\<exists>u v w.\n                                 z = u @ v @ w \\<and>\n                                 length (u @ v) \\<le> n \\<and>\n                                 v \\<noteq> [] \\<and>\n                                 (\\<forall>i.\n                                     u @ repeat i v @ w\n                                     \\<in> lang r)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>z.\n            \\<lbrakk>z \\<in> lang r; n \\<le> length z\\<rbrakk>\n            \\<Longrightarrow> \\<exists>u v w.\n                                 z = u @ v @ w \\<and>\n                                 length (u @ v) \\<le> n \\<and>\n                                 v \\<noteq> [] \\<and>\n                                 (\\<forall>i.\n                                     u @ repeat i v @ w\n                                     \\<in> lang r)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?n = \"card (range (\\<lambda>w. Derivs w (lang r)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>z.\n            \\<lbrakk>z \\<in> lang r; n \\<le> length z\\<rbrakk>\n            \\<Longrightarrow> \\<exists>u v w.\n                                 z = u @ v @ w \\<and>\n                                 length (u @ v) \\<le> n \\<and>\n                                 v \\<noteq> [] \\<and>\n                                 (\\<forall>i.\n                                     u @ repeat i v @ w\n                                     \\<in> lang r)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>u v w. z = u @ v @ w \\<and> length (u @ v) \\<le> ?n \\<and> v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\"\n    if \"z \\<in> lang r\" and \"length z \\<ge> ?n\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u v w.\n       z = u @ v @ w \\<and>\n       length (u @ v)\n       \\<le> card (range (\\<lambda>w. Derivs w (lang r))) \\<and>\n       v \\<noteq> [] \\<and> (\\<forall>i. u @ repeat i v @ w \\<in> lang r)", "by (intro pumping_lemma_aux[of z] that regular_Derivs_finite)"], ["proof (state)\nthis:\n  \\<lbrakk>?z \\<in> lang r;\n   card (range (\\<lambda>w. Derivs w (lang r))) \\<le> length ?z\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       ?z = u @ v @ w \\<and>\n                       length (u @ v)\n                       \\<le> card\n                              (range (\\<lambda>w. Derivs w (lang r))) \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>z.\n            \\<lbrakk>z \\<in> lang r; n \\<le> length z\\<rbrakk>\n            \\<Longrightarrow> \\<exists>u v w.\n                                 z = u @ v @ w \\<and>\n                                 length (u @ v) \\<le> n \\<and>\n                                 v \\<noteq> [] \\<and>\n                                 (\\<forall>i.\n                                     u @ repeat i v @ w\n                                     \\<in> lang r)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z \\<in> lang r;\n   card (range (\\<lambda>w. Derivs w (lang r))) \\<le> length ?z\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       ?z = u @ v @ w \\<and>\n                       length (u @ v)\n                       \\<le> card\n                              (range (\\<lambda>w. Derivs w (lang r))) \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary pumping_lemma_not_regular_lang:\n  fixes A :: \"'a :: finite list set\"\n  assumes \"\\<And>n. length (z n) \\<ge> n\" and \"\\<And>n. z n \\<in> A\"\n  assumes \"\\<And>n u v w. z n = u @ v @ w \\<Longrightarrow> length (u @ v) \\<le> n \\<Longrightarrow> v \\<noteq> [] \\<Longrightarrow> \n             u @ repeat (i n u v w) v @ w \\<notin> A\"\n  shows   \"\\<not>regular_lang A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>r. lang r = A \\<Longrightarrow> False", "assume \"regular_lang A\""], ["proof (state)\nthis:\n  \\<exists>r. lang r = A\n\ngoal (1 subgoal):\n 1. \\<exists>r. lang r = A \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>r. lang r = A", "obtain r where r: \"lang r = A\""], ["proof (prove)\nusing this:\n  \\<exists>r. lang r = A\n\ngoal (1 subgoal):\n 1. (\\<And>r. lang r = A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  lang r = A\n\ngoal (1 subgoal):\n 1. \\<exists>r. lang r = A \\<Longrightarrow> False", "from pumping_lemma[of r]"], ["proof (chain)\npicking this:\n  (\\<And>n.\n      (\\<And>z.\n          \\<lbrakk>z \\<in> lang r; n \\<le> length z\\<rbrakk>\n          \\<Longrightarrow> \\<exists>u v w.\n                               z = u @ v @ w \\<and>\n                               length (u @ v) \\<le> n \\<and>\n                               v \\<noteq> [] \\<and>\n                               (\\<forall>i.\n                                   u @ repeat i v @ w\n                                   \\<in> lang r)) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis", "guess n"], ["proof (prove)\nusing this:\n  (\\<And>n.\n      (\\<And>z.\n          \\<lbrakk>z \\<in> lang r; n \\<le> length z\\<rbrakk>\n          \\<Longrightarrow> \\<exists>u v w.\n                               z = u @ v @ w \\<and>\n                               length (u @ v) \\<le> n \\<and>\n                               v \\<noteq> [] \\<and>\n                               (\\<forall>i.\n                                   u @ repeat i v @ w\n                                   \\<in> lang r)) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  \\<lbrakk>?z \\<in> lang r; n \\<le> length ?z\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       ?z = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\n\ngoal (1 subgoal):\n 1. \\<exists>r. lang r = A \\<Longrightarrow> False", "from this[of \"z n\"] and assms[of n]"], ["proof (chain)\npicking this:\n  \\<lbrakk>z n \\<in> lang r; n \\<le> length (z n)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z n = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\n  n \\<le> length (z n)\n  z n \\<in> A\n  \\<lbrakk>z n = ?u @ ?v @ ?w; length (?u @ ?v) \\<le> n;\n   ?v \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?u @ repeat (i n ?u ?v ?w) ?v @ ?w \\<notin> A", "obtain u v w \n    where \"z n = u @ v @ w\" and \"length (u @ v) \\<le> n\" and \"v \\<noteq> []\" and \n          \"\\<And>i. u @ repeat i v @ w \\<in> lang r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>z n \\<in> lang r; n \\<le> length (z n)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u v w.\n                       z n = u @ v @ w \\<and>\n                       length (u @ v) \\<le> n \\<and>\n                       v \\<noteq> [] \\<and>\n                       (\\<forall>i. u @ repeat i v @ w \\<in> lang r)\n  n \\<le> length (z n)\n  z n \\<in> A\n  \\<lbrakk>z n = ?u @ ?v @ ?w; length (?u @ ?v) \\<le> n;\n   ?v \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?u @ repeat (i n ?u ?v ?w) ?v @ ?w \\<notin> A\n\ngoal (1 subgoal):\n 1. (\\<And>u v w.\n        \\<lbrakk>z n = u @ v @ w; length (u @ v) \\<le> n; v \\<noteq> [];\n         \\<And>i. u @ repeat i v @ w \\<in> lang r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: r)"], ["proof (state)\nthis:\n  z n = u @ v @ w\n  length (u @ v) \\<le> n\n  v \\<noteq> []\n  u @ repeat ?i v @ w \\<in> lang r\n\ngoal (1 subgoal):\n 1. \\<exists>r. lang r = A \\<Longrightarrow> False", "with assms(3)[of n u v w]"], ["proof (chain)\npicking this:\n  \\<lbrakk>z n = u @ v @ w; length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> u @ repeat (i n u v w) v @ w \\<notin> A\n  z n = u @ v @ w\n  length (u @ v) \\<le> n\n  v \\<noteq> []\n  u @ repeat ?i v @ w \\<in> lang r", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>z n = u @ v @ w; length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> u @ repeat (i n u v w) v @ w \\<notin> A\n  z n = u @ v @ w\n  length (u @ v) \\<le> n\n  v \\<noteq> []\n  u @ repeat ?i v @ w \\<in> lang r\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: r)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Examples\\<close>"], ["", "text \\<open>\n  The language of all words containing the same number of $a$s and $b$s is not regular.\n\\<close>"], ["", "lemma \"\\<not>regular_lang {w. length (filter id w) = length (filter Not w)}\" (is \"\\<not>regular_lang ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. lang r = {w. length (filter id w) = length (filter Not w)}", "proof (rule not_regular_langI')"], ["proof (state)\ngoal (2 subgoals):\n 1. infinite ?B\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ?B; y \\<in> ?B; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (?f x @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)}) \\<noteq>\n                            (?f y @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)})", "show \"infinite (UNIV :: nat set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "by simp"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (?f x @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)}) \\<noteq>\n                            (?f y @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (?f x @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)}) \\<noteq>\n                            (?f y @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)})", "fix m n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (?f x @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)}) \\<noteq>\n                            (?f y @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)})", "assume \"m \\<noteq> n\""], ["proof (state)\nthis:\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (?f x @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)}) \\<noteq>\n                            (?f y @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)})", "hence \"replicate m True @ replicate m False \\<in> ?A\" and\n        \"replicate n True @ replicate m False \\<notin> ?A\""], ["proof (prove)\nusing this:\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. replicate m True @ replicate m False\n    \\<in> {w. length (filter id w) = length (filter Not w)} &&&\n    replicate n True @ replicate m False\n    \\<notin> {w. length (filter id w) = length (filter Not w)}", "by simp_all"], ["proof (state)\nthis:\n  replicate m True @ replicate m False\n  \\<in> {w. length (filter id w) = length (filter Not w)}\n  replicate n True @ replicate m False\n  \\<notin> {w. length (filter id w) = length (filter Not w)}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            (?f x @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)}) \\<noteq>\n                            (?f y @ w\n                             \\<in> {w. length (filter id w) =\n length (filter Not w)})", "thus \"\\<exists>w. \\<not>(replicate m True @ w \\<in> ?A \\<longleftrightarrow> replicate n True @ w \\<in> ?A)\""], ["proof (prove)\nusing this:\n  replicate m True @ replicate m False\n  \\<in> {w. length (filter id w) = length (filter Not w)}\n  replicate n True @ replicate m False\n  \\<notin> {w. length (filter id w) = length (filter Not w)}\n\ngoal (1 subgoal):\n 1. \\<exists>w.\n       (replicate m True @ w\n        \\<in> {w. length (filter id w) = length (filter Not w)}) \\<noteq>\n       (replicate n True @ w\n        \\<in> {w. length (filter id w) = length (filter Not w)})", "by blast"], ["proof (state)\nthis:\n  \\<exists>w.\n     (replicate m True @ w\n      \\<in> {w. length (filter id w) = length (filter Not w)}) \\<noteq>\n     (replicate n True @ w\n      \\<in> {w. length (filter id w) = length (filter Not w)})\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The language $\\{a^i b^i\\ |\\ i \\in \\mathbb{N}\\}$ is not regular.\n\\<close>"], ["", "lemma eq_replicate_iff:\n  \"xs = replicate n x \\<longleftrightarrow> set xs \\<subseteq> {x} \\<and> length xs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = replicate n x) = (set xs \\<subseteq> {x} \\<and> length xs = n)", "using replicate_length_same[of xs x]"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set xs. y = x \\<Longrightarrow>\n  replicate (length xs) x = xs\n\ngoal (1 subgoal):\n 1. (xs = replicate n x) = (set xs \\<subseteq> {x} \\<and> length xs = n)", "by (subst eq_commute) auto"], ["", "lemma replicate_eq_appendE:\n  assumes \"xs @ ys = replicate n x\"\n  obtains i j where \"n = i + j\" \"xs = replicate i x\" \"ys = replicate j x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"n = length (replicate n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = length (replicate n x)", "by simp"], ["proof (state)\nthis:\n  n = length (replicate n x)\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  n = length (replicate n x)\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note assms [symmetric]"], ["proof (state)\nthis:\n  replicate n x = xs @ ys\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  n = length (xs @ ys)", "have \"n = length xs + length ys\""], ["proof (prove)\nusing this:\n  n = length (xs @ ys)\n\ngoal (1 subgoal):\n 1. n = length xs + length ys", "by simp"], ["proof (state)\nthis:\n  n = length xs + length ys\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  n = length xs + length ys\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"xs = replicate (length xs) x\" and \"ys = replicate (length ys) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = replicate (length xs) x &&& ys = replicate (length ys) x", "using assms"], ["proof (prove)\nusing this:\n  xs @ ys = replicate n x\n\ngoal (1 subgoal):\n 1. xs = replicate (length xs) x &&& ys = replicate (length ys) x", "by (auto simp: eq_replicate_iff)"], ["proof (state)\nthis:\n  xs = replicate (length xs) x\n  ys = replicate (length ys) x\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>n = i + j; xs = replicate i x; ys = replicate j x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  n = length xs + length ys\n  xs = replicate (length xs) x\n  ys = replicate (length ys) x", "show ?thesis"], ["proof (prove)\nusing this:\n  n = length xs + length ys\n  xs = replicate (length xs) x\n  ys = replicate (length ys) x\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \"length xs\" \"length ys\"]"], ["proof (prove)\nusing this:\n  n = length xs + length ys\n  xs = replicate (length xs) x\n  ys = replicate (length ys) x\n  \\<lbrakk>n = length xs + length ys; xs = replicate (length xs) x;\n   ys = replicate (length ys) x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"\\<not>regular_lang (range (\\<lambda>i. replicate i True @ replicate i False))\" (is \"\\<not>regular_lang ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r.\n       lang r = range (\\<lambda>i. replicate i True @ replicate i False)", "proof (rule pumping_lemma_not_regular_lang)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n. n \\<le> length (?z n)\n 2. \\<And>n.\n       ?z n \\<in> range (\\<lambda>i. replicate i True @ replicate i False)\n 3. \\<And>n u v w.\n       \\<lbrakk>?z n = u @ v @ w; length (u @ v) \\<le> n;\n        v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "fix n :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n. n \\<le> length (?z n)\n 2. \\<And>n.\n       ?z n \\<in> range (\\<lambda>i. replicate i True @ replicate i False)\n 3. \\<And>n u v w.\n       \\<lbrakk>?z n = u @ v @ w; length (u @ v) \\<le> n;\n        v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "show \"length (replicate n True @ replicate n False) \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length (replicate n True @ replicate n False)", "by simp"], ["proof (state)\nthis:\n  n \\<le> length (replicate n True @ replicate n False)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       replicate n True @ replicate n False\n       \\<in> range (\\<lambda>i. replicate i True @ replicate i False)\n 2. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "show \"replicate n True @ replicate n False \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate n True @ replicate n False\n    \\<in> range (\\<lambda>i. replicate i True @ replicate i False)", "by simp"], ["proof (state)\nthis:\n  replicate n True @ replicate n False\n  \\<in> range (\\<lambda>i. replicate i True @ replicate i False)\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "fix n :: nat and u v w :: \"bool list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "assume decomp: \"replicate n True @ replicate n False = u @ v @ w\"\n     and length_le: \"length (u @ v) \\<le> n\" and v_ne: \"v \\<noteq> []\""], ["proof (state)\nthis:\n  replicate n True @ replicate n False = u @ v @ w\n  length (u @ v) \\<le> n\n  v \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "define w1 w2 where \"w1 = take (n - length (u@v)) w\" and \"w2 = drop (n - length (u@v)) w\""], ["proof (state)\nthis:\n  w1 = take (n - length (u @ v)) w\n  w2 = drop (n - length (u @ v)) w\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "have w_decomp: \"w = w1 @ w2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = w1 @ w2", "by (simp add: w1_def w2_def)"], ["proof (state)\nthis:\n  w = w1 @ w2\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "have \"replicate n True = take n (replicate n True @ replicate n False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate n True = take n (replicate n True @ replicate n False)", "by simp"], ["proof (state)\nthis:\n  replicate n True = take n (replicate n True @ replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "also"], ["proof (state)\nthis:\n  replicate n True = take n (replicate n True @ replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "note decomp"], ["proof (state)\nthis:\n  replicate n True @ replicate n False = u @ v @ w\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "also"], ["proof (state)\nthis:\n  replicate n True @ replicate n False = u @ v @ w\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "have \"take n (u @ v @ w) = u @ v @ w1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n (u @ v @ w) = u @ v @ w1", "using length_le"], ["proof (prove)\nusing this:\n  length (u @ v) \\<le> n\n\ngoal (1 subgoal):\n 1. take n (u @ v @ w) = u @ v @ w1", "by (simp add: w1_def)"], ["proof (state)\nthis:\n  take n (u @ v @ w) = u @ v @ w1\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "finally"], ["proof (chain)\npicking this:\n  replicate n True = u @ v @ w1", "have \"u @ v @ w1 = replicate n True\""], ["proof (prove)\nusing this:\n  replicate n True = u @ v @ w1\n\ngoal (1 subgoal):\n 1. u @ v @ w1 = replicate n True", "by simp"], ["proof (state)\nthis:\n  u @ v @ w1 = replicate n True\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "then"], ["proof (chain)\npicking this:\n  u @ v @ w1 = replicate n True", "obtain i j k \n    where uvw1: \"n = i + j + k\" \"u = replicate i True\" \"v = replicate j True\" \"w1 = replicate k True\""], ["proof (prove)\nusing this:\n  u @ v @ w1 = replicate n True\n\ngoal (1 subgoal):\n 1. (\\<And>i j k.\n        \\<lbrakk>n = i + j + k; u = replicate i True; v = replicate j True;\n         w1 = replicate k True\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim replicate_eq_appendE) auto"], ["proof (state)\nthis:\n  n = i + j + k\n  u = replicate i True\n  v = replicate j True\n  w1 = replicate k True\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "have \"replicate n False = drop n (replicate n True @ replicate n False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate n False = drop n (replicate n True @ replicate n False)", "by simp"], ["proof (state)\nthis:\n  replicate n False = drop n (replicate n True @ replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "also"], ["proof (state)\nthis:\n  replicate n False = drop n (replicate n True @ replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "note decomp"], ["proof (state)\nthis:\n  replicate n True @ replicate n False = u @ v @ w\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "finally"], ["proof (chain)\npicking this:\n  replicate n False = drop n (u @ v @ w)", "have [simp]: \"w2 = replicate n False\""], ["proof (prove)\nusing this:\n  replicate n False = drop n (u @ v @ w)\n\ngoal (1 subgoal):\n 1. w2 = replicate n False", "using length_le"], ["proof (prove)\nusing this:\n  replicate n False = drop n (u @ v @ w)\n  length (u @ v) \\<le> n\n\ngoal (1 subgoal):\n 1. w2 = replicate n False", "by (simp add: w2_def)"], ["proof (state)\nthis:\n  w2 = replicate n False\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "have \"u @ repeat (Suc (Suc 0)) v @ w = replicate (n + j) True @ replicate n False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @ repeat (Suc (Suc 0)) v @ w =\n    replicate (n + j) True @ replicate n False", "by (simp add: uvw1 w_decomp replicate_add [symmetric])"], ["proof (state)\nthis:\n  u @ repeat (Suc (Suc 0)) v @ w =\n  replicate (n + j) True @ replicate n False\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "also"], ["proof (state)\nthis:\n  u @ repeat (Suc (Suc 0)) v @ w =\n  replicate (n + j) True @ replicate n False\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "have \"\\<dots> \\<notin> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate (n + j) True @ replicate n False\n    \\<notin> range (\\<lambda>i. replicate i True @ replicate i False)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "assume *: \"replicate (n + j) True @ replicate n False = \n                       replicate m True @ replicate m False\" (is \"?lhs = ?rhs\")"], ["proof (state)\nthis:\n  replicate (n + j) True @ replicate n False =\n  replicate m True @ replicate m False\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "have \"n = length (filter Not ?lhs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = length (filter Not (replicate (n + j) True @ replicate n False))", "by simp"], ["proof (state)\nthis:\n  n = length (filter Not (replicate (n + j) True @ replicate n False))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  n = length (filter Not (replicate (n + j) True @ replicate n False))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "note *"], ["proof (state)\nthis:\n  replicate (n + j) True @ replicate n False =\n  replicate m True @ replicate m False\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  replicate (n + j) True @ replicate n False =\n  replicate m True @ replicate m False\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "have \"length (filter Not ?rhs) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter Not (replicate m True @ replicate m False)) = m", "by simp"], ["proof (state)\nthis:\n  length (filter Not (replicate m True @ replicate m False)) = m\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  n = m", "have [simp]: \"m = n\""], ["proof (prove)\nusing this:\n  n = m\n\ngoal (1 subgoal):\n 1. m = n", "by simp"], ["proof (state)\nthis:\n  m = n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "from *"], ["proof (chain)\npicking this:\n  replicate (n + j) True @ replicate n False =\n  replicate m True @ replicate m False", "have \"v = []\""], ["proof (prove)\nusing this:\n  replicate (n + j) True @ replicate n False =\n  replicate m True @ replicate m False\n\ngoal (1 subgoal):\n 1. v = []", "by (simp add: uvw1)"], ["proof (state)\nthis:\n  v = []\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>replicate (n + j) True @ replicate n False =\n                replicate i True @ replicate i False;\n        i \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>v \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  v \\<noteq> []\n  v = []", "show False"], ["proof (prove)\nusing this:\n  v \\<noteq> []\n  v = []\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  replicate (n + j) True @ replicate n False\n  \\<notin> range (\\<lambda>i. replicate i True @ replicate i False)\n\ngoal (1 subgoal):\n 1. \\<And>n u v w.\n       \\<lbrakk>replicate n True @ replicate n False = u @ v @ w;\n        length (u @ v) \\<le> n; v \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> u @ repeat (?i n u v w) v @ w\n                         \\<notin> range\n                                   (\\<lambda>i.\n replicate i True @ replicate i False)", "finally"], ["proof (chain)\npicking this:\n  u @ repeat (Suc (Suc 0)) v @ w\n  \\<notin> range (\\<lambda>i. replicate i True @ replicate i False)", "show \"u @ repeat (Suc (Suc 0)) v @ w \\<notin> ?A\""], ["proof (prove)\nusing this:\n  u @ repeat (Suc (Suc 0)) v @ w\n  \\<notin> range (\\<lambda>i. replicate i True @ replicate i False)\n\ngoal (1 subgoal):\n 1. u @ repeat (Suc (Suc 0)) v @ w\n    \\<notin> range (\\<lambda>i. replicate i True @ replicate i False)", "."], ["proof (state)\nthis:\n  u @ repeat (Suc (Suc 0)) v @ w\n  \\<notin> range (\\<lambda>i. replicate i True @ replicate i False)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}