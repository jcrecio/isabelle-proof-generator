{"file_name": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic/Pseudo_Term.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic", "problem_names": ["lemma out_inp_distinct[simp]:\n\"out \\<noteq> inp\" \"inp \\<noteq> out\"\n\"out \\<noteq> xx\" \"out \\<noteq> yy\" \"yy \\<noteq> out\" \"out \\<noteq> zz\" \"zz \\<noteq> out\" \"out \\<noteq> xx'\" \"xx' \\<noteq> out\"\n   \"out \\<noteq> yy'\" \"yy' \\<noteq> out\" \"out \\<noteq> zz'\" \"zz' \\<noteq> out\"\n\"inp \\<noteq> xx\" \"inp \\<noteq> yy\" \"yy \\<noteq> inp\" \"inp \\<noteq> zz\" \"zz \\<noteq> inp\" \"inp \\<noteq> xx'\" \"xx' \\<noteq> inp\"\n   \"inp \\<noteq> yy'\" \"yy' \\<noteq> inp\" \"inp \\<noteq> zz'\" \"zz' \\<noteq> inp\"", "lemma ptrm[intro,simp]: \"\\<sigma> \\<in> ptrm n \\<Longrightarrow> \\<sigma> \\<in> fmla\"", "lemma ptrm_1_Fvars[simp]: \"\\<sigma> \\<in> ptrm (Suc 0) \\<Longrightarrow> Fvars \\<sigma> = {out,inp}\"", "lemma ptrm_prv_exu: \"\\<sigma> \\<in> ptrm n \\<Longrightarrow> prv (exu out \\<sigma>)\"", "lemma ptrm_prv_exi: \"\\<sigma> \\<in> ptrm n \\<Longrightarrow> prv (exi out \\<sigma>)\"", "lemma nprv_ptrmE_exi:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> nprv (insert \\<sigma> F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow>\n \\<psi> \\<in> fmla \\<Longrightarrow> out \\<notin> Fvars \\<psi> \\<Longrightarrow> out \\<notin> \\<Union> (Fvars ` F) \\<Longrightarrow> nprv F \\<psi>\"", "lemma nprv_ptrmE_uni:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> nprv F (subst \\<sigma> t1 out) \\<Longrightarrow> nprv F (subst \\<sigma> t2 out) \\<Longrightarrow>\n nprv (insert (eql t1 t2) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t1 \\<in> trm \\<Longrightarrow> t2 \\<in> trm\n \\<Longrightarrow> nprv F \\<psi>\"", "lemma nprv_ptrmE_uni0:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> nprv F \\<sigma> \\<Longrightarrow> nprv F (subst \\<sigma> t out) \\<Longrightarrow>\n nprv (insert (eql (Var out) t) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t \\<in> trm\n \\<Longrightarrow> nprv F \\<psi>\"", "lemma nprv_ptrmE0_uni0:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> \\<sigma> \\<in> F \\<Longrightarrow> nprv F (subst \\<sigma> t out) \\<Longrightarrow>\n nprv (insert (eql (Var out) t) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t \\<in> trm\n \\<Longrightarrow> nprv F \\<psi>\"", "lemma ptrm_nprv_exi:\nassumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\nshows \"nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>\"", "lemma ptrm_nprv_exi_all:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))\"", "lemma ptrm_prv_exi_imp_all:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (exi out (cnj \\<sigma> \\<phi>)) (all out (imp \\<sigma> \\<phi>)))\"", "lemma ptrm_nprv_all_imp_exi:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))\"", "lemma ptrm_prv_all_imp_exi:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (all out (imp \\<sigma> \\<phi>)) (exi out (cnj \\<sigma> \\<phi>)))\"", "lemma instInp_fmla[simp,intro]:\nassumes \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\nshows \"instInp \\<phi> t \\<in> fmla\"", "lemma Fvars_instInp[simp,intro]:\nassumes \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\" \"Fvars \\<phi> = {inp}\"\nshows \"Fvars (instInp \\<phi> t) = FvarsT t\"", "lemma Fvars_instInp_ptrm_1[simp,intro]:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and \"t \\<in> trm\"\nshows \"Fvars (instInp \\<tau> t) = insert out (FvarsT t)\"", "lemma instInp:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and [simp]: \"t \\<in> trm\"\nand [simp]: \"FvarsT t = Variable ` {(Suc 0)..n}\"\nshows \"instInp \\<tau> t \\<in> ptrm n\"", "lemma instInp_0:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and \"t \\<in> trm\" and \"FvarsT t = {}\"\nshows \"instInp \\<tau> t \\<in> ptrm 0\"", "lemma instInp_1:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and \"t \\<in> trm\" and \"FvarsT t = {inp}\"\nshows \"instInp \\<tau> t \\<in> ptrm (Suc 0)\"", "lemma instInpP_fmla[simp, intro]:\n\tassumes \"\\<phi> \\<in> fmla\" and \"\\<tau> \\<in> fmla\"\n\tshows \"instInpP \\<phi> n \\<tau> \\<in> fmla\"", "lemma Fvars_instInpP[simp]:\nassumes \"\\<phi> \\<in> fmla\" and \\<tau>: \"\\<tau> \\<in> ptrm n\"  \"Variable (Suc (Suc n)) \\<notin> Fvars \\<phi>\"\nshows \"Fvars (instInpP \\<phi> n \\<tau>) = Fvars \\<phi> - {inp} \\<union> Variable ` {(Suc 0)..n}\"", "lemma Fvars_instInpP2[simp]:\nassumes \"\\<phi> \\<in> fmla\" and \\<tau>: \"\\<tau> \\<in> ptrm n\" and \"Fvars \\<phi> \\<subseteq> {inp}\"\nshows \"Fvars (instInpP \\<phi> n \\<tau>) = Fvars \\<phi> - {inp} \\<union> Variable ` {(Suc 0)..n}\"", "lemma instInpP1[simp,intro]:\nassumes \\<sigma>: \"\\<sigma> \\<in> ptrm (Suc 0)\" and \\<tau>: \"\\<tau> \\<in> ptrm n\"\nshows \"instInpP \\<sigma> n \\<tau> \\<in> ptrm n\"", "lemma instInp_instInpP:\nassumes \\<phi>: \"\\<phi> \\<in> fmla\" \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\"\nand \"t \\<in> trm\" and \"FvarsT t = {}\"\nshows \"instInp (instInpP \\<phi> (Suc 0) \\<tau>) t = instInpP \\<phi> 0 (instInp \\<tau> t)\"", "lemma nprv_instInpP_compose:\nassumes [simp]: \"\\<chi> \\<in> fmla\" \"Fvars \\<chi> = {inp}\"\nand \\<sigma>[simp]: \"\\<sigma> \\<in> ptrm (Suc 0)\" and \\<tau>[simp]: \"\\<tau> \\<in> ptrm 0\"\nshows \"nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n            (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\" (is ?A)\nand\n      \"nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n            (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\" (is ?B)", "lemma prv_instInpP_compose:\nassumes [simp]: \"\\<chi> \\<in> fmla\" \"Fvars \\<chi> = {inp}\"\nand \\<sigma>[simp]: \"\\<sigma> \\<in> ptrm (Suc 0)\" and \\<tau>[simp]: \"\\<tau> \\<in> ptrm 0\"\nshows \"prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n                (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\" (is ?A)\nand\n      \"prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n                (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))\" (is ?B)\nand\n      \"prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n                (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\" (is ?C)", "lemma prveqlPT_nprv_instInp_instInpP:\nassumes[simp]: \"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand [simp]: \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)\"", "lemma prveqlPT_prv_instInp_instInpP:\nassumes\"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"prv (imp (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))\"", "lemma prveqlPT_nprv_instInpP_instInp:\nassumes[simp]: \"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand [simp]: \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)\"", "lemma prveqlPT_prv_instInpP_instInp:\nassumes\"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"prv (imp (instInp \\<phi> t) (instInpP \\<phi> 0 \\<tau>))\"", "lemma prveqlPT_prv_instInp_eqv_instInpP:\nassumes\"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"prv (eqv (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))\""], "translations": [["", "lemma out_inp_distinct[simp]:\n\"out \\<noteq> inp\" \"inp \\<noteq> out\"\n\"out \\<noteq> xx\" \"out \\<noteq> yy\" \"yy \\<noteq> out\" \"out \\<noteq> zz\" \"zz \\<noteq> out\" \"out \\<noteq> xx'\" \"xx' \\<noteq> out\"\n   \"out \\<noteq> yy'\" \"yy' \\<noteq> out\" \"out \\<noteq> zz'\" \"zz' \\<noteq> out\"\n\"inp \\<noteq> xx\" \"inp \\<noteq> yy\" \"yy \\<noteq> inp\" \"inp \\<noteq> zz\" \"zz \\<noteq> inp\" \"inp \\<noteq> xx'\" \"xx' \\<noteq> inp\"\n   \"inp \\<noteq> yy'\" \"yy' \\<noteq> inp\" \"inp \\<noteq> zz'\" \"zz' \\<noteq> inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((out \\<noteq> inp &&& inp \\<noteq> out &&& out \\<noteq> xx) &&&\n      out \\<noteq> yy &&& yy \\<noteq> out &&& out \\<noteq> zz) &&&\n     (zz \\<noteq> out &&& out \\<noteq> xx' &&& xx' \\<noteq> out) &&&\n     out \\<noteq> yy' &&& yy' \\<noteq> out &&& out \\<noteq> zz') &&&\n    ((zz' \\<noteq> out &&& inp \\<noteq> xx &&& inp \\<noteq> yy) &&&\n     yy \\<noteq> inp &&& inp \\<noteq> zz &&& zz \\<noteq> inp) &&&\n    (inp \\<noteq> xx' &&& xx' \\<noteq> inp &&& inp \\<noteq> yy') &&&\n    yy' \\<noteq> inp &&& inp \\<noteq> zz' &&& zz' \\<noteq> inp", "by auto"], ["", "end"], ["", "(* context Generic_Syntax *)"], ["", "context Deduct_with_False_Disj_Rename\nbegin"], ["", "text \\<open>Pseudo-terms over the first $n+1$ variables, i.e.,\nhaving $n$ input variables (Variable $1$ to Variable $n$), and an output variable, out (which is\nan abbreviation for Variable $0$).\\<close>"], ["", "definition ptrm :: \"nat \\<Rightarrow> 'fmla set\" where\n\"ptrm n \\<equiv> {\\<sigma> \\<in> fmla . Fvars \\<sigma> = Variable ` {0..n} \\<and> prv (exu out \\<sigma>)}\""], ["", "lemma ptrm[intro,simp]: \"\\<sigma> \\<in> ptrm n \\<Longrightarrow> \\<sigma> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> ptrm n \\<Longrightarrow> \\<sigma> \\<in> fmla", "unfolding ptrm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma> \\<in> fmla.\n           Fvars \\<sigma> = Variable ` {0..n} \\<and>\n           prv (exu out \\<sigma>)} \\<Longrightarrow>\n    \\<sigma> \\<in> fmla", "by auto"], ["", "lemma ptrm_1_Fvars[simp]: \"\\<sigma> \\<in> ptrm (Suc 0) \\<Longrightarrow> Fvars \\<sigma> = {out,inp}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> ptrm (Suc 0) \\<Longrightarrow>\n    Fvars \\<sigma> = {out, inp}", "unfolding ptrm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma> \\<in> fmla.\n           Fvars \\<sigma> = Variable ` {0..Suc 0} \\<and>\n           prv (exu out \\<sigma>)} \\<Longrightarrow>\n    Fvars \\<sigma> = {out, inp}", "by auto"], ["", "lemma ptrm_prv_exu: \"\\<sigma> \\<in> ptrm n \\<Longrightarrow> prv (exu out \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> ptrm n \\<Longrightarrow> prv (exu out \\<sigma>)", "unfolding ptrm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma> \\<in> fmla.\n           Fvars \\<sigma> = Variable ` {0..n} \\<and>\n           prv (exu out \\<sigma>)} \\<Longrightarrow>\n    prv (exu out \\<sigma>)", "by auto"], ["", "lemma ptrm_prv_exi: \"\\<sigma> \\<in> ptrm n \\<Longrightarrow> prv (exi out \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> ptrm n \\<Longrightarrow> prv (exi out \\<sigma>)", "by (simp add: ptrm_prv_exu prv_exu_exi)"], ["", "lemma nprv_ptrmE_exi:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> nprv (insert \\<sigma> F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow>\n \\<psi> \\<in> fmla \\<Longrightarrow> out \\<notin> Fvars \\<psi> \\<Longrightarrow> out \\<notin> \\<Union> (Fvars ` F) \\<Longrightarrow> nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<in> ptrm n; nprv (insert \\<sigma> F) \\<psi>;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla;\n     out \\<notin> Fvars \\<psi>; out \\<notin> \\<Union> (Fvars ` F)\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "apply (frule ptrm_prv_exu, drule ptrm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "apply(rule nprv_exuE_exi[of _ out \\<sigma>])"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F (exu out \\<sigma>)\n 2. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv (insert \\<sigma> F) \\<psi>\n 3. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> F \\<subseteq> fmla\n 4. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> finite F\n 5. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> \\<in> fmla\n 6. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> out \\<in> var\n 7. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<psi> \\<in> fmla\n 8. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> out \\<notin> Fvars \\<psi>\n 9. \\<lbrakk>nprv (insert \\<sigma> F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; out \\<notin> Fvars \\<psi>;\n     out \\<notin> \\<Union> (Fvars ` F); prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> out \\<notin> \\<Union> (Fvars ` F)", "by (auto intro!: prv_nprvI)"], ["", "lemma nprv_ptrmE_uni:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> nprv F (subst \\<sigma> t1 out) \\<Longrightarrow> nprv F (subst \\<sigma> t2 out) \\<Longrightarrow>\n nprv (insert (eql t1 t2) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t1 \\<in> trm \\<Longrightarrow> t2 \\<in> trm\n \\<Longrightarrow> nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<in> ptrm n; nprv F (subst \\<sigma> t1 out);\n     nprv F (subst \\<sigma> t2 out); nprv (insert (eql t1 t2) F) \\<psi>;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla; t1 \\<in> trm;\n     t2 \\<in> trm\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "apply (frule ptrm_prv_exu, drule ptrm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "apply(rule nprv_exuE_uni[of _ out \\<sigma> t1 t2])"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F (exu out \\<sigma>)\n 2. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F (subst \\<sigma> t1 out)\n 3. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F (subst \\<sigma> t2 out)\n 4. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv (insert (eql t1 t2) F) \\<psi>\n 5. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> F \\<subseteq> fmla\n 6. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> finite F\n 7. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<psi> \\<in> fmla\n 8. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> \\<in> fmla\n 9. \\<lbrakk>nprv F (subst \\<sigma> t1 out); nprv F (subst \\<sigma> t2 out);\n     nprv (insert (eql t1 t2) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t1 \\<in> trm; t2 \\<in> trm; prv (exu out \\<sigma>);\n     \\<sigma> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> out \\<in> var\n 10. \\<lbrakk>nprv F (subst \\<sigma> t1 out);\n      nprv F (subst \\<sigma> t2 out); nprv (insert (eql t1 t2) F) \\<psi>;\n      F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla; t1 \\<in> trm;\n      t2 \\<in> trm; prv (exu out \\<sigma>); \\<sigma> \\<in> fmla\\<rbrakk>\n     \\<Longrightarrow> t1 \\<in> trm\nA total of 11 subgoals...", "by (auto intro!: prv_nprvI)"], ["", "lemma nprv_ptrmE_uni0:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> nprv F \\<sigma> \\<Longrightarrow> nprv F (subst \\<sigma> t out) \\<Longrightarrow>\n nprv (insert (eql (Var out) t) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t \\<in> trm\n \\<Longrightarrow> nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<in> ptrm n; nprv F \\<sigma>;\n     nprv F (subst \\<sigma> t out);\n     nprv (insert (eql (Var out) t) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t \\<in> trm\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "by (rule nprv_ptrmE_uni[of \\<sigma> _ _ \"Var out\" t]) auto"], ["", "lemma nprv_ptrmE0_uni0:\n\"\\<sigma> \\<in> ptrm n \\<Longrightarrow> \\<sigma> \\<in> F \\<Longrightarrow> nprv F (subst \\<sigma> t out) \\<Longrightarrow>\n nprv (insert (eql (Var out) t) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t \\<in> trm\n \\<Longrightarrow> nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<in> ptrm n; \\<sigma> \\<in> F;\n     nprv F (subst \\<sigma> t out);\n     nprv (insert (eql (Var out) t) F) \\<psi>; F \\<subseteq> fmla; finite F;\n     \\<psi> \\<in> fmla; t \\<in> trm\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "by (rule nprv_ptrmE_uni0[of \\<sigma> n _ t]) auto"], ["", "section \\<open>The $\\forall$-$\\exists$ Equivalence\\<close>"], ["", "text \\<open>There are two natural ways to state that (unique) \"output\" of a pseudo-term @{term \\<sigma>}\nsatisfies a property @{term \\<phi>}:\n(1) using $\\exists$: there exists an \"out\" such that @{term \\<sigma>} and @{term \\<phi>} hold for it;\n(2) using $\\forall$: for all \"out\" such that @{term \\<sigma>} holds for it, @{term \\<phi>} holds for it as well.\n\nWe prove the well-known fact that these two ways are equivalent. (Intuitionistic\nlogic suffice to prove that.)\\<close>"], ["", "lemma ptrm_nprv_exi:\nassumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\nshows \"nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "have [simp]: \"\\<sigma> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "using \\<sigma>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm n\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "define z where \"z \\<equiv> getFr [out] [] [\\<sigma>,\\<phi>]\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [out] [] [\\<sigma>, \\<phi>]\n\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> out\" \"z \\<notin> Fvars \\<sigma>\" \"z \\<notin> Fvars \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "using getFr_FvarsT_Fvars[of \"[out]\" \"[]\" \"[\\<sigma>,\\<phi>]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [out] [] [\\<sigma>, \\<phi>] \\<in> var \\<and>\n                    getFr [out] [] [\\<sigma>, \\<phi>]\n                    \\<notin> set [out] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     getFr [out] [] [\\<sigma>, \\<phi>]\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<phi>] \\<longrightarrow>\n                     getFr [out] [] [\\<sigma>, \\<phi>]\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [out] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<phi>] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> out\n  z \\<notin> Fvars \\<sigma>\n  z \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "have 0: \"exi out (cnj \\<sigma> \\<phi>) = exi z (subst (cnj \\<sigma> \\<phi>) (Var z) out)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exi out (cnj \\<sigma> \\<phi>) =\n    exi z (subst (cnj \\<sigma> \\<phi>) (Var z) out)", "by(rule exi_rename, auto)"], ["proof (state)\nthis:\n  exi out (cnj \\<sigma> \\<phi>) =\n  exi z (subst (cnj \\<sigma> \\<phi>) (Var z) out)\n\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi z (subst (cnj \\<sigma> \\<phi>) (Var z) out)} \\<phi>", "apply(nrule r: nprv_exiE0[of z \"subst (cnj \\<sigma> \\<phi>) (Var z) out\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>,\n      exi z (cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out))}\n     \\<phi>", "apply(nrule2 r: nprv_ptrmE0_uni0[OF \\<sigma>, of _ \"Var z\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv\n     {cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>,\n      exi z (cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out))}\n     (subst \\<sigma> (Var z) out)\n 2. nprv\n     {eql (Var out) (Var z),\n      cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>,\n      exi z (cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out))}\n     \\<phi>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>,\n      exi z (cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out))}\n     (subst \\<sigma> (Var z) out)", "by (nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var out) (Var z),\n      cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>,\n      exi z (cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out))}\n     \\<phi>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var out) (Var z),\n      cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>,\n      exi z (cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out))}\n     \\<phi>", "apply(nrule r: nprv_clear4_4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var out) (Var z),\n      cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out), \\<sigma>}\n     \\<phi>", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var out) (Var z),\n      cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out)}\n     \\<phi>", "apply (nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var z) out, subst \\<phi> (Var z) out,\n      eql (Var out) (Var z),\n      cnj (subst \\<sigma> (Var z) out) (subst \\<phi> (Var z) out)}\n     \\<phi>", "apply(nrule r: nprv_clear4_4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var z) out, subst \\<phi> (Var z) out,\n      eql (Var out) (Var z)}\n     \\<phi>", "apply(nrule r: nprv_clear3_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<phi> (Var z) out, eql (Var out) (Var z)} \\<phi>", "apply(nrule r: nprv_eql_substE012[of \"Var out\" \"Var z\" _ \\<phi> out \\<phi>])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ptrm_nprv_exi_all:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))", "have [simp]: \"\\<sigma> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "using \\<sigma>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm n\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n\ngoal (1 subgoal):\n 1. nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))", "apply(nrule r: nprv_allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi out (cnj \\<sigma> \\<phi>)} (imp \\<sigma> \\<phi>)", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, exi out (cnj \\<sigma> \\<phi>)} \\<phi>", "apply(nrule r: ptrm_nprv_exi[OF \\<sigma>])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ptrm_prv_exi_imp_all:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (exi out (cnj \\<sigma> \\<phi>)) (all out (imp \\<sigma> \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi out (cnj \\<sigma> \\<phi>))\n          (all out (imp \\<sigma> \\<phi>)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (exi out (cnj \\<sigma> \\<phi>))\n          (all out (imp \\<sigma> \\<phi>)))", "have [simp]: \"\\<sigma> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "using \\<sigma>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm n\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (exi out (cnj \\<sigma> \\<phi>))\n          (all out (imp \\<sigma> \\<phi>)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi out (cnj \\<sigma> \\<phi>))\n          (all out (imp \\<sigma> \\<phi>)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (exi out (cnj \\<sigma> \\<phi>)) (all out (imp \\<sigma> \\<phi>)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi out (cnj \\<sigma> \\<phi>)} (all out (imp \\<sigma> \\<phi>))", "apply(nrule r: ptrm_nprv_exi_all[OF \\<sigma>])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (exi out (cnj \\<sigma> \\<phi>)) (all out (imp \\<sigma> \\<phi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ptrm_nprv_all_imp_exi:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "have [simp]: \"\\<sigma> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "using \\<sigma>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm n\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "define z where \"z \\<equiv> getFr [out] [] [\\<sigma>,\\<phi>]\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [out] [] [\\<sigma>, \\<phi>]\n\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> out\" \"z \\<notin> Fvars \\<sigma>\" \"z \\<notin> Fvars \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "using getFr_FvarsT_Fvars[of \"[out]\" \"[]\" \"[\\<sigma>,\\<phi>]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [out] [] [\\<sigma>, \\<phi>] \\<in> var \\<and>\n                    getFr [out] [] [\\<sigma>, \\<phi>]\n                    \\<notin> set [out] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     getFr [out] [] [\\<sigma>, \\<phi>]\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<phi>] \\<longrightarrow>\n                     getFr [out] [] [\\<sigma>, \\<phi>]\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [out] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<phi>] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> out\n  z \\<notin> Fvars \\<sigma>\n  z \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "apply(nrule r: nprv_ptrmE_exi[OF \\<sigma>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, all out (imp \\<sigma> \\<phi>)}\n     (exi out (cnj \\<sigma> \\<phi>))", "apply(nrule r: nprv_exiI[of _ \"cnj \\<sigma> \\<phi>\" \"Var out\" out])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {\\<sigma>, all out (imp \\<sigma> \\<phi>)} (cnj \\<sigma> \\<phi>)", "apply(nrule r: nprv_allE0[of out \"imp \\<sigma> \\<phi>\" _ \"Var out\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {imp \\<sigma> \\<phi>, \\<sigma>, all out (imp \\<sigma> \\<phi>)}\n     (cnj \\<sigma> \\<phi>)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {imp \\<sigma> \\<phi>, \\<sigma>} (cnj \\<sigma> \\<phi>)", "apply(nrule r: nprv_cnjI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {imp \\<sigma> \\<phi>, \\<sigma>} \\<phi>", "apply(nrule r: nprv_impE01)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ptrm_prv_all_imp_exi:\n  assumes \\<sigma>: \"\\<sigma> \\<in> ptrm n\" and [simp]: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (all out (imp \\<sigma> \\<phi>)) (exi out (cnj \\<sigma> \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all out (imp \\<sigma> \\<phi>))\n          (exi out (cnj \\<sigma> \\<phi>)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (all out (imp \\<sigma> \\<phi>))\n          (exi out (cnj \\<sigma> \\<phi>)))", "have [simp]: \"\\<sigma> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "using \\<sigma>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm n\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> fmla", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (all out (imp \\<sigma> \\<phi>))\n          (exi out (cnj \\<sigma> \\<phi>)))", "define z where \"z \\<equiv> getFr [out] [] [\\<sigma>,\\<phi>]\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [out] [] [\\<sigma>, \\<phi>]\n\ngoal (1 subgoal):\n 1. prv (imp (all out (imp \\<sigma> \\<phi>))\n          (exi out (cnj \\<sigma> \\<phi>)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> out\" \"z \\<notin> Fvars \\<sigma>\" \"z \\<notin> Fvars \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "using getFr_FvarsT_Fvars[of \"[out]\" \"[]\" \"[\\<sigma>,\\<phi>]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [out] [] [\\<sigma>, \\<phi>] \\<in> var \\<and>\n                    getFr [out] [] [\\<sigma>, \\<phi>]\n                    \\<notin> set [out] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     getFr [out] [] [\\<sigma>, \\<phi>]\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<phi>] \\<longrightarrow>\n                     getFr [out] [] [\\<sigma>, \\<phi>]\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [out] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<phi>] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> out\n  z \\<notin> Fvars \\<sigma>\n  z \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. prv (imp (all out (imp \\<sigma> \\<phi>))\n          (exi out (cnj \\<sigma> \\<phi>)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all out (imp \\<sigma> \\<phi>))\n          (exi out (cnj \\<sigma> \\<phi>)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (all out (imp \\<sigma> \\<phi>)) (exi out (cnj \\<sigma> \\<phi>)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {all out (imp \\<sigma> \\<phi>)} (exi out (cnj \\<sigma> \\<phi>))", "apply(nrule r: ptrm_nprv_all_imp_exi[OF \\<sigma>])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (all out (imp \\<sigma> \\<phi>)) (exi out (cnj \\<sigma> \\<phi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>context @{locale Deduct_with_False_Disj_Rename }\\<close>"], ["", "section \\<open>Instantiation\\<close>"], ["", "text \\<open>We define the notion of instantiating the \"inp\" variable of a formula\n(in particular, of a pseudo-term):\n-- first with a term);\n-- then with a pseudo-term.\n\\<close>"], ["", "subsection \\<open>Instantiation with terms\\<close>"], ["", "text \\<open>Instantiation with terms is straightforward using substitution.\nIn the name of the operator, the suffix \"Inp\" is a reminder that we instantiate @{term \\<phi>}\non its variable \"inp\".\\<close>"], ["", "context Generic_Syntax\nbegin"], ["", "definition instInp :: \"'fmla \\<Rightarrow> 'trm \\<Rightarrow> 'fmla\" where\n\"instInp \\<phi> t \\<equiv> subst \\<phi> t inp\""], ["", "lemma instInp_fmla[simp,intro]:\nassumes \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\nshows \"instInp \\<phi> t \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInp \\<phi> t \\<in> fmla", "using assms instInp_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  t \\<in> trm\n  instInp ?\\<phi> ?t \\<equiv> subst ?\\<phi> ?t inp\n\ngoal (1 subgoal):\n 1. instInp \\<phi> t \\<in> fmla", "by auto"], ["", "lemma Fvars_instInp[simp,intro]:\nassumes \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\" \"Fvars \\<phi> = {inp}\"\nshows \"Fvars (instInp \\<phi> t) = FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars (instInp \\<phi> t) = FvarsT t", "using assms instInp_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  t \\<in> trm\n  Fvars \\<phi> = {inp}\n  instInp ?\\<phi> ?t \\<equiv> subst ?\\<phi> ?t inp\n\ngoal (1 subgoal):\n 1. Fvars (instInp \\<phi> t) = FvarsT t", "by auto"], ["", "end \\<comment> \\<open>context @{locale Generic_Syntax }\\<close>"], ["", "context Deduct_with_False_Disj_Rename\nbegin"], ["", "lemma Fvars_instInp_ptrm_1[simp,intro]:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and \"t \\<in> trm\"\nshows \"Fvars (instInp \\<tau> t) = insert out (FvarsT t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars (instInp \\<tau> t) = insert out (FvarsT t)", "using assms instInp_def"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  instInp ?\\<phi> ?t \\<equiv> subst ?\\<phi> ?t inp\n\ngoal (1 subgoal):\n 1. Fvars (instInp \\<tau> t) = insert out (FvarsT t)", "by auto"], ["", "lemma instInp:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and [simp]: \"t \\<in> trm\"\nand [simp]: \"FvarsT t = Variable ` {(Suc 0)..n}\"\nshows \"instInp \\<tau> t \\<in> ptrm n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "note Let_def[simp]"], ["proof (state)\nthis:\n  Let ?s ?f \\<equiv> ?f ?s\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "have [simp]: \"\\<tau> \\<in> fmla\" \"Fvars \\<tau> = {out,inp}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out, inp}", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = Variable ` {Suc 0..n}\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out, inp}", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..Suc 0} \\<and>\n         prv (exu out \\<sigma>)}\n  t \\<in> trm\n  FvarsT t = Variable ` {Suc 0..n}\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out, inp}", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<in> fmla\n  Fvars \\<tau> = {out, inp}\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "have [simp]: \"Fvars (instInp \\<tau> t) = insert out (FvarsT t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars (instInp \\<tau> t) = insert out (FvarsT t)", "using \\<tau>"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm (Suc 0)\n\ngoal (1 subgoal):\n 1. Fvars (instInp \\<tau> t) = insert out (FvarsT t)", "by (subst Fvars_instInp_ptrm_1) auto"], ["proof (state)\nthis:\n  Fvars (instInp \\<tau> t) = insert out (FvarsT t)\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "have 0: \"exu out (instInp \\<tau> t) = subst (exu out \\<tau>) t inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exu out (instInp \\<tau> t) = subst (exu out \\<tau>) t inp", "unfolding instInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. exu out (subst \\<tau> t inp) = subst (exu out \\<tau>) t inp", "by (subst subst_exu) auto"], ["proof (state)\nthis:\n  exu out (instInp \\<tau> t) = subst (exu out \\<tau>) t inp\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "have 1: \"prv (exu out \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exu out \\<tau>)", "using \\<tau>"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm (Suc 0)\n\ngoal (1 subgoal):\n 1. prv (exu out \\<tau>)", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..Suc 0} \\<and>\n         prv (exu out \\<sigma>)}\n\ngoal (1 subgoal):\n 1. prv (exu out \\<tau>)", "by auto"], ["proof (state)\nthis:\n  prv (exu out \\<tau>)\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "have \"prv (exu out (instInp \\<tau> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exu out (instInp \\<tau> t))", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (subst (exu out \\<tau>) t inp)", "by (rule prv_subst[OF _ _ _ 1], auto)"], ["proof (state)\nthis:\n  prv (exu out (instInp \\<tau> t))\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (exu out (instInp \\<tau> t))\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "using assms"], ["proof (prove)\nusing this:\n  prv (exu out (instInp \\<tau> t))\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = Variable ` {Suc 0..n}\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm n", "unfolding ptrm_def[of n]"], ["proof (prove)\nusing this:\n  prv (exu out (instInp \\<tau> t))\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = Variable ` {Suc 0..n}\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t\n    \\<in> {\\<sigma> \\<in> fmla.\n           Fvars \\<sigma> = Variable ` {0..n} \\<and> prv (exu out \\<sigma>)}", "by auto"], ["proof (state)\nthis:\n  instInp \\<tau> t \\<in> ptrm n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instInp_0:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and \"t \\<in> trm\" and \"FvarsT t = {}\"\nshows \"instInp \\<tau> t \\<in> ptrm 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm 0", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = {}\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm 0", "by (intro instInp) auto"], ["", "lemma instInp_1:\nassumes \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\" and \"t \\<in> trm\" and \"FvarsT t = {inp}\"\nshows \"instInp \\<tau> t \\<in> ptrm (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm (Suc 0)", "using assms"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = {inp}\n\ngoal (1 subgoal):\n 1. instInp \\<tau> t \\<in> ptrm (Suc 0)", "by (intro instInp) auto"], ["", "subsection \\<open>Instantiation with pseudo-terms\\<close>"], ["", "text \\<open>Instantiation of a formula @{term \\<phi>} with a pseudo-term @{term \\<tau>} yields a formula that\ncould be casually written @{term [source] \"\\<phi>(\\<tau>)\"}. It states the existence of an output @{term zz} of @{term \\<tau>} on which @{term \\<phi>} holds.\nInstead of @{term [source] \"\\<phi>(\\<tau>)\"}, we write @{term \"instInpP \\<phi> n \\<tau>\"} where @{term n} is the number of input variables of @{term \\<tau>}.\nIn the name @{term \"instInpP\"}, @{term \"Inp\"} is as before a reminder that we instantiate @{term \\<phi>} on its variable\n\"inp\" and the suffix \"P\" stands for \"Pseudo\".\\<close>"], ["", "definition instInpP :: \"'fmla \\<Rightarrow> nat \\<Rightarrow> 'fmla \\<Rightarrow> 'fmla\" where\n\"instInpP \\<phi> n \\<tau> \\<equiv> let zz = Variable (Suc (Suc n)) in\n   exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp))\""], ["", "lemma instInpP_fmla[simp, intro]:\n\tassumes \"\\<phi> \\<in> fmla\" and \"\\<tau> \\<in> fmla\"\n\tshows \"instInpP \\<phi> n \\<tau> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<phi> n \\<tau> \\<in> fmla", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<tau> \\<in> fmla\n\ngoal (1 subgoal):\n 1. instInpP \\<phi> n \\<tau> \\<in> fmla", "unfolding instInpP_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<tau> \\<in> fmla\n\ngoal (1 subgoal):\n 1. (let zz = Variable (Suc (Suc n))\n     in exi zz\n         (cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp)))\n    \\<in> fmla", "by (auto simp: Let_def)"], ["", "lemma Fvars_instInpP[simp]:\nassumes \"\\<phi> \\<in> fmla\" and \\<tau>: \"\\<tau> \\<in> ptrm n\"  \"Variable (Suc (Suc n)) \\<notin> Fvars \\<phi>\"\nshows \"Fvars (instInpP \\<phi> n \\<tau>) = Fvars \\<phi> - {inp} \\<union> Variable ` {(Suc 0)..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars (instInpP \\<phi> n \\<tau>) =\n    Fvars \\<phi> - {inp} \\<union> Variable ` {Suc 0..n}", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<tau> \\<in> ptrm n\n  Variable (Suc (Suc n)) \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. Fvars (instInpP \\<phi> n \\<tau>) =\n    Fvars \\<phi> - {inp} \\<union> Variable ` {Suc 0..n}", "unfolding instInpP_def Let_def ptrm_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..n} \\<and> prv (exu out \\<sigma>)}\n  Variable (Suc (Suc n)) \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. Fvars\n     (exi (Variable (Suc (Suc n)))\n       (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n         (subst \\<phi> (Var (Variable (Suc (Suc n)))) inp))) =\n    Fvars \\<phi> - {inp} \\<union> Variable ` {Suc 0..n}", "by auto"], ["", "lemma Fvars_instInpP2[simp]:\nassumes \"\\<phi> \\<in> fmla\" and \\<tau>: \"\\<tau> \\<in> ptrm n\" and \"Fvars \\<phi> \\<subseteq> {inp}\"\nshows \"Fvars (instInpP \\<phi> n \\<tau>) = Fvars \\<phi> - {inp} \\<union> Variable ` {(Suc 0)..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars (instInpP \\<phi> n \\<tau>) =\n    Fvars \\<phi> - {inp} \\<union> Variable ` {Suc 0..n}", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<tau> \\<in> ptrm n\n  Fvars \\<phi> \\<subseteq> {inp}\n\ngoal (1 subgoal):\n 1. Fvars (instInpP \\<phi> n \\<tau>) =\n    Fvars \\<phi> - {inp} \\<union> Variable ` {Suc 0..n}", "by (subst Fvars_instInpP) auto"], ["", "subsection \\<open>Closure and compositionality properties of instantiation\\<close>"], ["", "text \\<open>Instantiating a 1-pseudo-term with an n-pseudo-term yields an n pseudo-term:\\<close>"], ["", "(* This could be generalized, of course. *)"], ["", "lemma instInpP1[simp,intro]:\nassumes \\<sigma>: \"\\<sigma> \\<in> ptrm (Suc 0)\" and \\<tau>: \"\\<tau> \\<in> ptrm n\"\nshows \"instInpP \\<sigma> n \\<tau> \\<in> ptrm n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "note Let_def[simp]"], ["proof (state)\nthis:\n  Let ?s ?f \\<equiv> ?f ?s\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have [simp]: \"\\<sigma> \\<in> fmla\" \"\\<tau> \\<in> fmla\" \"Fvars \\<sigma> = {out,inp}\"\n   \"Fvars \\<tau> = Variable ` {0..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& \\<tau> \\<in> fmla) &&&\n    Fvars \\<sigma> = {out, inp} &&& Fvars \\<tau> = Variable ` {0..n}", "using assms"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm (Suc 0)\n  \\<tau> \\<in> ptrm n\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& \\<tau> \\<in> fmla) &&&\n    Fvars \\<sigma> = {out, inp} &&& Fvars \\<tau> = Variable ` {0..n}", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..Suc 0} \\<and>\n         prv (exu out \\<sigma>)}\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..n} \\<and> prv (exu out \\<sigma>)}\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& \\<tau> \\<in> fmla) &&&\n    Fvars \\<sigma> = {out, inp} &&& Fvars \\<tau> = Variable ` {0..n}", "by auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n  \\<tau> \\<in> fmla\n  Fvars \\<sigma> = {out, inp}\n  Fvars \\<tau> = Variable ` {0..n}\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "define zz where \"zz \\<equiv> Variable (Suc (Suc n))\""], ["proof (state)\nthis:\n  zz \\<equiv> Variable (Suc (Suc n))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have zz_facts[simp]: \"zz \\<in> var\" \"\\<And>i. i \\<le> n \\<Longrightarrow> Variable i \\<noteq> zz \\<and> zz \\<noteq> Variable i\"\n    \"out \\<noteq> zz\" \"zz \\<noteq> out\" \"inp \\<noteq> zz\" \"zz \\<noteq> inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zz \\<in> var &&&\n     (\\<And>i.\n         i \\<le> n \\<Longrightarrow>\n         Variable i \\<noteq> zz \\<and> zz \\<noteq> Variable i) &&&\n     out \\<noteq> zz) &&&\n    zz \\<noteq> out &&& inp \\<noteq> zz &&& zz \\<noteq> inp", "unfolding zz_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc n)) \\<in> var &&&\n     (\\<And>i.\n         i \\<le> n \\<Longrightarrow>\n         Variable i \\<noteq> Variable (Suc (Suc n)) \\<and>\n         Variable (Suc (Suc n)) \\<noteq> Variable i) &&&\n     out \\<noteq> Variable (Suc (Suc n))) &&&\n    Variable (Suc (Suc n)) \\<noteq> out &&&\n    inp \\<noteq> Variable (Suc (Suc n)) &&&\n    Variable (Suc (Suc n)) \\<noteq> inp", "by auto"], ["proof (state)\nthis:\n  zz \\<in> var\n  ?i \\<le> n \\<Longrightarrow>\n  Variable ?i \\<noteq> zz \\<and> zz \\<noteq> Variable ?i\n  out \\<noteq> zz\n  zz \\<noteq> out\n  inp \\<noteq> zz\n  zz \\<noteq> inp\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "define x where \"x \\<equiv> getFr [out,inp,zz] [] [\\<sigma>,\\<tau>]\""], ["proof (state)\nthis:\n  x \\<equiv> getFr [out, inp, zz] [] [\\<sigma>, \\<tau>]\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have x_facts[simp]: \"x \\<in> var\" \"x \\<noteq> out\" \"x \\<noteq> inp\"\n  \"x \\<noteq> zz\" \"zz \\<noteq> x\" \"x \\<notin> Fvars \\<sigma>\" \"x \\<notin> Fvars \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> var &&& x \\<noteq> out &&& x \\<noteq> inp) &&&\n    (x \\<noteq> zz &&& zz \\<noteq> x) &&&\n    x \\<notin> Fvars \\<sigma> &&& x \\<notin> Fvars \\<tau>", "using getFr_FvarsT_Fvars[of \"[out,inp,zz]\" \"[]\" \"[\\<sigma>,\\<tau>]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out, inp, zz] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<tau>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [out, inp, zz] [] [\\<sigma>, \\<tau>]\n                    \\<in> var \\<and>\n                    getFr [out, inp, zz] [] [\\<sigma>, \\<tau>]\n                    \\<notin> set [out, inp, zz] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     getFr [out, inp, zz] [] [\\<sigma>, \\<tau>]\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<tau>] \\<longrightarrow>\n                     getFr [out, inp, zz] [] [\\<sigma>, \\<tau>]\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> var &&& x \\<noteq> out &&& x \\<noteq> inp) &&&\n    (x \\<noteq> zz &&& zz \\<noteq> x) &&&\n    x \\<notin> Fvars \\<sigma> &&& x \\<notin> Fvars \\<tau>", "unfolding x_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out, inp, zz] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<tau>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> x \\<in> var \\<and>\n                    x \\<notin> set [out, inp, zz] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     x \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<tau>] \\<longrightarrow>\n                     x \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> var &&& x \\<noteq> out &&& x \\<noteq> inp) &&&\n    (x \\<noteq> zz &&& zz \\<noteq> x) &&&\n    x \\<notin> Fvars \\<sigma> &&& x \\<notin> Fvars \\<tau>", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<noteq> out\n  x \\<noteq> inp\n  x \\<noteq> zz\n  zz \\<noteq> x\n  x \\<notin> Fvars \\<sigma>\n  x \\<notin> Fvars \\<tau>\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have [simp]: \"x \\<noteq> Variable (Suc (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> Variable (Suc (Suc n))", "using x_facts(4) zz_def"], ["proof (prove)\nusing this:\n  x \\<noteq> zz\n  zz \\<equiv> Variable (Suc (Suc n))\n\ngoal (1 subgoal):\n 1. x \\<noteq> Variable (Suc (Suc n))", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> Variable (Suc (Suc n))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "define z where \"z \\<equiv> getFr [out,inp,zz,x] [] [\\<sigma>,\\<tau>]\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [out, inp, zz, x] [] [\\<sigma>, \\<tau>]\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> out\" \"z \\<noteq> inp\" \"z \\<noteq> x\" \"z \\<noteq> zz\" \"z \\<notin> Fvars \\<sigma>\" \"z \\<notin> Fvars \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out &&& z \\<noteq> inp) &&&\n    (z \\<noteq> x &&& z \\<noteq> zz) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<tau>", "using getFr_FvarsT_Fvars[of \"[out,inp,zz,x]\" \"[]\" \"[\\<sigma>,\\<tau>]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out, inp, zz, x] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<tau>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [out, inp, zz, x] [] [\\<sigma>, \\<tau>]\n                    \\<in> var \\<and>\n                    getFr [out, inp, zz, x] [] [\\<sigma>, \\<tau>]\n                    \\<notin> set [out, inp, zz, x] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     getFr [out, inp, zz, x] [] [\\<sigma>, \\<tau>]\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<tau>] \\<longrightarrow>\n                     getFr [out, inp, zz, x] [] [\\<sigma>, \\<tau>]\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out &&& z \\<noteq> inp) &&&\n    (z \\<noteq> x &&& z \\<noteq> zz) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<tau>", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out, inp, zz, x] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<sigma>, \\<tau>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [out, inp, zz, x] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [\\<sigma>, \\<tau>] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> out &&& z \\<noteq> inp) &&&\n    (z \\<noteq> x &&& z \\<noteq> zz) &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<tau>", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> out\n  z \\<noteq> inp\n  z \\<noteq> x\n  z \\<noteq> zz\n  z \\<notin> Fvars \\<sigma>\n  z \\<notin> Fvars \\<tau>\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have [simp]: \"\\<And>i. z = Variable i \\<Longrightarrow> \\<not> i \\<le> n\"\n   and [simp]: \"\\<And>i. x = Variable i \\<Longrightarrow> \\<not> i \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. z = Variable i \\<Longrightarrow> \\<not> i \\<le> n) &&&\n    (\\<And>i. x = Variable i \\<Longrightarrow> \\<not> i \\<le> n)", "using \\<open>Fvars \\<tau> = Variable ` {0..n}\\<close> atLeastAtMost_iff z_facts(7) x_facts(7)"], ["proof (prove)\nusing this:\n  Fvars \\<tau> = Variable ` {0..n}\n  (?i \\<in> {?l..?u}) = (?l \\<le> ?i \\<and> ?i \\<le> ?u)\n  z \\<notin> Fvars \\<tau>\n  x \\<notin> Fvars \\<tau>\n\ngoal (1 subgoal):\n 1. (\\<And>i. z = Variable i \\<Longrightarrow> \\<not> i \\<le> n) &&&\n    (\\<And>i. x = Variable i \\<Longrightarrow> \\<not> i \\<le> n)", "by blast+"], ["proof (state)\nthis:\n  z = Variable ?i \\<Longrightarrow> \\<not> ?i \\<le> n\n  x = Variable ?i \\<Longrightarrow> \\<not> ?i \\<le> n\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have [simp]: \"Fvars (instInpP \\<sigma> n \\<tau>) = Variable ` {0..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars (instInpP \\<sigma> n \\<tau>) = Variable ` {0..n}", "unfolding instInpP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fvars\n     (let zz = Variable (Suc (Suc n))\n      in exi zz\n          (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))) =\n    Variable ` {0..n}", "by auto"], ["proof (state)\nthis:\n  Fvars (instInpP \\<sigma> n \\<tau>) = Variable ` {0..n}\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have tt: \"exi out \\<tau> = exi zz (subst \\<tau> (Var zz) out)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exi out \\<tau> = exi zz (subst \\<tau> (Var zz) out)", "by (rule exi_rename) auto"], ["proof (state)\nthis:\n  exi out \\<tau> = exi zz (subst \\<tau> (Var zz) out)\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have exi_\\<sigma>: \"prv (exi out \\<sigma>)\" and exi_\\<tau>: \"prv (exi zz (subst \\<tau> (Var zz) out))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exi out \\<sigma>) &&& prv (exi zz (subst \\<tau> (Var zz) out))", "using \\<sigma> \\<tau> ptrm_prv_exi tt"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm (Suc 0)\n  \\<tau> \\<in> ptrm n\n  ?\\<sigma> \\<in> ptrm ?n \\<Longrightarrow> prv (exi out ?\\<sigma>)\n  exi out \\<tau> = exi zz (subst \\<tau> (Var zz) out)\n\ngoal (1 subgoal):\n 1. prv (exi out \\<sigma>) &&& prv (exi zz (subst \\<tau> (Var zz) out))", "by fastforce+"], ["proof (state)\nthis:\n  prv (exi out \\<sigma>)\n  prv (exi zz (subst \\<tau> (Var zz) out))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have exi_\\<sigma>: \"prv (exi out (subst \\<sigma> (Var zz) inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exi out (subst \\<sigma> (Var zz) inp))", "using prv_subst[OF _ _ _ exi_\\<sigma>, of inp \"Var zz\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>inp \\<in> var; exi out \\<sigma> \\<in> fmla;\n   Var zz \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (subst (exi out \\<sigma>) (Var zz) inp)\n\ngoal (1 subgoal):\n 1. prv (exi out (subst \\<sigma> (Var zz) inp))", "by auto"], ["proof (state)\nthis:\n  prv (exi out (subst \\<sigma> (Var zz) inp))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have exu_\\<sigma>: \"prv (exu out \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exu out \\<sigma>)", "using \\<sigma> ptrm_prv_exu"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm (Suc 0)\n  ?\\<sigma> \\<in> ptrm ?n \\<Longrightarrow> prv (exu out ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. prv (exu out \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  prv (exu out \\<sigma>)\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have exu_\\<sigma>: \"prv (exu out (subst \\<sigma> (Var zz) inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exu out (subst \\<sigma> (Var zz) inp))", "using prv_subst[OF _ _ _ exu_\\<sigma>, of inp \"Var zz\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>inp \\<in> var; exu out \\<sigma> \\<in> fmla;\n   Var zz \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (subst (exu out \\<sigma>) (Var zz) inp)\n\ngoal (1 subgoal):\n 1. prv (exu out (subst \\<sigma> (Var zz) inp))", "by auto"], ["proof (state)\nthis:\n  prv (exu out (subst \\<sigma> (Var zz) inp))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have zz_z: \"exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp)) =\n              exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp)) =\n    exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp))", "by (variousSubsts2 auto s1: exi_rename[of _ zz z] s2: subst_subst)"], ["proof (state)\nthis:\n  exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp)) =\n  exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "have 0: \"prv (exu out (instInpP \\<sigma> n \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exu out (instInpP \\<sigma> n \\<tau>))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (exu out (instInpP \\<sigma> n \\<tau>))", "apply(nrule2 r: nprv_exuI_exi[of _ _ _ x])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {} (exi out (instInpP \\<sigma> n \\<tau>))\n 2. nprv\n     {subst (instInpP \\<sigma> n \\<tau>) (Var x) out,\n      instInpP \\<sigma> n \\<tau>}\n     (eql (Var x) (Var out))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (exi out (instInpP \\<sigma> n \\<tau>))", "unfolding instInpP_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (exi out\n       (exi (Variable (Suc (Suc n)))\n         (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n           (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))))", "apply(nrule r: nprv_addImpLemmaI[OF prv_exi_commute])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (exi (Variable (Suc (Suc n)))\n       (exi out\n         (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n           (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))))", "apply(nrule r: nprv_addLemmaE[OF exi_\\<tau>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi zz (subst \\<tau> (Var zz) out)}\n     (exi (Variable (Suc (Suc n)))\n       (exi out\n         (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n           (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))))", "apply(nrule r: nprv_exiE[of _ zz \"subst \\<tau> (Var zz) out\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<tau> (Var zz) out, exi zz (subst \\<tau> (Var zz) out)}\n     (exi (Variable (Suc (Suc n)))\n       (exi out\n         (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n           (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<tau> (Var zz) out}\n     (exi (Variable (Suc (Suc n)))\n       (exi out\n         (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n           (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))))", "apply(nrule r: nprv_exiI[of _ _ \"Var zz\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<tau> (Var zz) out}\n     (exi out\n       (cnj (subst (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n              (Var zz) (Variable (Suc (Suc n))))\n         (subst \\<sigma> (Var zz) inp)))", "apply(nrule r: nprv_addLemmaE[OF exi_\\<sigma>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi out (subst \\<sigma> (Var zz) inp), subst \\<tau> (Var zz) out}\n     (exi out\n       (cnj (subst (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n              (Var zz) (Variable (Suc (Suc n))))\n         (subst \\<sigma> (Var zz) inp)))", "apply(nrule r: nprv_exiE[of _ out \"subst \\<sigma> (Var zz) inp\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var zz) inp, exi out (subst \\<sigma> (Var zz) inp),\n      subst \\<tau> (Var zz) out}\n     (exi out\n       (cnj (subst (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n              (Var zz) (Variable (Suc (Suc n))))\n         (subst \\<sigma> (Var zz) inp)))", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<sigma> (Var zz) inp, subst \\<tau> (Var zz) out}\n     (exi out\n       (cnj (subst (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n              (Var zz) (Variable (Suc (Suc n))))\n         (subst \\<sigma> (Var zz) inp)))", "apply(nrule r: nprv_exiI[of _ _ \"Var out\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<sigma> (Var zz) inp, subst \\<tau> (Var zz) out}\n     (cnj (subst (subst \\<tau> (Var (Variable (Suc (Suc n)))) out) (Var zz)\n            (Variable (Suc (Suc n))))\n       (subst \\<sigma> (Var zz) inp))", "apply(variousSubsts1 auto s1: subst_subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<sigma> (Var zz) inp, subst \\<tau> (Var zz) out}\n     (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))", "apply(nrule r: nprv_cnjI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (instInpP \\<sigma> n \\<tau>) (Var x) out,\n      instInpP \\<sigma> n \\<tau>}\n     (eql (Var x) (Var out))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (instInpP \\<sigma> n \\<tau>) (Var x) out,\n      instInpP \\<sigma> n \\<tau>}\n     (eql (Var x) (Var out))", "unfolding instInpP_def Let_def zz_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst\n       (exi zz\n         (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp)))\n       (Var x) out,\n      exi zz\n       (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_exiE0[of zz])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var zz) out)\n       (subst (subst \\<sigma> (Var zz) inp) (Var x) out),\n      exi zz\n       (cnj (subst \\<tau> (Var zz) out)\n         (subst (subst \\<sigma> (Var zz) inp) (Var x) out)),\n      exi zz\n       (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var zz) out)\n       (subst (subst \\<sigma> (Var zz) inp) (Var x) out),\n      exi zz\n       (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out,\n      cnj (subst \\<tau> (Var zz) out)\n       (subst (subst \\<sigma> (Var zz) inp) (Var x) out),\n      exi zz\n       (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear4_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out,\n      exi zz\n       (cnj (subst \\<tau> (Var zz) out) (subst \\<sigma> (Var zz) inp))}\n     (eql (Var x) (Var out))", "unfolding zz_z"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out,\n      exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp))}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_exiE0[of z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp),\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out,\n      exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp))}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear4_4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp),\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out, subst \\<sigma> (Var z) inp,\n      cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp),\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear5_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out, subst \\<sigma> (Var z) inp,\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_cut[of _ \"eql (Var z) (Var zz)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv\n     {subst \\<tau> (Var z) out, subst \\<sigma> (Var z) inp,\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var z) (Var zz))\n 2. nprv\n     {eql (Var z) (Var zz), subst \\<tau> (Var z) out,\n      subst \\<sigma> (Var z) inp, subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out, subst \\<sigma> (Var z) inp,\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var z) (Var zz))", "by (nprover3 r1: nprv_clear4_2 r2: nprv_clear3_3\n                  r3: nprv_ptrmE_uni[OF \\<tau>, of _ \"Var z\" \"Var zz\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var z) (Var zz), subst \\<tau> (Var z) out,\n      subst \\<sigma> (Var z) inp, subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var z) (Var zz), subst \\<tau> (Var z) out,\n      subst \\<sigma> (Var z) inp, subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear5_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var z) (Var zz), subst \\<sigma> (Var z) inp,\n      subst \\<tau> (Var zz) out,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear4_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var z) (Var zz), subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule2 r: nprv_eql_substE[of _ \"Var zz\" \"Var z\" \\<sigma> inp])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv\n     {eql (Var z) (Var zz), subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var zz) (Var z))\n 2. nprv\n     {subst \\<sigma> (Var zz) inp, eql (Var z) (Var zz),\n      subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var z) (Var zz), subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var zz) (Var z))", "by (nrule r: nprv_eql_symE01)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var zz) inp, eql (Var z) (Var zz),\n      subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var zz) inp, eql (Var z) (Var zz),\n      subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear4_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var zz) inp, subst \\<sigma> (Var z) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma> (Var zz) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_addLemmaE[OF exu_\\<sigma>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {exu out (subst \\<sigma> (Var zz) inp), subst \\<sigma> (Var zz) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_exuE_uni[of _ out \"subst \\<sigma> (Var zz) inp\" \"Var out\" \"Var x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var out) (Var x), exu out (subst \\<sigma> (Var zz) inp),\n      subst \\<sigma> (Var zz) inp,\n      subst (subst \\<sigma> (Var zz) inp) (Var x) out}\n     (eql (Var x) (Var out))", "apply(nrule r: nprv_eql_symE01)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (exu out (instInpP \\<sigma> n \\<tau>))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "using 0"], ["proof (prove)\nusing this:\n  prv (exu out (instInpP \\<sigma> n \\<tau>))\n\ngoal (1 subgoal):\n 1. instInpP \\<sigma> n \\<tau> \\<in> ptrm n", "unfolding ptrm_def instInpP_def Let_def"], ["proof (prove)\nusing this:\n  prv (exu out\n        (exi (Variable (Suc (Suc n)))\n          (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n            (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))))\n\ngoal (1 subgoal):\n 1. exi (Variable (Suc (Suc n)))\n     (cnj (subst \\<tau> (Var (Variable (Suc (Suc n)))) out)\n       (subst \\<sigma> (Var (Variable (Suc (Suc n)))) inp))\n    \\<in> {\\<sigma> \\<in> fmla.\n           Fvars \\<sigma> = Variable ` {0..n} \\<and> prv (exu out \\<sigma>)}", "by auto"], ["proof (state)\nthis:\n  instInpP \\<sigma> n \\<tau> \\<in> ptrm n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Term and pseudo-term instantiation compose smoothly:\\<close>"], ["", "lemma instInp_instInpP:\nassumes \\<phi>: \"\\<phi> \\<in> fmla\" \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm (Suc 0)\"\nand \"t \\<in> trm\" and \"FvarsT t = {}\"\nshows \"instInp (instInpP \\<phi> (Suc 0) \\<tau>) t = instInpP \\<phi> 0 (instInp \\<tau> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n    instInpP \\<phi> 0 (instInp \\<tau> t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n    instInpP \\<phi> 0 (instInp \\<tau> t)", "define x1 and x2 where\n   x12: \"x1 \\<equiv> Variable (Suc (Suc 0))\"\n        \"x2 \\<equiv> Variable (Suc (Suc (Suc 0)))\""], ["proof (state)\nthis:\n  x1 \\<equiv> Variable (Suc (Suc 0))\n  x2 \\<equiv> Variable (Suc (Suc (Suc 0)))\n\ngoal (1 subgoal):\n 1. instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n    instInpP \\<phi> 0 (instInp \\<tau> t)", "have x_facts[simp]: \"x1 \\<in> var\" \"x2 \\<in> var\" \"x1 \\<noteq> inp\" \"x2 \\<noteq> inp\"\n   \"x1 \\<noteq> out\" \"out \\<noteq> x1\" \"x2 \\<noteq> out\" \"out \\<noteq> x2\" \"x1 \\<noteq> x2\" \"x2 \\<noteq> x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x1 \\<in> var &&& x2 \\<in> var) &&&\n     x1 \\<noteq> inp &&& x2 \\<noteq> inp &&& x1 \\<noteq> out) &&&\n    (out \\<noteq> x1 &&& x2 \\<noteq> out) &&&\n    out \\<noteq> x2 &&& x1 \\<noteq> x2 &&& x2 \\<noteq> x1", "unfolding x12"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Variable (Suc (Suc 0)) \\<in> var &&&\n      Variable (Suc (Suc (Suc 0))) \\<in> var) &&&\n     Variable (Suc (Suc 0)) \\<noteq> inp &&&\n     Variable (Suc (Suc (Suc 0))) \\<noteq> inp &&&\n     Variable (Suc (Suc 0)) \\<noteq> out) &&&\n    (out \\<noteq> Variable (Suc (Suc 0)) &&&\n     Variable (Suc (Suc (Suc 0))) \\<noteq> out) &&&\n    out \\<noteq> Variable (Suc (Suc (Suc 0))) &&&\n    Variable (Suc (Suc 0)) \\<noteq> Variable (Suc (Suc (Suc 0))) &&&\n    Variable (Suc (Suc (Suc 0))) \\<noteq> Variable (Suc (Suc 0))", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> var\n  x2 \\<in> var\n  x1 \\<noteq> inp\n  x2 \\<noteq> inp\n  x1 \\<noteq> out\n  out \\<noteq> x1\n  x2 \\<noteq> out\n  out \\<noteq> x2\n  x1 \\<noteq> x2\n  x2 \\<noteq> x1\n\ngoal (1 subgoal):\n 1. instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n    instInpP \\<phi> 0 (instInp \\<tau> t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n    instInpP \\<phi> 0 (instInp \\<tau> t)", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  Fvars \\<phi> \\<subseteq> {inp}\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = {}\n\ngoal (1 subgoal):\n 1. instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n    instInpP \\<phi> 0 (instInp \\<tau> t)", "unfolding instInp_def instInpP_def Let_def x12[symmetric]"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  Fvars \\<phi> \\<subseteq> {inp}\n  \\<tau> \\<in> ptrm (Suc 0)\n  t \\<in> trm\n  FvarsT t = {}\n\ngoal (1 subgoal):\n 1. subst\n     (exi x2 (cnj (subst \\<tau> (Var x2) out) (subst \\<phi> (Var x2) inp)))\n     t inp =\n    exi x1\n     (cnj (subst (subst \\<tau> t inp) (Var x1) out)\n       (subst \\<phi> (Var x1) inp))", "apply(subst subst_exi)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> cnj (subst \\<tau> (Var x2) out)\n                       (subst \\<phi> (Var x2) inp)\n                      \\<in> fmla\n 2. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> t \\<in> trm\n 3. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> x2 \\<in> var\n 4. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> inp \\<in> var\n 5. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> x2 \\<noteq> inp\n 6. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> x2 \\<notin> FvarsT t\n 7. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> exi x2\n                       (subst\n                         (cnj (subst \\<tau> (Var x2) out)\n                           (subst \\<phi> (Var x2) inp))\n                         t inp) =\n                      exi x1\n                       (cnj (subst (subst \\<tau> t inp) (Var x1) out)\n                         (subst \\<phi> (Var x1) inp))", "apply(TUF simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> \\<subseteq> {inp};\n     \\<tau> \\<in> ptrm (Suc 0); t \\<in> trm; FvarsT t = {}\\<rbrakk>\n    \\<Longrightarrow> exi x2\n                       (subst\n                         (cnj (subst \\<tau> (Var x2) out)\n                           (subst \\<phi> (Var x2) inp))\n                         t inp) =\n                      exi x1\n                       (cnj (subst (subst \\<tau> t inp) (Var x1) out)\n                         (subst \\<phi> (Var x1) inp))", "apply(variousSubsts5 auto\n   s1: subst_compose_same\n   s2: subst_compose_diff\n   s3: exi_rename[of _ x1 x2]\n   s4: subst_comp\n   s5: subst_notIn[of \\<phi> _ x1]\n  )"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  instInp (instInpP \\<phi> (Suc 0) \\<tau>) t =\n  instInpP \\<phi> 0 (instInp \\<tau> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Pseudo-term instantiation also composes smoothly with itself:\\<close>"], ["", "lemma nprv_instInpP_compose:\nassumes [simp]: \"\\<chi> \\<in> fmla\" \"Fvars \\<chi> = {inp}\"\nand \\<sigma>[simp]: \"\\<sigma> \\<in> ptrm (Suc 0)\" and \\<tau>[simp]: \"\\<tau> \\<in> ptrm 0\"\nshows \"nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n            (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\" (is ?A)\nand\n      \"nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n            (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\" (is ?B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)) &&&\n    nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "define \\<chi>\\<sigma> and \\<sigma>\\<tau> where \\<chi>\\<sigma>_def: \"\\<chi>\\<sigma> \\<equiv> instInpP \\<chi> (Suc 0) \\<sigma>\" and \\<sigma>\\<tau>_def: \"\\<sigma>\\<tau> \\<equiv> instInpP \\<sigma> 0 \\<tau>\""], ["proof (state)\nthis:\n  \\<chi>\\<sigma> \\<equiv> instInpP \\<chi> (Suc 0) \\<sigma>\n  \\<sigma>\\<tau> \\<equiv> instInpP \\<sigma> 0 \\<tau>\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have [simp]: \"\\<sigma> \\<in> fmla\" \"Fvars \\<sigma> = {out,inp}\" \"\\<tau> \\<in> fmla\" \"Fvars \\<tau> = {out}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& Fvars \\<sigma> = {out, inp}) &&&\n    \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "using \\<sigma> \\<tau>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm (Suc 0)\n  \\<tau> \\<in> ptrm 0\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& Fvars \\<sigma> = {out, inp}) &&&\n    \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..Suc 0} \\<and>\n         prv (exu out \\<sigma>)}\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..0} \\<and> prv (exu out \\<sigma>)}\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& Fvars \\<sigma> = {out, inp}) &&&\n    \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "by auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n  Fvars \\<sigma> = {out, inp}\n  \\<tau> \\<in> fmla\n  Fvars \\<tau> = {out}\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<chi>\\<sigma>[simp]: \"\\<chi>\\<sigma> \\<in> fmla\" \"Fvars \\<chi>\\<sigma> = {inp}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>\\<sigma> \\<in> fmla &&& Fvars \\<chi>\\<sigma> = {inp}", "unfolding \\<chi>\\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<chi> (Suc 0) \\<sigma> \\<in> fmla &&&\n    Fvars (instInpP \\<chi> (Suc 0) \\<sigma>) = {inp}", "by auto"], ["proof (state)\nthis:\n  \\<chi>\\<sigma> \\<in> fmla\n  Fvars \\<chi>\\<sigma> = {inp}\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<sigma>\\<tau>[simp]:  \"\\<sigma>\\<tau> \\<in> ptrm 0\" \"\\<sigma>\\<tau> \\<in> fmla\" \"Fvars \\<sigma>\\<tau> = {out}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<tau> \\<in> ptrm 0 &&&\n    \\<sigma>\\<tau> \\<in> fmla &&& Fvars \\<sigma>\\<tau> = {out}", "unfolding \\<sigma>\\<tau>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<sigma> 0 \\<tau> \\<in> ptrm 0 &&&\n    instInpP \\<sigma> 0 \\<tau> \\<in> fmla &&&\n    Fvars (instInpP \\<sigma> 0 \\<tau>) = {out}", "by auto"], ["proof (state)\nthis:\n  \\<sigma>\\<tau> \\<in> ptrm 0\n  \\<sigma>\\<tau> \\<in> fmla\n  Fvars \\<sigma>\\<tau> = {out}\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "define z where \"z \\<equiv> Variable (Suc (Suc 0))\""], ["proof (state)\nthis:\n  z \\<equiv> Variable (Suc (Suc 0))\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have z_facts[simp]: \"z \\<in> var\"\n    \"out \\<noteq> z \\<and> z \\<noteq> out\" \"inp \\<noteq> z \\<and> z \\<noteq> inp\" \"z \\<notin> Fvars \\<chi>\" \"z \\<notin> Fvars \\<sigma>\" \"z \\<notin> Fvars \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&&\n     out \\<noteq> z \\<and> z \\<noteq> out &&&\n     inp \\<noteq> z \\<and> z \\<noteq> inp) &&&\n    z \\<notin> Fvars \\<chi> &&&\n    z \\<notin> Fvars \\<sigma> &&& z \\<notin> Fvars \\<tau>", "unfolding z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc 0)) \\<in> var &&&\n     out \\<noteq> Variable (Suc (Suc 0)) \\<and>\n     Variable (Suc (Suc 0)) \\<noteq> out &&&\n     inp \\<noteq> Variable (Suc (Suc 0)) \\<and>\n     Variable (Suc (Suc 0)) \\<noteq> inp) &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<chi> &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<sigma> &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<tau>", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  out \\<noteq> z \\<and> z \\<noteq> out\n  inp \\<noteq> z \\<and> z \\<noteq> inp\n  z \\<notin> Fvars \\<chi>\n  z \\<notin> Fvars \\<sigma>\n  z \\<notin> Fvars \\<tau>\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "define zz where \"zz \\<equiv> Variable (Suc (Suc (Suc 0)))\""], ["proof (state)\nthis:\n  zz \\<equiv> Variable (Suc (Suc (Suc 0)))\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have zz_facts[simp]: \"zz \\<in> var\"\n    \"out \\<noteq> zz \\<and> zz \\<noteq> out\" \"inp \\<noteq> zz \\<and> zz \\<noteq> inp\" \"z \\<noteq> zz \\<and> zz \\<noteq> z\"\n    \"zz \\<notin> Fvars \\<chi>\" \"zz \\<notin> Fvars \\<sigma>\" \"zz \\<notin> Fvars \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zz \\<in> var &&&\n     out \\<noteq> zz \\<and> zz \\<noteq> out &&&\n     inp \\<noteq> zz \\<and> zz \\<noteq> inp) &&&\n    (z \\<noteq> zz \\<and> zz \\<noteq> z &&& zz \\<notin> Fvars \\<chi>) &&&\n    zz \\<notin> Fvars \\<sigma> &&& zz \\<notin> Fvars \\<tau>", "unfolding zz_def z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc (Suc 0))) \\<in> var &&&\n     out \\<noteq> Variable (Suc (Suc (Suc 0))) \\<and>\n     Variable (Suc (Suc (Suc 0))) \\<noteq> out &&&\n     inp \\<noteq> Variable (Suc (Suc (Suc 0))) \\<and>\n     Variable (Suc (Suc (Suc 0))) \\<noteq> inp) &&&\n    (Variable (Suc (Suc 0)) \\<noteq> Variable (Suc (Suc (Suc 0))) \\<and>\n     Variable (Suc (Suc (Suc 0))) \\<noteq> Variable (Suc (Suc 0)) &&&\n     Variable (Suc (Suc (Suc 0))) \\<notin> Fvars \\<chi>) &&&\n    Variable (Suc (Suc (Suc 0))) \\<notin> Fvars \\<sigma> &&&\n    Variable (Suc (Suc (Suc 0))) \\<notin> Fvars \\<tau>", "by auto"], ["proof (state)\nthis:\n  zz \\<in> var\n  out \\<noteq> zz \\<and> zz \\<noteq> out\n  inp \\<noteq> zz \\<and> zz \\<noteq> inp\n  z \\<noteq> zz \\<and> zz \\<noteq> z\n  zz \\<notin> Fvars \\<chi>\n  zz \\<notin> Fvars \\<sigma>\n  zz \\<notin> Fvars \\<tau>\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "define z' where \"z' \\<equiv> getFr [out,inp,z,zz] [] [\\<chi>,\\<sigma>,\\<tau>]\""], ["proof (state)\nthis:\n  z' \\<equiv> getFr [out, inp, z, zz] [] [\\<chi>, \\<sigma>, \\<tau>]\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have z'_facts[simp]: \"z' \\<in> var\" \"z' \\<noteq> out\" \"z' \\<noteq> inp\" \"z' \\<noteq> z\" \"z \\<noteq> z'\" \"z' \\<noteq> zz\" \"zz \\<noteq> z'\"\n   \"z' \\<notin> Fvars \\<chi>\"\"z' \\<notin> Fvars \\<sigma>\" \"z' \\<notin> Fvars \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((z' \\<in> var &&& z' \\<noteq> out) &&&\n     z' \\<noteq> inp &&& z' \\<noteq> z &&& z \\<noteq> z') &&&\n    (z' \\<noteq> zz &&& zz \\<noteq> z') &&&\n    z' \\<notin> Fvars \\<chi> &&&\n    z' \\<notin> Fvars \\<sigma> &&& z' \\<notin> Fvars \\<tau>", "using getFr_FvarsT_Fvars[of \"[out,inp,z,zz]\" \"[]\" \"[\\<chi>,\\<sigma>,\\<tau>]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out, inp, z, zz] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<chi>, \\<sigma>, \\<tau>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [out, inp, z, zz] [] [\\<chi>, \\<sigma>, \\<tau>]\n                    \\<in> var \\<and>\n                    getFr [out, inp, z, zz] [] [\\<chi>, \\<sigma>, \\<tau>]\n                    \\<notin> set [out, inp, z, zz] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     getFr [out, inp, z, zz] [] [\\<chi>, \\<sigma>, \\<tau>]\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi>\n                     \\<in> set [\\<chi>, \\<sigma>, \\<tau>] \\<longrightarrow>\n                     getFr [out, inp, z, zz] [] [\\<chi>, \\<sigma>, \\<tau>]\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((z' \\<in> var &&& z' \\<noteq> out) &&&\n     z' \\<noteq> inp &&& z' \\<noteq> z &&& z \\<noteq> z') &&&\n    (z' \\<noteq> zz &&& zz \\<noteq> z') &&&\n    z' \\<notin> Fvars \\<chi> &&&\n    z' \\<notin> Fvars \\<sigma> &&& z' \\<notin> Fvars \\<tau>", "unfolding z'_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [out, inp, z, zz] \\<subseteq> var; set [] \\<subseteq> trm;\n   set [\\<chi>, \\<sigma>, \\<tau>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z' \\<in> var \\<and>\n                    z' \\<notin> set [out, inp, z, zz] \\<and>\n                    (?t \\<in> set [] \\<longrightarrow>\n                     z' \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi>\n                     \\<in> set [\\<chi>, \\<sigma>, \\<tau>] \\<longrightarrow>\n                     z' \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((z' \\<in> var &&& z' \\<noteq> out) &&&\n     z' \\<noteq> inp &&& z' \\<noteq> z &&& z \\<noteq> z') &&&\n    (z' \\<noteq> zz &&& zz \\<noteq> z') &&&\n    z' \\<notin> Fvars \\<chi> &&&\n    z' \\<notin> Fvars \\<sigma> &&& z' \\<notin> Fvars \\<tau>", "by auto"], ["proof (state)\nthis:\n  z' \\<in> var\n  z' \\<noteq> out\n  z' \\<noteq> inp\n  z' \\<noteq> z\n  z \\<noteq> z'\n  z' \\<noteq> zz\n  zz \\<noteq> z'\n  z' \\<notin> Fvars \\<chi>\n  z' \\<notin> Fvars \\<sigma>\n  z' \\<notin> Fvars \\<tau>\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<chi>\\<sigma>': \"instInpP \\<chi>\\<sigma> 0 \\<tau> = exi z' (cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<chi>\\<sigma> 0 \\<tau> =\n    exi z'\n     (cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp))", "unfolding instInpP_def Let_def z_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. exi z\n     (cnj (subst \\<tau> (Var z) out) (subst \\<chi>\\<sigma> (Var z) inp)) =\n    exi z'\n     (cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp))", "by (auto simp: exi_rename[of _ z z'])"], ["proof (state)\nthis:\n  instInpP \\<chi>\\<sigma> 0 \\<tau> =\n  exi z'\n   (cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp))\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<chi>\\<sigma>z': \"subst \\<chi>\\<sigma> (Var z') inp =\n    exi zz (cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp) (subst \\<chi> (Var zz) inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<chi>\\<sigma> (Var z') inp =\n    exi zz\n     (cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n       (subst \\<chi> (Var zz) inp))", "unfolding \\<chi>\\<sigma>_def instInpP_def Let_def zz_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst\n     (exi zz\n       (cnj (subst \\<sigma> (Var zz) out) (subst \\<chi> (Var zz) inp)))\n     (Var z') inp =\n    exi zz\n     (cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n       (subst \\<chi> (Var zz) inp))", "by (auto simp: subst_compose_same)"], ["proof (state)\nthis:\n  subst \\<chi>\\<sigma> (Var z') inp =\n  exi zz\n   (cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n     (subst \\<chi> (Var zz) inp))\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<sigma>\\<tau>zz: \"subst \\<sigma>\\<tau> (Var zz) out =\n     exi z (cnj (subst \\<tau> (Var z) out) (subst (subst \\<sigma> (Var zz) out) (Var z) inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<sigma>\\<tau> (Var zz) out =\n    exi z\n     (cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var zz) out) (Var z) inp))", "unfolding \\<sigma>\\<tau>_def instInpP_def Let_def z_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst\n     (exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp)))\n     (Var zz) out =\n    exi z\n     (cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var zz) out) (Var z) inp))", "by (variousSubsts2 auto s1: subst_compose_same s2: subst_compose_diff)"], ["proof (state)\nthis:\n  subst \\<sigma>\\<tau> (Var zz) out =\n  exi z\n   (cnj (subst \\<tau> (Var z) out)\n     (subst (subst \\<sigma> (Var zz) out) (Var z) inp))\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \"nprv {instInpP \\<chi>\\<sigma> 0 \\<tau>} (instInpP \\<chi> 0 \\<sigma>\\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi>\\<sigma> 0 \\<tau>}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "unfolding \\<chi>\\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {exi z'\n       (cnj (subst \\<tau> (Var z') out)\n         (subst \\<chi>\\<sigma> (Var z') inp))}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_exiE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp),\n      exi z'\n       (cnj (subst \\<tau> (Var z') out)\n         (subst \\<chi>\\<sigma> (Var z') inp))}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp)}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z') out, subst \\<chi>\\<sigma> (Var z') inp,\n      cnj (subst \\<tau> (Var z') out) (subst \\<chi>\\<sigma> (Var z') inp)}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<tau> (Var z') out, subst \\<chi>\\<sigma> (Var z') inp}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "unfolding \\<chi>\\<sigma>z'"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z') out,\n      exi zz\n       (cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n         (subst \\<chi> (Var zz) inp))}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_exiE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n       (subst \\<chi> (Var zz) inp),\n      subst \\<tau> (Var z') out,\n      exi zz\n       (cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n         (subst \\<chi> (Var zz) inp))}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n       (subst \\<chi> (Var zz) inp),\n      subst \\<tau> (Var z') out}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<chi> (Var zz) inp,\n      cnj (subst (subst \\<sigma> (Var zz) out) (Var z') inp)\n       (subst \\<chi> (Var zz) inp),\n      subst \\<tau> (Var z') out}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "apply(nrule r: nprv_clear4_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<chi> (Var zz) inp, subst \\<tau> (Var z') out}\n     (instInpP \\<chi> 0 \\<sigma>\\<tau>)", "unfolding instInpP_def Let_def z_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<chi> (Var zz) inp, subst \\<tau> (Var z') out}\n     (exi z\n       (cnj (subst \\<sigma>\\<tau> (Var z) out) (subst \\<chi> (Var z) inp)))", "apply(nrule r: nprv_exiI[of _ _ \"Var zz\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<chi> (Var zz) inp, subst \\<tau> (Var z') out}\n     (cnj (subst \\<sigma>\\<tau> (Var zz) out) (subst \\<chi> (Var zz) inp))", "apply(nrule r: nprv_cnjI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<chi> (Var zz) inp, subst \\<tau> (Var z') out}\n     (subst \\<sigma>\\<tau> (Var zz) out)", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<tau> (Var z') out}\n     (subst \\<sigma>\\<tau> (Var zz) out)", "unfolding \\<sigma>\\<tau>zz"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<tau> (Var z') out}\n     (exi z\n       (cnj (subst \\<tau> (Var z) out)\n         (subst (subst \\<sigma> (Var zz) out) (Var z) inp)))", "apply(nrule r: nprv_exiI[of _ _ \"Var z'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst (subst \\<sigma> (Var zz) out) (Var z') inp,\n      subst \\<tau> (Var z') out}\n     (cnj (subst \\<tau> (Var z') out)\n       (subst (subst \\<sigma> (Var zz) out) (Var z') inp))", "apply(nrule r: nprv_cnjI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {instInpP \\<chi>\\<sigma> 0 \\<tau>} (instInpP \\<chi> 0 \\<sigma>\\<tau>)\n\ngoal (2 subgoals):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n 2. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "thus ?A"], ["proof (prove)\nusing this:\n  nprv {instInpP \\<chi>\\<sigma> 0 \\<tau>} (instInpP \\<chi> 0 \\<sigma>\\<tau>)\n\ngoal (1 subgoal):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))", "unfolding \\<chi>\\<sigma>_def \\<sigma>\\<tau>_def"], ["proof (prove)\nusing this:\n  nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n   (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n\ngoal (1 subgoal):\n 1. nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n     (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))", "."], ["proof (state)\nthis:\n  nprv {instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>}\n   (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<chi>\\<sigma>\\<tau>: \"instInpP \\<chi> 0 \\<sigma>\\<tau> = exi z' (cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instInpP \\<chi> 0 \\<sigma>\\<tau> =\n    exi z'\n     (cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp))", "unfolding instInpP_def Let_def z_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. exi z\n     (cnj (subst \\<sigma>\\<tau> (Var z) out) (subst \\<chi> (Var z) inp)) =\n    exi z'\n     (cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp))", "by (auto simp: exi_rename[of _ z z'])"], ["proof (state)\nthis:\n  instInpP \\<chi> 0 \\<sigma>\\<tau> =\n  exi z'\n   (cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp))\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<sigma>\\<tau>z': \"subst \\<sigma>\\<tau> (Var z') out =\n   exi z (cnj (subst \\<tau> (Var z) out) (subst (subst \\<sigma> (Var z) inp) (Var z') out))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<sigma>\\<tau> (Var z') out =\n    exi z\n     (cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var z) inp) (Var z') out))", "unfolding \\<sigma>\\<tau>_def instInpP_def Let_def z_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst\n     (exi z (cnj (subst \\<tau> (Var z) out) (subst \\<sigma> (Var z) inp)))\n     (Var z') out =\n    exi z\n     (cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var z) inp) (Var z') out))", "by (auto simp: subst_compose_same)"], ["proof (state)\nthis:\n  subst \\<sigma>\\<tau> (Var z') out =\n  exi z\n   (cnj (subst \\<tau> (Var z) out)\n     (subst (subst \\<sigma> (Var z) inp) (Var z') out))\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \\<chi>\\<sigma>z: \"subst \\<chi>\\<sigma> (Var z) inp =\n    exi zz (cnj (subst (subst \\<sigma> (Var z) inp) (Var zz) out) (subst \\<chi> (Var zz) inp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<chi>\\<sigma> (Var z) inp =\n    exi zz\n     (cnj (subst (subst \\<sigma> (Var z) inp) (Var zz) out)\n       (subst \\<chi> (Var zz) inp))", "unfolding \\<chi>\\<sigma>_def instInpP_def Let_def zz_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst\n     (exi zz\n       (cnj (subst \\<sigma> (Var zz) out) (subst \\<chi> (Var zz) inp)))\n     (Var z) inp =\n    exi zz\n     (cnj (subst (subst \\<sigma> (Var z) inp) (Var zz) out)\n       (subst \\<chi> (Var zz) inp))", "by (variousSubsts2 auto s1: subst_compose_same s2: subst_compose_diff)"], ["proof (state)\nthis:\n  subst \\<chi>\\<sigma> (Var z) inp =\n  exi zz\n   (cnj (subst (subst \\<sigma> (Var z) inp) (Var zz) out)\n     (subst \\<chi> (Var zz) inp))\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "have \"nprv {instInpP \\<chi> 0 \\<sigma>\\<tau>} (instInpP \\<chi>\\<sigma> 0 \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 \\<sigma>\\<tau>}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "unfolding \\<chi>\\<sigma>\\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {exi z'\n       (cnj (subst \\<sigma>\\<tau> (Var z') out)\n         (subst \\<chi> (Var z') inp))}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_exiE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp),\n      exi z'\n       (cnj (subst \\<sigma>\\<tau> (Var z') out)\n         (subst \\<chi> (Var z') inp))}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp)}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<sigma>\\<tau> (Var z') out, subst \\<chi> (Var z') inp,\n      cnj (subst \\<sigma>\\<tau> (Var z') out) (subst \\<chi> (Var z') inp)}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<sigma>\\<tau> (Var z') out, subst \\<chi> (Var z') inp}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "unfolding \\<sigma>\\<tau>z'"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {exi z\n       (cnj (subst \\<tau> (Var z) out)\n         (subst (subst \\<sigma> (Var z) inp) (Var z') out)),\n      subst \\<chi> (Var z') inp}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_exiE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var z) inp) (Var z') out),\n      exi z\n       (cnj (subst \\<tau> (Var z) out)\n         (subst (subst \\<sigma> (Var z) inp) (Var z') out)),\n      subst \\<chi> (Var z') inp}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var z) inp) (Var z') out),\n      subst \\<chi> (Var z') inp}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      cnj (subst \\<tau> (Var z) out)\n       (subst (subst \\<sigma> (Var z) inp) (Var z') out),\n      subst \\<chi> (Var z') inp}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "apply(nrule r: nprv_clear4_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      subst \\<chi> (Var z') inp}\n     (instInpP \\<chi>\\<sigma> 0 \\<tau>)", "unfolding instInpP_def Let_def z_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      subst \\<chi> (Var z') inp}\n     (exi z\n       (cnj (subst \\<tau> (Var z) out) (subst \\<chi>\\<sigma> (Var z) inp)))", "apply(nrule r: nprv_exiI[of _ _ \"Var z\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      subst \\<chi> (Var z') inp}\n     (cnj (subst \\<tau> (Var z) out) (subst \\<chi>\\<sigma> (Var z) inp))", "apply(nrule r: nprv_cnjI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      subst \\<chi> (Var z') inp}\n     (subst \\<chi>\\<sigma> (Var z) inp)", "unfolding \\<chi>\\<sigma>z"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      subst \\<chi> (Var z') inp}\n     (exi zz\n       (cnj (subst (subst \\<sigma> (Var z) inp) (Var zz) out)\n         (subst \\<chi> (Var zz) inp)))", "apply(nrule r: nprv_exiI[of _ _ \"Var z'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var z) out,\n      subst (subst \\<sigma> (Var z) inp) (Var z') out,\n      subst \\<chi> (Var z') inp}\n     (cnj (subst (subst \\<sigma> (Var z) inp) (Var z') out)\n       (subst \\<chi> (Var z') inp))", "apply(nrule r: nprv_cnjI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {instInpP \\<chi> 0 \\<sigma>\\<tau>} (instInpP \\<chi>\\<sigma> 0 \\<tau>)\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "thus ?B"], ["proof (prove)\nusing this:\n  nprv {instInpP \\<chi> 0 \\<sigma>\\<tau>} (instInpP \\<chi>\\<sigma> 0 \\<tau>)\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "unfolding \\<chi>\\<sigma>_def \\<sigma>\\<tau>_def"], ["proof (prove)\nusing this:\n  nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n   (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n     (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)", "."], ["proof (state)\nthis:\n  nprv {instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)}\n   (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_instInpP_compose:\nassumes [simp]: \"\\<chi> \\<in> fmla\" \"Fvars \\<chi> = {inp}\"\nand \\<sigma>[simp]: \"\\<sigma> \\<in> ptrm (Suc 0)\" and \\<tau>[simp]: \"\\<tau> \\<in> ptrm 0\"\nshows \"prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n                (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\" (is ?A)\nand\n      \"prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n                (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))\" (is ?B)\nand\n      \"prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n                (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\" (is ?C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))) &&&\n    prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n          (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)) &&&\n    prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\n 2. prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n          (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))\n 3. prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))", "have [simp]: \"\\<sigma> \\<in> fmla\" \"Fvars \\<sigma> = {out,inp}\" \"\\<tau> \\<in> fmla\" \"Fvars \\<tau> = {out}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& Fvars \\<sigma> = {out, inp}) &&&\n    \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "using \\<sigma> \\<tau>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> ptrm (Suc 0)\n  \\<tau> \\<in> ptrm 0\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& Fvars \\<sigma> = {out, inp}) &&&\n    \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..Suc 0} \\<and>\n         prv (exu out \\<sigma>)}\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..0} \\<and> prv (exu out \\<sigma>)}\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> fmla &&& Fvars \\<sigma> = {out, inp}) &&&\n    \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "by auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> fmla\n  Fvars \\<sigma> = {out, inp}\n  \\<tau> \\<in> fmla\n  Fvars \\<tau> = {out}\n\ngoal (3 subgoals):\n 1. prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\n 2. prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n          (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))\n 3. prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))", "show ?A ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))) &&&\n    prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n          (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))", "by (intro nprv_prvI nprv_impI nprv_instInpP_compose, auto)+"], ["proof (state)\nthis:\n  prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n        (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\n  prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n        (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))\n\ngoal (1 subgoal):\n 1. prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))", "thus ?C"], ["proof (prove)\nusing this:\n  prv (imp (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n        (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\n  prv (imp (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>))\n        (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>))\n\ngoal (1 subgoal):\n 1. prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n          (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))", "by (intro prv_eqvI) auto"], ["proof (state)\nthis:\n  prv (eqv (instInpP (instInpP \\<chi> (Suc 0) \\<sigma>) 0 \\<tau>)\n        (instInpP \\<chi> 0 (instInpP \\<sigma> 0 \\<tau>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Equality between Pseudo-Terms and Terms\\<close>"], ["", "text \\<open>Casually, the equality between a pseudo-term @{term \\<tau>} and a term @{term t} can\nbe written as $\\vdash\\tau = t$. This is in fact the (provability of)\nthe instantiation of @{term \\<tau>} with @{term t} on @{term \\<tau>}'s output variable out. Indeed, this\nformula says that the unique entity denoted by @{term \\<tau>} is exactly @{term t}.\\<close>"], ["", "definition prveqlPT :: \"'fmla \\<Rightarrow> 'trm \\<Rightarrow> bool\" where\n\"prveqlPT \\<tau> t \\<equiv> prv (subst \\<tau> t out)\""], ["", "text \\<open>We prove that term--pseudo-term equality indeed acts like an equality,\nin that it satisfies the substitutivity principle (shown only in the\nparticular case of formula-input instantiation).\\<close>"], ["", "lemma prveqlPT_nprv_instInp_instInpP:\nassumes[simp]: \"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand [simp]: \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "have [simp]: \"\\<tau> \\<in> fmla\" \"Fvars \\<tau> = {out}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "using \\<tau>"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm 0\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..0} \\<and> prv (exu out \\<sigma>)}\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<in> fmla\n  Fvars \\<tau> = {out}\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "define zz where \"zz \\<equiv> Variable (Suc (Suc 0))\""], ["proof (state)\nthis:\n  zz \\<equiv> Variable (Suc (Suc 0))\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "have zz_facts[simp]: \"zz \\<in> var\"\n    \"out \\<noteq> zz \\<and> zz \\<noteq> out\" \"inp \\<noteq> zz \\<and> zz \\<noteq> inp\" \"zz \\<notin> Fvars \\<tau>\" \"zz \\<notin> Fvars \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zz \\<in> var &&& out \\<noteq> zz \\<and> zz \\<noteq> out) &&&\n    inp \\<noteq> zz \\<and> zz \\<noteq> inp &&&\n    zz \\<notin> Fvars \\<tau> &&& zz \\<notin> Fvars \\<phi>", "unfolding zz_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc 0)) \\<in> var &&&\n     out \\<noteq> Variable (Suc (Suc 0)) \\<and>\n     Variable (Suc (Suc 0)) \\<noteq> out) &&&\n    inp \\<noteq> Variable (Suc (Suc 0)) \\<and>\n    Variable (Suc (Suc 0)) \\<noteq> inp &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<tau> &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<phi>", "using f"], ["proof (prove)\nusing this:\n  Fvars \\<phi> \\<subseteq> {inp}\n\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc 0)) \\<in> var &&&\n     out \\<noteq> Variable (Suc (Suc 0)) \\<and>\n     Variable (Suc (Suc 0)) \\<noteq> out) &&&\n    inp \\<noteq> Variable (Suc (Suc 0)) \\<and>\n    Variable (Suc (Suc 0)) \\<noteq> inp &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<tau> &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  zz \\<in> var\n  out \\<noteq> zz \\<and> zz \\<noteq> out\n  inp \\<noteq> zz \\<and> zz \\<noteq> inp\n  zz \\<notin> Fvars \\<tau>\n  zz \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "note lemma1 = nprv_addLemmaE[OF \\<tau>t[unfolded prveqlPT_def]]"], ["proof (state)\nthis:\n  \\<lbrakk>nprv (insert (subst \\<tau> t out) ?F) ?\\<psi>;\n   subst \\<tau> t out \\<in> fmla; ?\\<psi> \\<in> fmla; ?F \\<subseteq> fmla;\n   finite ?F\\<rbrakk>\n  \\<Longrightarrow> nprv ?F ?\\<psi>\n\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)", "unfolding instInpP_def Let_def zz_def[symmetric] instInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp))}\n     (subst \\<phi> t inp)", "apply(nrule r: lemma1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> t out,\n      exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp))}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_exiE0[of zz])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp),\n      subst \\<tau> t out,\n      exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp))}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp),\n      subst \\<tau> t out}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_cnjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var zz) out, subst \\<phi> (Var zz) inp,\n      cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp),\n      subst \\<tau> t out}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_clear4_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {subst \\<tau> (Var zz) out, subst \\<phi> (Var zz) inp,\n      subst \\<tau> t out}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_ptrmE_uni[OF \\<tau>, of _ t \"Var zz\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql t (Var zz), subst \\<tau> (Var zz) out, subst \\<phi> (Var zz) inp,\n      subst \\<tau> t out}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_clear4_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (Var zz), subst \\<phi> (Var zz) inp, subst \\<tau> t out}\n     (subst \\<phi> t inp)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (Var zz), subst \\<phi> (Var zz) inp} (subst \\<phi> t inp)", "apply(nrule r: nprv_eql_substE012[of t \"Var zz\" _ \\<phi> inp])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {instInpP \\<phi> 0 \\<tau>} (instInp \\<phi> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prveqlPT_prv_instInp_instInpP:\nassumes\"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"prv (imp (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  Fvars \\<phi> \\<subseteq> {inp}\n  \\<tau> \\<in> ptrm 0\n  t \\<in> trm\n  FvarsT t = {}\n  prveqlPT \\<tau> t\n\ngoal (1 subgoal):\n 1. prv (imp (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))", "by (intro nprv_prvI nprv_impI prveqlPT_nprv_instInp_instInpP) auto"], ["", "lemma prveqlPT_nprv_instInpP_instInp:\nassumes[simp]: \"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand [simp]: \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "have [simp]: \"\\<tau> \\<in> fmla\" \"Fvars \\<tau> = {out}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "using \\<tau>"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> ptrm 0\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "unfolding ptrm_def"], ["proof (prove)\nusing this:\n  \\<tau>\n  \\<in> {\\<sigma> \\<in> fmla.\n         Fvars \\<sigma> = Variable ` {0..0} \\<and> prv (exu out \\<sigma>)}\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> fmla &&& Fvars \\<tau> = {out}", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<in> fmla\n  Fvars \\<tau> = {out}\n\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "define zz where \"zz \\<equiv> Variable (Suc (Suc 0))\""], ["proof (state)\nthis:\n  zz \\<equiv> Variable (Suc (Suc 0))\n\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "have zz_facts[simp]: \"zz \\<in> var\"\n    \"out \\<noteq> zz \\<and> zz \\<noteq> out\" \"inp \\<noteq> zz \\<and> zz \\<noteq> inp\" \"zz \\<notin> Fvars \\<tau>\" \"zz \\<notin> Fvars \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zz \\<in> var &&& out \\<noteq> zz \\<and> zz \\<noteq> out) &&&\n    inp \\<noteq> zz \\<and> zz \\<noteq> inp &&&\n    zz \\<notin> Fvars \\<tau> &&& zz \\<notin> Fvars \\<phi>", "unfolding zz_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc 0)) \\<in> var &&&\n     out \\<noteq> Variable (Suc (Suc 0)) \\<and>\n     Variable (Suc (Suc 0)) \\<noteq> out) &&&\n    inp \\<noteq> Variable (Suc (Suc 0)) \\<and>\n    Variable (Suc (Suc 0)) \\<noteq> inp &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<tau> &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<phi>", "using f"], ["proof (prove)\nusing this:\n  Fvars \\<phi> \\<subseteq> {inp}\n\ngoal (1 subgoal):\n 1. (Variable (Suc (Suc 0)) \\<in> var &&&\n     out \\<noteq> Variable (Suc (Suc 0)) \\<and>\n     Variable (Suc (Suc 0)) \\<noteq> out) &&&\n    inp \\<noteq> Variable (Suc (Suc 0)) \\<and>\n    Variable (Suc (Suc 0)) \\<noteq> inp &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<tau> &&&\n    Variable (Suc (Suc 0)) \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  zz \\<in> var\n  out \\<noteq> zz \\<and> zz \\<noteq> out\n  inp \\<noteq> zz \\<and> zz \\<noteq> inp\n  zz \\<notin> Fvars \\<tau>\n  zz \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "note lemma1 = nprv_addLemmaE[OF \\<tau>t[unfolded prveqlPT_def]]"], ["proof (state)\nthis:\n  \\<lbrakk>nprv (insert (subst \\<tau> t out) ?F) ?\\<psi>;\n   subst \\<tau> t out \\<in> fmla; ?\\<psi> \\<in> fmla; ?F \\<subseteq> fmla;\n   finite ?F\\<rbrakk>\n  \\<Longrightarrow> nprv ?F ?\\<psi>\n\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)", "unfolding instInpP_def Let_def zz_def[symmetric] instInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {subst \\<phi> t inp}\n     (exi zz (cnj (subst \\<tau> (Var zz) out) (subst \\<phi> (Var zz) inp)))", "by (nprover3 r1: lemma1 r2: nprv_exiI[of _ _ t] r3: nprv_cnjI)"], ["proof (state)\nthis:\n  nprv {instInp \\<phi> t} (instInpP \\<phi> 0 \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prveqlPT_prv_instInpP_instInp:\nassumes\"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"prv (imp (instInp \\<phi> t) (instInpP \\<phi> 0 \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (instInp \\<phi> t) (instInpP \\<phi> 0 \\<tau>))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  Fvars \\<phi> \\<subseteq> {inp}\n  \\<tau> \\<in> ptrm 0\n  t \\<in> trm\n  FvarsT t = {}\n  prveqlPT \\<tau> t\n\ngoal (1 subgoal):\n 1. prv (imp (instInp \\<phi> t) (instInpP \\<phi> 0 \\<tau>))", "by (intro nprv_prvI nprv_impI prveqlPT_nprv_instInpP_instInp) auto"], ["", "lemma prveqlPT_prv_instInp_eqv_instInpP:\nassumes\"\\<phi> \\<in> fmla\" and f: \"Fvars \\<phi> \\<subseteq> {inp}\" and \\<tau>: \"\\<tau> \\<in> ptrm 0\"\nand \"t \\<in> trm\" \"FvarsT t = {}\"\nand \\<tau>t: \"prveqlPT \\<tau> t\"\nshows \"prv (eqv (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))", "using assms prveqlPT_prv_instInp_instInpP prveqlPT_prv_instInpP_instInp"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  Fvars \\<phi> \\<subseteq> {inp}\n  \\<tau> \\<in> ptrm 0\n  t \\<in> trm\n  FvarsT t = {}\n  prveqlPT \\<tau> t\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> \\<subseteq> {inp};\n   ?\\<tau> \\<in> ptrm 0; ?t \\<in> trm; FvarsT ?t = {};\n   prveqlPT ?\\<tau> ?t\\<rbrakk>\n  \\<Longrightarrow> prv (imp (instInpP ?\\<phi> 0 ?\\<tau>)\n                          (instInp ?\\<phi> ?t))\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> \\<subseteq> {inp};\n   ?\\<tau> \\<in> ptrm 0; ?t \\<in> trm; FvarsT ?t = {};\n   prveqlPT ?\\<tau> ?t\\<rbrakk>\n  \\<Longrightarrow> prv (imp (instInp ?\\<phi> ?t)\n                          (instInpP ?\\<phi> 0 ?\\<tau>))\n\ngoal (1 subgoal):\n 1. prv (eqv (instInpP \\<phi> 0 \\<tau>) (instInp \\<phi> t))", "by (intro prv_eqvI) auto"], ["", "end \\<comment> \\<open>context @{locale Deduct_with_False_Disj_Rename}\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}