{"file_name": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic/Standard_Model.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic", "problem_names": ["lemma isTrue_neg_excl:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow>\n isTrue \\<phi> \\<Longrightarrow> isTrue (neg \\<phi>) \\<Longrightarrow> False\"", "lemma isTrue_neg_neg:\nassumes \"\\<phi> \\<in> fmla\" \"Fvars \\<phi> = {}\"\nand \"isTrue (neg (neg \\<phi>))\"\nshows \"isTrue \\<phi>\"", "lemma consistent: consistent", "lemma prv_neg_excl:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow> prv \\<phi> \\<Longrightarrow> prv (neg \\<phi>) \\<Longrightarrow> False\"", "lemma prv_imp_implies_isTrue:\nassumes [simp]: \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"Fvars \\<phi> = {}\" \"Fvars \\<chi> = {}\"\nand p: \"prv (imp \\<phi> \\<chi>)\" and i: \"isTrue \\<phi>\"\nshows \"isTrue \\<chi>\"", "lemma \\<omega>consistent: \\<omega>consistent", "lemma \\<omega>consistentStd1: \\<omega>consistentStd1", "lemma \\<omega>consistentStd2: \\<omega>consistentStd2"], "translations": [["", "lemma isTrue_neg_excl:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow>\n isTrue \\<phi> \\<Longrightarrow> isTrue (neg \\<phi>) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> = {}; isTrue \\<phi>;\n     isTrue (neg \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> False", "using isTrue_imp not_isTrue_fls"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<psi> \\<in> fmla; Fvars ?\\<phi> = {};\n   Fvars ?\\<psi> = {}; isTrue ?\\<phi>; isTrue (imp ?\\<phi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<psi>\n  \\<not> isTrue fls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> = {}; isTrue \\<phi>;\n     isTrue (neg \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding neg_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<psi> \\<in> fmla; Fvars ?\\<phi> = {};\n   Fvars ?\\<psi> = {}; isTrue ?\\<phi>; isTrue (imp ?\\<phi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<psi>\n  \\<not> isTrue fls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> = {}; isTrue \\<phi>;\n     isTrue (imp \\<phi> fls)\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "lemma isTrue_neg_neg:\nassumes \"\\<phi> \\<in> fmla\" \"Fvars \\<phi> = {}\"\nand \"isTrue (neg (neg \\<phi>))\"\nshows \"isTrue \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrue \\<phi>", "using assms isTrue_neg isTrue_neg_excl"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  Fvars \\<phi> = {}\n  isTrue (neg (neg \\<phi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<phi> \\<or> isTrue (neg ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}; isTrue ?\\<phi>;\n   isTrue (neg ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. isTrue \\<phi>", "by fastforce"], ["", "end \\<comment> \\<open>context @{locale  Minimal_Truth}\\<close>"], ["", "locale Minimal_Truth_Soundness =\nMinimal_Truth\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  isTrue\n+\nDeduct_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv\nand isTrue\n+\nassumes\n\\<comment> \\<open>We assume soundness of the provability for sentences (w.r.t. truth):\\<close>\nsound_isTrue: \"\\<And>\\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow> prv \\<phi> \\<Longrightarrow> isTrue \\<phi>\"\nbegin"], ["", "text \\<open>For sound theories, consistency is a fact rather than a hypothesis:\\<close>"], ["", "lemma consistent: consistent"], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent", "unfolding consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prv fls", "using not_isTrue_fls sound_isTrue"], ["proof (prove)\nusing this:\n  \\<not> isTrue fls\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}; prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<phi>\n\ngoal (1 subgoal):\n 1. \\<not> prv fls", "by blast"], ["", "lemma prv_neg_excl:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow> prv \\<phi> \\<Longrightarrow> prv (neg \\<phi>) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> = {}; prv \\<phi>;\n     prv (neg \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> False", "using isTrue_neg_excl[of \\<phi>] sound_isTrue"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> = {}; isTrue \\<phi>;\n   isTrue (neg \\<phi>)\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}; prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; Fvars \\<phi> = {}; prv \\<phi>;\n     prv (neg \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "lemma prv_imp_implies_isTrue:\nassumes [simp]: \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"Fvars \\<phi> = {}\" \"Fvars \\<chi> = {}\"\nand p: \"prv (imp \\<phi> \\<chi>)\" and i: \"isTrue \\<phi>\"\nshows \"isTrue \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrue \\<chi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. isTrue \\<chi>", "have \"isTrue (imp \\<phi> \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrue (imp \\<phi> \\<chi>)", "using p"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. isTrue (imp \\<phi> \\<chi>)", "by (intro sound_isTrue) auto"], ["proof (state)\nthis:\n  isTrue (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. isTrue \\<chi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  isTrue (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. isTrue \\<chi>", "using assms isTrue_imp"], ["proof (prove)\nusing this:\n  isTrue (imp \\<phi> \\<chi>)\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  Fvars \\<phi> = {}\n  Fvars \\<chi> = {}\n  prv (imp \\<phi> \\<chi>)\n  isTrue \\<phi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<psi> \\<in> fmla; Fvars ?\\<phi> = {};\n   Fvars ?\\<psi> = {}; isTrue ?\\<phi>; isTrue (imp ?\\<phi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<psi>\n\ngoal (1 subgoal):\n 1. isTrue \\<chi>", "by blast"], ["proof (state)\nthis:\n  isTrue \\<chi>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Sound theories are not only consistent, but also $\\omega$-consistent\n(in the strong, intuitionistic sense):\\<close>"], ["", "lemma \\<omega>consistent: \\<omega>consistent"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistent", "unfolding \\<omega>consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (neg (neg (exi x \\<phi>)))", "proof (safe del: notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "fix \\<phi> x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "assume 0[simp,intro]: \"\\<phi> \\<in> fmla\"  \"x \\<in> var\" and 1: \"Fvars \\<phi> = {x}\"\n  and 00: \"\\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\""], ["proof (state)\nthis:\n  \\<phi> \\<in> fmla\n  x \\<in> var\n  Fvars \\<phi> = {x}\n  \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "hence \"\\<forall>n\\<in>num. isTrue (neg (subst \\<phi> n x))\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  x \\<in> var\n  Fvars \\<phi> = {x}\n  \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>num. isTrue (neg (subst \\<phi> n x))", "using 00 1"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  x \\<in> var\n  Fvars \\<phi> = {x}\n  \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\n  \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\n  Fvars \\<phi> = {x}\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>num. isTrue (neg (subst \\<phi> n x))", "by (auto intro!: sound_isTrue)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>num. isTrue (neg (subst \\<phi> n x))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "hence \"isTrue (all x (neg \\<phi>))\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>num. isTrue (neg (subst \\<phi> n x))\n\ngoal (1 subgoal):\n 1. isTrue (all x (neg \\<phi>))", "by (simp add: \"1\" isTrue_all)"], ["proof (state)\nthis:\n  isTrue (all x (neg \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "moreover"], ["proof (state)\nthis:\n  isTrue (all x (neg \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "{"], ["proof (state)\nthis:\n  isTrue (all x (neg \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "have \"prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "using prv_all_neg_imp_neg_exi"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (all ?x (neg ?\\<phi>)) (neg (exi ?x ?\\<phi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "by blast"], ["proof (state)\nthis:\n  prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "hence \"isTrue (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\""], ["proof (prove)\nusing this:\n  prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. isTrue (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "by (simp add: \"1\" sound_isTrue)"], ["proof (state)\nthis:\n  isTrue (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "}"], ["proof (state)\nthis:\n  isTrue (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "ultimately"], ["proof (chain)\npicking this:\n  isTrue (all x (neg \\<phi>))\n  isTrue (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "have \"isTrue (neg (exi x \\<phi>))\""], ["proof (prove)\nusing this:\n  isTrue (all x (neg \\<phi>))\n  isTrue (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. isTrue (neg (exi x \\<phi>))", "by (metis 0 1 Diff_insert_absorb Fvars_all Fvars_exi Fvars_neg all\n      exi insert_absorb insert_not_empty isTrue_imp neg)"], ["proof (state)\nthis:\n  isTrue (neg (exi x \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "hence \"\\<not> isTrue (neg (neg (exi x \\<phi>)))\""], ["proof (prove)\nusing this:\n  isTrue (neg (exi x \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<not> isTrue (neg (neg (exi x \\<phi>)))", "using 1 isTrue_neg_excl"], ["proof (prove)\nusing this:\n  isTrue (neg (exi x \\<phi>))\n  Fvars \\<phi> = {x}\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}; isTrue ?\\<phi>;\n   isTrue (neg ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> isTrue (neg (neg (exi x \\<phi>)))", "by force"], ["proof (state)\nthis:\n  \\<not> isTrue (neg (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))\\<rbrakk>\n       \\<Longrightarrow> \\<not> prv (neg (neg (exi x \\<phi>)))", "thus \"\\<not> prv (neg (neg (exi x \\<phi>)))\""], ["proof (prove)\nusing this:\n  \\<not> isTrue (neg (neg (exi x \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<not> prv (neg (neg (exi x \\<phi>)))", "using \"1\" sound_isTrue"], ["proof (prove)\nusing this:\n  \\<not> isTrue (neg (neg (exi x \\<phi>)))\n  Fvars \\<phi> = {x}\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}; prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> isTrue ?\\<phi>\n\ngoal (1 subgoal):\n 1. \\<not> prv (neg (neg (exi x \\<phi>)))", "by auto"], ["proof (state)\nthis:\n  \\<not> prv (neg (neg (exi x \\<phi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<omega>consistentStd1: \\<omega>consistentStd1"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistentStd1", "using \\<omega>consistent \\<omega>consistent_impliesStd1"], ["proof (prove)\nusing this:\n  \\<omega>consistent\n  \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd1\n\ngoal (1 subgoal):\n 1. \\<omega>consistentStd1", "by blast"], ["", "lemma \\<omega>consistentStd2: \\<omega>consistentStd2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistentStd2", "using \\<omega>consistent \\<omega>consistent_impliesStd2"], ["proof (prove)\nusing this:\n  \\<omega>consistent\n  \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd2\n\ngoal (1 subgoal):\n 1. \\<omega>consistentStd2", "by blast"], ["", "end \\<comment> \\<open>context @{locale Minimal_Truth_Soundness}\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}