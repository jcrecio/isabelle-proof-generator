{"file_name": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic/Deduction_Q.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic", "problem_names": ["lemma nprv_ballI:\n\"nprv (insert (LLq (Var x) t) F) \\<phi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> trm \\<Longrightarrow> x \\<in> var \\<Longrightarrow>\n x \\<notin> (\\<Union>\\<phi> \\<in> F. Fvars \\<phi>) \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F (ball x t \\<phi>)\"", "lemma nprv_ballE_aux:\n\"nprv F (ball x t \\<phi>) \\<Longrightarrow> nprv F (LLq t1 t) \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> x \\<in> var \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F (subst \\<phi> t1 x)\"", "lemma nprv_ballE:\n\"nprv F (ball x t \\<phi>) \\<Longrightarrow> nprv F (LLq t1 t) \\<Longrightarrow> nprv (insert (subst \\<phi> t1 x) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> x \\<in> var \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\n x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F \\<psi>\"", "lemmas nprv_ballE0 = nprv_ballE[OF nprv_hyp _ _, simped]", "lemmas nprv_ballE1 = nprv_ballE[OF _ nprv_hyp _, simped]", "lemmas nprv_ballE2 = nprv_ballE[OF _ _ nprv_hyp, simped]", "lemmas nprv_ballE01 = nprv_ballE[OF nprv_hyp nprv_hyp _, simped]", "lemmas nprv_ballE02 = nprv_ballE[OF nprv_hyp _ nprv_hyp, simped]", "lemmas nprv_ballE12 = nprv_ballE[OF _ nprv_hyp nprv_hyp, simped]", "lemmas nprv_ballE012 = nprv_ballE[OF nprv_hyp nprv_hyp nprv_hyp, simped]", "lemma nprv_bexiI:\n\"nprv F (subst \\<phi> t1 x) \\<Longrightarrow> nprv F (LLq t1 t) \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> x \\<in> var \\<Longrightarrow>\n x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F (bexi x t \\<phi>)\"", "lemma nprv_bexiE:\n\"nprv F (bexi x t \\<phi>) \\<Longrightarrow> nprv (insert (LLq (Var x) t) (insert \\<phi> F)) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> x \\<in> var \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow>\n x \\<notin> (\\<Union>\\<phi> \\<in> F. Fvars \\<phi>) \\<Longrightarrow> x \\<notin> Fvars \\<psi> \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F \\<psi>\"", "lemmas nprv_bexiE0 = nprv_bexiE[OF nprv_hyp _, simped]", "lemmas nprv_bexiE1 = nprv_bexiE[OF _ nprv_hyp, simped]", "lemmas nprv_bexiE01 = nprv_bexiE[OF nprv_hyp nprv_hyp, simped]", "lemma nprv_allI_var:\nassumes n1[simp]: \"nprv F (subst \\<phi> (Var y) x)\"\nand i[simp]: \"F \\<subseteq> fmla\" \"finite F\" \"\\<phi> \\<in> fmla\"  \"x \\<in> var\"  \"y \\<in> var\"\nand u: \"y \\<notin> (\\<Union>\\<phi> \\<in> F. Fvars \\<phi>)\" and yx[simp]: \"y = x \\<or> y \\<notin> Fvars \\<phi>\"\nshows \"nprv F (all x \\<phi>)\"", "lemma nprv_exiE_var:\nassumes n: \"nprv F (exi x \\<phi>)\"\nand nn: \"nprv (insert (subst \\<phi> (Var y) x) F) \\<psi>\"\nand 0: \"F \\<subseteq> fmla\" \"finite F\" \"\\<phi> \\<in> fmla\" \"x \\<in> var\" \"y \\<in> var\" \"\\<psi> \\<in> fmla\"\nand yx: \"y = x \\<or> y \\<notin> Fvars \\<phi>\" \"y \\<notin> \\<Union> (Fvars ` F)\" \"y \\<notin> Fvars \\<psi>\"\nshows \"nprv F \\<psi>\"", "lemma prv_neg_zer_suc:\nassumes [simp]: \"t \\<in> atrm\" shows \"prv (neg (eql zer (suc t)))\"", "lemma prv_neg_suc_zer:\nassumes \"t \\<in> atrm\" shows \"prv (neg (eql (suc t) zer))\"", "lemmas nprv_zer_suc_contrE =\n nprv_flsE[OF nprv_addImpLemmaE[OF prv_neg_zer_suc[unfolded neg_def]], OF _ _ nprv_hyp, simped, rotated]", "lemmas nprv_zer_suc_contrE0 = nprv_zer_suc_contrE[OF nprv_hyp, simped]", "lemma nprv_zer_suc_2contrE:\n\"nprv F (eql t zer) \\<Longrightarrow> nprv F (eql t (suc t1)) \\<Longrightarrow>\n finite F \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow>\n nprv F \\<phi>\"", "lemmas nprv_zer_suc_2contrE0 = nprv_zer_suc_2contrE[OF nprv_hyp _, simped]", "lemmas nprv_zer_suc_2contrE1 = nprv_zer_suc_2contrE[OF _ nprv_hyp, simped]", "lemmas nprv_zer_suc_2contrE01 = nprv_zer_suc_2contrE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_inj_suc:\n\"t \\<in> atrm \\<Longrightarrow> t' \\<in> atrm \\<Longrightarrow>\n prv (imp (eql (suc t) (suc t'))\n          (eql t t'))\"", "lemmas nprv_eql_sucI = nprv_addImpLemmaI[OF prv_inj_suc, simped, rotated 4]", "lemmas nprv_eql_sucE = nprv_addImpLemmaE[OF prv_inj_suc, simped, rotated 2]", "lemmas nprv_eql_sucE0 = nprv_eql_sucE[OF nprv_hyp _, simped]", "lemmas nprv_eql_sucE1 = nprv_eql_sucE[OF _ nprv_hyp, simped]", "lemmas nprv_eql_sucE01 = nprv_eql_sucE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_zer_dsj_suc:\nassumes t[simp]: \"t \\<in> atrm\" and x[simp]: \"x \\<in> var\" \"x \\<notin> FvarsT t\"\nshows \"prv (dsj (eql t zer)\n           (exi x (eql t (suc (Var x)))))\"", "lemma nprv_zer_suc_casesE:\n\"nprv (insert (eql t zer) F) \\<phi> \\<Longrightarrow> nprv (insert (eql t (suc (Var x))) F) \\<phi> \\<Longrightarrow>\n finite F \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> x \\<in> var \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow>\n x \\<notin> Fvars \\<phi> \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow> x \\<notin> \\<Union> (Fvars ` F) \\<Longrightarrow>\n nprv F \\<phi>\"", "lemmas nprv_zer_suc_casesE0 = nprv_zer_suc_casesE[OF nprv_hyp _, simped]", "lemmas nprv_zer_suc_casesE1 = nprv_zer_suc_casesE[OF _ nprv_hyp, simped]", "lemmas nprv_zer_suc_casesE01 = nprv_zer_suc_casesE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_pls_zer:\nassumes [simp]: \"t \\<in> atrm\" shows \"prv (eql (pls t zer) t)\"", "lemma prv_pls_suc:\n\"t \\<in> atrm \\<Longrightarrow> t' \\<in> atrm \\<Longrightarrow>\n prv (eql (pls t (suc t'))\n          (suc (pls t t')))\"", "lemma prv_tms_zer:\nassumes [simp]: \"t \\<in> atrm\" shows \"prv (eql (tms t zer) zer)\"", "lemma prv_tms_suc:\n\"t \\<in> atrm \\<Longrightarrow> t' \\<in> atrm \\<Longrightarrow>\n prv (eql (tms t (suc t'))\n          (pls (tms t t') t))\"", "lemma prv_suc_imp_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t2[simp]: \"t2 \\<in> atrm\"\nshows \"prv (imp (eql t1 t2)\n                (eql (suc t1) (suc t2)))\"", "lemmas nprv_suc_congI = nprv_addImpLemmaI[OF prv_suc_imp_cong, simped, rotated 4]", "lemmas nprv_suc_congE = nprv_addImpLemmaE[OF prv_suc_imp_cong, simped, rotated 2]", "lemmas nprv_suc_congE0 = nprv_suc_congE[OF nprv_hyp _, simped]", "lemmas nprv_suc_congE1 = nprv_suc_congE[OF _ nprv_hyp, simped]", "lemmas nprv_suc_congE01 = nprv_suc_congE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_suc_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t2[simp]: \"t2 \\<in> atrm\"\nassumes \"prv (eql t1 t2)\"\nshows \"prv (eql (suc t1) (suc t2))\"", "lemma prv_pls_imp_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t1'[simp]: \"t1' \\<in> atrm\"\nand t2[simp]: \"t2 \\<in> atrm\" and t2'[simp]: \"t2' \\<in> atrm\"\nshows \"prv (imp (eql t1 t1')\n                (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))\"", "lemmas nprv_pls_congI = nprv_addImp2LemmaI[OF prv_pls_imp_cong, simped, rotated 6]", "lemmas nprv_pls_congE = nprv_addImp2LemmaE[OF prv_pls_imp_cong, simped, rotated 4]", "lemmas nprv_pls_congE0 = nprv_pls_congE[OF nprv_hyp _ _, simped]", "lemmas nprv_pls_congE1 = nprv_pls_congE[OF _ nprv_hyp _, simped]", "lemmas nprv_pls_congE2 = nprv_pls_congE[OF _ _ nprv_hyp, simped]", "lemmas nprv_pls_congE01 = nprv_pls_congE[OF nprv_hyp nprv_hyp _, simped]", "lemmas nprv_pls_congE02 = nprv_pls_congE[OF nprv_hyp _ nprv_hyp, simped]", "lemmas nprv_pls_congE12 = nprv_pls_congE[OF _ nprv_hyp nprv_hyp, simped]", "lemmas nprv_pls_congE012 = nprv_pls_congE[OF nprv_hyp nprv_hyp nprv_hyp, simped]", "lemma prv_pls_cong:\nassumes \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nand \"prv (eql t1 t1')\" and \"prv (eql t2 t2')\"\nshows \"prv (eql (pls t1 t2) (pls t1' t2'))\"", "lemma prv_pls_congL:\n\"t1 \\<in> atrm \\<Longrightarrow> t1' \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow>\n prv (eql t1 t1') \\<Longrightarrow> prv (eql (pls t1 t2) (pls t1' t2))\"", "lemma prv_pls_congR:\n\"t1 \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow> t2' \\<in> atrm \\<Longrightarrow>\n prv (eql t2 t2') \\<Longrightarrow> prv (eql (pls t1 t2) (pls t1 t2'))\"", "lemma nprv_pls_cong:\nassumes [simp]: \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nshows \"nprv {eql t1 t1', eql t2 t2'} (eql (pls t1 t2) (pls t1' t2'))\"", "lemma prv_tms_imp_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t1'[simp]: \"t1' \\<in> atrm\"\nand t2[simp]: \"t2 \\<in> atrm\" and t2'[simp]: \"t2' \\<in> atrm\"\nshows \"prv (imp (eql t1 t1')\n                (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))\"", "lemmas nprv_tms_congI = nprv_addImp2LemmaI[OF prv_tms_imp_cong, simped, rotated 6]", "lemmas nprv_tms_congE = nprv_addImp2LemmaE[OF prv_tms_imp_cong, simped, rotated 4]", "lemmas nprv_tms_congE0 = nprv_tms_congE[OF nprv_hyp _ _, simped]", "lemmas nprv_tms_congE1 = nprv_tms_congE[OF _ nprv_hyp _, simped]", "lemmas nprv_tms_congE2 = nprv_tms_congE[OF _ _ nprv_hyp, simped]", "lemmas nprv_tms_congE01 = nprv_tms_congE[OF nprv_hyp nprv_hyp _, simped]", "lemmas nprv_tms_congE02 = nprv_tms_congE[OF nprv_hyp _ nprv_hyp, simped]", "lemmas nprv_tms_congE12 = nprv_tms_congE[OF _ nprv_hyp nprv_hyp, simped]", "lemmas nprv_tms_congE012 = nprv_tms_congE[OF nprv_hyp nprv_hyp nprv_hyp, simped]", "lemma prv_tms_cong:\nassumes \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nand \"prv (eql t1 t1')\" and \"prv (eql t2 t2')\"\nshows \"prv (eql (tms t1 t2) (tms t1' t2'))\"", "lemma nprv_tms_cong:\nassumes [simp]: \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nshows \"nprv {eql t1 t1', eql t2 t2'} (eql (tms t1 t2) (tms t1' t2'))\"", "lemma prv_tms_congL:\n\"t1 \\<in> atrm \\<Longrightarrow> t1' \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow>\n prv (eql t1 t1') \\<Longrightarrow> prv (eql (tms t1 t2) (tms t1' t2))\"", "lemma prv_tms_congR:\n\"t1 \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow> t2' \\<in> atrm \\<Longrightarrow>\n prv (eql t2 t2') \\<Longrightarrow> prv (eql (tms t1 t2) (tms t1 t2'))\"", "lemma prv_pls_suc_zer:\n\"t \\<in> atrm \\<Longrightarrow> prv (eql (pls t (suc zer)) (suc t))\"", "lemma prv_LLq_suc_imp:\nassumes [simp]: \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))\"", "lemmas nprv_LLq_sucI = nprv_addImpLemmaI[OF prv_LLq_suc_imp, simped, rotated 4]", "lemmas nprv_LLq_sucE = nprv_addImpLemmaE[OF prv_LLq_suc_imp, simped, rotated 2]", "lemmas nprv_LLq_sucE0 = nprv_LLq_sucE[OF nprv_hyp _, simped]", "lemmas nprv_LLq_sucE1 = nprv_LLq_sucE[OF _ nprv_hyp, simped]", "lemmas nprv_LLq_sucE01 = nprv_LLq_sucE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_LLs_imp_LLq:\nassumes [simp]: \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (LLs t1 t2) (LLq t1 t2))\"", "lemma prv_LLq_refl:\n\"prv (LLq zer zer)\"", "lemma prv_suc_mono_LLq:\nassumes \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))\"", "lemmas nprv_suc_mono_LLqI = nprv_addImpLemmaI[OF prv_suc_mono_LLq, simped, rotated 4]", "lemmas nprv_suc_mono_LLqE = nprv_addImpLemmaE[OF prv_suc_mono_LLq, simped, rotated 2]", "lemmas nprv_suc_mono_LLqE0 = nprv_suc_mono_LLqE[OF nprv_hyp _, simped]", "lemmas nprv_suc_mono_LLqE1 = nprv_suc_mono_LLqE[OF _ nprv_hyp, simped]", "lemmas nprv_suc_mono_LLqE01 = nprv_suc_mono_LLqE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_neg_eql_suc_Num_zer:\n\"prv (neg (eql (suc (Num n)) zer))\"", "lemma diff_prv_eql_Num:\nassumes \"m \\<noteq> n\"\nshows \"prv (neg (eql (Num m) (Num n)))\"", "lemma consistent_prv_eql_Num_equal:\nassumes consistent and \"prv (eql (Num m) (Num n))\"\nshows \"m = n\"", "lemma prv_pls_zer_zer:\n\"prv (eql (pls zer zer) zer)\"", "lemma prv_eql_pls_plus:\n\"prv (eql (pls (Num m) (Num n))\n          (Num (m+n)))\"", "lemma not_plus_prv_neg_eql_pls:\nassumes \"m + n \\<noteq> k\"\nshows \"prv (neg (eql (pls (Num m) (Num n)) (Num k)))\"", "lemma consistent_prv_eql_pls_plus_rev:\nassumes \"consistent\" \"prv (eql (pls (Num m) (Num n)) (Num k))\"\nshows \"k = m + n\"", "lemma prv_tms_Num_zer:\n\"prv (eql (tms (Num n) zer) zer)\"", "lemma prv_eql_tms_times:\n\"prv (eql (tms (Num m) (Num n)) (Num (m * n)))\"", "lemma ge_prv_neg_eql_pls_Num_zer:\nassumes [simp]: \"t \\<in> atrm\" and m: \"m > k\"\nshows \"prv (neg (eql (pls t (Num m)) (Num k)))\"", "lemma nprv_pls_Num_injectR:\nassumes [simp]: \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n                (eql t1 t2))\"", "lemmas nprv_pls_Num_injectI = nprv_addImpLemmaI[OF nprv_pls_Num_injectR, simped, rotated 4]", "lemmas nprv_pls_Num_injectE = nprv_addImpLemmaE[OF nprv_pls_Num_injectR, simped, rotated 2]", "lemmas nprv_pls_Num_injectE0 = nprv_pls_Num_injectE[OF nprv_hyp _, simped]", "lemmas nprv_pls_Num_injectE1 = nprv_pls_Num_injectE[OF _ nprv_hyp, simped]", "lemmas nprv_pls_Num_injectE01 = nprv_pls_Num_injectE[OF nprv_hyp nprv_hyp, simped]", "lemma not_times_prv_neg_eql_tms:\nassumes \"m * n \\<noteq> k\"\nshows \"prv (neg (eql (tms (Num m) (Num n)) (Num k)))\"", "lemma consistent_prv_eql_tms_times_rev:\nassumes \"consistent\" \"prv (eql (tms (Num m) (Num n)) (Num k))\"\nshows \"k = m * n\"", "lemma leq_prv_LLq_Num:\nassumes \"m \\<le> n\"\nshows \"prv (LLq (Num m) (Num n))\"", "lemma prv_LLq_zer: \\<comment> \\<open>O1\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (LLq zer t)\"", "lemmas Q1 = prv_LLq_zer", "lemma prv_LLq_zer_imp_eql:\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t zer) (eql t zer))\"", "lemmas nprv_LLq_zer_eqlI = nprv_addImpLemmaI[OF prv_LLq_zer_imp_eql, simped, rotated 3]", "lemmas nprv_LLq_zer_eqlE = nprv_addImpLemmaE[OF prv_LLq_zer_imp_eql, simped, rotated 1]", "lemmas nprv_LLq_zer_eqlE0 = nprv_LLq_zer_eqlE[OF nprv_hyp _, simped]", "lemmas nprv_LLq_zer_eqlE1 = nprv_LLq_zer_eqlE[OF _ nprv_hyp, simped]", "lemmas nprv_LLq_zer_eqlE01 = nprv_LLq_zer_eqlE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_sdsj_eql_imp_LLq: \\<comment> \\<open>O2\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))) (LLq t (Num n)))\"", "lemmas nprv_sdsj_eql_LLqI = nprv_addImpLemmaI[OF prv_sdsj_eql_imp_LLq, simped, rotated 3]", "lemmas nprv_sdsj_eql_LLqE = nprv_addImpLemmaE[OF prv_sdsj_eql_imp_LLq, simped, rotated 1]", "lemmas nprv_sdsj_eql_LLqE0 = nprv_sdsj_eql_LLqE[OF nprv_hyp _, simped]", "lemmas nprv_sdsj_eql_LLqE1 = nprv_sdsj_eql_LLqE[OF _ nprv_hyp, simped]", "lemmas nprv_sdsj_eql_LLqE01 = nprv_sdsj_eql_LLqE[OF nprv_hyp nprv_hyp, simped]", "lemmas O2I = nprv_sdsj_eql_LLqI", "lemmas O2E = nprv_sdsj_eql_LLqE", "lemmas O2E0 = nprv_sdsj_eql_LLqE0", "lemmas O2E1 = nprv_sdsj_eql_LLqE1", "lemmas O2E01 = nprv_sdsj_eql_LLqE01", "lemma prv_LLq_imp_sdsj_eql: \\<comment> \\<open>O3\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t (Num n)) (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))))\"", "lemmas prv_LLq_sdsj_eqlI = nprv_addImpLemmaI[OF prv_LLq_imp_sdsj_eql, simped, rotated 3]", "lemmas prv_LLq_sdsj_eqlE = nprv_addImpLemmaE[OF prv_LLq_imp_sdsj_eql, simped, rotated 1]", "lemmas prv_LLq_sdsj_eqlE0 = prv_LLq_sdsj_eqlE[OF nprv_hyp _, simped]", "lemmas prv_LLq_sdsj_eqlE1 = prv_LLq_sdsj_eqlE[OF _ nprv_hyp, simped]", "lemmas prv_LLq_sdsj_eqlE01 = prv_LLq_sdsj_eqlE[OF nprv_hyp nprv_hyp, simped]", "lemmas O3I = prv_LLq_sdsj_eqlI", "lemmas O3E = prv_LLq_sdsj_eqlE", "lemmas O3E0 = prv_LLq_sdsj_eqlE0", "lemmas O3E1 = prv_LLq_sdsj_eqlE1", "lemmas O3E01 = prv_LLq_sdsj_eqlE01", "lemma not_leq_prv_neg_LLq_Num:\nassumes \"\\<not> m \\<le> n\"  (* This is just m < n, of course. *)\nshows \"prv (neg (LLq (Num m) (Num n)))\"", "lemma consistent_prv_LLq_Num_leq:\nassumes consistent  \"prv (LLq (Num m) (Num n))\"\nshows \"m \\<le> n\"", "lemma prv_ball_NumI: \\<comment> \\<open>O4\\<close>\nassumes [simp]: \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\nand [simp]: \"\\<And> i. i \\<le> n \\<Longrightarrow> prv (subst \\<phi> (Num i) x)\"\nshows \"prv (ball x (Num n) \\<phi>)\"", "lemmas O4 = prv_ball_NumI", "lemma prv_bexi_NumI: \\<comment> \\<open>O5\\<close>\nassumes [simp]: \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\nand [simp]: \"i \\<le> n\" \"prv (subst \\<phi> (Num i) x)\"\nshows \"prv (bexi x (Num n) \\<phi>)\"", "lemmas O5 = prv_bexi_NumI", "lemma prv_LLq_Num_imp_Suc: \\<comment> \\<open>O6\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))\"", "lemmas nprv_LLq_Num_SucI = nprv_addImpLemmaI[OF prv_LLq_Num_imp_Suc, simped, rotated 3]", "lemmas nprv_LLq_Num_SucE = nprv_addImpLemmaE[OF prv_LLq_Num_imp_Suc, simped, rotated 1]", "lemmas nprv_LLq_Num_SucE0 = nprv_LLq_Num_SucE[OF nprv_hyp _, simped]", "lemmas nprv_LLq_Num_SucE1 = nprv_LLq_Num_SucE[OF _ nprv_hyp, simped]", "lemmas nprv_LLq_Num_SucE01 = nprv_LLq_Num_SucE[OF nprv_hyp nprv_hyp, simped]", "lemmas O6I = nprv_LLq_Num_SucI", "lemmas O6E = nprv_LLq_Num_SucE", "lemmas O6E0 = nprv_LLq_Num_SucE0", "lemmas O6E1 = nprv_LLq_Num_SucE1", "lemmas O6E01 = nprv_LLq_Num_SucE01", "lemma prv_LLq_suc_Num_pls_Num:\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (LLq (suc (Num n)) (pls (suc t) (Num n)))\"", "lemma prv_Num_LLq_imp_eql_suc: \\<comment> \\<open>O7\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq (Num n) t)\n                (dsj (eql (Num n) t)\n                     (LLq (suc (Num n)) t)))\"", "lemma prv_Num_LLq_eql_sucE:\n\"nprv F (LLq (Num n) t) \\<Longrightarrow>\n nprv (insert (eql (Num n) t) F) \\<psi> \\<Longrightarrow>\n nprv (insert (LLq (suc (Num n)) t) F) \\<psi> \\<Longrightarrow>\n t \\<in> atrm \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow>  \\<psi> \\<in> fmla \\<Longrightarrow>\n nprv F \\<psi>\"", "lemmas prv_Num_LLq_eql_sucE0 = prv_Num_LLq_eql_sucE[OF nprv_hyp _ _, simped]", "lemmas prv_Num_LLq_eql_sucE1 = prv_Num_LLq_eql_sucE[OF _ nprv_hyp _, simped]", "lemmas prv_Num_LLq_eql_sucE2 = prv_Num_LLq_eql_sucE[OF _ _ nprv_hyp, simped]", "lemmas prv_Num_LLq_eql_sucE01 = prv_Num_LLq_eql_sucE[OF nprv_hyp nprv_hyp _, simped]", "lemmas prv_Num_LLq_eql_sucE02 = prv_Num_LLq_eql_sucE[OF nprv_hyp _ nprv_hyp, simped]", "lemmas prv_Num_LLq_eql_sucE12 = prv_Num_LLq_eql_sucE[OF _ nprv_hyp nprv_hyp, simped]", "lemmas prv_Num_LLq_eql_sucE012 = prv_Num_LLq_eql_sucE[OF nprv_hyp nprv_hyp nprv_hyp, simped]", "lemmas O7E = prv_Num_LLq_eql_sucE", "lemmas O7E0 = prv_Num_LLq_eql_sucE0", "lemma prv_dsj_eql_Num_neg:\nassumes \"t \\<in> atrm\"\nshows \"prv (dsj (eql t (Num n)) (neg (eql t (Num n))))\"", "lemmas nprv_eql_Num_casesE = nprv_addDsjLemmaE[OF prv_dsj_eql_Num_neg, simped, rotated]", "lemmas nprv_eql_Num_casesE0 = nprv_eql_Num_casesE[OF nprv_hyp _, simped]", "lemmas nprv_eql_Num_casesE1 = nprv_eql_Num_casesE[OF _ nprv_hyp, simped]", "lemmas nprv_eql_Num_casesE01 = nprv_eql_Num_casesE[OF nprv_hyp nprv_hyp, simped]", "lemma prv_LLq_Num_dsj:  \\<comment> \\<open>O8\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (dsj (LLq t (Num n)) (LLq (Num n) t))\"", "lemma prv_LLq_Num_casesE:\n\"nprv (insert (LLq t (Num n)) F) \\<psi> \\<Longrightarrow>\n nprv (insert (LLq (Num n) t) F) \\<psi> \\<Longrightarrow>\n t \\<in> atrm \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\n nprv F \\<psi>\"", "lemmas prv_LLq_Num_casesE0 = prv_LLq_Num_casesE[OF nprv_hyp _, simped]", "lemmas prv_LLq_Num_casesE1 = prv_LLq_Num_casesE[OF _ nprv_hyp, simped]", "lemmas prv_LLq_Num_casesE01 = prv_LLq_Num_casesE[OF nprv_hyp nprv_hyp, simped]", "lemmas O8E = prv_LLq_Num_casesE", "lemmas O8E0 = prv_LLq_Num_casesE0", "lemmas O8E1 = prv_LLq_Num_casesE1", "lemmas O8E01 = prv_LLq_Num_casesE01", "lemma prv_imp_LLq_neg_Num_suc:\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t (suc (Num n)))\n                 (imp ((neg (eql t (suc (Num n)))))\n                      (LLq t (Num n))))\"", "lemmas nprv_LLq_neg_Num_sucI = nprv_addImp2LemmaI[OF prv_imp_LLq_neg_Num_suc, simped, rotated 3]", "lemmas nprv_LLq_neg_Num_sucE = nprv_addImp2LemmaE[OF prv_imp_LLq_neg_Num_suc, simped, rotated 1]", "lemmas nprv_LLq_neg_Num_sucE0 = nprv_LLq_neg_Num_sucE[OF nprv_hyp _ _, simped]", "lemmas nprv_LLq_neg_Num_sucE1 = nprv_LLq_neg_Num_sucE[OF _ nprv_hyp _, simped]", "lemmas nprv_LLq_neg_Num_sucE2 = nprv_LLq_neg_Num_sucE[OF _ _ nprv_hyp, simped]", "lemmas nprv_LLq_neg_Num_sucE01 = nprv_LLq_neg_Num_sucE[OF nprv_hyp nprv_hyp _, simped]", "lemmas nprv_LLq_neg_Num_sucE02 = nprv_LLq_neg_Num_sucE[OF nprv_hyp _ nprv_hyp, simped]", "lemmas nprv_LLq_neg_Num_sucE12 = nprv_LLq_neg_Num_sucE[OF _ nprv_hyp nprv_hyp, simped]", "lemmas nprv_LLq_neg_Num_sucE012 = nprv_LLq_neg_Num_sucE[OF nprv_hyp nprv_hyp nprv_hyp, simped]", "lemma prv_ball_Num_imp_ball_suc:  \\<comment> \\<open>O9\\<close>\nassumes [simp]: \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\nshows \"prv (imp (ball x (Num n) \\<phi>)\n                (ball x (suc (Num n)) (imp (neg (eql (Var x) (suc (Num n)))) \\<phi>)))\"", "lemmas prv_ball_Num_ball_sucI = nprv_addImpLemmaI[OF prv_ball_Num_imp_ball_suc, simped, rotated 4]", "lemmas prv_ball_Num_ball_sucE = nprv_addImpLemmaE[OF prv_ball_Num_imp_ball_suc, simped, rotated 2]", "lemmas prv_ball_Num_ball_sucE0 = prv_ball_Num_ball_sucE[OF nprv_hyp _, simped]", "lemmas prv_ball_Num_ball_sucE1 = prv_ball_Num_ball_sucE[OF _ nprv_hyp, simped]", "lemmas prv_ball_Num_ball_sucE01 = prv_ball_Num_ball_sucE[OF nprv_hyp nprv_hyp, simped]", "lemmas O9I = prv_ball_Num_ball_sucI", "lemmas O9E = prv_ball_Num_ball_sucE", "lemmas O9E0 = prv_ball_Num_ball_sucE0", "lemmas O9E1 = prv_ball_Num_ball_sucE1", "lemmas O9E01 = prv_ball_Num_ball_sucE01", "lemma LLq_num:\nassumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\"  \"Fvars \\<phi> = {zz}\" and q: \"q \\<in> num\" and p: \"\\<forall> p \\<in> num. prv (subst \\<phi> p zz)\"\nshows \"prv (all zz (imp (LLq (Var zz) q) \\<phi>))\"", "lemma LLq_num2:\nassumes \"p \\<in> num\"\nshows \"\\<exists>P\\<subseteq>num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\""], "translations": [["", "lemma nprv_ballI:\n\"nprv (insert (LLq (Var x) t) F) \\<phi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> trm \\<Longrightarrow> x \\<in> var \\<Longrightarrow>\n x \\<notin> (\\<Union>\\<phi> \\<in> F. Fvars \\<phi>) \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F (ball x t \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv (insert (LLq (Var x) t) F) \\<phi>; F \\<subseteq> fmla;\n     finite F; \\<phi> \\<in> fmla; t \\<in> trm; x \\<in> var;\n     x \\<notin> \\<Union> (Fvars ` F); x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F (ball x t \\<phi>)", "unfolding ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv (insert (LLq (Var x) t) F) \\<phi>; F \\<subseteq> fmla;\n     finite F; \\<phi> \\<in> fmla; t \\<in> trm; x \\<in> var;\n     x \\<notin> \\<Union> (Fvars ` F); x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F (all x (imp (LLq (Var x) t) \\<phi>))", "by(nprover2 r1: nprv_allI r2: nprv_impI)"], ["", "lemma nprv_ballE_aux:\n\"nprv F (ball x t \\<phi>) \\<Longrightarrow> nprv F (LLq t1 t) \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> x \\<in> var \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F (subst \\<phi> t1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (ball x t \\<phi>); nprv F (LLq t1 t);\n     F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla; t \\<in> atrm;\n     t1 \\<in> atrm; x \\<in> var; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F (subst \\<phi> t1 x)", "unfolding ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (all x (imp (LLq (Var x) t) \\<phi>)); nprv F (LLq t1 t);\n     F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla; t \\<in> atrm;\n     t1 \\<in> atrm; x \\<in> var; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F (subst \\<phi> t1 x)", "by(nprover3 r1: nprv_allE[of _ x \"imp (LLq (Var x) t) \\<phi>\" t1]\n     r2: nprv_impE0[of \"LLq t1 t\" \"subst \\<phi> t1 x\"]\n     r3: nprv_mono[of F])"], ["", "lemma nprv_ballE:\n\"nprv F (ball x t \\<phi>) \\<Longrightarrow> nprv F (LLq t1 t) \\<Longrightarrow> nprv (insert (subst \\<phi> t1 x) F) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> x \\<in> var \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\n x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (ball x t \\<phi>); nprv F (LLq t1 t);\n     nprv (insert (subst \\<phi> t1 x) F) \\<psi>; F \\<subseteq> fmla;\n     finite F; \\<phi> \\<in> fmla; t \\<in> atrm; t1 \\<in> atrm; x \\<in> var;\n     \\<psi> \\<in> fmla; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "by (meson atrm_trm local.subst nprv_ballE_aux nprv_cut rev_subsetD)"], ["", "lemmas nprv_ballE0 = nprv_ballE[OF nprv_hyp _ _, simped]"], ["", "lemmas nprv_ballE1 = nprv_ballE[OF _ nprv_hyp _, simped]"], ["", "lemmas nprv_ballE2 = nprv_ballE[OF _ _ nprv_hyp, simped]"], ["", "lemmas nprv_ballE01 = nprv_ballE[OF nprv_hyp nprv_hyp _, simped]"], ["", "lemmas nprv_ballE02 = nprv_ballE[OF nprv_hyp _ nprv_hyp, simped]"], ["", "lemmas nprv_ballE12 = nprv_ballE[OF _ nprv_hyp nprv_hyp, simped]"], ["", "lemmas nprv_ballE012 = nprv_ballE[OF nprv_hyp nprv_hyp nprv_hyp, simped]"], ["", "lemma nprv_bexiI:\n\"nprv F (subst \\<phi> t1 x) \\<Longrightarrow> nprv F (LLq t1 t) \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> x \\<in> var \\<Longrightarrow>\n x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F (bexi x t \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (subst \\<phi> t1 x); nprv F (LLq t1 t);\n     F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla; t \\<in> atrm;\n     t1 \\<in> atrm; x \\<in> var; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F (bexi x t \\<phi>)", "unfolding bexi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (subst \\<phi> t1 x); nprv F (LLq t1 t);\n     F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla; t \\<in> atrm;\n     t1 \\<in> atrm; x \\<in> var; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F (exi x (cnj (LLq (Var x) t) \\<phi>))", "by (nprover2 r1: nprv_exiI[of _ _ t1] r2: nprv_cnjI)"], ["", "lemma nprv_bexiE:\n\"nprv F (bexi x t \\<phi>) \\<Longrightarrow> nprv (insert (LLq (Var x) t) (insert \\<phi> F)) \\<psi> \\<Longrightarrow>\n F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> x \\<in> var \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow>\n x \\<notin> (\\<Union>\\<phi> \\<in> F. Fvars \\<phi>) \\<Longrightarrow> x \\<notin> Fvars \\<psi> \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow>\n nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (bexi x t \\<phi>);\n     nprv (insert (LLq (Var x) t) (insert \\<phi> F)) \\<psi>;\n     F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla; x \\<in> var;\n     \\<psi> \\<in> fmla; t \\<in> atrm; x \\<notin> \\<Union> (Fvars ` F);\n     x \\<notin> Fvars \\<psi>; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "unfolding bexi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (exi x (cnj (LLq (Var x) t) \\<phi>));\n     nprv (insert (LLq (Var x) t) (insert \\<phi> F)) \\<psi>;\n     F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla; x \\<in> var;\n     \\<psi> \\<in> fmla; t \\<in> atrm; x \\<notin> \\<Union> (Fvars ` F);\n     x \\<notin> Fvars \\<psi>; x \\<notin> FvarsT t\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "by (nprover2 r1: nprv_exiE[of _ x \"cnj (LLq (Var x) t) \\<phi>\"] r2: nprv_cnjH)"], ["", "lemmas nprv_bexiE0 = nprv_bexiE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_bexiE1 = nprv_bexiE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_bexiE01 = nprv_bexiE[OF nprv_hyp nprv_hyp, simped]"], ["", "end \\<comment> \\<open>context @{locale Deduct_with_False_Disj}\\<close>"], ["", "section \\<open>Deduction with the Robinson Arithmetic Axioms\\<close>"], ["", "locale Deduct_Q =\nDeduct_with_False_Disj_Arith\nvar trm fmla\nVar FvarsT substT Fvars subst\neql cnj imp all exi\nfls\ndsj\nnum\nzer suc pls tms\nprv\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand zer suc pls tms\nand prv\n+\nassumes\n\\<comment> \\<open>The Q axioms are stated for some fixed variables;\nwe will prove more useful versions, for arbitrary terms substituting the variables.\\<close>\nprv_neg_zer_suc_var:\n\"prv (neg (eql zer (suc (Var xx))))\"\nand\nprv_inj_suc_var:\n\"prv (imp (eql (suc (Var xx)) (suc (Var yy)))\n          (eql (Var xx) (Var yy)))\"\nand\nprv_zer_dsj_suc_var:\n\"prv (dsj (eql (Var yy) zer)\n          (exi xx (eql (Var yy) (suc (Var xx)))))\"\nand\nprv_pls_zer_var:\n\"prv (eql (pls (Var xx) zer) (Var xx))\"\nand\nprv_pls_suc_var:\n\"prv (eql (pls (Var xx) (suc (Var yy)))\n          (suc (pls (Var xx) (Var yy))))\"\nand\nprv_tms_zer_var:\n\"prv (eql (tms (Var xx) zer) zer)\"\nand\nprv_tms_suc_var:\n\"prv (eql (tms (Var xx) (suc (Var yy)))\n          (pls (tms (Var xx) (Var yy)) (Var xx)))\"\nbegin"], ["", "text \\<open>Rules for quantifiers that allow changing, on the fly, the bound variable with\none that is fresh for the proof context:\\<close>"], ["", "lemma nprv_allI_var:\nassumes n1[simp]: \"nprv F (subst \\<phi> (Var y) x)\"\nand i[simp]: \"F \\<subseteq> fmla\" \"finite F\" \"\\<phi> \\<in> fmla\"  \"x \\<in> var\"  \"y \\<in> var\"\nand u: \"y \\<notin> (\\<Union>\\<phi> \\<in> F. Fvars \\<phi>)\" and yx[simp]: \"y = x \\<or> y \\<notin> Fvars \\<phi>\"\nshows \"nprv F (all x \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv F (all x \\<phi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv F (all x \\<phi>)", "have [simp]: \"\\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> y \\<notin> Fvars \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> y \\<notin> Fvars \\<phi>", "using u"], ["proof (prove)\nusing this:\n  y \\<notin> \\<Union> (Fvars ` F)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> y \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  ?\\<phi> \\<in> F \\<Longrightarrow> y \\<notin> Fvars ?\\<phi>\n\ngoal (1 subgoal):\n 1. nprv F (all x \\<phi>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv F (all x \\<phi>)", "apply(subst all_rename2[of _ _ y])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<phi> \\<in> fmla\n 2. x \\<in> var\n 3. y \\<in> var\n 4. y = x \\<or> y \\<notin> Fvars \\<phi>\n 5. nprv F (all y (subst \\<phi> (Var y) x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. x \\<in> var\n 2. y \\<in> var\n 3. y = x \\<or> y \\<notin> Fvars \\<phi>\n 4. nprv F (all y (subst \\<phi> (Var y) x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> var", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. y \\<in> var\n 2. y = x \\<or> y \\<notin> Fvars \\<phi>\n 3. nprv F (all y (subst \\<phi> (Var y) x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> var", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. y = x \\<or> y \\<notin> Fvars \\<phi>\n 2. nprv F (all y (subst \\<phi> (Var y) x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x \\<or> y \\<notin> Fvars \\<phi>", "using yx"], ["proof (prove)\nusing this:\n  y = x \\<or> y \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. y = x \\<or> y \\<notin> Fvars \\<phi>", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv F (all y (subst \\<phi> (Var y) x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv F (all y (subst \\<phi> (Var y) x))", "by (nrule r: nprv_allI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv F (all x \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nprv_exiE_var:\nassumes n: \"nprv F (exi x \\<phi>)\"\nand nn: \"nprv (insert (subst \\<phi> (Var y) x) F) \\<psi>\"\nand 0: \"F \\<subseteq> fmla\" \"finite F\" \"\\<phi> \\<in> fmla\" \"x \\<in> var\" \"y \\<in> var\" \"\\<psi> \\<in> fmla\"\nand yx: \"y = x \\<or> y \\<notin> Fvars \\<phi>\" \"y \\<notin> \\<Union> (Fvars ` F)\" \"y \\<notin> Fvars \\<psi>\"\nshows \"nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv F \\<psi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nprv F \\<psi>", "have e: \"exi x \\<phi> = exi y (subst \\<phi> (Var y) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exi x \\<phi> = exi y (subst \\<phi> (Var y) x)", "using 0 yx n nn"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> fmla\n  x \\<in> var\n  y \\<in> var\n  \\<psi> \\<in> fmla\n  y = x \\<or> y \\<notin> Fvars \\<phi>\n  y \\<notin> \\<Union> (Fvars ` F)\n  y \\<notin> Fvars \\<psi>\n  nprv F (exi x \\<phi>)\n  nprv (insert (subst \\<phi> (Var y) x) F) \\<psi>\n\ngoal (1 subgoal):\n 1. exi x \\<phi> = exi y (subst \\<phi> (Var y) x)", "by (subst exi_rename2[of _ _ y]) (auto simp: 0)"], ["proof (state)\nthis:\n  exi x \\<phi> = exi y (subst \\<phi> (Var y) x)\n\ngoal (1 subgoal):\n 1. nprv F \\<psi>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv F \\<psi>", "using assms"], ["proof (prove)\nusing this:\n  nprv F (exi x \\<phi>)\n  nprv (insert (subst \\<phi> (Var y) x) F) \\<psi>\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> fmla\n  x \\<in> var\n  y \\<in> var\n  \\<psi> \\<in> fmla\n  y = x \\<or> y \\<notin> Fvars \\<phi>\n  y \\<notin> \\<Union> (Fvars ` F)\n  y \\<notin> Fvars \\<psi>\n\ngoal (1 subgoal):\n 1. nprv F \\<psi>", "unfolding e"], ["proof (prove)\nusing this:\n  nprv F (exi y (subst \\<phi> (Var y) x))\n  nprv (insert (subst \\<phi> (Var y) x) F) \\<psi>\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> fmla\n  x \\<in> var\n  y \\<in> var\n  \\<psi> \\<in> fmla\n  y = x \\<or> y \\<notin> Fvars \\<phi>\n  y \\<notin> \\<Union> (Fvars ` F)\n  y \\<notin> Fvars \\<psi>\n\ngoal (1 subgoal):\n 1. nprv F \\<psi>", "by (auto intro: nprv_exiE[of _ y \"subst \\<phi> (Var y) x\"])"], ["proof (state)\nthis:\n  nprv F \\<psi>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* The substitution closures of the variable-based axioms\n(and the rulifications of the ones that are implications, negations or disjunctions).  *)"], ["", "lemma prv_neg_zer_suc:\nassumes [simp]: \"t \\<in> atrm\" shows \"prv (neg (eql zer (suc t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql zer (suc t)))", "using prv_psubst[OF _ _ _ prv_neg_zer_suc_var, of \"[(t,xx)]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>neg (eql zer (suc (Var xx))) \\<in> fmla;\n   snd ` set [(t, xx)] \\<subseteq> var;\n   fst ` set [(t, xx)] \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (psubst (neg (eql zer (suc (Var xx)))) [(t, xx)])\n\ngoal (1 subgoal):\n 1. prv (neg (eql zer (suc t)))", "by simp"], ["", "lemma prv_neg_suc_zer:\nassumes \"t \\<in> atrm\" shows \"prv (neg (eql (suc t) zer))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (suc t) zer))", "by (metis assms atrm.simps atrm_imp_trm eql fls neg_def prv_eql_sym\n  prv_neg_zer_suc prv_prv_imp_trans zer_atrm)"], ["", "(* Rulification: *)"], ["", "lemmas nprv_zer_suc_contrE =\n nprv_flsE[OF nprv_addImpLemmaE[OF prv_neg_zer_suc[unfolded neg_def]], OF _ _ nprv_hyp, simped, rotated]"], ["", "lemmas nprv_zer_suc_contrE0 = nprv_zer_suc_contrE[OF nprv_hyp, simped]"], ["", "(* A variation of the above, taking advantage of transitivity and symmetry: *)"], ["", "lemma nprv_zer_suc_2contrE:\n\"nprv F (eql t zer) \\<Longrightarrow> nprv F (eql t (suc t1)) \\<Longrightarrow>\n finite F \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow> t1 \\<in> atrm \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow>\n nprv F \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (eql t zer); nprv F (eql t (suc t1)); finite F;\n     F \\<subseteq> fmla; t \\<in> atrm; t1 \\<in> atrm;\n     \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<phi>", "using nprv_eql_transI[OF nprv_eql_symI] nprv_zer_suc_contrE"], ["proof (prove)\nusing this:\n  \\<lbrakk>nprv ?F (eql ?t2.0 ?t1.0); ?t2.0 \\<in> trm; ?t1.0 \\<in> trm;\n   ?F \\<subseteq> fmla; finite ?F; nprv ?F (eql ?t2.0 ?t3.0);\n   ?t1.0 \\<in> trm; ?t2.0 \\<in> trm; ?t3.0 \\<in> trm; ?F \\<subseteq> fmla;\n   finite ?F\\<rbrakk>\n  \\<Longrightarrow> nprv ?F (eql ?t1.0 ?t3.0)\n  \\<lbrakk>nprv ?F (eql zer (suc ?t)); ?F \\<subseteq> fmla; finite ?F;\n   ?\\<phi> \\<in> fmla; ?t \\<in> atrm\\<rbrakk>\n  \\<Longrightarrow> nprv ?F ?\\<phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (eql t zer); nprv F (eql t (suc t1)); finite F;\n     F \\<subseteq> fmla; t \\<in> atrm; t1 \\<in> atrm;\n     \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<phi>", "by (meson atrm_imp_trm suc zer_atrm)"], ["", "lemmas nprv_zer_suc_2contrE0 = nprv_zer_suc_2contrE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_zer_suc_2contrE1 = nprv_zer_suc_2contrE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_zer_suc_2contrE01 = nprv_zer_suc_2contrE[OF nprv_hyp nprv_hyp, simped]"], ["", "(* *)"], ["", "lemma prv_inj_suc:\n\"t \\<in> atrm \\<Longrightarrow> t' \\<in> atrm \\<Longrightarrow>\n prv (imp (eql (suc t) (suc t'))\n          (eql t t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> atrm; t' \\<in> atrm\\<rbrakk>\n    \\<Longrightarrow> prv (imp (eql (suc t) (suc t')) (eql t t'))", "using prv_psubst[OF _ _ _ prv_inj_suc_var, of \"[(t,xx),(t',yy)]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>imp (eql (suc (Var xx)) (suc (Var yy))) (eql (Var xx) (Var yy))\n           \\<in> fmla;\n   snd ` set [(t, xx), (t', yy)] \\<subseteq> var;\n   fst ` set [(t, xx), (t', yy)] \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (psubst\n                          (imp (eql (suc (Var xx)) (suc (Var yy)))\n                            (eql (Var xx) (Var yy)))\n                          [(t, xx), (t', yy)])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> atrm; t' \\<in> atrm\\<rbrakk>\n    \\<Longrightarrow> prv (imp (eql (suc t) (suc t')) (eql t t'))", "by simp"], ["", "(* Rulification: *)"], ["", "lemmas nprv_eql_sucI = nprv_addImpLemmaI[OF prv_inj_suc, simped, rotated 4]"], ["", "lemmas nprv_eql_sucE = nprv_addImpLemmaE[OF prv_inj_suc, simped, rotated 2]"], ["", "lemmas nprv_eql_sucE0 = nprv_eql_sucE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_eql_sucE1 = nprv_eql_sucE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_eql_sucE01 = nprv_eql_sucE[OF nprv_hyp nprv_hyp, simped]"], ["", "(* NB: Provable substitution closures of sentences in the presence of quantifiers do not go\nvery smoothly -- the main reason being that bound variable renaming is not assumed\nto hold up to equality, but it (only follows that it) holds up to provability: *)"], ["", "lemma prv_zer_dsj_suc:\nassumes t[simp]: \"t \\<in> atrm\" and x[simp]: \"x \\<in> var\" \"x \\<notin> FvarsT t\"\nshows \"prv (dsj (eql t zer)\n           (exi x (eql t (suc (Var x)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "define x' where x': \"x' \\<equiv> getFr [x,yy] [t] []\""], ["proof (state)\nthis:\n  x' \\<equiv> getFr [x, yy] [t] []\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "have x'_facts[simp]: \"x' \\<in> var\" \"x' \\<noteq> x\"  \"x' \\<noteq> yy\" \"x' \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x' \\<in> var &&& x' \\<noteq> x) &&&\n    x' \\<noteq> yy &&& x' \\<notin> FvarsT t", "unfolding x'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (getFr [x, yy] [t] [] \\<in> var &&& getFr [x, yy] [t] [] \\<noteq> x) &&&\n    getFr [x, yy] [t] [] \\<noteq> yy &&&\n    getFr [x, yy] [t] [] \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[x,yy]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [x, yy] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [x, yy] [t] [] \\<in> var \\<and>\n                    getFr [x, yy] [t] [] \\<notin> set [x, yy] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [x, yy] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [x, yy] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (getFr [x, yy] [t] [] \\<in> var &&& getFr [x, yy] [t] [] \\<noteq> x) &&&\n    getFr [x, yy] [t] [] \\<noteq> yy &&&\n    getFr [x, yy] [t] [] \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  x' \\<in> var\n  x' \\<noteq> x\n  x' \\<noteq> yy\n  x' \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "have \"prv (imp (exi xx (eql (Var yy) (suc (Var xx)))) (exi x' (eql (Var yy) (suc (Var x')))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi xx (eql (Var yy) (suc (Var xx))))\n          (exi x' (eql (Var yy) (suc (Var x')))))", "by (auto intro!: prv_exi_imp prv_all_gen\n           simp: prv_exi_inst[of x' \"eql (Var yy) (suc (Var x'))\" \"Var xx\", simplified])"], ["proof (state)\nthis:\n  prv (imp (exi xx (eql (Var yy) (suc (Var xx))))\n        (exi x' (eql (Var yy) (suc (Var x')))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "with prv_zer_dsj_suc_var"], ["proof (chain)\npicking this:\n  prv (dsj (eql (Var yy) zer) (exi xx (eql (Var yy) (suc (Var xx)))))\n  prv (imp (exi xx (eql (Var yy) (suc (Var xx))))\n        (exi x' (eql (Var yy) (suc (Var x')))))", "have 0: \"prv (dsj (eql (Var yy) zer) (exi x' (eql (Var yy) (suc (Var x')))))\""], ["proof (prove)\nusing this:\n  prv (dsj (eql (Var yy) zer) (exi xx (eql (Var yy) (suc (Var xx)))))\n  prv (imp (exi xx (eql (Var yy) (suc (Var xx))))\n        (exi x' (eql (Var yy) (suc (Var x')))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql (Var yy) zer) (exi x' (eql (Var yy) (suc (Var x')))))", "by (elim prv_dsj_cases[rotated 3])\n      (auto intro: prv_dsj_impL prv_dsj_impR elim!: prv_prv_imp_trans[rotated 3])"], ["proof (state)\nthis:\n  prv (dsj (eql (Var yy) zer) (exi x' (eql (Var yy) (suc (Var x')))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "note 1 = prv_psubst[OF _ _ _ 0, of \"[(t,yy)]\", simplified]"], ["proof (state)\nthis:\n  prv (dsj (eql t zer) (exi x' (eql t (suc (Var x')))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "moreover"], ["proof (state)\nthis:\n  prv (dsj (eql t zer) (exi x' (eql t (suc (Var x')))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "have \"prv (imp (exi x' (eql t (suc (Var x')))) (exi x (eql t (suc (Var x)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x' (eql t (suc (Var x')))) (exi x (eql t (suc (Var x)))))", "by (auto intro!: prv_exi_imp prv_all_gen simp: prv_exi_inst[of x \"eql t (suc (Var x))\" \"Var x'\", simplified])"], ["proof (state)\nthis:\n  prv (imp (exi x' (eql t (suc (Var x')))) (exi x (eql t (suc (Var x)))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "ultimately"], ["proof (chain)\npicking this:\n  prv (dsj (eql t zer) (exi x' (eql t (suc (Var x')))))\n  prv (imp (exi x' (eql t (suc (Var x')))) (exi x (eql t (suc (Var x)))))", "show ?thesis"], ["proof (prove)\nusing this:\n  prv (dsj (eql t zer) (exi x' (eql t (suc (Var x')))))\n  prv (imp (exi x' (eql t (suc (Var x')))) (exi x (eql t (suc (Var x)))))\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))", "by (elim prv_dsj_cases[rotated 3])\n      (auto intro: prv_dsj_impL prv_dsj_impR elim!: prv_prv_imp_trans[rotated 3])"], ["proof (state)\nthis:\n  prv (dsj (eql t zer) (exi x (eql t (suc (Var x)))))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* The rulification of the above disjunction amounts to reasoning by zero-suc cases: *)"], ["", "lemma nprv_zer_suc_casesE:\n\"nprv (insert (eql t zer) F) \\<phi> \\<Longrightarrow> nprv (insert (eql t (suc (Var x))) F) \\<phi> \\<Longrightarrow>\n finite F \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> \\<phi> \\<in> fmla \\<Longrightarrow> x \\<in> var \\<Longrightarrow> t \\<in> atrm \\<Longrightarrow>\n x \\<notin> Fvars \\<phi> \\<Longrightarrow> x \\<notin> FvarsT t \\<Longrightarrow> x \\<notin> \\<Union> (Fvars ` F) \\<Longrightarrow>\n nprv F \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv (insert (eql t zer) F) \\<phi>;\n     nprv (insert (eql t (suc (Var x))) F) \\<phi>; finite F;\n     F \\<subseteq> fmla; \\<phi> \\<in> fmla; x \\<in> var; t \\<in> atrm;\n     x \\<notin> Fvars \\<phi>; x \\<notin> FvarsT t;\n     x \\<notin> \\<Union> (Fvars ` F)\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<phi>", "by (nprover3 r1: nprv_addDsjLemmaE[OF prv_zer_dsj_suc]\n             r2: nprv_exiE0[of x \"eql t (suc (Var x))\"]\n             r3: nprv_mono[of \"insert (eql _ (suc _)) _\"])"], ["", "lemmas nprv_zer_suc_casesE0 = nprv_zer_suc_casesE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_zer_suc_casesE1 = nprv_zer_suc_casesE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_zer_suc_casesE01 = nprv_zer_suc_casesE[OF nprv_hyp nprv_hyp, simped]"], ["", "(* *)"], ["", "lemma prv_pls_zer:\nassumes [simp]: \"t \\<in> atrm\" shows \"prv (eql (pls t zer) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls t zer) t)", "using prv_psubst[OF _ _ _ prv_pls_zer_var, of \"[(t,xx)]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>eql (pls (Var xx) zer) (Var xx) \\<in> fmla;\n   snd ` set [(t, xx)] \\<subseteq> var;\n   fst ` set [(t, xx)] \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (psubst (eql (pls (Var xx) zer) (Var xx)) [(t, xx)])\n\ngoal (1 subgoal):\n 1. prv (eql (pls t zer) t)", "by simp"], ["", "lemma prv_pls_suc:\n\"t \\<in> atrm \\<Longrightarrow> t' \\<in> atrm \\<Longrightarrow>\n prv (eql (pls t (suc t'))\n          (suc (pls t t')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> atrm; t' \\<in> atrm\\<rbrakk>\n    \\<Longrightarrow> prv (eql (pls t (suc t')) (suc (pls t t')))", "using prv_psubst[OF _ _ _ prv_pls_suc_var, of \"[(t,xx),(t',yy)]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>eql (pls (Var xx) (suc (Var yy))) (suc (pls (Var xx) (Var yy)))\n           \\<in> fmla;\n   snd ` set [(t, xx), (t', yy)] \\<subseteq> var;\n   fst ` set [(t, xx), (t', yy)] \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (psubst\n                          (eql (pls (Var xx) (suc (Var yy)))\n                            (suc (pls (Var xx) (Var yy))))\n                          [(t, xx), (t', yy)])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> atrm; t' \\<in> atrm\\<rbrakk>\n    \\<Longrightarrow> prv (eql (pls t (suc t')) (suc (pls t t')))", "by simp"], ["", "lemma prv_tms_zer:\nassumes [simp]: \"t \\<in> atrm\" shows \"prv (eql (tms t zer) zer)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (tms t zer) zer)", "using prv_psubst[OF _ _ _ prv_tms_zer_var, of \"[(t,xx)]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>eql (tms (Var xx) zer) zer \\<in> fmla;\n   snd ` set [(t, xx)] \\<subseteq> var;\n   fst ` set [(t, xx)] \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (psubst (eql (tms (Var xx) zer) zer) [(t, xx)])\n\ngoal (1 subgoal):\n 1. prv (eql (tms t zer) zer)", "by simp"], ["", "lemma prv_tms_suc:\n\"t \\<in> atrm \\<Longrightarrow> t' \\<in> atrm \\<Longrightarrow>\n prv (eql (tms t (suc t'))\n          (pls (tms t t') t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> atrm; t' \\<in> atrm\\<rbrakk>\n    \\<Longrightarrow> prv (eql (tms t (suc t')) (pls (tms t t') t))", "using prv_psubst[OF _ _ _ prv_tms_suc_var, of \"[(t,xx),(t',yy)]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>eql (tms (Var xx) (suc (Var yy)))\n            (pls (tms (Var xx) (Var yy)) (Var xx))\n           \\<in> fmla;\n   snd ` set [(t, xx), (t', yy)] \\<subseteq> var;\n   fst ` set [(t, xx), (t', yy)] \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (psubst\n                          (eql (tms (Var xx) (suc (Var yy)))\n                            (pls (tms (Var xx) (Var yy)) (Var xx)))\n                          [(t, xx), (t', yy)])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> atrm; t' \\<in> atrm\\<rbrakk>\n    \\<Longrightarrow> prv (eql (tms t (suc t')) (pls (tms t t') t))", "by simp"], ["", "(* Congruence rules for the operators (follow from substitutivity of equality): *)"], ["", "lemma prv_suc_imp_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t2[simp]: \"t2 \\<in> atrm\"\nshows \"prv (imp (eql t1 t2)\n                (eql (suc t1) (suc t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql (suc t1) (suc t2)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql (suc t1) (suc t2)))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t1,t2] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t1, t2] []\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql (suc t1) (suc t2)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t1\"  \"z \\<notin> FvarsT t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t1,t2]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t1, t2] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t1\n  z \\<notin> FvarsT t2\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql (suc t1) (suc t2)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql (suc t1) (suc t2)))", "by (nprover4 r1: nprv_prvI r2: nprv_impI\n       r3: nprv_eql_substE02[of t1 t2  _ \"eql (suc (Var z)) (suc t2)\" z]\n       r4: nprv_eq_eqlI)"], ["proof (state)\nthis:\n  prv (imp (eql t1 t2) (eql (suc t1) (suc t2)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_suc_congI = nprv_addImpLemmaI[OF prv_suc_imp_cong, simped, rotated 4]"], ["", "lemmas nprv_suc_congE = nprv_addImpLemmaE[OF prv_suc_imp_cong, simped, rotated 2]"], ["", "lemmas nprv_suc_congE0 = nprv_suc_congE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_suc_congE1 = nprv_suc_congE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_suc_congE01 = nprv_suc_congE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemma prv_suc_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t2[simp]: \"t2 \\<in> atrm\"\nassumes \"prv (eql t1 t2)\"\nshows \"prv (eql (suc t1) (suc t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (suc t1) (suc t2))", "by (meson assms atrm_suc atrm_imp_trm eql prv_imp_mp prv_suc_imp_cong t1 t2)"], ["", "lemma prv_pls_imp_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t1'[simp]: \"t1' \\<in> atrm\"\nand t2[simp]: \"t2 \\<in> atrm\" and t2'[simp]: \"t2' \\<in> atrm\"\nshows \"prv (imp (eql t1 t1')\n                (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t1,t1',t2,t2'] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\"\n  \"z \\<notin> FvarsT t1\" \"z \\<notin> FvarsT t1'\" \"z \\<notin> FvarsT t2\" \"z \\<notin> FvarsT t2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((z \\<in> var &&& z \\<noteq> xx) &&&\n     z \\<noteq> yy &&& z \\<noteq> zz) &&&\n    (zz \\<noteq> z &&& z \\<notin> FvarsT t1) &&&\n    z \\<notin> FvarsT t1' &&& z \\<notin> FvarsT t2 &&& z \\<notin> FvarsT t2'", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t1,t1',t2,t2']\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var;\n   set [t1, t1', t2, t2'] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                    \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t1', t2, t2'] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((z \\<in> var &&& z \\<noteq> xx) &&&\n     z \\<noteq> yy &&& z \\<noteq> zz) &&&\n    (zz \\<noteq> z &&& z \\<notin> FvarsT t1) &&&\n    z \\<notin> FvarsT t1' &&& z \\<notin> FvarsT t2 &&& z \\<notin> FvarsT t2'", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var;\n   set [t1, t1', t2, t2'] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t1', t2, t2'] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((z \\<in> var &&& z \\<noteq> xx) &&&\n     z \\<noteq> yy &&& z \\<noteq> zz) &&&\n    (zz \\<noteq> z &&& z \\<notin> FvarsT t1) &&&\n    z \\<notin> FvarsT t1' &&& z \\<notin> FvarsT t2 &&& z \\<notin> FvarsT t2'", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t1\n  z \\<notin> FvarsT t1'\n  z \\<notin> FvarsT t2\n  z \\<notin> FvarsT t2'\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql t1 t1') (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t1 t1'} (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2')))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 t2', eql t1 t1'} (eql (pls t1 t2) (pls t1' t2'))", "apply(nrule r: nprv_eql_substE02[of t1 t1'  _ \"eql (pls (Var z) t2) (pls t1' t2')\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 t2', eql t1 t1'} (eql (pls t1' t2) (pls t1' t2'))", "apply(nrule r: nprv_eql_substE02[of t2 t2'  _ \"eql (pls t1' (Var z)) (pls t1' t2')\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 t2', eql t1 t1'} (eql (pls t1' t2') (pls t1' t2'))", "apply(nrule r: nprv_eq_eqlI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (eql t1 t1') (imp (eql t2 t2') (eql (pls t1 t2) (pls t1' t2'))))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_pls_congI = nprv_addImp2LemmaI[OF prv_pls_imp_cong, simped, rotated 6]"], ["", "lemmas nprv_pls_congE = nprv_addImp2LemmaE[OF prv_pls_imp_cong, simped, rotated 4]"], ["", "lemmas nprv_pls_congE0 = nprv_pls_congE[OF nprv_hyp _ _, simped]"], ["", "lemmas nprv_pls_congE1 = nprv_pls_congE[OF _ nprv_hyp _, simped]"], ["", "lemmas nprv_pls_congE2 = nprv_pls_congE[OF _ _ nprv_hyp, simped]"], ["", "lemmas nprv_pls_congE01 = nprv_pls_congE[OF nprv_hyp nprv_hyp _, simped]"], ["", "lemmas nprv_pls_congE02 = nprv_pls_congE[OF nprv_hyp _ nprv_hyp, simped]"], ["", "lemmas nprv_pls_congE12 = nprv_pls_congE[OF _ nprv_hyp nprv_hyp, simped]"], ["", "lemmas nprv_pls_congE012 = nprv_pls_congE[OF nprv_hyp nprv_hyp nprv_hyp, simped]"], ["", "lemma prv_pls_cong:\nassumes \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nand \"prv (eql t1 t1')\" and \"prv (eql t2 t2')\"\nshows \"prv (eql (pls t1 t2) (pls t1' t2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls t1 t2) (pls t1' t2'))", "by (metis assms atrm_imp_trm cnj eql pls prv_cnjI prv_cnj_imp_monoR2 prv_imp_mp prv_pls_imp_cong)"], ["", "lemma prv_pls_congL:\n\"t1 \\<in> atrm \\<Longrightarrow> t1' \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow>\n prv (eql t1 t1') \\<Longrightarrow> prv (eql (pls t1 t2) (pls t1' t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> atrm; t1' \\<in> atrm; t2 \\<in> atrm;\n     prv (eql t1 t1')\\<rbrakk>\n    \\<Longrightarrow> prv (eql (pls t1 t2) (pls t1' t2))", "by (rule prv_pls_cong[OF _ _ _ _ _ prv_eql_reflT]) auto"], ["", "lemma prv_pls_congR:\n\"t1 \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow> t2' \\<in> atrm \\<Longrightarrow>\n prv (eql t2 t2') \\<Longrightarrow> prv (eql (pls t1 t2) (pls t1 t2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> atrm; t2 \\<in> atrm; t2' \\<in> atrm;\n     prv (eql t2 t2')\\<rbrakk>\n    \\<Longrightarrow> prv (eql (pls t1 t2) (pls t1 t2'))", "by (rule prv_pls_cong[OF _ _ _ _ prv_eql_reflT]) auto"], ["", "lemma nprv_pls_cong:\nassumes [simp]: \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nshows \"nprv {eql t1 t1', eql t2 t2'} (eql (pls t1 t2) (pls t1' t2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t1 t1', eql t2 t2'} (eql (pls t1 t2) (pls t1' t2'))", "unfolding nprv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj {eql t1 t1', eql t2 t2'})\n          (eql (pls t1 t2) (pls t1' t2')))", "by (auto intro!: prv_prv_imp_trans[OF _ _ _ prv_scnj2_imp_cnj] prv_cnj_imp_monoR2 prv_pls_imp_cong)"], ["", "lemma prv_tms_imp_cong:\nassumes t1[simp]: \"t1 \\<in> atrm\" and t1'[simp]: \"t1' \\<in> atrm\"\nand t2[simp]: \"t2 \\<in> atrm\" and t2'[simp]: \"t2' \\<in> atrm\"\nshows \"prv (imp (eql t1 t1')\n                (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t1,t1',t2,t2'] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\"\n  \"z \\<notin> FvarsT t1\" \"z \\<notin> FvarsT t1'\" \"z \\<notin> FvarsT t2\" \"z \\<notin> FvarsT t2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((z \\<in> var &&& z \\<noteq> xx) &&&\n     z \\<noteq> yy &&& z \\<noteq> zz) &&&\n    (zz \\<noteq> z &&& z \\<notin> FvarsT t1) &&&\n    z \\<notin> FvarsT t1' &&& z \\<notin> FvarsT t2 &&& z \\<notin> FvarsT t2'", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t1,t1',t2,t2']\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var;\n   set [t1, t1', t2, t2'] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                    \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t1', t2, t2'] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t1', t2, t2'] []\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((z \\<in> var &&& z \\<noteq> xx) &&&\n     z \\<noteq> yy &&& z \\<noteq> zz) &&&\n    (zz \\<noteq> z &&& z \\<notin> FvarsT t1) &&&\n    z \\<notin> FvarsT t1' &&& z \\<notin> FvarsT t2 &&& z \\<notin> FvarsT t2'", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var;\n   set [t1, t1', t2, t2'] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t1', t2, t2'] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((z \\<in> var &&& z \\<noteq> xx) &&&\n     z \\<noteq> yy &&& z \\<noteq> zz) &&&\n    (zz \\<noteq> z &&& z \\<notin> FvarsT t1) &&&\n    z \\<notin> FvarsT t1' &&& z \\<notin> FvarsT t2 &&& z \\<notin> FvarsT t2'", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t1\n  z \\<notin> FvarsT t1'\n  z \\<notin> FvarsT t2\n  z \\<notin> FvarsT t2'\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t1')\n          (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql t1 t1') (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t1 t1'} (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2')))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 t2', eql t1 t1'} (eql (tms t1 t2) (tms t1' t2'))", "apply(nrule r: nprv_eql_substE02[of t1 t1'  _ \"eql (tms (Var z) t2) (tms t1' t2')\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 t2', eql t1 t1'} (eql (tms t1' t2) (tms t1' t2'))", "apply(nrule r: nprv_eql_substE02[of t2 t2'  _ \"eql (tms t1' (Var z)) (tms t1' t2')\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 t2', eql t1 t1'} (eql (tms t1' t2') (tms t1' t2'))", "apply(nrule r: nprv_eq_eqlI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (eql t1 t1') (imp (eql t2 t2') (eql (tms t1 t2) (tms t1' t2'))))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_tms_congI = nprv_addImp2LemmaI[OF prv_tms_imp_cong, simped, rotated 6]"], ["", "lemmas nprv_tms_congE = nprv_addImp2LemmaE[OF prv_tms_imp_cong, simped, rotated 4]"], ["", "lemmas nprv_tms_congE0 = nprv_tms_congE[OF nprv_hyp _ _, simped]"], ["", "lemmas nprv_tms_congE1 = nprv_tms_congE[OF _ nprv_hyp _, simped]"], ["", "lemmas nprv_tms_congE2 = nprv_tms_congE[OF _ _ nprv_hyp, simped]"], ["", "lemmas nprv_tms_congE01 = nprv_tms_congE[OF nprv_hyp nprv_hyp _, simped]"], ["", "lemmas nprv_tms_congE02 = nprv_tms_congE[OF nprv_hyp _ nprv_hyp, simped]"], ["", "lemmas nprv_tms_congE12 = nprv_tms_congE[OF _ nprv_hyp nprv_hyp, simped]"], ["", "lemmas nprv_tms_congE012 = nprv_tms_congE[OF nprv_hyp nprv_hyp nprv_hyp, simped]"], ["", "lemma prv_tms_cong:\nassumes \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nand \"prv (eql t1 t1')\" and \"prv (eql t2 t2')\"\nshows \"prv (eql (tms t1 t2) (tms t1' t2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (tms t1 t2) (tms t1' t2'))", "by (metis assms atrm_imp_trm cnj eql tms prv_cnjI prv_cnj_imp_monoR2 prv_imp_mp prv_tms_imp_cong)"], ["", "lemma nprv_tms_cong:\nassumes [simp]: \"t1 \\<in> atrm\" \"t1' \\<in> atrm\" \"t2 \\<in> atrm\" \"t2' \\<in> atrm\"\nshows \"nprv {eql t1 t1', eql t2 t2'} (eql (tms t1 t2) (tms t1' t2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t1 t1', eql t2 t2'} (eql (tms t1 t2) (tms t1' t2'))", "unfolding nprv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj {eql t1 t1', eql t2 t2'})\n          (eql (tms t1 t2) (tms t1' t2')))", "by (auto intro!: prv_prv_imp_trans[OF _ _ _ prv_scnj2_imp_cnj] prv_cnj_imp_monoR2 prv_tms_imp_cong)"], ["", "lemma prv_tms_congL:\n\"t1 \\<in> atrm \\<Longrightarrow> t1' \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow>\n prv (eql t1 t1') \\<Longrightarrow> prv (eql (tms t1 t2) (tms t1' t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> atrm; t1' \\<in> atrm; t2 \\<in> atrm;\n     prv (eql t1 t1')\\<rbrakk>\n    \\<Longrightarrow> prv (eql (tms t1 t2) (tms t1' t2))", "by (rule prv_tms_cong[OF _ _ _ _ _ prv_eql_reflT]) auto"], ["", "lemma prv_tms_congR:\n\"t1 \\<in> atrm \\<Longrightarrow> t2 \\<in> atrm \\<Longrightarrow> t2' \\<in> atrm \\<Longrightarrow>\n prv (eql t2 t2') \\<Longrightarrow> prv (eql (tms t1 t2) (tms t1 t2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> atrm; t2 \\<in> atrm; t2' \\<in> atrm;\n     prv (eql t2 t2')\\<rbrakk>\n    \\<Longrightarrow> prv (eql (tms t1 t2) (tms t1 t2'))", "by (rule prv_tms_cong[OF _ _ _ _ prv_eql_reflT]) auto"], ["", "section \\<open>Properties Provable in Q\\<close>"], ["", "subsection \\<open>General properties, unconstrained by numerals\\<close>"], ["", "lemma prv_pls_suc_zer:\n\"t \\<in> atrm \\<Longrightarrow> prv (eql (pls t (suc zer)) (suc t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> atrm \\<Longrightarrow> prv (eql (pls t (suc zer)) (suc t))", "by (metis (no_types, hide_lams) atrm.atrm_pls atrm_imp_trm\n pls prv_eql_trans prv_pls_suc prv_pls_zer prv_suc_cong suc zer_atrm)"], ["", "lemma prv_LLq_suc_imp:\nassumes [simp]: \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t1,t2] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t1, t2] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t1\"  \"z \\<notin> FvarsT t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t1,t2]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t1, t2] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t1\n  z \\<notin> FvarsT t2\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))", "note LLq_pls[of _ _ z,simp]"], ["proof (state)\nthis:\n  \\<lbrakk>?t1.0 \\<in> atrm; ?t2.0 \\<in> atrm; z \\<in> var;\n   z \\<notin> FvarsT ?t1.0; z \\<notin> FvarsT ?t2.0\\<rbrakk>\n  \\<Longrightarrow> LLq ?t1.0 ?t2.0 = exi z (eql ?t2.0 (pls (Var z) ?t1.0))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (exi z (eql (suc t2) (pls (Var z) (suc t1))))\n       (exi z (eql t2 (pls (Var z) t1))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi z (eql (suc t2) (pls (Var z) (suc t1)))}\n     (exi z (eql t2 (pls (Var z) t1)))", "apply(nrule r: nprv_exiE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (suc t2) (pls (Var z) (suc t1)),\n      exi z (eql (suc t2) (pls (Var z) (suc t1)))}\n     (exi z (eql t2 (pls (Var z) t1)))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of \"Var z\" t1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (Var z) (suc t1)) (suc (pls (Var z) t1)),\n      eql (suc t2) (pls (Var z) (suc t1)),\n      exi z (eql (suc t2) (pls (Var z) (suc t1)))}\n     (exi z (eql t2 (pls (Var z) t1)))", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (Var z) (suc t1)) (suc (pls (Var z) t1)),\n      eql (suc t2) (pls (Var z) (suc t1))}\n     (exi z (eql t2 (pls (Var z) t1)))", "apply(nrule r: nprv_eql_transE01[of \"suc t2\" \"pls (Var z) (suc t1)\" _ \"suc (pls (Var z) t1)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (suc t2) (suc (pls (Var z) t1)),\n      eql (pls (Var z) (suc t1)) (suc (pls (Var z) t1)),\n      eql (suc t2) (pls (Var z) (suc t1))}\n     (exi z (eql t2 (pls (Var z) t1)))", "apply(nrule r: nprv_eql_sucE0[of t2 \"pls (Var z) t1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql t2 (pls (Var z) t1), eql (suc t2) (suc (pls (Var z) t1)),\n      eql (pls (Var z) (suc t1)) (suc (pls (Var z) t1)),\n      eql (suc t2) (pls (Var z) (suc t1))}\n     (exi z (eql t2 (pls (Var z) t1)))", "apply(nrule r: nprv_exiI[of _ _ \"Var z\" z])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (LLq (suc t1) (suc t2)) (LLq t1 t2))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_LLq_sucI = nprv_addImpLemmaI[OF prv_LLq_suc_imp, simped, rotated 4]"], ["", "lemmas nprv_LLq_sucE = nprv_addImpLemmaE[OF prv_LLq_suc_imp, simped, rotated 2]"], ["", "lemmas nprv_LLq_sucE0 = nprv_LLq_sucE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_LLq_sucE1 = nprv_LLq_sucE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_LLq_sucE01 = nprv_LLq_sucE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemma prv_LLs_imp_LLq:\nassumes [simp]: \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (LLs t1 t2) (LLq t1 t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLs t1 t2) (LLq t1 t2))", "by (simp add: LLs_LLq prv_imp_cnjL)"], ["", "lemma prv_LLq_refl:\n\"prv (LLq zer zer)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq zer zer)", "by (auto simp: LLq_pls_zz prv_pls_zer prv_prv_eql_sym intro!: prv_exiI[of zz _ zer])"], ["", "text \\<open>NB: Monotonicity of pls and tms w.r.t. LLq cannot be proved in Q.\\<close>"], ["", "lemma prv_suc_mono_LLq:\nassumes \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "have assms1: \"t1 \\<in> trm\" \"t2 \\<in> trm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t1 \\<in> trm &&& t2 \\<in> trm", "using assms"], ["proof (prove)\nusing this:\n  t1 \\<in> atrm\n  t2 \\<in> atrm\n\ngoal (1 subgoal):\n 1. t1 \\<in> trm &&& t2 \\<in> trm", "by auto"], ["proof (state)\nthis:\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t1,t2] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t1, t2] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t1\" \"z \\<notin> FvarsT t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t1,t2]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t1, t2] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "using assms1"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t1, t2] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t1, t2] [] \\<notin> Fvars ?\\<phi>)\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    (z \\<noteq> zz &&& zz \\<noteq> z) &&&\n    z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t1\n  z \\<notin> FvarsT t2\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "define x where \"x \\<equiv> getFr [xx,yy,zz,z] [t1,t2] []\""], ["proof (state)\nthis:\n  x \\<equiv> getFr [xx, yy, zz, z] [t1, t2] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "have x_facts[simp]: \"x \\<in> var\" \"x \\<noteq> xx\" \"x \\<noteq> yy\" \"x \\<noteq> zz\" \"zz \\<noteq> x\" \"x \\<noteq> z\" \"z \\<noteq> x\" \"x \\<notin> FvarsT t1\"\"x \\<notin> FvarsT t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t1 &&& x \\<notin> FvarsT t2", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz,z]\" \"[t1,t2]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz, z] \\<subseteq> var;\n   set [t1, t2] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz, z] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz, z] [t1, t2] []\n                    \\<notin> set [xx, yy, zz, z] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy, zz, z] [t1, t2] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz, z] [t1, t2] []\n                     \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t1 &&& x \\<notin> FvarsT t2", "using assms1"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz, z] \\<subseteq> var;\n   set [t1, t2] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz, z] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz, z] [t1, t2] []\n                    \\<notin> set [xx, yy, zz, z] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy, zz, z] [t1, t2] []\n                     \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz, z] [t1, t2] []\n                     \\<notin> Fvars ?\\<phi>)\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t1 &&& x \\<notin> FvarsT t2", "unfolding x_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz, z] \\<subseteq> var;\n   set [t1, t2] \\<subseteq> trm; set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> x \\<in> var \\<and>\n                    x \\<notin> set [xx, yy, zz, z] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     x \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     x \\<notin> Fvars ?\\<phi>)\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t1 &&& x \\<notin> FvarsT t2", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<noteq> xx\n  x \\<noteq> yy\n  x \\<noteq> zz\n  zz \\<noteq> x\n  x \\<noteq> z\n  z \\<noteq> x\n  x \\<notin> FvarsT t1\n  x \\<notin> FvarsT t2\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "note assms[simp]"], ["proof (state)\nthis:\n  t1 \\<in> atrm\n  t2 \\<in> atrm\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "note LLq_pls[of _ _ z, simp]"], ["proof (state)\nthis:\n  \\<lbrakk>?t1.0 \\<in> atrm; ?t2.0 \\<in> atrm; z \\<in> var;\n   z \\<notin> FvarsT ?t1.0; z \\<notin> FvarsT ?t2.0\\<rbrakk>\n  \\<Longrightarrow> LLq ?t1.0 ?t2.0 = exi z (eql ?t2.0 (pls (Var z) ?t1.0))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (exi z (eql t2 (pls (Var z) t1)))\n       (exi z (eql (suc t2) (pls (Var z) (suc t1)))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi z (eql t2 (pls (Var z) t1))}\n     (exi z (eql (suc t2) (pls (Var z) (suc t1))))", "apply(nrule r: nprv_exiE0[of z \"eql t2 (pls (Var z) t1)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 (pls (Var z) t1), exi z (eql t2 (pls (Var z) t1))}\n     (exi z (eql (suc t2) (pls (Var z) (suc t1))))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 (pls (Var z) t1)}\n     (exi z (eql (suc t2) (pls (Var z) (suc t1))))", "apply(nrule r: nprv_exiI[of _ _ \"Var z\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 (pls (Var z) t1)} (eql (suc t2) (pls (Var z) (suc t1)))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of \"Var z\" t1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (Var z) (suc t1)) (suc (pls (Var z) t1)),\n      eql t2 (pls (Var z) t1)}\n     (eql (suc t2) (pls (Var z) (suc t1)))", "apply(nrule r: nprv_eql_substE[of _\n    \"pls (Var z) (suc t1)\" \"suc (pls (Var z) t1)\"\n    \"eql (suc t2) (Var x)\" x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (Var z) (suc t1)) (suc (pls (Var z) t1)),\n      eql t2 (pls (Var z) t1)}\n     (eql (suc t2) (suc (pls (Var z) t1)))", "apply(nrule r: nprv_clear2_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t2 (pls (Var z) t1)} (eql (suc t2) (suc (pls (Var z) t1)))", "apply(nrule r: nprv_suc_congI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (LLq t1 t2) (LLq (suc t1) (suc t2)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_suc_mono_LLqI = nprv_addImpLemmaI[OF prv_suc_mono_LLq, simped, rotated 4]"], ["", "lemmas nprv_suc_mono_LLqE = nprv_addImpLemmaE[OF prv_suc_mono_LLq, simped, rotated 2]"], ["", "lemmas nprv_suc_mono_LLqE0 = nprv_suc_mono_LLqE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_suc_mono_LLqE1 = nprv_suc_mono_LLqE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_suc_mono_LLqE01 = nprv_suc_mono_LLqE[OF nprv_hyp nprv_hyp, simped]"], ["", "subsection \\<open>Representability properties\\<close>"], ["", "text \\<open>Representability of number inequality\\<close>"], ["", "lemma prv_neg_eql_suc_Num_zer:\n\"prv (neg (eql (suc (Num n)) zer))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (suc (Num n)) zer))", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. prv (neg (eql (suc (Num 0)) zer))\n 2. \\<And>n.\n       prv (neg (eql (suc (Num n)) zer)) \\<Longrightarrow>\n       prv (neg (eql (suc (Num (Suc n))) zer))", "apply (metis Num Num.simps(1) Num_atrm eql fls in_num neg_def prv_eql_sym prv_neg_zer_suc prv_prv_imp_trans suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (neg (eql (suc (Num n)) zer)) \\<Longrightarrow>\n       prv (neg (eql (suc (Num (Suc n))) zer))", "by (metis Num_atrm atrm_imp_trm eql fls neg_def prv_eql_sym prv_neg_zer_suc prv_prv_imp_trans suc zer_atrm)"], ["", "lemma diff_prv_eql_Num:\nassumes \"m \\<noteq> n\"\nshows \"prv (neg (eql (Num m) (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (Num m) (Num n)))", "using assms"], ["proof (prove)\nusing this:\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. prv (neg (eql (Num m) (Num n)))", "proof(induct m arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<noteq> n \\<Longrightarrow> prv (neg (eql (Num 0) (Num n)))\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "case 0"], ["proof (state)\nthis:\n  0 \\<noteq> n\n\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<noteq> n \\<Longrightarrow> prv (neg (eql (Num 0) (Num n)))\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "then"], ["proof (chain)\npicking this:\n  0 \\<noteq> n", "obtain n' where n: \"n = Suc n'\""], ["proof (prove)\nusing this:\n  0 \\<noteq> n\n\ngoal (1 subgoal):\n 1. (\\<And>n'. n = Suc n' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<noteq> n \\<Longrightarrow> prv (neg (eql (Num 0) (Num n)))\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "thus ?case"], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. prv (neg (eql (Num 0) (Num n)))", "unfolding n"], ["proof (prove)\nusing this:\n  Suc n' = Suc n'\n\ngoal (1 subgoal):\n 1. prv (neg (eql (Num 0) (Num (Suc n'))))", "by (simp add: prv_neg_zer_suc)"], ["proof (state)\nthis:\n  prv (neg (eql (Num 0) (Num n)))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "case (Suc m n)"], ["proof (state)\nthis:\n  m \\<noteq> ?n \\<Longrightarrow> prv (neg (eql (Num m) (Num ?n)))\n  Suc m \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "note s = Suc"], ["proof (state)\nthis:\n  m \\<noteq> ?n \\<Longrightarrow> prv (neg (eql (Num m) (Num ?n)))\n  Suc m \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<noteq> n \\<Longrightarrow>\n                   prv (neg (eql (Num m) (Num n)));\n        Suc m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (Num (Suc m)) (Num n)))", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. prv (neg (eql (Num (Suc m)) (Num n)))", "by (simp add: prv_neg_eql_suc_Num_zer)"], ["proof (state)\nthis:\n  prv (neg (eql (Num (Suc m)) (Num n)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "note n = Suc"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> prv (neg (eql (Num (Suc m)) (Num n)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. prv (neg (eql (Num (Suc m)) (Num n)))", "using s"], ["proof (prove)\nusing this:\n  n = Suc n'\n  m \\<noteq> ?n \\<Longrightarrow> prv (neg (eql (Num m) (Num ?n)))\n  Suc m \\<noteq> n\n\ngoal (1 subgoal):\n 1. prv (neg (eql (Num (Suc m)) (Num n)))", "by simp (meson Num Num_atrm eql in_num neg prv_imp_mp prv_imp_neg_rev prv_inj_suc suc)"], ["proof (state)\nthis:\n  prv (neg (eql (Num (Suc m)) (Num n)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv (neg (eql (Num (Suc m)) (Num n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consistent_prv_eql_Num_equal:\nassumes consistent and \"prv (eql (Num m) (Num n))\"\nshows \"m = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "using assms consistent_def3 diff_prv_eql_Num in_num"], ["proof (prove)\nusing this:\n  consistent\n  prv (eql (Num m) (Num n))\n  consistent =\n  (\\<forall>\\<phi>\\<in>fmla. \\<not> (prv \\<phi> \\<and> prv (neg \\<phi>)))\n  ?m \\<noteq> ?n \\<Longrightarrow> prv (neg (eql (Num ?m) (Num ?n)))\n  ?n \\<in> num \\<Longrightarrow> ?n \\<in> trm\n\ngoal (1 subgoal):\n 1. m = n", "by blast"], ["", "text \\<open>Representability of addition\\<close>"], ["", "lemma prv_pls_zer_zer:\n\"prv (eql (pls zer zer) zer)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls zer zer) zer)", "by (simp add: prv_pls_zer)"], ["", "lemma prv_eql_pls_plus:\n\"prv (eql (pls (Num m) (Num n))\n          (Num (m+n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls (Num m) (Num n)) (Num (m + n)))", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. prv (eql (pls (Num m) (Num 0)) (Num (m + 0)))\n 2. \\<And>n.\n       prv (eql (pls (Num m) (Num n)) (Num (m + n))) \\<Longrightarrow>\n       prv (eql (pls (Num m) (Num (Suc n))) (Num (m + Suc n)))", "case (Suc n)"], ["proof (state)\nthis:\n  prv (eql (pls (Num m) (Num n)) (Num (m + n)))\n\ngoal (2 subgoals):\n 1. prv (eql (pls (Num m) (Num 0)) (Num (m + 0)))\n 2. \\<And>n.\n       prv (eql (pls (Num m) (Num n)) (Num (m + n))) \\<Longrightarrow>\n       prv (eql (pls (Num m) (Num (Suc n))) (Num (m + Suc n)))", "note 0 = prv_pls_suc[of \"Num m\" \"Num n\", simplified]"], ["proof (state)\nthis:\n  prv (eql (pls (Num m) (suc (Num n))) (suc (pls (Num m) (Num n))))\n\ngoal (2 subgoals):\n 1. prv (eql (pls (Num m) (Num 0)) (Num (m + 0)))\n 2. \\<And>n.\n       prv (eql (pls (Num m) (Num n)) (Num (m + n))) \\<Longrightarrow>\n       prv (eql (pls (Num m) (Num (Suc n))) (Num (m + Suc n)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls (Num m) (Num (Suc n))) (Num (m + Suc n)))", "by (auto intro: prv_eql_trans[OF _ _ _ 0 prv_suc_cong[OF _ _ Suc]])"], ["proof (state)\nthis:\n  prv (eql (pls (Num m) (Num (Suc n))) (Num (m + Suc n)))\n\ngoal (1 subgoal):\n 1. prv (eql (pls (Num m) (Num 0)) (Num (m + 0)))", "qed(simp add: prv_pls_zer)"], ["", "lemma not_plus_prv_neg_eql_pls:\nassumes \"m + n \\<noteq> k\"\nshows \"prv (neg (eql (pls (Num m) (Num n)) (Num k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls (Num m) (Num n)) (Num k)))", "using assms"], ["proof (prove)\nusing this:\n  m + n \\<noteq> k\n\ngoal (1 subgoal):\n 1. prv (neg (eql (pls (Num m) (Num n)) (Num k)))", "proof(induction n arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       m + 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (pls (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "case 0"], ["proof (state)\nthis:\n  m + 0 \\<noteq> k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m + 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (pls (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "hence m: \"m \\<noteq> k\""], ["proof (prove)\nusing this:\n  m + 0 \\<noteq> k\n\ngoal (1 subgoal):\n 1. m \\<noteq> k", "by simp"], ["proof (state)\nthis:\n  m \\<noteq> k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m + 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (pls (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "note diff_prv_eql_Num[OF m, simp]"], ["proof (state)\nthis:\n  prv (neg (eql (Num m) (Num k)))\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m + 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (pls (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls (Num m) (Num 0)) (Num k)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls (Num m) zer) (Num k)))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_zer, of \"Num m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (Num m) zer) (Num m)}\n     (neg (eql (pls (Num m) zer) (Num k)))", "apply(nrule r: nprv_eql_substE\n    [of _ \"pls (Num m) zer\" \"Num m\" \"neg (eql (Var xx) (Num k))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (Num m) zer) (Num m)} (neg (eql (Num m) (Num k)))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (eql (pls (Num m) (Num 0)) (Num k)))\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "case (Suc n)"], ["proof (state)\nthis:\n  m + n \\<noteq> ?k \\<Longrightarrow>\n  prv (neg (eql (pls (Num m) (Num n)) (Num ?k)))\n  m + Suc n \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "have 0: \"\\<And>k'. k = Suc k' \\<Longrightarrow>\n    prv (neg (eql (pls (Num m) (Num n)) (Num k'))) \\<and> m + n \\<noteq> k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k'.\n       k = Suc k' \\<Longrightarrow>\n       prv (neg (eql (pls (Num m) (Num n)) (Num k'))) \\<and>\n       m + n \\<noteq> k'", "using Suc.IH Suc.prems"], ["proof (prove)\nusing this:\n  m + n \\<noteq> ?k \\<Longrightarrow>\n  prv (neg (eql (pls (Num m) (Num n)) (Num ?k)))\n  m + Suc n \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       k = Suc k' \\<Longrightarrow>\n       prv (neg (eql (pls (Num m) (Num n)) (Num k'))) \\<and>\n       m + n \\<noteq> k'", "by auto"], ["proof (state)\nthis:\n  k = Suc ?k' \\<Longrightarrow>\n  prv (neg (eql (pls (Num m) (Num n)) (Num ?k'))) \\<and> m + n \\<noteq> ?k'\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m + n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (pls (Num m) (Num n)) (Num k)));\n        m + Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls (Num m) (suc (Num n))) (Num k)))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc, of \"Num m\" \"Num n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (Num m) (suc (Num n))) (suc (pls (Num m) (Num n)))}\n     (neg (eql (pls (Num m) (suc (Num n))) (Num k)))", "apply(nrule r: nprv_eql_substE[of _ \"pls (Num m) (suc (Num n))\"\n     \"suc (pls (Num m) (Num n))\" \"neg (eql (Var xx) (Num k))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (Num m) (suc (Num n))) (suc (pls (Num m) (Num n)))}\n     (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "apply(cases k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    nprv {} (neg (eql (suc (pls (Num m) (Num n))) (Num k)))\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       nprv {} (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = 0 \\<Longrightarrow>\n    nprv {} (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "by (nprover2 r1: prv_nprvI r2: prv_neg_suc_zer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       nprv {} (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "subgoal for k'"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = Suc k' \\<Longrightarrow>\n    nprv {} (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "apply(frule 0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k = Suc k';\n     prv (neg (eql (pls (Num m) (Num n)) (Num k'))) \\<and>\n     m + n \\<noteq> k'\\<rbrakk>\n    \\<Longrightarrow> nprv {}\n                       (neg (eql (suc (pls (Num m) (Num n))) (Num k)))", "by (nprover4 r1: nprv_addLemmaE r2: nprv_negI\n        r3: nprv_negE0 r4: nprv_eql_sucI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (eql (pls (Num m) (Num (Suc n))) (Num k)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consistent_prv_eql_pls_plus_rev:\nassumes \"consistent\" \"prv (eql (pls (Num m) (Num n)) (Num k))\"\nshows \"k = m + n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = m + n", "by (metis Num assms consistent_def eql not_plus_prv_neg_eql_pls num pls prv_neg_fls subsetCE)"], ["", "text \\<open>Representability of multiplication\\<close>"], ["", "lemma prv_tms_Num_zer:\n\"prv (eql (tms (Num n) zer) zer)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (tms (Num n) zer) zer)", "by(auto simp: prv_tms_zer)"], ["", "lemma prv_eql_tms_times:\n\"prv (eql (tms (Num m) (Num n)) (Num (m * n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (tms (Num m) (Num n)) (Num (m * n)))", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. prv (eql (tms (Num m) (Num 0)) (Num (m * 0)))\n 2. \\<And>n.\n       prv (eql (tms (Num m) (Num n)) (Num (m * n))) \\<Longrightarrow>\n       prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))", "case (Suc n)"], ["proof (state)\nthis:\n  prv (eql (tms (Num m) (Num n)) (Num (m * n)))\n\ngoal (2 subgoals):\n 1. prv (eql (tms (Num m) (Num 0)) (Num (m * 0)))\n 2. \\<And>n.\n       prv (eql (tms (Num m) (Num n)) (Num (m * n))) \\<Longrightarrow>\n       prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))", "note 0 = prv_pls_congL[OF _ _ _ Suc, of \"Num m\", simplified]"], ["proof (state)\nthis:\n  prv (eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num (m * n)) (Num m)))\n\ngoal (2 subgoals):\n 1. prv (eql (tms (Num m) (Num 0)) (Num (m * 0)))\n 2. \\<And>n.\n       prv (eql (tms (Num m) (Num n)) (Num (m * n))) \\<Longrightarrow>\n       prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))", "thm prv_pls_cong[no_vars]"], ["proof (state)\nthis:\n  prv (eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num (m * n)) (Num m)))\n\ngoal (2 subgoals):\n 1. prv (eql (tms (Num m) (Num 0)) (Num (m * 0)))\n 2. \\<And>n.\n       prv (eql (tms (Num m) (Num n)) (Num (m * n))) \\<Longrightarrow>\n       prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))", "note add.commute[simp]"], ["proof (state)\nthis:\n  ?a + ?b = ?b + ?a\n\ngoal (2 subgoals):\n 1. prv (eql (tms (Num m) (Num 0)) (Num (m * 0)))\n 2. \\<And>n.\n       prv (eql (tms (Num m) (Num n)) (Num (m * n))) \\<Longrightarrow>\n       prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_addLemmaE[OF 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num (m * n)) (Num m))}\n     (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_addLemmaE[OF prv_tms_suc[of \"Num m\" \"Num n\", simplified]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (tms (Num m) (suc (Num n))) (pls (tms (Num m) (Num n)) (Num m)),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num (m * n)) (Num m))}\n     (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_eql_transE01[of\n      \"tms (Num m) (suc (Num n))\"\n      \"pls (tms (Num m) (Num n)) (Num m)\" _\n      \"pls (Num (m * n)) (Num m)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (tms (Num m) (suc (Num n))) (pls (Num (m * n)) (Num m)),\n      eql (tms (Num m) (suc (Num n))) (pls (tms (Num m) (Num n)) (Num m)),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num (m * n)) (Num m))}\n     (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (tms (Num m) (suc (Num n))) (pls (Num (m * n)) (Num m)),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num (m * n)) (Num m))}\n     (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (tms (Num m) (suc (Num n))) (pls (Num (m * n)) (Num m))}\n     (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_addLemmaE[OF prv_eql_pls_plus[of \"m * n\" m]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (Num (m * n)) (Num m)) (Num (m + m * n)),\n      eql (tms (Num m) (suc (Num n))) (pls (Num (m * n)) (Num m))}\n     (eql (tms (Num m) (suc (Num n))) (Num (m + m * n)))", "apply(nrule r: nprv_eql_transE01[of\n      \"tms (Num m) (suc (Num n))\"\n      \"pls (Num (m * n)) (Num m)\" _\n      \"Num (m * n + m)\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (eql (tms (Num m) (Num (Suc n))) (Num (m * Suc n)))\n\ngoal (1 subgoal):\n 1. prv (eql (tms (Num m) (Num 0)) (Num (m * 0)))", "qed(auto simp: prv_tms_zer)"], ["", "lemma ge_prv_neg_eql_pls_Num_zer:\nassumes [simp]: \"t \\<in> atrm\" and m: \"m > k\"\nshows \"prv (neg (eql (pls t (Num m)) (Num k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num k)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num k)))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t] []\n\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num k)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n  t \\<in> atrm\n  k < m\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n  t \\<in> atrm\n  k < m\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num k)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num k)))", "using m"], ["proof (prove)\nusing this:\n  k < m\n\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num k)))", "proof(induction k arbitrary: m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m. 0 < m \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))\n 2. \\<And>k m.\n       \\<lbrakk>\\<And>m.\n                   k < m \\<Longrightarrow>\n                   prv (neg (eql (pls t (Num m)) (Num k)));\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num (Suc k))))", "case (0 m)"], ["proof (state)\nthis:\n  0 < m\n\ngoal (2 subgoals):\n 1. \\<And>m. 0 < m \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))\n 2. \\<And>k m.\n       \\<lbrakk>\\<And>m.\n                   k < m \\<Longrightarrow>\n                   prv (neg (eql (pls t (Num m)) (Num k)));\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num (Suc k))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num m)) (Num 0)))", "apply(cases m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))\n 2. \\<And>nat.\n       m = Suc nat \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = 0 \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))", "using 0"], ["proof (prove)\nusing this:\n  0 < m\n\ngoal (1 subgoal):\n 1. m = 0 \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       m = Suc nat \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))", "subgoal for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num 0)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {} (neg (eql (pls t (suc (Num n))) zer))", "apply(nrule r: nprv_addLemmaE[OF prv_neg_suc_zer[of \"pls t (Num n)\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {neg (eql (suc (pls t (Num n))) zer)}\n     (neg (eql (pls t (suc (Num n))) zer))", "apply(nrule r: nprv_negI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv\n     {eql (pls t (suc (Num n))) zer, neg (eql (suc (pls t (Num n))) zer)}\n     fls", "apply(nrule r: nprv_negE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv\n     {eql (pls t (suc (Num n))) zer, neg (eql (suc (pls t (Num n))) zer)}\n     (eql (suc (pls t (Num n))) zer)", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {eql (pls t (suc (Num n))) zer} (eql (suc (pls t (Num n))) zer)", "apply(nrule r: nprv_eql_symE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {eql zer (pls t (suc (Num n))), eql (pls t (suc (Num n))) zer}\n     (eql (suc (pls t (Num n))) zer)", "apply(nrule r: nprv_eql_substE[of _ zer \"pls t (suc (Num n))\" \"eql (suc (pls t (Num n))) (Var z)\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {eql zer (pls t (suc (Num n))), eql (pls t (suc (Num n))) zer}\n     (eql (suc (pls t (Num n))) (pls t (suc (Num n))))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {} (eql (suc (pls t (Num n))) (pls t (suc (Num n))))", "apply(nrule r: nprv_eql_symI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    nprv {} (eql (pls t (suc (Num n))) (suc (pls t (Num n))))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc n \\<Longrightarrow>\n    prv (eql (pls t (suc (Num n))) (suc (pls t (Num n))))", "apply(nrule r: prv_pls_suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (eql (pls t (Num m)) (Num 0)))\n\ngoal (1 subgoal):\n 1. \\<And>k m.\n       \\<lbrakk>\\<And>m.\n                   k < m \\<Longrightarrow>\n                   prv (neg (eql (pls t (Num m)) (Num k)));\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num (Suc k))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k m.\n       \\<lbrakk>\\<And>m.\n                   k < m \\<Longrightarrow>\n                   prv (neg (eql (pls t (Num m)) (Num k)));\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num (Suc k))))", "case (Suc k mm)"], ["proof (state)\nthis:\n  k < ?m \\<Longrightarrow> prv (neg (eql (pls t (Num ?m)) (Num k)))\n  Suc k < mm\n\ngoal (1 subgoal):\n 1. \\<And>k m.\n       \\<lbrakk>\\<And>m.\n                   k < m \\<Longrightarrow>\n                   prv (neg (eql (pls t (Num m)) (Num k)));\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num (Suc k))))", "then"], ["proof (chain)\npicking this:\n  k < ?m \\<Longrightarrow> prv (neg (eql (pls t (Num ?m)) (Num k)))\n  Suc k < mm", "obtain m where mm[simp]: \"mm = Suc m\" and k: \"k < m\""], ["proof (prove)\nusing this:\n  k < ?m \\<Longrightarrow> prv (neg (eql (pls t (Num ?m)) (Num k)))\n  Suc k < mm\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>mm = Suc m; k < m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases mm) auto"], ["proof (state)\nthis:\n  mm = Suc m\n  k < m\n\ngoal (1 subgoal):\n 1. \\<And>k m.\n       \\<lbrakk>\\<And>m.\n                   k < m \\<Longrightarrow>\n                   prv (neg (eql (pls t (Num m)) (Num k)));\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (pls t (Num m)) (Num (Suc k))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (Num mm)) (Num (Suc k))))", "unfolding mm Num.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (pls t (suc (Num m))) (suc (Num k))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls t (suc (Num m))) (suc (Num k))))", "apply(nrule r: nprv_addLemmaE[OF Suc.IH[OF k]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {neg (eql (pls t (Num m)) (Num k))}\n     (neg (eql (pls t (suc (Num m))) (suc (Num k))))", "apply(nrule r: nprv_negI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls t (suc (Num m))) (suc (Num k)),\n      neg (eql (pls t (Num m)) (Num k))}\n     fls", "apply(nrule r: nprv_negE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls t (suc (Num m))) (suc (Num k)),\n      neg (eql (pls t (Num m)) (Num k))}\n     (eql (pls t (Num m)) (Num k))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t (suc (Num m))) (suc (Num k))}\n     (eql (pls t (Num m)) (Num k))", "apply(nrule r: nprv_impI_rev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql (pls t (suc (Num m))) (suc (Num k)))\n       (eql (pls t (Num m)) (Num k)))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of t \"Num m\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t (suc (Num m))) (suc (pls t (Num m)))}\n     (imp (eql (pls t (suc (Num m))) (suc (Num k)))\n       (eql (pls t (Num m)) (Num k)))", "apply(nrule r: nprv_eql_substE[of _ \"pls t (suc (Num m))\" \"suc (pls t (Num m))\"\n      \"imp (eql (Var z) (suc (Num k))) (eql (pls t (Num m)) (Num k))\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t (suc (Num m))) (suc (pls t (Num m)))}\n     (imp (eql (suc (pls t (Num m))) (suc (Num k)))\n       (eql (pls t (Num m)) (Num k)))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql (suc (pls t (Num m))) (suc (Num k)))\n       (eql (pls t (Num m)) (Num k)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (suc (pls t (Num m))) (suc (Num k))}\n     (eql (pls t (Num m)) (Num k))", "apply(nrule r: nprv_eql_sucI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (eql (pls t (Num mm)) (Num (Suc k))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv (neg (eql (pls t (Num m)) (Num k)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nprv_pls_Num_injectR:\nassumes [simp]: \"t1 \\<in> atrm\" \"t2 \\<in> atrm\"\nshows \"prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n                (eql t1 t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))", "define z where \"z \\<equiv> getFr [xx,yy] [t1,t2] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy] [t1, t2] []\n\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<notin> FvarsT t1\" \"z \\<notin> FvarsT t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "using getFr_FvarsT_Fvars[of \"[xx,yy]\" \"[t1,t2]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy] [t1, t2] [] \\<in> var \\<and>\n                    getFr [xx, yy] [t1, t2] [] \\<notin> set [xx, yy] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     getFr [xx, yy] [t1, t2] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy] [t1, t2] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy] \\<subseteq> var; set [t1, t2] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy] \\<and>\n                    (?t \\<in> set [t1, t2] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t1 &&& z \\<notin> FvarsT t2", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<notin> FvarsT t1\n  z \\<notin> FvarsT t2\n\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))", "proof(induction m)"], ["proof (state)\ngoal (2 subgoals):\n 1. prv (imp (eql (pls t1 (Num 0)) (pls t2 (Num 0))) (eql t1 t2))\n 2. \\<And>m.\n       prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n             (eql t1 t2)) \\<Longrightarrow>\n       prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n             (eql t1 t2))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. prv (imp (eql (pls t1 (Num 0)) (pls t2 (Num 0))) (eql t1 t2))\n 2. \\<And>m.\n       prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n             (eql t1 t2)) \\<Longrightarrow>\n       prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n             (eql t1 t2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num 0)) (pls t2 (Num 0))) (eql t1 t2))", "unfolding Num.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 zer) (pls t2 zer)) (eql t1 t2))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (imp (eql (pls t1 zer) (pls t2 zer)) (eql t1 t2))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_zer[of t1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t1 zer) t1}\n     (imp (eql (pls t1 zer) (pls t2 zer)) (eql t1 t2))", "apply(nrule r: nprv_eql_substE[of _ \"pls t1 zer\" \"t1\" \"imp (eql (Var z) (pls t2 zer)) (eql t1 t2)\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t1 zer) t1} (imp (eql t1 (pls t2 zer)) (eql t1 t2))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (imp (eql t1 (pls t2 zer)) (eql t1 t2))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_zer[of t2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t2 zer) t2} (imp (eql t1 (pls t2 zer)) (eql t1 t2))", "apply(nrule r: nprv_eql_substE[of _ \"pls t2 zer\" \"t2\" \"imp (eql t1 (Var z)) (eql t1 t2)\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t2 zer) t2} (imp (eql t1 t2) (eql t1 t2))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (eql (pls t1 (Num 0)) (pls t2 (Num 0))) (eql t1 t2))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n             (eql t1 t2)) \\<Longrightarrow>\n       prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n             (eql t1 t2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n             (eql t1 t2)) \\<Longrightarrow>\n       prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n             (eql t1 t2))", "case (Suc m)"], ["proof (state)\nthis:\n  prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n             (eql t1 t2)) \\<Longrightarrow>\n       prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n             (eql t1 t2))", "note Suc.IH[simp]"], ["proof (state)\nthis:\n  prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m)))\n             (eql t1 t2)) \\<Longrightarrow>\n       prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n             (eql t1 t2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m))))\n          (eql t1 t2))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql (pls t1 (suc (Num m))) (pls t2 (suc (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of t1 \"Num m\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t1 (suc (Num m))) (suc (pls t1 (Num m)))}\n     (imp (eql (pls t1 (suc (Num m))) (pls t2 (suc (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_eql_substE[of _ \"pls t1 (suc (Num m))\" \"suc (pls t1 (Num m))\"\n     \"imp (eql (Var z) (pls t2 (suc (Num m)))) (eql t1 t2)\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t1 (suc (Num m))) (suc (pls t1 (Num m)))}\n     (imp (eql (suc (pls t1 (Num m))) (pls t2 (suc (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql (suc (pls t1 (Num m))) (pls t2 (suc (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of t2 \"Num m\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t2 (suc (Num m))) (suc (pls t2 (Num m)))}\n     (imp (eql (suc (pls t1 (Num m))) (pls t2 (suc (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_eql_substE[of _ \"pls t2 (suc (Num m))\" \"suc (pls t2 (Num m))\"\n       \"imp (eql (suc (pls t1 (Num m))) (Var z)) (eql t1 t2)\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t2 (suc (Num m))) (suc (pls t2 (Num m)))}\n     (imp (eql (suc (pls t1 (Num m))) (suc (pls t2 (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (eql (suc (pls t1 (Num m))) (suc (pls t2 (Num m)))) (eql t1 t2))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (suc (pls t1 (Num m))) (suc (pls t2 (Num m)))} (eql t1 t2)", "apply(nrule r: nprv_eql_sucE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls t1 (Num m)) (pls t2 (Num m)),\n      eql (suc (pls t1 (Num m))) (suc (pls t2 (Num m)))}\n     (eql t1 t2)", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls t1 (Num m)) (pls t2 (Num m))} (eql t1 t2)", "apply(nrule r: prv_nprv1I)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (eql (pls t1 (Num (Suc m))) (pls t2 (Num (Suc m)))) (eql t1 t2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv (imp (eql (pls t1 (Num m)) (pls t2 (Num m))) (eql t1 t2))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_pls_Num_injectI = nprv_addImpLemmaI[OF nprv_pls_Num_injectR, simped, rotated 4]"], ["", "lemmas nprv_pls_Num_injectE = nprv_addImpLemmaE[OF nprv_pls_Num_injectR, simped, rotated 2]"], ["", "lemmas nprv_pls_Num_injectE0 = nprv_pls_Num_injectE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_pls_Num_injectE1 = nprv_pls_Num_injectE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_pls_Num_injectE01 = nprv_pls_Num_injectE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemma not_times_prv_neg_eql_tms:\nassumes \"m * n \\<noteq> k\"\nshows \"prv (neg (eql (tms (Num m) (Num n)) (Num k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (tms (Num m) (Num n)) (Num k)))", "using assms"], ["proof (prove)\nusing this:\n  m * n \\<noteq> k\n\ngoal (1 subgoal):\n 1. prv (neg (eql (tms (Num m) (Num n)) (Num k)))", "proof(induction n arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       m * 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (tms (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "case 0"], ["proof (state)\nthis:\n  m * 0 \\<noteq> k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m * 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (tms (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "hence m: \"0 \\<noteq> k\""], ["proof (prove)\nusing this:\n  m * 0 \\<noteq> k\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> k", "by simp"], ["proof (state)\nthis:\n  0 \\<noteq> k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m * 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (tms (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "have zer: \"zer = Num 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zer = Num 0", "by simp"], ["proof (state)\nthis:\n  zer = Num 0\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m * 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (tms (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "have [simp]: \"prv (neg (eql zer (Num k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql zer (Num k)))", "by (subst zer, rule diff_prv_eql_Num[OF m])"], ["proof (state)\nthis:\n  prv (neg (eql zer (Num k)))\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       m * 0 \\<noteq> k \\<Longrightarrow>\n       prv (neg (eql (tms (Num m) (Num 0)) (Num k)))\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (tms (Num m) (Num 0)) (Num k)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (tms (Num m) zer) (Num k)))", "apply(nrule r: nprv_addLemmaE[OF prv_tms_zer, of \"Num m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (tms (Num m) zer) zer} (neg (eql (tms (Num m) zer) (Num k)))", "apply(nrule r: nprv_eql_substE[of _ \"tms (Num m) zer\" zer \"neg (eql (Var xx) (Num k))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (tms (Num m) zer) zer} (neg (eql zer (Num k)))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (eql (tms (Num m) (Num 0)) (Num k)))\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "case (Suc n)"], ["proof (state)\nthis:\n  m * n \\<noteq> ?k \\<Longrightarrow>\n  prv (neg (eql (tms (Num m) (Num n)) (Num ?k)))\n  m * Suc n \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "have [simp]: \"nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "proof(cases \"k < m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))\n 2. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "case [simp]: True"], ["proof (state)\nthis:\n  k < m\n\ngoal (2 subgoals):\n 1. k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))\n 2. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  k < m\n\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "by (nprover2 r1: prv_nprvI r2: ge_prv_neg_eql_pls_Num_zer)"], ["proof (state)\nthis:\n  nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))\n\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "case False"], ["proof (state)\nthis:\n  \\<not> k < m\n\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "define k' where \"k' \\<equiv> k - m\""], ["proof (state)\nthis:\n  k' \\<equiv> k - m\n\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "with False"], ["proof (chain)\npicking this:\n  \\<not> k < m\n  k' \\<equiv> k - m", "have k: \"k = k' + m\""], ["proof (prove)\nusing this:\n  \\<not> k < m\n  k' \\<equiv> k - m\n\ngoal (1 subgoal):\n 1. k = k' + m", "by auto"], ["proof (state)\nthis:\n  k = k' + m\n\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "hence mm: \"m * n \\<noteq> k'\""], ["proof (prove)\nusing this:\n  k = k' + m\n\ngoal (1 subgoal):\n 1. m * n \\<noteq> k'", "using False Suc.prems"], ["proof (prove)\nusing this:\n  k = k' + m\n  \\<not> k < m\n  m * Suc n \\<noteq> k\n\ngoal (1 subgoal):\n 1. m * n \\<noteq> k'", "by auto"], ["proof (state)\nthis:\n  m * n \\<noteq> k'\n\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "note IH = Suc.IH[OF mm]"], ["proof (state)\nthis:\n  prv (neg (eql (tms (Num m) (Num n)) (Num k')))\n\ngoal (1 subgoal):\n 1. \\<not> k < m \\<Longrightarrow>\n    nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "unfolding k"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num (k' + m))))", "apply(nrule r: nprv_negI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (tms (Num m) (Num n)) (Num m)) (Num (k' + m))} fls", "apply(nrule r: nprv_addLemmaE[OF prv_prv_eql_sym[OF _ _ prv_eql_pls_plus[of k' m]]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Num (k' + m)) (pls (Num k') (Num m)),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (Num (k' + m))}\n     fls", "apply(nrule r: nprv_eql_transE01[of _ \"Num (k' + m)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num k') (Num m)),\n      eql (Num (k' + m)) (pls (Num k') (Num m)),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (Num (k' + m))}\n     fls", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num k') (Num m)),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (Num (k' + m))}\n     fls", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num k') (Num m))}\n     fls", "apply(nrule r: nprv_pls_Num_injectE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (tms (Num m) (Num n)) (Num k'),\n      eql (pls (tms (Num m) (Num n)) (Num m)) (pls (Num k') (Num m))}\n     fls", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (tms (Num m) (Num n)) (Num k')} fls", "apply(nrule r: nprv_addLemmaE[OF IH])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {neg (eql (tms (Num m) (Num n)) (Num k')),\n      eql (tms (Num m) (Num n)) (Num k')}\n     fls", "apply(nrule r: nprv_negE0)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nprv {} (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   m * n \\<noteq> k \\<Longrightarrow>\n                   prv (neg (eql (tms (Num m) (Num n)) (Num k)));\n        m * Suc n \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (eql (tms (Num m) (suc (Num n))) (Num k)))", "apply(nrule r: nprv_addLemmaE[OF prv_tms_suc, of \"Num m\" \"Num n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (tms (Num m) (suc (Num n))) (pls (tms (Num m) (Num n)) (Num m))}\n     (neg (eql (tms (Num m) (suc (Num n))) (Num k)))", "apply(nrule r: nprv_eql_substE[of _ \"tms (Num m) (suc (Num n))\" \"pls (tms (Num m) (Num n)) (Num m)\"\n     \"neg (eql (Var xx) (Num k))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (tms (Num m) (suc (Num n))) (pls (tms (Num m) (Num n)) (Num m))}\n     (neg (eql (pls (tms (Num m) (Num n)) (Num m)) (Num k)))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (eql (tms (Num m) (Num (Suc n))) (Num k)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consistent_prv_eql_tms_times_rev:\nassumes \"consistent\" \"prv (eql (tms (Num m) (Num n)) (Num k))\"\nshows \"k = m * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = m * n", "by (metis Num assms consistent_def eql not_times_prv_neg_eql_tms num tms prv_neg_fls subsetCE)"], ["", "text \\<open>Representability of the order\\<close>"], ["", "lemma leq_prv_LLq_Num:\nassumes \"m \\<le> n\"\nshows \"prv (LLq (Num m) (Num n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num n))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num n))", "obtain i where n: \"n = i + m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. n = i + m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms add.commute le_Suc_ex"], ["proof (prove)\nusing this:\n  m \\<le> n\n  ?a + ?b = ?b + ?a\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n\ngoal (1 subgoal):\n 1. (\\<And>i. n = i + m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  n = i + m\n\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num n))", "note prv_eql_pls_plus[simp]"], ["proof (state)\nthis:\n  prv (eql (pls (Num ?m) (Num ?n)) (Num (?m + ?n)))\n\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num n))", "have \"prv (exi zz (eql (Num (i + m)) (pls (Var zz) (Num m))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exi zz (eql (Num (i + m)) (pls (Var zz) (Num m))))", "by(nprover2 r1: prv_exiI[of _ _ \"Num i\"] r2: prv_prv_eql_sym)"], ["proof (state)\nthis:\n  prv (exi zz (eql (Num (i + m)) (pls (Var zz) (Num m))))\n\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (exi zz (eql (Num (i + m)) (pls (Var zz) (Num m))))\n\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num n))", "unfolding n"], ["proof (prove)\nusing this:\n  prv (exi zz (eql (Num (i + m)) (pls (Var zz) (Num m))))\n\ngoal (1 subgoal):\n 1. prv (LLq (Num m) (Num (i + m)))", "by (simp add: LLq_pls_zz)"], ["proof (state)\nthis:\n  prv (LLq (Num m) (Num n))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The \"order-adequacy\" properties\\<close>"], ["", "text \\<open>These are properties Q1--O9 from\nPeter Smith, An Introduction to G?del's theorems, Second Edition, Page 73.\\<close>"], ["", "lemma prv_LLq_zer: \\<comment> \\<open>O1\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (LLq zer t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq zer t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (LLq zer t)", "define z where \"z \\<equiv> getFr [xx,yy] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy] [t] []\n\ngoal (1 subgoal):\n 1. prv (LLq zer t)", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy] [t] [] \\<notin> set [xx, yy] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (LLq zer t)", "have \"prv (exi z (eql t (pls (Var z) zer)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exi z (eql t (pls (Var z) zer)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (exi z (eql t (pls (Var z) zer)))", "apply(nrule r: nprv_exiI[of _ _ t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql t (pls t zer))", "apply(nrule r: nprv_eql_symI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql (pls t zer) t)", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls t zer) t)", "apply(nrule r: prv_pls_zer)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (exi z (eql t (pls (Var z) zer)))\n\ngoal (1 subgoal):\n 1. prv (LLq zer t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (exi z (eql t (pls (Var z) zer)))\n\ngoal (1 subgoal):\n 1. prv (LLq zer t)", "by (simp add: LLq_pls[of _ _ z])"], ["proof (state)\nthis:\n  prv (LLq zer t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas Q1 = prv_LLq_zer"], ["", "lemma prv_LLq_zer_imp_eql:\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t zer) (eql t zer))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "define y where \"y \\<equiv> getFr [] [t] []\""], ["proof (state)\nthis:\n  y \\<equiv> getFr [] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "have y_facts[simp]: \"y \\<in> var\" \"y \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> var &&& y \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [] [t] [] \\<in> var \\<and>\n                    getFr [] [t] [] \\<notin> set [] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. y \\<in> var &&& y \\<notin> FvarsT t", "unfolding y_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> y \\<in> var \\<and>\n                    y \\<notin> set [] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     y \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     y \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. y \\<in> var &&& y \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  y \\<in> var\n  y \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "define z where \"z \\<equiv> getFr [y] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [y] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> y\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> var &&& z \\<noteq> y &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[y]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [y] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [y] [t] [] \\<in> var \\<and>\n                    getFr [y] [t] [] \\<notin> set [y] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [y] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [y] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. z \\<in> var &&& z \\<noteq> y &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [y] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [y] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. z \\<in> var &&& z \\<noteq> y &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> y\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "define x where \"x \\<equiv> getFr [y,z] [t] []\""], ["proof (state)\nthis:\n  x \\<equiv> getFr [y, z] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "have x_facts[simp]: \"x \\<in> var\" \"x \\<noteq> y\" \"x \\<noteq> z\" \"x \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> var &&& x \\<noteq> y) &&& x \\<noteq> z &&& x \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[y,z]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [y, z] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [y, z] [t] [] \\<in> var \\<and>\n                    getFr [y, z] [t] [] \\<notin> set [y, z] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [y, z] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [y, z] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> var &&& x \\<noteq> y) &&& x \\<noteq> z &&& x \\<notin> FvarsT t", "unfolding x_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [y, z] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [y, z] [t] [] \\<in> var \\<and>\n                    getFr [y, z] [t] [] \\<notin> set [y, z] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [y, z] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [y, z] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (getFr [y, z] [t] [] \\<in> var &&& getFr [y, z] [t] [] \\<noteq> y) &&&\n    getFr [y, z] [t] [] \\<noteq> z &&& getFr [y, z] [t] [] \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<noteq> y\n  x \\<noteq> z\n  x \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "note LLq_pls[of _ _ z,simp]"], ["proof (state)\nthis:\n  \\<lbrakk>?t1.0 \\<in> atrm; ?t2.0 \\<in> atrm; z \\<in> var;\n   z \\<notin> FvarsT ?t1.0; z \\<notin> FvarsT ?t2.0\\<rbrakk>\n  \\<Longrightarrow> LLq ?t1.0 ?t2.0 = exi z (eql ?t2.0 (pls (Var z) ?t1.0))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t zer) (eql t zer))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (imp (exi z (eql zer (pls (Var z) t))) (eql t zer))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi z (eql zer (pls (Var z) t))} (eql t zer)", "apply(nrule r: nprv_zer_suc_casesE[of t _ _ y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var y)), exi z (eql zer (pls (Var z) t))} (eql t zer)", "apply(nrule r: nprv_exiE0[of z \"eql zer (pls (Var z) t)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql zer (pls (Var z) t), eql t (suc (Var y)),\n      exi z (eql zer (pls (Var z) t))}\n     (eql t zer)", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql zer (pls (Var z) t), eql t (suc (Var y))} (eql t zer)", "apply(nrule r: nprv_eql_symE0[of t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (suc (Var y)) t, eql zer (pls (Var z) t), eql t (suc (Var y))}\n     (eql t zer)", "apply(nrule r: nprv_eql_substE01[of \"suc (Var y)\" t _ \"eql zer (pls (Var z) (Var x))\" x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql zer (pls (Var z) (suc (Var y))), eql (suc (Var y)) t,\n      eql zer (pls (Var z) t), eql t (suc (Var y))}\n     (eql t zer)", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of \"Var z\" \"Var y\",simplified]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (pls (Var z) (suc (Var y))) (suc (pls (Var z) (Var y))),\n      eql zer (pls (Var z) (suc (Var y))), eql (suc (Var y)) t,\n      eql zer (pls (Var z) t), eql t (suc (Var y))}\n     (eql t zer)", "apply(nrule r: nprv_eql_transE01[of zer \"pls (Var z) (suc (Var y))\" _ \"suc (pls (Var z) (Var y))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql zer (suc (pls (Var z) (Var y))),\n      eql (pls (Var z) (suc (Var y))) (suc (pls (Var z) (Var y))),\n      eql zer (pls (Var z) (suc (Var y))), eql (suc (Var y)) t,\n      eql zer (pls (Var z) t), eql t (suc (Var y))}\n     (eql t zer)", "apply(nrule r: nprv_zer_suc_contrE0[of \"pls (Var z) (Var y)\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (LLq t zer) (eql t zer))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_LLq_zer_eqlI = nprv_addImpLemmaI[OF prv_LLq_zer_imp_eql, simped, rotated 3]"], ["", "lemmas nprv_LLq_zer_eqlE = nprv_addImpLemmaE[OF prv_LLq_zer_imp_eql, simped, rotated 1]"], ["", "lemmas nprv_LLq_zer_eqlE0 = nprv_LLq_zer_eqlE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_LLq_zer_eqlE1 = nprv_LLq_zer_eqlE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_LLq_zer_eqlE01 = nprv_LLq_zer_eqlE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemma prv_sdsj_eql_imp_LLq: \\<comment> \\<open>O2\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))) (LLq t (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "define z where \"z \\<equiv> getFr [xx,yy] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy] [t] [] \\<notin> set [xx, yy] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx) &&&\n    z \\<noteq> yy &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "note imp[rule del, intro!]"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> imp ?\\<phi>1.0 ?\\<phi>2.0 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "note dsj[intro!]"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> dsj ?\\<phi> ?\\<chi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)))\n          (LLq t (Num n)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))) (LLq t (Num n)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))} (LLq t (Num n))", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv {eql t (Num x), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n        (LLq t (Num n))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq t (Num n))", "apply(nrule r: nprv_eql_substE[of _ t \"Num i\" \"LLq (Var z) (Num n)\" z])"], ["proof (prove)\ngoal (3 subgoals):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (eql t (Num i))\n 2. i \\<le> n \\<Longrightarrow>\n    nprv {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq (Num i) (Num n))\n 3. i \\<le> n \\<Longrightarrow>\n    nprv\n     {LLq t (Num n), eql t (Num i),\n      ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq t (Num n))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (eql t (Num i))", "by (nrule r: nprv_hyp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq (Num i) (Num n))\n 2. i \\<le> n \\<Longrightarrow>\n    nprv\n     {LLq t (Num n), eql t (Num i),\n      ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq t (Num n))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq (Num i) (Num n))", "by (nprover3 r1: nprv_addLemmaE[OF leq_prv_LLq_Num])"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv\n     {LLq t (Num n), eql t (Num i),\n      ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq t (Num n))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv\n     {LLq t (Num n), eql t (Num i),\n      ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq t (Num n))", "by (nrule r: nprv_hyp)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))) (LLq t (Num n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "declare subset_eq[simp]"], ["", "lemmas nprv_sdsj_eql_LLqI = nprv_addImpLemmaI[OF prv_sdsj_eql_imp_LLq, simped, rotated 3]"], ["", "lemmas nprv_sdsj_eql_LLqE = nprv_addImpLemmaE[OF prv_sdsj_eql_imp_LLq, simped, rotated 1]"], ["", "declare subset_eq[simp del]"], ["", "lemmas nprv_sdsj_eql_LLqE0 = nprv_sdsj_eql_LLqE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_sdsj_eql_LLqE1 = nprv_sdsj_eql_LLqE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_sdsj_eql_LLqE01 = nprv_sdsj_eql_LLqE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemmas O2I = nprv_sdsj_eql_LLqI"], ["", "lemmas O2E = nprv_sdsj_eql_LLqE"], ["", "lemmas O2E0 = nprv_sdsj_eql_LLqE0"], ["", "lemmas O2E1 = nprv_sdsj_eql_LLqE1"], ["", "lemmas O2E01 = nprv_sdsj_eql_LLqE01"], ["", "(* *)"], ["", "lemma prv_LLq_imp_sdsj_eql: \\<comment> \\<open>O3\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t (Num n)) (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num n))\n          (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))))", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> atrm\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num n))\n          (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))))", "proof(induction n arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (imp (LLq t (Num 0))\n             (ldsj (map (\\<lambda>i. eql t (Num i)) (toN 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "case (0 t)"], ["proof (state)\nthis:\n  t \\<in> atrm\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (imp (LLq t (Num 0))\n             (ldsj (map (\\<lambda>i. eql t (Num i)) (toN 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "note 0[simp]"], ["proof (state)\nthis:\n  t \\<in> atrm\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (imp (LLq t (Num 0))\n             (ldsj (map (\\<lambda>i. eql t (Num i)) (toN 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "note prv_LLq_zer_imp_eql[OF 0,simp]"], ["proof (state)\nthis:\n  prv (imp (LLq t zer) (eql t zer))\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (imp (LLq t (Num 0))\n             (ldsj (map (\\<lambda>i. eql t (Num i)) (toN 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num 0))\n          (ldsj (map (\\<lambda>i. eql t (Num i)) (toN 0))))", "by (nprover4 r1: nprv_prvI r2: nprv_impI r3: nprv_ldsjI r4: prv_nprv1I)"], ["proof (state)\nthis:\n  prv (imp (LLq t (Num 0)) (ldsj (map (\\<lambda>i. eql t (Num i)) (toN 0))))\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "case (Suc n)"], ["proof (state)\nthis:\n  ?t \\<in> atrm \\<Longrightarrow>\n  prv (imp (LLq ?t (Num n))\n        (ldsj (map (\\<lambda>i. eql ?t (Num i)) (toN n))))\n  t \\<in> atrm\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "note  t[simp] = \\<open>t \\<in> atrm\\<close>"], ["proof (state)\nthis:\n  t \\<in> atrm\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t] []\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "note subset_eq[simp]"], ["proof (state)\nthis:\n  (?A \\<subseteq> ?B) = (\\<forall>x\\<in>?A. x \\<in> ?B)\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "have [simp]: \"eql t zer \\<in> (\\<lambda>x. eql t (Num x)) ` {0..Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eql t zer \\<in> (\\<lambda>x. eql t (Num x)) ` {0..Suc n}", "by (force simp: image_def)"], ["proof (state)\nthis:\n  eql t zer \\<in> (\\<lambda>x. eql t (Num x)) ` {0..Suc n}\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "have [simp]: \"\\<And>i. i \\<le> n \\<Longrightarrow>\n    eql (suc (Var z)) (suc (Num i)) \\<in> (\\<lambda>x. eql (suc (Var z)) (Num x)) ` {0..Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> n \\<Longrightarrow>\n       eql (suc (Var z)) (suc (Num i))\n       \\<in> (\\<lambda>x. eql (suc (Var z)) (Num x)) ` {0..Suc n}", "by (auto simp: image_def intro!: bexI[of _ \"Suc _\"])"], ["proof (state)\nthis:\n  ?i \\<le> n \\<Longrightarrow>\n  eql (suc (Var z)) (suc (Num ?i))\n  \\<in> (\\<lambda>x. eql (suc (Var z)) (Num x)) ` {0..Suc n}\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (imp (LLq t (Num n))\n                         (ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (imp (LLq t (Num (Suc n)))\n                               (ldsj\n                                 (map (\\<lambda>i. eql t (Num i))\n                                   (toN (Suc n)))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num (Suc n)))\n          (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (LLq t (suc (Num n)))\n       (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))", "apply(nrule2 r: nprv_zer_suc_casesE[of t _ _ z])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {eql t zer}\n     (imp (LLq t (suc (Num n)))\n       (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))\n 2. nprv {eql t (suc (Var z))}\n     (imp (LLq t (suc (Num n)))\n       (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t zer}\n     (imp (LLq t (suc (Num n)))\n       (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))", "by (nprover3 r1: nprv_impI r2: nprv_clear2_1 r3: nprv_ldsjI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))}\n     (imp (LLq t (suc (Num n)))\n       (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))}\n     (imp (LLq t (suc (Num n)))\n       (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))", "apply(nrule r: nprv_eql_substE[of _ t \"suc (Var z)\"\n         \"imp (LLq (Var xx) (suc (Num n))) (ldsj (map (\\<lambda>i. eql (Var xx) (Num i)) (toN (Suc n))))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))}\n     (imp (LLq (suc (Var z)) (suc (Num n)))\n       (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n)))))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (LLq (suc (Var z)) (suc (Num n)))\n       (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n)))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (suc (Var z)) (suc (Num n))}\n     (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n))))", "apply(nrule r: nprv_LLq_sucE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Var z) (Num n), LLq (suc (Var z)) (suc (Num n))}\n     (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n))))", "apply(nrule r: nprv_addImpLemmaE[OF Suc.IH[of \"Var z\", simplified]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {ldsj (map (\\<lambda>i. eql (Var z) (Num i)) (toN n)),\n      LLq (Var z) (Num n), LLq (suc (Var z)) (suc (Num n))}\n     (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n))))", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv\n        {eql (Var z) (Num x),\n         ldsj (map (\\<lambda>i. eql (Var z) (Num i)) (toN n)),\n         LLq (Var z) (Num n), LLq (suc (Var z)) (suc (Num n))}\n        (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n))))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv\n     {eql (Var z) (Num i),\n      ldsj (map (\\<lambda>i. eql (Var z) (Num i)) (toN n)),\n      LLq (Var z) (Num n), LLq (suc (Var z)) (suc (Num n))}\n     (ldsj (map (\\<lambda>za. eql (suc (Var z)) (Num za)) (toN (Suc n))))", "apply(nrule r: nprv_ldsjI[of _ \"eql (suc (Var z)) (suc (Num i))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow>\n    nprv\n     {eql (Var z) (Num i),\n      ldsj (map (\\<lambda>i. eql (Var z) (Num i)) (toN n)),\n      LLq (Var z) (Num n), LLq (suc (Var z)) (suc (Num n))}\n     (eql (suc (Var z)) (suc (Num i)))", "apply(nrule r: nprv_suc_congI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (LLq t (Num (Suc n)))\n        (ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n)))))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "declare subset_eq[simp]"], ["", "lemmas prv_LLq_sdsj_eqlI = nprv_addImpLemmaI[OF prv_LLq_imp_sdsj_eql, simped, rotated 3]"], ["", "lemmas prv_LLq_sdsj_eqlE = nprv_addImpLemmaE[OF prv_LLq_imp_sdsj_eql, simped, rotated 1]"], ["", "declare subset_eq[simp del]"], ["", "lemmas prv_LLq_sdsj_eqlE0 = prv_LLq_sdsj_eqlE[OF nprv_hyp _, simped]"], ["", "lemmas prv_LLq_sdsj_eqlE1 = prv_LLq_sdsj_eqlE[OF _ nprv_hyp, simped]"], ["", "lemmas prv_LLq_sdsj_eqlE01 = prv_LLq_sdsj_eqlE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemmas O3I = prv_LLq_sdsj_eqlI"], ["", "lemmas O3E = prv_LLq_sdsj_eqlE"], ["", "lemmas O3E0 = prv_LLq_sdsj_eqlE0"], ["", "lemmas O3E1 = prv_LLq_sdsj_eqlE1"], ["", "lemmas O3E01 = prv_LLq_sdsj_eqlE01"], ["", "(*  *)"], ["", "lemma not_leq_prv_neg_LLq_Num:\nassumes \"\\<not> m \\<le> n\"  (* This is just m < n, of course. *)\nshows \"prv (neg (LLq (Num m) (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (LLq (Num m) (Num n)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (neg (LLq (Num m) (Num n)))", "have [simp]: \"\\<And>i. i \\<le> n \\<Longrightarrow> prv (imp (eql (Num m) (Num i)) fls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<le> n \\<Longrightarrow> prv (imp (eql (Num m) (Num i)) fls)", "unfolding neg_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<le> n \\<Longrightarrow> prv (neg (eql (Num m) (Num i)))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<le> n \\<Longrightarrow> prv (neg (eql (Num m) (Num i)))", "by (intro diff_prv_eql_Num) simp"], ["proof (state)\nthis:\n  ?i \\<le> n \\<Longrightarrow> prv (imp (eql (Num m) (Num ?i)) fls)\n\ngoal (1 subgoal):\n 1. prv (neg (LLq (Num m) (Num n)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (LLq (Num m) (Num n)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (neg (LLq (Num m) (Num n)))", "apply(nrule r: nprv_negI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Num m) (Num n)} fls", "apply(nrule r: O3E0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {ldsj (map (\\<lambda>i. eql (Num m) (Num i)) (toN n)),\n      LLq (Num m) (Num n)}\n     fls", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv\n        {eql (Num m) (Num x),\n         ldsj (map (\\<lambda>i. eql (Num m) (Num i)) (toN n)),\n         LLq (Num m) (Num n)}\n        fls", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv {eql (Num m) (Num x), LLq (Num m) (Num n)} fls", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<le> n \\<Longrightarrow> nprv {eql (Num m) (Num x)} fls", "apply(nrule r: prv_nprv1I)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (neg (LLq (Num m) (Num n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consistent_prv_LLq_Num_leq:\nassumes consistent  \"prv (LLq (Num m) (Num n))\"\nshows \"m \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n", "by (metis Num assms consistent_def LLq not_leq_prv_neg_LLq_Num num prv_neg_fls subsetCE)"], ["", "(* *)"], ["", "lemma prv_ball_NumI: \\<comment> \\<open>O4\\<close>\nassumes [simp]: \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\nand [simp]: \"\\<And> i. i \\<le> n \\<Longrightarrow> prv (subst \\<phi> (Num i) x)\"\nshows \"prv (ball x (Num n) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (ball x (Num n) \\<phi>)", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (ball x (Num n) \\<phi>)", "apply(nrule r: nprv_ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Var x) (Num n)} \\<phi>", "apply(nrule r: O3E0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {ldsj (map (\\<lambda>i. eql (Var x) (Num i)) (toN n)),\n      LLq (Var x) (Num n)}\n     \\<phi>", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {ldsj (map (\\<lambda>i. eql (Var x) (Num i)) (toN n))} \\<phi>", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<le> n \\<Longrightarrow>\n       nprv\n        {eql (Var x) (Num xa),\n         ldsj (map (\\<lambda>i. eql (Var x) (Num i)) (toN n))}\n        \\<phi>", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<le> n \\<Longrightarrow> nprv {eql (Var x) (Num xa)} \\<phi>", "apply(nrule r: nprv_eql_substE[of _ \"Var x\" \"Num _\" \\<phi> x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<le> n \\<Longrightarrow>\n       nprv {eql (Var x) (Num xa)} (subst \\<phi> (Num xa) x)", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas O4 = prv_ball_NumI"], ["", "lemma prv_bexi_NumI: \\<comment> \\<open>O5\\<close>\nassumes [simp]: \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\nand [simp]: \"i \\<le> n\" \"prv (subst \\<phi> (Num i) x)\"\nshows \"prv (bexi x (Num n) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (bexi x (Num n) \\<phi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (bexi x (Num n) \\<phi>)", "note leq_prv_LLq_Num[simp]"], ["proof (state)\nthis:\n  ?m \\<le> ?n \\<Longrightarrow> prv (LLq (Num ?m) (Num ?n))\n\ngoal (1 subgoal):\n 1. prv (bexi x (Num n) \\<phi>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (bexi x (Num n) \\<phi>)", "by (nprover4 r1: nprv_prvI r2: nprv_bexiI[of _ _ \"Num i\"] r3: prv_nprvI r4: prv_nprvI)"], ["proof (state)\nthis:\n  prv (bexi x (Num n) \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas O5 = prv_bexi_NumI"], ["", "lemma prv_LLq_Num_imp_Suc: \\<comment> \\<open>O6\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))", "have [simp]: \"\\<And>i. i \\<le> n \\<Longrightarrow> prv (LLq (Num i) (suc (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<le> n \\<Longrightarrow> prv (LLq (Num i) (suc (Num n)))", "apply(subst Num.simps(2)[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<le> n \\<Longrightarrow> prv (LLq (Num i) (Num (Suc n)))", "by (rule leq_prv_LLq_Num) simp"], ["proof (state)\nthis:\n  ?i \\<le> n \\<Longrightarrow> prv (LLq (Num ?i) (suc (Num n)))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (imp (LLq t (Num n)) (LLq t (suc (Num n))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq t (Num n)} (LLq t (suc (Num n)))", "apply(nrule r: O3E0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {ldsj (map (\\<lambda>i. eql t (Num i)) (toN n)), LLq t (Num n)}\n     (LLq t (suc (Num n)))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n     (LLq t (suc (Num n)))", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv {eql t (Num x), ldsj (map (\\<lambda>i. eql t (Num i)) (toN n))}\n        (LLq t (suc (Num n)))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv {eql t (Num x)} (LLq t (suc (Num n)))", "apply(nrule r: nprv_eql_substE[of _ t \"Num _\" \"LLq (Var xx) (suc (Num n))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv {eql t (Num x)} (LLq (Num x) (suc (Num n)))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (LLq t (Num n)) (LLq t (suc (Num n))))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_LLq_Num_SucI = nprv_addImpLemmaI[OF prv_LLq_Num_imp_Suc, simped, rotated 3]"], ["", "lemmas nprv_LLq_Num_SucE = nprv_addImpLemmaE[OF prv_LLq_Num_imp_Suc, simped, rotated 1]"], ["", "lemmas nprv_LLq_Num_SucE0 = nprv_LLq_Num_SucE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_LLq_Num_SucE1 = nprv_LLq_Num_SucE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_LLq_Num_SucE01 = nprv_LLq_Num_SucE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemmas O6I = nprv_LLq_Num_SucI"], ["", "lemmas O6E = nprv_LLq_Num_SucE"], ["", "lemmas O6E0 = nprv_LLq_Num_SucE0"], ["", "lemmas O6E1 = nprv_LLq_Num_SucE1"], ["", "lemmas O6E01 = nprv_LLq_Num_SucE01"], ["", "text \\<open>Crucial for proving O7:\\<close>"], ["", "lemma prv_LLq_suc_Num_pls_Num:\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (LLq (suc (Num n)) (pls (suc t) (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num n)) (pls (suc t) (Num n)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num n)) (pls (suc t) (Num n)))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t] []\n\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num n)) (pls (suc t) (Num n)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num n)) (pls (suc t) (Num n)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num n)) (pls (suc t) (Num n)))", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. prv (LLq (suc (Num 0)) (pls (suc t) (Num 0)))\n 2. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. prv (LLq (suc (Num 0)) (pls (suc t) (Num 0)))\n 2. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "have \"prv (exi z (eql (pls (suc t) zer) (pls (Var z) (suc zer))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exi z (eql (pls (suc t) zer) (pls (Var z) (suc zer))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (exi z (eql (pls (suc t) zer) (pls (Var z) (suc zer))))", "apply(nrule r: nprv_exiI[of _ _ t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql (pls (suc t) zer) (pls t (suc zer)))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_zer[of \"suc t\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (suc t) zer) (suc t)}\n     (eql (pls (suc t) zer) (pls t (suc zer)))", "apply(nrule r: nprv_eql_substE[of _ \"pls (suc t) zer\"  \"suc t\"  \"eql (Var z) (pls t (suc zer))\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (suc t) zer) (suc t)} (eql (suc t) (pls t (suc zer)))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql (suc t) (pls t (suc zer)))", "apply(nrule r: nprv_eql_symI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql (pls t (suc zer)) (suc t))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls t (suc zer)) (suc t))", "apply(nrule r: prv_pls_suc_zer)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (exi z (eql (pls (suc t) zer) (pls (Var z) (suc zer))))\n\ngoal (2 subgoals):\n 1. prv (LLq (suc (Num 0)) (pls (suc t) (Num 0)))\n 2. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "thus ?case"], ["proof (prove)\nusing this:\n  prv (exi z (eql (pls (suc t) zer) (pls (Var z) (suc zer))))\n\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num 0)) (pls (suc t) (Num 0)))", "by (simp add: LLq_pls[of _ _ z])"], ["proof (state)\nthis:\n  prv (LLq (suc (Num 0)) (pls (suc t) (Num 0)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "case (Suc n)"], ["proof (state)\nthis:\n  prv (LLq (suc (Num n)) (pls (suc t) (Num n)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "have nn: \"suc (Num n) = suc (Num n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suc (Num n) = suc (Num n)", "by simp"], ["proof (state)\nthis:\n  suc (Num n) = suc (Num n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "note Suc.IH[simp]"], ["proof (state)\nthis:\n  prv (LLq (suc (Num n)) (pls (suc t) (Num n)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (LLq (suc (Num n)) (pls (suc t) (Num n))) \\<Longrightarrow>\n       prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (LLq (suc (suc (Num n))) (pls (suc t) (suc (Num n))))", "apply(nrule r: nprv_addLemmaE[OF prv_pls_suc[of \"suc t\" \"Num n\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (suc t) (suc (Num n))) (suc (pls (suc t) (Num n)))}\n     (LLq (suc (suc (Num n))) (pls (suc t) (suc (Num n))))", "apply(nrule r: nprv_eql_substE[of _ \"pls (suc t) (suc (Num n))\" \"suc (pls (suc t) (Num n))\"\n      \"LLq (suc (suc (Num n))) (Var z)\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (pls (suc t) (suc (Num n))) (suc (pls (suc t) (Num n)))}\n     (LLq (suc (suc (Num n))) (suc (pls (suc t) (Num n))))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (LLq (suc (suc (Num n))) (suc (pls (suc t) (Num n))))", "apply(nrule r: nprv_suc_mono_LLqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (LLq (suc (Num n)) (pls (suc t) (Num n)))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (LLq (suc (Num (Suc n))) (pls (suc t) (Num (Suc n))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv (LLq (suc (Num n)) (pls (suc t) (Num n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_Num_LLq_imp_eql_suc: \\<comment> \\<open>O7\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq (Num n) t)\n                (dsj (eql (Num n) t)\n                     (LLq (suc (Num n)) t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "define x where \"x \\<equiv> getFr [xx,yy,zz,z] [t] []\""], ["proof (state)\nthis:\n  x \\<equiv> getFr [xx, yy, zz, z] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "have x_facts[simp]: \"x \\<in> var\" \"x \\<noteq> xx\" \"x \\<noteq> yy\" \"x \\<noteq> zz\" \"zz \\<noteq> x\" \"x \\<noteq> z\" \"z \\<noteq> x\" \"x \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz,z]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz, z] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz, z] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz, z] [t] []\n                    \\<notin> set [xx, yy, zz, z] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz, z] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz, z] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t", "unfolding x_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz, z] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> x \\<in> var \\<and>\n                    x \\<notin> set [xx, yy, zz, z] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     x \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     x \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. ((x \\<in> var &&& x \\<noteq> xx) &&&\n     x \\<noteq> yy &&& x \\<noteq> zz) &&&\n    (zz \\<noteq> x &&& x \\<noteq> z) &&&\n    z \\<noteq> x &&& x \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<noteq> xx\n  x \\<noteq> yy\n  x \\<noteq> zz\n  zz \\<noteq> x\n  x \\<noteq> z\n  z \\<noteq> x\n  x \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "define y where \"y \\<equiv> getFr [x,z] [t] []\""], ["proof (state)\nthis:\n  y \\<equiv> getFr [x, z] [t] []\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "have y_facts[simp]: \"y \\<in> var\" \"y \\<notin> FvarsT t\" \"x \\<noteq> y\" \"y \\<noteq> x\" \"z \\<noteq> y\" \"y \\<noteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> var &&& y \\<notin> FvarsT t &&& x \\<noteq> y) &&&\n    y \\<noteq> x &&& z \\<noteq> y &&& y \\<noteq> z", "using getFr_FvarsT_Fvars[of \"[x,z]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [x, z] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [x, z] [t] [] \\<in> var \\<and>\n                    getFr [x, z] [t] [] \\<notin> set [x, z] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [x, z] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [x, z] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (y \\<in> var &&& y \\<notin> FvarsT t &&& x \\<noteq> y) &&&\n    y \\<noteq> x &&& z \\<noteq> y &&& y \\<noteq> z", "unfolding y_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [x, z] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> y \\<in> var \\<and>\n                    y \\<notin> set [x, z] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     y \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     y \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (y \\<in> var &&& y \\<notin> FvarsT t &&& x \\<noteq> y) &&&\n    y \\<noteq> x &&& z \\<noteq> y &&& y \\<noteq> z", "by auto"], ["proof (state)\nthis:\n  y \\<in> var\n  y \\<notin> FvarsT t\n  x \\<noteq> y\n  y \\<noteq> x\n  z \\<noteq> y\n  y \\<noteq> z\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "have [simp]: \"prv (eql (pls zer (Num n)) (Num n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (pls zer (Num n)) (Num n))", "by (subst Num.simps(1)[symmetric]) (metis plus_nat.add_0 prv_eql_pls_plus)"], ["proof (state)\nthis:\n  prv (eql (pls zer (Num n)) (Num n))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "have [simp]: \"prv (LLq (suc (Num n)) (pls (suc (Var x)) (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (suc (Num n)) (pls (suc (Var x)) (Num n)))", "by (simp add: prv_LLq_suc_Num_pls_Num)"], ["proof (state)\nthis:\n  prv (LLq (suc (Num n)) (pls (suc (Var x)) (Num n)))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "note LLq_pls[of \"Num n\" t z, simplified, simp]"], ["proof (state)\nthis:\n  LLq (Num n) t = exi z (eql t (pls (Var z) (Num n)))\n\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (exi z (eql t (pls (Var z) (Num n))))\n       (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {exi z (eql t (pls (Var z) (Num n)))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_exiE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (pls (Var z) (Num n)), exi z (eql t (pls (Var z) (Num n)))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (pls (Var z) (Num n))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_zer_suc_casesE[of \"Var z\" _ _ x])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {eql (Var z) zer, eql t (pls (Var z) (Num n))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n 2. nprv {eql (Var z) (suc (Var x)), eql t (pls (Var z) (Num n))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) zer, eql t (pls (Var z) (Num n))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_dsjIL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) zer, eql t (pls (Var z) (Num n))} (eql (Num n) t)", "apply(nrule r: nprv_impI_rev2[of \"{eql (Var z) zer}\" \"eql t (pls (Var z) (Num n))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) zer}\n     (imp (eql t (pls (Var z) (Num n))) (eql (Num n) t))", "apply(nrule r: nprv_eql_substE\n       [of _ \"Var z\" zer \"imp (eql t (pls (Var y) (Num n))) (eql (Num n) t)\" y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) zer} (imp (eql t (pls zer (Num n))) (eql (Num n) t))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (imp (eql t (pls zer (Num n))) (eql (Num n) t))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (pls zer (Num n))} (eql (Num n) t)", "apply(nrule r: nprv_eql_substE[of _ t \"pls zer (Num n)\" \"eql (Num n) (Var y)\" y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (pls zer (Num n))} (eql (Num n) (pls zer (Num n)))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (eql (Num n) (pls zer (Num n)))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql (Num n) (pls zer (Num n)))", "apply(nrule r: prv_prv_eql_sym)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) (suc (Var x)), eql t (pls (Var z) (Num n))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) (suc (Var x)), eql t (pls (Var z) (Num n))}\n     (dsj (eql (Num n) t) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_dsjIR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) (suc (Var x)), eql t (pls (Var z) (Num n))}\n     (LLq (suc (Num n)) t)", "apply(nrule r: nprv_impI_rev2[of \"{eql (Var z) (suc (Var x))}\" \"eql t (pls (Var z) (Num n))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) (suc (Var x))}\n     (imp (eql t (pls (Var z) (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_eql_substE\n      [of _  \"Var z\" \"suc (Var x)\" \"imp (eql t (pls (Var y) (Num n)))  (LLq (suc (Num n)) t)\" y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) (suc (Var x))}\n     (imp (eql t (pls (suc (Var x)) (Num n))) (LLq (suc (Num n)) t))", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Var z) (suc (Var x))}\n     (imp (eql t (pls (suc (Var x)) (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (imp (eql t (pls (suc (Var x)) (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (pls (suc (Var x)) (Num n))} (LLq (suc (Num n)) t)", "apply(nrule r: nprv_eql_substE\n       [of _  t \"pls (suc (Var x)) (Num n)\" \"LLq (suc (Num n)) (Var y)\" y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (pls (suc (Var x)) (Num n))}\n     (LLq (suc (Num n)) (pls (suc (Var x)) (Num n)))", "apply(nrule r: prv_nprvI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (LLq (Num n) t) (dsj (eql (Num n) t) (LLq (suc (Num n)) t)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification (this one is slightly more complex, as it puts together impE with dsjE): *)"], ["", "lemma prv_Num_LLq_eql_sucE:\n\"nprv F (LLq (Num n) t) \\<Longrightarrow>\n nprv (insert (eql (Num n) t) F) \\<psi> \\<Longrightarrow>\n nprv (insert (LLq (suc (Num n)) t) F) \\<psi> \\<Longrightarrow>\n t \\<in> atrm \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow>  \\<psi> \\<in> fmla \\<Longrightarrow>\n nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "apply(nrule r: nprv_addImpLemmaE[OF prv_Num_LLq_imp_eql_suc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv\n                       (insert (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n                         F)\n                       \\<psi>", "apply(nrule2 r: nprv_dsjE0[of \"eql (Num n) t\" \"LLq (suc (Num n)) t\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv\n                       (insert (eql (Num n) t)\n                         (insert (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n                           F))\n                       \\<psi>\n 2. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv\n                       (insert (LLq (suc (Num n)) t)\n                         (insert (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n                           F))\n                       \\<psi>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv\n                       (insert (eql (Num n) t)\n                         (insert (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n                           F))\n                       \\<psi>", "by (nrule r: nprv_mono[of \"insert (eql (Num n) t) F\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv\n                       (insert (LLq (suc (Num n)) t)\n                         (insert (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n                           F))\n                       \\<psi>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv F (LLq (Num n) t); nprv (insert (eql (Num n) t) F) \\<psi>;\n     nprv (insert (LLq (suc (Num n)) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv\n                       (insert (LLq (suc (Num n)) t)\n                         (insert (dsj (eql (Num n) t) (LLq (suc (Num n)) t))\n                           F))\n                       \\<psi>", "by (nrule r: nprv_mono[of \"insert (LLq (suc (Num n)) t) F\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas prv_Num_LLq_eql_sucE0 = prv_Num_LLq_eql_sucE[OF nprv_hyp _ _, simped]"], ["", "lemmas prv_Num_LLq_eql_sucE1 = prv_Num_LLq_eql_sucE[OF _ nprv_hyp _, simped]"], ["", "lemmas prv_Num_LLq_eql_sucE2 = prv_Num_LLq_eql_sucE[OF _ _ nprv_hyp, simped]"], ["", "lemmas prv_Num_LLq_eql_sucE01 = prv_Num_LLq_eql_sucE[OF nprv_hyp nprv_hyp _, simped]"], ["", "lemmas prv_Num_LLq_eql_sucE02 = prv_Num_LLq_eql_sucE[OF nprv_hyp _ nprv_hyp, simped]"], ["", "lemmas prv_Num_LLq_eql_sucE12 = prv_Num_LLq_eql_sucE[OF _ nprv_hyp nprv_hyp, simped]"], ["", "lemmas prv_Num_LLq_eql_sucE012 = prv_Num_LLq_eql_sucE[OF nprv_hyp nprv_hyp nprv_hyp, simped]"], ["", "(* *)"], ["", "lemmas O7E = prv_Num_LLq_eql_sucE"], ["", "lemmas O7E0 = prv_Num_LLq_eql_sucE0"], ["", "(**)\n\n(* Although we work in intuitionistic logic,\nQ decides equality of arbitrary entities with numerals: *)"], ["", "lemma prv_dsj_eql_Num_neg:\nassumes \"t \\<in> atrm\"\nshows \"prv (dsj (eql t (Num n)) (neg (eql t (Num n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (eql t (Num n)) (neg (eql t (Num n))))", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> atrm\n\ngoal (1 subgoal):\n 1. prv (dsj (eql t (Num n)) (neg (eql t (Num n))))", "proof(induction n arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (dsj (eql t (Num 0)) (neg (eql t (Num 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "case [simp]:(0 t)"], ["proof (state)\nthis:\n  t \\<in> atrm\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (dsj (eql t (Num 0)) (neg (eql t (Num 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t] []\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (dsj (eql t (Num 0)) (neg (eql t (Num 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> atrm \\<Longrightarrow>\n       prv (dsj (eql t (Num 0)) (neg (eql t (Num 0))))\n 2. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (eql t (Num 0)) (neg (eql t (Num 0))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (dsj (eql t zer) (neg (eql t zer)))", "apply(nrule r: nprv_zer_suc_casesE[of t _ _ z])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {eql t zer} (dsj (eql t zer) (neg (eql t zer)))\n 2. nprv {eql t (suc (Var z))} (dsj (eql t zer) (neg (eql t zer)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t zer} (dsj (eql t zer) (neg (eql t zer)))", "by (nrule r: nprv_dsjIL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))} (dsj (eql t zer) (neg (eql t zer)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))} (dsj (eql t zer) (neg (eql t zer)))", "by (nprover3 r1: nprv_dsjIR r2: nprv_negI r3: nprv_zer_suc_2contrE01)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (dsj (eql t (Num 0)) (neg (eql t (Num 0))))\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "case (Suc n)"], ["proof (state)\nthis:\n  ?t \\<in> atrm \\<Longrightarrow>\n  prv (dsj (eql ?t (Num n)) (neg (eql ?t (Num n))))\n  t \\<in> atrm\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "note  \\<open>t \\<in> atrm\\<close>[simp]"], ["proof (state)\nthis:\n  t \\<in> atrm\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "define z where \"z \\<equiv> getFr [xx,yy,zz] [t] []\""], ["proof (state)\nthis:\n  z \\<equiv> getFr [xx, yy, zz] [t] []\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "have z_facts[simp]: \"z \\<in> var\" \"z \\<noteq> xx\" \"z \\<noteq> yy\" \"z \\<noteq> zz\" \"zz \\<noteq> z\" \"z \\<notin> FvarsT t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "using getFr_FvarsT_Fvars[of \"[xx,yy,zz]\" \"[t]\" \"[]\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> getFr [xx, yy, zz] [t] [] \\<in> var \\<and>\n                    getFr [xx, yy, zz] [t] []\n                    \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     getFr [xx, yy, zz] [t] [] \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "unfolding z_def[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [xx, yy, zz] \\<subseteq> var; set [t] \\<subseteq> trm;\n   set [] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> z \\<in> var \\<and>\n                    z \\<notin> set [xx, yy, zz] \\<and>\n                    (?t \\<in> set [t] \\<longrightarrow>\n                     z \\<notin> FvarsT ?t) \\<and>\n                    (?\\<phi> \\<in> set [] \\<longrightarrow>\n                     z \\<notin> Fvars ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (z \\<in> var &&& z \\<noteq> xx &&& z \\<noteq> yy) &&&\n    z \\<noteq> zz &&& zz \\<noteq> z &&& z \\<notin> FvarsT t", "by auto"], ["proof (state)\nthis:\n  z \\<in> var\n  z \\<noteq> xx\n  z \\<noteq> yy\n  z \\<noteq> zz\n  zz \\<noteq> z\n  z \\<notin> FvarsT t\n\ngoal (1 subgoal):\n 1. \\<And>n t.\n       \\<lbrakk>\\<And>t.\n                   t \\<in> atrm \\<Longrightarrow>\n                   prv (dsj (eql t (Num n)) (neg (eql t (Num n))));\n        t \\<in> atrm\\<rbrakk>\n       \\<Longrightarrow> prv (dsj (eql t (Num (Suc n)))\n                               (neg (eql t (Num (Suc n)))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (eql t (Num (Suc n))) (neg (eql t (Num (Suc n)))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (dsj (eql t (suc (Num n))) (neg (eql t (suc (Num n)))))", "apply(nrule r: nprv_zer_suc_casesE[of t _ _ z])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {eql t zer} (dsj (eql t (suc (Num n))) (neg (eql t (suc (Num n)))))\n 2. nprv {eql t (suc (Var z))}\n     (dsj (eql t (suc (Num n))) (neg (eql t (suc (Num n)))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t zer} (dsj (eql t (suc (Num n))) (neg (eql t (suc (Num n)))))", "by (nprover3 r1: nprv_dsjIR r2: nprv_negI r3: nprv_zer_suc_2contrE01)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))}\n     (dsj (eql t (suc (Num n))) (neg (eql t (suc (Num n)))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))}\n     (dsj (eql t (suc (Num n))) (neg (eql t (suc (Num n)))))", "apply(nrule r: nprv_eql_substE [of _ t \"suc (Var z)\"\n       \"dsj (eql (Var z) (suc (Num n))) (neg (eql (Var z) (suc (Num n))))\" z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (suc (Var z))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "apply(nrule r: nprv_addLemmaE[OF Suc.IH[of \"Var z\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {dsj (eql (Var z) (Num n)) (neg (eql (Var z) (Num n)))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "apply(nrule r: nprv_dsjE0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv\n     {eql (Var z) (Num n),\n      dsj (eql (Var z) (Num n)) (neg (eql (Var z) (Num n)))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))\n 2. nprv\n     {neg (eql (Var z) (Num n)),\n      dsj (eql (Var z) (Num n)) (neg (eql (Var z) (Num n)))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {eql (Var z) (Num n),\n      dsj (eql (Var z) (Num n)) (neg (eql (Var z) (Num n)))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "by (nprover2 r1: nprv_dsjIL r2: nprv_suc_congI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {neg (eql (Var z) (Num n)),\n      dsj (eql (Var z) (Num n)) (neg (eql (Var z) (Num n)))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {neg (eql (Var z) (Num n)),\n      dsj (eql (Var z) (Num n)) (neg (eql (Var z) (Num n)))}\n     (dsj (eql (suc (Var z)) (suc (Num n)))\n       (neg (eql (suc (Var z)) (suc (Num n)))))", "by (nprover4 r1: nprv_dsjIR r2: nprv_negI r3: nprv_negE0 r4: nprv_eql_sucI)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (dsj (eql t (Num (Suc n))) (neg (eql t (Num (Suc n)))))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemmas nprv_eql_Num_casesE = nprv_addDsjLemmaE[OF prv_dsj_eql_Num_neg, simped, rotated]"], ["", "lemmas nprv_eql_Num_casesE0 = nprv_eql_Num_casesE[OF nprv_hyp _, simped]"], ["", "lemmas nprv_eql_Num_casesE1 = nprv_eql_Num_casesE[OF _ nprv_hyp, simped]"], ["", "lemmas nprv_eql_Num_casesE01 = nprv_eql_Num_casesE[OF nprv_hyp nprv_hyp, simped]"], ["", "(* *)"], ["", "lemma prv_LLq_Num_dsj:  \\<comment> \\<open>O8\\<close>\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (dsj (LLq t (Num n)) (LLq (Num n) t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (LLq t (Num n)) (LLq (Num n) t))", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. prv (dsj (LLq t (Num 0)) (LLq (Num 0) t))\n 2. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. prv (dsj (LLq t (Num 0)) (LLq (Num 0) t))\n 2. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "note prv_LLq_zer[simp]"], ["proof (state)\nthis:\n  ?t \\<in> atrm \\<Longrightarrow> prv (LLq zer ?t)\n\ngoal (2 subgoals):\n 1. prv (dsj (LLq t (Num 0)) (LLq (Num 0) t))\n 2. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (LLq t (Num 0)) (LLq (Num 0) t))", "by (nprover3 r1: nprv_prvI r2: nprv_dsjIR r3: prv_nprvI)"], ["proof (state)\nthis:\n  prv (dsj (LLq t (Num 0)) (LLq (Num 0) t))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "case (Suc n)"], ["proof (state)\nthis:\n  prv (dsj (LLq t (Num n)) (LLq (Num n) t))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "have nn: \"suc (Num n) = Num (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suc (Num n) = Num (Suc n)", "by simp"], ["proof (state)\nthis:\n  suc (Num n) = Num (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "have [simp]: \"prv (LLq (Num n) (suc (Num n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (Num n) (suc (Num n)))", "apply(subst nn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (LLq (Num n) (Num (Suc n)))", "by (rule leq_prv_LLq_Num) simp"], ["proof (state)\nthis:\n  prv (LLq (Num n) (suc (Num n)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prv (dsj (LLq t (Num n)) (LLq (Num n) t)) \\<Longrightarrow>\n       prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {} (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_addLemmaE[OF Suc.IH])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {dsj (LLq t (Num n)) (LLq (Num n) t)}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_dsjE0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {LLq t (Num n), dsj (LLq t (Num n)) (LLq (Num n) t)}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))\n 2. nprv {LLq (Num n) t, dsj (LLq t (Num n)) (LLq (Num n) t)}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq t (Num n), dsj (LLq t (Num n)) (LLq (Num n) t)}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "by (nprover2 r1: nprv_dsjIL r2: O6I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Num n) t, dsj (LLq t (Num n)) (LLq (Num n) t)}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Num n) t, dsj (LLq t (Num n)) (LLq (Num n) t)}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: nprv_clear2_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Num n) t} (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "apply(nrule2 r: nprv_eql_Num_casesE[of t n])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {eql t (Num n), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))\n 2. nprv {neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql t (Num n), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "by (nprover3 r1: nprv_dsjIL\n      r2: nprv_eql_substE[of _ t \"Num n\" \"LLq (Var xx) (suc (Num n))\" xx]\n      r3: prv_nprvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "apply(nrule r: O7E0[of n t])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {eql (Num n) t, neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))\n 2. nprv {LLq (suc (Num n)) t, neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {eql (Num n) t, neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "by (nprover2 r1: nprv_eql_symE0 r2: nprv_negE01 )"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (suc (Num n)) t, neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (suc (Num n)) t, neg (eql t (Num n)), LLq (Num n) t}\n     (dsj (LLq t (suc (Num n))) (LLq (suc (Num n)) t))", "by (nrule r: nprv_dsjIR)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (dsj (LLq t (Num (Suc n))) (LLq (Num (Suc n)) t))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Rulification: *)"], ["", "lemma prv_LLq_Num_casesE:\n\"nprv (insert (LLq t (Num n)) F) \\<psi> \\<Longrightarrow>\n nprv (insert (LLq (Num n) t) F) \\<psi> \\<Longrightarrow>\n t \\<in> atrm \\<Longrightarrow> F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\n nprv F \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nprv (insert (LLq t (Num n)) F) \\<psi>;\n     nprv (insert (LLq (Num n) t) F) \\<psi>; t \\<in> atrm;\n     F \\<subseteq> fmla; finite F; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> nprv F \\<psi>", "by (rule nprv_addDsjLemmaE[OF prv_LLq_Num_dsj]) auto"], ["", "lemmas prv_LLq_Num_casesE0 = prv_LLq_Num_casesE[OF nprv_hyp _, simped]"], ["", "lemmas prv_LLq_Num_casesE1 = prv_LLq_Num_casesE[OF _ nprv_hyp, simped]"], ["", "lemmas prv_LLq_Num_casesE01 = prv_LLq_Num_casesE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemmas O8E = prv_LLq_Num_casesE"], ["", "lemmas O8E0 = prv_LLq_Num_casesE0"], ["", "lemmas O8E1 = prv_LLq_Num_casesE1"], ["", "lemmas O8E01 = prv_LLq_Num_casesE01"], ["", "(* *)"], ["", "lemma prv_imp_LLq_neg_Num_suc:\nassumes [simp]: \"t \\<in> atrm\"\nshows \"prv (imp (LLq t (suc (Num n)))\n                 (imp ((neg (eql t (suc (Num n)))))\n                      (LLq t (Num n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (LLq t (suc (Num n)))\n          (imp (neg (eql t (suc (Num n)))) (LLq t (Num n))))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (LLq t (suc (Num n)))\n       (imp (neg (eql t (suc (Num n)))) (LLq t (Num n))))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq t (suc (Num n))}\n     (imp (neg (eql t (suc (Num n)))) (LLq t (Num n)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {neg (eql t (suc (Num n))), LLq t (suc (Num n))} (LLq t (Num n))", "apply(nrule r: O3E0[of t \"Suc n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n))),\n      neg (eql t (suc (Num n))), LLq t (suc (Num n))}\n     (LLq t (Num n))", "apply(nrule r: nprv_clear3_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n))),\n      neg (eql t (suc (Num n)))}\n     (LLq t (Num n))", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> Suc n \\<Longrightarrow>\n       nprv\n        {eql t (Num x),\n         ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n))),\n         neg (eql t (suc (Num n)))}\n        (LLq t (Num n))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    nprv\n     {eql t (Num i), ldsj (map (\\<lambda>i. eql t (Num i)) (toN (Suc n))),\n      neg (eql t (suc (Num n)))}\n     (LLq t (Num n))", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    nprv {eql t (Num i), neg (eql t (suc (Num n)))} (LLq t (Num n))", "apply(nrule r: nprv_impI_rev2[of \"{eql t (Num i)}\" \"neg (eql t (suc (Num n)))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    nprv {eql t (Num i)} (imp (neg (eql t (suc (Num n)))) (LLq t (Num n)))", "apply(nrule r: nprv_eql_substE[of _ t \"Num i\"\n  \"imp (neg (eql (Var xx) (suc (Num n)))) (LLq (Var xx) (Num n))\" xx])"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    nprv {eql t (Num i)}\n     (imp (neg (eql (Num i) (suc (Num n)))) (LLq (Num i) (Num n)))", "apply(nrule r: nprv_clear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    nprv {} (imp (neg (eql (Num i) (suc (Num n)))) (LLq (Num i) (Num n)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    nprv {neg (eql (Num i) (suc (Num n)))} (LLq (Num i) (Num n))", "apply(cases \"i = Suc n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> Suc n; i = Suc n\\<rbrakk>\n    \\<Longrightarrow> nprv {neg (eql (Num i) (suc (Num n)))}\n                       (LLq (Num i) (Num n))\n 2. \\<lbrakk>i \\<le> Suc n; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> nprv {neg (eql (Num i) (suc (Num n)))}\n                       (LLq (Num i) (Num n))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> Suc n; i = Suc n\\<rbrakk>\n    \\<Longrightarrow> nprv {neg (eql (Num i) (suc (Num n)))}\n                       (LLq (Num i) (Num n))", "by (nprover2 r1: nprv_negE0 r2: nprv_eql_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> Suc n; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> nprv {neg (eql (Num i) (suc (Num n)))}\n                       (LLq (Num i) (Num n))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> Suc n; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> nprv {neg (eql (Num i) (suc (Num n)))}\n                       (LLq (Num i) (Num n))", "by (nprover2 r1: prv_nprvI r2: leq_prv_LLq_Num)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "(* Rulification *)"], ["", "lemmas nprv_LLq_neg_Num_sucI = nprv_addImp2LemmaI[OF prv_imp_LLq_neg_Num_suc, simped, rotated 3]"], ["", "lemmas nprv_LLq_neg_Num_sucE = nprv_addImp2LemmaE[OF prv_imp_LLq_neg_Num_suc, simped, rotated 1]"], ["", "lemmas nprv_LLq_neg_Num_sucE0 = nprv_LLq_neg_Num_sucE[OF nprv_hyp _ _, simped]"], ["", "lemmas nprv_LLq_neg_Num_sucE1 = nprv_LLq_neg_Num_sucE[OF _ nprv_hyp _, simped]"], ["", "lemmas nprv_LLq_neg_Num_sucE2 = nprv_LLq_neg_Num_sucE[OF _ _ nprv_hyp, simped]"], ["", "lemmas nprv_LLq_neg_Num_sucE01 = nprv_LLq_neg_Num_sucE[OF nprv_hyp nprv_hyp _, simped]"], ["", "lemmas nprv_LLq_neg_Num_sucE02 = nprv_LLq_neg_Num_sucE[OF nprv_hyp _ nprv_hyp, simped]"], ["", "lemmas nprv_LLq_neg_Num_sucE12 = nprv_LLq_neg_Num_sucE[OF _ nprv_hyp nprv_hyp, simped]"], ["", "lemmas nprv_LLq_neg_Num_sucE012 = nprv_LLq_neg_Num_sucE[OF nprv_hyp nprv_hyp nprv_hyp, simped]"], ["", "(* *)"], ["", "lemma prv_ball_Num_imp_ball_suc:  \\<comment> \\<open>O9\\<close>\nassumes [simp]: \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\nshows \"prv (imp (ball x (Num n) \\<phi>)\n                (ball x (suc (Num n)) (imp (neg (eql (Var x) (suc (Num n)))) \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ball x (Num n) \\<phi>)\n          (ball x (suc (Num n))\n            (imp (neg (eql (Var x) (suc (Num n)))) \\<phi>)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (imp (ball x (Num n) \\<phi>)\n       (ball x (suc (Num n))\n         (imp (neg (eql (Var x) (suc (Num n)))) \\<phi>)))", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {ball x (Num n) \\<phi>}\n     (ball x (suc (Num n)) (imp (neg (eql (Var x) (suc (Num n)))) \\<phi>))", "apply(nrule r: nprv_ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Var x) (suc (Num n)), ball x (Num n) \\<phi>}\n     (imp (neg (eql (Var x) (suc (Num n)))) \\<phi>)", "apply(nrule r: nprv_impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {neg (eql (Var x) (suc (Num n))), LLq (Var x) (suc (Num n)),\n      ball x (Num n) \\<phi>}\n     \\<phi>", "apply(nrule r: nprv_LLq_neg_Num_sucE01)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {LLq (Var x) (Num n), neg (eql (Var x) (suc (Num n))),\n      LLq (Var x) (suc (Num n)), ball x (Num n) \\<phi>}\n     \\<phi>", "apply(nrule r: nprv_clear4_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {LLq (Var x) (Num n), LLq (Var x) (suc (Num n)), ball x (Num n) \\<phi>}\n     \\<phi>", "apply(nrule r: nprv_clear3_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Var x) (Num n), ball x (Num n) \\<phi>} \\<phi>", "apply(nrule r: nprv_ballE0[of x \"Num n\" \\<phi> _ \"Var x\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "(* Rulification: *)"], ["", "lemmas prv_ball_Num_ball_sucI = nprv_addImpLemmaI[OF prv_ball_Num_imp_ball_suc, simped, rotated 4]"], ["", "lemmas prv_ball_Num_ball_sucE = nprv_addImpLemmaE[OF prv_ball_Num_imp_ball_suc, simped, rotated 2]"], ["", "lemmas prv_ball_Num_ball_sucE0 = prv_ball_Num_ball_sucE[OF nprv_hyp _, simped]"], ["", "lemmas prv_ball_Num_ball_sucE1 = prv_ball_Num_ball_sucE[OF _ nprv_hyp, simped]"], ["", "lemmas prv_ball_Num_ball_sucE01 = prv_ball_Num_ball_sucE[OF nprv_hyp nprv_hyp, simped]"], ["", "lemmas O9I = prv_ball_Num_ball_sucI"], ["", "lemmas O9E = prv_ball_Num_ball_sucE"], ["", "lemmas O9E0 = prv_ball_Num_ball_sucE0"], ["", "lemmas O9E1 = prv_ball_Num_ball_sucE1"], ["", "lemmas O9E01 = prv_ball_Num_ball_sucE01"], ["", "subsection \\<open>Verifying the abstract ordering assumptions\\<close>"], ["", "lemma LLq_num:\nassumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\"  \"Fvars \\<phi> = {zz}\" and q: \"q \\<in> num\" and p: \"\\<forall> p \\<in> num. prv (subst \\<phi> p zz)\"\nshows \"prv (all zz (imp (LLq (Var zz) q) \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "obtain n where q: \"q = Num n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. q = Num n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using q num_Num"], ["proof (prove)\nusing this:\n  q \\<in> num\n  num = range Num\n\ngoal (1 subgoal):\n 1. (\\<And>n. q = Num n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto\n\\<comment> \\<open>NB: We did not need the whole strength of the assumption p -- we only needed that to hold for\nnumerals smaller than n. However, the abstract framework allowed us to make this strong assumption,\nand did not need to even assume an order on the numerals.\\<close>"], ["proof (state)\nthis:\n  q = Num n\n\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "unfolding q ball_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (ball zz (Num n) \\<phi>)", "using p p num_Num"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>num. prv (subst \\<phi> p zz)\n  \\<forall>p\\<in>num. prv (subst \\<phi> p zz)\n  num = range Num\n\ngoal (1 subgoal):\n 1. prv (ball zz (Num n) \\<phi>)", "by (intro O4) auto"], ["proof (state)\nthis:\n  prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LLq_num2:\nassumes \"p \\<in> num\"\nshows \"\\<exists>P\\<subseteq>num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "obtain n where q[simp]: \"p = Num n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. p = Num n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms num_Num"], ["proof (prove)\nusing this:\n  p \\<in> num\n  num = range Num\n\ngoal (1 subgoal):\n 1. (\\<And>n. p = Num n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p = Num n\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "have [simp]: \"{eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n} \\<subseteq> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n}\n    \\<subseteq> fmla", "by auto"], ["proof (state)\nthis:\n  {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n}\n  \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "apply(nrule r: exI[of _ \"{Num i | i . i \\<le> n}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (dsj (sdsj\n               {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n          (LLq (Num n) (Var yy)))", "apply(nrule r: nprv_prvI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {}\n     (dsj (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n       (LLq (Num n) (Var yy)))", "apply(nrule r: O8E[of \"Var yy\" n])"], ["proof (prove)\ngoal (2 subgoals):\n 1. nprv {LLq (Var yy) (Num n)}\n     (dsj (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n       (LLq (Num n) (Var yy)))\n 2. nprv {LLq (Num n) (Var yy)}\n     (dsj (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n       (LLq (Num n) (Var yy)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Var yy) (Num n)}\n     (dsj (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n       (LLq (Num n) (Var yy)))", "apply(nrule r: nprv_dsjIL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Var yy) (Num n)}\n     (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})", "apply(nrule r: O3E0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv\n     {ldsj (map (\\<lambda>i. eql (Var yy) (Num i)) (toN n)),\n      LLq (Var yy) (Num n)}\n     (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})", "apply(nrule r: nprv_ldsjE0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv\n        {eql (Var yy) (Num x),\n         ldsj (map (\\<lambda>i. eql (Var yy) (Num i)) (toN n)),\n         LLq (Var yy) (Num n)}\n        (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})", "apply(nrule r: nprv_sdsjI[of _ \"eql (Var yy) (Num _)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       nprv\n        {eql (Var yy) (Num x),\n         ldsj (map (\\<lambda>i. eql (Var yy) (Num i)) (toN n)),\n         LLq (Var yy) (Num n)}\n        (eql (Var yy) (Num x))", "apply(nrule r: nprv_hyp)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Num n) (Var yy)}\n     (dsj (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n       (LLq (Num n) (Var yy)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. nprv {LLq (Num n) (Var yy)}\n     (dsj (sdsj {eql (Var yy) r |r. \\<exists>i. r = Num i \\<and> i \\<le> n})\n       (LLq (Num n) (Var yy)))", "by (nrule r: nprv_dsjIR)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  \\<exists>P\\<subseteq>num.\n     finite P \\<and>\n     prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>context @{locale Deduct_Q}\\<close>"], ["", "sublocale Deduct_Q < lab: Deduct_with_PseudoOrder where Lq = \"LLq (Var zz) (Var yy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deduct_with_PseudoOrder var trm fmla Var FvarsT substT Fvars subst eql\n     cnj imp all exi fls dsj num prv (LLq (Var zz) (Var yy))", "apply standard"], ["proof (prove)\ngoal (4 subgoals):\n 1. LLq (Var zz) (Var yy) \\<in> fmla\n 2. Fvars (LLq (Var zz) (Var yy)) = {zz, yy}\n 3. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>\\<phi>\\<in>fmla.\n          \\<forall>q\\<in>num.\n             Fvars \\<phi> = {zz} \\<and>\n             (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n             prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n 4. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>p\\<in>num.\n          \\<exists>P\\<subseteq>num.\n             finite P \\<and>\n             prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n                   (LLq p (Var yy)))", "apply auto[]"], ["proof (prove)\ngoal (3 subgoals):\n 1. Fvars (LLq (Var zz) (Var yy)) = {zz, yy}\n 2. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>\\<phi>\\<in>fmla.\n          \\<forall>q\\<in>num.\n             Fvars \\<phi> = {zz} \\<and>\n             (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n             prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n 3. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>p\\<in>num.\n          \\<exists>P\\<subseteq>num.\n             finite P \\<and>\n             prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n                   (LLq p (Var yy)))", "using Fvars_Lq"], ["proof (prove)\nusing this:\n  Fvars Lq = {xx, yy}\n\ngoal (3 subgoals):\n 1. Fvars (LLq (Var zz) (Var yy)) = {zz, yy}\n 2. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>\\<phi>\\<in>fmla.\n          \\<forall>q\\<in>num.\n             Fvars \\<phi> = {zz} \\<and>\n             (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n             prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n 3. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>p\\<in>num.\n          \\<exists>P\\<subseteq>num.\n             finite P \\<and>\n             prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n                   (LLq p (Var yy)))", "apply auto[]"], ["proof (prove)\ngoal (2 subgoals):\n 1. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>\\<phi>\\<in>fmla.\n          \\<forall>q\\<in>num.\n             Fvars \\<phi> = {zz} \\<and>\n             (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n             prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n 2. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>p\\<in>num.\n          \\<exists>P\\<subseteq>num.\n             finite P \\<and>\n             prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n                   (LLq p (Var yy)))", "using LLq_num LLq_num2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {zz}; ?q \\<in> num;\n   \\<forall>p\\<in>num. prv (subst ?\\<phi> p zz)\\<rbrakk>\n  \\<Longrightarrow> prv (all zz (imp (LLq (Var zz) ?q) ?\\<phi>))\n  ?p \\<in> num \\<Longrightarrow>\n  \\<exists>P\\<subseteq>num.\n     finite P \\<and>\n     prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq ?p (Var yy)))\n\ngoal (2 subgoals):\n 1. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>\\<phi>\\<in>fmla.\n          \\<forall>q\\<in>num.\n             Fvars \\<phi> = {zz} \\<and>\n             (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n             prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n 2. let LLq =\n          \\<lambda>t1 t2.\n             psubst (LLq (Var zz) (Var yy)) [(t1, zz), (t2, yy)]\n    in \\<forall>p\\<in>num.\n          \\<exists>P\\<subseteq>num.\n             finite P \\<and>\n             prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n                   (LLq p (Var yy)))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}