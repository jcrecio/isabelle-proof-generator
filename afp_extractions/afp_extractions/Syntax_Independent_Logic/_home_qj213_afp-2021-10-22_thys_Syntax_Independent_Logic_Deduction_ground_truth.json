{"file_name": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic/Deduction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Syntax_Independent_Logic", "problem_names": ["lemma prv_imp_triv:\nassumes phi: \"\\<phi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nshows \"prv \\<psi> \\<Longrightarrow> prv (imp \\<phi> \\<psi>)\"", "lemma prv_imp_refl:\nassumes phi: \"\\<phi> \\<in> fmla\"\nshows \"prv (imp \\<phi> \\<phi>)\"", "lemma prv_imp_refl2: \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> \\<phi> = \\<psi> \\<Longrightarrow> prv (imp \\<phi> \\<psi>)\"", "lemma prv_cnjI:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\"\nshows \"prv \\<phi> \\<Longrightarrow> prv \\<chi> \\<Longrightarrow> prv (cnj \\<phi> \\<chi>)\"", "lemma prv_cnjEL:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\"\nshows \"prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<phi>\"", "lemma prv_cnjER:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\"\nshows \"prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<chi>\"", "lemma prv_prv_imp_trans:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nassumes 1: \"prv (imp \\<phi> \\<chi>)\" and 2: \"prv (imp \\<chi> \\<psi>)\"\nshows \"prv (imp \\<phi> \\<psi>)\"", "lemma prv_imp_trans1:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (imp \\<chi> \\<psi>) (imp (imp \\<phi> \\<chi>) (imp \\<phi> \\<psi>)))\"", "lemma prv_imp_com:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nassumes \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\"\nshows \"prv (imp \\<chi> (imp \\<phi> \\<psi>))\"", "lemma prv_imp_trans2:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\"", "lemma prv_imp_cnj:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp \\<phi> \\<psi>) \\<Longrightarrow> prv (imp \\<phi> \\<chi>) \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))\"", "lemma prv_imp_imp_com:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows\n\"prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp \\<chi> (imp \\<phi> \\<psi>)))\"", "lemma prv_cnj_imp_monoR2:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nassumes \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\"\nshows \"prv (imp (cnj \\<phi> \\<chi>) \\<psi>)\"", "lemma prv_imp_imp_imp_cnj:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows\n\"prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))\"", "lemma prv_imp_cnj_imp:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows\n\"prv (imp (imp (cnj \\<phi> \\<chi>) \\<psi>)\n          (imp \\<phi> (imp \\<chi> \\<psi>)))\"", "lemma prv_cnj_imp:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nassumes \"prv (imp (cnj \\<phi> \\<chi>) \\<psi>)\"\nshows \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\"", "lemma prv_cnj_imp_monoR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<phi> \\<psi>) (imp \\<phi> (cnj \\<chi> \\<psi>))))\"", "lemma prv_imp_cnj3L:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>1 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))\"", "lemma prv_imp_cnj3R:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>2 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))\"", "lemma prv_cnj_imp_mono:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (imp \\<phi>2 \\<chi>2) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\"", "lemma prv_cnj_mono:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi>1 \\<chi>1)\" and \"prv (imp \\<phi>2 \\<chi>2)\"\nshows \"prv (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))\"", "lemma prv_cnj_imp_monoR4:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi>1 \\<in> fmla\" and \"\\<psi>2 \\<in> fmla\"\nshows\n\"prv (imp (imp \\<phi> (imp \\<chi> \\<psi>1))\n          (imp (imp \\<phi> (imp \\<chi> \\<psi>2)) (imp \\<phi> (imp \\<chi> (cnj \\<psi>1 \\<psi>2)))))\"", "lemma prv_imp_cnj4:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi>1 \\<in> fmla\" and \"\\<psi>2 \\<in> fmla\"\nshows \"prv (imp \\<phi> (imp \\<chi> \\<psi>1)) \\<Longrightarrow> prv (imp \\<phi> (imp \\<chi> \\<psi>2)) \\<Longrightarrow> prv (imp \\<phi> (imp \\<chi> (cnj \\<psi>1 \\<psi>2)))\"", "lemma prv_cnj_imp_monoR5:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (imp \\<phi>2 \\<chi>2) (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))\"", "lemma prv_imp_cnj5:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi>1 \\<chi>1)\" and \"prv (imp \\<phi>2 \\<chi>2)\"\nshows \"prv (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))\"", "lemma prv_eqv_imp:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))\"", "lemma prv_eqv_eqv:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (eqv (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))\"", "lemma prv_imp_eqvEL:\n\"\\<phi>1 \\<in> fmla \\<Longrightarrow> \\<phi>2 \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi>1 \\<phi>2) \\<Longrightarrow> prv (imp \\<phi>1 \\<phi>2)\"", "lemma prv_imp_eqvER:\n\"\\<phi>1 \\<in> fmla \\<Longrightarrow> \\<phi>2 \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi>1 \\<phi>2) \\<Longrightarrow> prv (imp \\<phi>2 \\<phi>1)\"", "lemma prv_eqv_imp_trans:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi> \\<chi>) (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))\"", "lemma prv_eqv_cnj_trans:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>)) (eqv \\<phi> \\<psi>))\"", "lemma prv_eqvI:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv (imp \\<phi> \\<chi>)\" and \"prv (imp \\<chi> \\<phi>)\"\n  shows \"prv (eqv \\<phi> \\<chi>)\"", "lemma prv_eqv_refl: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi> \\<phi>)\"", "lemma prv_eqv_sym:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> \\<phi>)\"", "lemma prv_eqv_trans:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> \\<psi>) \\<Longrightarrow> prv (eqv \\<phi> \\<psi>)\"", "lemma imp_imp_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\"", "lemma imp_imp_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<chi>1 \\<chi>2) (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2)))\"", "lemma imp_imp_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (eqv \\<chi>1 \\<chi>2) (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\"", "lemma imp_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\"\nshows \"prv (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>))\"", "lemma imp_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2))\"", "lemma imp_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))\"", "lemma imp_cnj_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))\"", "lemma imp_cnj_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<chi>1 \\<chi>2) (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))\"", "lemma imp_cnj_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (eqv \\<chi>1 \\<chi>2) (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\"", "lemma cnj_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\"\nshows \"prv (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\"", "lemma cnj_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2))\"", "lemma cnj_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))\"", "lemma prv_eqv_prv:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" and \"prv (eqv \\<phi> \\<chi>)\"\n  shows \"prv \\<chi>\"", "lemma prv_eqv_prv_rev:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" and \"prv (eqv \\<chi> \\<phi>)\"\n  shows \"prv \\<chi>\"", "lemma prv_imp_eqv_transi:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi> \\<chi>1)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (imp \\<phi> \\<chi>2)\"", "lemma prv_imp_eqv_transi_rev:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi> \\<chi>2)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (imp \\<phi> \\<chi>1)\"", "lemma prv_eqv_imp_transi:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (imp \\<phi>2 \\<chi>)\"\nshows \"prv (imp \\<phi>1 \\<chi>)\"", "lemma prv_eqv_imp_transi_rev:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (imp \\<phi>1 \\<chi>)\"\nshows \"prv (imp \\<phi>2 \\<chi>)\"", "lemma prv_imp_monoL: \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\nprv (imp \\<chi> \\<psi>) \\<Longrightarrow> prv (imp (imp \\<phi> \\<chi>) (imp \\<phi> \\<psi>))\"", "lemma prv_imp_monoR: \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\nprv (imp \\<psi> \\<chi>) \\<Longrightarrow> prv (imp (imp \\<chi> \\<phi>) (imp \\<psi> \\<phi>))\"", "lemma prv_cnj_com_imp:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n shows \"prv (imp (cnj \\<phi> \\<chi>) (cnj \\<chi> \\<phi>))\"", "lemma prv_cnj_com:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n shows \"prv (eqv (cnj \\<phi> \\<chi>) (cnj \\<chi> \\<phi>))\"", "lemma prv_cnj_assoc_imp1:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (imp (cnj \\<phi> (cnj \\<chi> \\<psi>)) (cnj (cnj \\<phi> \\<chi>) \\<psi>))\"", "lemma prv_cnj_assoc_imp2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>) (cnj \\<phi> (cnj \\<chi> \\<psi>)))\"", "lemma prv_cnj_assoc:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n  shows \"prv (eqv (cnj \\<phi> (cnj \\<chi> \\<psi>)) (cnj (cnj \\<phi> \\<chi>) \\<psi>))\"", "lemma prv_cnj_com_imp3:\n  assumes \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\" \"\\<phi>3 \\<in> fmla\"\n  shows \"prv (imp (cnj \\<phi>1 (cnj \\<phi>2 \\<phi>3))\n                (cnj \\<phi>2 (cnj \\<phi>1 \\<phi>3)))\"", "lemma prv_allE:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\n  shows \"prv (all x \\<phi>) \\<Longrightarrow> prv (subst \\<phi> t x)\"", "lemma prv_exiI:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\n  shows \"prv (subst \\<phi> t x) \\<Longrightarrow> prv (exi x \\<phi>)\"", "lemma prv_imp_imp_exi:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"x \\<notin> Fvars \\<phi>\"\n  shows \"prv (imp (exi x (imp \\<phi> \\<chi>)) (imp \\<phi> (exi x \\<chi>)))\"", "lemma prv_imp_exi:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  shows \"x \\<notin> Fvars \\<phi> \\<Longrightarrow> prv (exi x (imp \\<phi> \\<chi>)) \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))\"", "lemma prv_exi_imp:\n  assumes x: \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"x \\<notin> Fvars \\<chi>\" and d: \"prv (all x (imp \\<phi> \\<chi>))\"\n  shows \"prv (imp (exi x \\<phi>) \\<chi>)\"", "lemma prv_all_imp:\n  assumes x: \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"x \\<notin> Fvars \\<phi>\" and \"prv (all x (imp \\<phi> \\<chi>))\"\n  shows \"prv (imp \\<phi> (all x \\<chi>))\"", "lemma prv_exi_inst_same:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n  shows \"prv (imp \\<phi> (exi x \\<phi>))\"", "lemma prv_exi_cong:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (exi x \\<phi>) (exi x \\<chi>))\"", "lemma prv_exi_congW:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\" \"prv (exi x \\<phi>)\"\n  shows \"prv (exi x \\<chi>)\"", "lemma prv_all_cong:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (all x \\<phi>) (all x \\<chi>))\"", "lemma prv_all_congW:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\" \"prv (all x \\<phi>)\"\n  shows \"prv (all x \\<chi>)\"", "lemma exists_no_Fvars: \"\\<exists> \\<phi>. \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}\"", "lemma prv_all_gen:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" shows \"prv (all x \\<phi>)\"", "lemma all_subst_rename_prv:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> x \\<in> var \\<Longrightarrow> y \\<in> var \\<Longrightarrow>\n   y \\<notin> Fvars \\<phi> \\<Longrightarrow> prv (all x \\<phi>) \\<Longrightarrow> prv (all y (subst \\<phi> (Var y) x))\"", "lemma allE_id:\n  assumes \"y \\<in> var\" and \"\\<phi> \\<in> fmla\"\n  assumes \"prv (all y \\<phi>)\"\n  shows \"prv \\<phi>\"", "lemma prv_subst:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\n  shows \"prv \\<phi> \\<Longrightarrow> prv (subst \\<phi> t x)\"", "lemma prv_rawpsubst:\n  assumes \"\\<phi> \\<in> fmla\" and \"snd ` (set txs) \\<subseteq> var\" and \"fst ` (set txs) \\<subseteq> trm\"\n    and \"prv \\<phi>\"\n  shows \"prv (rawpsubst \\<phi> txs)\"", "lemma prv_psubst:\n  assumes \"\\<phi> \\<in> fmla\" and \"snd ` (set txs) \\<subseteq> var\" and \"fst ` (set txs) \\<subseteq> trm\"\n    and \"prv \\<phi>\"\n  shows \"prv (psubst \\<phi> txs)\"", "lemma prv_eqv_rawpsubst:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> snd ` set txs \\<subseteq> var \\<Longrightarrow> fst ` set txs \\<subseteq> trm \\<Longrightarrow> prv (eqv \\<phi> \\<psi>) \\<Longrightarrow>\n prv (eqv (rawpsubst \\<phi> txs) (rawpsubst \\<psi> txs))\"", "lemma prv_eqv_psubst:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> snd ` set txs \\<subseteq> var \\<Longrightarrow> fst ` set txs \\<subseteq> trm \\<Longrightarrow> prv (eqv \\<phi> \\<psi>) \\<Longrightarrow>\n distinct (map snd txs) \\<Longrightarrow>\n prv (eqv (psubst \\<phi> txs) (psubst \\<psi> txs))\"", "lemma prv_all_imp_trans:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\n  shows \"prv (all x (imp \\<phi> \\<chi>)) \\<Longrightarrow> prv (all x (imp \\<chi> \\<psi>)) \\<Longrightarrow> prv (all x (imp \\<phi> \\<psi>))\"", "lemma prv_all_imp_cnj:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\n  shows \"prv (all x (imp \\<phi> (imp \\<psi> \\<chi>))) \\<Longrightarrow> prv (all x (imp (cnj \\<psi> \\<phi>) \\<chi>))\"", "lemma prv_all_imp_cnj_rev:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\n  shows \"prv (all x (imp (cnj \\<phi> \\<psi>) \\<chi>)) \\<Longrightarrow> prv (all x (imp \\<phi> (imp \\<psi> \\<chi>)))\"", "lemma prv_eql_reflT:\n  assumes t: \"t \\<in> trm\"\n  shows \"prv (eql t t)\"", "lemma prv_eql_subst_trm:\n  assumes xx: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  shows \"prv ((imp (eql t1 t2)\n                 (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x))))\"", "lemma prv_eql_subst_trm2:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  assumes \"prv (eql t1 t2)\"\n  shows \"prv (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x))\"", "lemma prv_eql_sym:\n  assumes [simp]: \"t1 \\<in> trm\" \"t2 \\<in> trm\"\n  shows \"prv (imp (eql t1 t2) (eql t2 t1))\"", "lemma prv_prv_eql_sym: \"t1 \\<in> trm \\<Longrightarrow> t2 \\<in> trm \\<Longrightarrow> prv (eql t1 t2) \\<Longrightarrow> prv (eql t2 t1)\"", "lemma prv_all_eql:\n  assumes \"x \\<in> var\" and \"y \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  shows \"prv (all x ((imp (eql t1 t2)\n                   (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y)))))\"", "lemma prv_eql_subst_trm_rev:\n  assumes \"t1 \\<in> trm\" and \"t2 \\<in> trm\" and \"\\<phi> \\<in> fmla\" and \"y \\<in> var\"\n  shows\n    \"prv ((imp (eql t1 t2)\n           (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y))))\"", "lemma prv_eql_subst_trm_rev2:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  assumes \"prv (eql t1 t2)\"\n  shows \"prv (imp (subst \\<phi> t2 x) (subst \\<phi> t1 x))\"", "lemma prv_eql_subst_trm_eqv:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  assumes \"prv (eql t1 t2)\"\n  shows \"prv (eqv (subst \\<phi> t1 x) (subst \\<phi> t2 x))\"", "lemma prv_eql_subst_trm_id:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql (Var y) n) (imp \\<phi> (subst \\<phi> n y)))\"", "lemma prv_eql_subst_trm_id_back:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql (Var y) n) (imp (subst \\<phi> n y) \\<phi>))\"", "lemma prv_eql_subst_trm_id_rev:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql n (Var y)) (imp \\<phi> (subst \\<phi> n y)))\"", "lemma prv_eql_subst_trm_id_back_rev:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql n (Var y)) (imp (subst \\<phi> n y) \\<phi>))\"", "lemma prv_eql_imp_trans_rev:\n  assumes t1[simp]: \"t1 \\<in> trm\" and t2[simp]: \"t2 \\<in> trm\" and t3[simp]: \"t3 \\<in> trm\"\n  shows \"prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))\"", "lemma prv_eql_imp_trans:\n  assumes t1[simp]: \"t1 \\<in> trm\" and t2[simp]: \"t2 \\<in> trm\" and t3[simp]: \"t3 \\<in> trm\"\n  shows \"prv (imp (eql t1 t2) (imp (eql t2 t3) (eql t1 t3)))\"", "lemma prv_eql_trans:\n  assumes t1[simp]: \"t1 \\<in> trm\" and t2[simp]: \"t2 \\<in> trm\" and t3[simp]: \"t3 \\<in> trm\"\n    and \"prv (eql t1 t2)\" and \"prv (eql t2 t3)\"\n  shows \"prv (eql t1 t3)\"", "lemma prv_subst_imp_softSubst:\n  assumes [simp,intro!]: \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\" \"x \\<notin> FvarsT t\"\n  shows \"prv (imp (subst \\<phi> t x) (softSubst \\<phi> t x))\"", "lemma prv_subst_implies_softSubst:\n  assumes \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\"\n    and \"x \\<notin> FvarsT t\"\n    and \"prv (subst \\<phi> t x)\"\n  shows \"prv (softSubst \\<phi> t x)\"", "lemma prv_softSubst_imp_subst:\n  assumes [simp,intro!]: \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\" \"x \\<notin> FvarsT t\"\n  shows \"prv (imp (softSubst \\<phi> t x) (subst \\<phi> t x))\"", "lemma prv_softSubst_implies_subst:\n  assumes \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\"\n    and \"x \\<notin> FvarsT t\"\n    and \"prv (softSubst \\<phi> t x)\"\n  shows \"prv (subst \\<phi> t x)\"", "lemma prv_softSubst_eqv_subst:\n  assumes [simp,intro!]: \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\" \"x \\<notin> FvarsT t\"\n  shows \"prv (eqv (softSubst \\<phi> t x) (subst \\<phi> t x))\"", "lemma prv_expl:\n  assumes \"\\<phi> \\<in> fmla\"\n  assumes \"prv fls\"\n  shows \"prv \\<phi>\"", "lemma prv_cnjR_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj fls \\<phi>) fls)\"", "lemma prv_cnjL_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj \\<phi> fls) fls)\"", "lemma prv_imp_neg_fls:\n  assumes \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp \\<phi> (imp (neg \\<phi>) fls))\"", "lemma prv_neg_fls:\n  assumes \"\\<phi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" and \"prv (neg \\<phi>)\"\n  shows \"prv fls\"", "lemma prv_imp_neg_neg:\n  assumes \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp \\<phi> (neg (neg \\<phi>)))\"", "lemma prv_neg_neg:\n  assumes \"\\<phi> \\<in> fmla\"\n  assumes \"prv \\<phi>\"\n  shows \"prv (neg (neg \\<phi>))\"", "lemma prv_imp_imp_neg_rev:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  shows \"prv (imp (imp \\<phi> \\<chi>)\n                (imp (neg \\<chi>) (neg \\<phi>)))\"", "lemma prv_imp_neg_rev:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (neg \\<chi>) (neg \\<phi>))\"", "lemma prv_eqv_neg_prv_fls:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow>\nprv (eqv \\<phi> (neg \\<phi>)) \\<Longrightarrow> prv fls\"", "lemma prv_eqv_eqv_neg_prv_fls:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow>\nprv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<phi> (neg \\<chi>))\\<Longrightarrow> prv fls\"", "lemma prv_eqv_eqv_neg_prv_fls2:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow>\nprv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> (neg \\<phi>))\\<Longrightarrow> prv fls\"", "lemma prv_neg_imp_imp_trans:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\"  \"\\<psi> \\<in> fmla\"\n    and \"prv (neg \\<phi>)\"\n    and \"prv (imp \\<chi> (imp \\<psi> \\<phi>))\"\n  shows \"prv (imp \\<chi> (neg \\<psi>))\"", "lemma prv_imp_neg_imp_neg_imp:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\"\n    and \"prv (neg \\<phi>)\"\n  shows \"prv ((imp \\<chi> (neg (imp \\<chi> \\<phi>))))\"", "lemma prv_prv_neg_imp_neg:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\"\n    and \"prv \\<phi>\" and \"prv \\<chi>\"\n  shows \"prv (neg (imp \\<phi> (neg \\<chi>)))\"", "lemma prv_imp_neg_imp_cnjL:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\"\n    and \"prv (imp \\<phi> (neg \\<phi>1))\"\n  shows \"prv (imp \\<phi> (neg (cnj \\<phi>1 \\<phi>2)))\"", "lemma prv_imp_neg_imp_cnjR:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\"\n    and \"prv (imp \\<phi> (neg \\<phi>2))\"\n  shows \"prv (imp \\<phi> (neg (cnj \\<phi>1 \\<phi>2)))\"", "lemma prv_all_neg_imp_neg_exi:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\"", "lemma prv_neg_exi_imp_all_neg:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (neg (exi x \\<phi>)) (all x (neg \\<phi>)))\"", "lemma prv_neg_exi_eqv_all_neg:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\"\n  shows \"prv (eqv (neg (exi x \\<phi>)) (all x (neg \\<phi>)))\"", "lemma prv_neg_exi_implies_all_neg:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\" and \"prv (neg (exi x \\<phi>))\"\n  shows \"prv (all x (neg \\<phi>))\"", "lemma prv_neg_neg_exi:\n  assumes \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\n    and \"prv (neg \\<phi>)\"\n  shows \"prv (neg (exi x \\<phi>))\"", "lemma prv_exi_imp_exiI:\n  assumes [simp]: \"x \\<in> var\" \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and yx: \"y = x \\<or> y \\<notin> Fvars \\<phi>\"\n  shows \"prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))\"", "lemma prv_imp_neg_allI:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"t \\<in> trm\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> (neg (subst \\<chi> t x)))\"\n  shows \"prv (imp \\<phi> (neg (all x \\<chi>)))\"", "lemma prv_imp_neg_allWI:\n  assumes \"\\<chi> \\<in> fmla\" \"t \\<in> trm\" \"x \\<in> var\"\n    and \"prv (neg (subst \\<chi> t x))\"\n  shows \"prv (neg (all x \\<chi>))\"", "lemma prv_imp_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> tru)\"", "lemma prv_tru_imp: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (imp tru \\<phi>) \\<phi>)\"", "lemma prv_fls_neg_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv fls (neg tru))\"", "lemma prv_tru_neg_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv tru (neg fls))\"", "lemma prv_cnjR_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj tru \\<phi>) \\<phi>)\"", "lemma prv_cnjL_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj \\<phi> tru) \\<phi>)\"", "lemma prv_lcnj_imp_in:\n  assumes \"set \\<phi>s \\<subseteq> fmla\"\n    and \"\\<phi> \\<in> set \\<phi>s\"\n  shows \"prv (imp (lcnj \\<phi>s) \\<phi>)\"", "lemma prv_lcnj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\n    and \"\\<phi> \\<in> set \\<phi>s\" and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (lcnj \\<phi>s) \\<chi>)\"", "lemma prv_imp_lcnj:\n  assumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\n    and \"\\<And>\\<phi>. \\<phi> \\<in> set \\<phi>s \\<Longrightarrow> prv (imp \\<chi> \\<phi>)\"\n  shows \"prv (imp \\<chi> (lcnj \\<phi>s))\"", "lemma prv_lcnj_imp_inner:\n  assumes \"\\<phi> \\<in> fmla\" \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\"\n  shows \"prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))) (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\"", "lemma prv_lcnj_imp_remdups:\n  assumes \"set \\<phi>s \\<subseteq> fmla\"\n  shows \"prv (imp (lcnj (remdups \\<phi>s)) (lcnj \\<phi>s))\"", "lemma prv_lcnj_mono:\n  assumes \\<phi>1s: \"set \\<phi>1s \\<subseteq> fmla\" and \"set \\<phi>2s \\<subseteq> set \\<phi>1s\"\n  shows \"prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\"", "lemma prv_lcnj_eqv:\n  assumes \"set \\<phi>1s \\<subseteq> fmla\" and \"set \\<phi>2s = set \\<phi>1s\"\n  shows \"prv (eqv (lcnj \\<phi>1s) (lcnj \\<phi>2s))\"", "lemma prv_lcnj_mono_imp:\n  assumes \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\" and \"\\<forall> \\<phi>2 \\<in> set \\<phi>2s. \\<exists> \\<phi>1 \\<in> set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\"", "lemma prv_subst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"t \\<in> trm\" \"x \\<in> var\"\n  shows \"prv (eqv (subst (scnj F) t x) (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\"", "lemma prv_imp_subst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"t \\<in> trm\" \"x \\<in> var\"\n  shows \"prv (imp (subst (scnj F) t x) (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\"", "lemma prv_subst_scnj_imp:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"t \\<in> trm\" \"x \\<in> var\"\n  shows \"prv (imp (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) (subst (scnj F) t x))\"", "lemma prv_scnj_imp_in:\n  assumes \"F \\<subseteq> fmla\" \"finite F\"\n    and \"\\<phi> \\<in> F\"\n  shows \"prv (imp (scnj F) \\<phi>)\"", "lemma prv_scnj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n    and \"\\<phi> \\<in> F\" and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (scnj F) \\<chi>)\"", "lemma prv_imp_scnj:\n  assumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n    and \"\\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<chi> \\<phi>)\"\n  shows \"prv (imp \\<chi> (scnj F))\"", "lemma prv_scnj_mono:\n  assumes \"F1 \\<subseteq> fmla\" and \"F2 \\<subseteq> F1\" and \"finite F1\"\n  shows \"prv (imp (scnj F1) (scnj F2))\"", "lemma prv_scnj_mono_imp:\n  assumes \"F1 \\<subseteq> fmla\" \"F2 \\<subseteq> fmla\" \"finite F1\" \"finite F2\"\n    and \"\\<forall> \\<phi>2 \\<in> F2. \\<exists> \\<phi>1 \\<in> F1. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (scnj F1) (scnj F2))\"", "lemma prv_imp_scnj_insert:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))\"", "lemma prv_implies_scnj_insert:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n    and \"prv (scnj (insert \\<phi> F))\"\n  shows \"prv (cnj \\<phi> (scnj F))\"", "lemma prv_imp_cnj_scnj:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (cnj \\<phi> (scnj F)) (scnj (insert \\<phi> F)))\"", "lemma prv_implies_cnj_scnj:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n    and \"prv (cnj \\<phi> (scnj F))\"\n  shows \"prv (scnj (insert \\<phi> F))\"", "lemma prv_eqv_scnj_insert:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n  shows \"prv (eqv (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))\"", "lemma prv_scnj1_imp:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (scnj {\\<phi>}) \\<phi>)\"", "lemma prv_imp_scnj1:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (scnj {\\<phi>}))\"", "lemma prv_scnj2_imp_cnj:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (scnj {\\<phi>,\\<psi>}) (cnj \\<phi> \\<psi>))\"", "lemma prv_cnj_imp_scnj2:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (cnj \\<phi> \\<psi>) (scnj {\\<phi>,\\<psi>}))\"", "lemma prv_imp_imp_scnj2:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> (scnj {\\<phi>,\\<psi>})))\"", "lemma prv_rawpsubst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\"\n    and \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\n  shows \"prv (eqv (rawpsubst (scnj F) txs) (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))\"", "lemma prv_psubst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\"\n    and \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\n    and \"distinct (map snd txs)\"\n  shows \"prv (eqv (psubst (scnj F) txs) (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\"", "lemma prv_imp_psubst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"snd ` set txs \\<subseteq> var\" \"fst ` set txs \\<subseteq> trm\"\n    and \"distinct (map snd txs)\"\n  shows \"prv (imp (psubst (scnj F) txs) (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\"", "lemma prv_psubst_scnj_imp:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"snd ` set txs \\<subseteq> var\" \"fst ` set txs \\<subseteq> trm\"\n    and \"distinct (map snd txs)\"\n  shows \"prv (imp (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)) (psubst (scnj F) txs))\"", "lemma consistent_def2: \"consistent \\<longleftrightarrow> (\\<exists>\\<phi> \\<in> fmla. \\<not> prv \\<phi>)\"", "lemma consistent_def3: \"consistent \\<longleftrightarrow> (\\<forall>\\<phi> \\<in> fmla. \\<not> (prv \\<phi> \\<and> prv (neg \\<phi>)))\"", "lemma \\<omega>consistent_impliesStd1:\n  \"\\<omega>consistent \\<Longrightarrow>\n \\<omega>consistentStd1\"", "lemma \\<omega>consistent_impliesStd2:\n  \"\\<omega>consistent \\<Longrightarrow>\n \\<omega>consistentStd2\"", "lemma \\<omega>consistent_iffStd1:\n  assumes \"\\<And> \\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (neg (neg \\<phi>)) \\<phi>)\"\n  shows \"\\<omega>consistent \\<longleftrightarrow> \\<omega>consistentStd1\"", "lemma \\<omega>consistent_iffStd2:\n  assumes \"\\<And> \\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (neg (neg \\<phi>)) \\<phi>)\"\n  shows \"\\<omega>consistent \\<longleftrightarrow> \\<omega>consistentStd2\"", "lemma \\<omega>consistentStd1_implies_consistent:\n  assumes \"\\<omega>consistentStd1\"\n  shows \"consistent\"", "lemma \\<omega>consistentStd2_implies_consistent:\n  assumes \"\\<omega>consistentStd2\"\n  shows \"consistent\"", "lemma prv_imp_dsjEE:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n  assumes \" prv (imp \\<phi> \\<psi>)\" and \"prv (imp \\<chi> \\<psi>)\"\n  shows \"prv (imp (dsj \\<phi> \\<chi>) \\<psi>)\"", "lemma prv_dsj_cases:\n  assumes \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\" \"\\<chi> \\<in> fmla\"\n    and \"prv (dsj \\<phi>1 \\<phi>2)\" and \"prv (imp \\<phi>1 \\<chi>)\" and \"prv (imp \\<phi>2 \\<chi>)\"\n  shows \"prv \\<chi>\"", "lemma prv_dsj_com_imp:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n  shows \"prv (imp (dsj \\<phi> \\<chi>) (dsj \\<chi> \\<phi>))\"", "lemma prv_dsj_com:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n  shows \"prv (eqv (dsj \\<phi> \\<chi>) (dsj \\<chi> \\<phi>))\"", "lemma prv_dsj_assoc_imp1:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n  shows \"prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>)) (dsj (dsj \\<phi> \\<chi>) \\<psi>))\"", "lemma prv_dsj_assoc_imp2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>) (dsj \\<phi> (dsj \\<chi> \\<psi>)))\"", "lemma prv_dsj_assoc:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (eqv (dsj \\<phi> (dsj \\<chi> \\<psi>)) (dsj (dsj \\<phi> \\<chi>) \\<psi>))\"", "lemma prv_dsj_com_imp3:\nassumes \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\" \"\\<phi>3 \\<in> fmla\"\nshows \"prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n                (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))\"", "lemma prv_dsj_mono:\n\"\\<phi>1 \\<in> fmla \\<Longrightarrow> \\<phi>2 \\<in> fmla \\<Longrightarrow> \\<chi>1 \\<in> fmla \\<Longrightarrow> \\<chi>2 \\<in> fmla \\<Longrightarrow>\nprv (imp \\<phi>1 \\<chi>1) \\<Longrightarrow> prv (imp \\<phi>2 \\<chi>2) \\<Longrightarrow> prv (imp (dsj \\<phi>1 \\<phi>2) (dsj \\<chi>1 \\<chi>2))\"", "lemma prv_cnj_dsj_distrib1:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)) (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))\"", "lemma prv_cnj_dsj_distrib2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)) (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)))\"", "lemma prv_cnj_dsj_distrib:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (eqv (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)) (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))\"", "lemma prv_dsj_cnj_distrib1:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)) (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)))\"", "lemma prv_dsj_cnj_distrib2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)) (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))\"", "lemma prv_dsj_cnj_distrib:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (eqv (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)) (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)))\"", "lemma prv_dsjR_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj fls \\<phi>) \\<phi>)\"", "lemma prv_dsjL_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj \\<phi> fls) \\<phi>)\"", "lemma prv_dsjR_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj tru \\<phi>) tru)\"", "lemma prv_dsjL_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj \\<phi> tru) tru)\"", "lemma prv_imp_ldsj_in:\n  assumes \"set \\<phi>s \\<subseteq> fmla\"\n  and \"\\<phi> \\<in> set \\<phi>s\"\n  shows \"prv (imp \\<phi> (ldsj \\<phi>s))\"", "lemma prv_imp_ldsj:\nassumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\nand \"\\<phi> \\<in> set \\<phi>s\" and \"prv (imp \\<chi> \\<phi>)\"\nshows \"prv (imp \\<chi> (ldsj \\<phi>s))\"", "lemma prv_ldsj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\n  and \"\\<And>\\<phi>. \\<phi> \\<in> set \\<phi>s \\<Longrightarrow> prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (ldsj \\<phi>s) \\<chi>)\"", "lemma prv_ldsj_imp_inner:\nassumes \"\\<phi> \\<in> fmla\" \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\"\nshows \"prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)) (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\"", "lemma prv_ldsj_imp_remdups:\nassumes \"set \\<phi>s \\<subseteq> fmla\"\nshows \"prv (imp  (ldsj \\<phi>s) (ldsj (remdups \\<phi>s)))\"", "lemma prv_ldsj_mono:\nassumes \\<phi>2s: \"set \\<phi>2s \\<subseteq> fmla\" and \"set \\<phi>1s \\<subseteq> set \\<phi>2s\"\nshows \"prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\"", "lemma prv_ldsj_eqv:\nassumes \"set \\<phi>1s \\<subseteq> fmla\" and \"set \\<phi>2s = set \\<phi>1s\"\nshows \"prv (eqv (ldsj \\<phi>1s) (ldsj \\<phi>2s))\"", "lemma prv_ldsj_mono_imp:\n  assumes \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\" and \"\\<forall> \\<phi>1 \\<in> set \\<phi>1s. \\<exists> \\<phi>2 \\<in> set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\"", "lemma prv_subst_sdsj:\n\"F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> t \\<in> trm \\<Longrightarrow> x \\<in> var \\<Longrightarrow>\n prv (eqv (subst (sdsj F) t x) (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\"", "lemma prv_imp_sdsj_in:\n  assumes \"\\<phi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n  and \"\\<phi> \\<in> F\"\n  shows \"prv (imp \\<phi> (sdsj F))\"", "lemma prv_imp_sdsj:\nassumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\nand \"\\<phi> \\<in> F\" and \"prv (imp \\<chi> \\<phi>)\"\nshows \"prv (imp \\<chi> (sdsj F))\"", "lemma prv_sdsj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n  and \"\\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (sdsj F) \\<chi>)\"", "lemma prv_sdsj_mono:\nassumes \"F2 \\<subseteq> fmla\" and \"F1 \\<subseteq> F2\" and \"finite F2\"\nshows \"prv (imp (sdsj F1) (sdsj F2))\"", "lemma prv_sdsj_mono_imp:\n  assumes \"F1 \\<subseteq> fmla\" \"F2 \\<subseteq> fmla\" \"finite F1\" \"finite F2\"\n  and \"\\<forall> \\<phi>1 \\<in> F1. \\<exists> \\<phi>2 \\<in> F2. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (sdsj F1) (sdsj F2))\"", "lemma prv_sdsj_cases:\nassumes \"F \\<subseteq> fmla\" \"finite F\" \"\\<psi> \\<in> fmla\"\nand \"prv (sdsj F)\" and \"\\<And> \\<phi>. \\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<phi> \\<psi>)\"\nshows \"prv \\<psi>\"", "lemma prv_sdsj1_imp:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (sdsj {\\<phi>}) \\<phi>)\"", "lemma prv_imp_sdsj1:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (sdsj {\\<phi>}))\"", "lemma prv_sdsj2_imp_dsj:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (sdsj {\\<phi>,\\<psi>}) (dsj \\<phi> \\<psi>))\"", "lemma prv_dsj_imp_sdsj2:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (dsj \\<phi> \\<psi>) (sdsj {\\<phi>,\\<psi>}))\"", "lemma prv_rawpsubst_sdsj:\nassumes \"F \\<subseteq> fmla\" \"finite F\"\nand \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\nshows \"prv (eqv (rawpsubst (sdsj F) txs) (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))\"", "lemma prv_psubst_sdsj:\nassumes \"F \\<subseteq> fmla\" \"finite F\"\nand \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\nand \"distinct (map snd txs)\"\nshows \"prv (eqv (psubst (sdsj F) txs) (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\"", "lemma LLq_num:\nassumes \"\\<phi> \\<in> fmla\" \"q \\<in> num\" \"Fvars \\<phi> = {zz}\" \"\\<forall> p \\<in> num. prv (subst \\<phi> p zz)\"\nshows \"prv (all zz (imp (LLq (Var zz) q) \\<phi>))\"", "lemma LLq_num2:\nassumes \"p \\<in> num\"\nshows \"\\<exists> P \\<subseteq> num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r | r. r \\<in> P}) (LLq p (Var yy)))\""], "translations": [["", "lemma prv_imp_triv:\nassumes phi: \"\\<phi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nshows \"prv \\<psi> \\<Longrightarrow> prv (imp \\<phi> \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<psi> \\<Longrightarrow> prv (imp \\<phi> \\<psi>)", "by (meson prv_imp_imp_triv prv_imp_mp imp phi psi)"], ["", "lemma prv_imp_refl:\nassumes phi: \"\\<phi> \\<in> fmla\"\nshows \"prv (imp \\<phi> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<phi>)", "by (metis prv_imp_imp_triv prv_imp_mp prv_imp_trans imp phi)"], ["", "lemma prv_imp_refl2: \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> \\<phi> = \\<psi> \\<Longrightarrow> prv (imp \\<phi> \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla; \\<phi> = \\<psi>\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> \\<psi>)", "using prv_imp_refl"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla; \\<phi> = \\<psi>\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> \\<psi>)", "by auto"], ["", "lemma prv_cnjI:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\"\nshows \"prv \\<phi> \\<Longrightarrow> prv \\<chi> \\<Longrightarrow> prv (cnj \\<phi> \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv \\<phi>; prv \\<chi>\\<rbrakk>\n    \\<Longrightarrow> prv (cnj \\<phi> \\<chi>)", "by (meson cnj prv_imp_cnjI prv_imp_mp imp phi chi)"], ["", "lemma prv_cnjEL:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\"\nshows \"prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<phi>", "using chi phi prv_imp_cnjL prv_imp_mp"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  \\<phi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<phi>", "by blast"], ["", "lemma prv_cnjER:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\"\nshows \"prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<chi>", "using chi phi prv_imp_cnjR prv_imp_mp"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  \\<phi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (cnj \\<phi> \\<chi>) \\<Longrightarrow> prv \\<chi>", "by blast"], ["", "lemma prv_prv_imp_trans:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nassumes 1: \"prv (imp \\<phi> \\<chi>)\" and 2: \"prv (imp \\<chi> \\<psi>)\"\nshows \"prv (imp \\<phi> \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<psi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<psi>)", "have \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<chi> \\<psi>))", "by (simp add: 2 chi prv_imp_triv phi psi)"], ["proof (state)\nthis:\n  prv (imp \\<phi> (imp \\<chi> \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<psi>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> (imp \\<chi> \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<psi>)", "by (metis 1 chi prv_imp_mp prv_imp_trans imp phi psi)"], ["proof (state)\nthis:\n  prv (imp \\<phi> \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_trans1:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (imp \\<chi> \\<psi>) (imp (imp \\<phi> \\<chi>) (imp \\<phi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<chi> \\<psi>)\n          (imp (imp \\<phi> \\<chi>) (imp \\<phi> \\<psi>)))", "by (meson chi prv_prv_imp_trans prv_imp_imp_triv prv_imp_trans imp phi psi)"], ["", "lemma prv_imp_com:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nassumes \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\"\nshows \"prv (imp \\<chi> (imp \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (imp \\<phi> \\<psi>))", "by (metis (no_types) assms prv_prv_imp_trans prv_imp_imp_triv prv_imp_mp prv_imp_trans imp)"], ["", "lemma prv_imp_trans2:\nassumes phi: \"\\<phi> \\<in> fmla\" and chi: \"\\<chi> \\<in> fmla\" and psi: \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> \\<chi>)\n          (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))", "using prv_imp_mp prv_imp_trans prv_imp_trans1 prv_imp_imp_triv"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<chi> ?\\<psi>)\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> ?\\<phi>))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> \\<chi>)\n          (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))", "by (meson chi prv_imp_com imp phi psi)"], ["", "lemma prv_imp_cnj:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp \\<phi> \\<psi>) \\<Longrightarrow> prv (imp \\<phi> \\<chi>) \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "assume \"prv (imp \\<phi> \\<psi>)\""], ["proof (state)\nthis:\n  prv (imp \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "moreover"], ["proof (state)\nthis:\n  prv (imp \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "assume \"prv (imp \\<phi> \\<chi>)\""], ["proof (state)\nthis:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "then"], ["proof (chain)\npicking this:\n  prv (imp \\<phi> \\<chi>)", "have \"prv (imp \\<phi> (imp \\<psi> f))\" if \"prv (imp \\<chi> f)\" \"f \\<in> fmla\" for f"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<psi> f))", "using that"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n  prv (imp \\<chi> f)\n  f \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<psi> f))", "by (metis (no_types) assms imp prv_imp_imp_triv prv_prv_imp_trans)"], ["proof (state)\nthis:\n  \\<lbrakk>prv (imp \\<chi> ?f); ?f \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> ?f))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>prv (imp \\<chi> ?f); ?f \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> ?f))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "have \"prv (imp \\<phi> (imp \\<psi> \\<psi>)) \\<Longrightarrow> prv (imp \\<phi> (imp \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<psi> \\<psi>)) \\<Longrightarrow>\n    prv (imp \\<phi> (imp \\<phi> \\<psi>))", "using \\<open>prv (imp \\<phi> \\<psi>)\\<close>"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<psi> \\<psi>)) \\<Longrightarrow>\n    prv (imp \\<phi> (imp \\<phi> \\<psi>))", "by (metis (no_types) assms(1,3) imp prv_imp_com prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp \\<phi> (imp \\<psi> \\<psi>)) \\<Longrightarrow>\n  prv (imp \\<phi> (imp \\<phi> \\<psi>))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> \\<psi>); prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "ultimately"], ["proof (chain)\npicking this:\n  prv (imp \\<phi> \\<psi>)\n  \\<lbrakk>prv (imp \\<chi> ?f); ?f \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> ?f))\n  prv (imp \\<phi> (imp \\<psi> \\<psi>)) \\<Longrightarrow>\n  prv (imp \\<phi> (imp \\<phi> \\<psi>))", "show ?thesis"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<psi>)\n  \\<lbrakk>prv (imp \\<chi> ?f); ?f \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> ?f))\n  prv (imp \\<phi> (imp \\<psi> \\<psi>)) \\<Longrightarrow>\n  prv (imp \\<phi> (imp \\<phi> \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (cnj \\<psi> \\<chi>))", "by (metis (no_types) assms cnj imp prv_imp_cnjI prv_imp_com prv_imp_mp prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp \\<phi> (cnj \\<psi> \\<chi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_imp_com:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows\n\"prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp \\<chi> (imp \\<phi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp \\<chi> (imp \\<phi> \\<psi>)))", "by (metis (no_types) assms\n   prv_prv_imp_trans prv_imp_com prv_imp_imp_triv prv_imp_trans imp)"], ["", "lemma prv_cnj_imp_monoR2:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nassumes \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\"\nshows \"prv (imp (cnj \\<phi> \\<chi>) \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) \\<psi>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) \\<psi>)", "have \"prv (imp (cnj \\<phi> \\<chi>) (cnj \\<phi> \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) (cnj \\<phi> \\<chi>))", "using prv_imp_refl"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) (cnj \\<phi> \\<chi>))", "by (blast intro: assms(1-3))"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi> \\<chi>) (cnj \\<phi> \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) \\<psi>)", "then"], ["proof (chain)\npicking this:\n  prv (imp (cnj \\<phi> \\<chi>) (cnj \\<phi> \\<chi>))", "have \"prv (imp (imp (cnj \\<phi> \\<chi>) (imp (cnj \\<phi> \\<chi>) \\<psi>)) (imp (cnj \\<phi> \\<chi>) \\<psi>))\""], ["proof (prove)\nusing this:\n  prv (imp (cnj \\<phi> \\<chi>) (cnj \\<phi> \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (imp (cnj \\<phi> \\<chi>) (imp (cnj \\<phi> \\<chi>) \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "by (metis (no_types) cnj imp assms(1-3) prv_imp_com prv_imp_mp prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (imp (cnj \\<phi> \\<chi>) (imp (cnj \\<phi> \\<chi>) \\<psi>))\n        (imp (cnj \\<phi> \\<chi>) \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) \\<psi>)", "then"], ["proof (chain)\npicking this:\n  prv (imp (imp (cnj \\<phi> \\<chi>) (imp (cnj \\<phi> \\<chi>) \\<psi>))\n        (imp (cnj \\<phi> \\<chi>) \\<psi>))", "show ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (imp (cnj \\<phi> \\<chi>) (imp (cnj \\<phi> \\<chi>) \\<psi>))\n        (imp (cnj \\<phi> \\<chi>) \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) \\<psi>)", "by (metis (no_types) imp cnj assms prv_imp_cnjL prv_imp_cnjR prv_imp_com prv_imp_mp prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi> \\<chi>) \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_imp_imp_cnj:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows\n\"prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "have \"prv (imp \\<phi> (imp (imp \\<phi> (imp \\<chi> \\<psi>)) (imp \\<chi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi>\n          (imp (imp \\<phi> (imp \\<chi> \\<psi>)) (imp \\<chi> \\<psi>)))", "by (simp add: assms prv_imp_com prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp \\<phi>\n        (imp (imp \\<phi> (imp \\<chi> \\<psi>)) (imp \\<chi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "hence \"prv (imp \\<phi> (imp \\<chi> (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>)))\""], ["proof (prove)\nusing this:\n  prv (imp \\<phi>\n        (imp (imp \\<phi> (imp \\<chi> \\<psi>)) (imp \\<chi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi>\n          (imp \\<chi> (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>)))", "by (metis (no_types, lifting) assms prv_prv_imp_trans prv_imp_imp_com imp)"], ["proof (state)\nthis:\n  prv (imp \\<phi>\n        (imp \\<chi> (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "hence \"prv (imp (cnj \\<phi> \\<chi>)\n                    (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>))\""], ["proof (prove)\nusing this:\n  prv (imp \\<phi>\n        (imp \\<chi> (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>)\n          (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>))", "by (simp add: assms prv_cnj_imp_monoR2)"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi> \\<chi>)\n        (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (cnj \\<phi> \\<chi>)\n        (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "using assms prv_imp_com prv_imp_mp"], ["proof (prove)\nusing this:\n  prv (imp (cnj \\<phi> \\<chi>)\n        (imp (imp \\<phi> (imp \\<chi> \\<psi>)) \\<psi>))\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (imp ?\\<phi> ?\\<psi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n          (imp (cnj \\<phi> \\<chi>) \\<psi>))", "by (meson cnj imp)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi> (imp \\<chi> \\<psi>))\n        (imp (cnj \\<phi> \\<chi>) \\<psi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_cnj_imp:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows\n\"prv (imp (imp (cnj \\<phi> \\<chi>) \\<psi>)\n          (imp \\<phi> (imp \\<chi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp (cnj \\<phi> \\<chi>) \\<psi>)\n          (imp \\<phi> (imp \\<chi> \\<psi>)))", "by (metis (no_types) assms cnj prv_prv_imp_trans prv_imp_cnjI prv_imp_com prv_imp_trans2 imp)"], ["", "lemma prv_cnj_imp:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nassumes \"prv (imp (cnj \\<phi> \\<chi>) \\<psi>)\"\nshows \"prv (imp \\<phi> (imp \\<chi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<chi> \\<psi>))", "using assms prv_imp_cnj_imp prv_imp_mp"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  prv (imp (cnj \\<phi> \\<chi>) \\<psi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\n                          (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp \\<chi> \\<psi>))", "by (meson cnj imp)"], ["", "text \\<open>Monotonicy of conjunction w.r.t. implication:\\<close>"], ["", "lemma prv_cnj_imp_monoR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<phi> \\<psi>) (imp \\<phi> (cnj \\<chi> \\<psi>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> \\<chi>)\n          (imp (imp \\<phi> \\<psi>) (imp \\<phi> (cnj \\<chi> \\<psi>))))", "by (meson assms cnj imp prv_cnj_imp prv_cnj_imp_monoR2 prv_imp_cnj prv_imp_cnjL prv_imp_cnjR)"], ["", "lemma prv_imp_cnj3L:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>1 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))", "using assms prv_imp_cnjL prv_imp_mp prv_imp_trans2"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))", "by (metis cnj imp)"], ["", "lemma prv_imp_cnj3R:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>2 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>2 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))", "using prv_imp_cnjR prv_imp_mp prv_imp_trans2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>2 \\<chi>) (imp (cnj \\<phi>1 \\<phi>2) \\<chi>))", "by (metis assms cnj imp)"], ["", "lemma prv_cnj_imp_mono:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (imp \\<phi>2 \\<chi>2) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "have \"prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>1) (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>1)\n          (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "using prv_cnj_imp_monoR[of \"cnj \\<phi>1 \\<phi>2\" \\<chi>1 \\<chi>2] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>cnj \\<phi>1 \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla;\n   \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>1)\n                          (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n                            (imp (cnj \\<phi>1 \\<phi>2)\n                              (cnj \\<chi>1 \\<chi>2))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>1)\n          (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>1)\n        (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "hence \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\nusing this:\n  prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>1)\n        (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "by (metis (no_types) imp cnj assms prv_imp_cnj3L prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "hence \"prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2) (imp (imp \\<phi>1 \\<chi>1) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (imp \\<phi>1 \\<chi>1)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "using prv_imp_com assms"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (imp ?\\<phi> ?\\<psi>))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n          (imp (imp \\<phi>1 \\<chi>1)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "by (meson cnj imp)"], ["proof (state)\nthis:\n  prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n        (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "hence \"prv (imp (imp \\<phi>2 \\<chi>2) (imp (imp \\<phi>1 \\<chi>1) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\nusing this:\n  prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n        (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>2 \\<chi>2)\n          (imp (imp \\<phi>1 \\<chi>1)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "using prv_imp_cnj3R prv_imp_mp prv_imp_trans1"], ["proof (prove)\nusing this:\n  prv (imp (imp (cnj \\<phi>1 \\<phi>2) \\<chi>2)\n        (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla;\n   ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi>2.0 ?\\<chi>)\n                          (imp (cnj ?\\<phi>1.0 ?\\<phi>2.0) ?\\<chi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<chi> ?\\<psi>)\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>2 \\<chi>2)\n          (imp (imp \\<phi>1 \\<chi>1)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "by (metis (no_types) assms cnj prv_prv_imp_trans imp)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>2 \\<chi>2)\n        (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>2 \\<chi>2)\n        (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "using prv_imp_com assms"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>2 \\<chi>2)\n        (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (imp ?\\<phi> ?\\<psi>))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "by (meson cnj imp)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp \\<phi>2 \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_cnj_mono:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi>1 \\<chi>1)\" and \"prv (imp \\<phi>2 \\<chi>2)\"\nshows \"prv (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))", "using assms prv_cnj_imp_mono prv_imp_mp"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  prv (imp \\<phi>1 \\<chi>1)\n  prv (imp \\<phi>2 \\<chi>2)\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla;\n   ?\\<chi>1.0 \\<in> fmla; ?\\<chi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi>1.0 ?\\<chi>1.0)\n                          (imp (imp ?\\<phi>2.0 ?\\<chi>2.0)\n                            (imp (cnj ?\\<phi>1.0 ?\\<phi>2.0)\n                              (cnj ?\\<chi>1.0 ?\\<chi>2.0))))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))", "by (metis (mono_tags) cnj prv_prv_imp_trans prv_imp_cnj prv_imp_cnjL prv_imp_cnjR)"], ["", "lemma prv_cnj_imp_monoR4:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi>1 \\<in> fmla\" and \"\\<psi>2 \\<in> fmla\"\nshows\n\"prv (imp (imp \\<phi> (imp \\<chi> \\<psi>1))\n          (imp (imp \\<phi> (imp \\<chi> \\<psi>2)) (imp \\<phi> (imp \\<chi> (cnj \\<psi>1 \\<psi>2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> (imp \\<chi> \\<psi>1))\n          (imp (imp \\<phi> (imp \\<chi> \\<psi>2))\n            (imp \\<phi> (imp \\<chi> (cnj \\<psi>1 \\<psi>2)))))", "by (simp add: assms prv_cnj_imp prv_imp_cnj prv_imp_cnjL prv_imp_cnjR prv_cnj_imp_monoR2)"], ["", "lemma prv_imp_cnj4:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi>1 \\<in> fmla\" and \"\\<psi>2 \\<in> fmla\"\nshows \"prv (imp \\<phi> (imp \\<chi> \\<psi>1)) \\<Longrightarrow> prv (imp \\<phi> (imp \\<chi> \\<psi>2)) \\<Longrightarrow> prv (imp \\<phi> (imp \\<chi> (cnj \\<psi>1 \\<psi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (imp \\<phi> (imp \\<chi> \\<psi>1));\n     prv (imp \\<phi> (imp \\<chi> \\<psi>2))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (imp \\<chi> (cnj \\<psi>1 \\<psi>2)))", "by (simp add: assms prv_cnj_imp prv_imp_cnj prv_cnj_imp_monoR2)"], ["", "lemma prv_cnj_imp_monoR5:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (imp \\<phi>2 \\<chi>2) (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "have \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (imp \\<phi>2 \\<chi>2) (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "using prv_cnj_imp_mono[of \\<phi>1 \\<phi>2  \\<chi>1 \\<chi>2] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla;\n   \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp \\<phi>1 \\<chi>1)\n                          (imp (imp \\<phi>2 \\<chi>2)\n                            (imp (cnj \\<phi>1 \\<phi>2)\n                              (cnj \\<chi>1 \\<chi>2))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp \\<phi>2 \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "hence \"prv (imp (imp \\<phi>1 \\<chi>1) (imp (cnj \\<phi>1 \\<phi>2) (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2))))\""], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp \\<phi>2 \\<chi>2)\n          (imp (cnj \\<phi>1 \\<phi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (cnj \\<phi>1 \\<phi>2)\n            (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2))))", "by (metis (no_types, lifting) assms cnj imp prv_imp_imp_com prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (cnj \\<phi>1 \\<phi>2)\n          (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "hence \"prv (imp (imp \\<phi>1 \\<chi>1) (imp \\<phi>1 (imp \\<phi>2 (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2)))))\""], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (cnj \\<phi>1 \\<phi>2)\n          (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp \\<phi>1\n            (imp \\<phi>2\n              (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2)))))", "using prv_imp_cnj_imp prv_imp_mp prv_imp_trans2"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (cnj \\<phi>1 \\<phi>2)\n          (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2))))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\n                          (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp \\<phi>1\n            (imp \\<phi>2\n              (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2)))))", "by (metis (mono_tags) assms cnj prv_prv_imp_trans imp)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp \\<phi>1\n          (imp \\<phi>2 (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "hence 1: \"prv (imp (imp \\<phi>1 \\<chi>1) (imp \\<phi>1 (imp (imp \\<phi>2 \\<chi>2) (imp \\<phi>2  (cnj \\<chi>1 \\<chi>2)))))\""], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp \\<phi>1\n          (imp \\<phi>2 (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp \\<phi>1\n            (imp (imp \\<phi>2 \\<chi>2)\n              (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "using prv_cnj_imp prv_imp_cnjR prv_imp_mp prv_imp_trans1"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp \\<phi>1\n          (imp \\<phi>2 (imp (imp \\<phi>2 \\<chi>2) (cnj \\<chi>1 \\<chi>2)))))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<chi> ?\\<psi>)\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp \\<phi>1\n            (imp (imp \\<phi>2 \\<chi>2)\n              (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "by (metis (no_types) assms cnj prv_cnj_imp_monoR prv_prv_imp_trans prv_imp_imp_triv imp)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp \\<phi>1\n          (imp (imp \\<phi>2 \\<chi>2) (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp \\<phi>1\n          (imp (imp \\<phi>2 \\<chi>2) (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi>1 \\<chi>1)\n          (imp (imp \\<phi>2 \\<chi>2)\n            (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))", "by (metis (no_types, lifting) assms cnj imp prv_prv_imp_trans prv_imp_imp_com)"], ["proof (state)\nthis:\n  prv (imp (imp \\<phi>1 \\<chi>1)\n        (imp (imp \\<phi>2 \\<chi>2)\n          (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_cnj5:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi>1 \\<chi>1)\" and \"prv (imp \\<phi>2 \\<chi>2)\"\nshows \"prv (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi>1 (imp \\<phi>2 (cnj \\<chi>1 \\<chi>2)))", "by (simp add: assms prv_cnj_imp prv_cnj_mono)"], ["", "text \\<open>Properties of formula equivalence:\\<close>"], ["", "lemma prv_eqv_imp:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))", "by (simp add: assms prv_imp_cnj prv_imp_cnjL prv_imp_cnjR eqv_def)"], ["", "lemma prv_eqv_eqv:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (eqv (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))", "using assms prv_cnjI prv_eqv_imp eqv_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; prv ?\\<phi>;\n   prv ?\\<chi>\\<rbrakk>\n  \\<Longrightarrow> prv (cnj ?\\<phi> ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<phi> ?\\<chi>) (eqv ?\\<chi> ?\\<phi>))\n  eqv ?\\<phi> ?\\<chi> = cnj (imp ?\\<phi> ?\\<chi>) (imp ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (eqv (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<phi>))", "by auto"], ["", "lemma prv_imp_eqvEL:\n\"\\<phi>1 \\<in> fmla \\<Longrightarrow> \\<phi>2 \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi>1 \\<phi>2) \\<Longrightarrow> prv (imp \\<phi>1 \\<phi>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla;\n     prv (eqv \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>1 \\<phi>2)", "unfolding eqv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla;\n     prv (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>1 \\<phi>2)", "by (meson cnj imp prv_imp_cnjL prv_imp_mp)"], ["", "lemma prv_imp_eqvER:\n\"\\<phi>1 \\<in> fmla \\<Longrightarrow> \\<phi>2 \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi>1 \\<phi>2) \\<Longrightarrow> prv (imp \\<phi>2 \\<phi>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla;\n     prv (eqv \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>2 \\<phi>1)", "unfolding eqv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla;\n     prv (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>2 \\<phi>1)", "by (meson cnj imp prv_imp_cnjR prv_imp_mp)"], ["", "lemma prv_eqv_imp_trans:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi> \\<chi>) (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "have \"prv (imp (eqv \\<phi> \\<chi>) (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))", "using assms prv_imp_cnjL prv_imp_mp prv_imp_trans2 eqv_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n  eqv ?\\<phi> ?\\<chi> = cnj (imp ?\\<phi> ?\\<chi>) (imp ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))", "by (metis prv_imp_cnj3L eqv imp)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "hence \"prv (imp (eqv \\<phi> \\<chi>) (imp (eqv \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\""], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))", "using prv_imp_cnjL prv_imp_mp prv_imp_trans2 eqv_def"], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (imp \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n  eqv ?\\<phi> ?\\<chi> = cnj (imp ?\\<phi> ?\\<chi>) (imp ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))", "by (metis (no_types) assms prv_imp_cnj3L prv_imp_com eqv imp)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "hence 1: \"prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>)) (imp \\<phi> \\<psi>))\""], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (imp \\<phi> \\<psi>))", "using prv_cnj_imp_monoR2"], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (imp \\<phi> \\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (imp \\<phi> \\<psi>))", "by (simp add: assms(1) assms(2) assms(3))"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (imp \\<phi> \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "have \"prv (imp (eqv \\<phi> \\<chi>) (imp (imp \\<psi> \\<chi>) (imp \\<psi> \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (imp \\<psi> \\<chi>) (imp \\<psi> \\<phi>)))", "using prv_imp_cnjR prv_imp_mp prv_imp_trans1 eqv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<chi> ?\\<psi>)\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n  eqv ?\\<phi> ?\\<chi> = cnj (imp ?\\<phi> ?\\<chi>) (imp ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (imp \\<psi> \\<chi>) (imp \\<psi> \\<phi>)))", "by (metis assms prv_cnj_imp_monoR2 prv_imp_triv imp)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (imp \\<psi> \\<chi>) (imp \\<psi> \\<phi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "hence \"prv (imp (eqv \\<phi> \\<chi>) (imp (eqv \\<chi> \\<psi>) (imp \\<psi> \\<phi>)))\""], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (imp \\<psi> \\<chi>) (imp \\<psi> \\<phi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (imp \\<psi> \\<phi>)))", "by (metis assms cnj eqv_def imp prv_imp_cnj3R prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (imp \\<psi> \\<phi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "hence 2: \"prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>)) (imp \\<psi> \\<phi>))\""], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (imp \\<psi> \\<phi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (imp \\<psi> \\<phi>))", "using prv_cnj_imp_monoR2"], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (imp \\<psi> \\<phi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (imp \\<psi> \\<phi>))", "by (metis (no_types, lifting) assms eqv imp)"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (imp \\<psi> \\<phi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "have \"prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>)) (eqv \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (eqv \\<phi> \\<psi>))", "using 1 2"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (imp \\<phi> \\<psi>))\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (imp \\<psi> \\<phi>))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (eqv \\<phi> \\<psi>))", "using assms prv_imp_cnj"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (imp \\<phi> \\<psi>))\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (imp \\<psi> \\<phi>))\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<psi>); prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (cnj ?\\<psi> ?\\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (eqv \\<phi> \\<psi>))", "by (auto simp: eqv_def[of \\<phi> \\<psi>])"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (eqv \\<phi> \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n        (eqv \\<phi> \\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi> \\<chi>)\n          (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))", "by (simp add: assms prv_cnj_imp)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi> \\<chi>)\n        (imp (eqv \\<chi> \\<psi>) (eqv \\<phi> \\<psi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_eqv_cnj_trans:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>)) (eqv \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi> \\<chi>) (eqv \\<chi> \\<psi>))\n          (eqv \\<phi> \\<psi>))", "by (simp add: assms prv_eqv_imp_trans prv_cnj_imp_monoR2)"], ["", "lemma prv_eqvI:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv (imp \\<phi> \\<chi>)\" and \"prv (imp \\<chi> \\<phi>)\"\n  shows \"prv (eqv \\<phi> \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv \\<phi> \\<chi>)", "by (simp add: assms eqv_def prv_cnjI)"], ["", "text \\<open>Formula equivalence is a congruence (i.e., an equivalence that\nis compatible with the other connectives):\\<close>"], ["", "lemma prv_eqv_refl: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv \\<phi> \\<phi>)", "by (simp add: prv_cnjI prv_imp_refl eqv_def)"], ["", "lemma prv_eqv_sym:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> \\<phi>)", "using assms prv_cnjI prv_imp_cnjL prv_imp_cnjR prv_imp_mp eqv_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; prv ?\\<phi>;\n   prv ?\\<chi>\\<rbrakk>\n  \\<Longrightarrow> prv (cnj ?\\<phi> ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  eqv ?\\<phi> ?\\<chi> = cnj (imp ?\\<phi> ?\\<chi>) (imp ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> \\<phi>)", "by (meson prv_eqv_imp eqv)"], ["", "lemma prv_eqv_trans:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\nshows \"prv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> \\<psi>) \\<Longrightarrow> prv (eqv \\<phi> \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv \\<phi> \\<chi>); prv (eqv \\<chi> \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> prv (eqv \\<phi> \\<psi>)", "using assms prv_cnjI prv_cnj_imp_monoR2 prv_imp_mp prv_imp_trans1 prv_imp_imp_triv eqv_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; prv ?\\<phi>;\n   prv ?\\<chi>\\<rbrakk>\n  \\<Longrightarrow> prv (cnj ?\\<phi> ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<chi> ?\\<psi>)\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> ?\\<phi>))\n  eqv ?\\<phi> ?\\<chi> = cnj (imp ?\\<phi> ?\\<chi>) (imp ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv \\<phi> \\<chi>); prv (eqv \\<chi> \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> prv (eqv \\<phi> \\<psi>)", "by (metis prv_prv_imp_trans prv_imp_cnjL prv_imp_cnjR eqv imp)"], ["", "lemma imp_imp_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "have f: \"prv (imp (eqv \\<phi>1 \\<phi>2) (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\"\n    if \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (imp \\<phi>2 \\<chi>) (imp \\<phi>1 \\<chi>)))\" \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "using assms that prv_imp_cnj"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi> \\<in> fmla\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (imp \\<phi>2 \\<chi>) (imp \\<phi>1 \\<chi>)))\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<psi>); prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (cnj ?\\<psi> ?\\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "by (auto simp: eqv_def)"], ["proof (state)\nthis:\n  \\<lbrakk>prv (imp (eqv \\<phi>1 \\<phi>2)\n                 (imp (imp \\<phi>2 \\<chi>) (imp \\<phi>1 \\<chi>)));\n   prv (imp (eqv \\<phi>1 \\<phi>2)\n         (imp (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv \\<phi>1 \\<phi>2)\n                          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>prv (imp (eqv \\<phi>1 \\<phi>2)\n                 (imp (imp \\<phi>2 \\<chi>) (imp \\<phi>1 \\<chi>)));\n   prv (imp (eqv \\<phi>1 \\<phi>2)\n         (imp (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv \\<phi>1 \\<phi>2)\n                          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "have \"(prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>1 \\<phi>2)) \\<and> prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>1 \\<phi>2)) \\<and>\n    prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))", "by (simp add: assms eqv_def prv_imp_cnjL prv_imp_cnjR)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>1 \\<phi>2)) \\<and>\n  prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>prv (imp (eqv \\<phi>1 \\<phi>2)\n                 (imp (imp \\<phi>2 \\<chi>) (imp \\<phi>1 \\<chi>)));\n   prv (imp (eqv \\<phi>1 \\<phi>2)\n         (imp (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv \\<phi>1 \\<phi>2)\n                          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\n  prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>1 \\<phi>2)) \\<and>\n  prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>prv (imp (eqv \\<phi>1 \\<phi>2)\n                 (imp (imp \\<phi>2 \\<chi>) (imp \\<phi>1 \\<chi>)));\n   prv (imp (eqv \\<phi>1 \\<phi>2)\n         (imp (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv \\<phi>1 \\<phi>2)\n                          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\n  prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>1 \\<phi>2)) \\<and>\n  prv (imp (eqv \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))", "by (metis (no_types) assms eqv imp prv_imp_trans2 prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma imp_imp_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<chi>1 \\<chi>2) (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<chi>1 \\<chi>2)\n          (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2)))", "by (simp add: assms prv_cnj_mono prv_imp_trans1 eqv_def)"], ["", "lemma imp_imp_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (eqv \\<chi>1 \\<chi>2) (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "have \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (eqv \\<chi>1 \\<chi>2) (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n                                                    (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n              (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2)))))", "using prv_imp_cnj5\n    [OF _ _ _ _ imp_imp_compat_eqvL[of \\<phi>1 \\<phi>2 \\<chi>1] imp_imp_compat_eqvR[of \\<phi>2 \\<chi>1 \\<chi>2]] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>eqv \\<phi>1 \\<phi>2 \\<in> fmla; eqv \\<chi>1 \\<chi>2 \\<in> fmla;\n   eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1) \\<in> fmla;\n   eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2) \\<in> fmla;\n   \\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla;\n   \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla; \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv \\<phi>1 \\<phi>2)\n                          (imp (eqv \\<chi>1 \\<chi>2)\n                            (cnj (eqv (imp \\<phi>1 \\<chi>1)\n                                   (imp \\<phi>2 \\<chi>1))\n                              (eqv (imp \\<phi>2 \\<chi>1)\n                                (imp \\<phi>2 \\<chi>2)))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n              (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2)))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (eqv \\<chi>1 \\<chi>2)\n          (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n            (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "hence \"prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2)) (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n                                                      (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\""], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (eqv \\<chi>1 \\<chi>2)\n          (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n            (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n            (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "by(simp add: assms prv_cnj_imp_monoR2)"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n          (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "hence \"prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2)) (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))\""], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n          (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))", "using assms prv_eqv_cnj_trans[of \"imp \\<phi>1 \\<chi>1\" \"imp \\<phi>2 \\<chi>1\" \"imp \\<phi>2 \\<chi>2\"]"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n          (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  \\<lbrakk>imp \\<phi>1 \\<chi>1 \\<in> fmla; imp \\<phi>2 \\<chi>1 \\<in> fmla;\n   imp \\<phi>2 \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj (eqv (imp \\<phi>1 \\<chi>1)\n                                    (imp \\<phi>2 \\<chi>1))\n                               (eqv (imp \\<phi>2 \\<chi>1)\n                                 (imp \\<phi>2 \\<chi>2)))\n                          (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))", "using prv_imp_mp prv_imp_trans2"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>1))\n          (eqv (imp \\<phi>2 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  \\<lbrakk>imp \\<phi>1 \\<chi>1 \\<in> fmla; imp \\<phi>2 \\<chi>1 \\<in> fmla;\n   imp \\<phi>2 \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj (eqv (imp \\<phi>1 \\<chi>1)\n                                    (imp \\<phi>2 \\<chi>1))\n                               (eqv (imp \\<phi>2 \\<chi>1)\n                                 (imp \\<phi>2 \\<chi>2)))\n                          (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))", "by (metis (no_types) cnj prv_prv_imp_trans eqv imp)"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "using assms prv_cnj_imp"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2)))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (eqv \\<chi>1 \\<chi>2)\n          (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma imp_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\"\nshows \"prv (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>))", "using assms prv_imp_mp imp_imp_compat_eqvL"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi> \\<in> fmla\n  prv (eqv \\<phi>1 \\<phi>2)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla;\n   ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<phi>1.0 ?\\<phi>2.0)\n                          (eqv (imp ?\\<phi>1.0 ?\\<chi>)\n                            (imp ?\\<phi>2.0 ?\\<chi>)))\n\ngoal (1 subgoal):\n 1. prv (eqv (imp \\<phi>1 \\<chi>) (imp \\<phi>2 \\<chi>))", "by (meson eqv imp)"], ["", "lemma imp_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2))", "using assms prv_imp_mp imp_imp_compat_eqvR"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  prv (eqv \\<chi>1 \\<chi>2)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi>1.0 \\<in> fmla;\n   ?\\<chi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<chi>1.0 ?\\<chi>2.0)\n                          (eqv (imp ?\\<phi> ?\\<chi>1.0)\n                            (imp ?\\<phi> ?\\<chi>2.0)))\n\ngoal (1 subgoal):\n 1. prv (eqv (imp \\<phi> \\<chi>1) (imp \\<phi> \\<chi>2))", "by (meson eqv imp)"], ["", "lemma imp_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))", "using assms prv_imp_mp imp_imp_compat_eqv"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  prv (eqv \\<phi>1 \\<phi>2)\n  prv (eqv \\<chi>1 \\<chi>2)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla;\n   ?\\<chi>1.0 \\<in> fmla; ?\\<chi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<phi>1.0 ?\\<phi>2.0)\n                          (imp (eqv ?\\<chi>1.0 ?\\<chi>2.0)\n                            (eqv (imp ?\\<phi>1.0 ?\\<chi>1.0)\n                              (imp ?\\<phi>2.0 ?\\<chi>2.0))))\n\ngoal (1 subgoal):\n 1. prv (eqv (imp \\<phi>1 \\<chi>1) (imp \\<phi>2 \\<chi>2))", "by (metis eqv imp)"], ["", "(*  *)"], ["", "lemma imp_cnj_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))", "have \"prv (imp (imp (imp \\<phi>2 \\<phi>1) (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))\n    (imp (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1)) (cnj (imp (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\n    (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp (imp \\<phi>2 \\<phi>1)\n               (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))\n          (imp (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\n            (cnj (imp (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\n              (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))))", "by (metis (no_types) imp cnj assms prv_imp_mp assms prv_cnj_imp_mono prv_imp_com prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp (imp (imp \\<phi>2 \\<phi>1)\n             (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))\n        (imp (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\n          (cnj (imp (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\n            (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))", "then"], ["proof (chain)\npicking this:\n  prv (imp (imp (imp \\<phi>2 \\<phi>1)\n             (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))\n        (imp (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\n          (cnj (imp (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\n            (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))))", "show ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (imp (imp \\<phi>2 \\<phi>1)\n             (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))\n        (imp (cnj (imp \\<phi>1 \\<phi>2) (imp \\<phi>2 \\<phi>1))\n          (cnj (imp (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\n            (imp (cnj \\<phi>2 \\<chi>) (cnj \\<phi>1 \\<chi>)))))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))", "by (metis (no_types) imp cnj assms prv_imp_mp assms eqv_def prv_cnj_imp_mono prv_imp_com prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma imp_cnj_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<chi>1 \\<chi>2) (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<chi>1 \\<chi>2)\n          (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))", "by (simp add: assms prv_cnj_mono prv_imp_cnj3R prv_imp_cnj4 prv_imp_cnjL prv_imp_triv eqv_def)"], ["", "lemma imp_cnj_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nshows \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (eqv \\<chi>1 \\<chi>2) (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "have \"prv (imp (eqv \\<phi>1 \\<phi>2) (imp (eqv \\<chi>1 \\<chi>2) (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n                                                    (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n              (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))))", "using prv_imp_cnj5\n    [OF _ _ _ _ imp_cnj_compat_eqvL[of \\<phi>1 \\<phi>2 \\<chi>1] imp_cnj_compat_eqvR[of \\<phi>2 \\<chi>1 \\<chi>2]] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>eqv \\<phi>1 \\<phi>2 \\<in> fmla; eqv \\<chi>1 \\<chi>2 \\<in> fmla;\n   eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1) \\<in> fmla;\n   eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2) \\<in> fmla;\n   \\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla;\n   \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla; \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv \\<phi>1 \\<phi>2)\n                          (imp (eqv \\<chi>1 \\<chi>2)\n                            (cnj (eqv (cnj \\<phi>1 \\<chi>1)\n                                   (cnj \\<phi>2 \\<chi>1))\n                              (eqv (cnj \\<phi>2 \\<chi>1)\n                                (cnj \\<phi>2 \\<chi>2)))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n              (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (eqv \\<chi>1 \\<chi>2)\n          (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n            (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "hence \"prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2)) (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n                                                      (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\""], ["proof (prove)\nusing this:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (eqv \\<chi>1 \\<chi>2)\n          (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n            (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n            (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "by(simp add: assms prv_cnj_imp_monoR2)"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n          (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "hence \"prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2)) (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))\""], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n          (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))", "using assms prv_eqv_cnj_trans[of \"cnj \\<phi>1 \\<chi>1\" \"cnj \\<phi>2 \\<chi>1\" \"cnj \\<phi>2 \\<chi>2\"]"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n          (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  \\<lbrakk>cnj \\<phi>1 \\<chi>1 \\<in> fmla; cnj \\<phi>2 \\<chi>1 \\<in> fmla;\n   cnj \\<phi>2 \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj (eqv (cnj \\<phi>1 \\<chi>1)\n                                    (cnj \\<phi>2 \\<chi>1))\n                               (eqv (cnj \\<phi>2 \\<chi>1)\n                                 (cnj \\<phi>2 \\<chi>2)))\n                          (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))", "using prv_imp_mp prv_imp_trans2"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (cnj (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>1))\n          (eqv (cnj \\<phi>2 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  \\<lbrakk>cnj \\<phi>1 \\<chi>1 \\<in> fmla; cnj \\<phi>2 \\<chi>1 \\<in> fmla;\n   cnj \\<phi>2 \\<chi>2 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj (eqv (cnj \\<phi>1 \\<chi>1)\n                                    (cnj \\<phi>2 \\<chi>1))\n                               (eqv (cnj \\<phi>2 \\<chi>1)\n                                 (cnj \\<phi>2 \\<chi>2)))\n                          (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<phi> ?\\<chi>)\n                          (imp (imp ?\\<chi> ?\\<psi>) (imp ?\\<phi> ?\\<psi>)))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n          (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))", "by (metis (no_types) cnj prv_prv_imp_trans eqv)"], ["proof (state)\nthis:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "using assms prv_cnj_imp"], ["proof (prove)\nusing this:\n  prv (imp (cnj (eqv \\<phi>1 \\<phi>2) (eqv \\<chi>1 \\<chi>2))\n        (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2)))\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\n\ngoal (1 subgoal):\n 1. prv (imp (eqv \\<phi>1 \\<phi>2)\n          (imp (eqv \\<chi>1 \\<chi>2)\n            (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (eqv \\<phi>1 \\<phi>2)\n        (imp (eqv \\<chi>1 \\<chi>2)\n          (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cnj_compat_eqvL:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\"\nshows \"prv (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))", "using assms prv_imp_mp imp_cnj_compat_eqvL"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi> \\<in> fmla\n  prv (eqv \\<phi>1 \\<phi>2)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla;\n   ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<phi>1.0 ?\\<phi>2.0)\n                          (eqv (cnj ?\\<phi>1.0 ?\\<chi>)\n                            (cnj ?\\<phi>2.0 ?\\<chi>)))\n\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi>1 \\<chi>) (cnj \\<phi>2 \\<chi>))", "by (meson eqv cnj)"], ["", "lemma cnj_compat_eqvR:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2))", "using assms prv_imp_mp imp_cnj_compat_eqvR"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  prv (eqv \\<chi>1 \\<chi>2)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi>1.0 \\<in> fmla;\n   ?\\<chi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<chi>1.0 ?\\<chi>2.0)\n                          (eqv (cnj ?\\<phi> ?\\<chi>1.0)\n                            (cnj ?\\<phi> ?\\<chi>2.0)))\n\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2))", "by (meson eqv cnj)"], ["", "lemma cnj_compat_eqv:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))", "using assms prv_imp_mp imp_cnj_compat_eqv"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> fmla\n  \\<phi>2 \\<in> fmla\n  \\<chi>1 \\<in> fmla\n  \\<chi>2 \\<in> fmla\n  prv (eqv \\<phi>1 \\<phi>2)\n  prv (eqv \\<chi>1 \\<chi>2)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla;\n   ?\\<chi>1.0 \\<in> fmla; ?\\<chi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eqv ?\\<phi>1.0 ?\\<phi>2.0)\n                          (imp (eqv ?\\<chi>1.0 ?\\<chi>2.0)\n                            (eqv (cnj ?\\<phi>1.0 ?\\<chi>1.0)\n                              (cnj ?\\<phi>2.0 ?\\<chi>2.0))))\n\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi>1 \\<chi>1) (cnj \\<phi>2 \\<chi>2))", "by (metis eqv imp cnj)"], ["", "lemma prv_eqv_prv:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" and \"prv (eqv \\<phi> \\<chi>)\"\n  shows \"prv \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<chi>", "by (metis assms prv_imp_cnjL prv_imp_mp eqv eqv_def imp)"], ["", "lemma prv_eqv_prv_rev:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" and \"prv (eqv \\<chi> \\<phi>)\"\n  shows \"prv \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<chi>", "using assms prv_eqv_prv prv_eqv_sym"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  prv \\<phi>\n  prv (eqv \\<chi> \\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; prv ?\\<phi>;\n   prv (eqv ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (eqv ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (eqv ?\\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv \\<chi>", "by blast"], ["", "lemma prv_imp_eqv_transi:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi> \\<chi>1)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (imp \\<phi> \\<chi>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<chi>2)", "by (meson assms imp imp_compat_eqvR prv_eqv_prv)"], ["", "lemma prv_imp_eqv_transi_rev:\nassumes \"\\<phi> \\<in> fmla\" and \"\\<chi>1 \\<in> fmla\" and \"\\<chi>2 \\<in> fmla\"\nassumes \"prv (imp \\<phi> \\<chi>2)\" and \"prv (eqv \\<chi>1 \\<chi>2)\"\nshows \"prv (imp \\<phi> \\<chi>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<chi>1)", "by (meson assms prv_eqv_sym prv_imp_eqv_transi)"], ["", "lemma prv_eqv_imp_transi:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (imp \\<phi>2 \\<chi>)\"\nshows \"prv (imp \\<phi>1 \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi>1 \\<chi>)", "by (meson assms prv_imp_eqv_transi prv_imp_refl prv_prv_imp_trans)"], ["", "lemma prv_eqv_imp_transi_rev:\nassumes \"\\<phi>1 \\<in> fmla\" and \"\\<phi>2 \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\nassumes \"prv (eqv \\<phi>1 \\<phi>2)\" and \"prv (imp \\<phi>1 \\<chi>)\"\nshows \"prv (imp \\<phi>2 \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi>2 \\<chi>)", "by (meson assms prv_eqv_imp_transi prv_eqv_sym)"], ["", "lemma prv_imp_monoL: \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\nprv (imp \\<chi> \\<psi>) \\<Longrightarrow> prv (imp (imp \\<phi> \\<chi>) (imp \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; \\<psi> \\<in> fmla;\n     prv (imp \\<chi> \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (imp \\<phi> \\<chi>) (imp \\<phi> \\<psi>))", "by (meson imp prv_imp_mp prv_imp_trans1)"], ["", "lemma prv_imp_monoR: \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\nprv (imp \\<psi> \\<chi>) \\<Longrightarrow> prv (imp (imp \\<chi> \\<phi>) (imp \\<psi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; \\<psi> \\<in> fmla;\n     prv (imp \\<psi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (imp \\<chi> \\<phi>) (imp \\<psi> \\<phi>))", "by (meson imp prv_imp_mp prv_imp_trans2)"], ["", "text \\<open>More properties involving conjunction:\\<close>"], ["", "lemma prv_cnj_com_imp:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n shows \"prv (imp (cnj \\<phi> \\<chi>) (cnj \\<chi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) (cnj \\<chi> \\<phi>))", "by (simp add: prv_imp_cnj prv_imp_cnjL prv_imp_cnjR)"], ["", "lemma prv_cnj_com:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n shows \"prv (eqv (cnj \\<phi> \\<chi>) (cnj \\<chi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi> \\<chi>) (cnj \\<chi> \\<phi>))", "by (simp add: prv_cnj_com_imp prv_eqvI)"], ["", "lemma prv_cnj_assoc_imp1:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (imp (cnj \\<phi> (cnj \\<chi> \\<psi>)) (cnj (cnj \\<phi> \\<chi>) \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (cnj \\<chi> \\<psi>))\n          (cnj (cnj \\<phi> \\<chi>) \\<psi>))", "by (simp add: prv_cnj_imp_monoR2 prv_imp_cnj prv_imp_cnjL prv_imp_cnjR prv_imp_triv)"], ["", "lemma prv_cnj_assoc_imp2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>) (cnj \\<phi> (cnj \\<chi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>)\n          (cnj \\<phi> (cnj \\<chi> \\<psi>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>)\n          (cnj \\<phi> (cnj \\<chi> \\<psi>)))", "have \"prv (imp (cnj \\<phi> \\<chi>) (imp \\<psi> \\<phi>)) \\<and> cnj \\<chi> \\<psi> \\<in> fmla \\<and> cnj \\<phi> \\<chi> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> \\<chi>) (imp \\<psi> \\<phi>)) \\<and>\n    cnj \\<chi> \\<psi> \\<in> fmla \\<and> cnj \\<phi> \\<chi> \\<in> fmla", "by (meson \\<chi> \\<phi> \\<psi> cnj imp prv_cnj_imp_monoR2 prv_imp_imp_triv prv_prv_imp_trans)"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi> \\<chi>) (imp \\<psi> \\<phi>)) \\<and>\n  cnj \\<chi> \\<psi> \\<in> fmla \\<and> cnj \\<phi> \\<chi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>)\n          (cnj \\<phi> (cnj \\<chi> \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  prv (imp (cnj \\<phi> \\<chi>) (imp \\<psi> \\<phi>)) \\<and>\n  cnj \\<chi> \\<psi> \\<in> fmla \\<and> cnj \\<phi> \\<chi> \\<in> fmla", "show ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (cnj \\<phi> \\<chi>) (imp \\<psi> \\<phi>)) \\<and>\n  cnj \\<chi> \\<psi> \\<in> fmla \\<and> cnj \\<phi> \\<chi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>)\n          (cnj \\<phi> (cnj \\<chi> \\<psi>)))", "using \\<chi> \\<phi> \\<psi> cnj imp prv_cnj_imp_monoR2 prv_imp_cnj4 prv_imp_cnjI prv_imp_triv"], ["proof (prove)\nusing this:\n  prv (imp (cnj \\<phi> \\<chi>) (imp \\<psi> \\<phi>)) \\<and>\n  cnj \\<chi> \\<psi> \\<in> fmla \\<and> cnj \\<phi> \\<chi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<phi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> cnj ?\\<phi>1.0 ?\\<phi>2.0 \\<in> fmla\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> imp ?\\<phi>1.0 ?\\<phi>2.0 \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi>1.0 \\<in> fmla;\n   ?\\<psi>2.0 \\<in> fmla; prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>1.0));\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>2.0))\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi>\n                          (imp ?\\<chi> (cnj ?\\<psi>1.0 ?\\<psi>2.0)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> (cnj ?\\<phi> ?\\<chi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<psi> \\<in> fmla; prv ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> ?\\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>)\n          (cnj \\<phi> (cnj \\<chi> \\<psi>)))", "by presburger"], ["proof (state)\nthis:\n  prv (imp (cnj (cnj \\<phi> \\<chi>) \\<psi>)\n        (cnj \\<phi> (cnj \\<chi> \\<psi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_cnj_assoc:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n  shows \"prv (eqv (cnj \\<phi> (cnj \\<chi> \\<psi>)) (cnj (cnj \\<phi> \\<chi>) \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi> (cnj \\<chi> \\<psi>))\n          (cnj (cnj \\<phi> \\<chi>) \\<psi>))", "by (simp add: prv_cnj_assoc_imp1 prv_cnj_assoc_imp2 prv_eqvI)"], ["", "lemma prv_cnj_com_imp3:\n  assumes \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\" \"\\<phi>3 \\<in> fmla\"\n  shows \"prv (imp (cnj \\<phi>1 (cnj \\<phi>2 \\<phi>3))\n                (cnj \\<phi>2 (cnj \\<phi>1 \\<phi>3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (cnj \\<phi>2 \\<phi>3))\n          (cnj \\<phi>2 (cnj \\<phi>1 \\<phi>3)))", "by (simp add: assms prv_cnj_imp_monoR2 prv_imp_cnj prv_imp_cnjL prv_imp_refl prv_imp_triv)"], ["", "subsection \\<open>Properties involving quantifiers\\<close>"], ["", "text \\<open>Fundamental properties:\\<close>"], ["", "lemma prv_allE:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\n  shows \"prv (all x \\<phi>) \\<Longrightarrow> prv (subst \\<phi> t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x \\<phi>) \\<Longrightarrow> prv (subst \\<phi> t x)", "using assms prv_all_inst prv_imp_mp"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t \\<in> trm\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?t \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (imp (all ?x ?\\<phi>) (subst ?\\<phi> ?t ?x))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (all x \\<phi>) \\<Longrightarrow> prv (subst \\<phi> t x)", "by (meson subst all)"], ["", "lemma prv_exiI:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\n  shows \"prv (subst \\<phi> t x) \\<Longrightarrow> prv (exi x \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (subst \\<phi> t x) \\<Longrightarrow> prv (exi x \\<phi>)", "using assms prv_exi_inst prv_imp_mp"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t \\<in> trm\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?t \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (imp (subst ?\\<phi> ?t ?x) (exi ?x ?\\<phi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv (subst \\<phi> t x) \\<Longrightarrow> prv (exi x \\<phi>)", "by (meson subst exi)"], ["", "lemma prv_imp_imp_exi:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"x \\<notin> Fvars \\<phi>\"\n  shows \"prv (imp (exi x (imp \\<phi> \\<chi>)) (imp \\<phi> (exi x \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x (imp \\<phi> \\<chi>)) (imp \\<phi> (exi x \\<chi>)))", "using assms imp exi Fvars_exi Fvars_imp Un_iff assms prv_exi_imp_gen prv_exi_inst prv_imp_mp\n    prv_imp_trans1 member_remove remove_def subst_same_Var"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<notin> Fvars \\<phi>\n  \\<lbrakk>?\\<phi>1.0 \\<in> fmla; ?\\<phi>2.0 \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> imp ?\\<phi>1.0 ?\\<phi>2.0 \\<in> fmla\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> exi ?x ?\\<phi> \\<in> fmla\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> Fvars (exi ?x ?\\<phi>) = Fvars ?\\<phi> - {?x}\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> Fvars (imp ?\\<phi> ?\\<chi>) =\n                    Fvars ?\\<phi> \\<union> Fvars ?\\<chi>\n  (?c \\<in> ?A \\<union> ?B) = (?c \\<in> ?A \\<or> ?c \\<in> ?B)\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<notin> Fvars \\<phi>\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?x \\<notin> Fvars ?\\<chi>; prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (exi ?x ?\\<phi>) ?\\<chi>)\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?t \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (imp (subst ?\\<phi> ?t ?x) (exi ?x ?\\<phi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (imp ?\\<chi> ?\\<psi>)\n                          (imp (imp ?\\<phi> ?\\<chi>) (imp ?\\<phi> ?\\<psi>)))\n  (?x \\<in> Set.remove ?y ?A) = (?x \\<in> ?A \\<and> ?x \\<noteq> ?y)\n  Set.remove ?x ?A = ?A - {?x}\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?x \\<in> var\\<rbrakk>\n  \\<Longrightarrow> subst ?\\<phi> (Var ?x) ?x = ?\\<phi>\n\ngoal (1 subgoal):\n 1. prv (imp (exi x (imp \\<phi> \\<chi>)) (imp \\<phi> (exi x \\<chi>)))", "by (metis (full_types) Var)"], ["", "lemma prv_imp_exi:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  shows \"x \\<notin> Fvars \\<phi> \\<Longrightarrow> prv (exi x (imp \\<phi> \\<chi>)) \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> Fvars \\<phi>;\n     prv (exi x (imp \\<phi> \\<chi>))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "using assms prv_imp_imp_exi prv_imp_mp"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?x \\<notin> Fvars ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv (imp (exi ?x (imp ?\\<phi> ?\\<chi>))\n                          (imp ?\\<phi> (exi ?x ?\\<chi>)))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> Fvars \\<phi>;\n     prv (exi x (imp \\<phi> \\<chi>))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "by (meson exi imp)"], ["", "lemma prv_exi_imp:\n  assumes x: \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"x \\<notin> Fvars \\<chi>\" and d: \"prv (all x (imp \\<phi> \\<chi>))\"\n  shows \"prv (imp (exi x \\<phi>) \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) \\<chi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) \\<chi>)", "have \"prv (imp \\<phi> \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<chi>)", "using prv_allE[of x _ \"Var x\", of \"imp \\<phi> \\<chi>\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> var; imp \\<phi> \\<chi> \\<in> fmla; Var x \\<in> trm;\n   prv (all x (imp \\<phi> \\<chi>))\\<rbrakk>\n  \\<Longrightarrow> prv (subst (imp \\<phi> \\<chi>) (Var x) x)\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<notin> Fvars \\<chi>\n  prv (all x (imp \\<phi> \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<chi>)", "by simp"], ["proof (state)\nthis:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) \\<chi>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) \\<chi>)", "using assms prv_exi_imp_gen"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<notin> Fvars \\<chi>\n  prv (all x (imp \\<phi> \\<chi>))\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?x \\<notin> Fvars ?\\<chi>; prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (exi ?x ?\\<phi>) ?\\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) \\<chi>)", "by blast"], ["proof (state)\nthis:\n  prv (imp (exi x \\<phi>) \\<chi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_all_imp:\n  assumes x: \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"x \\<notin> Fvars \\<phi>\" and \"prv (all x (imp \\<phi> \\<chi>))\"\n  shows \"prv (imp \\<phi> (all x \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (all x \\<chi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (all x \\<chi>))", "have \"prv (imp \\<phi> \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<chi>)", "using prv_allE[of x _ \"Var x\", of \"imp \\<phi> \\<chi>\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> var; imp \\<phi> \\<chi> \\<in> fmla; Var x \\<in> trm;\n   prv (all x (imp \\<phi> \\<chi>))\\<rbrakk>\n  \\<Longrightarrow> prv (subst (imp \\<phi> \\<chi>) (Var x) x)\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<notin> Fvars \\<phi>\n  prv (all x (imp \\<phi> \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> \\<chi>)", "by simp"], ["proof (state)\nthis:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (all x \\<chi>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (all x \\<chi>))", "using assms prv_all_imp_gen"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> \\<chi>)\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<notin> Fvars \\<phi>\n  prv (all x (imp \\<phi> \\<chi>))\n  \\<lbrakk>?x \\<notin> Fvars ?\\<phi>; prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (all ?x ?\\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (all x \\<chi>))", "by blast"], ["proof (state)\nthis:\n  prv (imp \\<phi> (all x \\<chi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_exi_inst_same:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n  shows \"prv (imp \\<phi> (exi x \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (exi x \\<phi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (exi x \\<phi>))", "have 0: \"\\<phi> = subst \\<phi> (Var x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> = subst \\<phi> (Var x) x", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. \\<phi> = subst \\<phi> (Var x) x", "by simp"], ["proof (state)\nthis:\n  \\<phi> = subst \\<phi> (Var x) x\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (exi x \\<phi>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (exi x \\<phi>))", "apply(subst 0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (subst \\<phi> (Var x) x) (exi x \\<phi>))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (imp (subst \\<phi> (Var x) x) (exi x \\<phi>))", "by (intro prv_exi_inst) auto"], ["proof (state)\nthis:\n  prv (imp \\<phi> (exi x \\<phi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_exi_cong:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (exi x \\<phi>) (exi x \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi x \\<chi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi x \\<chi>))", "have 0: \"prv (imp \\<chi> (exi x \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (exi x \\<chi>))", "using assms prv_exi_inst_same"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<in> var\n  prv (imp \\<phi> \\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?x \\<in> var\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (exi ?x ?\\<phi>))\n\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (exi x \\<chi>))", "by auto"], ["proof (state)\nthis:\n  prv (imp \\<chi> (exi x \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi x \\<chi>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi x \\<chi>))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<in> var\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi x \\<chi>))", "apply(intro prv_exi_imp_gen)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> var\n 2. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 3. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> exi x \\<chi> \\<in> fmla\n 4. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> Fvars (exi x \\<chi>)\n 5. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> var", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 2. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> exi x \\<chi> \\<in> fmla\n 3. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> Fvars (exi x \\<chi>)\n 4. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> exi x \\<chi> \\<in> fmla\n 2. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> Fvars (exi x \\<chi>)\n 3. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> exi x \\<chi> \\<in> fmla", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> Fvars (exi x \\<chi>)\n 2. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> Fvars (exi x \\<chi>)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "using \"0\" exi prv_prv_imp_trans"], ["proof (prove)\nusing this:\n  prv (imp \\<chi> (exi x \\<chi>))\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> exi ?x ?\\<phi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv (imp ?\\<chi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> ?\\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; x \\<in> var;\n     prv (imp \\<phi> \\<chi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (exi x \\<chi>))", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp (exi x \\<phi>) (exi x \\<chi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_exi_congW:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\" \"prv (exi x \\<phi>)\"\n  shows \"prv (exi x \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (exi x \\<chi>)", "by (meson exi assms prv_exi_cong prv_imp_mp)"], ["", "lemma prv_all_cong:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (all x \\<phi>) (all x \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all x \\<phi>) (all x \\<chi>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (all x \\<phi>) (all x \\<chi>))", "have 0: \"prv (imp (all x \\<phi>) \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all x \\<phi>) \\<chi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<chi> \\<in> fmla\n  x \\<in> var\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (all x \\<phi>) \\<chi>)", "by (metis Var all prv_all_inst prv_prv_imp_trans subst_same_Var)"], ["proof (state)\nthis:\n  prv (imp (all x \\<phi>) \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (all x \\<phi>) (all x \\<chi>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all x \\<phi>) (all x \\<chi>))", "by (simp add: \"0\" assms prv_all_imp_gen)"], ["proof (state)\nthis:\n  prv (imp (all x \\<phi>) (all x \\<chi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_all_congW:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> \\<chi>)\" \"prv (all x \\<phi>)\"\n  shows \"prv (all x \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x \\<chi>)", "by (meson all assms prv_all_cong prv_imp_mp)"], ["", "text \\<open>Quantifiers versus free variables and substitution:\\<close>"], ["", "lemma exists_no_Fvars: \"\\<exists> \\<phi>. \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>.\n       \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>.\n       \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}", "obtain n where [simp]: \"n \\<in> num\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. n \\<in> num \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using numNE"], ["proof (prove)\nusing this:\n  num \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>n. n \\<in> num \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  n \\<in> num\n\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>.\n       \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>.\n       \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}", "by (intro exI[of _ \"imp (eql n n) (eql n n)\"]) (simp add: prv_imp_refl)"], ["proof (state)\nthis:\n  \\<exists>\\<phi>.\n     \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_all_gen:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" shows \"prv (all x \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x \\<phi>)", "using assms prv_all_imp_gen prv_imp_mp prv_imp_triv exists_no_Fvars"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  prv \\<phi>\n  \\<lbrakk>?x \\<notin> Fvars ?\\<phi>; prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (all ?x ?\\<chi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<psi> \\<in> fmla; prv ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> ?\\<psi>)\n  \\<exists>\\<phi>.\n     \\<phi> \\<in> fmla \\<and> prv \\<phi> \\<and> Fvars \\<phi> = {}\n\ngoal (1 subgoal):\n 1. prv (all x \\<phi>)", "by blast"], ["", "lemma all_subst_rename_prv:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> x \\<in> var \\<Longrightarrow> y \\<in> var \\<Longrightarrow>\n   y \\<notin> Fvars \\<phi> \\<Longrightarrow> prv (all x \\<phi>) \\<Longrightarrow> prv (all y (subst \\<phi> (Var y) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; x \\<in> var; y \\<in> var;\n     y \\<notin> Fvars \\<phi>; prv (all x \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (all y (subst \\<phi> (Var y) x))", "by (simp add: prv_allE prv_all_gen)"], ["", "lemma allE_id:\n  assumes \"y \\<in> var\" and \"\\<phi> \\<in> fmla\"\n  assumes \"prv (all y \\<phi>)\"\n  shows \"prv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<phi>", "using assms prv_allE"], ["proof (prove)\nusing this:\n  y \\<in> var\n  \\<phi> \\<in> fmla\n  prv (all y \\<phi>)\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?t \\<in> trm;\n   prv (all ?x ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (subst ?\\<phi> ?t ?x)\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "by (metis Var subst_same_Var)"], ["", "lemma prv_subst:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t \\<in> trm\"\n  shows \"prv \\<phi> \\<Longrightarrow> prv (subst \\<phi> t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<phi> \\<Longrightarrow> prv (subst \\<phi> t x)", "by (simp add: assms prv_allE prv_all_gen)"], ["", "lemma prv_rawpsubst:\n  assumes \"\\<phi> \\<in> fmla\" and \"snd ` (set txs) \\<subseteq> var\" and \"fst ` (set txs) \\<subseteq> trm\"\n    and \"prv \\<phi>\"\n  shows \"prv (rawpsubst \\<phi> txs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (rawpsubst \\<phi> txs)", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  prv \\<phi>\n\ngoal (1 subgoal):\n 1. prv (rawpsubst \\<phi> txs)", "apply (induct txs arbitrary: \\<phi>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<phi> \\<in> fmla; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n       \\<Longrightarrow> prv (rawpsubst \\<phi> [])\n 2. \\<And>a txs \\<phi>.\n       \\<lbrakk>\\<And>\\<phi>.\n                   \\<lbrakk>\\<phi> \\<in> fmla;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> prv (rawpsubst \\<phi> txs);\n        \\<phi> \\<in> fmla; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n       \\<Longrightarrow> prv (rawpsubst \\<phi> (a # txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>_ \\<in> fmla; snd ` set [] \\<subseteq> var;\n     fst ` set [] \\<subseteq> trm; prv \\<phi>_\\<rbrakk>\n    \\<Longrightarrow> prv (rawpsubst \\<phi>_ [])", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a txs \\<phi>.\n       \\<lbrakk>\\<And>\\<phi>.\n                   \\<lbrakk>\\<phi> \\<in> fmla;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> prv (rawpsubst \\<phi> txs);\n        \\<phi> \\<in> fmla; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n       \\<Longrightarrow> prv (rawpsubst \\<phi> (a # txs))", "subgoal for tx txs \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<phi>.\n                \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n                 fst ` set txs \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n                \\<Longrightarrow> prv (rawpsubst \\<phi> txs);\n     \\<phi> \\<in> fmla; snd ` set (tx # txs) \\<subseteq> var;\n     fst ` set (tx # txs) \\<subseteq> trm; prv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> prv (rawpsubst \\<phi> (tx # txs))", "by (cases tx) (auto intro: prv_subst)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma prv_psubst:\n  assumes \"\\<phi> \\<in> fmla\" and \"snd ` (set txs) \\<subseteq> var\" and \"fst ` (set txs) \\<subseteq> trm\"\n    and \"prv \\<phi>\"\n  shows \"prv (psubst \\<phi> txs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (psubst \\<phi> txs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (psubst \\<phi> txs)", "define us where us: \"us \\<equiv> getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\""], ["proof (state)\nthis:\n  us \\<equiv> getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (psubst \\<phi> txs)", "have us_facts: \"set us \\<subseteq> var\"\n    \"set us \\<inter> Fvars \\<phi> = {}\"\n    \"set us \\<inter> \\<Union> (FvarsT ` (fst ` (set txs))) = {}\"\n    \"set us \\<inter> snd ` (set txs) = {}\"\n    \"length us = length txs\"\n    \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set us \\<subseteq> var &&&\n     set us \\<inter> Fvars \\<phi> = {} &&&\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}) &&&\n    set us \\<inter> snd ` set txs = {} &&&\n    length us = length txs &&& distinct us", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  prv \\<phi>\n\ngoal (1 subgoal):\n 1. (set us \\<subseteq> var &&&\n     set us \\<inter> Fvars \\<phi> = {} &&&\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}) &&&\n    set us \\<inter> snd ` set txs = {} &&&\n    length us = length txs &&& distinct us", "unfolding us"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  prv \\<phi>\n\ngoal (1 subgoal):\n 1. (set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))\n     \\<subseteq> var &&&\n     set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n     Fvars \\<phi> =\n     {} &&&\n     set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n     \\<Union> (FvarsT ` fst ` set txs) =\n     {}) &&&\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    snd ` set txs =\n    {} &&&\n    length (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) =\n    length txs &&&\n    distinct (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))", "using getFrN_FvarsT[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n      getFrN_Fvars[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n      getFrN_var[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n      getFrN_length[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" \"length txs\"]\n      getFrN_length[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" \"length txs\"]"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  prv \\<phi>\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    FvarsT ?t =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?\\<phi> \\<in> set [\\<phi>]\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    Fvars ?\\<phi> =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    set (map snd txs) =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> length\n                     (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                       (length txs)) =\n                    length txs\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> length\n                     (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                       (length txs)) =\n                    length txs\n\ngoal (1 subgoal):\n 1. (set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))\n     \\<subseteq> var &&&\n     set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n     Fvars \\<phi> =\n     {} &&&\n     set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n     \\<Union> (FvarsT ` fst ` set txs) =\n     {}) &&&\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    snd ` set txs =\n    {} &&&\n    length (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) =\n    length txs &&&\n    distinct (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))", "apply -"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs))\n                      \\<subseteq> var\n 2. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 4. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 5. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 6. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs))\n                      \\<subseteq> var", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 4. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 5. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}", "by fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 4. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 3. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 2. \\<lbrakk>\\<phi> \\<in> fmla; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; prv \\<phi>;\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs;\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "by auto"], ["proof (state)\nthis:\n  set us \\<subseteq> var\n  set us \\<inter> Fvars \\<phi> = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (psubst \\<phi> txs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (psubst \\<phi> txs)", "using assms us_facts"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  prv \\<phi>\n  set us \\<subseteq> var\n  set us \\<inter> Fvars \\<phi> = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (psubst \\<phi> txs)", "unfolding psubst_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  prv \\<phi>\n  set us \\<subseteq> var\n  set us \\<inter> Fvars \\<phi> = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (let xs = map snd txs; ts = map fst txs;\n             us = getFrN xs ts [\\<phi>] (length xs)\n         in rawpsubst (rawpsubst \\<phi> (zip (map Var us) xs)) (zip ts us))", "by (auto simp: Let_def us[symmetric] intro!: prv_rawpsubst rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (psubst \\<phi> txs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_eqv_rawpsubst:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> snd ` set txs \\<subseteq> var \\<Longrightarrow> fst ` set txs \\<subseteq> trm \\<Longrightarrow> prv (eqv \\<phi> \\<psi>) \\<Longrightarrow>\n prv (eqv (rawpsubst \\<phi> txs) (rawpsubst \\<psi> txs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     prv (eqv \\<phi> \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst \\<phi> txs)\n                            (rawpsubst \\<psi> txs))", "by (metis eqv prv_rawpsubst rawpsubst_eqv)"], ["", "lemma prv_eqv_psubst:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> snd ` set txs \\<subseteq> var \\<Longrightarrow> fst ` set txs \\<subseteq> trm \\<Longrightarrow> prv (eqv \\<phi> \\<psi>) \\<Longrightarrow>\n distinct (map snd txs) \\<Longrightarrow>\n prv (eqv (psubst \\<phi> txs) (psubst \\<psi> txs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     prv (eqv \\<phi> \\<psi>); distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (psubst \\<phi> txs) (psubst \\<psi> txs))", "by (metis eqv prv_psubst psubst_eqv)"], ["", "lemma prv_all_imp_trans:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\n  shows \"prv (all x (imp \\<phi> \\<chi>)) \\<Longrightarrow> prv (all x (imp \\<chi> \\<psi>)) \\<Longrightarrow> prv (all x (imp \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (all x (imp \\<phi> \\<chi>));\n     prv (all x (imp \\<chi> \\<psi>))\\<rbrakk>\n    \\<Longrightarrow> prv (all x (imp \\<phi> \\<psi>))", "by (metis Var assms prv_allE prv_all_gen prv_prv_imp_trans imp subst_same_Var)"], ["", "lemma prv_all_imp_cnj:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\n  shows \"prv (all x (imp \\<phi> (imp \\<psi> \\<chi>))) \\<Longrightarrow> prv (all x (imp (cnj \\<psi> \\<phi>) \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x (imp \\<phi> (imp \\<psi> \\<chi>))) \\<Longrightarrow>\n    prv (all x (imp (cnj \\<psi> \\<phi>) \\<chi>))", "by (metis Var assms cnj prv_allE prv_all_gen prv_imp_com prv_cnj_imp_monoR2 imp subst_same_Var)"], ["", "lemma prv_all_imp_cnj_rev:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\" and \"\\<psi> \\<in> fmla\"\n  shows \"prv (all x (imp (cnj \\<phi> \\<psi>) \\<chi>)) \\<Longrightarrow> prv (all x (imp \\<phi> (imp \\<psi> \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x (imp (cnj \\<phi> \\<psi>) \\<chi>)) \\<Longrightarrow>\n    prv (all x (imp \\<phi> (imp \\<psi> \\<chi>)))", "by (metis (full_types) Var assms cnj prv_allE prv_all_gen prv_cnj_imp imp subst_same_Var)"], ["", "subsection \\<open>Properties concerning equality\\<close>"], ["", "lemma prv_eql_reflT:\n  assumes t: \"t \\<in> trm\"\n  shows \"prv (eql t t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql t t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eql t t)", "obtain x where x: \"x \\<in> var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> var \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using var_NE"], ["proof (prove)\nusing this:\n  var \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> var \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (eql t t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql t t)", "using prv_subst[OF x _ t prv_eql_refl[OF x]] x t"], ["proof (prove)\nusing this:\n  eql (Var x) (Var x) \\<in> fmla \\<Longrightarrow>\n  prv (subst (eql (Var x) (Var x)) t x)\n  x \\<in> var\n  t \\<in> trm\n\ngoal (1 subgoal):\n 1. prv (eql t t)", "by simp"], ["proof (state)\nthis:\n  prv (eql t t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_eql_subst_trm:\n  assumes xx: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  shows \"prv ((imp (eql t1 t2)\n                 (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "have \"finite ({x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>)\" (is \"finite ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>)", "by (simp add: assms finite_FvarsT finite_Fvars)"], ["proof (state)\nthis:\n  finite ({x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "then"], ["proof (chain)\npicking this:\n  finite ({x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>)", "obtain y where y: \"y \\<in> var\" and \"y \\<notin> ?A\""], ["proof (prove)\nusing this:\n  finite ({x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> var;\n         y \\<notin> {x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union>\n                    Fvars \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson finite_subset infinite_var subset_iff)"], ["proof (state)\nthis:\n  y \\<in> var\n  y \\<notin> {x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "hence xy: \"x \\<noteq> y\" and yt1: \"y \\<notin> FvarsT t1\" and yt2: \"y \\<notin> FvarsT t2\" and y\\<phi>: \"y \\<notin> Fvars \\<phi>\""], ["proof (prove)\nusing this:\n  y \\<in> var\n  y \\<notin> {x} \\<union> FvarsT t1 \\<union> FvarsT t2 \\<union> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. (x \\<noteq> y &&& y \\<notin> FvarsT t1) &&&\n    y \\<notin> FvarsT t2 &&& y \\<notin> Fvars \\<phi>", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> y\n  y \\<notin> FvarsT t1\n  y \\<notin> FvarsT t2\n  y \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "have x: \"x \\<notin> Fvars (subst \\<phi> (Var y) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> Fvars (subst \\<phi> (Var y) x)", "using xy y assms"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  y \\<in> var\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. x \\<notin> Fvars (subst \\<phi> (Var y) x)", "by simp"], ["proof (state)\nthis:\n  x \\<notin> Fvars (subst \\<phi> (Var y) x)\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "hence 1: \"prv (imp (eql t1 (Var y)) (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x)))\""], ["proof (prove)\nusing this:\n  x \\<notin> Fvars (subst \\<phi> (Var y) x)\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 (Var y))\n          (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x)))", "using xy y assms prv_subst[OF xx _ _ prv_eql_subst[OF xx y \\<phi>]]"], ["proof (prove)\nusing this:\n  x \\<notin> Fvars (subst \\<phi> (Var y) x)\n  x \\<noteq> y\n  y \\<in> var\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t1 \\<in> trm\n  t2 \\<in> trm\n  \\<lbrakk>imp (eql (Var x) (Var y)) (imp \\<phi> (subst \\<phi> (Var y) x))\n           \\<in> fmla;\n   ?t \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (subst\n                          (imp (eql (Var x) (Var y))\n                            (imp \\<phi> (subst \\<phi> (Var y) x)))\n                          ?t x)\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 (Var y))\n          (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x)))", "by simp"], ["proof (state)\nthis:\n  prv (imp (eql t1 (Var y))\n        (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "have yy: \"y \\<notin> Fvars (subst \\<phi> t1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> Fvars (subst \\<phi> t1 x)", "using yt1 y\\<phi> assms"], ["proof (prove)\nusing this:\n  y \\<notin> FvarsT t1\n  y \\<notin> Fvars \\<phi>\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. y \\<notin> Fvars (subst \\<phi> t1 x)", "by simp"], ["proof (state)\nthis:\n  y \\<notin> Fvars (subst \\<phi> t1 x)\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "from prv_subst[OF y _ _ 1, of t2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>imp (eql t1 (Var y))\n            (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x))\n           \\<in> fmla;\n   t2 \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (subst\n                          (imp (eql t1 (Var y))\n                            (imp (subst \\<phi> t1 x)\n                              (subst \\<phi> (Var y) x)))\n                          t2 y)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>imp (eql t1 (Var y))\n            (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x))\n           \\<in> fmla;\n   t2 \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (subst\n                          (imp (eql t1 (Var y))\n                            (imp (subst \\<phi> t1 x)\n                              (subst \\<phi> (Var y) x)))\n                          t2 y)\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "using xy yt1 yt2 y\\<phi> x xx y yy assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>imp (eql t1 (Var y))\n            (imp (subst \\<phi> t1 x) (subst \\<phi> (Var y) x))\n           \\<in> fmla;\n   t2 \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (subst\n                          (imp (eql t1 (Var y))\n                            (imp (subst \\<phi> t1 x)\n                              (subst \\<phi> (Var y) x)))\n                          t2 y)\n  x \\<noteq> y\n  y \\<notin> FvarsT t1\n  y \\<notin> FvarsT t2\n  y \\<notin> Fvars \\<phi>\n  x \\<notin> Fvars (subst \\<phi> (Var y) x)\n  x \\<in> var\n  y \\<in> var\n  y \\<notin> Fvars (subst \\<phi> t1 x)\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t1 \\<in> trm\n  t2 \\<in> trm\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))", "by auto"], ["proof (state)\nthis:\n  prv (imp (eql t1 t2) (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_eql_subst_trm2:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  assumes \"prv (eql t1 t2)\"\n  shows \"prv (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x))", "by (meson assms eql imp local.subst prv_eql_subst_trm prv_imp_mp)"], ["", "lemma prv_eql_sym:\n  assumes [simp]: \"t1 \\<in> trm\" \"t2 \\<in> trm\"\n  shows \"prv (imp (eql t1 t2) (eql t2 t1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql t2 t1))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql t2 t1))", "obtain x where x[simp]: \"x \\<in> var\" \"x \\<notin> FvarsT t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> var; x \\<notin> FvarsT t1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson assms finite_FvarsT finite_subset infinite_var subsetI)"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<notin> FvarsT t1\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql t2 t1))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> var\n  x \\<notin> FvarsT t1\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql t2 t1))", "using prv_eql_subst_trm[of x \"eql (Var x) t1\" t1 t2, simplified]"], ["proof (prove)\nusing this:\n  x \\<in> var\n  x \\<notin> FvarsT t1\n  prv (imp (eql t1 t2) (imp (eql t1 t1) (eql t2 t1)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (eql t2 t1))", "by (meson assms eql imp prv_eql_reflT prv_imp_com prv_imp_mp)"], ["proof (state)\nthis:\n  prv (imp (eql t1 t2) (eql t2 t1))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_prv_eql_sym: \"t1 \\<in> trm \\<Longrightarrow> t2 \\<in> trm \\<Longrightarrow> prv (eql t1 t2) \\<Longrightarrow> prv (eql t2 t1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> trm; t2 \\<in> trm; prv (eql t1 t2)\\<rbrakk>\n    \\<Longrightarrow> prv (eql t2 t1)", "by (meson eql prv_eql_sym prv_imp_mp)"], ["", "lemma prv_all_eql:\n  assumes \"x \\<in> var\" and \"y \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  shows \"prv (all x ((imp (eql t1 t2)\n                   (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x\n          (imp (eql t1 t2) (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y))))", "by (meson subst assms prv_all_gen prv_prv_imp_trans prv_eql_subst_trm prv_eql_sym eql imp)"], ["", "lemma prv_eql_subst_trm_rev:\n  assumes \"t1 \\<in> trm\" and \"t2 \\<in> trm\" and \"\\<phi> \\<in> fmla\" and \"y \\<in> var\"\n  shows\n    \"prv ((imp (eql t1 t2)\n           (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y)))", "using assms prv_all_eql prv_all_inst prv_imp_mp subst_same_Var"], ["proof (prove)\nusing this:\n  t1 \\<in> trm\n  t2 \\<in> trm\n  \\<phi> \\<in> fmla\n  y \\<in> var\n  \\<lbrakk>?x \\<in> var; ?y \\<in> var; ?\\<phi> \\<in> fmla; ?t1.0 \\<in> trm;\n   ?t2.0 \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (all ?x\n                          (imp (eql ?t1.0 ?t2.0)\n                            (imp (subst ?\\<phi> ?t2.0 ?y)\n                              (subst ?\\<phi> ?t1.0 ?y))))\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?t \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (imp (all ?x ?\\<phi>) (subst ?\\<phi> ?t ?x))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?x \\<in> var\\<rbrakk>\n  \\<Longrightarrow> subst ?\\<phi> (Var ?x) ?x = ?\\<phi>\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (subst \\<phi> t2 y) (subst \\<phi> t1 y)))", "by (meson subst prv_prv_imp_trans prv_eql_subst_trm prv_eql_sym eql imp)"], ["", "lemma prv_eql_subst_trm_rev2:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  assumes \"prv (eql t1 t2)\"\n  shows \"prv (imp (subst \\<phi> t2 x) (subst \\<phi> t1 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (subst \\<phi> t2 x) (subst \\<phi> t1 x))", "by (meson assms eql imp local.subst prv_eql_subst_trm_rev prv_imp_mp)"], ["", "lemma prv_eql_subst_trm_eqv:\n  assumes \"x \\<in> var\" and \"\\<phi> \\<in> fmla\" and \"t1 \\<in> trm\" and \"t2 \\<in> trm\"\n  assumes \"prv (eql t1 t2)\"\n  shows \"prv (eqv (subst \\<phi> t1 x) (subst \\<phi> t2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (subst \\<phi> t1 x) (subst \\<phi> t2 x))", "using assms prv_eql_subst_trm2[OF assms] prv_eql_subst_trm_rev2[OF assms]\n    prv_eqvI"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  t1 \\<in> trm\n  t2 \\<in> trm\n  prv (eql t1 t2)\n  prv (imp (subst \\<phi> t1 x) (subst \\<phi> t2 x))\n  prv (imp (subst \\<phi> t2 x) (subst \\<phi> t1 x))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv (imp ?\\<chi> ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (eqv ?\\<phi> ?\\<chi>)\n\ngoal (1 subgoal):\n 1. prv (eqv (subst \\<phi> t1 x) (subst \\<phi> t2 x))", "by auto"], ["", "lemma prv_eql_subst_trm_id:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql (Var y) n) (imp \\<phi> (subst \\<phi> n y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (Var y) n) (imp \\<phi> (subst \\<phi> n y)))", "using assms prv_eql_subst_trm"], ["proof (prove)\nusing this:\n  y \\<in> var\n  \\<phi> \\<in> fmla\n  n \\<in> num\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?t1.0 \\<in> trm;\n   ?t2.0 \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eql ?t1.0 ?t2.0)\n                          (imp (subst ?\\<phi> ?t1.0 ?x)\n                            (subst ?\\<phi> ?t2.0 ?x)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql (Var y) n) (imp \\<phi> (subst \\<phi> n y)))", "by (metis Var in_num subst_same_Var)"], ["", "lemma prv_eql_subst_trm_id_back:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql (Var y) n) (imp (subst \\<phi> n y) \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (Var y) n) (imp (subst \\<phi> n y) \\<phi>))", "by (metis Var assms in_num prv_eql_subst_trm_rev subst_same_Var)"], ["", "lemma prv_eql_subst_trm_id_rev:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql n (Var y)) (imp \\<phi> (subst \\<phi> n y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql n (Var y)) (imp \\<phi> (subst \\<phi> n y)))", "using assms prv_eql_subst_trm_rev"], ["proof (prove)\nusing this:\n  y \\<in> var\n  \\<phi> \\<in> fmla\n  n \\<in> num\n  \\<lbrakk>?t1.0 \\<in> trm; ?t2.0 \\<in> trm; ?\\<phi> \\<in> fmla;\n   ?y \\<in> var\\<rbrakk>\n  \\<Longrightarrow> prv (imp (eql ?t1.0 ?t2.0)\n                          (imp (subst ?\\<phi> ?t2.0 ?y)\n                            (subst ?\\<phi> ?t1.0 ?y)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql n (Var y)) (imp \\<phi> (subst \\<phi> n y)))", "by (metis Var in_num subst_same_Var)"], ["", "lemma prv_eql_subst_trm_id_back_rev:\n  assumes \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and \"n \\<in> num\"\n  shows \"prv (imp (eql n (Var y)) (imp (subst \\<phi> n y) \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql n (Var y)) (imp (subst \\<phi> n y) \\<phi>))", "by (metis (full_types) Var assms in_num prv_eql_subst_trm subst_same_Var)"], ["", "lemma prv_eql_imp_trans_rev:\n  assumes t1[simp]: \"t1 \\<in> trm\" and t2[simp]: \"t2 \\<in> trm\" and t3[simp]: \"t3 \\<in> trm\"\n  shows \"prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "obtain y1 where y1[simp]: \"y1 \\<in> var\" and \"y1 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union> FvarsT t3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        \\<lbrakk>y1 \\<in> var;\n         y1 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union>\n                     FvarsT t3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_FvarsT finite_subset infinite_var subsetI t1 t2 t3"], ["proof (prove)\nusing this:\n  ?t \\<in> trm \\<Longrightarrow> finite (FvarsT ?t)\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  infinite var\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n  t1 \\<in> trm\n  t2 \\<in> trm\n  t3 \\<in> trm\n\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        \\<lbrakk>y1 \\<in> var;\n         y1 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union>\n                     FvarsT t3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) infinite_Un)"], ["proof (state)\nthis:\n  y1 \\<in> var\n  y1 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union> FvarsT t3\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "hence [simp]: \"y1 \\<notin> FvarsT t1\" \"y1 \\<notin> FvarsT t2\" \"y1 \\<notin>  FvarsT t3\""], ["proof (prove)\nusing this:\n  y1 \\<in> var\n  y1 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union> FvarsT t3\n\ngoal (1 subgoal):\n 1. y1 \\<notin> FvarsT t1 &&&\n    y1 \\<notin> FvarsT t2 &&& y1 \\<notin> FvarsT t3", "by auto"], ["proof (state)\nthis:\n  y1 \\<notin> FvarsT t1\n  y1 \\<notin> FvarsT t2\n  y1 \\<notin> FvarsT t3\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "obtain y2 where y2[simp]: \"y2 \\<in> var\" and \"y2 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union> FvarsT t3 \\<union> {y1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y2.\n        \\<lbrakk>y2 \\<in> var;\n         y2 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union>\n                     FvarsT t3 \\<union>\n                     {y1}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_FvarsT finite_subset infinite_var subsetI t1 t2 t3"], ["proof (prove)\nusing this:\n  ?t \\<in> trm \\<Longrightarrow> finite (FvarsT ?t)\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  infinite var\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n  t1 \\<in> trm\n  t2 \\<in> trm\n  t3 \\<in> trm\n\ngoal (1 subgoal):\n 1. (\\<And>y2.\n        \\<lbrakk>y2 \\<in> var;\n         y2 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union>\n                     FvarsT t3 \\<union>\n                     {y1}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) finite_insert infinite_Un insert_is_Un)"], ["proof (state)\nthis:\n  y2 \\<in> var\n  y2 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union> FvarsT t3 \\<union> {y1}\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "hence [simp]: \"y2 \\<notin> FvarsT t1\" \"y2 \\<notin> FvarsT t2\" \"y2 \\<notin>  FvarsT t3\" \"y1 \\<noteq> y2\""], ["proof (prove)\nusing this:\n  y2 \\<in> var\n  y2 \\<notin> FvarsT t1 \\<union> FvarsT t2 \\<union> FvarsT t3 \\<union> {y1}\n\ngoal (1 subgoal):\n 1. (y2 \\<notin> FvarsT t1 &&& y2 \\<notin> FvarsT t2) &&&\n    y2 \\<notin> FvarsT t3 &&& y1 \\<noteq> y2", "by auto"], ["proof (state)\nthis:\n  y2 \\<notin> FvarsT t1\n  y2 \\<notin> FvarsT t2\n  y2 \\<notin> FvarsT t3\n  y1 \\<noteq> y2\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "have 0: \"prv (imp (eql (Var y1) (Var y2))\n                    (imp (eql (Var y1) t3) (eql (Var y2) t3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql (Var y1) (Var y2))\n          (imp (eql (Var y1) t3) (eql (Var y2) t3)))", "using prv_eql_subst[OF y1 y2, of \"eql (Var y1) t3\"]"], ["proof (prove)\nusing this:\n  eql (Var y1) t3 \\<in> fmla \\<Longrightarrow>\n  prv (imp (eql (Var y1) (Var y2))\n        (imp (eql (Var y1) t3) (subst (eql (Var y1) t3) (Var y2) y1)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql (Var y1) (Var y2))\n          (imp (eql (Var y1) t3) (eql (Var y2) t3)))", "by simp"], ["proof (state)\nthis:\n  prv (imp (eql (Var y1) (Var y2))\n        (imp (eql (Var y1) t3) (eql (Var y2) t3)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "note 1 = prv_subst[OF y1 _ t1 0, simplified]"], ["proof (state)\nthis:\n  prv (imp (eql t1 (Var y2)) (imp (eql t1 t3) (eql (Var y2) t3)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "using prv_subst[OF y2 _ t2 1, simplified]"], ["proof (prove)\nusing this:\n  prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))\n\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))", "."], ["proof (state)\nthis:\n  prv (imp (eql t1 t2) (imp (eql t1 t3) (eql t2 t3)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_eql_imp_trans:\n  assumes t1[simp]: \"t1 \\<in> trm\" and t2[simp]: \"t2 \\<in> trm\" and t3[simp]: \"t3 \\<in> trm\"\n  shows \"prv (imp (eql t1 t2) (imp (eql t2 t3) (eql t1 t3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (eql t1 t2) (imp (eql t2 t3) (eql t1 t3)))", "by (meson eql imp prv_eql_sym prv_eql_imp_trans_rev prv_prv_imp_trans t1 t2 t3)"], ["", "lemma prv_eql_trans:\n  assumes t1[simp]: \"t1 \\<in> trm\" and t2[simp]: \"t2 \\<in> trm\" and t3[simp]: \"t3 \\<in> trm\"\n    and \"prv (eql t1 t2)\" and \"prv (eql t2 t3)\"\n  shows \"prv (eql t1 t3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eql t1 t3)", "by (meson assms cnj eql prv_cnjI prv_cnj_imp_monoR2 prv_eql_imp_trans prv_imp_mp)"], ["", "subsection \\<open>The equivalence between soft substitution and substitution\\<close>"], ["", "lemma prv_subst_imp_softSubst:\n  assumes [simp,intro!]: \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\" \"x \\<notin> FvarsT t\"\n  shows \"prv (imp (subst \\<phi> t x) (softSubst \\<phi> t x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (subst \\<phi> t x) (softSubst \\<phi> t x))", "unfolding softSubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (subst \\<phi> t x) (exi x (cnj (eql (Var x) t) \\<phi>)))", "by (rule prv_imp_exi)\n    (auto simp: prv_eql_reflT prv_imp_cnj prv_imp_refl prv_imp_triv subst_compose_same\n      intro: prv_exiI[of _ _ t])"], ["", "lemma prv_subst_implies_softSubst:\n  assumes \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\"\n    and \"x \\<notin> FvarsT t\"\n    and \"prv (subst \\<phi> t x)\"\n  shows \"prv (softSubst \\<phi> t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (softSubst \\<phi> t x)", "using assms prv_subst_imp_softSubst"], ["proof (prove)\nusing this:\n  x \\<in> var\n  t \\<in> trm\n  \\<phi> \\<in> fmla\n  x \\<notin> FvarsT t\n  prv (subst \\<phi> t x)\n  \\<lbrakk>?x \\<in> var; ?t \\<in> trm; ?\\<phi> \\<in> fmla;\n   ?x \\<notin> FvarsT ?t\\<rbrakk>\n  \\<Longrightarrow> prv (imp (subst ?\\<phi> ?t ?x)\n                          (softSubst ?\\<phi> ?t ?x))\n\ngoal (1 subgoal):\n 1. prv (softSubst \\<phi> t x)", "by (metis Var cnj eql exi subst prv_imp_mp softSubst_def)"], ["", "lemma prv_softSubst_imp_subst:\n  assumes [simp,intro!]: \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\" \"x \\<notin> FvarsT t\"\n  shows \"prv (imp (softSubst \\<phi> t x) (subst \\<phi> t x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (softSubst \\<phi> t x) (subst \\<phi> t x))", "unfolding softSubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x (cnj (eql (Var x) t) \\<phi>)) (subst \\<phi> t x))", "apply(rule prv_exi_imp_gen)"], ["proof (prove)\ngoal (5 subgoals):\n 1. x \\<in> var\n 2. cnj (eql (Var x) t) \\<phi> \\<in> fmla\n 3. subst \\<phi> t x \\<in> fmla\n 4. x \\<notin> Fvars (subst \\<phi> t x)\n 5. prv (imp (cnj (eql (Var x) t) \\<phi>) (subst \\<phi> t x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> var", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. cnj (eql (Var x) t) \\<phi> \\<in> fmla\n 2. subst \\<phi> t x \\<in> fmla\n 3. x \\<notin> Fvars (subst \\<phi> t x)\n 4. prv (imp (cnj (eql (Var x) t) \\<phi>) (subst \\<phi> t x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. cnj (eql (Var x) t) \\<phi> \\<in> fmla", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. subst \\<phi> t x \\<in> fmla\n 2. x \\<notin> Fvars (subst \\<phi> t x)\n 3. prv (imp (cnj (eql (Var x) t) \\<phi>) (subst \\<phi> t x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<phi> t x \\<in> fmla", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<notin> Fvars (subst \\<phi> t x)\n 2. prv (imp (cnj (eql (Var x) t) \\<phi>) (subst \\<phi> t x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> Fvars (subst \\<phi> t x)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj (eql (Var x) t) \\<phi>) (subst \\<phi> t x))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj (eql (Var x) t) \\<phi>) (subst \\<phi> t x))", "by (metis Var assms(1-3) eql subst prv_cnj_imp_monoR2 prv_eql_subst_trm subst_same_Var)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma prv_softSubst_implies_subst:\n  assumes \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\"\n    and \"x \\<notin> FvarsT t\"\n    and \"prv (softSubst \\<phi> t x)\"\n  shows \"prv (subst \\<phi> t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (subst \\<phi> t x)", "by (metis Var assms cnj eql exi local.subst prv_imp_mp prv_softSubst_imp_subst softSubst_def)"], ["", "lemma prv_softSubst_eqv_subst:\n  assumes [simp,intro!]: \"x \\<in> var\" \"t \\<in> trm\" \"\\<phi> \\<in> fmla\" \"x \\<notin> FvarsT t\"\n  shows \"prv (eqv (softSubst \\<phi> t x) (subst \\<phi> t x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (softSubst \\<phi> t x) (subst \\<phi> t x))", "by (metis Var assms cnj eql exi local.subst prv_eqvI prv_softSubst_imp_subst prv_subst_imp_softSubst softSubst_def)"], ["", "end \\<comment> \\<open>context @{locale Deduct}\\<close>"], ["", "section \\<open>Deduction Considering False\\<close>"], ["", "locale Deduct_with_False =\n  Syntax_with_Connectives_False\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  +\n  Deduct\n  var trm fmla Var FvarsT substT Fvars subst\n  num\n  eql cnj imp all exi\n  prv\n  for\n    var :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\n    and Var FvarsT substT Fvars subst\n    and eql cnj imp all exi\n    and fls\n    and num\n    and prv\n    +\n  assumes\n    prv_fls[simp,intro]: \"\\<And>\\<phi>. prv (imp fls \\<phi>)\"\nbegin"], ["", "subsection \\<open>Basic properties of False (fls)\\<close>"], ["", "lemma prv_expl:\n  assumes \"\\<phi> \\<in> fmla\"\n  assumes \"prv fls\"\n  shows \"prv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<phi>", "using assms prv_imp_mp"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  prv fls\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<chi>\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "by blast"], ["", "lemma prv_cnjR_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj fls \\<phi>) fls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj fls \\<phi>) fls)", "by (simp add: prv_eqvI prv_imp_cnjL)"], ["", "lemma prv_cnjL_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj \\<phi> fls) fls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj \\<phi> fls) fls)", "by (simp add: prv_eqvI prv_imp_cnjR)"], ["", "subsection \\<open>Properties involving negation\\<close>"], ["", "text \\<open>Recall that negation has been defined from implication and False.\\<close>"], ["", "lemma prv_imp_neg_fls:\n  assumes \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp \\<phi> (imp (neg \\<phi>) fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp (neg \\<phi>) fls))", "using assms prv_imp_com prv_imp_refl neg_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (imp ?\\<phi> ?\\<psi>))\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n  neg ?\\<phi> = imp ?\\<phi> fls\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp (neg \\<phi>) fls))", "by auto"], ["", "lemma prv_neg_fls:\n  assumes \"\\<phi> \\<in> fmla\"\n  assumes \"prv \\<phi>\" and \"prv (neg \\<phi>)\"\n  shows \"prv fls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv fls", "by (metis assms prv_imp_mp fls neg_def)"], ["", "lemma prv_imp_neg_neg:\n  assumes \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp \\<phi> (neg (neg \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (neg (neg \\<phi>)))", "using assms prv_imp_neg_fls neg_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  ?\\<phi> \\<in> fmla \\<Longrightarrow>\n  prv (imp ?\\<phi> (imp (neg ?\\<phi>) fls))\n  neg ?\\<phi> = imp ?\\<phi> fls\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (neg (neg \\<phi>)))", "by auto"], ["", "lemma prv_neg_neg:\n  assumes \"\\<phi> \\<in> fmla\"\n  assumes \"prv \\<phi>\"\n  shows \"prv (neg (neg \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (neg \\<phi>))", "by (metis assms prv_imp_mp prv_imp_neg_fls neg neg_def)"], ["", "lemma prv_imp_imp_neg_rev:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  shows \"prv (imp (imp \\<phi> \\<chi>)\n                (imp (neg \\<chi>) (neg \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> \\<chi>) (imp (neg \\<chi>) (neg \\<phi>)))", "unfolding neg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<chi> fls) (imp \\<phi> fls)))", "using prv_imp_trans2[OF assms fls]"], ["proof (prove)\nusing this:\n  prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<chi> fls) (imp \\<phi> fls)))\n\ngoal (1 subgoal):\n 1. prv (imp (imp \\<phi> \\<chi>) (imp (imp \\<chi> fls) (imp \\<phi> fls)))", "."], ["", "lemma prv_imp_neg_rev:\n  assumes \"\\<phi> \\<in> fmla\" and \"\\<chi> \\<in> fmla\"\n  assumes \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (neg \\<chi>) (neg \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (neg \\<chi>) (neg \\<phi>))", "by (meson assms imp neg prv_imp_imp_neg_rev prv_imp_mp)"], ["", "lemma prv_eqv_neg_prv_fls:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow>\nprv (eqv \\<phi> (neg \\<phi>)) \\<Longrightarrow> prv fls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; prv (eqv \\<phi> (neg \\<phi>))\\<rbrakk>\n    \\<Longrightarrow> prv fls", "by (metis cnj fls neg neg_def prv_cnj_imp_monoR2 prv_eqv_imp_transi prv_imp_cnj prv_imp_eqvER prv_imp_mp prv_imp_neg_rev)"], ["", "lemma prv_eqv_eqv_neg_prv_fls:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow>\nprv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<phi> (neg \\<chi>))\\<Longrightarrow> prv fls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; prv (eqv \\<phi> \\<chi>);\n     prv (eqv \\<phi> (neg \\<chi>))\\<rbrakk>\n    \\<Longrightarrow> prv fls", "by (meson neg prv_eqv_neg_prv_fls prv_eqv_sym prv_eqv_trans)"], ["", "lemma prv_eqv_eqv_neg_prv_fls2:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow>\nprv (eqv \\<phi> \\<chi>) \\<Longrightarrow> prv (eqv \\<chi> (neg \\<phi>))\\<Longrightarrow> prv fls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<chi> \\<in> fmla; prv (eqv \\<phi> \\<chi>);\n     prv (eqv \\<chi> (neg \\<phi>))\\<rbrakk>\n    \\<Longrightarrow> prv fls", "by (simp add: prv_eqv_eqv_neg_prv_fls prv_eqv_sym)"], ["", "lemma prv_neg_imp_imp_trans:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\"  \"\\<psi> \\<in> fmla\"\n    and \"prv (neg \\<phi>)\"\n    and \"prv (imp \\<chi> (imp \\<psi> \\<phi>))\"\n  shows \"prv (imp \\<chi> (neg \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (neg \\<psi>))", "unfolding neg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (imp \\<psi> fls))", "by (metis assms cnj fls neg_def prv_cnj_imp prv_cnj_imp_monoR2 prv_prv_imp_trans)"], ["", "lemma prv_imp_neg_imp_neg_imp:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\"\n    and \"prv (neg \\<phi>)\"\n  shows \"prv ((imp \\<chi> (neg (imp \\<chi> \\<phi>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (neg (imp \\<chi> \\<phi>)))", "by (metis assms fls imp neg_def prv_imp_com prv_imp_monoL)"], ["", "lemma prv_prv_neg_imp_neg:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\"\n    and \"prv \\<phi>\" and \"prv \\<chi>\"\n  shows \"prv (neg (imp \\<phi> (neg \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (imp \\<phi> (neg \\<chi>)))", "by (meson assms imp neg prv_imp_mp prv_imp_neg_imp_neg_imp prv_neg_neg)"], ["", "lemma prv_imp_neg_imp_cnjL:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\"\n    and \"prv (imp \\<phi> (neg \\<phi>1))\"\n  shows \"prv (imp \\<phi> (neg (cnj \\<phi>1 \\<phi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (neg (cnj \\<phi>1 \\<phi>2)))", "unfolding neg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp (cnj \\<phi>1 \\<phi>2) fls))", "by (metis assms cnj fls neg neg_def prv_imp_cnj3L prv_prv_imp_trans)"], ["", "lemma prv_imp_neg_imp_cnjR:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\"\n    and \"prv (imp \\<phi> (neg \\<phi>2))\"\n  shows \"prv (imp \\<phi> (neg (cnj \\<phi>1 \\<phi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (neg (cnj \\<phi>1 \\<phi>2)))", "unfolding neg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp (cnj \\<phi>1 \\<phi>2) fls))", "by (metis assms cnj fls neg neg_def prv_imp_cnj3R prv_prv_imp_trans)"], ["", "text \\<open>Negation versus quantifiers:\\<close>"], ["", "lemma prv_all_neg_imp_neg_exi:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "have 0: \"prv (imp (all x (neg \\<phi>)) (imp \\<phi> fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (imp \\<phi> fls))", "using prv_all_inst[OF x, of \"neg \\<phi>\" \"Var x\",simplified] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>neg \\<phi> \\<in> fmla; Var x \\<in> trm\\<rbrakk>\n  \\<Longrightarrow> prv (imp (all x (neg \\<phi>))\n                          (subst (neg \\<phi>) (Var x) x))\n  x \\<in> var\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (imp \\<phi> fls))", "by (auto simp: neg_def)"], ["proof (state)\nthis:\n  prv (imp (all x (neg \\<phi>)) (imp \\<phi> fls))\n\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "have 1: \"prv (imp \\<phi> (imp (all x (neg \\<phi>)) fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp (all x (neg \\<phi>)) fls))", "using 0"], ["proof (prove)\nusing this:\n  prv (imp (all x (neg \\<phi>)) (imp \\<phi> fls))\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (imp (all x (neg \\<phi>)) fls))", "by (simp add: assms  prv_imp_com)"], ["proof (state)\nthis:\n  prv (imp \\<phi> (imp (all x (neg \\<phi>)) fls))\n\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "have 2: \"prv (imp (exi x \\<phi>) (imp (all x (neg \\<phi>)) fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (imp (all x (neg \\<phi>)) fls))", "using 1 assms"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> (imp (all x (neg \\<phi>)) fls))\n  x \\<in> var\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (imp (all x (neg \\<phi>)) fls))", "by (intro prv_exi_imp_gen) auto"], ["proof (state)\nthis:\n  prv (imp (exi x \\<phi>) (imp (all x (neg \\<phi>)) fls))\n\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (imp (exi x \\<phi>) (imp (all x (neg \\<phi>)) fls))\n\ngoal (1 subgoal):\n 1. prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))", "by (simp add: assms  neg_def prv_imp_com)"], ["proof (state)\nthis:\n  prv (imp (all x (neg \\<phi>)) (neg (exi x \\<phi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_neg_exi_imp_all_neg:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (neg (exi x \\<phi>)) (all x (neg \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (neg (exi x \\<phi>)) (all x (neg \\<phi>)))", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (neg (exi x \\<phi>)) (all x (neg \\<phi>)))", "by (intro prv_all_imp_gen[of x \"neg (exi x \\<phi>)\"])\n    (auto simp: prv_exi_inst_same prv_imp_neg_rev)"], ["", "lemma prv_neg_exi_eqv_all_neg:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\"\n  shows \"prv (eqv (neg (exi x \\<phi>)) (all x (neg \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (neg (exi x \\<phi>)) (all x (neg \\<phi>)))", "by (simp add: \\<phi> prv_all_neg_imp_neg_exi prv_eqvI prv_neg_exi_imp_all_neg x)"], ["", "lemma prv_neg_exi_implies_all_neg:\n  assumes x: \"x \\<in> var\" and \\<phi>: \"\\<phi> \\<in> fmla\" and \"prv (neg (exi x \\<phi>))\"\n  shows \"prv (all x (neg \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all x (neg \\<phi>))", "by (meson \\<phi> all assms(3) exi neg prv_imp_mp prv_neg_exi_imp_all_neg x)"], ["", "lemma prv_neg_neg_exi:\n  assumes \"x \\<in> var\" \"\\<phi> \\<in> fmla\"\n    and \"prv (neg \\<phi>)\"\n  shows \"prv (neg (exi x \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (exi x \\<phi>))", "using assms neg_def prv_exi_imp_gen"], ["proof (prove)\nusing this:\n  x \\<in> var\n  \\<phi> \\<in> fmla\n  prv (neg \\<phi>)\n  neg ?\\<phi> = imp ?\\<phi> fls\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   ?x \\<notin> Fvars ?\\<chi>; prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (exi ?x ?\\<phi>) ?\\<chi>)\n\ngoal (1 subgoal):\n 1. prv (neg (exi x \\<phi>))", "by auto"], ["", "lemma prv_exi_imp_exiI:\n  assumes [simp]: \"x \\<in> var\" \"y \\<in> var\" \"\\<phi> \\<in> fmla\" and yx: \"y = x \\<or> y \\<notin> Fvars \\<phi>\"\n  shows \"prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))", "proof(cases \"y = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))\n 2. y \\<noteq> x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))", "case [simp]: False"], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))\n 2. y \\<noteq> x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))", "hence [simp]: \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by blast"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))\n 2. y \\<noteq> x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))", "apply(rule prv_exi_imp_gen)"], ["proof (prove)\ngoal (5 subgoals):\n 1. x \\<in> var\n 2. \\<phi> \\<in> fmla\n 3. exi y (subst \\<phi> (Var y) x) \\<in> fmla\n 4. x \\<notin> Fvars (exi y (subst \\<phi> (Var y) x))\n 5. prv (imp \\<phi> (exi y (subst \\<phi> (Var y) x)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> var", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<phi> \\<in> fmla\n 2. exi y (subst \\<phi> (Var y) x) \\<in> fmla\n 3. x \\<notin> Fvars (exi y (subst \\<phi> (Var y) x))\n 4. prv (imp \\<phi> (exi y (subst \\<phi> (Var y) x)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. exi y (subst \\<phi> (Var y) x) \\<in> fmla\n 2. x \\<notin> Fvars (exi y (subst \\<phi> (Var y) x))\n 3. prv (imp \\<phi> (exi y (subst \\<phi> (Var y) x)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. exi y (subst \\<phi> (Var y) x) \\<in> fmla", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<notin> Fvars (exi y (subst \\<phi> (Var y) x))\n 2. prv (imp \\<phi> (exi y (subst \\<phi> (Var y) x)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> Fvars (exi y (subst \\<phi> (Var y) x))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (exi y (subst \\<phi> (Var y) x)))", "using yx"], ["proof (prove)\nusing this:\n  y = x \\<or> y \\<notin> Fvars \\<phi>\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (exi y (subst \\<phi> (Var y) x)))", "by (auto intro!: prv_imp_exi prv_exiI[of _ _ \"Var x\"]\n        simp: prv_imp_refl2)"], ["proof (state)\nthis:\n  prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))\n\ngoal (1 subgoal):\n 1. y = x \\<Longrightarrow>\n    prv (imp (exi x \\<phi>) (exi y (subst \\<phi> (Var y) x)))", "qed(simp add: yx prv_imp_refl)"], ["", "lemma prv_imp_neg_allI:\n  assumes \"\\<phi> \\<in> fmla\" \"\\<chi> \\<in> fmla\" \"t \\<in> trm\" \"x \\<in> var\"\n    and \"prv (imp \\<phi> (neg (subst \\<chi> t x)))\"\n  shows \"prv (imp \\<phi> (neg (all x \\<chi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (neg (all x \\<chi>)))", "by (meson all assms subst neg prv_all_inst prv_imp_neg_rev prv_prv_imp_trans)"], ["", "lemma prv_imp_neg_allWI:\n  assumes \"\\<chi> \\<in> fmla\" \"t \\<in> trm\" \"x \\<in> var\"\n    and \"prv (neg (subst \\<chi> t x))\"\n  shows \"prv (neg (all x \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (neg (all x \\<chi>))", "by (metis all assms fls subst neg_def prv_all_inst prv_prv_imp_trans)"], ["", "subsection \\<open>Properties involving True (tru)\\<close>"], ["", "lemma prv_imp_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> tru)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> tru)", "by (simp add: neg_def prv_imp_triv tru_def)"], ["", "lemma prv_tru_imp: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (imp tru \\<phi>) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (imp tru \\<phi>) \\<phi>)", "by (metis imp neg_def prv_eqvI prv_fls prv_imp_com prv_imp_imp_triv prv_imp_mp prv_imp_refl tru tru_def)"], ["", "lemma prv_fls_neg_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv fls (neg tru))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv fls (neg tru))", "using neg_def prv_eqvI prv_neg_neg tru_def"], ["proof (prove)\nusing this:\n  neg ?\\<phi> = imp ?\\<phi> fls\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv (imp ?\\<chi> ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (eqv ?\\<phi> ?\\<chi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv (neg (neg ?\\<phi>))\n  tru = neg fls\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv fls (neg tru))", "by auto"], ["", "lemma prv_tru_neg_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv tru (neg fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv tru (neg fls))", "by (simp add: prv_eqv_refl tru_def)"], ["", "lemma prv_cnjR_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj tru \\<phi>) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj tru \\<phi>) \\<phi>)", "by (simp add: prv_eqvI prv_imp_cnj prv_imp_cnjR prv_imp_refl prv_imp_tru)"], ["", "lemma prv_cnjL_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj \\<phi> tru) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (cnj \\<phi> tru) \\<phi>)", "by (simp add: prv_eqvI prv_imp_cnj prv_imp_cnjL prv_imp_refl prv_imp_tru)"], ["", "subsection \\<open>Property of set-based conjunctions\\<close>"], ["", "text \\<open>These are based on properties of the auxiliary list conjunctions.\\<close>"], ["", "lemma prv_lcnj_imp_in:\n  assumes \"set \\<phi>s \\<subseteq> fmla\"\n    and \"\\<phi> \\<in> set \\<phi>s\"\n  shows \"prv (imp (lcnj \\<phi>s) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<phi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<phi>)", "have \"\\<phi> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>s \\<subseteq> fmla\n  \\<phi> \\<in> set \\<phi>s\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "by auto"], ["proof (state)\nthis:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<phi>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<phi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  set \\<phi>s \\<subseteq> fmla\n  \\<phi> \\<in> set \\<phi>s\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<phi>)", "by (induct \\<phi>s arbitrary: \\<phi>)\n      (auto simp : prv_imp_cnjL prv_cnj_imp_monoR2 prv_imp_triv)"], ["proof (state)\nthis:\n  prv (imp (lcnj \\<phi>s) \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_lcnj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\n    and \"\\<phi> \\<in> set \\<phi>s\" and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (lcnj \\<phi>s) \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<chi>)", "using assms lcnj prv_lcnj_imp_in prv_prv_imp_trans"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  set \\<phi>s \\<subseteq> fmla\n  \\<phi> \\<in> set \\<phi>s\n  prv (imp \\<phi> \\<chi>)\n  set ?\\<phi>s \\<subseteq> fmla \\<Longrightarrow> lcnj ?\\<phi>s \\<in> fmla\n  \\<lbrakk>set ?\\<phi>s \\<subseteq> fmla;\n   ?\\<phi> \\<in> set ?\\<phi>s\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj ?\\<phi>s) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv (imp ?\\<chi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> ?\\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>s) \\<chi>)", "by blast"], ["", "lemma prv_imp_lcnj:\n  assumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\n    and \"\\<And>\\<phi>. \\<phi> \\<in> set \\<phi>s \\<Longrightarrow> prv (imp \\<chi> \\<phi>)\"\n  shows \"prv (imp \\<chi> (lcnj \\<phi>s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (lcnj \\<phi>s))", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  set \\<phi>s \\<subseteq> fmla\n  ?\\<phi> \\<in> set \\<phi>s \\<Longrightarrow> prv (imp \\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (lcnj \\<phi>s))", "by (induct \\<phi>s arbitrary: \\<chi>) (auto simp: prv_imp_tru prv_imp_com prv_imp_cnj)"], ["", "lemma prv_lcnj_imp_inner:\n  assumes \"\\<phi> \\<in> fmla\" \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\"\n  shows \"prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))) (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))", "proof(induction \\<phi>1s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj ([] @ \\<phi>2s)))\n                            (lcnj ([] @ \\<phi> # \\<phi>2s)))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n  (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (cnj \\<phi>\n                                    (lcnj ((a # \\<phi>1s) @ \\<phi>2s)))\n                               (lcnj ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "case (Cons \\<phi>1 \\<phi>1s)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n                          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj ([] @ \\<phi>2s)))\n                            (lcnj ([] @ \\<phi> # \\<phi>2s)))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n  (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (cnj \\<phi>\n                                    (lcnj ((a # \\<phi>1s) @ \\<phi>2s)))\n                               (lcnj ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "have [intro!]: \"set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla\" \"set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla &&&\n    set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n                          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla &&&\n    set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla", "by auto"], ["proof (state)\nthis:\n  set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla\n  set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj ([] @ \\<phi>2s)))\n                            (lcnj ([] @ \\<phi> # \\<phi>2s)))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n  (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (cnj \\<phi>\n                                    (lcnj ((a # \\<phi>1s) @ \\<phi>2s)))\n                               (lcnj ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "have 0: \"prv (imp (cnj \\<phi> (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi>2s))))\n                 (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi>2s))))\n          (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n                          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi>2s))))\n          (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))))", "by (intro prv_cnj_com_imp3) fastforce+"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi> (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi>2s))))\n        (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj ([] @ \\<phi>2s)))\n                            (lcnj ([] @ \\<phi> # \\<phi>2s)))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n  (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (cnj \\<phi>\n                                    (lcnj ((a # \\<phi>1s) @ \\<phi>2s)))\n                               (lcnj ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "have 1: \"prv (imp (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))))\n                 (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))))\n          (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s))))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n                          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))))\n          (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s))))", "by (intro prv_cnj_mono) (auto simp add: prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))))\n        (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s))))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj ([] @ \\<phi>2s)))\n                            (lcnj ([] @ \\<phi> # \\<phi>2s)))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n  (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (cnj \\<phi>\n                                    (lcnj ((a # \\<phi>1s) @ \\<phi>2s)))\n                               (lcnj ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (lcnj ((\\<phi>1 # \\<phi>1s) @ \\<phi>2s)))\n          (lcnj ((\\<phi>1 # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "using prv_prv_imp_trans[OF _ _ _ 0 1] Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>cnj \\<phi> (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi>2s))) \\<in> fmla;\n   cnj \\<phi>1 (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s))) \\<in> fmla;\n   cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)) \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj \\<phi>\n                               (cnj \\<phi>1 (lcnj (\\<phi>1s @ \\<phi>2s))))\n                          (cnj \\<phi>1\n                            (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s))))\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj (\\<phi>1s @ \\<phi>2s)))\n                          (lcnj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (lcnj ((\\<phi>1 # \\<phi>1s) @ \\<phi>2s)))\n          (lcnj ((\\<phi>1 # \\<phi>1s) @ \\<phi> # \\<phi>2s)))", "by auto"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi> (lcnj ((\\<phi>1 # \\<phi>1s) @ \\<phi>2s)))\n        (lcnj ((\\<phi>1 # \\<phi>1s) @ \\<phi> # \\<phi>2s)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> (lcnj ([] @ \\<phi>2s)))\n                            (lcnj ([] @ \\<phi> # \\<phi>2s)))", "qed(simp add: prv_imp_refl)"], ["", "lemma prv_lcnj_imp_remdups:\n  assumes \"set \\<phi>s \\<subseteq> fmla\"\n  shows \"prv (imp (lcnj (remdups \\<phi>s)) (lcnj \\<phi>s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (remdups \\<phi>s)) (lcnj \\<phi>s))", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (remdups \\<phi>s)) (lcnj \\<phi>s))", "apply(induct \\<phi>s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> fmla \\<Longrightarrow>\n    prv (imp (lcnj (remdups [])) (lcnj []))\n 2. \\<And>a \\<phi>s.\n       \\<lbrakk>set \\<phi>s \\<subseteq> fmla \\<Longrightarrow>\n                prv (imp (lcnj (remdups \\<phi>s)) (lcnj \\<phi>s));\n        set (a # \\<phi>s) \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj (remdups (a # \\<phi>s)))\n                               (lcnj (a # \\<phi>s)))", "by (auto simp: prv_imp_cnj prv_lcnj_imp_in prv_cnj_mono prv_imp_refl)"], ["", "lemma prv_lcnj_mono:\n  assumes \\<phi>1s: \"set \\<phi>1s \\<subseteq> fmla\" and \"set \\<phi>2s \\<subseteq> set \\<phi>1s\"\n  shows \"prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "define \\<phi>2s' where \\<phi>2s': \"\\<phi>2s' = remdups \\<phi>2s\""], ["proof (state)\nthis:\n  \\<phi>2s' = remdups \\<phi>2s\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "have A: \"set \\<phi>2s' \\<subseteq> set \\<phi>1s\" \"distinct \\<phi>2s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set \\<phi>2s' \\<subseteq> set \\<phi>1s &&& distinct \\<phi>2s'", "unfolding  \\<phi>2s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups \\<phi>2s) \\<subseteq> set \\<phi>1s &&&\n    distinct (remdups \\<phi>2s)", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> set \\<phi>1s\n\ngoal (1 subgoal):\n 1. set (remdups \\<phi>2s) \\<subseteq> set \\<phi>1s &&&\n    distinct (remdups \\<phi>2s)", "by auto"], ["proof (state)\nthis:\n  set \\<phi>2s' \\<subseteq> set \\<phi>1s\n  distinct \\<phi>2s'\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "have B: \"prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s'))", "using \\<phi>1s A"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s' \\<subseteq> set \\<phi>1s\n  distinct \\<phi>2s'\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s'))", "proof(induction \\<phi>1s arbitrary: \\<phi>2s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>2s'.\n       \\<lbrakk>set [] \\<subseteq> fmla; set \\<phi>2s' \\<subseteq> set [];\n        distinct \\<phi>2s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj []) (lcnj \\<phi>2s'))\n 2. \\<And>a \\<phi>1s \\<phi>2s'.\n       \\<lbrakk>\\<And>\\<phi>2s'.\n                   \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n                    set \\<phi>2s' \\<subseteq> set \\<phi>1s;\n                    distinct \\<phi>2s'\\<rbrakk>\n                   \\<Longrightarrow> prv\n(imp (lcnj \\<phi>1s) (lcnj \\<phi>2s'));\n        set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s' \\<subseteq> set (a # \\<phi>1s);\n        distinct \\<phi>2s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj (a # \\<phi>1s)) (lcnj \\<phi>2s'))", "case (Cons \\<phi>1 \\<phi>1s \\<phi>2ss)"], ["proof (state)\nthis:\n  \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n   set ?\\<phi>2s' \\<subseteq> set \\<phi>1s; distinct ?\\<phi>2s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) (lcnj ?\\<phi>2s'))\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2ss \\<subseteq> set (\\<phi>1 # \\<phi>1s)\n  distinct \\<phi>2ss\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>2s'.\n       \\<lbrakk>set [] \\<subseteq> fmla; set \\<phi>2s' \\<subseteq> set [];\n        distinct \\<phi>2s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj []) (lcnj \\<phi>2s'))\n 2. \\<And>a \\<phi>1s \\<phi>2s'.\n       \\<lbrakk>\\<And>\\<phi>2s'.\n                   \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n                    set \\<phi>2s' \\<subseteq> set \\<phi>1s;\n                    distinct \\<phi>2s'\\<rbrakk>\n                   \\<Longrightarrow> prv\n(imp (lcnj \\<phi>1s) (lcnj \\<phi>2s'));\n        set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s' \\<subseteq> set (a # \\<phi>1s);\n        distinct \\<phi>2s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj (a # \\<phi>1s)) (lcnj \\<phi>2s'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "proof(cases \"\\<phi>1 \\<in> set \\<phi>2ss\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "case True"], ["proof (state)\nthis:\n  \\<phi>1 \\<in> set \\<phi>2ss\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "then"], ["proof (chain)\npicking this:\n  \\<phi>1 \\<in> set \\<phi>2ss", "obtain \\<phi>2ss1 \\<phi>2ss2 where \\<phi>2ss: \"\\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\""], ["proof (prove)\nusing this:\n  \\<phi>1 \\<in> set \\<phi>2ss\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>2ss1 \\<phi>2ss2.\n        \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson split_list)"], ["proof (state)\nthis:\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "define \\<phi>2s where \\<phi>2s: \"\\<phi>2s \\<equiv> \\<phi>2ss1 @ \\<phi>2ss2\""], ["proof (state)\nthis:\n  \\<phi>2s \\<equiv> \\<phi>2ss1 @ \\<phi>2ss2\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "have nin: \"\\<phi>1 \\<notin> set \\<phi>2s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>1 \\<notin> set \\<phi>2s", "using \\<phi>2ss \\<open>distinct \\<phi>2ss\\<close>"], ["proof (prove)\nusing this:\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n  distinct \\<phi>2ss\n\ngoal (1 subgoal):\n 1. \\<phi>1 \\<notin> set \\<phi>2s", "unfolding \\<phi>2s"], ["proof (prove)\nusing this:\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n  distinct \\<phi>2ss\n\ngoal (1 subgoal):\n 1. \\<phi>1 \\<notin> set (\\<phi>2ss1 @ \\<phi>2ss2)", "by auto"], ["proof (state)\nthis:\n  \\<phi>1 \\<notin> set \\<phi>2s\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "have [intro!]: \"set \\<phi>2s \\<subseteq> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set \\<phi>2s \\<subseteq> fmla", "unfolding \\<phi>2s"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (\\<phi>2ss1 @ \\<phi>2ss2) \\<subseteq> fmla", "using \\<phi>2ss Cons"], ["proof (prove)\nusing this:\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n  \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n   set ?\\<phi>2s' \\<subseteq> set \\<phi>1s; distinct ?\\<phi>2s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) (lcnj ?\\<phi>2s'))\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2ss \\<subseteq> set (\\<phi>1 # \\<phi>1s)\n  distinct \\<phi>2ss\n\ngoal (1 subgoal):\n 1. set (\\<phi>2ss1 @ \\<phi>2ss2) \\<subseteq> fmla", "by auto"], ["proof (state)\nthis:\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "have 0: \"prv (imp (cnj \\<phi>1 (lcnj \\<phi>2s)) (lcnj \\<phi>2ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (lcnj \\<phi>2s)) (lcnj \\<phi>2ss))", "unfolding \\<phi>2s \\<phi>2ss"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (lcnj (\\<phi>2ss1 @ \\<phi>2ss2)))\n          (lcnj (\\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2)))", "using Cons \\<phi>2ss"], ["proof (prove)\nusing this:\n  \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n   set ?\\<phi>2s' \\<subseteq> set \\<phi>1s; distinct ?\\<phi>2s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) (lcnj ?\\<phi>2s'))\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2ss \\<subseteq> set (\\<phi>1 # \\<phi>1s)\n  distinct \\<phi>2ss\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (lcnj (\\<phi>2ss1 @ \\<phi>2ss2)))\n          (lcnj (\\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2)))", "by (intro prv_lcnj_imp_inner) auto"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi>1 (lcnj \\<phi>2s)) (lcnj \\<phi>2ss))\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "have 1: \"prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "using nin Cons.prems True \\<phi>2s \\<phi>2ss"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<notin> set \\<phi>2s\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2ss \\<subseteq> set (\\<phi>1 # \\<phi>1s)\n  distinct \\<phi>2ss\n  \\<phi>1 \\<in> set \\<phi>2ss\n  \\<phi>2s \\<equiv> \\<phi>2ss1 @ \\<phi>2ss2\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "by (intro Cons.IH) auto"], ["proof (state)\nthis:\n  prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "have 2: \"prv (imp (cnj \\<phi>1 (lcnj \\<phi>1s)) (cnj \\<phi>1 (lcnj \\<phi>2s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (lcnj \\<phi>1s)) (cnj \\<phi>1 (lcnj \\<phi>2s)))", "using Cons \\<phi>2ss \\<phi>2s 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n   set ?\\<phi>2s' \\<subseteq> set \\<phi>1s; distinct ?\\<phi>2s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) (lcnj ?\\<phi>2s'))\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2ss \\<subseteq> set (\\<phi>1 # \\<phi>1s)\n  distinct \\<phi>2ss\n  \\<phi>2ss = \\<phi>2ss1 @ \\<phi>1 # \\<phi>2ss2\n  \\<phi>2s \\<equiv> \\<phi>2ss1 @ \\<phi>2ss2\n  prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi>1 (lcnj \\<phi>1s)) (cnj \\<phi>1 (lcnj \\<phi>2s)))", "by (intro prv_cnj_mono) (fastforce simp add: prv_imp_refl)+"], ["proof (state)\nthis:\n  prv (imp (cnj \\<phi>1 (lcnj \\<phi>1s)) (cnj \\<phi>1 (lcnj \\<phi>2s)))\n\ngoal (2 subgoals):\n 1. \\<phi>1 \\<in> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n 2. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n   set ?\\<phi>2s' \\<subseteq> set \\<phi>1s; distinct ?\\<phi>2s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) (lcnj ?\\<phi>2s'))\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2ss \\<subseteq> set (\\<phi>1 # \\<phi>1s)\n  distinct \\<phi>2ss\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "by (auto intro!: prv_prv_imp_trans[OF _ _ _ 2 0])"], ["proof (state)\nthis:\n  prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n\ngoal (1 subgoal):\n 1. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "case False"], ["proof (state)\nthis:\n  \\<phi>1 \\<notin> set \\<phi>2ss\n\ngoal (1 subgoal):\n 1. \\<phi>1 \\<notin> set \\<phi>2ss \\<Longrightarrow>\n    prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "then"], ["proof (chain)\npicking this:\n  \\<phi>1 \\<notin> set \\<phi>2ss", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi>1 \\<notin> set \\<phi>2ss\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))", "by (meson Cons lcnj prv_imp_lcnj prv_lcnj_imp_in subset_iff)"], ["proof (state)\nthis:\n  prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv (imp (lcnj (\\<phi>1 # \\<phi>1s)) (lcnj \\<phi>2ss))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>2s'.\n       \\<lbrakk>set [] \\<subseteq> fmla; set \\<phi>2s' \\<subseteq> set [];\n        distinct \\<phi>2s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj []) (lcnj \\<phi>2s'))", "qed(simp add: prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s'))\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "have C: \"prv (imp (lcnj \\<phi>2s') (lcnj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>2s') (lcnj \\<phi>2s))", "unfolding \\<phi>2s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (remdups \\<phi>2s)) (lcnj \\<phi>2s))", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> set \\<phi>1s\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (remdups \\<phi>2s)) (lcnj \\<phi>2s))", "by (intro prv_lcnj_imp_remdups) auto"], ["proof (state)\nthis:\n  prv (imp (lcnj \\<phi>2s') (lcnj \\<phi>2s))\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "using A assms"], ["proof (prove)\nusing this:\n  set \\<phi>2s' \\<subseteq> set \\<phi>1s\n  distinct \\<phi>2s'\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> set \\<phi>1s\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "by (intro prv_prv_imp_trans[OF _ _ _ B C]) auto"], ["proof (state)\nthis:\n  prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_lcnj_eqv:\n  assumes \"set \\<phi>1s \\<subseteq> fmla\" and \"set \\<phi>2s = set \\<phi>1s\"\n  shows \"prv (eqv (lcnj \\<phi>1s) (lcnj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "using assms prv_lcnj_mono"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s = set \\<phi>1s\n  \\<lbrakk>set ?\\<phi>1s \\<subseteq> fmla;\n   set ?\\<phi>2s \\<subseteq> set ?\\<phi>1s\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj ?\\<phi>1s) (lcnj ?\\<phi>2s))\n\ngoal (1 subgoal):\n 1. prv (eqv (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "by (intro prv_eqvI) auto"], ["", "lemma prv_lcnj_mono_imp:\n  assumes \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\" and \"\\<forall> \\<phi>2 \\<in> set \\<phi>2s. \\<exists> \\<phi>1 \\<in> set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n  \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n     \\<exists>\\<phi>1\\<in>set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj \\<phi>1s) (lcnj \\<phi>2s))", "apply(intro prv_imp_lcnj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> lcnj \\<phi>1s \\<in> fmla\n 2. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> set \\<phi>2s \\<subseteq> fmla\n 3. \\<And>\\<phi>.\n       \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla;\n        \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n           \\<exists>\\<phi>1\\<in>set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2);\n        \\<phi> \\<in> set \\<phi>2s\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) \\<phi>)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> lcnj \\<phi>1s \\<in> fmla", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> set \\<phi>2s \\<subseteq> fmla\n 2. \\<And>\\<phi>.\n       \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla;\n        \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n           \\<exists>\\<phi>1\\<in>set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2);\n        \\<phi> \\<in> set \\<phi>2s\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) \\<phi>)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> set \\<phi>2s \\<subseteq> fmla", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla;\n        \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n           \\<exists>\\<phi>1\\<in>set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2);\n        \\<phi> \\<in> set \\<phi>2s\\<rbrakk>\n       \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) \\<phi>)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2);\n     \\<phi>_ \\<in> set \\<phi>2s\\<rbrakk>\n    \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) \\<phi>_)", "using prv_lcnj_imp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<chi> \\<in> fmla; set ?\\<phi>s \\<subseteq> fmla;\n   ?\\<phi> \\<in> set ?\\<phi>s; prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (lcnj ?\\<phi>s) ?\\<chi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>2\\<in>set \\<phi>2s.\n        \\<exists>\\<phi>1\\<in>set \\<phi>1s. prv (imp \\<phi>1 \\<phi>2);\n     \\<phi>_ \\<in> set \\<phi>2s\\<rbrakk>\n    \\<Longrightarrow> prv (imp (lcnj \\<phi>1s) \\<phi>_)", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text \\<open>Set-based conjunction commutes with substitution only up to provably equivalence:\\<close>"], ["", "lemma prv_subst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"t \\<in> trm\" \"x \\<in> var\"\n  shows \"prv (eqv (subst (scnj F) t x) (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (subst (scnj F) t x)\n          (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  t \\<in> trm\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (eqv (subst (scnj F) t x)\n          (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "unfolding scnj_def"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  t \\<in> trm\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (eqv (subst (lcnj (asList F)) t x)\n          (lcnj (asList ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))))", "by (fastforce intro!: prv_lcnj_eqv)"], ["", "lemma prv_imp_subst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"t \\<in> trm\" \"x \\<in> var\"\n  shows \"prv (imp (subst (scnj F) t x) (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (subst (scnj F) t x)\n          (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "using prv_subst_scnj[OF assms] assms"], ["proof (prove)\nusing this:\n  prv (eqv (subst (scnj F) t x)\n        (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  t \\<in> trm\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (imp (subst (scnj F) t x)\n          (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "by (intro prv_imp_eqvEL) auto"], ["", "lemma prv_subst_scnj_imp:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"t \\<in> trm\" \"x \\<in> var\"\n  shows \"prv (imp (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) (subst (scnj F) t x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n          (subst (scnj F) t x))", "using prv_subst_scnj[OF assms] assms"], ["proof (prove)\nusing this:\n  prv (eqv (subst (scnj F) t x)\n        (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  t \\<in> trm\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (imp (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n          (subst (scnj F) t x))", "by (intro prv_imp_eqvER) auto"], ["", "lemma prv_scnj_imp_in:\n  assumes \"F \\<subseteq> fmla\" \"finite F\"\n    and \"\\<phi> \\<in> F\"\n  shows \"prv (imp (scnj F) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj F) \\<phi>)", "unfolding scnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F)) \\<phi>)", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> F\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F)) \\<phi>)", "by (intro prv_lcnj_imp_in) auto"], ["", "lemma prv_scnj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n    and \"\\<phi> \\<in> F\" and \"prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (scnj F) \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj F) \\<chi>)", "unfolding scnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F)) \\<chi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> F\n  prv (imp \\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F)) \\<chi>)", "by (intro prv_lcnj_imp) auto"], ["", "lemma prv_imp_scnj:\n  assumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n    and \"\\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<chi> \\<phi>)\"\n  shows \"prv (imp \\<chi> (scnj F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (scnj F))", "unfolding scnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (lcnj (asList F)))", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  ?\\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<chi> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (lcnj (asList F)))", "by (intro prv_imp_lcnj) auto"], ["", "lemma prv_scnj_mono:\n  assumes \"F1 \\<subseteq> fmla\" and \"F2 \\<subseteq> F1\" and \"finite F1\"\n  shows \"prv (imp (scnj F1) (scnj F2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj F1) (scnj F2))", "unfolding scnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F1)) (lcnj (asList F2)))", "using assms"], ["proof (prove)\nusing this:\n  F1 \\<subseteq> fmla\n  F2 \\<subseteq> F1\n  finite F1\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F1)) (lcnj (asList F2)))", "apply (intro prv_lcnj_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F1 \\<subseteq> fmla; F2 \\<subseteq> F1; finite F1\\<rbrakk>\n    \\<Longrightarrow> set (asList F1) \\<subseteq> fmla\n 2. \\<lbrakk>F1 \\<subseteq> fmla; F2 \\<subseteq> F1; finite F1\\<rbrakk>\n    \\<Longrightarrow> set (asList F2) \\<subseteq> set (asList F1)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F1 \\<subseteq> fmla; F2 \\<subseteq> F1; finite F1\\<rbrakk>\n    \\<Longrightarrow> set (asList F1) \\<subseteq> fmla", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F1 \\<subseteq> fmla; F2 \\<subseteq> F1; finite F1\\<rbrakk>\n    \\<Longrightarrow> set (asList F2) \\<subseteq> set (asList F1)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F1 \\<subseteq> fmla; F2 \\<subseteq> F1; finite F1\\<rbrakk>\n    \\<Longrightarrow> set (asList F2) \\<subseteq> set (asList F1)", "by (metis asList infinite_super)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma prv_scnj_mono_imp:\n  assumes \"F1 \\<subseteq> fmla\" \"F2 \\<subseteq> fmla\" \"finite F1\" \"finite F2\"\n    and \"\\<forall> \\<phi>2 \\<in> F2. \\<exists> \\<phi>1 \\<in> F1. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (scnj F1) (scnj F2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj F1) (scnj F2))", "unfolding scnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F1)) (lcnj (asList F2)))", "using assms"], ["proof (prove)\nusing this:\n  F1 \\<subseteq> fmla\n  F2 \\<subseteq> fmla\n  finite F1\n  finite F2\n  \\<forall>\\<phi>2\\<in>F2.\n     \\<exists>\\<phi>1\\<in>F1. prv (imp \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (imp (lcnj (asList F1)) (lcnj (asList F2)))", "by (intro prv_lcnj_mono_imp) auto"], ["", "text \\<open>Commutation with parallel substitution:\\<close>"], ["", "lemma prv_imp_scnj_insert:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))", "apply (intro prv_imp_cnj)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> scnj (insert \\<phi> F) \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> scnj F \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) \\<phi>)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) (scnj F))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> scnj (insert \\<phi> F) \\<in> fmla", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> scnj F \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) \\<phi>)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) (scnj F))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> scnj F \\<in> fmla", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) \\<phi>)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) (scnj F))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) \\<phi>)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) (scnj F))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) \\<phi>)", "by (auto intro: prv_imp_refl prv_scnj_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) (scnj F))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; \\<phi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj (insert \\<phi> F)) (scnj F))", "by (auto intro: prv_scnj_mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma prv_implies_scnj_insert:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n    and \"prv (scnj (insert \\<phi> F))\"\n  shows \"prv (cnj \\<phi> (scnj F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (cnj \\<phi> (scnj F))", "by (meson assms  cnj finite.insertI insert_subset prv_imp_mp prv_imp_scnj_insert scnj)"], ["", "lemma prv_imp_cnj_scnj:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n  shows \"prv (imp (cnj \\<phi> (scnj F)) (scnj (insert \\<phi> F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (scnj F)) (scnj (insert \\<phi> F)))", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (scnj F)) (scnj (insert \\<phi> F)))", "by (auto intro!: prv_imp_scnj prv_imp_cnjL\n      simp: prv_cnj_imp_monoR2 prv_imp_triv prv_scnj_imp_in subset_iff)"], ["", "lemma prv_implies_cnj_scnj:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n    and \"prv (cnj \\<phi> (scnj F))\"\n  shows \"prv (scnj (insert \\<phi> F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (scnj (insert \\<phi> F))", "by (meson assms  cnj finite.insertI insert_subset prv_imp_cnj_scnj prv_imp_mp scnj)"], ["", "lemma prv_eqv_scnj_insert:\n  assumes \"F \\<subseteq> fmla\" and \"finite F\" and \"\\<phi> \\<in> fmla\"\n  shows \"prv (eqv (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (scnj (insert \\<phi> F)) (cnj \\<phi> (scnj F)))", "by (simp add: assms prv_eqvI prv_imp_cnj_scnj prv_imp_scnj_insert)"], ["", "lemma prv_scnj1_imp:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (scnj {\\<phi>}) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (scnj {\\<phi>}) \\<phi>)", "using prv_scnj_imp_in"], ["proof (prove)\nusing this:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; ?\\<phi> \\<in> ?F\\<rbrakk>\n  \\<Longrightarrow> prv (imp (scnj ?F) ?\\<phi>)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (scnj {\\<phi>}) \\<phi>)", "by auto"], ["", "lemma prv_imp_scnj1:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (scnj {\\<phi>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (scnj {\\<phi>}))", "using prv_imp_refl prv_imp_scnj"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n  \\<lbrakk>?\\<chi> \\<in> fmla; ?F \\<subseteq> fmla; finite ?F;\n   \\<And>\\<phi>.\n      \\<phi> \\<in> ?F \\<Longrightarrow> prv (imp ?\\<chi> \\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (scnj ?F))\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (scnj {\\<phi>}))", "by fastforce"], ["", "lemma prv_scnj2_imp_cnj:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (scnj {\\<phi>,\\<psi>}) (cnj \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj {\\<phi>, \\<psi>}) (cnj \\<phi> \\<psi>))", "using prv_imp_cnj prv_scnj_imp_in"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<psi>); prv (imp ?\\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (cnj ?\\<psi> ?\\<chi>))\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; ?\\<phi> \\<in> ?F\\<rbrakk>\n  \\<Longrightarrow> prv (imp (scnj ?F) ?\\<phi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj {\\<phi>, \\<psi>}) (cnj \\<phi> \\<psi>))", "by auto"], ["", "lemma prv_cnj_imp_scnj2:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (cnj \\<phi> \\<psi>) (scnj {\\<phi>,\\<psi>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> \\<psi>) (scnj {\\<phi>, \\<psi>}))", "using prv_imp_cnjL prv_imp_cnjR prv_imp_scnj"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<phi>)\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<chi>)\n  \\<lbrakk>?\\<chi> \\<in> fmla; ?F \\<subseteq> fmla; finite ?F;\n   \\<And>\\<phi>.\n      \\<phi> \\<in> ?F \\<Longrightarrow> prv (imp ?\\<chi> \\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (scnj ?F))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (cnj \\<phi> \\<psi>) (scnj {\\<phi>, \\<psi>}))", "by fastforce"], ["", "lemma prv_imp_imp_scnj2:\n  \"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> (scnj {\\<phi>,\\<psi>})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> (scnj {\\<phi>, \\<psi>})))", "using prv_cnj_imp_scnj2 prv_cnj_imp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<psi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (cnj ?\\<phi> ?\\<psi>)\n                          (scnj {?\\<phi>, ?\\<psi>}))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp (cnj ?\\<phi> ?\\<chi>) ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (imp ?\\<chi> ?\\<psi>))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi> (imp \\<psi> (scnj {\\<phi>, \\<psi>})))", "by auto"], ["", "(* *)"], ["", "lemma prv_rawpsubst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\"\n    and \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\n  shows \"prv (eqv (rawpsubst (scnj F) txs) (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))", "proof(induction txs arbitrary: F)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "case (Cons tx txs)"], ["proof (state)\nthis:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; snd ` set txs \\<subseteq> var;\n   fst ` set txs \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (eqv (rawpsubst (scnj ?F) txs)\n                          (scnj\n                            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ?F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; snd ` set txs \\<subseteq> var;\n   fst ` set txs \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (eqv (rawpsubst (scnj ?F) txs)\n                          (scnj\n                            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ?F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm", "obtain t x where tx[simp]: \"tx = (t,x)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; snd ` set txs \\<subseteq> var;\n   fst ` set txs \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (eqv (rawpsubst (scnj ?F) txs)\n                          (scnj\n                            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ?F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. (\\<And>t x. tx = (t, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases tx) auto"], ["proof (state)\nthis:\n  tx = (t, x)\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "hence [simp]: \"t \\<in> trm\" \"x \\<in> var\""], ["proof (prove)\nusing this:\n  tx = (t, x)\n\ngoal (1 subgoal):\n 1. t \\<in> trm &&& x \\<in> var", "using Cons.prems"], ["proof (prove)\nusing this:\n  tx = (t, x)\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. t \\<in> trm &&& x \\<in> var", "by auto"], ["proof (state)\nthis:\n  t \\<in> trm\n  x \\<in> var\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "have 0: \"(\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n           (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n    (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n    (\\<lambda>\\<phi>. subst \\<phi> t x) ` F", "using Cons.prems"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n    (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n    (\\<lambda>\\<phi>. subst \\<phi> t x) ` F", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n  (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n  (\\<lambda>\\<phi>. subst \\<phi> t x) ` F\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "have \"prv (eqv (subst (scnj F) t x)\n                 (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (subst (scnj F) t x)\n          (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "using Cons.prems"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (subst (scnj F) t x)\n          (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "by (intro prv_subst_scnj) auto"], ["proof (state)\nthis:\n  prv (eqv (subst (scnj F) t x)\n        (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "hence \"prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n                  (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\""], ["proof (prove)\nusing this:\n  prv (eqv (subst (scnj F) t x)\n        (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n          (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))", "using Cons.prems"], ["proof (prove)\nusing this:\n  prv (eqv (subst (scnj F) t x)\n        (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n          (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))", "by (intro prv_eqv_rawpsubst) auto"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n        (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "moreover"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n        (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "have \"prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n                 (scnj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n               txs)\n          (scnj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n               txs)\n          (scnj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n             (\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "using Cons.prems"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n               txs)\n          (scnj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n             (\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "by (intro Cons.IH) auto"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (scnj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (scnj F) txs)\n  (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (a # txs))\n                               (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "ultimately"], ["proof (chain)\npicking this:\n  prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n        (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n  prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (scnj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))", "show ?case"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n        (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n  prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (scnj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj F) (tx # txs))\n          (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> (tx # txs)) ` F)))", "using Cons.prems"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n        (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n  prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (scnj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj F) (tx # txs))\n          (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> (tx # txs)) ` F)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv (rawpsubst (subst (scnj F) t x) txs)\n                   (rawpsubst\n                     (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs));\n     prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n                txs)\n           (scnj\n             ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set (tx # txs) \\<subseteq> var;\n     fst ` set (tx # txs) \\<subseteq> trm\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) (tx # txs))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi> (tx # txs)) `\n                               F)))", "by (rule prv_eqv_trans) (auto intro!: rawpsubst)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (scnj F) (tx # txs))\n        (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> (tx # txs)) ` F)))\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (scnj F) [])\n                               (scnj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))", "qed(auto simp: image_def prv_eqv_refl)[]"], ["", "lemma prv_psubst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\"\n    and \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\n    and \"distinct (map snd txs)\"\n  shows \"prv (eqv (psubst (scnj F) txs) (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "define us where us: \"us \\<equiv> getFrN (map snd txs) (map fst txs) [scnj F] (length txs)\""], ["proof (state)\nthis:\n  us \\<equiv> getFrN (map snd txs) (map fst txs) [scnj F] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have us_facts: \"set us \\<subseteq> var\"\n    \"set us \\<inter> \\<Union> (Fvars ` F) = {}\"\n    \"set us \\<inter> \\<Union> (FvarsT ` (fst ` (set txs))) = {}\"\n    \"set us \\<inter> snd ` (set txs) = {}\"\n    \"length us = length txs\"\n    \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set us \\<subseteq> var &&&\n     set us \\<inter> \\<Union> (Fvars ` F) = {} &&&\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}) &&&\n    set us \\<inter> snd ` set txs = {} &&&\n    length us = length txs &&& distinct us", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. (set us \\<subseteq> var &&&\n     set us \\<inter> \\<Union> (Fvars ` F) = {} &&&\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}) &&&\n    set us \\<inter> snd ` set txs = {} &&&\n    length us = length txs &&& distinct us", "unfolding us"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. (set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs))\n     \\<subseteq> var &&&\n     set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) \\<inter>\n     \\<Union> (Fvars ` F) =\n     {} &&&\n     set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) \\<inter>\n     \\<Union> (FvarsT ` fst ` set txs) =\n     {}) &&&\n    set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) \\<inter>\n    snd ` set txs =\n    {} &&&\n    length (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) =\n    length txs &&&\n    distinct (getFrN (map snd txs) (map fst txs) [scnj F] (length txs))", "using getFrN_Fvars[of \"map snd txs\" \"map fst txs\" \"[scnj F]\" _ \"length txs\"]\n      getFrN_FvarsT[of \"map snd txs\" \"map fst txs\" \"[scnj F]\" _ \"length txs\"]\n      getFrN_var[of \"map snd txs\" \"map fst txs\" \"[scnj F]\" _ \"length txs\"]\n      getFrN_length[of \"map snd txs\" \"map fst txs\" \"[scnj F]\" \"length txs\"]"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n   ?\\<phi> \\<in> set [scnj F]\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) \\<inter>\n                    Fvars ?\\<phi> =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) \\<inter>\n                    FvarsT ?t =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) \\<inter>\n                    set (map snd txs) =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> length\n                     (getFrN (map snd txs) (map fst txs) [scnj F]\n                       (length txs)) =\n                    length txs\n\ngoal (1 subgoal):\n 1. (set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs))\n     \\<subseteq> var &&&\n     set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) \\<inter>\n     \\<Union> (Fvars ` F) =\n     {} &&&\n     set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) \\<inter>\n     \\<Union> (FvarsT ` fst ` set txs) =\n     {}) &&&\n    set (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) \\<inter>\n    snd ` set txs =\n    {} &&&\n    length (getFrN (map snd txs) (map fst txs) [scnj F] (length txs)) =\n    length txs &&&\n    distinct (getFrN (map snd txs) (map fst txs) [scnj F] (length txs))", "apply -"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs))\n                      \\<subseteq> var\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (Fvars ` F) =\n                      {}\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs)) =\n                      length txs\n 6. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs))\n                      \\<subseteq> var", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (Fvars ` F) =\n                      {}\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs)) =\n                      length txs\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (Fvars ` F) =\n                      {}", "by fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs)) =\n                      length txs\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs)) =\n                      length txs\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs)) =\n                      length txs\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs)) =\n                      length txs", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [scnj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [scnj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [scnj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [scnj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [scnj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [scnj F]\n                         (length txs))", "by auto"], ["proof (state)\nthis:\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "define vs where vs: \"vs \\<equiv> \\<lambda> \\<phi>. getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\""], ["proof (state)\nthis:\n  vs \\<equiv>\n  \\<lambda>\\<phi>. getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence vss: \"\\<And>\\<phi>. vs \\<phi> = getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\""], ["proof (prove)\nusing this:\n  vs \\<equiv>\n  \\<lambda>\\<phi>. getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       vs \\<phi> = getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)", "by auto"], ["proof (state)\nthis:\n  vs ?\\<phi> = getFrN (map snd txs) (map fst txs) [?\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "{"], ["proof (state)\nthis:\n  vs ?\\<phi> = getFrN (map snd txs) (map fst txs) [?\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "fix \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "assume \"\\<phi> \\<in> F\""], ["proof (state)\nthis:\n  \\<phi> \\<in> F\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence \"\\<phi> \\<in> fmla\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> F\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> F\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "by auto"], ["proof (state)\nthis:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence \"set (vs \\<phi>)  \\<subseteq> var \\<and>\n    set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n    set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` (fst ` (set txs))) = {} \\<and>\n    set (vs \\<phi>) \\<inter> snd ` (set txs) = {} \\<and>\n    length (vs \\<phi>) = length txs \\<and>\n    distinct (vs \\<phi>)\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. set (vs \\<phi>) \\<subseteq> var \\<and>\n    set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n    set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n    set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n    length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. set (vs \\<phi>) \\<subseteq> var \\<and>\n    set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n    set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n    set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n    length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)", "unfolding vs"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))\n    \\<subseteq> var \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    Fvars \\<phi> =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    \\<Union> (FvarsT ` fst ` set txs) =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    snd ` set txs =\n    {} \\<and>\n    length (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) =\n    length txs \\<and>\n    distinct (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))", "using getFrN_Fvars[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n        getFrN_FvarsT[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n        getFrN_var[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n        getFrN_length[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" \"length txs\"]"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?\\<phi> \\<in> set [\\<phi>]\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    Fvars ?\\<phi> =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    FvarsT ?t =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    set (map snd txs) =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> length\n                     (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                       (length txs)) =\n                    length txs\n\ngoal (1 subgoal):\n 1. set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))\n    \\<subseteq> var \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    Fvars \\<phi> =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    \\<Union> (FvarsT ` fst ` set txs) =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    snd ` set txs =\n    {} \\<and>\n    length (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) =\n    length txs \\<and>\n    distinct (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))", "apply (intro conjI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs))\n                      \\<subseteq> var\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 4. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 5. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 6. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs))\n                      \\<subseteq> var", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 4. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 5. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 4. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}", "by fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "by auto"], ["proof (state)\nthis:\n  set (vs \\<phi>) \\<subseteq> var \\<and>\n  set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n  set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n  length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "}"], ["proof (state)\nthis:\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "note vs_facts = this"], ["proof (state)\nthis:\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have [simp]: \"\\<And> x f. f \\<in> F \\<Longrightarrow> x \\<in> set (vs f) \\<Longrightarrow> x \\<in> var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> F; x \\<in> set (vs f)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> var", "using vs_facts"], ["proof (prove)\nusing this:\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> F; x \\<in> set (vs f)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> var", "by (meson subsetD)"], ["proof (state)\nthis:\n  \\<lbrakk>?f \\<in> F; ?x \\<in> set (vs ?f)\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?tus = \"zip (map fst txs) us\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?uxs = \"zip (map Var us) (map snd txs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?tvs = \"\\<lambda> \\<phi>. zip (map fst txs) (vs \\<phi>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?vxs = \"\\<lambda> \\<phi>. zip (map Var (vs \\<phi>)) (map snd txs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?c = \"rawpsubst (scnj F) ?uxs\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have c: \"prv (eqv ?c\n                   (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "by (intro prv_rawpsubst_scnj) (auto intro!: rawpsubstT dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence \"prv (eqv (rawpsubst ?c ?tus)\n                  (rawpsubst (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)) ?tus))\""], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (rawpsubst\n            (scnj\n              ((\\<lambda>\\<phi>.\n                   rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n               F))\n            (zip (map fst txs) us)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (rawpsubst\n            (scnj\n              ((\\<lambda>\\<phi>.\n                   rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n               F))\n            (zip (map fst txs) us)))", "by (intro prv_eqv_rawpsubst) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "moreover"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have \"prv (eqv (rawpsubst (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)) ?tus)\n                 (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?tus) ` ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (scnj\n                 ((\\<lambda>\\<phi>.\n                      rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                  F))\n               (zip (map fst txs) us))\n          (scnj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (scnj\n                 ((\\<lambda>\\<phi>.\n                      rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                  F))\n               (zip (map fst txs) us))\n          (scnj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "by (intro prv_rawpsubst_scnj) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst\n             (scnj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "ultimately"], ["proof (chain)\npicking this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n  prv (eqv (rawpsubst\n             (scnj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))", "have 0: \"prv (eqv (rawpsubst ?c ?tus)\n                    (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?tus) ` ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F))))\""], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n  prv (eqv (rawpsubst\n             (scnj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (scnj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n  prv (eqv (rawpsubst\n             (scnj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (scnj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv (rawpsubst\n                        (rawpsubst (scnj F)\n                          (zip (map Var us) (map snd txs)))\n                        (zip (map fst txs) us))\n                   (rawpsubst\n                     (scnj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F))\n                     (zip (map fst txs) us)));\n     prv (eqv (rawpsubst\n                (scnj\n                  ((\\<lambda>\\<phi>.\n                       rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                   F))\n                (zip (map fst txs) us))\n           (scnj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst\n                                 (rawpsubst (scnj F)\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "by (rule prv_eqv_trans) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "moreover"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have \"prv (eqv (scnj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?tus) ` ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)))\n                 (scnj ((\\<lambda>\\<phi>. rawpsubst (rawpsubst \\<phi> (?vxs \\<phi>)) (?tvs \\<phi>)) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (scnj\n               ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n                (\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "using assms us_facts vs_facts"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (eqv (scnj\n               ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n                (\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "apply(intro prv_eqvI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> scnj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> scnj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n                      \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> scnj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> scnj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> scnj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))", "apply(rule prv_scnj_mono_imp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>2.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n        fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n        set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n        set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n        set us \\<inter> snd ` set txs = {}; length us = length txs;\n        distinct us;\n        \\<And>\\<phi>.\n           \\<phi> \\<in> F \\<Longrightarrow>\n           set (vs \\<phi>) \\<subseteq> var \\<and>\n           set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n           set (vs \\<phi>) \\<inter>\n           (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n           {} \\<and>\n           set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n           length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n        \\<phi>2 \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<phi>1\\<in>F.\n                            prv (imp (rawpsubst\n (rawpsubst \\<phi>1 (zip (map Var us) (map snd txs)))\n (zip (map fst txs) us))\n                                  (rawpsubst\n                                    (rawpsubst \\<phi>2\n(zip (map Var (vs \\<phi>2)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>2))))", "subgoal for \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<phi>1\\<in>F.\n                         prv (imp (rawpsubst\n                                    (rawpsubst \\<phi>1\n(zip (map Var us) (map snd txs)))\n                                    (zip (map fst txs) us))\n                               (rawpsubst\n                                 (rawpsubst \\<phi>\n                                   (zip (map Var (vs \\<phi>))\n                                     (map snd txs)))\n                                 (zip (map fst txs) (vs \\<phi>))))", "apply(rule bexI[of _ \\<phi>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> prv (imp (rawpsubst\n                                 (rawpsubst \\<phi>\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us))\n                            (rawpsubst\n                              (rawpsubst \\<phi>\n                                (zip (map Var (vs \\<phi>)) (map snd txs)))\n                              (zip (map fst txs) (vs \\<phi>))))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "apply(rule prv_imp_refl2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))", "by (rule rawpsubst_compose_freshVar2)\n              (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (scnj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "apply(rule prv_scnj_mono_imp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>2\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>1\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>2.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n        fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n        set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n        set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n        set us \\<inter> snd ` set txs = {}; length us = length txs;\n        distinct us;\n        \\<And>\\<phi>.\n           \\<phi> \\<in> F \\<Longrightarrow>\n           set (vs \\<phi>) \\<subseteq> var \\<and>\n           set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n           set (vs \\<phi>) \\<inter>\n           (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n           {} \\<and>\n           set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n           length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n        \\<phi>2 \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<phi>1\\<in>F.\n                            prv (imp (rawpsubst\n (rawpsubst \\<phi>1 (zip (map Var (vs \\<phi>1)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>1)))\n                                  (rawpsubst\n                                    (rawpsubst \\<phi>2\n(zip (map Var us) (map snd txs)))\n                                    (zip (map fst txs) us)))", "subgoal for \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<phi>1\\<in>F.\n                         prv (imp (rawpsubst\n                                    (rawpsubst \\<phi>1\n(zip (map Var (vs \\<phi>1)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>1)))\n                               (rawpsubst\n                                 (rawpsubst \\<phi>\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us)))", "apply(rule bexI[of _ \\<phi>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> prv (imp (rawpsubst\n                                 (rawpsubst \\<phi>\n                                   (zip (map Var (vs \\<phi>))\n                                     (map snd txs)))\n                                 (zip (map fst txs) (vs \\<phi>)))\n                            (rawpsubst\n                              (rawpsubst \\<phi>\n                                (zip (map Var us) (map snd txs)))\n                              (zip (map fst txs) us)))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "apply(rule prv_imp_refl2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n                      \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>)) =\n                      rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "apply (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>)) =\n                      rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)", "apply(rule rawpsubst_compose_freshVar2)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (map fst txs) \\<subseteq> trm\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (map snd txs) \\<subseteq> var\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> distinct (map snd txs)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<subseteq> var\n 6. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> distinct (vs \\<phi>)\n 7. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<inter> Fvars \\<phi> = {}\n 8. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<inter>\n                      \\<Union> (FvarsT ` set (map fst txs)) =\n                      {}\n 9. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<inter> set (map snd txs) = {}\n 10. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n      fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n      set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n      set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n      set us \\<inter> snd ` set txs = {}; length us = length txs;\n      distinct us;\n      \\<And>\\<phi>.\n         \\<phi> \\<in> F \\<Longrightarrow>\n         set (vs \\<phi>) \\<subseteq> var \\<and>\n         set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n         set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n         {} \\<and>\n         set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n         length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n      \\<phi> \\<in> F\\<rbrakk>\n     \\<Longrightarrow> set us \\<subseteq> var\nA total of 17 subgoals...", "apply (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (eqv (scnj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "ultimately"], ["proof (chain)\npicking this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  prv (eqv (scnj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))", "have \"prv (eqv (rawpsubst (rawpsubst (scnj F) ?uxs) ?tus)\n           (scnj ((\\<lambda>\\<phi>. rawpsubst (rawpsubst \\<phi> (?vxs \\<phi>)) (?tvs \\<phi>)) ` F)))\""], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  prv (eqv (scnj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  prv (eqv (scnj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv (rawpsubst\n                        (rawpsubst (scnj F)\n                          (zip (map Var us) (map snd txs)))\n                        (zip (map fst txs) us))\n                   (scnj\n                     ((\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F)));\n     prv (eqv (scnj\n                ((\\<lambda>\\<phi>.\n                     rawpsubst \\<phi> (zip (map fst txs) us)) `\n                 (\\<lambda>\\<phi>.\n                     rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                 F))\n           (scnj\n             ((\\<lambda>\\<phi>.\n                  rawpsubst\n                   (rawpsubst \\<phi>\n                     (zip (map Var (vs \\<phi>)) (map snd txs)))\n                   (zip (map fst txs) (vs \\<phi>))) `\n              F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst\n                                 (rawpsubst (scnj F)\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us))\n                            (scnj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))", "by (rule prv_eqv_trans) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "unfolding psubst_def"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (scnj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (scnj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (let xs = map snd txs; ts = map fst txs;\n                  us = getFrN xs ts [scnj F] (length xs)\n              in rawpsubst (rawpsubst (scnj F) (zip (map Var us) xs))\n                  (zip ts us))\n          (scnj\n            ((\\<lambda>\\<phi>.\n                 let xs = map snd txs; ts = map fst txs;\n                     us = getFrN xs ts [\\<phi>] (length xs)\n                 in rawpsubst (rawpsubst \\<phi> (zip (map Var us) xs))\n                     (zip ts us)) `\n             F)))", "by (simp add: Let_def us[symmetric] vss)"], ["proof (state)\nthis:\n  prv (eqv (psubst (scnj F) txs)\n        (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_psubst_scnj:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"snd ` set txs \\<subseteq> var\" \"fst ` set txs \\<subseteq> trm\"\n    and \"distinct (map snd txs)\"\n  shows \"prv (imp (psubst (scnj F) txs) (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "using prv_psubst_scnj[OF assms] assms"], ["proof (prove)\nusing this:\n  prv (eqv (psubst (scnj F) txs)\n        (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. prv (imp (psubst (scnj F) txs)\n          (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "apply(intro prv_imp_eqvEL)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>prv (eqv (psubst (scnj F) txs)\n                   (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> psubst (scnj F) txs \\<in> fmla\n 2. \\<lbrakk>prv (eqv (psubst (scnj F) txs)\n                   (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)\n                      \\<in> fmla\n 3. \\<lbrakk>prv (eqv (psubst (scnj F) txs)\n                   (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (psubst (scnj F) txs)\n                            (scnj\n                              ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "by auto"], ["", "lemma prv_psubst_scnj_imp:\n  assumes \"F \\<subseteq> fmla\" \"finite F\" \"snd ` set txs \\<subseteq> var\" \"fst ` set txs \\<subseteq> trm\"\n    and \"distinct (map snd txs)\"\n  shows \"prv (imp (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)) (psubst (scnj F) txs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F))\n          (psubst (scnj F) txs))", "using prv_psubst_scnj[OF assms] assms"], ["proof (prove)\nusing this:\n  prv (eqv (psubst (scnj F) txs)\n        (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. prv (imp (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F))\n          (psubst (scnj F) txs))", "apply(intro prv_imp_eqvER)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>prv (eqv (psubst (scnj F) txs)\n                   (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> psubst (scnj F) txs \\<in> fmla\n 2. \\<lbrakk>prv (eqv (psubst (scnj F) txs)\n                   (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)\n                      \\<in> fmla\n 3. \\<lbrakk>prv (eqv (psubst (scnj F) txs)\n                   (scnj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs)\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (psubst (scnj F) txs)\n                            (scnj\n                              ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "by auto"], ["", "subsection \\<open>Consistency and $\\omega$-consistency\\<close>"], ["", "definition consistent :: bool where\n  \"consistent \\<equiv> \\<not> prv fls\""], ["", "lemma consistent_def2: \"consistent \\<longleftrightarrow> (\\<exists>\\<phi> \\<in> fmla. \\<not> prv \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent = (\\<exists>\\<phi>\\<in>fmla. \\<not> prv \\<phi>)", "unfolding consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> prv fls) = (\\<exists>\\<phi>\\<in>fmla. \\<not> prv \\<phi>)", "using prv_expl"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; prv fls\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<phi>\n\ngoal (1 subgoal):\n 1. (\\<not> prv fls) = (\\<exists>\\<phi>\\<in>fmla. \\<not> prv \\<phi>)", "by blast"], ["", "lemma consistent_def3: \"consistent \\<longleftrightarrow> (\\<forall>\\<phi> \\<in> fmla. \\<not> (prv \\<phi> \\<and> prv (neg \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent =\n    (\\<forall>\\<phi>\\<in>fmla. \\<not> (prv \\<phi> \\<and> prv (neg \\<phi>)))", "unfolding consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> prv fls) =\n    (\\<forall>\\<phi>\\<in>fmla. \\<not> (prv \\<phi> \\<and> prv (neg \\<phi>)))", "using prv_neg_fls neg_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; prv ?\\<phi>; prv (neg ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv fls\n  neg ?\\<phi> = imp ?\\<phi> fls\n\ngoal (1 subgoal):\n 1. (\\<not> prv fls) =\n    (\\<forall>\\<phi>\\<in>fmla. \\<not> (prv \\<phi> \\<and> prv (neg \\<phi>)))", "by auto"], ["", "(* Omega-consistency: *)"], ["", "definition \\<omega>consistent :: bool where\n  \"\\<omega>consistent \\<equiv>\n \\<forall> \\<phi> \\<in> fmla. \\<forall> x \\<in> var. Fvars \\<phi> = {x} \\<longrightarrow>\n   (\\<forall> n \\<in> num. prv (neg (subst \\<phi> n x)))\n   \\<longrightarrow>\n   \\<not> prv (neg (neg (exi x \\<phi>)))\""], ["", "text \\<open>The above particularly strong version of @{term \\<omega>consistent} is used for the sake of working without\nassuming classical logic. It of course implies the more standard formulations for classical logic:\\<close>"], ["", "definition \\<omega>consistentStd1 :: bool where\n  \"\\<omega>consistentStd1 \\<equiv>\n \\<forall> \\<phi> \\<in> fmla. \\<forall> x \\<in> var. Fvars \\<phi> = {x} \\<longrightarrow>\n    (\\<forall> n \\<in> num. prv (neg (subst \\<phi> n x))) \\<longrightarrow> \\<not> prv (exi x \\<phi>)\""], ["", "definition \\<omega>consistentStd2 :: bool where\n  \"\\<omega>consistentStd2 \\<equiv>\n \\<forall> \\<phi> \\<in> fmla. \\<forall> x \\<in> var. Fvars \\<phi> = {x} \\<longrightarrow>\n   (\\<forall> n \\<in> num. prv (subst \\<phi> n x)) \\<longrightarrow> \\<not> prv (exi x (neg \\<phi>))\""], ["", "lemma \\<omega>consistent_impliesStd1:\n  \"\\<omega>consistent \\<Longrightarrow>\n \\<omega>consistentStd1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd1", "unfolding \\<omega>consistent_def \\<omega>consistentStd1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (neg (neg (exi x \\<phi>))) \\<Longrightarrow>\n    \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (exi x \\<phi>)", "using prv_neg_neg"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; prv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv (neg (neg ?\\<phi>))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (neg (neg (exi x \\<phi>))) \\<Longrightarrow>\n    \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (exi x \\<phi>)", "by blast"], ["", "lemma \\<omega>consistent_impliesStd2:\n  \"\\<omega>consistent \\<Longrightarrow>\n \\<omega>consistentStd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd2", "by (auto dest!: \\<omega>consistent_impliesStd1 bspec[of _ _ \"neg _\"]\n      simp: \\<omega>consistentStd1_def \\<omega>consistentStd2_def prv_neg_neg)"], ["", "text \\<open>In the presence of classical logic deduction, the stronger condition is\nequivalent to the standard ones:\\<close>"], ["", "lemma \\<omega>consistent_iffStd1:\n  assumes \"\\<And> \\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (neg (neg \\<phi>)) \\<phi>)\"\n  shows \"\\<omega>consistent \\<longleftrightarrow> \\<omega>consistentStd1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistent = \\<omega>consistentStd1", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd1\n 2. \\<omega>consistentStd1 \\<Longrightarrow> \\<omega>consistent", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd1", "using \\<omega>consistent_impliesStd1"], ["proof (prove)\nusing this:\n  \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd1\n\ngoal (1 subgoal):\n 1. \\<omega>consistent \\<Longrightarrow> \\<omega>consistentStd1", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistentStd1 \\<Longrightarrow> \\<omega>consistent", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistentStd1 \\<Longrightarrow> \\<omega>consistent", "unfolding \\<omega>consistentStd1_def \\<omega>consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (exi x \\<phi>) \\<Longrightarrow>\n    \\<forall>\\<phi>\\<in>fmla.\n       \\<forall>x\\<in>var.\n          Fvars \\<phi> = {x} \\<longrightarrow>\n          (\\<forall>n\\<in>num.\n              prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n          \\<not> prv (neg (neg (exi x \\<phi>)))", "by (meson assms exi neg prv_imp_mp)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \\<omega>consistent_iffStd2:\n  assumes \"\\<And> \\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (neg (neg \\<phi>)) \\<phi>)\"\n  shows \"\\<omega>consistent \\<longleftrightarrow> \\<omega>consistentStd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>consistent = \\<omega>consistentStd2", "unfolding \\<omega>consistent_iffStd1[OF assms, simplified]\n    \\<omega>consistentStd1_def \\<omega>consistentStd2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<phi>\\<in>fmla.\n        \\<forall>x\\<in>var.\n           Fvars \\<phi> = {x} \\<longrightarrow>\n           (\\<forall>n\\<in>num.\n               prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n           \\<not> prv (exi x \\<phi>)) =\n    (\\<forall>\\<phi>\\<in>fmla.\n        \\<forall>x\\<in>var.\n           Fvars \\<phi> = {x} \\<longrightarrow>\n           (\\<forall>n\\<in>num. prv (subst \\<phi> n x)) \\<longrightarrow>\n           \\<not> prv (exi x (neg \\<phi>)))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<forall>\\<phi>\\<in>fmla.\n                   \\<forall>x\\<in>var.\n                      Fvars \\<phi> = {x} \\<longrightarrow>\n                      (\\<forall>n\\<in>num.\n                          prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n                      \\<not> prv (exi x \\<phi>);\n        \\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (subst \\<phi> n x);\n        prv (exi x (neg \\<phi>))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<phi> x.\n       \\<lbrakk>\\<forall>\\<phi>\\<in>fmla.\n                   \\<forall>x\\<in>var.\n                      Fvars \\<phi> = {x} \\<longrightarrow>\n                      (\\<forall>n\\<in>num.\n                          prv (subst \\<phi> n x)) \\<longrightarrow>\n                      \\<not> prv (exi x (neg \\<phi>));\n        \\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x));\n        prv (exi x \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> False", "subgoal for \\<phi> x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<phi>\\<in>fmla.\n                \\<forall>x\\<in>var.\n                   Fvars \\<phi> = {x} \\<longrightarrow>\n                   (\\<forall>n\\<in>num.\n                       prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n                   \\<not> prv (exi x \\<phi>);\n     \\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n     \\<forall>n\\<in>num. prv (subst \\<phi> n x);\n     prv (exi x (neg \\<phi>))\\<rbrakk>\n    \\<Longrightarrow> False", "by (auto simp: prv_neg_neg dest: bspec[of _ _ \"neg _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> x.\n       \\<lbrakk>\\<forall>\\<phi>\\<in>fmla.\n                   \\<forall>x\\<in>var.\n                      Fvars \\<phi> = {x} \\<longrightarrow>\n                      (\\<forall>n\\<in>num.\n                          prv (subst \\<phi> n x)) \\<longrightarrow>\n                      \\<not> prv (exi x (neg \\<phi>));\n        \\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n        \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x));\n        prv (exi x \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> False", "subgoal for \\<phi> x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<phi>\\<in>fmla.\n                \\<forall>x\\<in>var.\n                   Fvars \\<phi> = {x} \\<longrightarrow>\n                   (\\<forall>n\\<in>num.\n                       prv (subst \\<phi> n x)) \\<longrightarrow>\n                   \\<not> prv (exi x (neg \\<phi>));\n     \\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n     \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x));\n     prv (exi x \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> False", "using  prv_exi_congW prv_imp_neg_fls"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?x \\<in> var;\n   prv (imp ?\\<phi> ?\\<chi>); prv (exi ?x ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (exi ?x ?\\<chi>)\n  ?\\<phi> \\<in> fmla \\<Longrightarrow>\n  prv (imp ?\\<phi> (imp (neg ?\\<phi>) fls))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<phi>\\<in>fmla.\n                \\<forall>x\\<in>var.\n                   Fvars \\<phi> = {x} \\<longrightarrow>\n                   (\\<forall>n\\<in>num.\n                       prv (subst \\<phi> n x)) \\<longrightarrow>\n                   \\<not> prv (exi x (neg \\<phi>));\n     \\<phi> \\<in> fmla; x \\<in> var; Fvars \\<phi> = {x};\n     \\<forall>n\\<in>num. prv (neg (subst \\<phi> n x));\n     prv (exi x \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> False", "by (auto simp: neg_def prv_neg_neg dest!: bspec[of _ _ \"neg _\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text \\<open>$\\omega$-consistency implies consistency:\\<close>"], ["", "lemma \\<omega>consistentStd1_implies_consistent:\n  assumes \"\\<omega>consistentStd1\"\n  shows \"consistent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent", "unfolding consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prv fls", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "assume pf: \"prv fls\""], ["proof (state)\nthis:\n  prv fls\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  prv fls", "obtain x where x: \"x \\<in> var\" \"x \\<notin> Fvars fls\""], ["proof (prove)\nusing this:\n  prv fls\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> var; x \\<notin> Fvars fls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_Fvars getFresh"], ["proof (prove)\nusing this:\n  prv fls\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> finite (Fvars ?\\<phi>)\n  finite ?V \\<Longrightarrow>\n  getFresh ?V \\<in> var \\<and> getFresh ?V \\<notin> ?V\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> var; x \\<notin> Fvars fls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<notin> Fvars fls\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "let ?fls = \"cnj (fls) (eql (Var x) (Var x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "have 0: \"\\<forall> n \\<in> num. prv (neg (subst ?fls n x))\" and 1: \"prv (exi x fls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>num.\n       prv (neg (subst (cnj fls (eql (Var x) (Var x))) n x)) &&&\n    prv (exi x fls)", "using x fls"], ["proof (prove)\nusing this:\n  x \\<in> var\n  x \\<notin> Fvars fls\n  fls \\<in> fmla\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>num.\n       prv (neg (subst (cnj fls (eql (Var x) (Var x))) n x)) &&&\n    prv (exi x fls)", "by (auto simp: pf prv_expl)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>num. prv (neg (subst (cnj fls (eql (Var x) (Var x))) n x))\n  prv (exi x fls)\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "have 2: \"\\<not> prv (exi x ?fls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prv (exi x (cnj fls (eql (Var x) (Var x))))", "using 0 fls x assms"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>num. prv (neg (subst (cnj fls (eql (Var x) (Var x))) n x))\n  fls \\<in> fmla\n  x \\<in> var\n  x \\<notin> Fvars fls\n  \\<omega>consistentStd1\n\ngoal (1 subgoal):\n 1. \\<not> prv (exi x (cnj fls (eql (Var x) (Var x))))", "unfolding \\<omega>consistentStd1_def"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>num. prv (neg (subst (cnj fls (eql (Var x) (Var x))) n x))\n  fls \\<in> fmla\n  x \\<in> var\n  x \\<notin> Fvars fls\n  \\<forall>\\<phi>\\<in>fmla.\n     \\<forall>x\\<in>var.\n        Fvars \\<phi> = {x} \\<longrightarrow>\n        (\\<forall>n\\<in>num. prv (neg (subst \\<phi> n x))) \\<longrightarrow>\n        \\<not> prv (exi x \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<not> prv (exi x (cnj fls (eql (Var x) (Var x))))", "by simp"], ["proof (state)\nthis:\n  \\<not> prv (exi x (cnj fls (eql (Var x) (Var x))))\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using 1 2 consistent_def consistent_def2 pf x(1)"], ["proof (prove)\nusing this:\n  prv (exi x fls)\n  \\<not> prv (exi x (cnj fls (eql (Var x) (Var x))))\n  consistent \\<equiv> \\<not> prv fls\n  consistent = (\\<exists>\\<phi>\\<in>fmla. \\<not> prv \\<phi>)\n  prv fls\n  x \\<in> var\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<omega>consistentStd2_implies_consistent:\n  assumes \"\\<omega>consistentStd2\"\n  shows \"consistent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent", "unfolding consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prv fls", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "assume pf: \"prv fls\""], ["proof (state)\nthis:\n  prv fls\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  prv fls", "obtain x where x: \"x \\<in> var\" \"x \\<notin> Fvars fls\""], ["proof (prove)\nusing this:\n  prv fls\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> var; x \\<notin> Fvars fls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_Fvars getFresh"], ["proof (prove)\nusing this:\n  prv fls\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> finite (Fvars ?\\<phi>)\n  finite ?V \\<Longrightarrow>\n  getFresh ?V \\<in> var \\<and> getFresh ?V \\<notin> ?V\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> var; x \\<notin> Fvars fls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> var\n  x \\<notin> Fvars fls\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "let ?fls = \"cnj (fls) (eql (Var x) (Var x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "have 0: \"\\<forall> n \\<in> num. prv (subst ?fls n x)\" and 1: \"prv (exi x (neg ?fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>num. prv (subst (cnj fls (eql (Var x) (Var x))) n x) &&&\n    prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))", "using x fls"], ["proof (prove)\nusing this:\n  x \\<in> var\n  x \\<notin> Fvars fls\n  fls \\<in> fmla\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>num. prv (subst (cnj fls (eql (Var x) (Var x))) n x) &&&\n    prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))", "by (auto simp: pf prv_expl)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>num. prv (subst (cnj fls (eql (Var x) (Var x))) n x)\n  prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "have 2: \"\\<not> prv (exi x (neg ?fls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))", "using 0 fls x assms"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>num. prv (subst (cnj fls (eql (Var x) (Var x))) n x)\n  fls \\<in> fmla\n  x \\<in> var\n  x \\<notin> Fvars fls\n  \\<omega>consistentStd2\n\ngoal (1 subgoal):\n 1. \\<not> prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))", "unfolding \\<omega>consistentStd2_def"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>num. prv (subst (cnj fls (eql (Var x) (Var x))) n x)\n  fls \\<in> fmla\n  x \\<in> var\n  x \\<notin> Fvars fls\n  \\<forall>\\<phi>\\<in>fmla.\n     \\<forall>x\\<in>var.\n        Fvars \\<phi> = {x} \\<longrightarrow>\n        (\\<forall>n\\<in>num. prv (subst \\<phi> n x)) \\<longrightarrow>\n        \\<not> prv (exi x (neg \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<not> prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))", "by auto"], ["proof (state)\nthis:\n  \\<not> prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))\n\ngoal (1 subgoal):\n 1. prv fls \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using 1 2"], ["proof (prove)\nusing this:\n  prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))\n  \\<not> prv (exi x (neg (cnj fls (eql (Var x) (Var x)))))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary \\<omega>consistent_implies_consistent:\n  assumes \"\\<omega>consistent\"\n  shows \"consistent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent", "by (simp add: \\<omega>consistentStd2_implies_consistent \\<omega>consistent_impliesStd2 assms)"], ["", "end \\<comment> \\<open>context @{locale Deduct_with_False}\\<close>"], ["", "section \\<open>Deduction Considering False and Disjunction\\<close>"], ["", "locale Deduct_with_False_Disj =\n  Syntax_with_Connectives_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  +\n  Deduct_with_False\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  num\n  prv\n  for\n    var :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\n    and Var FvarsT substT Fvars subst\n    and eql cnj imp all exi\n    and fls\n    and dsj\n    and num\n    and prv\n    +\n  assumes\n    prv_dsj_impL:\n    \"\\<And> \\<phi> \\<chi>. \\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow>\n  prv (imp \\<phi> (dsj \\<phi> \\<chi>))\"\n    and\n    prv_dsj_impR:\n    \"\\<And> \\<phi> \\<chi>. \\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow>\n  prv (imp \\<chi> (dsj \\<phi> \\<chi>))\"\n    and\n    prv_imp_dsjE:\n    \"\\<And> \\<phi> \\<chi> \\<psi>. \\<phi> \\<in> fmla \\<Longrightarrow> \\<chi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow>\n  prv (imp (imp \\<phi> \\<psi>) (imp (imp \\<chi> \\<psi>) (imp (dsj \\<phi> \\<chi>) \\<psi>)))\"\nbegin"], ["", "lemma prv_imp_dsjEE:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n  assumes \" prv (imp \\<phi> \\<psi>)\" and \"prv (imp \\<chi> \\<psi>)\"\n  shows \"prv (imp (dsj \\<phi> \\<chi>) \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> \\<chi>) \\<psi>)", "by (metis assms dsj imp prv_imp_dsjE prv_imp_mp)"], ["", "lemma prv_dsj_cases:\n  assumes \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\" \"\\<chi> \\<in> fmla\"\n    and \"prv (dsj \\<phi>1 \\<phi>2)\" and \"prv (imp \\<phi>1 \\<chi>)\" and \"prv (imp \\<phi>2 \\<chi>)\"\n  shows \"prv \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<chi>", "by (meson assms  dsj prv_imp_dsjEE prv_imp_mp)"], ["", "subsection \\<open>Disjunction vs. disjunction\\<close>"], ["", "lemma prv_dsj_com_imp:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n  shows \"prv (imp (dsj \\<phi> \\<chi>) (dsj \\<chi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> \\<chi>) (dsj \\<chi> \\<phi>))", "by (metis \\<chi> \\<phi> dsj imp prv_dsj_impL prv_dsj_impR prv_imp_dsjE prv_imp_mp)"], ["", "lemma prv_dsj_com:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\"\n  shows \"prv (eqv (dsj \\<phi> \\<chi>) (dsj \\<chi> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (dsj \\<phi> \\<chi>) (dsj \\<chi> \\<phi>))", "by (simp add: prv_dsj_com_imp prv_eqvI)"], ["", "lemma prv_dsj_assoc_imp1:\n  assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n  shows \"prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>)) (dsj (dsj \\<phi> \\<chi>) \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "have f1: \"\\<And>f fa fb. f \\<notin> fmla \\<or> \\<not> prv (imp fa fb) \\<or> fb \\<notin> fmla \\<or> fa \\<notin> fmla \\<or> prv (imp fa (dsj fb f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f fa fb.\n       f \\<notin> fmla \\<or>\n       \\<not> prv (imp fa fb) \\<or>\n       fb \\<notin> fmla \\<or> fa \\<notin> fmla \\<or> prv (imp fa (dsj fb f))", "by (meson dsj prv_dsj_impL prv_prv_imp_trans)"], ["proof (state)\nthis:\n  ?f \\<notin> fmla \\<or>\n  \\<not> prv (imp ?fa ?fb) \\<or>\n  ?fb \\<notin> fmla \\<or> ?fa \\<notin> fmla \\<or> prv (imp ?fa (dsj ?fb ?f))\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "have \"prv (imp \\<phi> (dsj \\<phi> \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (dsj \\<phi> \\<chi>))", "by (simp add: prv_dsj_impL)"], ["proof (state)\nthis:\n  prv (imp \\<phi> (dsj \\<phi> \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "then"], ["proof (chain)\npicking this:\n  prv (imp \\<phi> (dsj \\<phi> \\<chi>))", "show ?thesis"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> (dsj \\<phi> \\<chi>))\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "using f1 \\<chi> \\<phi> \\<psi> dsj prv_dsj_impR prv_imp_dsjEE"], ["proof (prove)\nusing this:\n  prv (imp \\<phi> (dsj \\<phi> \\<chi>))\n  ?f \\<notin> fmla \\<or>\n  \\<not> prv (imp ?fa ?fb) \\<or>\n  ?fb \\<notin> fmla \\<or> ?fa \\<notin> fmla \\<or> prv (imp ?fa (dsj ?fb ?f))\n  \\<chi> \\<in> fmla\n  \\<phi> \\<in> fmla\n  \\<psi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> dsj ?\\<phi> ?\\<chi> \\<in> fmla\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (dsj ?\\<phi> ?\\<chi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<psi>); prv (imp ?\\<chi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (dsj ?\\<phi> ?\\<chi>) ?\\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "by presburger"], ["proof (state)\nthis:\n  prv (imp (dsj \\<phi> (dsj \\<chi> \\<psi>))\n        (dsj (dsj \\<phi> \\<chi>) \\<psi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_dsj_assoc_imp2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>) (dsj \\<phi> (dsj \\<chi> \\<psi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n          (dsj \\<phi> (dsj \\<chi> \\<psi>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n          (dsj \\<phi> (dsj \\<chi> \\<psi>)))", "have f1: \"\\<forall>f fa fb. (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f (dsj fb fa))) \\<or> f \\<notin> fmla) \\<or> fa \\<notin> fmla) \\<or> fb \\<notin> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f fa fb.\n       (((prv (imp f (dsj fa fb)) \\<or>\n          \\<not> prv (imp f (dsj fb fa))) \\<or>\n         f \\<notin> fmla) \\<or>\n        fa \\<notin> fmla) \\<or>\n       fb \\<notin> fmla", "by (meson dsj prv_dsj_com_imp prv_prv_imp_trans)"], ["proof (state)\nthis:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f (dsj fb fa))) \\<or>\n       f \\<notin> fmla) \\<or>\n      fa \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n          (dsj \\<phi> (dsj \\<chi> \\<psi>)))", "have \"\\<forall>f fa fb. (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f fa)) \\<or> fa \\<notin> fmla) \\<or> f \\<notin> fmla) \\<or> fb \\<notin> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f fa fb.\n       (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f fa)) \\<or>\n         fa \\<notin> fmla) \\<or>\n        f \\<notin> fmla) \\<or>\n       fb \\<notin> fmla", "by (meson dsj prv_dsj_impL prv_prv_imp_trans)"], ["proof (state)\nthis:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n          (dsj \\<phi> (dsj \\<chi> \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n          (dsj \\<phi> (dsj \\<chi> \\<psi>)))", "using f1"], ["proof (prove)\nusing this:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fa fb)) \\<or> \\<not> prv (imp f (dsj fb fa))) \\<or>\n       f \\<notin> fmla) \\<or>\n      fa \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n          (dsj \\<phi> (dsj \\<chi> \\<psi>)))", "by (metis \\<chi> \\<phi> \\<psi> dsj prv_dsj_impR prv_imp_dsjEE)"], ["proof (state)\nthis:\n  prv (imp (dsj (dsj \\<phi> \\<chi>) \\<psi>)\n        (dsj \\<phi> (dsj \\<chi> \\<psi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_dsj_assoc:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>[simp]: \"\\<chi> \\<in> fmla\" and \\<psi>[simp]: \"\\<psi> \\<in> fmla\"\n shows \"prv (eqv (dsj \\<phi> (dsj \\<chi> \\<psi>)) (dsj (dsj \\<phi> \\<chi>) \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (dsj \\<phi> (dsj \\<chi> \\<psi>))\n          (dsj (dsj \\<phi> \\<chi>) \\<psi>))", "by (simp add: prv_dsj_assoc_imp1 prv_dsj_assoc_imp2 prv_eqvI)"], ["", "lemma prv_dsj_com_imp3:\nassumes \"\\<phi>1 \\<in> fmla\" \"\\<phi>2 \\<in> fmla\" \"\\<phi>3 \\<in> fmla\"\nshows \"prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n                (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n          (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n          (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))", "have \"\\<forall>f fa fb. (((prv (imp f (dsj fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or> fa \\<notin> fmla) \\<or> f \\<notin> fmla) \\<or> fb \\<notin> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f fa fb.\n       (((prv (imp f (dsj fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n         fa \\<notin> fmla) \\<or>\n        f \\<notin> fmla) \\<or>\n       fb \\<notin> fmla", "by (meson dsj prv_dsj_impR prv_prv_imp_trans)"], ["proof (state)\nthis:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n          (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f fa fb.\n     (((prv (imp f (dsj fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n          (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))", "by (meson assms(1) assms(2) assms(3) dsj prv_dsj_impL prv_dsj_impR prv_imp_dsjEE)"], ["proof (state)\nthis:\n  prv (imp (dsj \\<phi>1 (dsj \\<phi>2 \\<phi>3))\n        (dsj \\<phi>2 (dsj \\<phi>1 \\<phi>3)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_dsj_mono:\n\"\\<phi>1 \\<in> fmla \\<Longrightarrow> \\<phi>2 \\<in> fmla \\<Longrightarrow> \\<chi>1 \\<in> fmla \\<Longrightarrow> \\<chi>2 \\<in> fmla \\<Longrightarrow>\nprv (imp \\<phi>1 \\<chi>1) \\<Longrightarrow> prv (imp \\<phi>2 \\<chi>2) \\<Longrightarrow> prv (imp (dsj \\<phi>1 \\<phi>2) (dsj \\<chi>1 \\<chi>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>1 \\<in> fmla; \\<phi>2 \\<in> fmla; \\<chi>1 \\<in> fmla;\n     \\<chi>2 \\<in> fmla; prv (imp \\<phi>1 \\<chi>1);\n     prv (imp \\<phi>2 \\<chi>2)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (dsj \\<phi>1 \\<phi>2) (dsj \\<chi>1 \\<chi>2))", "by (meson dsj prv_dsj_impL prv_dsj_impR prv_imp_dsjEE prv_prv_imp_trans)"], ["", "subsection \\<open>Disjunction vs. conjunction\\<close>"], ["", "lemma prv_cnj_dsj_distrib1:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)) (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj \\<phi> (dsj \\<chi>1 \\<chi>2))\n          (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))", "by (simp add: prv_cnj_imp prv_cnj_imp_monoR2 prv_dsj_impL prv_dsj_impR prv_imp_com prv_imp_dsjEE)"], ["", "lemma prv_cnj_dsj_distrib2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)) (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2))\n          (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)))", "by (simp add: prv_cnj_mono prv_dsj_impL prv_dsj_impR prv_imp_dsjEE prv_imp_refl)"], ["", "lemma prv_cnj_dsj_distrib:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (eqv (cnj \\<phi> (dsj \\<chi>1 \\<chi>2)) (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (cnj \\<phi> (dsj \\<chi>1 \\<chi>2))\n          (dsj (cnj \\<phi> \\<chi>1) (cnj \\<phi> \\<chi>2)))", "by (simp add: prv_cnj_dsj_distrib1 prv_cnj_dsj_distrib2 prv_eqvI)"], ["", "lemma prv_dsj_cnj_distrib1:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)) (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi> (cnj \\<chi>1 \\<chi>2))\n          (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)))", "by (simp add: prv_cnj_mono prv_dsj_impL prv_dsj_impR prv_imp_cnj prv_imp_dsjEE)"], ["", "lemma prv_dsj_cnj_distrib2:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)) (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2))\n          (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2))\n          (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))", "have \"\\<forall>f fa fb. (((prv (imp f (imp fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or> fa \\<notin> fmla) \\<or> f \\<notin> fmla) \\<or> fb \\<notin> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f fa fb.\n       (((prv (imp f (imp fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n         fa \\<notin> fmla) \\<or>\n        f \\<notin> fmla) \\<or>\n       fb \\<notin> fmla", "by (meson imp prv_imp_imp_triv prv_prv_imp_trans)"], ["proof (state)\nthis:\n  \\<forall>f fa fb.\n     (((prv (imp f (imp fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2))\n          (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa fb.\n     (((prv (imp f (imp fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f fa fb.\n     (((prv (imp f (imp fb fa)) \\<or> \\<not> prv (imp f fa)) \\<or>\n       fa \\<notin> fmla) \\<or>\n      f \\<notin> fmla) \\<or>\n     fb \\<notin> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2))\n          (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))", "by (metis \\<chi>1 \\<chi>2 \\<phi> cnj dsj imp prv_cnj_imp prv_cnj_imp_monoR2 prv_dsj_impL prv_dsj_impR\n        prv_imp_com prv_imp_dsjEE)"], ["proof (state)\nthis:\n  prv (imp (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2))\n        (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_dsj_cnj_distrib:\n assumes \\<phi>[simp]: \"\\<phi> \\<in> fmla\" and \\<chi>1[simp]: \"\\<chi>1 \\<in> fmla\" and \\<chi>2[simp]: \"\\<chi>2 \\<in> fmla\"\n shows \"prv (eqv (dsj \\<phi> (cnj \\<chi>1 \\<chi>2)) (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (dsj \\<phi> (cnj \\<chi>1 \\<chi>2))\n          (cnj (dsj \\<phi> \\<chi>1) (dsj \\<phi> \\<chi>2)))", "by (simp add: prv_dsj_cnj_distrib1 prv_dsj_cnj_distrib2 prv_eqvI)"], ["", "subsection \\<open>Disjunction vs. True and False\\<close>"], ["", "lemma prv_dsjR_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj fls \\<phi>) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj fls \\<phi>) \\<phi>)", "by (simp add: prv_dsj_impR prv_eqvI prv_imp_dsjEE prv_imp_refl)"], ["", "lemma prv_dsjL_fls: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj \\<phi> fls) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj \\<phi> fls) \\<phi>)", "by (simp add: prv_dsj_impL prv_eqvI prv_imp_dsjEE prv_imp_refl)"], ["", "lemma prv_dsjR_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj tru \\<phi>) tru)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj tru \\<phi>) tru)", "by (simp add: prv_dsj_impL prv_eqvI prv_imp_tru)"], ["", "lemma prv_dsjL_tru: \"\\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj \\<phi> tru) tru)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (eqv (dsj \\<phi> tru) tru)", "by (simp add: prv_dsj_impR prv_eqvI prv_imp_tru)"], ["", "subsection \\<open>Set-based disjunctions\\<close>"], ["", "text \\<open>Just like for conjunctions, these are based on properties of the auxiliary\nlist disjunctions.\\<close>"], ["", "lemma prv_imp_ldsj_in:\n  assumes \"set \\<phi>s \\<subseteq> fmla\"\n  and \"\\<phi> \\<in> set \\<phi>s\"\n  shows \"prv (imp \\<phi> (ldsj \\<phi>s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj \\<phi>s))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj \\<phi>s))", "have \"\\<phi> \\<in> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>s \\<subseteq> fmla\n  \\<phi> \\<in> set \\<phi>s\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "by auto"], ["proof (state)\nthis:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj \\<phi>s))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj \\<phi>s))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  set \\<phi>s \\<subseteq> fmla\n  \\<phi> \\<in> set \\<phi>s\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj \\<phi>s))", "apply(induct \\<phi>s arbitrary: \\<phi>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n        \\<phi> \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> prv (imp \\<phi> (ldsj []))\n 2. \\<And>a \\<phi>s \\<phi>.\n       \\<lbrakk>\\<And>\\<phi>.\n                   \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>s \\<subseteq> fmla;\n                    \\<phi> \\<in> set \\<phi>s\\<rbrakk>\n                   \\<Longrightarrow> prv (imp \\<phi> (ldsj \\<phi>s));\n        \\<phi> \\<in> fmla; set (a # \\<phi>s) \\<subseteq> fmla;\n        \\<phi> \\<in> set (a # \\<phi>s)\\<rbrakk>\n       \\<Longrightarrow> prv (imp \\<phi> (ldsj (a # \\<phi>s)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi>_ \\<in> fmla; set [] \\<subseteq> fmla;\n     \\<phi>_ \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>_ (ldsj []))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<phi>s \\<phi>.\n       \\<lbrakk>\\<And>\\<phi>.\n                   \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>s \\<subseteq> fmla;\n                    \\<phi> \\<in> set \\<phi>s\\<rbrakk>\n                   \\<Longrightarrow> prv (imp \\<phi> (ldsj \\<phi>s));\n        \\<phi> \\<in> fmla; set (a # \\<phi>s) \\<subseteq> fmla;\n        \\<phi> \\<in> set (a # \\<phi>s)\\<rbrakk>\n       \\<Longrightarrow> prv (imp \\<phi> (ldsj (a # \\<phi>s)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<phi>.\n                \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>s_ \\<subseteq> fmla;\n                 \\<phi> \\<in> set \\<phi>s_\\<rbrakk>\n                \\<Longrightarrow> prv (imp \\<phi> (ldsj \\<phi>s_));\n     \\<phi>_ \\<in> fmla; set (a_ # \\<phi>s_) \\<subseteq> fmla;\n     \\<phi>_ \\<in> set (a_ # \\<phi>s_)\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>_ (ldsj (a_ # \\<phi>s_)))", "by (simp add: prv_dsj_impL)\n    (meson dsj ldsj prv_dsj_impL prv_dsj_impR prv_prv_imp_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (imp \\<phi> (ldsj \\<phi>s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_imp_ldsj:\nassumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\nand \"\\<phi> \\<in> set \\<phi>s\" and \"prv (imp \\<chi> \\<phi>)\"\nshows \"prv (imp \\<chi> (ldsj \\<phi>s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (ldsj \\<phi>s))", "using assms ldsj prv_imp_ldsj_in prv_prv_imp_trans"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  set \\<phi>s \\<subseteq> fmla\n  \\<phi> \\<in> set \\<phi>s\n  prv (imp \\<chi> \\<phi>)\n  set ?\\<phi>s \\<subseteq> fmla \\<Longrightarrow> ldsj ?\\<phi>s \\<in> fmla\n  \\<lbrakk>set ?\\<phi>s \\<subseteq> fmla;\n   ?\\<phi> \\<in> set ?\\<phi>s\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (ldsj ?\\<phi>s))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla; ?\\<psi> \\<in> fmla;\n   prv (imp ?\\<phi> ?\\<chi>); prv (imp ?\\<chi> ?\\<psi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> ?\\<psi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (ldsj \\<phi>s))", "by blast"], ["", "lemma prv_ldsj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"set \\<phi>s \\<subseteq> fmla\"\n  and \"\\<And>\\<phi>. \\<phi> \\<in> set \\<phi>s \\<Longrightarrow> prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (ldsj \\<phi>s) \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>s) \\<chi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  set \\<phi>s \\<subseteq> fmla\n  ?\\<phi> \\<in> set \\<phi>s \\<Longrightarrow> prv (imp ?\\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>s) \\<chi>)", "by (induct \\<phi>s arbitrary: \\<chi>)\n     (auto simp add: prv_imp_tru prv_imp_com prv_imp_dsjEE)"], ["", "lemma prv_ldsj_imp_inner:\nassumes \"\\<phi> \\<in> fmla\" \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\"\nshows \"prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)) (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))", "proof(induction \\<phi>1s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj ([] @ \\<phi> # \\<phi>2s))\n                            (dsj \\<phi> (ldsj ([] @ \\<phi>2s))))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n  (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj\n                                    ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n                               (dsj \\<phi>\n                                 (ldsj ((a # \\<phi>1s) @ \\<phi>2s))))", "case (Cons \\<phi>1 \\<phi>1s)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n                          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj ([] @ \\<phi> # \\<phi>2s))\n                            (dsj \\<phi> (ldsj ([] @ \\<phi>2s))))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n  (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj\n                                    ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n                               (dsj \\<phi>\n                                 (ldsj ((a # \\<phi>1s) @ \\<phi>2s))))", "have [intro!]: \"set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla\" \"set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla &&&\n    set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n                          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla &&&\n    set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla", "by auto"], ["proof (state)\nthis:\n  set (\\<phi>1s @ \\<phi>2s) \\<subseteq> fmla\n  set (\\<phi>1s @ \\<phi> # \\<phi>2s) \\<subseteq> fmla\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj ([] @ \\<phi> # \\<phi>2s))\n                            (dsj \\<phi> (ldsj ([] @ \\<phi>2s))))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n  (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj\n                                    ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n                               (dsj \\<phi>\n                                 (ldsj ((a # \\<phi>1s) @ \\<phi>2s))))", "have 0: \"prv (imp (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n                 (dsj \\<phi> (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi>2s)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n          (dsj \\<phi> (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi>2s)))))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n                          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n          (dsj \\<phi> (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi>2s)))))", "by (intro prv_dsj_com_imp3) fastforce+"], ["proof (state)\nthis:\n  prv (imp (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n        (dsj \\<phi> (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi>2s)))))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj ([] @ \\<phi> # \\<phi>2s))\n                            (dsj \\<phi> (ldsj ([] @ \\<phi>2s))))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n  (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj\n                                    ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n                               (dsj \\<phi>\n                                 (ldsj ((a # \\<phi>1s) @ \\<phi>2s))))", "have 1: \"prv (imp (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n                (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n          (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s)))))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n                          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n          (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s)))))", "by (intro prv_dsj_mono) (auto simp add: prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n        (dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s)))))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj ([] @ \\<phi> # \\<phi>2s))\n                            (dsj \\<phi> (ldsj ([] @ \\<phi>2s))))\n 2. \\<And>a \\<phi>1s.\n       \\<lbrakk>\\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n                 set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n                \\<Longrightarrow> prv (imp\n  (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n  (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))));\n        \\<phi> \\<in> fmla; set (a # \\<phi>1s) \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj\n                                    ((a # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n                               (dsj \\<phi>\n                                 (ldsj ((a # \\<phi>1s) @ \\<phi>2s))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj ((\\<phi>1 # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n          (dsj \\<phi> (ldsj ((\\<phi>1 # \\<phi>1s) @ \\<phi>2s))))", "using prv_prv_imp_trans[OF _ _ _ 1 0] Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)) \\<in> fmla;\n   dsj \\<phi>1 (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))) \\<in> fmla;\n   dsj \\<phi> (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi>2s))) \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (dsj \\<phi>1\n                               (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s)))\n                          (dsj \\<phi>\n                            (dsj \\<phi>1 (ldsj (\\<phi>1s @ \\<phi>2s)))))\n  \\<lbrakk>\\<phi> \\<in> fmla; set \\<phi>1s \\<subseteq> fmla;\n   set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj (\\<phi>1s @ \\<phi> # \\<phi>2s))\n                          (dsj \\<phi> (ldsj (\\<phi>1s @ \\<phi>2s))))\n  \\<phi> \\<in> fmla\n  set (\\<phi>1 # \\<phi>1s) \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj ((\\<phi>1 # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n          (dsj \\<phi> (ldsj ((\\<phi>1 # \\<phi>1s) @ \\<phi>2s))))", "by auto"], ["proof (state)\nthis:\n  prv (imp (ldsj ((\\<phi>1 # \\<phi>1s) @ \\<phi> # \\<phi>2s))\n        (dsj \\<phi> (ldsj ((\\<phi>1 # \\<phi>1s) @ \\<phi>2s))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; set [] \\<subseteq> fmla;\n     set \\<phi>2s \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj ([] @ \\<phi> # \\<phi>2s))\n                            (dsj \\<phi> (ldsj ([] @ \\<phi>2s))))", "qed(simp add: prv_imp_refl)"], ["", "lemma prv_ldsj_imp_remdups:\nassumes \"set \\<phi>s \\<subseteq> fmla\"\nshows \"prv (imp  (ldsj \\<phi>s) (ldsj (remdups \\<phi>s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>s) (ldsj (remdups \\<phi>s)))", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>s \\<subseteq> fmla\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>s) (ldsj (remdups \\<phi>s)))", "apply(induct \\<phi>s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> fmla \\<Longrightarrow>\n    prv (imp (ldsj []) (ldsj (remdups [])))\n 2. \\<And>a \\<phi>s.\n       \\<lbrakk>set \\<phi>s \\<subseteq> fmla \\<Longrightarrow>\n                prv (imp (ldsj \\<phi>s) (ldsj (remdups \\<phi>s)));\n        set (a # \\<phi>s) \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj (a # \\<phi>s))\n                               (ldsj (remdups (a # \\<phi>s))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. set [] \\<subseteq> fmla \\<Longrightarrow>\n    prv (imp (ldsj []) (ldsj (remdups [])))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<phi>s.\n       \\<lbrakk>set \\<phi>s \\<subseteq> fmla \\<Longrightarrow>\n                prv (imp (ldsj \\<phi>s) (ldsj (remdups \\<phi>s)));\n        set (a # \\<phi>s) \\<subseteq> fmla\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj (a # \\<phi>s))\n                               (ldsj (remdups (a # \\<phi>s))))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>s_ \\<subseteq> fmla \\<Longrightarrow>\n             prv (imp (ldsj \\<phi>s_) (ldsj (remdups \\<phi>s_)));\n     set (a_ # \\<phi>s_) \\<subseteq> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj (a_ # \\<phi>s_))\n                            (ldsj (remdups (a_ # \\<phi>s_))))", "by (metis ldsj prv_imp_ldsj_in prv_ldsj_imp set_remdups)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma prv_ldsj_mono:\nassumes \\<phi>2s: \"set \\<phi>2s \\<subseteq> fmla\" and \"set \\<phi>1s \\<subseteq> set \\<phi>2s\"\nshows \"prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "define \\<phi>1s' where \\<phi>1s': \"\\<phi>1s' = remdups \\<phi>1s\""], ["proof (state)\nthis:\n  \\<phi>1s' = remdups \\<phi>1s\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "have A: \"set \\<phi>1s' \\<subseteq> set \\<phi>2s\" \"distinct \\<phi>1s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set \\<phi>1s' \\<subseteq> set \\<phi>2s &&& distinct \\<phi>1s'", "unfolding \\<phi>1s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups \\<phi>1s) \\<subseteq> set \\<phi>2s &&&\n    distinct (remdups \\<phi>1s)", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>2s \\<subseteq> fmla\n  set \\<phi>1s \\<subseteq> set \\<phi>2s\n\ngoal (1 subgoal):\n 1. set (remdups \\<phi>1s) \\<subseteq> set \\<phi>2s &&&\n    distinct (remdups \\<phi>1s)", "by auto"], ["proof (state)\nthis:\n  set \\<phi>1s' \\<subseteq> set \\<phi>2s\n  distinct \\<phi>1s'\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "have B: \"prv (imp (ldsj \\<phi>1s') (ldsj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s') (ldsj \\<phi>2s))", "using \\<phi>2s A"], ["proof (prove)\nusing this:\n  set \\<phi>2s \\<subseteq> fmla\n  set \\<phi>1s' \\<subseteq> set \\<phi>2s\n  distinct \\<phi>1s'\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s') (ldsj \\<phi>2s))", "proof(induction \\<phi>2s arbitrary: \\<phi>1s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>1s'.\n       \\<lbrakk>set [] \\<subseteq> fmla; set \\<phi>1s' \\<subseteq> set [];\n        distinct \\<phi>1s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj \\<phi>1s') (ldsj []))\n 2. \\<And>a \\<phi>2s \\<phi>1s'.\n       \\<lbrakk>\\<And>\\<phi>1s'.\n                   \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                    set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                    distinct \\<phi>1s'\\<rbrakk>\n                   \\<Longrightarrow> prv\n(imp (ldsj \\<phi>1s') (ldsj \\<phi>2s));\n        set (a # \\<phi>2s) \\<subseteq> fmla;\n        set \\<phi>1s' \\<subseteq> set (a # \\<phi>2s);\n        distinct \\<phi>1s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj \\<phi>1s') (ldsj (a # \\<phi>2s)))", "case (Cons \\<phi>2 \\<phi>2s \\<phi>1ss)"], ["proof (state)\nthis:\n  \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s' \\<subseteq> set \\<phi>2s; distinct ?\\<phi>1s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s') (ldsj \\<phi>2s))\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>1s'.\n       \\<lbrakk>set [] \\<subseteq> fmla; set \\<phi>1s' \\<subseteq> set [];\n        distinct \\<phi>1s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj \\<phi>1s') (ldsj []))\n 2. \\<And>a \\<phi>2s \\<phi>1s'.\n       \\<lbrakk>\\<And>\\<phi>1s'.\n                   \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                    set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                    distinct \\<phi>1s'\\<rbrakk>\n                   \\<Longrightarrow> prv\n(imp (ldsj \\<phi>1s') (ldsj \\<phi>2s));\n        set (a # \\<phi>2s) \\<subseteq> fmla;\n        set \\<phi>1s' \\<subseteq> set (a # \\<phi>2s);\n        distinct \\<phi>1s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj \\<phi>1s') (ldsj (a # \\<phi>2s)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "proof(cases \"\\<phi>2 \\<in> set \\<phi>1ss\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "case True"], ["proof (state)\nthis:\n  \\<phi>2 \\<in> set \\<phi>1ss\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "then"], ["proof (chain)\npicking this:\n  \\<phi>2 \\<in> set \\<phi>1ss", "obtain \\<phi>1ss1 \\<phi>1ss2 where \\<phi>1ss: \"\\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\""], ["proof (prove)\nusing this:\n  \\<phi>2 \\<in> set \\<phi>1ss\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>1ss1 \\<phi>1ss2.\n        \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson split_list)"], ["proof (state)\nthis:\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "define \\<phi>1s where \\<phi>1s: \"\\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2\""], ["proof (state)\nthis:\n  \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "have nin: \"\\<phi>2 \\<notin> set \\<phi>1s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>2 \\<notin> set \\<phi>1s", "using \\<phi>1ss \\<open>distinct \\<phi>1ss\\<close>"], ["proof (prove)\nusing this:\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n  distinct \\<phi>1ss\n\ngoal (1 subgoal):\n 1. \\<phi>2 \\<notin> set \\<phi>1s", "unfolding \\<phi>1s"], ["proof (prove)\nusing this:\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n  distinct \\<phi>1ss\n\ngoal (1 subgoal):\n 1. \\<phi>2 \\<notin> set (\\<phi>1ss1 @ \\<phi>1ss2)", "by auto"], ["proof (state)\nthis:\n  \\<phi>2 \\<notin> set \\<phi>1s\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "have [intro!,simp]: \"set \\<phi>1s \\<subseteq> fmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set \\<phi>1s \\<subseteq> fmla", "unfolding \\<phi>1s"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (\\<phi>1ss1 @ \\<phi>1ss2) \\<subseteq> fmla", "using \\<phi>1ss Cons"], ["proof (prove)\nusing this:\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n  \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s' \\<subseteq> set \\<phi>2s; distinct ?\\<phi>1s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s') (ldsj \\<phi>2s))\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n\ngoal (1 subgoal):\n 1. set (\\<phi>1ss1 @ \\<phi>1ss2) \\<subseteq> fmla", "by auto"], ["proof (state)\nthis:\n  set \\<phi>1s \\<subseteq> fmla\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "have 0: \"prv (imp (ldsj \\<phi>1ss) (dsj \\<phi>2 (ldsj \\<phi>1s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1ss) (dsj \\<phi>2 (ldsj \\<phi>1s)))", "unfolding \\<phi>1s \\<phi>1ss"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (\\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2))\n          (dsj \\<phi>2 (ldsj (\\<phi>1ss1 @ \\<phi>1ss2))))", "apply(rule prv_ldsj_imp_inner)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<phi>2 \\<in> fmla\n 2. set \\<phi>1ss1 \\<subseteq> fmla\n 3. set \\<phi>1ss2 \\<subseteq> fmla", "using Cons \\<phi>1ss"], ["proof (prove)\nusing this:\n  \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s' \\<subseteq> set \\<phi>2s; distinct ?\\<phi>1s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s') (ldsj \\<phi>2s))\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n\ngoal (3 subgoals):\n 1. \\<phi>2 \\<in> fmla\n 2. set \\<phi>1ss1 \\<subseteq> fmla\n 3. set \\<phi>1ss2 \\<subseteq> fmla", "by auto"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1ss) (dsj \\<phi>2 (ldsj \\<phi>1s)))\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "have 1: \"prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "apply(rule Cons.IH)"], ["proof (prove)\ngoal (3 subgoals):\n 1. set \\<phi>2s \\<subseteq> fmla\n 2. set \\<phi>1s \\<subseteq> set \\<phi>2s\n 3. distinct \\<phi>1s", "using nin Cons.prems True"], ["proof (prove)\nusing this:\n  \\<phi>2 \\<notin> set \\<phi>1s\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n  \\<phi>2 \\<in> set \\<phi>1ss\n\ngoal (3 subgoals):\n 1. set \\<phi>2s \\<subseteq> fmla\n 2. set \\<phi>1s \\<subseteq> set \\<phi>2s\n 3. distinct \\<phi>1s", "using \\<phi>1s \\<phi>1ss"], ["proof (prove)\nusing this:\n  \\<phi>2 \\<notin> set \\<phi>1s\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n  \\<phi>2 \\<in> set \\<phi>1ss\n  \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n\ngoal (3 subgoals):\n 1. set \\<phi>2s \\<subseteq> fmla\n 2. set \\<phi>1s \\<subseteq> set \\<phi>2s\n 3. distinct \\<phi>1s", "by  auto"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "have 2: \"prv (imp (dsj \\<phi>2 (ldsj \\<phi>1s)) (dsj \\<phi>2 (ldsj \\<phi>2s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>2 (ldsj \\<phi>1s)) (dsj \\<phi>2 (ldsj \\<phi>2s)))", "using Cons \\<phi>1ss \\<phi>1s 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s' \\<subseteq> set \\<phi>2s; distinct ?\\<phi>1s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s') (ldsj \\<phi>2s))\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n  \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2\n  \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2\n  prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\n\ngoal (1 subgoal):\n 1. prv (imp (dsj \\<phi>2 (ldsj \\<phi>1s)) (dsj \\<phi>2 (ldsj \\<phi>2s)))", "apply(intro prv_dsj_mono)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> \\<phi>2 \\<in> fmla\n 2. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> ldsj \\<phi>1s \\<in> fmla\n 3. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> \\<phi>2 \\<in> fmla\n 4. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> ldsj \\<phi>2s \\<in> fmla\n 5. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>2 \\<phi>2)\n 6. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "using prv_imp_refl"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> \\<phi>2 \\<in> fmla\n 2. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> ldsj \\<phi>1s \\<in> fmla\n 3. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> \\<phi>2 \\<in> fmla\n 4. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> ldsj \\<phi>2s \\<in> fmla\n 5. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>2 \\<phi>2)\n 6. \\<lbrakk>\\<And>\\<phi>1s'.\n                \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n                 set \\<phi>1s' \\<subseteq> set \\<phi>2s;\n                 distinct \\<phi>1s'\\<rbrakk>\n                \\<Longrightarrow> prv (imp (ldsj \\<phi>1s')\n  (ldsj \\<phi>2s));\n     set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla;\n     set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s); distinct \\<phi>1ss;\n     \\<phi>1ss = \\<phi>1ss1 @ \\<phi>2 # \\<phi>1ss2;\n     \\<phi>1s \\<equiv> \\<phi>1ss1 @ \\<phi>1ss2;\n     prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\\<rbrakk>\n    \\<Longrightarrow> prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "by auto blast+"], ["proof (state)\nthis:\n  prv (imp (dsj \\<phi>2 (ldsj \\<phi>1s)) (dsj \\<phi>2 (ldsj \\<phi>2s)))\n\ngoal (2 subgoals):\n 1. \\<phi>2 \\<in> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n 2. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s' \\<subseteq> set \\<phi>2s; distinct ?\\<phi>1s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s') (ldsj \\<phi>2s))\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "by (auto intro!: prv_prv_imp_trans[OF _ _ _ 0 2])"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n\ngoal (1 subgoal):\n 1. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "case False"], ["proof (state)\nthis:\n  \\<phi>2 \\<notin> set \\<phi>1ss\n\ngoal (1 subgoal):\n 1. \\<phi>2 \\<notin> set \\<phi>1ss \\<Longrightarrow>\n    prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "then"], ["proof (chain)\npicking this:\n  \\<phi>2 \\<notin> set \\<phi>1ss", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi>2 \\<notin> set \\<phi>1ss\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "using Cons"], ["proof (prove)\nusing this:\n  \\<phi>2 \\<notin> set \\<phi>1ss\n  \\<lbrakk>set \\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s' \\<subseteq> set \\<phi>2s; distinct ?\\<phi>1s'\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s') (ldsj \\<phi>2s))\n  set (\\<phi>2 # \\<phi>2s) \\<subseteq> fmla\n  set \\<phi>1ss \\<subseteq> set (\\<phi>2 # \\<phi>2s)\n  distinct \\<phi>1ss\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))", "by (meson ldsj order.trans prv_imp_ldsj_in prv_ldsj_imp subset_code(1))"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1ss) (ldsj (\\<phi>2 # \\<phi>2s)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>1s'.\n       \\<lbrakk>set [] \\<subseteq> fmla; set \\<phi>1s' \\<subseteq> set [];\n        distinct \\<phi>1s'\\<rbrakk>\n       \\<Longrightarrow> prv (imp (ldsj \\<phi>1s') (ldsj []))", "qed(simp add: prv_imp_refl)"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1s') (ldsj \\<phi>2s))\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "have C: \"prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>1s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>1s'))", "unfolding \\<phi>1s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj (remdups \\<phi>1s)))", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>2s \\<subseteq> fmla\n  set \\<phi>1s \\<subseteq> set \\<phi>2s\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj (remdups \\<phi>1s)))", "by (intro prv_ldsj_imp_remdups) auto"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>1s'))\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "using A assms"], ["proof (prove)\nusing this:\n  set \\<phi>1s' \\<subseteq> set \\<phi>2s\n  distinct \\<phi>1s'\n  set \\<phi>2s \\<subseteq> fmla\n  set \\<phi>1s \\<subseteq> set \\<phi>2s\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "by (intro prv_prv_imp_trans[OF _ _ _ C B]) auto"], ["proof (state)\nthis:\n  prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_ldsj_eqv:\nassumes \"set \\<phi>1s \\<subseteq> fmla\" and \"set \\<phi>2s = set \\<phi>1s\"\nshows \"prv (eqv (ldsj \\<phi>1s) (ldsj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "using assms prv_ldsj_mono"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s = set \\<phi>1s\n  \\<lbrakk>set ?\\<phi>2s \\<subseteq> fmla;\n   set ?\\<phi>1s \\<subseteq> set ?\\<phi>2s\\<rbrakk>\n  \\<Longrightarrow> prv (imp (ldsj ?\\<phi>1s) (ldsj ?\\<phi>2s))\n\ngoal (1 subgoal):\n 1. prv (eqv (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "by (intro prv_eqvI) auto"], ["", "lemma prv_ldsj_mono_imp:\n  assumes \"set \\<phi>1s \\<subseteq> fmla\" \"set \\<phi>2s \\<subseteq> fmla\" and \"\\<forall> \\<phi>1 \\<in> set \\<phi>1s. \\<exists> \\<phi>2 \\<in> set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "using assms"], ["proof (prove)\nusing this:\n  set \\<phi>1s \\<subseteq> fmla\n  set \\<phi>2s \\<subseteq> fmla\n  \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n     \\<exists>\\<phi>2\\<in>set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj \\<phi>1s) (ldsj \\<phi>2s))", "apply(intro prv_ldsj_imp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> ldsj \\<phi>2s \\<in> fmla\n 2. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> set \\<phi>1s \\<subseteq> fmla\n 3. \\<And>\\<phi>.\n       \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla;\n        \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n           \\<exists>\\<phi>2\\<in>set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2);\n        \\<phi> \\<in> set \\<phi>1s\\<rbrakk>\n       \\<Longrightarrow> prv (imp \\<phi> (ldsj \\<phi>2s))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> ldsj \\<phi>2s \\<in> fmla", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> set \\<phi>1s \\<subseteq> fmla\n 2. \\<And>\\<phi>.\n       \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla;\n        \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n           \\<exists>\\<phi>2\\<in>set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2);\n        \\<phi> \\<in> set \\<phi>1s\\<rbrakk>\n       \\<Longrightarrow> prv (imp \\<phi> (ldsj \\<phi>2s))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s.\n           prv (imp \\<phi>1 \\<phi>2)\\<rbrakk>\n    \\<Longrightarrow> set \\<phi>1s \\<subseteq> fmla", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>set \\<phi>1s \\<subseteq> fmla;\n        set \\<phi>2s \\<subseteq> fmla;\n        \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n           \\<exists>\\<phi>2\\<in>set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2);\n        \\<phi> \\<in> set \\<phi>1s\\<rbrakk>\n       \\<Longrightarrow> prv (imp \\<phi> (ldsj \\<phi>2s))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2);\n     \\<phi>_ \\<in> set \\<phi>1s\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>_ (ldsj \\<phi>2s))", "using prv_imp_ldsj"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<chi> \\<in> fmla; set ?\\<phi>s \\<subseteq> fmla;\n   ?\\<phi> \\<in> set ?\\<phi>s; prv (imp ?\\<chi> ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (ldsj ?\\<phi>s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set \\<phi>1s \\<subseteq> fmla; set \\<phi>2s \\<subseteq> fmla;\n     \\<forall>\\<phi>1\\<in>set \\<phi>1s.\n        \\<exists>\\<phi>2\\<in>set \\<phi>2s. prv (imp \\<phi>1 \\<phi>2);\n     \\<phi>_ \\<in> set \\<phi>1s\\<rbrakk>\n    \\<Longrightarrow> prv (imp \\<phi>_ (ldsj \\<phi>2s))", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text \\<open>Just like set-based conjunction, set-based disjunction commutes with substitution\nonly up to provably equivalence:\\<close>"], ["", "lemma prv_subst_sdsj:\n\"F \\<subseteq> fmla \\<Longrightarrow> finite F \\<Longrightarrow> t \\<in> trm \\<Longrightarrow> x \\<in> var \\<Longrightarrow>\n prv (eqv (subst (sdsj F) t x) (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; t \\<in> trm; x \\<in> var\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (subst (sdsj F) t x)\n                            (sdsj\n                              ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "unfolding sdsj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; t \\<in> trm; x \\<in> var\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (subst (ldsj (asList F)) t x)\n                            (ldsj\n                              (asList\n                                ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))))", "by (fastforce intro!: prv_ldsj_eqv)"], ["", "lemma prv_imp_sdsj_in:\n  assumes \"\\<phi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n  and \"\\<phi> \\<in> F\"\n  shows \"prv (imp \\<phi> (sdsj F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (sdsj F))", "unfolding sdsj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj (asList F)))", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> F\n\ngoal (1 subgoal):\n 1. prv (imp \\<phi> (ldsj (asList F)))", "by (intro prv_imp_ldsj_in) auto"], ["", "lemma prv_imp_sdsj:\nassumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\nand \"\\<phi> \\<in> F\" and \"prv (imp \\<chi> \\<phi>)\"\nshows \"prv (imp \\<chi> (sdsj F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (sdsj F))", "unfolding sdsj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (ldsj (asList F)))", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  \\<phi> \\<in> F\n  prv (imp \\<chi> \\<phi>)\n\ngoal (1 subgoal):\n 1. prv (imp \\<chi> (ldsj (asList F)))", "by (intro prv_imp_ldsj) auto"], ["", "lemma prv_sdsj_imp:\n  assumes \"\\<chi> \\<in> fmla\" and \"F \\<subseteq> fmla\" \"finite F\"\n  and \"\\<And>\\<phi>. \\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<phi> \\<chi>)\"\n  shows \"prv (imp (sdsj F) \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (sdsj F) \\<chi>)", "unfolding sdsj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (asList F)) \\<chi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  ?\\<phi> \\<in> F \\<Longrightarrow> prv (imp ?\\<phi> \\<chi>)\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (asList F)) \\<chi>)", "by (intro prv_ldsj_imp) auto"], ["", "lemma prv_sdsj_mono:\nassumes \"F2 \\<subseteq> fmla\" and \"F1 \\<subseteq> F2\" and \"finite F2\"\nshows \"prv (imp (sdsj F1) (sdsj F2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (sdsj F1) (sdsj F2))", "unfolding sdsj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (asList F1)) (ldsj (asList F2)))", "using assms"], ["proof (prove)\nusing this:\n  F2 \\<subseteq> fmla\n  F1 \\<subseteq> F2\n  finite F2\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (asList F1)) (ldsj (asList F2)))", "apply(intro prv_ldsj_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F2 \\<subseteq> fmla; F1 \\<subseteq> F2; finite F2\\<rbrakk>\n    \\<Longrightarrow> set (asList F2) \\<subseteq> fmla\n 2. \\<lbrakk>F2 \\<subseteq> fmla; F1 \\<subseteq> F2; finite F2\\<rbrakk>\n    \\<Longrightarrow> set (asList F1) \\<subseteq> set (asList F2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F2 \\<subseteq> fmla; F1 \\<subseteq> F2; finite F2\\<rbrakk>\n    \\<Longrightarrow> set (asList F2) \\<subseteq> fmla", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F2 \\<subseteq> fmla; F1 \\<subseteq> F2; finite F2\\<rbrakk>\n    \\<Longrightarrow> set (asList F1) \\<subseteq> set (asList F2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F2 \\<subseteq> fmla; F1 \\<subseteq> F2; finite F2\\<rbrakk>\n    \\<Longrightarrow> set (asList F1) \\<subseteq> set (asList F2)", "by (metis asList infinite_super)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma prv_sdsj_mono_imp:\n  assumes \"F1 \\<subseteq> fmla\" \"F2 \\<subseteq> fmla\" \"finite F1\" \"finite F2\"\n  and \"\\<forall> \\<phi>1 \\<in> F1. \\<exists> \\<phi>2 \\<in> F2. prv (imp \\<phi>1 \\<phi>2)\"\n  shows \"prv (imp (sdsj F1) (sdsj F2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (sdsj F1) (sdsj F2))", "unfolding sdsj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (ldsj (asList F1)) (ldsj (asList F2)))", "using assms"], ["proof (prove)\nusing this:\n  F1 \\<subseteq> fmla\n  F2 \\<subseteq> fmla\n  finite F1\n  finite F2\n  \\<forall>\\<phi>1\\<in>F1.\n     \\<exists>\\<phi>2\\<in>F2. prv (imp \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (imp (ldsj (asList F1)) (ldsj (asList F2)))", "by (intro prv_ldsj_mono_imp) auto"], ["", "lemma prv_sdsj_cases:\nassumes \"F \\<subseteq> fmla\" \"finite F\" \"\\<psi> \\<in> fmla\"\nand \"prv (sdsj F)\" and \"\\<And> \\<phi>. \\<phi> \\<in> F \\<Longrightarrow> prv (imp \\<phi> \\<psi>)\"\nshows \"prv \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<psi>", "by (meson assms prv_imp_mp prv_sdsj_imp sdsj)"], ["", "lemma prv_sdsj1_imp:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (sdsj {\\<phi>}) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (sdsj {\\<phi>}) \\<phi>)", "using prv_imp_refl prv_sdsj_imp"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n  \\<lbrakk>?\\<chi> \\<in> fmla; ?F \\<subseteq> fmla; finite ?F;\n   \\<And>\\<phi>.\n      \\<phi> \\<in> ?F \\<Longrightarrow> prv (imp \\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (sdsj ?F) ?\\<chi>)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp (sdsj {\\<phi>}) \\<phi>)", "by fastforce"], ["", "lemma prv_imp_sdsj1:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (sdsj {\\<phi>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (sdsj {\\<phi>}))", "using prv_imp_refl prv_imp_sdsj"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> prv (imp ?\\<phi> ?\\<phi>)\n  \\<lbrakk>?\\<chi> \\<in> fmla; ?F \\<subseteq> fmla; finite ?F;\n   ?\\<phi> \\<in> ?F; prv (imp ?\\<chi> ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (sdsj ?F))\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla \\<Longrightarrow> prv (imp \\<phi> (sdsj {\\<phi>}))", "by fastforce"], ["", "lemma prv_sdsj2_imp_dsj:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (sdsj {\\<phi>,\\<psi>}) (dsj \\<phi> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj {\\<phi>, \\<psi>}) (dsj \\<phi> \\<psi>))", "using prv_dsj_impL prv_dsj_impR prv_sdsj_imp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<phi> (dsj ?\\<phi> ?\\<chi>))\n  \\<lbrakk>?\\<phi> \\<in> fmla; ?\\<chi> \\<in> fmla\\<rbrakk>\n  \\<Longrightarrow> prv (imp ?\\<chi> (dsj ?\\<phi> ?\\<chi>))\n  \\<lbrakk>?\\<chi> \\<in> fmla; ?F \\<subseteq> fmla; finite ?F;\n   \\<And>\\<phi>.\n      \\<phi> \\<in> ?F \\<Longrightarrow> prv (imp \\<phi> ?\\<chi>)\\<rbrakk>\n  \\<Longrightarrow> prv (imp (sdsj ?F) ?\\<chi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj {\\<phi>, \\<psi>}) (dsj \\<phi> \\<psi>))", "by fastforce"], ["", "lemma prv_dsj_imp_sdsj2:\n\"\\<phi> \\<in> fmla \\<Longrightarrow> \\<psi> \\<in> fmla \\<Longrightarrow> prv (imp (dsj \\<phi> \\<psi>) (sdsj {\\<phi>,\\<psi>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; \\<psi> \\<in> fmla\\<rbrakk>\n    \\<Longrightarrow> prv (imp (dsj \\<phi> \\<psi>) (sdsj {\\<phi>, \\<psi>}))", "by (simp add: prv_imp_dsjEE prv_imp_sdsj_in)"], ["", "text \\<open>Commutation with parallel substitution:\\<close>"], ["", "lemma prv_rawpsubst_sdsj:\nassumes \"F \\<subseteq> fmla\" \"finite F\"\nand \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\nshows \"prv (eqv (rawpsubst (sdsj F) txs) (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)))", "proof(induction txs arbitrary: F)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "case (Cons tx txs)"], ["proof (state)\nthis:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; snd ` set txs \\<subseteq> var;\n   fst ` set txs \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (eqv (rawpsubst (sdsj ?F) txs)\n                          (sdsj\n                            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ?F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; snd ` set txs \\<subseteq> var;\n   fst ` set txs \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (eqv (rawpsubst (sdsj ?F) txs)\n                          (sdsj\n                            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ?F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm", "obtain t x where tx[simp]: \"tx = (t,x)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?F \\<subseteq> fmla; finite ?F; snd ` set txs \\<subseteq> var;\n   fst ` set txs \\<subseteq> trm\\<rbrakk>\n  \\<Longrightarrow> prv (eqv (rawpsubst (sdsj ?F) txs)\n                          (sdsj\n                            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ?F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. (\\<And>t x. tx = (t, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases tx) auto"], ["proof (state)\nthis:\n  tx = (t, x)\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "hence [simp]: \"t \\<in> trm\" \"x \\<in> var\""], ["proof (prove)\nusing this:\n  tx = (t, x)\n\ngoal (1 subgoal):\n 1. t \\<in> trm &&& x \\<in> var", "using Cons.prems"], ["proof (prove)\nusing this:\n  tx = (t, x)\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. t \\<in> trm &&& x \\<in> var", "by auto"], ["proof (state)\nthis:\n  t \\<in> trm\n  x \\<in> var\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "have 0: \"(\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n           (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n    (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n    (\\<lambda>\\<phi>. subst \\<phi> t x) ` F", "using Cons.prems"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n    (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n    (\\<lambda>\\<phi>. subst \\<phi> t x) ` F", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F =\n  (\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n  (\\<lambda>\\<phi>. subst \\<phi> t x) ` F\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "have \"prv (eqv (subst (sdsj F) t x)\n                 (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (subst (sdsj F) t x)\n          (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "using Cons.prems"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (subst (sdsj F) t x)\n          (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "by (intro prv_subst_sdsj) auto"], ["proof (state)\nthis:\n  prv (eqv (subst (sdsj F) t x)\n        (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "hence \"prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n                  (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\""], ["proof (prove)\nusing this:\n  prv (eqv (subst (sdsj F) t x)\n        (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n          (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))", "using Cons.prems"], ["proof (prove)\nusing this:\n  prv (eqv (subst (sdsj F) t x)\n        (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n          (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))", "by (intro prv_eqv_rawpsubst) auto"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n        (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "moreover"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n        (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "have \"prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n                 (sdsj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n               txs)\n          (sdsj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n               txs)\n          (sdsj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n             (\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "using Cons.prems"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n               txs)\n          (sdsj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) `\n             (\\<lambda>\\<phi>. subst \\<phi> t x) ` F)))", "by (intro Cons.IH) auto"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (sdsj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\n\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))\n 2. \\<And>a txs F.\n       \\<lbrakk>\\<And>F.\n                   \\<lbrakk>F \\<subseteq> fmla; finite F;\n                    snd ` set txs \\<subseteq> var;\n                    fst ` set txs \\<subseteq> trm\\<rbrakk>\n                   \\<Longrightarrow> prv\n(eqv (rawpsubst (sdsj F) txs)\n  (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> txs) ` F)));\n        F \\<subseteq> fmla; finite F; snd ` set (a # txs) \\<subseteq> var;\n        fst ` set (a # txs) \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (a # txs))\n                               (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (a # txs)) `\n                                  F)))", "ultimately"], ["proof (chain)\npicking this:\n  prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n        (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n  prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (sdsj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))", "show ?case"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n        (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n  prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (sdsj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj F) (tx # txs))\n          (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> (tx # txs)) ` F)))", "using Cons.prems"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n        (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs))\n  prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs)\n        (sdsj ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set (tx # txs) \\<subseteq> var\n  fst ` set (tx # txs) \\<subseteq> trm\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj F) (tx # txs))\n          (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> (tx # txs)) ` F)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv (rawpsubst (subst (sdsj F) t x) txs)\n                   (rawpsubst\n                     (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F)) txs));\n     prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. subst \\<phi> t x) ` F))\n                txs)\n           (sdsj\n             ((\\<lambda>\\<phi>. rawpsubst (subst \\<phi> t x) txs) ` F)));\n     F \\<subseteq> fmla; finite F; snd ` set (tx # txs) \\<subseteq> var;\n     fst ` set (tx # txs) \\<subseteq> trm\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) (tx # txs))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi> (tx # txs)) `\n                               F)))", "by (rule prv_eqv_trans) (auto intro!: rawpsubst)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (sdsj F) (tx # txs))\n        (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> (tx # txs)) ` F)))\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set [] \\<subseteq> var;\n        fst ` set [] \\<subseteq> trm\\<rbrakk>\n       \\<Longrightarrow> prv (eqv (rawpsubst (sdsj F) [])\n                               (sdsj\n                                 ((\\<lambda>\\<phi>. rawpsubst \\<phi> []) `\n                                  F)))", "qed(auto simp: image_def prv_eqv_refl)[]"], ["", "lemma prv_psubst_sdsj:\nassumes \"F \\<subseteq> fmla\" \"finite F\"\nand \"snd ` (set txs) \\<subseteq> var\" \"fst ` (set txs) \\<subseteq> trm\"\nand \"distinct (map snd txs)\"\nshows \"prv (eqv (psubst (sdsj F) txs) (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "define us where us: \"us \\<equiv> getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)\""], ["proof (state)\nthis:\n  us \\<equiv> getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have us_facts: \"set us \\<subseteq> var\"\n  \"set us \\<inter> \\<Union> (Fvars ` F) = {}\"\n  \"set us \\<inter> \\<Union> (FvarsT ` (fst ` (set txs))) = {}\"\n  \"set us \\<inter> snd ` (set txs) = {}\"\n  \"length us = length txs\"\n  \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set us \\<subseteq> var &&&\n     set us \\<inter> \\<Union> (Fvars ` F) = {} &&&\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}) &&&\n    set us \\<inter> snd ` set txs = {} &&&\n    length us = length txs &&& distinct us", "using assms"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. (set us \\<subseteq> var &&&\n     set us \\<inter> \\<Union> (Fvars ` F) = {} &&&\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}) &&&\n    set us \\<inter> snd ` set txs = {} &&&\n    length us = length txs &&& distinct us", "unfolding us"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. (set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs))\n     \\<subseteq> var &&&\n     set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) \\<inter>\n     \\<Union> (Fvars ` F) =\n     {} &&&\n     set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) \\<inter>\n     \\<Union> (FvarsT ` fst ` set txs) =\n     {}) &&&\n    set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) \\<inter>\n    snd ` set txs =\n    {} &&&\n    length (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) =\n    length txs &&&\n    distinct (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs))", "using getFrN_Fvars[of \"map snd txs\" \"map fst txs\" \"[sdsj F]\" _ \"length txs\"]\n        getFrN_FvarsT[of \"map snd txs\" \"map fst txs\" \"[sdsj F]\" _ \"length txs\"]\n        getFrN_var[of \"map snd txs\" \"map fst txs\" \"[sdsj F]\" _ \"length txs\"]\n        getFrN_length[of \"map snd txs\" \"map fst txs\" \"[sdsj F]\" \"length txs\"]"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n   ?\\<phi> \\<in> set [sdsj F]\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) \\<inter>\n                    Fvars ?\\<phi> =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) \\<inter>\n                    FvarsT ?t =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) \\<inter>\n                    set (map snd txs) =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> length\n                     (getFrN (map snd txs) (map fst txs) [sdsj F]\n                       (length txs)) =\n                    length txs\n\ngoal (1 subgoal):\n 1. (set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs))\n     \\<subseteq> var &&&\n     set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) \\<inter>\n     \\<Union> (Fvars ` F) =\n     {} &&&\n     set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) \\<inter>\n     \\<Union> (FvarsT ` fst ` set txs) =\n     {}) &&&\n    set (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) \\<inter>\n    snd ` set txs =\n    {} &&&\n    length (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs)) =\n    length txs &&&\n    distinct (getFrN (map snd txs) (map fst txs) [sdsj F] (length txs))", "apply -"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs))\n                      \\<subseteq> var\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (Fvars ` F) =\n                      {}\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs)) =\n                      length txs\n 6. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs))\n                      \\<subseteq> var", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (Fvars ` F) =\n                      {}\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs)) =\n                      length txs\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (Fvars ` F) =\n                      {}", "by fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs)) =\n                      length txs\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs)) =\n                      length txs\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs)) =\n                      length txs\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs)) =\n                      length txs", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     \\<And>\\<phi>.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         \\<phi> \\<in> set [sdsj F]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi> =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [sdsj F] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [sdsj F]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [sdsj F] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [sdsj F]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [sdsj F]\n                         (length txs))", "by auto"], ["proof (state)\nthis:\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "define vs where vs: \"vs \\<equiv> \\<lambda> \\<phi>. getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\""], ["proof (state)\nthis:\n  vs \\<equiv>\n  \\<lambda>\\<phi>. getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence vss: \"\\<And>\\<phi>. vs \\<phi> = getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\""], ["proof (prove)\nusing this:\n  vs \\<equiv>\n  \\<lambda>\\<phi>. getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       vs \\<phi> = getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)", "by auto"], ["proof (state)\nthis:\n  vs ?\\<phi> = getFrN (map snd txs) (map fst txs) [?\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "{"], ["proof (state)\nthis:\n  vs ?\\<phi> = getFrN (map snd txs) (map fst txs) [?\\<phi>] (length txs)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "fix \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "assume \"\\<phi> \\<in> F\""], ["proof (state)\nthis:\n  \\<phi> \\<in> F\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence \"\\<phi> \\<in> fmla\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> F\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> F\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> fmla", "by auto"], ["proof (state)\nthis:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence \"set (vs \\<phi>)  \\<subseteq> var \\<and>\n    set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n    set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` (fst ` (set txs))) = {} \\<and>\n    set (vs \\<phi>) \\<inter> snd ` (set txs) = {} \\<and>\n    length (vs \\<phi>) = length txs \\<and>\n    distinct (vs \\<phi>)\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. set (vs \\<phi>) \\<subseteq> var \\<and>\n    set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n    set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n    set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n    length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)", "using assms"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. set (vs \\<phi>) \\<subseteq> var \\<and>\n    set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n    set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n    set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n    length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)", "unfolding vs"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n\ngoal (1 subgoal):\n 1. set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))\n    \\<subseteq> var \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    Fvars \\<phi> =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    \\<Union> (FvarsT ` fst ` set txs) =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    snd ` set txs =\n    {} \\<and>\n    length (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) =\n    length txs \\<and>\n    distinct (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))", "using getFrN_Fvars[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n         getFrN_FvarsT[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n         getFrN_var[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" _ \"length txs\"]\n         getFrN_length[of \"map snd txs\" \"map fst txs\" \"[\\<phi>]\" \"length txs\"]"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?\\<phi> \\<in> set [\\<phi>]\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    Fvars ?\\<phi> =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    FvarsT ?t =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n   ?t \\<in> set (map fst txs)\\<rbrakk>\n  \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) \\<inter>\n                    set (map snd txs) =\n                    {}\n  \\<lbrakk>set (map snd txs) \\<subseteq> var;\n   set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n  \\<Longrightarrow> length\n                     (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                       (length txs)) =\n                    length txs\n\ngoal (1 subgoal):\n 1. set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))\n    \\<subseteq> var \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    Fvars \\<phi> =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    \\<Union> (FvarsT ` fst ` set txs) =\n    {} \\<and>\n    set (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) \\<inter>\n    snd ` set txs =\n    {} \\<and>\n    length (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs)) =\n    length txs \\<and>\n    distinct (getFrN (map snd txs) (map fst txs) [\\<phi>] (length txs))", "apply(intro conjI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs))\n                      \\<subseteq> var\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 4. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 5. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 6. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs))\n                      \\<subseteq> var", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 4. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 5. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      Fvars \\<phi> =\n                      {}", "by fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 4. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      \\<Union> (FvarsT ` fst ` set txs) =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 3. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                            (length txs)) \\<inter>\n                      snd ` set txs =\n                      {}", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs\n 2. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs)) =\n                      length txs", "by (fastforce simp: image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<in> fmla; F \\<subseteq> fmla; finite F;\n     snd ` set txs \\<subseteq> var; fst ` set txs \\<subseteq> trm;\n     distinct (map snd txs);\n     \\<And>\\<phi>'.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         \\<phi>' \\<in> set [\\<phi>]\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          Fvars \\<phi>' =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          FvarsT t =\n                          {};\n     \\<And>t.\n        \\<lbrakk>set (map snd txs) \\<subseteq> var;\n         set (map fst txs) \\<subseteq> trm; set [\\<phi>] \\<subseteq> fmla;\n         t \\<in> set (map fst txs)\\<rbrakk>\n        \\<Longrightarrow> set (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                                (length txs)) \\<inter>\n                          set (map snd txs) =\n                          {};\n     \\<lbrakk>set (map snd txs) \\<subseteq> var;\n      set (map fst txs) \\<subseteq> trm;\n      set [\\<phi>] \\<subseteq> fmla\\<rbrakk>\n     \\<Longrightarrow> length\n                        (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                          (length txs)) =\n                       length txs\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (getFrN (map snd txs) (map fst txs) [\\<phi>]\n                         (length txs))", "by auto"], ["proof (state)\nthis:\n  set (vs \\<phi>) \\<subseteq> var \\<and>\n  set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n  set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n  length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "}"], ["proof (state)\nthis:\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "note vs_facts = this"], ["proof (state)\nthis:\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have [simp]: \"\\<And> x f. f \\<in> F \\<Longrightarrow> x \\<in> set (vs f) \\<Longrightarrow> x \\<in> var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> F; x \\<in> set (vs f)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> var", "using vs_facts"], ["proof (prove)\nusing this:\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> F; x \\<in> set (vs f)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> var", "by (meson subsetD)"], ["proof (state)\nthis:\n  \\<lbrakk>?f \\<in> F; ?x \\<in> set (vs ?f)\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> var\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?tus = \"zip (map fst txs) us\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?uxs = \"zip (map Var us) (map snd txs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?tvs = \"\\<lambda> \\<phi>. zip (map fst txs) (vs \\<phi>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?vxs = \"\\<lambda> \\<phi>. zip (map Var (vs \\<phi>)) (map snd txs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "let ?c = \"rawpsubst (sdsj F) ?uxs\""], ["proof (state)\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have c: \"prv (eqv ?c\n                   (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "by (intro prv_rawpsubst_sdsj) (auto intro!: rawpsubstT dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "hence \"prv (eqv (rawpsubst ?c ?tus)\n                  (rawpsubst (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)) ?tus))\""], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (rawpsubst\n            (sdsj\n              ((\\<lambda>\\<phi>.\n                   rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n               F))\n            (zip (map fst txs) us)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (rawpsubst\n            (sdsj\n              ((\\<lambda>\\<phi>.\n                   rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n               F))\n            (zip (map fst txs) us)))", "by (intro prv_eqv_rawpsubst) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "moreover"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have \"prv (eqv (rawpsubst (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)) ?tus)\n                 (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?tus) ` ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (sdsj\n                 ((\\<lambda>\\<phi>.\n                      rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                  F))\n               (zip (map fst txs) us))\n          (sdsj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (sdsj\n                 ((\\<lambda>\\<phi>.\n                      rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                  F))\n               (zip (map fst txs) us))\n          (sdsj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "by (intro prv_rawpsubst_sdsj) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst\n             (sdsj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "ultimately"], ["proof (chain)\npicking this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n  prv (eqv (rawpsubst\n             (sdsj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))", "have 0: \"prv (eqv (rawpsubst ?c ?tus)\n                    (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?tus) ` ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F))))\""], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n  prv (eqv (rawpsubst\n             (sdsj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (sdsj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (rawpsubst\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F))\n          (zip (map fst txs) us)))\n  prv (eqv (rawpsubst\n             (sdsj\n               ((\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (sdsj\n            ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n             (\\<lambda>\\<phi>.\n                 rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n             F)))", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv (rawpsubst\n                        (rawpsubst (sdsj F)\n                          (zip (map Var us) (map snd txs)))\n                        (zip (map fst txs) us))\n                   (rawpsubst\n                     (sdsj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F))\n                     (zip (map fst txs) us)));\n     prv (eqv (rawpsubst\n                (sdsj\n                  ((\\<lambda>\\<phi>.\n                       rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                   F))\n                (zip (map fst txs) us))\n           (sdsj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst\n                                 (rawpsubst (sdsj F)\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "by (rule prv_eqv_trans) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "moreover"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "have \"prv (eqv (sdsj ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?tus) ` ((\\<lambda>\\<phi>. rawpsubst \\<phi> ?uxs) ` F)))\n                 (sdsj ((\\<lambda>\\<phi>. rawpsubst (rawpsubst \\<phi> (?vxs \\<phi>)) (?tvs \\<phi>)) ` F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv (sdsj\n               ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n                (\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "using assms us_facts vs_facts"], ["proof (prove)\nusing this:\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n  ?\\<phi>2 \\<in> F \\<Longrightarrow>\n  set (vs ?\\<phi>2) \\<subseteq> var \\<and>\n  set (vs ?\\<phi>2) \\<inter> Fvars ?\\<phi>2 = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {} \\<and>\n  set (vs ?\\<phi>2) \\<inter> snd ` set txs = {} \\<and>\n  length (vs ?\\<phi>2) = length txs \\<and> distinct (vs ?\\<phi>2)\n\ngoal (1 subgoal):\n 1. prv (eqv (sdsj\n               ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n                (\\<lambda>\\<phi>.\n                    rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                F))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "apply(intro prv_eqvI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> sdsj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> sdsj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n                      \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> sdsj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> sdsj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> sdsj\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map fst txs) us)) `\n                                  (\\<lambda>\\<phi>.\nrawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))", "apply(rule prv_sdsj_mono_imp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map fst txs) us)) `\n                                    (\\<lambda>\\<phi>.\n  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n      (zip (map fst txs) (vs \\<phi>))) `\n F.\n                            prv (imp \\<phi>1 \\<phi>2)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>1.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n        fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n        set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n        set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n        set us \\<inter> snd ` set txs = {}; length us = length txs;\n        distinct us;\n        \\<And>\\<phi>.\n           \\<phi> \\<in> F \\<Longrightarrow>\n           set (vs \\<phi>) \\<subseteq> var \\<and>\n           set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n           set (vs \\<phi>) \\<inter>\n           (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n           {} \\<and>\n           set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n           length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n        \\<phi>1 \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<phi>2\\<in>F.\n                            prv (imp (rawpsubst\n (rawpsubst \\<phi>1 (zip (map Var us) (map snd txs)))\n (zip (map fst txs) us))\n                                  (rawpsubst\n                                    (rawpsubst \\<phi>2\n(zip (map Var (vs \\<phi>2)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>2))))", "subgoal for \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<phi>2\\<in>F.\n                         prv (imp (rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var us) (map snd txs)))\n                                    (zip (map fst txs) us))\n                               (rawpsubst\n                                 (rawpsubst \\<phi>2\n                                   (zip (map Var (vs \\<phi>2))\n                                     (map snd txs)))\n                                 (zip (map fst txs) (vs \\<phi>2))))", "apply(rule bexI[of _ \\<phi>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> prv (imp (rawpsubst\n                                 (rawpsubst \\<phi>\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us))\n                            (rawpsubst\n                              (rawpsubst \\<phi>\n                                (zip (map Var (vs \\<phi>)) (map snd txs)))\n                              (zip (map fst txs) (vs \\<phi>))))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "apply(rule prv_imp_refl2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us) =\n                      rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))", "by (rule rawpsubst_compose_freshVar2)\n                 (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> prv (imp (sdsj\n                                 ((\\<lambda>\\<phi>.\nrawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>))) `\n                                  F))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map fst txs) us)) `\n                               (\\<lambda>\\<phi>.\n                                   rawpsubst \\<phi>\n                                    (zip (map Var us) (map snd txs))) `\n                               F)))", "apply(rule prv_sdsj_mono_imp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst\n                           (rawpsubst \\<phi>\n                             (zip (map Var (vs \\<phi>)) (map snd txs)))\n                           (zip (map fst txs) (vs \\<phi>))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F\n                      \\<subseteq> fmla", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst\n                             (rawpsubst \\<phi>\n                               (zip (map Var (vs \\<phi>)) (map snd txs)))\n                             (zip (map fst txs) (vs \\<phi>))) `\n                        F)", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ((\\<lambda>\\<phi>.\n                            rawpsubst \\<phi> (zip (map fst txs) us)) `\n                        (\\<lambda>\\<phi>.\n                            rawpsubst \\<phi>\n                             (zip (map Var us) (map snd txs))) `\n                        F)", "by (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> \\<Union> (FvarsT ` fst ` set txs) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<phi>1\n                               \\<in>(\\<lambda>\\<phi>.\n  rawpsubst (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n   (zip (map fst txs) (vs \\<phi>))) `\n                                    F.\n                         \\<exists>\\<phi>2\n                                  \\<in>(\\<lambda>\\<phi>.\n     rawpsubst \\<phi> (zip (map fst txs) us)) `\n (\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map Var us) (map snd txs))) ` F.\n                            prv (imp \\<phi>1 \\<phi>2)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>1.\n       \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n        fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n        set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n        set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n        set us \\<inter> snd ` set txs = {}; length us = length txs;\n        distinct us;\n        \\<And>\\<phi>.\n           \\<phi> \\<in> F \\<Longrightarrow>\n           set (vs \\<phi>) \\<subseteq> var \\<and>\n           set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n           set (vs \\<phi>) \\<inter>\n           (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n           {} \\<and>\n           set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n           length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n        \\<phi>1 \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<phi>2\\<in>F.\n                            prv (imp (rawpsubst\n (rawpsubst \\<phi>1 (zip (map Var (vs \\<phi>1)) (map snd txs)))\n (zip (map fst txs) (vs \\<phi>1)))\n                                  (rawpsubst\n                                    (rawpsubst \\<phi>2\n(zip (map Var us) (map snd txs)))\n                                    (zip (map fst txs) us)))", "subgoal for \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<phi>2\\<in>F.\n                         prv (imp (rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>)))\n                               (rawpsubst\n                                 (rawpsubst \\<phi>2\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us)))", "apply(rule bexI[of _ \\<phi>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> prv (imp (rawpsubst\n                                 (rawpsubst \\<phi>\n                                   (zip (map Var (vs \\<phi>))\n                                     (map snd txs)))\n                                 (zip (map fst txs) (vs \\<phi>)))\n                            (rawpsubst\n                              (rawpsubst \\<phi>\n                                (zip (map Var us) (map snd txs)))\n                              (zip (map fst txs) us)))\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "apply(rule prv_imp_refl2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>))\n                      \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n                      \\<in> fmla\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>)) =\n                      rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> F", "apply (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> rawpsubst\n                       (rawpsubst \\<phi>\n                         (zip (map Var (vs \\<phi>)) (map snd txs)))\n                       (zip (map fst txs) (vs \\<phi>)) =\n                      rawpsubst\n                       (rawpsubst \\<phi> (zip (map Var us) (map snd txs)))\n                       (zip (map fst txs) us)", "apply(rule rawpsubst_compose_freshVar2)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<in> fmla\n 2. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (map fst txs) \\<subseteq> trm\n 3. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (map snd txs) \\<subseteq> var\n 4. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> distinct (map snd txs)\n 5. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<subseteq> var\n 6. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> distinct (vs \\<phi>)\n 7. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<inter> Fvars \\<phi> = {}\n 8. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<inter>\n                      \\<Union> (FvarsT ` set (map fst txs)) =\n                      {}\n 9. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us;\n     \\<And>\\<phi>.\n        \\<phi> \\<in> F \\<Longrightarrow>\n        set (vs \\<phi>) \\<subseteq> var \\<and>\n        set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n        set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n        {} \\<and>\n        set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n        length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n     \\<phi> \\<in> F\\<rbrakk>\n    \\<Longrightarrow> set (vs \\<phi>) \\<inter> set (map snd txs) = {}\n 10. \\<lbrakk>F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n      fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n      set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n      set us \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) = {};\n      set us \\<inter> snd ` set txs = {}; length us = length txs;\n      distinct us;\n      \\<And>\\<phi>.\n         \\<phi> \\<in> F \\<Longrightarrow>\n         set (vs \\<phi>) \\<subseteq> var \\<and>\n         set (vs \\<phi>) \\<inter> Fvars \\<phi> = {} \\<and>\n         set (vs \\<phi>) \\<inter> (\\<Union>a\\<in>set txs. FvarsT (fst a)) =\n         {} \\<and>\n         set (vs \\<phi>) \\<inter> snd ` set txs = {} \\<and>\n         length (vs \\<phi>) = length txs \\<and> distinct (vs \\<phi>);\n      \\<phi> \\<in> F\\<rbrakk>\n     \\<Longrightarrow> set us \\<subseteq> var\nA total of 17 subgoals...", "apply (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  prv (eqv (sdsj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "ultimately"], ["proof (chain)\npicking this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  prv (eqv (sdsj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))", "have \"prv (eqv (rawpsubst (rawpsubst (sdsj F) ?uxs) ?tus)\n           (sdsj ((\\<lambda>\\<phi>. rawpsubst (rawpsubst \\<phi> (?vxs \\<phi>)) (?tvs \\<phi>)) ` F)))\""], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  prv (eqv (sdsj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "using assms us_facts"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n           (\\<lambda>\\<phi>.\n               rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n           F)))\n  prv (eqv (sdsj\n             ((\\<lambda>\\<phi>. rawpsubst \\<phi> (zip (map fst txs) us)) `\n              (\\<lambda>\\<phi>.\n                  rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n              F))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n  F \\<subseteq> fmla\n  finite F\n  snd ` set txs \\<subseteq> var\n  fst ` set txs \\<subseteq> trm\n  distinct (map snd txs)\n  set us \\<subseteq> var\n  set us \\<inter> \\<Union> (Fvars ` F) = {}\n  set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {}\n  set us \\<inter> snd ` set txs = {}\n  length us = length txs\n  distinct us\n\ngoal (1 subgoal):\n 1. prv (eqv (rawpsubst\n               (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n               (zip (map fst txs) us))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 rawpsubst\n                  (rawpsubst \\<phi>\n                    (zip (map Var (vs \\<phi>)) (map snd txs)))\n                  (zip (map fst txs) (vs \\<phi>))) `\n             F)))", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prv (eqv (rawpsubst\n                        (rawpsubst (sdsj F)\n                          (zip (map Var us) (map snd txs)))\n                        (zip (map fst txs) us))\n                   (sdsj\n                     ((\\<lambda>\\<phi>.\n                          rawpsubst \\<phi> (zip (map fst txs) us)) `\n                      (\\<lambda>\\<phi>.\n                          rawpsubst \\<phi>\n                           (zip (map Var us) (map snd txs))) `\n                      F)));\n     prv (eqv (sdsj\n                ((\\<lambda>\\<phi>.\n                     rawpsubst \\<phi> (zip (map fst txs) us)) `\n                 (\\<lambda>\\<phi>.\n                     rawpsubst \\<phi> (zip (map Var us) (map snd txs))) `\n                 F))\n           (sdsj\n             ((\\<lambda>\\<phi>.\n                  rawpsubst\n                   (rawpsubst \\<phi>\n                     (zip (map Var (vs \\<phi>)) (map snd txs)))\n                   (zip (map fst txs) (vs \\<phi>))) `\n              F)));\n     F \\<subseteq> fmla; finite F; snd ` set txs \\<subseteq> var;\n     fst ` set txs \\<subseteq> trm; distinct (map snd txs);\n     set us \\<subseteq> var; set us \\<inter> \\<Union> (Fvars ` F) = {};\n     set us \\<inter> \\<Union> (FvarsT ` fst ` set txs) = {};\n     set us \\<inter> snd ` set txs = {}; length us = length txs;\n     distinct us\\<rbrakk>\n    \\<Longrightarrow> prv (eqv (rawpsubst\n                                 (rawpsubst (sdsj F)\n                                   (zip (map Var us) (map snd txs)))\n                                 (zip (map fst txs) us))\n                            (sdsj\n                              ((\\<lambda>\\<phi>.\n                                   rawpsubst\n                                    (rawpsubst \\<phi>\n(zip (map Var (vs \\<phi>)) (map snd txs)))\n                                    (zip (map fst txs) (vs \\<phi>))) `\n                               F)))", "by (rule prv_eqv_trans) (auto intro!: rawpsubst dest!: set_zip_D)"], ["proof (state)\nthis:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (psubst (sdsj F) txs)\n          (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))", "unfolding psubst_def"], ["proof (prove)\nusing this:\n  prv (eqv (rawpsubst (rawpsubst (sdsj F) (zip (map Var us) (map snd txs)))\n             (zip (map fst txs) us))\n        (sdsj\n          ((\\<lambda>\\<phi>.\n               rawpsubst\n                (rawpsubst \\<phi> (zip (map Var (vs \\<phi>)) (map snd txs)))\n                (zip (map fst txs) (vs \\<phi>))) `\n           F)))\n\ngoal (1 subgoal):\n 1. prv (eqv (let xs = map snd txs; ts = map fst txs;\n                  us = getFrN xs ts [sdsj F] (length xs)\n              in rawpsubst (rawpsubst (sdsj F) (zip (map Var us) xs))\n                  (zip ts us))\n          (sdsj\n            ((\\<lambda>\\<phi>.\n                 let xs = map snd txs; ts = map fst txs;\n                     us = getFrN xs ts [\\<phi>] (length xs)\n                 in rawpsubst (rawpsubst \\<phi> (zip (map Var us) xs))\n                     (zip ts us)) `\n             F)))", "by (simp add: Let_def us[symmetric] vss)"], ["proof (state)\nthis:\n  prv (eqv (psubst (sdsj F) txs)\n        (sdsj ((\\<lambda>\\<phi>. psubst \\<phi> txs) ` F)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>context @{locale Deduct_with_False_Disj}\\<close>"], ["", "section \\<open>Deduction with Quantified Variable Renaming Included\\<close>"], ["", "locale Deduct_with_False_Disj_Rename =\nDeduct_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv\n+\nSyntax_with_Connectives_Rename\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv"], ["", "section \\<open>Deduction with PseudoOrder Axioms Included\\<close>"], ["", "text \\<open>We assume a two-variable formula Lq that satisfies two axioms\nresembling the properties of the strict or nonstrict ordering on naturals.\nThe choice of these axioms is motivated by an abstract account of Rosser's trick\nto improve on G?del's First Incompleteness Theorem, reported in our\nCADE 2019 paper~\\cite{DBLP:conf/cade/0001T19}.\\<close>"], ["", "locale Deduct_with_PseudoOrder =\nDeduct_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv\n+\nSyntax_PseudoOrder\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  Lq\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv\nand Lq\n+\nassumes\nLq_num:\n\"let LLq = (\\<lambda> t1 t2. psubst Lq [(t1,zz), (t2,yy)]) in\n \\<forall> \\<phi> \\<in> fmla. \\<forall> q \\<in> num. Fvars \\<phi> = {zz} \\<and> (\\<forall> p \\<in> num. prv (subst \\<phi> p zz))\n    \\<longrightarrow> prv (all zz (imp (LLq (Var zz) q) \\<phi>))\"\nand\nLq_num2:\n\"let LLq = (\\<lambda> t1 t2. psubst Lq [(t1,zz), (t2,yy)]) in\n \\<forall> p \\<in> num. \\<exists> P \\<subseteq> num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r | r. r \\<in> P}) (LLq p (Var yy)))\"\nbegin"], ["", "lemma LLq_num:\nassumes \"\\<phi> \\<in> fmla\" \"q \\<in> num\" \"Fvars \\<phi> = {zz}\" \"\\<forall> p \\<in> num. prv (subst \\<phi> p zz)\"\nshows \"prv (all zz (imp (LLq (Var zz) q) \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "using assms Lq_num"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  q \\<in> num\n  Fvars \\<phi> = {zz}\n  \\<forall>p\\<in>num. prv (subst \\<phi> p zz)\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>\\<phi>\\<in>fmla.\n        \\<forall>q\\<in>num.\n           Fvars \\<phi> = {zz} \\<and>\n           (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n           prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "unfolding LLq_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  q \\<in> num\n  Fvars \\<phi> = {zz}\n  \\<forall>p\\<in>num. prv (subst \\<phi> p zz)\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>\\<phi>\\<in>fmla.\n        \\<forall>q\\<in>num.\n           Fvars \\<phi> = {zz} \\<and>\n           (\\<forall>p\\<in>num. prv (subst \\<phi> p zz)) \\<longrightarrow>\n           prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n\ngoal (1 subgoal):\n 1. prv (all zz (imp (psubst Lq [(Var zz, zz), (q, yy)]) \\<phi>))", "by auto"], ["", "lemma LLq_num2:\nassumes \"p \\<in> num\"\nshows \"\\<exists> P \\<subseteq> num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r | r. r \\<in> P}) (LLq p (Var yy)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "using assms Lq_num2"], ["proof (prove)\nusing this:\n  p \\<in> num\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>p\\<in>num.\n        \\<exists>P\\<subseteq>num.\n           finite P \\<and>\n           prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "unfolding LLq_def"], ["proof (prove)\nusing this:\n  p \\<in> num\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>p\\<in>num.\n        \\<exists>P\\<subseteq>num.\n           finite P \\<and>\n           prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n             (psubst Lq [(p, zz), (Var yy, yy)]))", "by auto"], ["", "end \\<comment> \\<open>context @{locale Deduct_with_PseudoOrder}\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}