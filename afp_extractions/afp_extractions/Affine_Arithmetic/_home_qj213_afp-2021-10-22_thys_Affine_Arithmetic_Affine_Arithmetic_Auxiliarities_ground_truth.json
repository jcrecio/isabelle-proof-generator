{"file_name": "/home/qj213/afp-2021-10-22/thys/Affine_Arithmetic/Affine_Arithmetic_Auxiliarities.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Affine_Arithmetic", "problem_names": ["lemma sum_list_nth_eqI:\n  fixes xs ys::\"'a::monoid_add list\"\n  shows\n    \"length xs = length ys \\<Longrightarrow> (\\<And>x y. (x, y) \\<in> set (zip xs ys) \\<Longrightarrow> x = y) \\<Longrightarrow>\n      sum_list xs = sum_list ys\"", "lemma fst_sum_list: \"fst (sum_list xs) = sum_list (map fst xs)\"", "lemma snd_sum_list: \"snd (sum_list xs) = sum_list (map snd xs)\"", "lemma take_greater_eqI: \"take c xs = take c ys \\<Longrightarrow> c \\<ge> a \\<Longrightarrow> take a xs = take a ys\"", "lemma take_max_eqD:\n  \"take (max a b) xs = take (max a b) ys \\<Longrightarrow> take a xs = take a ys \\<and> take b xs = take b ys\"", "lemma take_Suc_eq: \"take (Suc n) xs = (if n < length xs then take n xs @ [xs ! n] else xs)\"", "lemma rad_of_inverse[simp]: \"deg_of (rad_of w) = w\"\n  and deg_of_inverse[simp]: \"rad_of (deg_of w) = w\"", "lemma deg_of_monoI: \"x \\<le> y \\<Longrightarrow> deg_of x \\<le> deg_of y\"", "lemma rad_of_monoI: \"x \\<le> y \\<Longrightarrow> rad_of x \\<le> rad_of y\"", "lemma deg_of_strict_monoI: \"x < y \\<Longrightarrow> deg_of x < deg_of y\"", "lemma rad_of_strict_monoI: \"x < y \\<Longrightarrow> rad_of x < rad_of y\"", "lemma deg_of_mono[simp]: \"deg_of x \\<le> deg_of y \\<longleftrightarrow> x \\<le> y\"", "lemma rad_of_mono[simp]: \"rad_of x \\<le> rad_of y \\<longleftrightarrow> x \\<le> y\"", "lemma deg_of_strict_mono[simp]: \"deg_of x < deg_of y \\<longleftrightarrow> x < y\"", "lemma rad_of_strict_mono[simp]: \"rad_of x < rad_of y \\<longleftrightarrow> x < y\"", "lemma rad_of_lt_iff: \"rad_of d < r \\<longleftrightarrow> d < deg_of r\"\n  and rad_of_gt_iff: \"rad_of d > r \\<longleftrightarrow> d > deg_of r\"\n  and rad_of_le_iff: \"rad_of d \\<le> r \\<longleftrightarrow> d \\<le> deg_of r\"\n  and rad_of_ge_iff: \"rad_of d \\<ge> r \\<longleftrightarrow> d \\<ge> deg_of r\""], "translations": [["", "lemma sum_list_nth_eqI:\n  fixes xs ys::\"'a::monoid_add list\"\n  shows\n    \"length xs = length ys \\<Longrightarrow> (\\<And>x y. (x, y) \\<in> set (zip xs ys) \\<Longrightarrow> x = y) \\<Longrightarrow>\n      sum_list xs = sum_list ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys;\n     \\<And>x y.\n        (x, y) \\<in> set (zip xs ys) \\<Longrightarrow> x = y\\<rbrakk>\n    \\<Longrightarrow> sum_list xs = sum_list ys", "by (induct xs ys rule: list_induct2) auto"], ["", "lemma fst_sum_list: \"fst (sum_list xs) = sum_list (map fst xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (sum_list xs) = sum_list (map fst xs)", "by (induct xs) auto"], ["", "lemma snd_sum_list: \"snd (sum_list xs) = sum_list (map snd xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (sum_list xs) = sum_list (map snd xs)", "by (induct xs) auto"], ["", "lemma take_greater_eqI: \"take c xs = take c ys \\<Longrightarrow> c \\<ge> a \\<Longrightarrow> take a xs = take a ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n    \\<Longrightarrow> take a xs = take a ys", "proof (induct xs arbitrary: a c ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a c ys.\n       \\<lbrakk>take c [] = take c ys; a \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take a [] = take a ys\n 2. \\<And>a xs aa c ys.\n       \\<lbrakk>\\<And>a c ys.\n                   \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                   \\<Longrightarrow> take a xs = take a ys;\n        take c (a # xs) = take c ys; aa \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take aa (a # xs) = take aa ys", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>take ?c xs = take ?c ?ys; ?a \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> take ?a xs = take ?a ?ys\n  take c (x # xs) = take c ys\n  a \\<le> c\n\ngoal (2 subgoals):\n 1. \\<And>a c ys.\n       \\<lbrakk>take c [] = take c ys; a \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take a [] = take a ys\n 2. \\<And>a xs aa c ys.\n       \\<lbrakk>\\<And>a c ys.\n                   \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                   \\<Longrightarrow> take a xs = take a ys;\n        take c (a # xs) = take c ys; aa \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take aa (a # xs) = take aa ys", "note ICons = Cons"], ["proof (state)\nthis:\n  \\<lbrakk>take ?c xs = take ?c ?ys; ?a \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> take ?a xs = take ?a ?ys\n  take c (x # xs) = take c ys\n  a \\<le> c\n\ngoal (2 subgoals):\n 1. \\<And>a c ys.\n       \\<lbrakk>take c [] = take c ys; a \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take a [] = take a ys\n 2. \\<And>a xs aa c ys.\n       \\<lbrakk>\\<And>a c ys.\n                   \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                   \\<Longrightarrow> take a xs = take a ys;\n        take c (a # xs) = take c ys; aa \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take aa (a # xs) = take aa ys", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>take ?c xs = take ?c ?ys; ?a \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> take ?a xs = take ?a ?ys\n  take c (x # xs) = take c ys\n  a \\<le> c\n\ngoal (1 subgoal):\n 1. take a (x # xs) = take a ys", "proof (cases a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c ys a.\n                \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                \\<Longrightarrow> take a xs = take a ys;\n     take c (x # xs) = take c ys; a \\<le> c; a = 0\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>c ys a.\n                   \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                   \\<Longrightarrow> take a xs = take a ys;\n        take c (x # xs) = take c ys; a \\<le> c; a = Suc nat\\<rbrakk>\n       \\<Longrightarrow> take a (x # xs) = take a ys", "case (Suc b)"], ["proof (state)\nthis:\n  a = Suc b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c ys a.\n                \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                \\<Longrightarrow> take a xs = take a ys;\n     take c (x # xs) = take c ys; a \\<le> c; a = 0\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>c ys a.\n                   \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                   \\<Longrightarrow> take a xs = take a ys;\n        take c (x # xs) = take c ys; a \\<le> c; a = Suc nat\\<rbrakk>\n       \\<Longrightarrow> take a (x # xs) = take a ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Suc b\n\ngoal (1 subgoal):\n 1. take a (x # xs) = take a ys", "using Cons(2,3)"], ["proof (prove)\nusing this:\n  a = Suc b\n  take c (x # xs) = take c ys\n  a \\<le> c\n\ngoal (1 subgoal):\n 1. take a (x # xs) = take a ys", "proof (cases ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n     ys = []\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys\n 2. \\<And>a list.\n       \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n        ys = a # list\\<rbrakk>\n       \\<Longrightarrow> take a (x # xs) = take a ys", "case (Cons z zs)"], ["proof (state)\nthis:\n  ys = z # zs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n     ys = []\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys\n 2. \\<And>a list.\n       \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n        ys = a # list\\<rbrakk>\n       \\<Longrightarrow> take a (x # xs) = take a ys", "from ICons"], ["proof (chain)\npicking this:\n  \\<lbrakk>take ?c xs = take ?c ?ys; ?a \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> take ?a xs = take ?a ?ys\n  take c (x # xs) = take c ys\n  a \\<le> c", "obtain d where c: \"c = Suc d\""], ["proof (prove)\nusing this:\n  \\<lbrakk>take ?c xs = take ?c ?ys; ?a \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> take ?a xs = take ?a ?ys\n  take c (x # xs) = take c ys\n  a \\<le> c\n\ngoal (1 subgoal):\n 1. (\\<And>d. c = Suc d \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto simp: Cons Suc dest!: Suc_le_D)"], ["proof (state)\nthis:\n  c = Suc d\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n     ys = []\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys\n 2. \\<And>a list.\n       \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n        ys = a # list\\<rbrakk>\n       \\<Longrightarrow> take a (x # xs) = take a ys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. take a (x # xs) = take a ys", "using ICons(2,3)"], ["proof (prove)\nusing this:\n  take c (x # xs) = take c ys\n  a \\<le> c\n\ngoal (1 subgoal):\n 1. take a (x # xs) = take a ys", "by (auto simp: Suc Cons c intro: ICons(1))"], ["proof (state)\nthis:\n  take a (x # xs) = take a ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Suc b; take c (x # xs) = take c ys; a \\<le> c;\n     ys = []\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys", "qed simp"], ["proof (state)\nthis:\n  take a (x # xs) = take a ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c ys a.\n                \\<lbrakk>take c xs = take c ys; a \\<le> c\\<rbrakk>\n                \\<Longrightarrow> take a xs = take a ys;\n     take c (x # xs) = take c ys; a \\<le> c; a = 0\\<rbrakk>\n    \\<Longrightarrow> take a (x # xs) = take a ys", "qed simp"], ["proof (state)\nthis:\n  take a (x # xs) = take a ys\n\ngoal (1 subgoal):\n 1. \\<And>a c ys.\n       \\<lbrakk>take c [] = take c ys; a \\<le> c\\<rbrakk>\n       \\<Longrightarrow> take a [] = take a ys", "qed (metis le_0_eq take_eq_Nil)"], ["", "lemma take_max_eqD:\n  \"take (max a b) xs = take (max a b) ys \\<Longrightarrow> take a xs = take a ys \\<and> take b xs = take b ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (max a b) xs = take (max a b) ys \\<Longrightarrow>\n    take a xs = take a ys \\<and> take b xs = take b ys", "by (metis max.cobounded1 max.cobounded2 take_greater_eqI)"], ["", "lemma take_Suc_eq: \"take (Suc n) xs = (if n < length xs then take n xs @ [xs ! n] else xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc n) xs = (if n < length xs then take n xs @ [xs ! n] else xs)", "by (auto simp: take_Suc_conv_app_nth)"], ["", "subsection \\<open>Radiant and Degree\\<close>"], ["", "definition \"rad_of w = w * pi / 180\""], ["", "definition \"deg_of w = 180 * w / pi\""], ["", "lemma rad_of_inverse[simp]: \"deg_of (rad_of w) = w\"\n  and deg_of_inverse[simp]: \"rad_of (deg_of w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deg_of (rad_of w) = w &&& rad_of (deg_of w) = w", "by (auto simp: deg_of_def rad_of_def)"], ["", "lemma deg_of_monoI: \"x \\<le> y \\<Longrightarrow> deg_of x \\<le> deg_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> deg_of x \\<le> deg_of y", "by (auto simp: deg_of_def intro!: divide_right_mono)"], ["", "lemma rad_of_monoI: \"x \\<le> y \\<Longrightarrow> rad_of x \\<le> rad_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> rad_of x \\<le> rad_of y", "by (auto simp: rad_of_def)"], ["", "lemma deg_of_strict_monoI: \"x < y \\<Longrightarrow> deg_of x < deg_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> deg_of x < deg_of y", "by (auto simp: deg_of_def intro!: divide_strict_right_mono)"], ["", "lemma rad_of_strict_monoI: \"x < y \\<Longrightarrow> rad_of x < rad_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> rad_of x < rad_of y", "by (auto simp: rad_of_def)"], ["", "lemma deg_of_mono[simp]: \"deg_of x \\<le> deg_of y \\<longleftrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deg_of x \\<le> deg_of y) = (x \\<le> y)", "using rad_of_monoI"], ["proof (prove)\nusing this:\n  ?x \\<le> ?y \\<Longrightarrow> rad_of ?x \\<le> rad_of ?y\n\ngoal (1 subgoal):\n 1. (deg_of x \\<le> deg_of y) = (x \\<le> y)", "by (fastforce intro!: deg_of_monoI)"], ["", "lemma rad_of_mono[simp]: \"rad_of x \\<le> rad_of y \\<longleftrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rad_of x \\<le> rad_of y) = (x \\<le> y)", "using rad_of_monoI"], ["proof (prove)\nusing this:\n  ?x \\<le> ?y \\<Longrightarrow> rad_of ?x \\<le> rad_of ?y\n\ngoal (1 subgoal):\n 1. (rad_of x \\<le> rad_of y) = (x \\<le> y)", "by (fastforce intro!: deg_of_monoI)"], ["", "lemma deg_of_strict_mono[simp]: \"deg_of x < deg_of y \\<longleftrightarrow> x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deg_of x < deg_of y) = (x < y)", "using rad_of_strict_monoI"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> rad_of ?x < rad_of ?y\n\ngoal (1 subgoal):\n 1. (deg_of x < deg_of y) = (x < y)", "by (fastforce intro!: deg_of_strict_monoI)"], ["", "lemma rad_of_strict_mono[simp]: \"rad_of x < rad_of y \\<longleftrightarrow> x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rad_of x < rad_of y) = (x < y)", "using rad_of_strict_monoI"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> rad_of ?x < rad_of ?y\n\ngoal (1 subgoal):\n 1. (rad_of x < rad_of y) = (x < y)", "by (fastforce intro!: deg_of_strict_monoI)"], ["", "lemma rad_of_lt_iff: \"rad_of d < r \\<longleftrightarrow> d < deg_of r\"\n  and rad_of_gt_iff: \"rad_of d > r \\<longleftrightarrow> d > deg_of r\"\n  and rad_of_le_iff: \"rad_of d \\<le> r \\<longleftrightarrow> d \\<le> deg_of r\"\n  and rad_of_ge_iff: \"rad_of d \\<ge> r \\<longleftrightarrow> d \\<ge> deg_of r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rad_of d < r) = (d < deg_of r) &&&\n     (r < rad_of d) = (deg_of r < d)) &&&\n    (rad_of d \\<le> r) = (d \\<le> deg_of r) &&&\n    (r \\<le> rad_of d) = (deg_of r \\<le> d)", "using rad_of_strict_mono[of d \"deg_of r\"] rad_of_mono[of d \"deg_of r\"]"], ["proof (prove)\nusing this:\n  (rad_of d < rad_of (deg_of r)) = (d < deg_of r)\n  (rad_of d \\<le> rad_of (deg_of r)) = (d \\<le> deg_of r)\n\ngoal (1 subgoal):\n 1. ((rad_of d < r) = (d < deg_of r) &&&\n     (r < rad_of d) = (deg_of r < d)) &&&\n    (rad_of d \\<le> r) = (d \\<le> deg_of r) &&&\n    (r \\<le> rad_of d) = (deg_of r \\<le> d)", "by auto"], ["", "end"]]}