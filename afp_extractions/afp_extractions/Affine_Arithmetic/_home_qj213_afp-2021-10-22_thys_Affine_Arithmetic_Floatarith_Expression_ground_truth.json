{"file_name": "/home/qj213/afp-2021-10-22/thys/Affine_Arithmetic/Floatarith_Expression.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Affine_Arithmetic", "problem_names": ["lemma length_interpret_floatariths[simp]: \"length (interpret_floatariths fas xs) = length fas\"", "lemma interpret_floatariths_nth[simp]:\n  \"interpret_floatariths fas xs ! n = interpret_floatarith (fas ! n) xs\"\n  if \"n < length fas\"", "lemma interpret_floatarith_uminus[simp]:\n  \"interpret_floatarith (- f) xs = - interpret_floatarith f xs\"", "lemma interpret_floatarith_plus[simp]:\n  \"interpret_floatarith (f + g) xs = interpret_floatarith f xs + interpret_floatarith g xs\"", "lemma interpret_floatarith_minus[simp]:\n  \"interpret_floatarith (f - g) xs = interpret_floatarith f xs - interpret_floatarith g xs\"", "lemma interpret_floatarith_inverse[simp]:\n  \"interpret_floatarith (inverse f) xs = inverse (interpret_floatarith f xs)\"", "lemma interpret_floatarith_times[simp]:\n  \"interpret_floatarith (f * g) xs = interpret_floatarith f xs * interpret_floatarith g xs\"", "lemma interpret_floatarith_divide[simp]:\n  \"interpret_floatarith (f div g) xs = interpret_floatarith f xs / interpret_floatarith g xs\"", "lemma interpret_floatarith_one[simp]:\n  \"interpret_floatarith 1 xs = 1\"", "lemma interpret_floatarith_zero[simp]:\n  \"interpret_floatarith 0 xs = 0\"", "lemma interpret_R\\<^sub>e[simp]: \"interpret_floatarith (R\\<^sub>e x) xs = real_of_rat x\"", "lemma interpret_floatarith_Sin[simp]:\n  \"interpret_floatarith (Sin x) vs = sin (interpret_floatarith x vs)\"", "lemma interpret_Half[simp]: \"interpret_floatarith (Half x) xs = interpret_floatarith x xs / 2\"", "lemma interpret_floatarith_Tan[simp]:\n  \"interpret_floatarith (Tan x) vs = tan (interpret_floatarith x vs)\"", "lemma interpret_floatarith_Sum\\<^sub>e[simp]:\n  \"interpret_floatarith (Sum\\<^sub>e f x) vs = (\\<Sum>i\\<leftarrow>x. interpret_floatarith (f i) vs)\"", "lemma interpret_floatarith_norm[simp]:\n  assumes [simp]: \"length x = DIM('a)\"\n  shows \"interpret_floatarith (Norm x) vs = norm (einterpret x vs::'a::executable_euclidean_space)\"", "lemma fold_const_fa[simp]: \"interpret_floatarith (fold_const_fa fa) xs = interpret_floatarith fa xs\"", "lemma\n  interpret_floatarith_eq_take_max_VarI:\n  assumes \"take (max_Var_floatarith ra) ys = take (max_Var_floatarith ra) zs\"\n  shows \"interpret_floatarith ra ys = interpret_floatarith ra zs\"", "lemma\n  interpret_floatariths_eq_take_max_VarI:\n  assumes \"take (max_Var_floatariths ea) ys = take (max_Var_floatariths ea) zs\"\n  shows \"interpret_floatariths ea ys = interpret_floatariths ea zs\"", "lemma Max_Image_distrib:\n  includes no_floatarith_notation\n  assumes \"finite X\" \"X \\<noteq> {}\"\n  shows \"Max ((\\<lambda>x. max (f1 x) (f2 x)) ` X) = max (Max (f1 ` X)) (Max (f2 ` X))\"", "lemma max_Var_floatarith_simps[simp]:\n  \"max_Var_floatarith (a / b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (a * b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (a + b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (a - b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (- b) = (max_Var_floatarith b)\"", "lemma max_Var_floatariths_Max:\n  \"max_Var_floatariths xs = (if set xs = {} then 0 else linorder_class.Max (max_Var_floatarith ` set xs))\"", "lemma max_Var_floatariths_map_plus[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i + fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\"", "lemma max_Var_floatariths_map_times[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i * fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\"", "lemma max_Var_floatariths_map_divide[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i / fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\"", "lemma max_Var_floatariths_map_uminus[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. - fa1 i) xs) = max_Var_floatariths (map fa1 xs)\"", "lemma max_Var_floatariths_map_const[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa) xs) = (if xs = [] then 0 else max_Var_floatarith fa)\"", "lemma max_Var_floatariths_map_minus[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i - fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\"", "lemma fresh_floatarith_subst:\n  fixes v::float\n  assumes \"fresh_floatarith e x\"\n  assumes \"x < length vs\"\n  shows \"interpret_floatarith e (vs[x:=v]) = interpret_floatarith e vs\"", "lemma fresh_floatarith_max_Var:\n  assumes \"max_Var_floatarith ea \\<le> i\"\n  shows \"fresh_floatarith ea i\"", "lemma fresh_floatariths_max_Var:\n  assumes \"max_Var_floatariths ea \\<le> i\"\n  shows \"fresh_floatariths ea i\"", "lemma\n  interpret_floatariths_take_eqI:\n  assumes \"take n ys = take n zs\"\n  assumes \"max_Var_floatariths ea \\<le> n\"\n  shows \"interpret_floatariths ea ys = interpret_floatariths ea zs\"", "lemma\n  interpret_floatarith_fresh_eqI:\n  assumes \"\\<And>i. fresh_floatarith ea i \\<or> (i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i)\"\n  shows \"interpret_floatarith ea ys = interpret_floatarith ea zs\"", "lemma\n  interpret_floatariths_fresh_eqI:\n  assumes \"\\<And>i. fresh_floatariths ea i \\<or> (i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i)\"\n  shows \"interpret_floatariths ea ys = interpret_floatariths ea zs\"", "lemma\n  interpret_floatarith_max_Var_cong:\n  assumes \"\\<And>i. i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatarith f ys = interpret_floatarith f xs\"", "lemma\n  interpret_floatarith_fresh_cong:\n  assumes \"\\<And>i. \\<not>fresh_floatarith f i \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatarith f ys = interpret_floatarith f xs\"", "lemma max_Var_floatarith_le_max_Var_floatariths:\n  \"fa \\<in> set fas \\<Longrightarrow> max_Var_floatarith fa \\<le> max_Var_floatariths fas\"", "lemma max_Var_floatarith_le_max_Var_floatariths_nth:\n  \"n < length fas \\<Longrightarrow> max_Var_floatarith (fas ! n) \\<le> max_Var_floatariths fas\"", "lemma max_Var_floatariths_leI:\n  assumes \"\\<And>i. i < length xs \\<Longrightarrow> max_Var_floatarith (xs ! i) \\<le> F\"\n  shows \"max_Var_floatariths xs \\<le> F\"", "lemma fresh_floatariths_map_Var[simp]:\n  \"fresh_floatariths (map floatarith.Var xs) i \\<longleftrightarrow> i \\<notin> set xs\"", "lemma max_Var_floatarith_fold_const_fa:\n  \"max_Var_floatarith (fold_const_fa fa) \\<le> max_Var_floatarith fa\"", "lemma max_Var_floatariths_fold_const_fa:\n  \"max_Var_floatariths (map fold_const_fa xs) \\<le> max_Var_floatariths xs\"", "lemma interpret_form_max_Var_cong:\n  assumes \"\\<And>i. i < max_Var_form f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_form f xs = interpret_form f ys\"", "lemma max_Var_floatariths_lessI: \"i < max_Var_floatarith (fas ! j) \\<Longrightarrow> j < length fas \\<Longrightarrow> i < max_Var_floatariths fas\"", "lemma interpret_floatariths_max_Var_cong:\n  assumes \"\\<And>i. i < max_Var_floatariths f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatariths f ys = interpret_floatariths f xs\"", "lemma max_Var_floatarithimage_Var[simp]: \"max_Var_floatarith ` Var ` X = Suc ` X\"", "lemma max_Var_floatariths_map_Var[simp]:\n  \"max_Var_floatariths (map Var xs) = (if xs = [] then 0 else Suc (linorder_class.Max (set xs)))\"", "lemma Max_atLeastLessThan_nat[simp]: \"a < b \\<Longrightarrow> linorder_class.Max {a..<b} = b - 1\" for a b::nat", "lemma isDERIV_Power_iff: \"isDERIV j (Power fa n) xs = (if n = 0 then True else isDERIV j fa xs)\"", "lemma isDERIV_max_Var_floatarithI:\n  assumes \"isDERIV n f ys\"\n  assumes \"\\<And>i. i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"isDERIV n f xs\"", "lemma isFDERIV_I: \"(\\<And>i j. i < n \\<Longrightarrow> j < n \\<Longrightarrow> isDERIV (xs ! i) (fas ! j) vs) \\<Longrightarrow>\n  length fas = n \\<Longrightarrow> length xs = n \\<Longrightarrow> isFDERIV n xs fas vs\"", "lemma isFDERIV_isDERIV_D: \"isFDERIV n xs fas vs \\<Longrightarrow> i < n \\<Longrightarrow> j < n \\<Longrightarrow> isDERIV (xs ! i) (fas ! j) vs\"", "lemma isFDERIV_lengthD: \"length fas = n\" \"length xs = n\" if \"isFDERIV n xs fas vs\"", "lemma isFDERIV_uptD: \"isFDERIV n [0..<n] fas vs \\<Longrightarrow> i < n \\<Longrightarrow> j < n \\<Longrightarrow> isDERIV i (fas ! j) vs\"", "lemma isFDERIV_max_Var_congI: \"isFDERIV n xs fas ws\"\n  if f: \"isFDERIV n xs fas vs\" and c: \"(\\<And>i. i < max_Var_floatariths fas \\<Longrightarrow> vs ! i = ws ! i)\"", "lemma isFDERIV_max_Var_cong: \"isFDERIV n xs fas ws \\<longleftrightarrow> isFDERIV n xs fas vs\"\n  if c: \"(\\<And>i. i < max_Var_floatariths fas \\<Longrightarrow> vs ! i = ws ! i)\"", "lemma isDERIV_max_VarI:\n  \"i \\<ge> max_Var_floatarith fa \\<Longrightarrow> isDERIV j fa xs \\<Longrightarrow> isDERIV i fa xs\"", "lemmas max_Var_floatarith_le_max_Var_floatariths_nthI =\n  max_Var_floatarith_le_max_Var_floatariths_nth[THEN order_trans]", "lemma\n  isFDERIV_appendD1:\n  assumes \"isFDERIV (J + K) [0..<J + K] (es @ rs) xs\"\n  assumes \"length es = J\"\n  assumes \"length rs = K\"\n  assumes \"max_Var_floatariths es \\<le> J\"\n  shows \"isFDERIV J [0..<J] (es) xs\"", "lemma interpret_floatariths_Var[simp]:\n  \"interpret_floatariths (map floatarith.Var xs) vs = (map (nth vs) xs)\"", "lemma max_Var_floatariths_append[simp]: \"max_Var_floatariths (xs @ ys) = max (max_Var_floatariths xs) (max_Var_floatariths ys)\"", "lemma map_nth_append_upt[simp]:\n  assumes \"a \\<ge> length xs\"\n  shows \"map ((!) (xs @ ys)) [a..<b] = map ((!) ys) [a - length xs..<b - length xs]\"", "lemma map_nth_Cons_upt[simp]:\n  assumes \"a > 0\"\n  shows \"map ((!) (x # ys)) [a..<b] = map ((!) ys) [a - Suc 0..<b - Suc 0]\"", "lemma map_nth_eq_self[simp]:\n  shows \"length fas = l \\<Longrightarrow> (map ((!) fas) [0..<l]) = fas\"", "lemma\n  isFDERIV_appendI1:\n  assumes \"isFDERIV J [0..<J] (es) xs\"\n  assumes \"\\<And>i j. i < J + K \\<Longrightarrow> j < K \\<Longrightarrow> isDERIV i (rs ! j) xs\"\n  assumes \"length es = J\"\n  assumes \"length rs = K\"\n  assumes \"max_Var_floatariths es \\<le> J\"\n  shows \"isFDERIV (J + K) [0..<J + K] (es @ rs) xs\"", "lemma matrix_matrix_mult_zero[simp]:\n  \"a ** 0 = 0\" \"0 ** a = 0\"", "lemma scaleR_blinfun_compose_left: \"i *\\<^sub>R (A o\\<^sub>L B) = i *\\<^sub>R A o\\<^sub>L B\"\n  and scaleR_blinfun_compose_right: \"i *\\<^sub>R (A o\\<^sub>L B) = A o\\<^sub>L i *\\<^sub>R B\"", "lemma\n  matrix_blinfun_compose:\n  fixes A B::\"(real ^ 'n) \\<Rightarrow>\\<^sub>L (real ^ 'n)\"\n  shows \"matrix (A o\\<^sub>L B) = (matrix A) ** (matrix B)\"", "lemma matrix_add_rdistrib: \"((B + C) ** A) = (B ** A) + (C ** A)\"", "lemma matrix_scaleR_right: \"r *\\<^sub>R (a::'a::real_algebra_1^'n^'m) ** b = r *\\<^sub>R (a ** b)\"", "lemma matrix_scaleR_left: \"(a::'a::real_algebra_1^'n^'m) ** r *\\<^sub>R b = r *\\<^sub>R (a ** b)\"", "lemma bounded_bilinear_matrix_matrix_mult[bounded_bilinear]:\n   \"bounded_bilinear ((**)::\n    ('a::{euclidean_space, real_normed_algebra_1}^'n^'m) \\<Rightarrow>\n    ('a::{euclidean_space, real_normed_algebra_1}^'p^'n) \\<Rightarrow>\n    ('a::{euclidean_space, real_normed_algebra_1}^'p^'m))\"", "lemma norm_axis: \"norm (axis ia 1::'a::{real_normed_algebra_1}^'n) = 1\"", "lemma abs_vec_nth_blinfun_apply_lemma:\n  fixes x::\"(real^'n) \\<Rightarrow>\\<^sub>L (real^'m)\"\n  shows \"abs (vec_nth (blinfun_apply x (axis ia 1)) i) \\<le> norm x\"", "lemma bounded_linear_matrix_blinfun_apply: \"bounded_linear (\\<lambda>x::(real^'n) \\<Rightarrow>\\<^sub>L (real^'m). matrix (blinfun_apply x))\"", "lemma matrix_has_derivative:\n  shows \"((\\<lambda>x::(real^'n)\\<Rightarrow>\\<^sub>L(real^'n). matrix (blinfun_apply x)) has_derivative (\\<lambda>h. matrix (blinfun_apply h))) (at x)\"", "lemma\n  matrix_comp_has_derivative[derivative_intros]:\n  fixes f::\"'a::real_normed_vector \\<Rightarrow> ((real^'n)\\<Rightarrow>\\<^sub>L(real^'n))\"\n  assumes \"(f has_derivative f') (at x within S)\"\n  shows \"((\\<lambda>x. matrix (blinfun_apply (f x))) has_derivative (\\<lambda>x. matrix (f' x))) (at x within S)\"", "lemma interpret_floatarith_inner_eq:\n  assumes \"length xs = length ys\"\n  shows \"interpret_floatarith (inner_floatariths xs ys) vs =\n    (\\<Sum>i<length ys. (interpret_floatariths xs vs ! i) * (interpret_floatariths ys vs ! i))\"", "lemma\n  interpret_floatarith_inner_floatariths:\n  assumes \"length xs = DIM('a::executable_euclidean_space)\"\n  assumes \"length ys = DIM('a)\"\n  assumes \"eucl_of_list (interpret_floatariths xs vs) = (x::'a)\"\n  assumes \"eucl_of_list (interpret_floatariths ys vs) = y\"\n  shows \"interpret_floatarith (inner_floatariths xs ys) vs = x \\<bullet> y\"", "lemma max_Var_floatarith_inner_floatariths[simp]:\n  assumes \"length f = length g\"\n  shows \"max_Var_floatarith (inner_floatariths f g) = max (max_Var_floatariths f) (max_Var_floatariths g)\"", "lemma interpret_floatariths_map: \"interpret_floatariths (map f xs) vs = map (\\<lambda>x. interpret_floatarith (f x) vs) xs\"", "lemma max_Var_floatarith_DERIV_floatarith:\n  \"max_Var_floatarith (DERIV_floatarith x fa) \\<le> max_Var_floatarith fa\"", "lemma max_Var_floatarith_FDERIV_floatarith:\n  \"length xs = length d \\<Longrightarrow>\n    max_Var_floatarith (FDERIV_floatarith fa xs d) \\<le> max (max_Var_floatarith fa) (max_Var_floatariths d)\"", "lemma max_Var_floatarith_FDERIV_floatariths:\n  \"length xs = length d \\<Longrightarrow> max_Var_floatariths (FDERIV_floatariths fa xs d) \\<le> max (max_Var_floatariths fa) (max_Var_floatariths d)\"", "lemma length_FDERIV_floatariths[simp]:\n  \"length (FDERIV_floatariths fas xs ds) = length fas\"", "lemma FDERIV_floatariths_nth[simp]:\n  \"i < length fas \\<Longrightarrow> FDERIV_floatariths fas xs ds ! i  = FDERIV_floatarith (fas ! i) xs ds\"", "lemma FDERIV_n_floatariths_Suc[simp]:\n  \"FDERIV_n_floatariths fa xs ds 0 = fa\"\n  \"FDERIV_n_floatariths fa xs ds (Suc n) = FDERIV_floatariths (FDERIV_n_floatariths fa xs ds n) xs ds\"", "lemma length_FDERIV_n_floatariths[simp]: \"length (FDERIV_n_floatariths fa xs ds n) = length fa\"", "lemma max_Var_floatarith_FDERIV_n_floatariths:\n  \"length xs = length d \\<Longrightarrow> max_Var_floatariths (FDERIV_n_floatariths fa xs d n) \\<le> max (max_Var_floatariths fa) (max_Var_floatariths d)\"", "lemma interpret_floatarith_FDERIV_floatarith_cong:\n  assumes rq: \"\\<And>i. i < max_Var_floatarith f \\<Longrightarrow> rs ! i = qs ! i\"\n  assumes [simp]: \"length ds = length xs\" \"length es = length xs\"\n  assumes \"interpret_floatariths ds qs = interpret_floatariths es rs\"\n  shows \"interpret_floatarith (FDERIV_floatarith f xs ds) qs =\n   interpret_floatarith (FDERIV_floatarith f xs es) rs\"", "theorem\n  matrix_vector_mult_eq_list_of_eucl_nth:\n  \"(M::real^'n::enum^'m::enum) *v v =\n    (\\<Sum>i<CARD('m).\n      (\\<Sum>j<CARD('n). list_of_eucl M ! (i * CARD('n) + j) * list_of_eucl v ! j) *\\<^sub>R Basis_list ! i)\"", "lemma length_mmult_fa[simp]: \"length (mmult_fa l m n AS BS) = l * n\"", "lemma einterpret_mmult_fa:\n  assumes [simp]: \"Dn = CARD('n::enum)\" \"Dm = CARD('m::enum)\" \"Dl = CARD('l::enum)\"\n    \"length A = CARD('l)*CARD('m)\" \"length B = CARD('m)*CARD('n)\"\n  shows \"einterpret (mmult_fa Dl Dm Dn A B) vs = (einterpret A vs::((real, 'm::enum) vec, 'l) vec) ** (einterpret B vs::((real, 'n::enum) vec, 'm) vec)\"", "lemma max_Var_floatariths_mmult_fa:\n  assumes [simp]: \"length A = D * E\" \"length B = E * F\"\n  shows \"max_Var_floatariths (mmult_fa D E F A B) \\<le> max (max_Var_floatariths A) (max_Var_floatariths B)\"", "lemma isDERIV_inner_iff:\n  assumes \"length xs = length ys\"\n  shows \"isDERIV i (inner_floatariths xs ys) vs \\<longleftrightarrow>\n    (\\<forall>k < length xs. isDERIV i (xs ! k) vs) \\<and> (\\<forall>k < length ys. isDERIV i (ys ! k) vs)\"", "lemma isDERIV_Power: \"isDERIV x (fa) vs \\<Longrightarrow> isDERIV x (fa ^\\<^sub>e n) vs\"", "lemma isDERIV_mmult_fa_nth:\n  assumes \"\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs\"\n  assumes \"\\<And>j. j < E * F \\<Longrightarrow> isDERIV i (B ! j) xs\"\n  assumes [simp]: \"length A = D * E\" \"length B = E * F\" \"j < D * F\"\n  shows \"isDERIV i (mmult_fa D E F A B ! j) xs\"", "lemma einterpret_mvmult_fa:\n  assumes [simp]: \"Dn = CARD('n::enum)\" \"Dm = CARD('m::enum)\"\n    \"length A = CARD('n)*CARD('m)\" \"length B = CARD('m)\"\n  shows \"einterpret (mvmult_fa Dn Dm A B) vs = (einterpret A vs::((real, 'm::enum) vec, 'n) vec) *v (einterpret B vs::(real, 'm) vec)\"", "lemma max_Var_floatariths_mvult_fa:\n  assumes [simp]: \"length A = D * E\" \"length B = E\"\n  shows \"max_Var_floatariths (mvmult_fa D E A B) \\<le> max (max_Var_floatariths A) (max_Var_floatariths B)\"", "lemma isDERIV_mvmult_fa_nth:\n  assumes \"\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs\"\n  assumes \"\\<And>j. j < E \\<Longrightarrow> isDERIV i (B ! j) xs\"\n  assumes [simp]: \"length A = D * E\" \"length B = E\" \"j < D\"\n  shows \"isDERIV i (mvmult_fa D E A B ! j) xs\"", "lemma max_Var_floatariths_mapI:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> max_Var_floatarith (f x) \\<le> m\"\n  shows \"max_Var_floatariths (map f xs) \\<le> m\"", "lemma\n  max_Var_floatariths_list_updateI:\n  assumes \"max_Var_floatariths xs \\<le> m\"\n  assumes \"max_Var_floatarith v \\<le> m\"\n  assumes \"i < length xs\"\n  shows \"max_Var_floatariths (xs[i := v]) \\<le> m\"", "lemma\n  max_Var_floatariths_replicateI:\n  assumes \"max_Var_floatarith v \\<le> m\"\n  shows \"max_Var_floatariths (replicate n v) \\<le> m\"", "lemma FDERIV_n_floatariths_nth: \"i < length fas \\<Longrightarrow> FDERIV_n_floatariths fas xs ds n ! i = FDERIV_n_floatarith (fas ! i) xs ds n\"", "lemma einterpret_fold_const_fa[simp]:\n  \"(einterpret (map (\\<lambda>i. fold_const_fa (fa i)) xs) vs::'a::executable_euclidean_space) =\n    einterpret (map fa xs) vs\" if \"length xs = DIM('a)\"", "lemma einterpret_plus[simp]:\n  shows \"(einterpret (map (\\<lambda>i. fa1 i + fa2 i) [0..<DIM('a)]) vs::'a) =\n    einterpret (map fa1 [0..<DIM('a::executable_euclidean_space)]) vs + einterpret (map fa2 [0..<DIM('a)]) vs\"", "lemma einterpret_uminus[simp]:\n  shows \"(einterpret (map (\\<lambda>i. - fa1 i) [0..<DIM('a)]) vs::'a::executable_euclidean_space) =\n    - einterpret (map fa1 [0..<DIM('a)]) vs\"", "lemma diff_floatarith_conv_add_uminus: \"a - b = a + - b\" for a b::floatarith", "lemma einterpret_minus[simp]:\n  shows \"(einterpret (map (\\<lambda>i. fa1 i - fa2 i) [0..<DIM('a)]) vs::'a::executable_euclidean_space) =\n    einterpret (map fa1 [0..<DIM('a)]) vs - einterpret (map fa2 [0..<DIM('a)]) vs\"", "lemma einterpret_scaleR[simp]:\n  shows \"(einterpret (map (\\<lambda>i. fa1 * fa2 i) [0..<DIM('a)]) vs::'a::executable_euclidean_space) =\n    interpret_floatarith (fa1) vs *\\<^sub>R einterpret (map fa2 [0..<DIM('a)]) vs\"", "lemma einterpret_nth[simp]:\n  assumes [simp]: \"length xs = DIM('a)\"\n  shows \"(einterpret (map ((!) xs) [0..<DIM('a)]) vs::'a::executable_euclidean_space) = einterpret xs vs\"", "lemma length_mvmult_fa[simp]: \"length (mvmult_fa D E xs ys) = D\"", "lemma interpret_mvmult_nth:\n  assumes \"D = CARD('n::enum)\"\n  assumes \"E = CARD('m::enum)\"\n  assumes \"length xs = D * E\"\n  assumes \"length ys = E\"\n  assumes \"n < CARD('n)\"\n  shows \"interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    ((einterpret xs vs::((real, 'm) vec, 'n) vec) *v einterpret ys vs) \\<bullet> (Basis_list ! n)\"", "lemmas [simp del] = fold_const_fa.simps", "lemma take_eq_map_nth: \"n < length xs \\<Longrightarrow> take n xs = map ((!) xs) [0..<n]\"", "lemmas [simp del] = upt_rec_numeral", "lemmas map_nth_eq_take = take_eq_map_nth[symmetric]", "lemma interpret_Floatreal: \"interpret_floatarith (floatarith.Num f) vs = (real_of_float f)\"", "lemma eucl_of_list_interpret_floatariths_cong:\n  fixes y::\"'a::executable_euclidean_space\"\n  assumes \"\\<And>b. b \\<in> Basis \\<Longrightarrow> interpret_floatarith (fa (index Basis_list b)) vs = y \\<bullet> b\"\n  assumes \"length xs = DIM('a)\"\n  shows \"eucl_of_list (interpret_floatariths (map fa [0..<DIM('a)]) vs) = y\"", "lemma interpret_floatariths_fold_const_fa[simp]:\n  \"interpret_floatariths (map fold_const_fa ds) = interpret_floatariths ds\"", "lemma interpret_floatarith_subst_floatarith:\n  assumes \"max_Var_floatarith fa \\<le> D\"\n  shows \"interpret_floatarith (subst_floatarith s fa) vs =\n    interpret_floatarith fa (map (\\<lambda>i. interpret_floatarith (s i) vs) [0..<D])\"", "lemma max_Var_floatarith_subst_floatarith_le[THEN order_trans]:\n  assumes \"length xs \\<ge> max_Var_floatarith fa\"\n  shows \"max_Var_floatarith (subst_floatarith ((!) xs) fa) \\<le> max_Var_floatariths xs\"", "lemma max_Var_floatariths_subst_floatarith_le[THEN order_trans]:\n  assumes \"length xs \\<ge> max_Var_floatariths fas\"\n  shows \"max_Var_floatariths (map (subst_floatarith ((!) xs)) fas) \\<le> max_Var_floatariths xs\"", "lemma interpret_floatarith_Norm:\n  \"interpret_floatarith (Norm xs) vs = L2_set (\\<lambda>i. interpret_floatarith (xs ! i) vs) {0..<length xs}\"", "lemma interpret_floatarith_Nr[simp]: \"interpret_floatarith (N\\<^sub>r U) vs = real_of_float (float_of U)\"", "lemma list_updates_nth_notmem:\n  assumes \"length xs = length ys\"\n  assumes \"i \\<notin> set xs\"\n  shows \"list_updates xs ys vs ! i = vs ! i\"", "lemma list_updates_nth_less:\n  assumes \"length xs = length ys\" \"distinct xs\"\n  assumes \"i < length vs\"\n  shows \"list_updates xs ys vs ! i = (if i \\<in> set xs then ys ! (index xs i) else vs ! i)\"", "lemma length_list_updates[simp]: \"length (list_updates xs ys vs) = length vs\"", "lemma list_updates_nth_ge[simp]:\n  \"x \\<ge> length vs \\<Longrightarrow> length xs = length ys \\<Longrightarrow> list_updates xs ys vs ! x = vs ! x\"", "lemma\n  list_updates_nth:\n  assumes [simp]: \"length xs = length ys\" \"distinct xs\"\n  shows \"list_updates xs ys vs ! i = (if i < length vs \\<and> i \\<in> set xs then ys ! index xs i else vs ! i)\"", "lemma list_of_eucl_coord_update:\n  assumes [simp]: \"length xs = DIM('a::executable_euclidean_space)\"\n  assumes [simp]: \"distinct xs\"\n  assumes [simp]: \"i \\<in> Basis\"\n  assumes [simp]: \"\\<And>n. n \\<in> set xs \\<Longrightarrow> n < length vs\"\n  shows \"list_updates xs (list_of_eucl (x + (p - x \\<bullet> i) *\\<^sub>R i::'a)) vs =\n   (list_updates xs (list_of_eucl x) vs)[xs ! index Basis_list i := p]\"", "lemma list_updates_list_of_eucl_of_env[simp]:\n  assumes [simp]: \"length xs = DIM('a::executable_euclidean_space)\" \"distinct xs\"\n  shows \"list_updates xs (list_of_eucl (eucl_of_env xs vs::'a)) vs = vs\"", "lemma nth_nth_eucl_of_env_inner:\n  \"b \\<in> Basis \\<Longrightarrow> length is = DIM('a) \\<Longrightarrow> vs ! (is ! index Basis_list b) = eucl_of_env is vs \\<bullet> b\"\n  for b::\"'a::executable_euclidean_space\"", "lemma list_updates_idem[simp]:\n  assumes \"(\\<And>i. i \\<in> set X0 \\<Longrightarrow> i < length vs)\"\n  shows \"(list_updates X0 (map ((!) vs) X0) vs) = vs\"", "lemma pairwise_orthogonal_Basis[intro, simp]: \"pairwise orthogonal Basis\"", "lemma freshs_floatarith[simp]:\n  assumes \"freshs_floatarith fa ds\" \"length ds = length xs\"\n  shows \"interpret_floatarith fa (list_updates ds xs vs) = interpret_floatarith fa vs\"", "lemma freshs_floatarith_max_Var_floatarithI:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> max_Var_floatarith f \\<le> x\"\n  shows \"freshs_floatarith f xs\"", "lemma freshs_floatariths_max_Var_floatarithsI:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> max_Var_floatariths f \\<le> x\"\n  shows \"freshs_floatariths f xs\"", "lemma freshs_floatariths_freshs_floatarithI:\n  assumes \"\\<And>fa. fa \\<in> set fas \\<Longrightarrow> freshs_floatarith fa xs\"\n  shows \"freshs_floatariths fas xs\"", "lemma fresh_floatariths_fresh_floatarithI:\n  assumes \"freshs_floatariths fas xs\"\n  assumes \"fa \\<in> set fas\"\n  shows \"freshs_floatarith fa xs\"", "lemma fresh_floatariths_fresh_floatarith[simp]:\n  \"fresh_floatariths (fas) i \\<Longrightarrow> fa \\<in> set fas \\<Longrightarrow> fresh_floatarith fa i\"", "lemma interpret_floatariths_fresh_cong:\n  assumes \"\\<And>i. \\<not>fresh_floatariths f i \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatariths f ys = interpret_floatariths f xs\"", "lemma subterms_self[simp]: \"fa2 \\<in> subterms fa2\"", "lemma interpret_floatarith_FDERIV_floatarith_eucl_of_env:\\<comment> \\<open>TODO: cleanup, reduce to DERIV?!\\<close>\n  assumes iD: \"\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs\"\n  assumes ds_fresh: \"freshs_floatarith fa ds\"\n  assumes [simp]: \"length xs = DIM ('a)\" \"length ds = DIM ('a)\"\n    \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < length vs\" \"distinct xs\"\n    \"\\<And>i. i \\<in> set ds \\<Longrightarrow> i < length vs\" \"distinct ds\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    (interpret_floatarith fa (list_updates xs (list_of_eucl x) vs))) has_derivative\n    (\\<lambda>d. interpret_floatarith (FDERIV_floatarith fa xs (map Var ds)) (list_updates ds (list_of_eucl d) vs) )\n    ) (at (eucl_of_env xs vs))\"", "lemma interpret_floatarith_FDERIV_floatarith_append:\n  assumes iD: \"\\<And>i j. i < DIM('a) \\<Longrightarrow> isDERIV i (fa) (list_of_eucl x @ params)\"\n  assumes m: \"max_Var_floatarith fa \\<le> DIM('a) + length params\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n      interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n        (\\<lambda>d. interpret_floatarith\n         (FDERIV_floatarith fa [0..<DIM('a)] (map Var [length params + DIM('a)..<length params + 2*DIM('a)]))\n         (list_of_eucl x @ params @ list_of_eucl d))) (at x)\"", "lemma interpret_floatarith_FDERIV_floatarith:\n  assumes iD: \"\\<And>i j. i < DIM('a) \\<Longrightarrow> isDERIV i (fa) (list_of_eucl x)\"\n  assumes m: \"max_Var_floatarith fa \\<le> DIM('a)\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n      interpret_floatarith fa (list_of_eucl x)) has_derivative\n        (\\<lambda>d. interpret_floatarith\n         (FDERIV_floatarith fa [0..<DIM('a)] (map Var [DIM('a)..<2*DIM('a)]))\n         (list_of_eucl x @ list_of_eucl d))) (at x)\"", "lemma interpret_floatarith_eventually_isDERIV:\n  assumes iD: \"\\<And>i j. i < DIM('a) \\<Longrightarrow> isDERIV i fa (list_of_eucl x @ params)\"\n  assumes m: \"max_Var_floatarith fa \\<le> DIM('a::executable_euclidean_space) + length params\"\n  shows \"\\<forall>i < DIM('a). \\<forall>\\<^sub>F (x::'a) in at x. isDERIV i fa (list_of_eucl x @ params)\"", "lemma eventually_isFDERIV:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x@params)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a::executable_euclidean_space) + length params\"\n  shows \"\\<forall>\\<^sub>F (x::'a) in at x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ params)\"", "lemma isFDERIV_eventually_isFDERIV:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x@params)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a::executable_euclidean_space) + length params\"\n    shows \"\\<forall>\\<^sub>F (x::'a) in at x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ params)\"", "lemma interpret_floatarith_FDERIV_floatariths_eucl_of_env:\n  assumes iD: \"isFDERIV DIM('a) xs fas vs\"\n  assumes fresh: \"freshs_floatariths (fas) ds\"\n  assumes [simp]: \"length ds = DIM ('a)\"\n    \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < length vs\" \"distinct xs\"\n    \"\\<And>i. i \\<in> set ds \\<Longrightarrow> i < length vs\" \"distinct ds\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    eucl_of_list\n      (interpret_floatariths fas (list_updates xs (list_of_eucl x) vs))::'a) has_derivative\n        (\\<lambda>d. eucl_of_list (interpret_floatariths\n         (FDERIV_floatariths fas xs (map Var ds))\n         (list_updates ds (list_of_eucl d) vs)))) (at (eucl_of_env xs vs))\"", "lemma interpret_floatarith_FDERIV_floatariths_append:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ ramsch)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a) + length ramsch\"\n  assumes [simp]: \"length fas = DIM('a)\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    eucl_of_list\n      (interpret_floatariths fas (list_of_eucl x@ramsch))::'a) has_derivative\n        (\\<lambda>d. eucl_of_list (interpret_floatariths\n         (FDERIV_floatariths fas [0..<DIM('a)] (map Var [DIM('a)+length ramsch..<2*DIM('a) + length ramsch]))\n         (list_of_eucl x @ ramsch @ list_of_eucl d)))) (at x)\"", "lemma interpret_floatarith_FDERIV_floatariths:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a)\"\n  assumes [simp]: \"length fas = DIM('a)\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    eucl_of_list\n      (interpret_floatariths fas (list_of_eucl x))::'a) has_derivative\n        (\\<lambda>d. eucl_of_list (interpret_floatariths\n         (FDERIV_floatariths fas [0..<DIM('a)] (map Var [DIM('a)..<2*DIM('a)]))\n         (list_of_eucl x @ list_of_eucl d)))) (at x)\"", "lemma continuous_on_min[continuous_intros]:\n  fixes f g :: \"'a::topological_space \\<Rightarrow> 'b::linorder_topology\"\n  shows \"continuous_on A f \\<Longrightarrow> continuous_on A g \\<Longrightarrow> continuous_on A (\\<lambda>x. min (f x) (g x))\"", "lemmas [continuous_intros] = continuous_on_max", "lemma continuous_on_if_const[continuous_intros]:\n  \"continuous_on s f \\<Longrightarrow> continuous_on s g \\<Longrightarrow> continuous_on s (\\<lambda>x. if p then f x else g x)\"", "lemma continuous_on_floatarith:\n  assumes \"continuous_on_floatarith fa\" \"length xs = DIM('a)\" \"distinct xs\"\n  shows \"continuous_on UNIV (\\<lambda>x. interpret_floatarith fa (list_updates xs (list_of_eucl (x::'a::executable_euclidean_space)) vs))\"", "lemma open_form:\n  assumes \"open_form f\" \"length xs = DIM('a::executable_euclidean_space)\" \"distinct xs\"\n  shows \"open (Collect (\\<lambda>x::'a. interpret_form f (list_updates xs (list_of_eucl x) vs)))\"", "lemma one_add_square_eq_0: \"1 + (x)\\<^sup>2 \\<noteq> (0::real)\"", "lemma isDERIV_fold_const_fa[intro]:\n  assumes \"isDERIV x fa vs\"\n  shows \"isDERIV x (fold_const_fa fa) vs\"", "lemma isDERIV_fold_const_fa_minus[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  shows \"isDERIV x (fold_const_fa (Minus fa)) vs\"", "lemma isDERIV_fold_const_fa_plus[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  assumes \"isDERIV x (fold_const_fa fb) vs\"\n  shows \"isDERIV x (fold_const_fa (Add fa fb)) vs\"", "lemma isDERIV_fold_const_fa_mult[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  assumes \"isDERIV x (fold_const_fa fb) vs\"\n  shows \"isDERIV x (fold_const_fa (Mult fa fb)) vs\"", "lemma isDERIV_fold_const_fa_power[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  shows \"isDERIV x (fold_const_fa (fa ^\\<^sub>e n)) vs\"", "lemma isDERIV_fold_const_fa_inverse[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  assumes \"interpret_floatarith fa vs \\<noteq> 0\"\n  shows \"isDERIV x (fold_const_fa (Inverse fa)) vs\"", "lemma add_square_ne_zero[simp]: \"(y::'a::linordered_idom) > 0 \\<Longrightarrow> y + x\\<^sup>2 \\<noteq> 0\"", "lemma isDERIV_FDERIV_floatarith:\n  assumes \"isDERIV x fa vs\" \"\\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs\"\n  assumes [simp]: \"length xs = length ds\"\n  shows \"isDERIV x (FDERIV_floatarith fa xs ds) vs\"", "lemma isDERIV_FDERIV_floatariths:\n  assumes \"isFDERIV N xs fas vs\" \"isFDERIV N xs ds vs\" and [simp]: \"length fas = length ds\"\n  shows \"isFDERIV N xs (FDERIV_floatariths fas xs ds) vs\"", "lemma isFDERIV_imp_isFDERIV_FDERIV_n:\n  assumes \"length fas = length ds\"\n  shows \"isFDERIV N xs fas vs \\<Longrightarrow> isFDERIV N xs ds vs \\<Longrightarrow>\n    isFDERIV N xs (FDERIV_n_floatariths fas xs ds n) vs\"", "lemma isFDERIV_map_Var:\n  assumes [simp]: \"length ds = N\" \"length xs = N\"\n  shows \"isFDERIV N xs (map Var ds) vs\"", "theorem isFDERIV_imp_isnFDERIV:\n  assumes \"isFDERIV N xs fas vs\" and [simp]: \"length fas = N\" \"length xs = N\" \"length ds = N\"\n  shows \"isnFDERIV N fas xs ds vs n\"", "lemma eventually_isnFDERIV:\n  assumes iD: \"isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2*DIM('a)] (list_of_eucl x @ list_of_eucl (d::'a)) n\"\n  assumes m: \"max_Var_floatariths fas \\<le> 2 * DIM('a::executable_euclidean_space)\"\n  shows \"\\<forall>\\<^sub>F (x::'a) in at x. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2*DIM('a)] (list_of_eucl x @ list_of_eucl d) n\"", "lemma isFDERIV_open:\n  assumes \"max_Var_floatariths fas \\<le> DIM('a)\"\n  shows \"open {x::'a. isFDERIV DIM('a::executable_euclidean_space)  [0..<DIM('a)] fas (list_of_eucl x)}\"\n    (is \"open (Collect ?s)\")", "lemma interpret_floatarith_FDERIV_floatarith_eq:\n  assumes [simp]: \"length xs = DIM('a::executable_euclidean_space)\" \"length ds = DIM('a)\"\n  shows \"interpret_floatarith (FDERIV_floatarith fa xs ds) vs =\n    einterpret (map (\\<lambda>x. DERIV_floatarith x fa) xs) vs \\<bullet> (einterpret ds vs::'a)\"", "lemma\n  interpret_floatariths_FDERIV_floatariths_cong:\n  assumes [simp]: \"length d1s = DIM('a::executable_euclidean_space)\" \"length d2s = DIM('a)\" \"length fas1 = length fas2\"\n  assumes fresh1: \"freshs_floatariths fas1 d1s\"\n  assumes fresh2: \"freshs_floatariths fas2 d2s\"\n  assumes eq1: \"\\<And>i. i < length fas1 \\<Longrightarrow> interpret_floatariths (map (\\<lambda>x. DERIV_floatarith x (fas1 ! i)) [0..<DIM('a)]) xs1 =\n    interpret_floatariths (map (\\<lambda>x. DERIV_floatarith x (fas2 ! i)) [0..<DIM('a)]) xs2\"\n  assumes eq2: \"\\<And>i. i < DIM('a) \\<Longrightarrow> xs1 ! (d1s ! i) = xs2 ! (d2s ! i)\"\n  shows \"interpret_floatariths (FDERIV_floatariths fas1 [0..<DIM('a)] (map floatarith.Var d1s)) xs1 =\n    interpret_floatariths (FDERIV_floatariths fas2 [0..<DIM('a)] (map floatarith.Var d2s)) xs2\"", "lemma subst_floatarith_Var_DERIV_floatarith:\n  assumes \"\\<And>x. x = n \\<longleftrightarrow> s x = n\"\n  shows \"subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n  DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)\"", "lemma subst_floatarith_inner_floatariths[simp]:\n  assumes \"length fs = length gs\"\n  shows \"subst_floatarith s (inner_floatariths fs gs) =\n      inner_floatariths (map (subst_floatarith s) fs) (map (subst_floatarith s) gs)\"", "lemma Num_eq_subst_Var[simp]: \"Num x = subst_floatarith (\\<lambda>x. Var (s x)) fa \\<longleftrightarrow> fa = Num x\"", "lemma Add_eq_subst_VarE:\n  assumes \"Add fa1 fa2 = subst_floatarith (\\<lambda>x. Var (s x)) fa\"\n  obtains a1 a2 where \"fa = Add a1 a2\" \"fa1 = subst_floatarith (\\<lambda>x. Var (s x)) a1\"\n      \"fa2 = subst_floatarith (\\<lambda>x. Var (s x)) a2\"", "lemma subst_floatarith_eq_self[simp]: \"subst_floatarith s f = f\" if \"max_Var_floatarith f = 0\"", "lemma fold_const_fa_unique: \"False\" if \"(\\<And>x. f = Num x)\"", "lemma zero_unique: False if \"(\\<And>x::float. x = 0)\"", "lemma fold_const_fa_Mult_eq_NumE:\n  assumes \"fold_const_fa (Mult a b) = Num x\"\n  obtains y z where \"fold_const_fa a = Num y\" \"fold_const_fa b = Num z\" \"x = y * z\"\n  | y where \"fold_const_fa a = Num 0\" \"x = 0\"\n  | y where \"fold_const_fa b = Num 0\" \"x = 0\"", "lemma fold_const_fa_Add_eq_NumE:\n  assumes \"fold_const_fa (Add a b) = Num x\"\n  obtains y z where \"fold_const_fa a = Num y\" \"fold_const_fa b = Num z\" \"x = y + z\"", "lemma subst_floatarith_Var_fold_const_fa[symmetric]:\n  \"fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa)\"", "lemma subst_floatarith_eq_Num[simp]: \"(subst_floatarith (\\<lambda>x. Var (s x)) fa = Num x) \\<longleftrightarrow> fa = Num x\"", "lemma fold_const_fa_subst_eq_Num0_iff[simp]:\n  \"fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) = Num x \\<longleftrightarrow> fold_const_fa fa = Num x\"", "lemma subst_floatarith_Var_FDERIV_floatarith:\n  assumes len: \"length xs = DIM('a::executable_euclidean_space)\" and [simp]: \"length ds = DIM('a)\"\n  assumes eq: \"\\<And>x y. x \\<in> set xs \\<Longrightarrow> (y = x) = (s y = x)\"\n  shows \"subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    (FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs (map (subst_floatarith (\\<lambda>x. Var (s x))) ds))\"", "lemma subst_floatarith_Var_FDERIV_n_nth:\n  assumes len: \"length xs = DIM('a::executable_euclidean_space)\" and [simp]: \"length ds = DIM('a)\"\n  assumes eq: \"\\<And>x y. x \\<in> set xs \\<Longrightarrow> (y = x) = (s y = x)\"\n  assumes [simp]: \"i < length fas\"\n  shows \"subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_n_floatariths fas xs ds n ! i) =\n    (FDERIV_n_floatariths (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) n ! i)\"", "lemma subst_floatarith_Var_max_Var_floatarith:\n  assumes \"\\<And>i. i < max_Var_floatarith fa \\<Longrightarrow> s i = i\"\n  shows \"subst_floatarith (\\<lambda>i. Var (s i)) fa = fa\"", "lemma interpret_floatarith_subst_floatarith_idem:\n  assumes mv: \"max_Var_floatarith fa \\<le> length vs\"\n  assumes idem: \"\\<And>j. j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\"\n  shows \"interpret_floatarith (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs = interpret_floatarith fa vs\"", "lemma isDERIV_subst_Var_floatarith:\n  assumes mv: \"max_Var_floatarith fa \\<le> length vs\"\n  assumes idem: \"\\<And>j. j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\"\n  assumes \"\\<And>j. s j = i \\<longleftrightarrow> j = i\"\n  shows \"isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs = isDERIV i fa vs\"", "lemma isFDERIV_subst_Var_floatarith:\n  assumes mv: \"max_Var_floatariths fas \\<le> length vs\"\n  assumes idem: \"\\<And>j. j < max_Var_floatariths fas \\<Longrightarrow> vs ! (s j) = vs ! j\"\n  assumes \"\\<And>i j. i \\<in> set xs \\<Longrightarrow> s j = i \\<longleftrightarrow> j = i\"\n  shows \"isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs = isFDERIV n xs fas vs\"", "lemma interpret_floatariths_append[simp]:\n  \"interpret_floatariths (xs @ ys) vs = interpret_floatariths xs vs @ interpret_floatariths ys vs\"", "lemma not_fresh_inner_floatariths:\n  assumes \"length xs = length ys\"\n  shows \"\\<not> fresh_floatarith (inner_floatariths xs ys) i \\<longleftrightarrow> \\<not>fresh_floatariths xs i \\<or> \\<not>fresh_floatariths ys i\"", "lemma fresh_inner_floatariths:\n  assumes \"length xs = length ys\"\n  shows \"fresh_floatarith (inner_floatariths xs ys) i \\<longleftrightarrow> fresh_floatariths xs i \\<and> fresh_floatariths ys i\"", "lemma not_fresh_floatariths_map:\n  \" \\<not> fresh_floatariths (map f xs) i \\<longleftrightarrow> (\\<exists>x \\<in> set xs. \\<not>fresh_floatarith (f x) i)\"", "lemma fresh_floatariths_map:\n  \" fresh_floatariths (map f xs) i \\<longleftrightarrow> (\\<forall>x \\<in> set xs. fresh_floatarith (f x) i)\"", "lemma fresh_floatarith_fold_const_fa: \"fresh_floatarith fa i \\<Longrightarrow> fresh_floatarith (fold_const_fa fa) i\"", "lemma fresh_floatarith_fold_const_fa_Add[intro!]:\n  assumes \"fresh_floatarith (fold_const_fa a) i\" \"fresh_floatarith (fold_const_fa b) i\"\n  shows \"fresh_floatarith (fold_const_fa (Add a b)) i\"", "lemma fresh_floatarith_fold_const_fa_Mult[intro!]:\n  assumes \"fresh_floatarith (fold_const_fa a) i\" \"fresh_floatarith (fold_const_fa b) i\"\n  shows \"fresh_floatarith (fold_const_fa (Mult a b)) i\"", "lemma fresh_floatarith_fold_const_fa_Minus[intro!]:\n  assumes \"fresh_floatarith (fold_const_fa b) i\"\n  shows \"fresh_floatarith (fold_const_fa (Minus b)) i\"", "lemma fresh_FDERIV_floatarith:\n  \"fresh_floatarith ode_e i \\<Longrightarrow> fresh_floatariths ds i\n  \\<Longrightarrow> length ds = DIM('a)\n  \\<Longrightarrow> fresh_floatarith (FDERIV_floatarith ode_e [0..<DIM('a::executable_euclidean_space)] ds) i\"", "lemma not_fresh_FDERIV_floatarith:\n  \"\\<not> fresh_floatarith (FDERIV_floatarith ode_e [0..<DIM('a::executable_euclidean_space)] ds) i\n  \\<Longrightarrow> length ds = DIM('a)\n  \\<Longrightarrow> \\<not>fresh_floatarith ode_e i \\<or> \\<not>fresh_floatariths ds i\"", "lemma not_fresh_FDERIV_floatariths:\n  \"\\<not> fresh_floatariths (FDERIV_floatariths ode_e [0..<DIM('a::executable_euclidean_space)] ds) i \\<Longrightarrow>\n  length ds = DIM('a) \\<Longrightarrow> \\<not>fresh_floatariths ode_e i \\<or> \\<not>fresh_floatariths ds i\"", "lemma isDERIV_FDERIV_floatarith_linear:\n  fixes x h::\"'a::executable_euclidean_space\"\n  assumes \"\\<And>k. k < DIM('a) \\<Longrightarrow> isDERIV i (DERIV_floatarith k fa) xs\"\n  assumes \"max_Var_floatarith fa \\<le> DIM('a)\"\n  assumes [simp]: \"length xs = DIM('a)\" \"length hs = DIM('a)\"\n  shows \"isDERIV i (FDERIV_floatarith fa [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)]))\n            (xs @ hs)\"", "lemma\n  isFDERIV_FDERIV_floatariths_linear:\n  fixes x h::\"'a::executable_euclidean_space\"\n  assumes \"\\<And>i j k.\n       i < DIM('a) \\<Longrightarrow>\n       j < DIM('a) \\<Longrightarrow> k < DIM('a) \\<Longrightarrow> isDERIV i (DERIV_floatarith k (fas ! j)) (xs)\"\n  assumes [simp]: \"length fas = DIM('a::executable_euclidean_space)\"\n  assumes [simp]: \"length xs = DIM('a)\" \"length hs = DIM('a)\"\n  assumes \"max_Var_floatariths fas \\<le> DIM('a)\"\n  shows \"isFDERIV DIM('a) [0..<DIM('a::executable_euclidean_space)]\n     (FDERIV_floatariths fas [0..<DIM('a)] (map floatarith.Var [DIM('a)..<2 * DIM('a)]))\n     (xs @ hs)\"", "lemma isFDERIV_approx:\n  \"bounded_by vs VS \\<Longrightarrow> isFDERIV_approx prec n xs fas VS \\<Longrightarrow> isFDERIV n xs fas vs\"", "lemma isnFDERIV_approx:\n  \"bounded_by vs VS \\<Longrightarrow> isnFDERIV_approx prec N fas xs ds VS n \\<Longrightarrow> isnFDERIV N fas xs ds vs n\"", "lemma plain_floatarith_approx_not_None:\n  assumes \"plain_floatarith N fa\" \"N \\<le> length XS\" \"\\<And>i. i < N \\<Longrightarrow> XS ! i \\<noteq> None\"\n  shows \"approx p fa XS \\<noteq> None\"", "lemma interpret_Rad_of[simp]: \"interpret_floatarith (Rad_of w) xs = rad_of (interpret_floatarith w xs)\"", "lemma interpret_Deg_of[simp]: \"interpret_floatarith (Deg_of w) xs = deg_of (interpret_floatarith w xs)\""], "translations": [["", "lemma length_interpret_floatariths[simp]: \"length (interpret_floatariths fas xs) = length fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (interpret_floatariths fas xs) = length fas", "by (induction fas) auto"], ["", "lemma interpret_floatariths_nth[simp]:\n  \"interpret_floatariths fas xs ! n = interpret_floatarith (fas ! n) xs\"\n  if \"n < length fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths fas xs ! n = interpret_floatarith (fas ! n) xs", "using that"], ["proof (prove)\nusing this:\n  n < length fas\n\ngoal (1 subgoal):\n 1. interpret_floatariths fas xs ! n = interpret_floatarith (fas ! n) xs", "by (induction fas arbitrary: n) (auto simp: nth_Cons split: nat.splits)"], ["", "abbreviation \"einterpret \\<equiv> \\<lambda>fas vs. eucl_of_list (interpret_floatariths fas vs)\""], ["", "subsection \\<open>Syntax\\<close>"], ["", "syntax interpret_floatarith::\"floatarith \\<Rightarrow> real list \\<Rightarrow> real\""], ["", "instantiation floatarith :: \"{plus, minus, uminus, times, inverse, zero, one}\"\nbegin"], ["", "definition \"- f = Minus f\""], ["", "lemma interpret_floatarith_uminus[simp]:\n  \"interpret_floatarith (- f) xs = - interpret_floatarith f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (- f) xs = - interpret_floatarith f xs", "by (auto simp: uminus_floatarith_def)"], ["", "definition \"f + g = Add f g\""], ["", "lemma interpret_floatarith_plus[simp]:\n  \"interpret_floatarith (f + g) xs = interpret_floatarith f xs + interpret_floatarith g xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (f + g) xs =\n    interpret_floatarith f xs + interpret_floatarith g xs", "by (auto simp: plus_floatarith_def)"], ["", "definition \"f - g = Add f (Minus g)\""], ["", "lemma interpret_floatarith_minus[simp]:\n  \"interpret_floatarith (f - g) xs = interpret_floatarith f xs - interpret_floatarith g xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (f - g) xs =\n    interpret_floatarith f xs - interpret_floatarith g xs", "by (auto simp: minus_floatarith_def)"], ["", "definition \"inverse f = Inverse f\""], ["", "lemma interpret_floatarith_inverse[simp]:\n  \"interpret_floatarith (inverse f) xs = inverse (interpret_floatarith f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (inverse f) xs =\n    inverse (interpret_floatarith f xs)", "by (auto simp: inverse_floatarith_def)"], ["", "definition \"f * g = Mult f g\""], ["", "lemma interpret_floatarith_times[simp]:\n  \"interpret_floatarith (f * g) xs = interpret_floatarith f xs * interpret_floatarith g xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (f * g) xs =\n    interpret_floatarith f xs * interpret_floatarith g xs", "by (auto simp: times_floatarith_def)"], ["", "definition \"f div g = f * Inverse g\""], ["", "lemma interpret_floatarith_divide[simp]:\n  \"interpret_floatarith (f div g) xs = interpret_floatarith f xs / interpret_floatarith g xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (f div g) xs =\n    interpret_floatarith f xs / interpret_floatarith g xs", "by (auto simp: divide_floatarith_def inverse_eq_divide)"], ["", "definition \"1 = Num 1\""], ["", "lemma interpret_floatarith_one[simp]:\n  \"interpret_floatarith 1 xs = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith 1 xs = 1", "by (auto simp: one_floatarith_def)"], ["", "definition \"0 = Num 0\""], ["", "lemma interpret_floatarith_zero[simp]:\n  \"interpret_floatarith 0 xs = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith 0 xs = 0", "by (auto simp: zero_floatarith_def)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. (OFCLASS(floatarith, inverse_class) &&&\n     OFCLASS(floatarith, minus_class) &&&\n     OFCLASS(floatarith, one_class)) &&&\n    (OFCLASS(floatarith, plus_class) &&&\n     OFCLASS(floatarith, times_class)) &&&\n    OFCLASS(floatarith, uminus_class) &&& OFCLASS(floatarith, zero_class)", "proof"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Derived symbols\\<close>"], ["", "definition \"R\\<^sub>e r = (case quotient_of r of (n, d) \\<Rightarrow> Num (of_int n) / Num (of_int d))\""], ["", "declare [[coercion R\\<^sub>e ]]"], ["", "lemma interpret_R\\<^sub>e[simp]: \"interpret_floatarith (R\\<^sub>e x) xs = real_of_rat x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (R\\<^sub>e x) xs = real_of_rat x", "by (auto simp: R\\<^sub>e_def of_rat_divide dest!: quotient_of_div split: prod.splits)"], ["", "definition \"Sin x = Cos ((Pi * (Num (Float 1 (-1)))) - x)\""], ["", "lemma interpret_floatarith_Sin[simp]:\n  \"interpret_floatarith (Sin x) vs = sin (interpret_floatarith x vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Sin x) vs = sin (interpret_floatarith x vs)", "by (auto simp: Sin_def approximation_preproc_floatarith(11))"], ["", "definition \"Half x = Mult (Num (Float 1 (-1))) x\""], ["", "lemma interpret_Half[simp]: \"interpret_floatarith (Half x) xs = interpret_floatarith x xs / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Half x) xs = interpret_floatarith x xs / 2", "by (auto simp: Half_def)"], ["", "definition \"Tan x = (Sin x) / (Cos x)\""], ["", "lemma interpret_floatarith_Tan[simp]:\n  \"interpret_floatarith (Tan x) vs = tan (interpret_floatarith x vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Tan x) vs = tan (interpret_floatarith x vs)", "by (auto simp: Tan_def approximation_preproc_floatarith(12) inverse_eq_divide)"], ["", "primrec Sum\\<^sub>e where\n  \"Sum\\<^sub>e f [] = 0\"\n| \"Sum\\<^sub>e f (x#xs) = f x + Sum\\<^sub>e f xs\""], ["", "lemma interpret_floatarith_Sum\\<^sub>e[simp]:\n  \"interpret_floatarith (Sum\\<^sub>e f x) vs = (\\<Sum>i\\<leftarrow>x. interpret_floatarith (f i) vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Sum\\<^sub>e f x) vs =\n    (\\<Sum>i\\<leftarrow>x. interpret_floatarith (f i) vs)", "by (induction x) auto"], ["", "definition Norm where \"Norm is = Sqrt (Sum\\<^sub>e (\\<lambda>i. i * i) is)\""], ["", "lemma interpret_floatarith_norm[simp]:\n  assumes [simp]: \"length x = DIM('a)\"\n  shows \"interpret_floatarith (Norm x) vs = norm (einterpret x vs::'a::executable_euclidean_space)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Norm x) vs = norm (einterpret x vs)", "apply (auto simp: Norm_def norm_eq_sqrt_inner)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<leftarrow>x. interpret_floatarith i vs *\n                           interpret_floatarith i vs) =\n    einterpret x vs \\<bullet> einterpret x vs", "apply (subst euclidean_inner[where 'a='a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<leftarrow>x. interpret_floatarith i vs *\n                           interpret_floatarith i vs) =\n    (\\<Sum>b\\<in>Basis.\n       einterpret x vs \\<bullet> b * (einterpret x vs \\<bullet> b))", "apply (auto simp: power2_eq_square[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<leftarrow>x. (interpret_floatarith i vs)\\<^sup>2) =\n    (\\<Sum>b\\<in>Basis. (einterpret x vs \\<bullet> b)\\<^sup>2)", "apply (subst sum_list_Basis_list[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<leftarrow>x. (interpret_floatarith i vs)\\<^sup>2) =\n    (\\<Sum>b\\<leftarrow>Basis_list. (einterpret x vs \\<bullet> b)\\<^sup>2)", "apply (rule sum_list_nth_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (map (\\<lambda>i. (interpret_floatarith i vs)\\<^sup>2) x) =\n    length\n     (map (\\<lambda>b. (einterpret x vs \\<bullet> b)\\<^sup>2) Basis_list)\n 2. \\<And>xa y.\n       (xa, y)\n       \\<in> set (zip (map (\\<lambda>i. (interpret_floatarith i vs)\\<^sup>2)\n                        x)\n                   (map (\\<lambda>b. (einterpret x vs \\<bullet> b)\\<^sup>2)\n                     Basis_list)) \\<Longrightarrow>\n       xa = y", "by (auto simp: in_set_zip eucl_of_list_inner)"], ["", "notation floatarith.Power (infixr \"^\\<^sub>e\" 80)"], ["", "subsection \\<open>Constant Folding\\<close>"], ["", "fun dest_Num_fa where\n  \"dest_Num_fa (floatarith.Num x) = Some x\"\n| \"dest_Num_fa _ = None\""], ["", "fun_cases dest_Num_fa_None: \"dest_Num_fa fa = None\"\n  and dest_Num_fa_Some: \"dest_Num_fa fa = Some x\""], ["", "fun fold_const_fa where\n  \"fold_const_fa (Add fa1 fa2) =\n    (let (ffa1, ffa2) = (fold_const_fa fa1, fold_const_fa fa2)\n    in case (dest_Num_fa ffa1, dest_Num_fa (ffa2)) of\n      (Some a, Some b) \\<Rightarrow> Num (a + b)\n    | (Some a, None) \\<Rightarrow> (if a = 0 then ffa2 else Add (Num a) ffa2)\n    | (None, Some a) \\<Rightarrow> (if a = 0 then ffa1 else Add ffa1 (Num a))\n    | (None, None) \\<Rightarrow> Add ffa1 ffa2)\"\n| \"fold_const_fa (Minus a) =\n    (case (fold_const_fa a) of\n      (Num x) \\<Rightarrow> Num (-x)\n    | x \\<Rightarrow> Minus x)\"\n| \"fold_const_fa (Mult fa1 fa2) =\n    (let (ffa1, ffa2) = (fold_const_fa fa1, fold_const_fa fa2)\n  in case (dest_Num_fa ffa1, dest_Num_fa (ffa2)) of\n    (Some a, Some b) \\<Rightarrow> Num (a * b)\n  | (Some a, None) \\<Rightarrow> (if a = 0 then Num 0 else if a = 1 then ffa2 else Mult (Num a) ffa2)\n  | (None, Some a) \\<Rightarrow> (if a = 0 then Num 0 else if a = 1 then ffa1 else Mult ffa1 (Num a))\n  | (None, None) \\<Rightarrow> Mult ffa1 ffa2)\"\n| \"fold_const_fa (Inverse a) = Inverse (fold_const_fa a)\"\n| \"fold_const_fa (Abs a) =\n    (case (fold_const_fa a) of\n      (Num x) \\<Rightarrow> Num (abs x)\n    | x \\<Rightarrow> Abs x)\"\n| \"fold_const_fa (Max a b) =\n    (case (fold_const_fa a, fold_const_fa b) of\n      (Num x, Num y) \\<Rightarrow> Num (max x y)\n    | (x, y) \\<Rightarrow> Max x y)\"\n| \"fold_const_fa (Min a b) =\n    (case (fold_const_fa a, fold_const_fa b) of\n      (Num x, Num y) \\<Rightarrow> Num (min x y)\n    | (x, y) \\<Rightarrow> Min x y)\"\n| \"fold_const_fa (Floor a) =\n    (case (fold_const_fa a) of\n      (Num x) \\<Rightarrow> Num (floor_fl x)\n    | x \\<Rightarrow> Floor x)\"\n| \"fold_const_fa (Power a b) =\n    (case (fold_const_fa a) of\n      (Num x) \\<Rightarrow> Num (x ^ b)\n    | x \\<Rightarrow> Power x b)\"\n| \"fold_const_fa (Cos a) = Cos (fold_const_fa a)\"\n| \"fold_const_fa (Arctan a) = Arctan (fold_const_fa a)\"\n| \"fold_const_fa (Sqrt a) = Sqrt (fold_const_fa a)\"\n| \"fold_const_fa (Exp a) = Exp (fold_const_fa a)\"\n| \"fold_const_fa (Ln a) = Ln (fold_const_fa a)\"\n| \"fold_const_fa (Powr a b) = Powr (fold_const_fa a) (fold_const_fa b)\"\n| \"fold_const_fa Pi = Pi\"\n| \"fold_const_fa (Var v) = Var v\"\n| \"fold_const_fa (Num x) = Num x\""], ["", "fun_cases fold_const_fa_Num: \"fold_const_fa fa = Num y\"\n  and fold_const_fa_Add: \"fold_const_fa fa = Add x y\"\n  and fold_const_fa_Minus: \"fold_const_fa fa = Minus y\""], ["", "lemma fold_const_fa[simp]: \"interpret_floatarith (fold_const_fa fa) xs = interpret_floatarith fa xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (fold_const_fa fa) xs = interpret_floatarith fa xs", "by (induction fa) (auto split!: prod.splits floatarith.splits option.splits\n      elim!: dest_Num_fa_None dest_Num_fa_Some\n      simp: max_def min_def floor_fl_def)"], ["", "subsection \\<open>Free Variables\\<close>"], ["", "primrec max_Var_floatarith where\\<comment> \\<open>TODO: include bound in predicate\\<close>\n  \"max_Var_floatarith (Add a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n| \"max_Var_floatarith (Mult a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n| \"max_Var_floatarith (Inverse a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Minus a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Num a) = 0\"\n| \"max_Var_floatarith (Var i) = Suc i\"\n| \"max_Var_floatarith (Cos a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (floatarith.Arctan a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Abs a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (floatarith.Max a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n| \"max_Var_floatarith (floatarith.Min a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n| \"max_Var_floatarith (floatarith.Pi) = 0\"\n| \"max_Var_floatarith (Sqrt a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Exp a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Powr a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n| \"max_Var_floatarith (floatarith.Ln a) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Power a n) = max_Var_floatarith a\"\n| \"max_Var_floatarith (Floor a) = max_Var_floatarith a\""], ["", "primrec max_Var_floatariths where\n  \"max_Var_floatariths [] = 0\"\n| \"max_Var_floatariths (x#xs) = max (max_Var_floatarith x) (max_Var_floatariths xs)\""], ["", "primrec max_Var_form where\n  \"max_Var_form (Conj a b) = max (max_Var_form a) (max_Var_form b)\"\n|  \"max_Var_form (Disj a b) = max (max_Var_form a) (max_Var_form b)\"\n|  \"max_Var_form (Less a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n|  \"max_Var_form (LessEqual a b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n|  \"max_Var_form (Bound a b c d) = linorder_class.Max {max_Var_floatarith a,max_Var_floatarith b, max_Var_floatarith c, max_Var_form d}\"\n|  \"max_Var_form (AtLeastAtMost a b c) = linorder_class.Max {max_Var_floatarith a,max_Var_floatarith b, max_Var_floatarith c}\"\n|  \"max_Var_form (Assign a b c) = linorder_class.Max {max_Var_floatarith a,max_Var_floatarith b, max_Var_form c}\""], ["", "lemma\n  interpret_floatarith_eq_take_max_VarI:\n  assumes \"take (max_Var_floatarith ra) ys = take (max_Var_floatarith ra) zs\"\n  shows \"interpret_floatarith ra ys = interpret_floatarith ra zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith ra ys = interpret_floatarith ra zs", "using assms"], ["proof (prove)\nusing this:\n  take (max_Var_floatarith ra) ys = take (max_Var_floatarith ra) zs\n\ngoal (1 subgoal):\n 1. interpret_floatarith ra ys = interpret_floatarith ra zs", "by (induct ra) (auto dest!: take_max_eqD simp: take_Suc_eq split: if_split_asm)"], ["", "lemma\n  interpret_floatariths_eq_take_max_VarI:\n  assumes \"take (max_Var_floatariths ea) ys = take (max_Var_floatariths ea) zs\"\n  shows \"interpret_floatariths ea ys = interpret_floatariths ea zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths ea ys = interpret_floatariths ea zs", "using assms"], ["proof (prove)\nusing this:\n  take (max_Var_floatariths ea) ys = take (max_Var_floatariths ea) zs\n\ngoal (1 subgoal):\n 1. interpret_floatariths ea ys = interpret_floatariths ea zs", "apply (induction ea)"], ["proof (prove)\ngoal (2 subgoals):\n 1. take (max_Var_floatariths []) ys =\n    take (max_Var_floatariths []) zs \\<Longrightarrow>\n    interpret_floatariths [] ys = interpret_floatariths [] zs\n 2. \\<And>a ea.\n       \\<lbrakk>take (max_Var_floatariths ea) ys =\n                take (max_Var_floatariths ea) zs \\<Longrightarrow>\n                interpret_floatariths ea ys = interpret_floatariths ea zs;\n        take (max_Var_floatariths (a # ea)) ys =\n        take (max_Var_floatariths (a # ea)) zs\\<rbrakk>\n       \\<Longrightarrow> interpret_floatariths (a # ea) ys =\n                         interpret_floatariths (a # ea) zs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. take (max_Var_floatariths []) ys =\n    take (max_Var_floatariths []) zs \\<Longrightarrow>\n    interpret_floatariths [] ys = interpret_floatariths [] zs", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ea.\n       \\<lbrakk>take (max_Var_floatariths ea) ys =\n                take (max_Var_floatariths ea) zs \\<Longrightarrow>\n                interpret_floatariths ea ys = interpret_floatariths ea zs;\n        take (max_Var_floatariths (a # ea)) ys =\n        take (max_Var_floatariths (a # ea)) zs\\<rbrakk>\n       \\<Longrightarrow> interpret_floatariths (a # ea) ys =\n                         interpret_floatariths (a # ea) zs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>take (max_Var_floatariths ea_) ys =\n             take (max_Var_floatariths ea_) zs \\<Longrightarrow>\n             interpret_floatariths ea_ ys = interpret_floatariths ea_ zs;\n     take (max_Var_floatariths (a_ # ea_)) ys =\n     take (max_Var_floatariths (a_ # ea_)) zs\\<rbrakk>\n    \\<Longrightarrow> interpret_floatariths (a_ # ea_) ys =\n                      interpret_floatariths (a_ # ea_) zs", "by (clarsimp) (metis interpret_floatarith_eq_take_max_VarI take_map take_max_eqD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Max_Image_distrib:\n  includes no_floatarith_notation\n  assumes \"finite X\" \"X \\<noteq> {}\"\n  shows \"Max ((\\<lambda>x. max (f1 x) (f2 x)) ` X) = max (Max (f1 ` X)) (Max (f2 ` X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX x\\<in>X. max (f1 x) (f2 x)) = max (Max (f1 ` X)) (Max (f2 ` X))", "apply (rule Max_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. max (f1 x) (f2 x)) ` X)\n 2. \\<And>y.\n       y \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X \\<Longrightarrow>\n       y \\<le> max (Max (f1 ` X)) (Max (f2 ` X))\n 3. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>x. max (f1 x) (f2 x)) ` X)", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>x. max (f1 x) (f2 x)) ` X)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       y \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X \\<Longrightarrow>\n       y \\<le> max (Max (f1 ` X)) (Max (f2 ` X))\n 2. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X \\<Longrightarrow>\n    y \\<le> max (Max (f1 ` X)) (Max (f2 ` X))", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. y \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X \\<Longrightarrow>\n    y \\<le> max (Max (f1 ` X)) (Max (f2 ` X))", "by (force intro: max.coboundedI1 max.coboundedI2 Max_ge)"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "have \"Max (f1 ` X) \\<in> f1 ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (f1 ` X) \\<in> f1 ` X", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (f1 ` X) \\<in> f1 ` X", "by auto"], ["proof (state)\nthis:\n  Max (f1 ` X) \\<in> f1 ` X\n\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "then"], ["proof (chain)\npicking this:\n  Max (f1 ` X) \\<in> f1 ` X", "obtain x1 where x1: \"x1 \\<in> X\" \"Max (f1 ` X) = f1 x1\""], ["proof (prove)\nusing this:\n  Max (f1 ` X) \\<in> f1 ` X\n\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        \\<lbrakk>x1 \\<in> X; Max (f1 ` X) = f1 x1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> X\n  Max (f1 ` X) = f1 x1\n\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "have \"Max (f2 ` X) \\<in> f2 ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (f2 ` X) \\<in> f2 ` X", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (f2 ` X) \\<in> f2 ` X", "by auto"], ["proof (state)\nthis:\n  Max (f2 ` X) \\<in> f2 ` X\n\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "then"], ["proof (chain)\npicking this:\n  Max (f2 ` X) \\<in> f2 ` X", "obtain x2 where x2: \"x2 \\<in> X\" \"Max (f2 ` X) = f2 x2\""], ["proof (prove)\nusing this:\n  Max (f2 ` X) \\<in> f2 ` X\n\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        \\<lbrakk>x2 \\<in> X; Max (f2 ` X) = f2 x2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x2 \\<in> X\n  Max (f2 ` X) = f2 x2\n\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (Max (f1 ` X)) (Max (f2 ` X))\n    \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X", "apply (rule image_eqI[where x=\"if f1 x1 \\<le> f2 x2 then x2 else x1\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. max (Max (f1 ` X)) (Max (f2 ` X)) =\n    max (f1 (if f1 x1 \\<le> f2 x2 then x2 else x1))\n     (f2 (if f1 x1 \\<le> f2 x2 then x2 else x1))\n 2. (if f1 x1 \\<le> f2 x2 then x2 else x1) \\<in> X", "using x1 x2 assms"], ["proof (prove)\nusing this:\n  x1 \\<in> X\n  Max (f1 ` X) = f1 x1\n  x2 \\<in> X\n  Max (f2 ` X) = f2 x2\n  finite X\n  X \\<noteq> {}\n\ngoal (2 subgoals):\n 1. max (Max (f1 ` X)) (Max (f2 ` X)) =\n    max (f1 (if f1 x1 \\<le> f2 x2 then x2 else x1))\n     (f2 (if f1 x1 \\<le> f2 x2 then x2 else x1))\n 2. (if f1 x1 \\<le> f2 x2 then x2 else x1) \\<in> X", "apply (auto simp: max_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x1 \\<in> X; Max (f1 ` X) = f1 x1; x2 \\<in> X;\n        Max (f2 ` X) = f2 x2; finite X; x \\<in> X; f1 x1 \\<le> f2 x2;\n        \\<not> f1 x2 \\<le> f2 x2\\<rbrakk>\n       \\<Longrightarrow> f2 x2 = f1 x2\n 2. \\<And>x.\n       \\<lbrakk>x1 \\<in> X; Max (f1 ` X) = f1 x1; x2 \\<in> X;\n        Max (f2 ` X) = f2 x2; finite X; x \\<in> X; \\<not> f1 x1 \\<le> f2 x2;\n        f1 x1 \\<le> f2 x1\\<rbrakk>\n       \\<Longrightarrow> f1 x1 = f2 x1", "apply (metis Max_ge dual_order.trans finite_imageI image_eqI assms(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x1 \\<in> X; Max (f1 ` X) = f1 x1; x2 \\<in> X;\n        Max (f2 ` X) = f2 x2; finite X; x \\<in> X; \\<not> f1 x1 \\<le> f2 x2;\n        f1 x1 \\<le> f2 x1\\<rbrakk>\n       \\<Longrightarrow> f1 x1 = f2 x1", "apply (metis Max_ge dual_order.trans finite_imageI image_eqI assms(1))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  max (Max (f1 ` X)) (Max (f2 ` X))\n  \\<in> (\\<lambda>x. max (f1 x) (f2 x)) ` X\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma max_Var_floatarith_simps[simp]:\n  \"max_Var_floatarith (a / b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (a * b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (a + b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (a - b) = max (max_Var_floatarith a) (max_Var_floatarith b)\"\n  \"max_Var_floatarith (- b) = (max_Var_floatarith b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (max_Var_floatarith (a / b) =\n     max (max_Var_floatarith a) (max_Var_floatarith b) &&&\n     max_Var_floatarith (a * b) =\n     max (max_Var_floatarith a) (max_Var_floatarith b)) &&&\n    max_Var_floatarith (a + b) =\n    max (max_Var_floatarith a) (max_Var_floatarith b) &&&\n    max_Var_floatarith (a - b) =\n    max (max_Var_floatarith a) (max_Var_floatarith b) &&&\n    max_Var_floatarith (- b) = max_Var_floatarith b", "by (auto simp: divide_floatarith_def times_floatarith_def plus_floatarith_def minus_floatarith_def\n      uminus_floatarith_def)"], ["", "lemma max_Var_floatariths_Max:\n  \"max_Var_floatariths xs = (if set xs = {} then 0 else linorder_class.Max (max_Var_floatarith ` set xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths xs =\n    (if set xs = {} then 0 else Max (max_Var_floatarith ` set xs))", "by (induct xs) auto"], ["", "lemma max_Var_floatariths_map_plus[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i + fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (\\<lambda>i. fa1 i + fa2 i) xs) =\n    max (max_Var_floatariths (map fa1 xs))\n     (max_Var_floatariths (map fa2 xs))", "by (auto simp: max_Var_floatariths_Max image_image Max_Image_distrib)"], ["", "lemma max_Var_floatariths_map_times[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i * fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (\\<lambda>i. fa1 i * fa2 i) xs) =\n    max (max_Var_floatariths (map fa1 xs))\n     (max_Var_floatariths (map fa2 xs))", "by (auto simp: max_Var_floatariths_Max image_image Max_Image_distrib)"], ["", "lemma max_Var_floatariths_map_divide[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i / fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (\\<lambda>i. fa1 i / fa2 i) xs) =\n    max (max_Var_floatariths (map fa1 xs))\n     (max_Var_floatariths (map fa2 xs))", "by (auto simp: max_Var_floatariths_Max image_image Max_Image_distrib)"], ["", "lemma max_Var_floatariths_map_uminus[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. - fa1 i) xs) = max_Var_floatariths (map fa1 xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (\\<lambda>i. - fa1 i) xs) =\n    max_Var_floatariths (map fa1 xs)", "by (auto simp: max_Var_floatariths_Max image_image Max_Image_distrib)"], ["", "lemma max_Var_floatariths_map_const[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa) xs) = (if xs = [] then 0 else max_Var_floatarith fa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (\\<lambda>i. fa) xs) =\n    (if xs = [] then 0 else max_Var_floatarith fa)", "by (auto simp: max_Var_floatariths_Max image_image image_constant_conv)"], ["", "lemma max_Var_floatariths_map_minus[simp]:\n  \"max_Var_floatariths (map (\\<lambda>i. fa1 i - fa2 i) xs) = max (max_Var_floatariths (map fa1 xs)) (max_Var_floatariths (map fa2 xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (\\<lambda>i. fa1 i - fa2 i) xs) =\n    max (max_Var_floatariths (map fa1 xs))\n     (max_Var_floatariths (map fa2 xs))", "by (auto simp: max_Var_floatariths_Max image_image Max_Image_distrib)"], ["", "primrec fresh_floatarith where\n  \"fresh_floatarith (Var y) x \\<longleftrightarrow> (x \\<noteq> y)\"\n| \"fresh_floatarith (Num a) x \\<longleftrightarrow> True\"\n| \"fresh_floatarith Pi x \\<longleftrightarrow> True\"\n| \"fresh_floatarith (Cos a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Abs a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Arctan a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Sqrt a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Exp a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Floor a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Power a n) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Minus a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Ln a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Inverse a) x \\<longleftrightarrow> fresh_floatarith a x\"\n| \"fresh_floatarith (Add a b) x \\<longleftrightarrow> fresh_floatarith a x \\<and> fresh_floatarith b x\"\n| \"fresh_floatarith (Mult a b) x \\<longleftrightarrow> fresh_floatarith a x \\<and> fresh_floatarith b x\"\n| \"fresh_floatarith (Max a b) x \\<longleftrightarrow> fresh_floatarith a x \\<and> fresh_floatarith b x\"\n| \"fresh_floatarith (Min a b) x \\<longleftrightarrow> fresh_floatarith a x \\<and> fresh_floatarith b x\"\n| \"fresh_floatarith (Powr a b) x \\<longleftrightarrow> fresh_floatarith a x \\<and> fresh_floatarith b x\""], ["", "lemma fresh_floatarith_subst:\n  fixes v::float\n  assumes \"fresh_floatarith e x\"\n  assumes \"x < length vs\"\n  shows \"interpret_floatarith e (vs[x:=v]) = interpret_floatarith e vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith e (map real_of_float (vs[x := v])) =\n    interpret_floatarith e (map real_of_float vs)", "using assms"], ["proof (prove)\nusing this:\n  fresh_floatarith e x\n  x < length vs\n\ngoal (1 subgoal):\n 1. interpret_floatarith e (map real_of_float (vs[x := v])) =\n    interpret_floatarith e (map real_of_float vs)", "by (induction e) (auto simp: map_update)"], ["", "lemma fresh_floatarith_max_Var:\n  assumes \"max_Var_floatarith ea \\<le> i\"\n  shows \"fresh_floatarith ea i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatarith ea i", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatarith ea \\<le> i\n\ngoal (1 subgoal):\n 1. fresh_floatarith ea i", "by (induction ea) auto"], ["", "primrec fresh_floatariths where\n  \"fresh_floatariths [] x \\<longleftrightarrow> True\"\n| \"fresh_floatariths (a#as) x \\<longleftrightarrow> fresh_floatarith a x \\<and> fresh_floatariths as x\""], ["", "lemma fresh_floatariths_max_Var:\n  assumes \"max_Var_floatariths ea \\<le> i\"\n  shows \"fresh_floatariths ea i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatariths ea i", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatariths ea \\<le> i\n\ngoal (1 subgoal):\n 1. fresh_floatariths ea i", "by (induction ea) (auto simp: fresh_floatarith_max_Var)"], ["", "lemma\n  interpret_floatariths_take_eqI:\n  assumes \"take n ys = take n zs\"\n  assumes \"max_Var_floatariths ea \\<le> n\"\n  shows \"interpret_floatariths ea ys = interpret_floatariths ea zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths ea ys = interpret_floatariths ea zs", "by (rule interpret_floatariths_eq_take_max_VarI) (rule take_greater_eqI[OF assms])"], ["", "lemma\n  interpret_floatarith_fresh_eqI:\n  assumes \"\\<And>i. fresh_floatarith ea i \\<or> (i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i)\"\n  shows \"interpret_floatarith ea ys = interpret_floatarith ea zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith ea ys = interpret_floatarith ea zs", "using assms"], ["proof (prove)\nusing this:\n  fresh_floatarith ea ?i \\<or>\n  ?i < length ys \\<and> ?i < length zs \\<and> ys ! ?i = zs ! ?i\n\ngoal (1 subgoal):\n 1. interpret_floatarith ea ys = interpret_floatarith ea zs", "by (induction ea) force+"], ["", "lemma\n  interpret_floatariths_fresh_eqI:\n  assumes \"\\<And>i. fresh_floatariths ea i \\<or> (i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i)\"\n  shows \"interpret_floatariths ea ys = interpret_floatariths ea zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths ea ys = interpret_floatariths ea zs", "using assms"], ["proof (prove)\nusing this:\n  fresh_floatariths ea ?i \\<or>\n  ?i < length ys \\<and> ?i < length zs \\<and> ys ! ?i = zs ! ?i\n\ngoal (1 subgoal):\n 1. interpret_floatariths ea ys = interpret_floatariths ea zs", "apply (induction ea)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>i.\n        fresh_floatariths [] i \\<or>\n        i < length ys \\<and>\n        i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n    interpret_floatariths [] ys = interpret_floatariths [] zs\n 2. \\<And>a ea.\n       \\<lbrakk>(\\<And>i.\n                    fresh_floatariths ea i \\<or>\n                    i < length ys \\<and>\n                    i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n                interpret_floatariths ea ys = interpret_floatariths ea zs;\n        \\<And>i.\n           fresh_floatariths (a # ea) i \\<or>\n           i < length ys \\<and>\n           i < length zs \\<and> ys ! i = zs ! i\\<rbrakk>\n       \\<Longrightarrow> interpret_floatariths (a # ea) ys =\n                         interpret_floatariths (a # ea) zs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        fresh_floatariths [] i \\<or>\n        i < length ys \\<and>\n        i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n    interpret_floatariths [] ys = interpret_floatariths [] zs", "by (force simp: interpret_floatarith_fresh_eqI intro: interpret_floatarith_fresh_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ea.\n       \\<lbrakk>(\\<And>i.\n                    fresh_floatariths ea i \\<or>\n                    i < length ys \\<and>\n                    i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n                interpret_floatariths ea ys = interpret_floatariths ea zs;\n        \\<And>i.\n           fresh_floatariths (a # ea) i \\<or>\n           i < length ys \\<and>\n           i < length zs \\<and> ys ! i = zs ! i\\<rbrakk>\n       \\<Longrightarrow> interpret_floatariths (a # ea) ys =\n                         interpret_floatariths (a # ea) zs", "subgoal for e ea"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<And>i.\n                 fresh_floatariths ea i \\<or>\n                 i < length ys \\<and>\n                 i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n             interpret_floatariths ea ys = interpret_floatariths ea zs;\n     \\<And>i.\n        fresh_floatariths (e # ea) i \\<or>\n        i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i\\<rbrakk>\n    \\<Longrightarrow> interpret_floatariths (e # ea) ys =\n                      interpret_floatariths (e # ea) zs", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<And>i.\n                 fresh_floatariths ea i \\<or>\n                 i < length ys \\<and>\n                 i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n             interpret_floatariths ea ys = interpret_floatariths ea zs;\n     \\<And>i.\n        fresh_floatarith e i \\<and> fresh_floatariths ea i \\<or>\n        i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i\\<rbrakk>\n    \\<Longrightarrow> interpret_floatarith e ys =\n                      interpret_floatarith e zs \\<and>\n                      interpret_floatariths ea ys =\n                      interpret_floatariths ea zs", "apply (auto simp: list_eq_iff_nth_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<And>i.\n                 fresh_floatariths ea i \\<or>\n                 i < length ys \\<and>\n                 i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n             \\<forall>i<length ea.\n                interpret_floatarith (ea ! i) ys =\n                interpret_floatarith (ea ! i) zs;\n     \\<And>i.\n        fresh_floatarith e i \\<and> fresh_floatariths ea i \\<or>\n        i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i\\<rbrakk>\n    \\<Longrightarrow> interpret_floatarith e ys = interpret_floatarith e zs", "using interpret_floatarith_fresh_eqI"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      fresh_floatarith ?ea i \\<or>\n      i < length ?ys \\<and>\n      i < length ?zs \\<and> ?ys ! i = ?zs ! i) \\<Longrightarrow>\n  interpret_floatarith ?ea ?ys = interpret_floatarith ?ea ?zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<And>i.\n                 fresh_floatariths ea i \\<or>\n                 i < length ys \\<and>\n                 i < length zs \\<and> ys ! i = zs ! i) \\<Longrightarrow>\n             \\<forall>i<length ea.\n                interpret_floatarith (ea ! i) ys =\n                interpret_floatarith (ea ! i) zs;\n     \\<And>i.\n        fresh_floatarith e i \\<and> fresh_floatariths ea i \\<or>\n        i < length ys \\<and> i < length zs \\<and> ys ! i = zs ! i\\<rbrakk>\n    \\<Longrightarrow> interpret_floatarith e ys = interpret_floatarith e zs", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  interpret_floatarith_max_Var_cong:\n  assumes \"\\<And>i. i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatarith f ys = interpret_floatarith f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith f ys = interpret_floatarith f xs", "using assms"], ["proof (prove)\nusing this:\n  ?i < max_Var_floatarith f \\<Longrightarrow> xs ! ?i = ys ! ?i\n\ngoal (1 subgoal):\n 1. interpret_floatarith f ys = interpret_floatarith f xs", "by (induction f) auto"], ["", "lemma\n  interpret_floatarith_fresh_cong:\n  assumes \"\\<And>i. \\<not>fresh_floatarith f i \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatarith f ys = interpret_floatarith f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith f ys = interpret_floatarith f xs", "using assms"], ["proof (prove)\nusing this:\n  \\<not> fresh_floatarith f ?i \\<Longrightarrow> xs ! ?i = ys ! ?i\n\ngoal (1 subgoal):\n 1. interpret_floatarith f ys = interpret_floatarith f xs", "by (induction f) auto"], ["", "lemma max_Var_floatarith_le_max_Var_floatariths:\n  \"fa \\<in> set fas \\<Longrightarrow> max_Var_floatarith fa \\<le> max_Var_floatariths fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fa \\<in> set fas \\<Longrightarrow>\n    max_Var_floatarith fa \\<le> max_Var_floatariths fas", "by (induction fas) (auto simp: nth_Cons max_def split: nat.splits)"], ["", "lemma max_Var_floatarith_le_max_Var_floatariths_nth:\n  \"n < length fas \\<Longrightarrow> max_Var_floatarith (fas ! n) \\<le> max_Var_floatariths fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length fas \\<Longrightarrow>\n    max_Var_floatarith (fas ! n) \\<le> max_Var_floatariths fas", "by (rule max_Var_floatarith_le_max_Var_floatariths) auto"], ["", "lemma max_Var_floatariths_leI:\n  assumes \"\\<And>i. i < length xs \\<Longrightarrow> max_Var_floatarith (xs ! i) \\<le> F\"\n  shows \"max_Var_floatariths xs \\<le> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths xs \\<le> F", "using assms"], ["proof (prove)\nusing this:\n  ?i < length xs \\<Longrightarrow> max_Var_floatarith (xs ! ?i) \\<le> F\n\ngoal (1 subgoal):\n 1. max_Var_floatariths xs \\<le> F", "by (auto simp: max_Var_floatariths_Max in_set_conv_nth)"], ["", "lemma fresh_floatariths_map_Var[simp]:\n  \"fresh_floatariths (map floatarith.Var xs) i \\<longleftrightarrow> i \\<notin> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatariths (map Var xs) i = (i \\<notin> set xs)", "by (induction xs) auto"], ["", "lemma max_Var_floatarith_fold_const_fa:\n  \"max_Var_floatarith (fold_const_fa fa) \\<le> max_Var_floatarith fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatarith (fold_const_fa fa) \\<le> max_Var_floatarith fa", "by (induction fa) (auto simp: fold_const_fa.simps split!: option.splits floatarith.splits)"], ["", "lemma max_Var_floatariths_fold_const_fa:\n  \"max_Var_floatariths (map fold_const_fa xs) \\<le> max_Var_floatariths xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map fold_const_fa xs) \\<le> max_Var_floatariths xs", "by (auto simp: intro!: max_Var_floatariths_leI max_Var_floatarith_le_max_Var_floatariths_nth\n      max_Var_floatarith_fold_const_fa[THEN order_trans])"], ["", "lemma interpret_form_max_Var_cong:\n  assumes \"\\<And>i. i < max_Var_form f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_form f xs = interpret_form f ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_form f xs = interpret_form f ys", "using assms"], ["proof (prove)\nusing this:\n  ?i < max_Var_form f \\<Longrightarrow> xs ! ?i = ys ! ?i\n\ngoal (1 subgoal):\n 1. interpret_form f xs = interpret_form f ys", "by (induction f) (auto simp: interpret_floatarith_max_Var_cong[where xs=xs and ys=ys])"], ["", "lemma max_Var_floatariths_lessI: \"i < max_Var_floatarith (fas ! j) \\<Longrightarrow> j < length fas \\<Longrightarrow> i < max_Var_floatariths fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < max_Var_floatarith (fas ! j); j < length fas\\<rbrakk>\n    \\<Longrightarrow> i < max_Var_floatariths fas", "by (metis leD le_trans less_le max_Var_floatarith_le_max_Var_floatariths nth_mem)"], ["", "lemma interpret_floatariths_max_Var_cong:\n  assumes \"\\<And>i. i < max_Var_floatariths f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatariths f ys = interpret_floatariths f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths f ys = interpret_floatariths f xs", "by (auto intro!: nth_equalityI interpret_floatarith_max_Var_cong assms max_Var_floatariths_lessI)"], ["", "lemma max_Var_floatarithimage_Var[simp]: \"max_Var_floatarith ` Var ` X = Suc ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatarith ` Var ` X = Suc ` X", "by force"], ["", "lemma max_Var_floatariths_map_Var[simp]:\n  \"max_Var_floatariths (map Var xs) = (if xs = [] then 0 else Suc (linorder_class.Max (set xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map Var xs) =\n    (if xs = [] then 0 else Suc (Max (set xs)))", "by (auto simp: max_Var_floatariths_Max hom_Max_commute split: if_splits)"], ["", "lemma Max_atLeastLessThan_nat[simp]: \"a < b \\<Longrightarrow> linorder_class.Max {a..<b} = b - 1\" for a b::nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < b \\<Longrightarrow> Max {a..<b} = b - 1", "by (auto intro!: Max_eqI)"], ["", "subsection \\<open>Derivatives\\<close>"], ["", "lemma isDERIV_Power_iff: \"isDERIV j (Power fa n) xs = (if n = 0 then True else isDERIV j fa xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV j (fa ^\\<^sub>e n) xs =\n    (if n = 0 then True else isDERIV j fa xs)", "by (cases n) auto"], ["", "lemma isDERIV_max_Var_floatarithI:\n  assumes \"isDERIV n f ys\"\n  assumes \"\\<And>i. i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"isDERIV n f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV n f xs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV n f ys\n  ?i < max_Var_floatarith f \\<Longrightarrow> xs ! ?i = ys ! ?i\n\ngoal (1 subgoal):\n 1. isDERIV n f xs", "proof (induction f)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Add f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Add f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Add f1 f2) xs\n 2. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Minus f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Minus f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Minus f) xs\n 3. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Mult f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Mult f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Mult f1 f2) xs\n 4. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Inverse f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Inverse f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Inverse f) xs\n 5. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Cos f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Cos f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Cos f) xs\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Arctan f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Arctan f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Arctan f) xs\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Abs f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Abs f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Abs f) xs\n 8. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Max f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Max f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Max f1 f2) xs\n 9. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Min f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Min f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Min f1 f2) xs\n 10. \\<lbrakk>isDERIV n Pi ys;\n      \\<And>i.\n         i < max_Var_floatarith Pi \\<Longrightarrow>\n         xs ! i = ys ! i\\<rbrakk>\n     \\<Longrightarrow> isDERIV n Pi xs\nA total of 18 subgoals...", "case (Power f n)"], ["proof (state)\nthis:\n  \\<lbrakk>isDERIV n f ys;\n   \\<And>i.\n      i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\\<rbrakk>\n  \\<Longrightarrow> isDERIV n f xs\n  isDERIV n (f ^\\<^sub>e n) ys\n  ?i < max_Var_floatarith (f ^\\<^sub>e n) \\<Longrightarrow>\n  xs ! ?i = ys ! ?i\n\ngoal (18 subgoals):\n 1. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Add f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Add f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Add f1 f2) xs\n 2. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Minus f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Minus f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Minus f) xs\n 3. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Mult f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Mult f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Mult f1 f2) xs\n 4. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Inverse f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Inverse f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Inverse f) xs\n 5. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Cos f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Cos f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Cos f) xs\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Arctan f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Arctan f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Arctan f) xs\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Abs f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Abs f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Abs f) xs\n 8. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Max f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Max f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Max f1 f2) xs\n 9. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Min f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Min f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Min f1 f2) xs\n 10. \\<lbrakk>isDERIV n Pi ys;\n      \\<And>i.\n         i < max_Var_floatarith Pi \\<Longrightarrow>\n         xs ! i = ys ! i\\<rbrakk>\n     \\<Longrightarrow> isDERIV n Pi xs\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>isDERIV n f ys;\n   \\<And>i.\n      i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\\<rbrakk>\n  \\<Longrightarrow> isDERIV n f xs\n  isDERIV n (f ^\\<^sub>e n) ys\n  ?i < max_Var_floatarith (f ^\\<^sub>e n) \\<Longrightarrow>\n  xs ! ?i = ys ! ?i", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>isDERIV n f ys;\n   \\<And>i.\n      i < max_Var_floatarith f \\<Longrightarrow> xs ! i = ys ! i\\<rbrakk>\n  \\<Longrightarrow> isDERIV n f xs\n  isDERIV n (f ^\\<^sub>e n) ys\n  ?i < max_Var_floatarith (f ^\\<^sub>e n) \\<Longrightarrow>\n  xs ! ?i = ys ! ?i\n\ngoal (1 subgoal):\n 1. isDERIV n (f ^\\<^sub>e n) xs", "by (cases n) auto"], ["proof (state)\nthis:\n  isDERIV n (f ^\\<^sub>e n) xs\n\ngoal (17 subgoals):\n 1. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Add f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Add f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Add f1 f2) xs\n 2. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Minus f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Minus f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Minus f) xs\n 3. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Mult f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Mult f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Mult f1 f2) xs\n 4. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Inverse f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Inverse f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Inverse f) xs\n 5. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Cos f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Cos f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Cos f) xs\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Arctan f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Arctan f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Arctan f) xs\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>isDERIV n f ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f xs;\n        isDERIV n (Abs f) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Abs f) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Abs f) xs\n 8. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Max f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Max f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Max f1 f2) xs\n 9. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>isDERIV n f1 ys;\n                 \\<And>i.\n                    i < max_Var_floatarith f1 \\<Longrightarrow>\n                    xs ! i = ys ! i\\<rbrakk>\n                \\<Longrightarrow> isDERIV n f1 xs;\n        \\<lbrakk>isDERIV n f2 ys;\n         \\<And>i.\n            i < max_Var_floatarith f2 \\<Longrightarrow>\n            xs ! i = ys ! i\\<rbrakk>\n        \\<Longrightarrow> isDERIV n f2 xs;\n        isDERIV n (Min f1 f2) ys;\n        \\<And>i.\n           i < max_Var_floatarith (Min f1 f2) \\<Longrightarrow>\n           xs ! i = ys ! i\\<rbrakk>\n       \\<Longrightarrow> isDERIV n (Min f1 f2) xs\n 10. \\<lbrakk>isDERIV n Pi ys;\n      \\<And>i.\n         i < max_Var_floatarith Pi \\<Longrightarrow>\n         xs ! i = ys ! i\\<rbrakk>\n     \\<Longrightarrow> isDERIV n Pi xs\nA total of 17 subgoals...", "qed (auto simp: max_def interpret_floatarith_max_Var_cong[of _ xs ys] split: if_splits)"], ["", "definition isFDERIV where \"isFDERIV n xs fas vs \\<longleftrightarrow>\n  (\\<forall>i<n. \\<forall>j<n. isDERIV (xs ! i) (fas ! j) vs) \\<and> length fas = n \\<and> length xs = n\""], ["", "lemma isFDERIV_I: \"(\\<And>i j. i < n \\<Longrightarrow> j < n \\<Longrightarrow> isDERIV (xs ! i) (fas ! j) vs) \\<Longrightarrow>\n  length fas = n \\<Longrightarrow> length xs = n \\<Longrightarrow> isFDERIV n xs fas vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i j.\n                \\<lbrakk>i < n; j < n\\<rbrakk>\n                \\<Longrightarrow> isDERIV (xs ! i) (fas ! j) vs;\n     length fas = n; length xs = n\\<rbrakk>\n    \\<Longrightarrow> isFDERIV n xs fas vs", "by (auto simp: isFDERIV_def)"], ["", "lemma isFDERIV_isDERIV_D: \"isFDERIV n xs fas vs \\<Longrightarrow> i < n \\<Longrightarrow> j < n \\<Longrightarrow> isDERIV (xs ! i) (fas ! j) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isFDERIV n xs fas vs; i < n; j < n\\<rbrakk>\n    \\<Longrightarrow> isDERIV (xs ! i) (fas ! j) vs", "by (auto simp: isFDERIV_def)"], ["", "lemma isFDERIV_lengthD: \"length fas = n\" \"length xs = n\" if \"isFDERIV n xs fas vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length fas = n &&& length xs = n", "using that"], ["proof (prove)\nusing this:\n  isFDERIV n xs fas vs\n\ngoal (1 subgoal):\n 1. length fas = n &&& length xs = n", "by (auto simp: isFDERIV_def)"], ["", "lemma isFDERIV_uptD: \"isFDERIV n [0..<n] fas vs \\<Longrightarrow> i < n \\<Longrightarrow> j < n \\<Longrightarrow> isDERIV i (fas ! j) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isFDERIV n [0..<n] fas vs; i < n; j < n\\<rbrakk>\n    \\<Longrightarrow> isDERIV i (fas ! j) vs", "by (auto simp: isFDERIV_def)"], ["", "lemma isFDERIV_max_Var_congI: \"isFDERIV n xs fas ws\"\n  if f: \"isFDERIV n xs fas vs\" and c: \"(\\<And>i. i < max_Var_floatariths fas \\<Longrightarrow> vs ! i = ws ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV n xs fas ws", "using c f"], ["proof (prove)\nusing this:\n  ?i < max_Var_floatariths fas \\<Longrightarrow> vs ! ?i = ws ! ?i\n  isFDERIV n xs fas vs\n\ngoal (1 subgoal):\n 1. isFDERIV n xs fas ws", "by (auto simp: isFDERIV_def max_Var_floatariths_lessI\n      intro!: isFDERIV_I isDERIV_max_Var_floatarithI[OF isFDERIV_isDERIV_D[OF f]])"], ["", "lemma isFDERIV_max_Var_cong: \"isFDERIV n xs fas ws \\<longleftrightarrow> isFDERIV n xs fas vs\"\n  if c: \"(\\<And>i. i < max_Var_floatariths fas \\<Longrightarrow> vs ! i = ws ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV n xs fas ws = isFDERIV n xs fas vs", "using c"], ["proof (prove)\nusing this:\n  ?i < max_Var_floatariths fas \\<Longrightarrow> vs ! ?i = ws ! ?i\n\ngoal (1 subgoal):\n 1. isFDERIV n xs fas ws = isFDERIV n xs fas vs", "by (auto intro: isFDERIV_max_Var_congI)"], ["", "lemma isDERIV_max_VarI:\n  \"i \\<ge> max_Var_floatarith fa \\<Longrightarrow> isDERIV j fa xs \\<Longrightarrow> isDERIV i fa xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>max_Var_floatarith fa \\<le> i; isDERIV j fa xs\\<rbrakk>\n    \\<Longrightarrow> isDERIV i fa xs", "by (induction fa) (auto simp: isDERIV_Power_iff)"], ["", "lemmas max_Var_floatarith_le_max_Var_floatariths_nthI =\n  max_Var_floatarith_le_max_Var_floatariths_nth[THEN order_trans]"], ["", "lemma\n  isFDERIV_appendD1:\n  assumes \"isFDERIV (J + K) [0..<J + K] (es @ rs) xs\"\n  assumes \"length es = J\"\n  assumes \"length rs = K\"\n  assumes \"max_Var_floatariths es \\<le> J\"\n  shows \"isFDERIV J [0..<J] (es) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV J [0..<J] es xs", "unfolding isFDERIV_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i<J. \\<forall>j<J. isDERIV ([0..<J] ! i) (es ! j) xs) \\<and>\n    length es = J \\<and> length [0..<J] = J", "apply (safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < J; j < J\\<rbrakk>\n       \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs\n 2. length es = J\n 3. length [0..<J] = J", "subgoal for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J; j < J\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs", "using assms"], ["proof (prove)\nusing this:\n  isFDERIV (J + K) [0..<J + K] (es @ rs) xs\n  length es = J\n  length rs = K\n  max_Var_floatariths es \\<le> J\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J; j < J\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs", "apply (cases \"i < length es\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs\n 2. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs", "by (auto simp: nth_append isFDERIV_def) (metis add.commute trans_less_add2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J] ! i) (es ! j) xs", "apply (rule isDERIV_max_VarI[where j=0])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> max_Var_floatarith (es ! j) \\<le> [0..<J] ! i\n 2. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV 0 (es ! j) xs", "apply (rule max_Var_floatarith_le_max_Var_floatariths_nthI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> j < length es\n 2. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> max_Var_floatariths es \\<le> [0..<J] ! i\n 3. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV 0 (es ! j) xs", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> max_Var_floatariths es \\<le> [0..<J] ! i\n 2. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV 0 (es ! j) xs", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J; j < J; isFDERIV (J + K) [0..<J + K] (es @ rs) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> i < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV 0 (es ! j) xs", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. length es = J\n 2. length [0..<J] = J", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. length es = J", "by (auto simp: assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<J] = J", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<J] = J", "by (auto simp: assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma interpret_floatariths_Var[simp]:\n  \"interpret_floatariths (map floatarith.Var xs) vs = (map (nth vs) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths (map Var xs) vs = map ((!) vs) xs", "by (induction xs) (auto simp: )"], ["", "lemma max_Var_floatariths_append[simp]: \"max_Var_floatariths (xs @ ys) = max (max_Var_floatariths xs) (max_Var_floatariths ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (xs @ ys) =\n    max (max_Var_floatariths xs) (max_Var_floatariths ys)", "by (induction xs) (auto)"], ["", "lemma map_nth_append_upt[simp]:\n  assumes \"a \\<ge> length xs\"\n  shows \"map ((!) (xs @ ys)) [a..<b] = map ((!) ys) [a - length xs..<b - length xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (xs @ ys)) [a..<b] =\n    map ((!) ys) [a - length xs..<b - length xs]", "using assms"], ["proof (prove)\nusing this:\n  length xs \\<le> a\n\ngoal (1 subgoal):\n 1. map ((!) (xs @ ys)) [a..<b] =\n    map ((!) ys) [a - length xs..<b - length xs]", "by (auto intro!: nth_equalityI simp: nth_append)"], ["", "lemma map_nth_Cons_upt[simp]:\n  assumes \"a > 0\"\n  shows \"map ((!) (x # ys)) [a..<b] = map ((!) ys) [a - Suc 0..<b - Suc 0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (x # ys)) [a..<b] = map ((!) ys) [a - Suc 0..<b - Suc 0]", "using assms"], ["proof (prove)\nusing this:\n  0 < a\n\ngoal (1 subgoal):\n 1. map ((!) (x # ys)) [a..<b] = map ((!) ys) [a - Suc 0..<b - Suc 0]", "by (auto intro!: nth_equalityI simp: nth_append)"], ["", "lemma map_nth_eq_self[simp]:\n  shows \"length fas = l \\<Longrightarrow> (map ((!) fas) [0..<l]) = fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length fas = l \\<Longrightarrow> map ((!) fas) [0..<l] = fas", "by (auto simp: intro!: nth_equalityI)"], ["", "lemma\n  isFDERIV_appendI1:\n  assumes \"isFDERIV J [0..<J] (es) xs\"\n  assumes \"\\<And>i j. i < J + K \\<Longrightarrow> j < K \\<Longrightarrow> isDERIV i (rs ! j) xs\"\n  assumes \"length es = J\"\n  assumes \"length rs = K\"\n  assumes \"max_Var_floatariths es \\<le> J\"\n  shows \"isFDERIV (J + K) [0..<J + K] (es @ rs) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV (J + K) [0..<J + K] (es @ rs) xs", "unfolding isFDERIV_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i<J + K.\n        \\<forall>j<J + K.\n           isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs) \\<and>\n    length (es @ rs) = J + K \\<and> length [0..<J + K] = J + K", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < J + K; j < J + K\\<rbrakk>\n       \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs\n 2. length (es @ rs) = J + K\n 3. length [0..<J + K] = J + K", "subgoal for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J + K; j < J + K\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs", "using assms"], ["proof (prove)\nusing this:\n  isFDERIV J [0..<J] es xs\n  \\<lbrakk>?i < J + K; ?j < K\\<rbrakk>\n  \\<Longrightarrow> isDERIV ?i (rs ! ?j) xs\n  length es = J\n  length rs = K\n  max_Var_floatariths es \\<le> J\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J + K; j < J + K\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs", "apply (cases \"j < length es\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < J + K; j < J + K; isFDERIV J [0..<J] es xs;\n     \\<And>i j.\n        \\<lbrakk>i < J + K; j < K\\<rbrakk>\n        \\<Longrightarrow> isDERIV i (rs ! j) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     j < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs\n 2. \\<lbrakk>i < J + K; j < J + K; isFDERIV J [0..<J] es xs;\n     \\<And>i j.\n        \\<lbrakk>i < J + K; j < K\\<rbrakk>\n        \\<Longrightarrow> isDERIV i (rs ! j) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> j < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J + K; j < J + K; isFDERIV J [0..<J] es xs;\n     \\<And>i j.\n        \\<lbrakk>i < J + K; j < K\\<rbrakk>\n        \\<Longrightarrow> isDERIV i (rs ! j) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     j < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs", "apply (auto simp: nth_append isFDERIV_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length es + length rs;\n     \\<forall>i<length es. \\<forall>j<length es. isDERIV i (es ! j) xs;\n     \\<And>i j.\n        \\<lbrakk>i < length es + length rs; j < length rs\\<rbrakk>\n        \\<Longrightarrow> isDERIV i (rs ! j) xs;\n     max_Var_floatariths es \\<le> length es; j < length es; J = length es;\n     K = length rs\\<rbrakk>\n    \\<Longrightarrow> isDERIV i (es ! j) xs", "by (metis (no_types, hide_lams) isDERIV_max_VarI le_trans less_le\n          max_Var_floatarith_le_max_Var_floatariths_nthI nat_le_linear)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J + K; j < J + K; isFDERIV J [0..<J] es xs;\n     \\<And>i j.\n        \\<lbrakk>i < J + K; j < K\\<rbrakk>\n        \\<Longrightarrow> isDERIV i (rs ! j) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> j < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < J + K; j < J + K; isFDERIV J [0..<J] es xs;\n     \\<And>i j.\n        \\<lbrakk>i < J + K; j < K\\<rbrakk>\n        \\<Longrightarrow> isDERIV i (rs ! j) xs;\n     length es = J; length rs = K; max_Var_floatariths es \\<le> J;\n     \\<not> j < length es\\<rbrakk>\n    \\<Longrightarrow> isDERIV ([0..<J + K] ! i) ((es @ rs) ! j) xs", "by (auto simp: nth_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (es @ rs) = J + K\n 2. length [0..<J + K] = J + K", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (es @ rs) = J + K", "by (auto simp: assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<J + K] = J + K", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<J + K] = J + K", "by (auto simp: assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma matrix_matrix_mult_zero[simp]:\n  \"a ** 0 = 0\" \"0 ** a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ** 0 = 0 &&& 0 ** a = 0", "by (vector matrix_matrix_mult_def)+"], ["", "lemma scaleR_blinfun_compose_left: \"i *\\<^sub>R (A o\\<^sub>L B) = i *\\<^sub>R A o\\<^sub>L B\"\n  and scaleR_blinfun_compose_right: \"i *\\<^sub>R (A o\\<^sub>L B) = A o\\<^sub>L i *\\<^sub>R B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i *\\<^sub>R (A o\\<^sub>L B) = i *\\<^sub>R A o\\<^sub>L B &&&\n    i *\\<^sub>R (A o\\<^sub>L B) = A o\\<^sub>L i *\\<^sub>R B", "by (auto intro!: blinfun_eqI simp: blinfun.bilinear_simps)"], ["", "lemma\n  matrix_blinfun_compose:\n  fixes A B::\"(real ^ 'n) \\<Rightarrow>\\<^sub>L (real ^ 'n)\"\n  shows \"matrix (A o\\<^sub>L B) = (matrix A) ** (matrix B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix (blinfun_apply (A o\\<^sub>L B)) =\n    matrix (blinfun_apply A) ** matrix (blinfun_apply B)", "by transfer (auto simp: matrix_compose linear_linear)"], ["", "lemma matrix_add_rdistrib: \"((B + C) ** A) = (B ** A) + (C ** A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B + C) ** A = B ** A + C ** A", "by (vector matrix_matrix_mult_def sum.distrib[symmetric] field_simps)"], ["", "lemma matrix_scaleR_right: \"r *\\<^sub>R (a::'a::real_algebra_1^'n^'m) ** b = r *\\<^sub>R (a ** b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r *\\<^sub>R a ** b = r *\\<^sub>R (a ** b)", "by (vector matrix_matrix_mult_def algebra_simps scaleR_sum_right)"], ["", "lemma matrix_scaleR_left: \"(a::'a::real_algebra_1^'n^'m) ** r *\\<^sub>R b = r *\\<^sub>R (a ** b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ** r *\\<^sub>R b = r *\\<^sub>R (a ** b)", "by (vector matrix_matrix_mult_def algebra_simps scaleR_sum_right)"], ["", "lemma bounded_bilinear_matrix_matrix_mult[bounded_bilinear]:\n   \"bounded_bilinear ((**)::\n    ('a::{euclidean_space, real_normed_algebra_1}^'n^'m) \\<Rightarrow>\n    ('a::{euclidean_space, real_normed_algebra_1}^'p^'n) \\<Rightarrow>\n    ('a::{euclidean_space, real_normed_algebra_1}^'p^'m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_bilinear (**)", "unfolding bilinear_conv_bounded_bilinear[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. bilinear (**)", "unfolding bilinear_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. linear ((**) x)) \\<and>\n    (\\<forall>y. linear (\\<lambda>x. x ** y))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. linear ((**) x)\n 2. \\<And>y. linear (\\<lambda>x. x ** y)", "by unfold_locales (auto simp: matrix_add_ldistrib matrix_add_rdistrib matrix_scaleR_right matrix_scaleR_left)"], ["", "lemma norm_axis: \"norm (axis ia 1::'a::{real_normed_algebra_1}^'n) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (axis ia (1::'a)) = 1", "by (auto simp: axis_def norm_vec_def L2_set_def if_distrib if_distribR sum.delta\n      cong: if_cong)"], ["", "lemma abs_vec_nth_blinfun_apply_lemma:\n  fixes x::\"(real^'n) \\<Rightarrow>\\<^sub>L (real^'m)\"\n  shows \"abs (vec_nth (blinfun_apply x (axis ia 1)) i) \\<le> norm x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>blinfun_apply x (axis ia 1) $ i\\<bar> \\<le> norm x", "apply (rule component_le_norm_cart[THEN order_trans])"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (blinfun_apply x (axis ia 1)) \\<le> norm x", "apply (rule norm_blinfun[THEN order_trans])"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm x * norm (axis ia 1) \\<le> norm x", "by (auto simp: norm_axis)"], ["", "lemma bounded_linear_matrix_blinfun_apply: \"bounded_linear (\\<lambda>x::(real^'n) \\<Rightarrow>\\<^sub>L (real^'m). matrix (blinfun_apply x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (\\<lambda>x. matrix (blinfun_apply x))", "apply standard"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b1 b2.\n       matrix (blinfun_apply (b1 + b2)) =\n       matrix (blinfun_apply b1) + matrix (blinfun_apply b2)\n 2. \\<And>r b.\n       matrix (blinfun_apply (r *\\<^sub>R b)) =\n       r *\\<^sub>R matrix (blinfun_apply b)\n 3. \\<exists>K. \\<forall>x. norm (matrix (blinfun_apply x)) \\<le> norm x * K", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix (blinfun_apply (b1_ + b2_)) =\n    matrix (blinfun_apply b1_) + matrix (blinfun_apply b2_)", "by (vector blinfun.bilinear_simps matrix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r b.\n       matrix (blinfun_apply (r *\\<^sub>R b)) =\n       r *\\<^sub>R matrix (blinfun_apply b)\n 2. \\<exists>K. \\<forall>x. norm (matrix (blinfun_apply x)) \\<le> norm x * K", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix (blinfun_apply (r_ *\\<^sub>R b_)) =\n    r_ *\\<^sub>R matrix (blinfun_apply b_)", "by (vector blinfun.bilinear_simps matrix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>K. \\<forall>x. norm (matrix (blinfun_apply x)) \\<le> norm x * K", "apply (rule exI[where x=\"real (CARD('n) * CARD('m))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       norm (matrix (blinfun_apply x))\n       \\<le> norm x * real (CARD('n) * CARD('m))", "apply (auto simp: matrix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm (\\<chi>i j. blinfun_apply x (axis j 1) $ i)\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (subst norm_vec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       L2_set\n        (\\<lambda>i. norm ((\\<chi>i j. blinfun_apply x (axis j 1) $ i) $ i))\n        UNIV\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (rule L2_set_le_sum[THEN order_trans])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       i \\<in> UNIV \\<Longrightarrow>\n       0 \\<le> norm ((\\<chi>i j. blinfun_apply x (axis j 1) $ i) $ i)\n 2. \\<And>x.\n       (\\<Sum>i\\<in>UNIV.\n          norm ((\\<chi>i j. blinfun_apply x (axis j 1) $ i) $ i))\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Sum>i\\<in>UNIV.\n          norm ((\\<chi>i j. blinfun_apply x (axis j 1) $ i) $ i))\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Sum>i\\<in>UNIV. norm (\\<chi>j. blinfun_apply x (axis j 1) $ i))\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (rule sum_mono[THEN order_trans])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       i \\<in> UNIV \\<Longrightarrow>\n       norm (\\<chi>j. blinfun_apply x (axis j 1) $ i) \\<le> ?g19 x i\n 2. \\<And>x.\n       sum (?g19 x) UNIV \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (subst norm_vec_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       i \\<in> UNIV \\<Longrightarrow>\n       L2_set\n        (\\<lambda>ia. norm ((\\<chi>j. blinfun_apply x (axis j 1) $ i) $ ia))\n        UNIV\n       \\<le> ?g24 x x i i\n 2. \\<And>x.\n       (\\<Sum>i\\<in>UNIV. ?g24 x x i i)\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (rule L2_set_le_sum)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i ia.\n       \\<lbrakk>i \\<in> UNIV; ia \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> norm\n                                  ((\\<chi>j.\n blinfun_apply x (axis j 1) $ i) $\n                                   ia)\n 2. \\<And>x.\n       (\\<Sum>i\\<in>UNIV.\n          \\<Sum>ia\\<in>UNIV.\n            norm ((\\<chi>j. blinfun_apply x (axis j 1) $ i) $ ia))\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Sum>i\\<in>UNIV.\n          \\<Sum>ia\\<in>UNIV.\n            norm ((\\<chi>j. blinfun_apply x (axis j 1) $ i) $ ia))\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (rule sum_mono[THEN order_trans])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       i \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>ia\\<in>UNIV.\n          norm ((\\<chi>j. blinfun_apply x (axis j 1) $ i) $ ia))\n       \\<le> ?g29 x i\n 2. \\<And>x.\n       sum (?g29 x) UNIV \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (rule sum_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i ia.\n       \\<lbrakk>i \\<in> UNIV; ia \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> norm\n                          ((\\<chi>j. blinfun_apply x (axis j 1) $ i) $ ia)\n                         \\<le> ?g32 x i ia\n 2. \\<And>x.\n       (\\<Sum>i\\<in>UNIV. sum (?g32 x i) UNIV)\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i ia.\n       \\<bar>blinfun_apply x (axis ia 1) $ i\\<bar> \\<le> ?g32 x i ia\n 2. \\<And>x.\n       (\\<Sum>i\\<in>UNIV. sum (?g32 x i) UNIV)\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (rule abs_vec_nth_blinfun_apply_lemma)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Sum>i\\<in>UNIV. \\<Sum>i\\<in>UNIV. norm x)\n       \\<le> norm x * (real CARD('n) * real CARD('m))", "apply (simp add: abs_vec_nth_blinfun_apply_lemma)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma matrix_has_derivative:\n  shows \"((\\<lambda>x::(real^'n)\\<Rightarrow>\\<^sub>L(real^'n). matrix (blinfun_apply x)) has_derivative (\\<lambda>h. matrix (blinfun_apply h))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. matrix (blinfun_apply x)) has_derivative\n     (\\<lambda>h. matrix (blinfun_apply h)))\n     (at x)", "apply (auto simp: has_derivative_at2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. bounded_linear (\\<lambda>h. matrix (blinfun_apply h))\n 2. (\\<lambda>y.\n        (1 / norm (y - x)) *\\<^sub>R\n        (matrix (blinfun_apply y) -\n         (matrix (blinfun_apply x) + matrix (blinfun_apply (y - x)))))\n    \\<midarrow>x\\<rightarrow> 0", "unfolding linear_linear"], ["proof (prove)\ngoal (2 subgoals):\n 1. bounded_linear (\\<lambda>h. matrix (blinfun_apply h))\n 2. (\\<lambda>y.\n        (1 / norm (y - x)) *\\<^sub>R\n        (matrix (blinfun_apply y) -\n         (matrix (blinfun_apply x) + matrix (blinfun_apply (y - x)))))\n    \\<midarrow>x\\<rightarrow> 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (\\<lambda>h. matrix (blinfun_apply h))", "by (rule bounded_linear_matrix_blinfun_apply)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        (1 / norm (y - x)) *\\<^sub>R\n        (matrix (blinfun_apply y) -\n         (matrix (blinfun_apply x) + matrix (blinfun_apply (y - x)))))\n    \\<midarrow>x\\<rightarrow> 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        (1 / norm (y - x)) *\\<^sub>R\n        (matrix (blinfun_apply y) -\n         (matrix (blinfun_apply x) + matrix (blinfun_apply (y - x)))))\n    \\<midarrow>x\\<rightarrow> 0", "by (auto simp: blinfun.bilinear_simps matrix_def) vector"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  matrix_comp_has_derivative[derivative_intros]:\n  fixes f::\"'a::real_normed_vector \\<Rightarrow> ((real^'n)\\<Rightarrow>\\<^sub>L(real^'n))\"\n  assumes \"(f has_derivative f') (at x within S)\"\n  shows \"((\\<lambda>x. matrix (blinfun_apply (f x))) has_derivative (\\<lambda>x. matrix (f' x))) (at x within S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. matrix (blinfun_apply (f x))) has_derivative\n     (\\<lambda>x. matrix (blinfun_apply (f' x))))\n     (at x within S)", "using has_derivative_compose[OF assms matrix_has_derivative]"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. matrix (blinfun_apply (f x))) has_derivative\n   (\\<lambda>x. matrix (blinfun_apply (f' x))))\n   (at x within S)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. matrix (blinfun_apply (f x))) has_derivative\n     (\\<lambda>x. matrix (blinfun_apply (f' x))))\n     (at x within S)", "by auto"], ["", "fun inner_floatariths where\n  \"inner_floatariths [] _ = Num 0\"\n| \"inner_floatariths _ [] = Num 0\"\n| \"inner_floatariths (x#xs) (y#ys) = Add (Mult x y) (inner_floatariths xs ys)\""], ["", "lemma interpret_floatarith_inner_eq:\n  assumes \"length xs = length ys\"\n  shows \"interpret_floatarith (inner_floatariths xs ys) vs =\n    (\\<Sum>i<length ys. (interpret_floatariths xs vs ! i) * (interpret_floatariths ys vs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths xs ys) vs =\n    (\\<Sum>i<length ys.\n        interpret_floatariths xs vs ! i * interpret_floatariths ys vs ! i)", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths xs ys) vs =\n    (\\<Sum>i<length ys.\n        interpret_floatariths xs vs ! i * interpret_floatariths ys vs ! i)", "proof (induction rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. interpret_floatarith (inner_floatariths [] []) vs =\n    (\\<Sum>i<length [].\n        interpret_floatariths [] vs ! i * interpret_floatariths [] vs ! i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        interpret_floatarith (inner_floatariths xs ys) vs =\n        (\\<Sum>i<length ys.\n            interpret_floatariths xs vs ! i *\n            interpret_floatariths ys vs ! i)\\<rbrakk>\n       \\<Longrightarrow> interpret_floatarith\n                          (inner_floatariths (x # xs) (y # ys)) vs =\n                         (\\<Sum>i<length (y # ys).\n                             interpret_floatariths (x # xs) vs ! i *\n                             interpret_floatariths (y # ys) vs ! i)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. interpret_floatarith (inner_floatariths [] []) vs =\n    (\\<Sum>i<length [].\n        interpret_floatariths [] vs ! i * interpret_floatariths [] vs ! i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        interpret_floatarith (inner_floatariths xs ys) vs =\n        (\\<Sum>i<length ys.\n            interpret_floatariths xs vs ! i *\n            interpret_floatariths ys vs ! i)\\<rbrakk>\n       \\<Longrightarrow> interpret_floatarith\n                          (inner_floatariths (x # xs) (y # ys)) vs =\n                         (\\<Sum>i<length (y # ys).\n                             interpret_floatariths (x # xs) vs ! i *\n                             interpret_floatariths (y # ys) vs ! i)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths [] []) vs =\n    (\\<Sum>i<length [].\n        interpret_floatariths [] vs ! i * interpret_floatariths [] vs ! i)", "by simp"], ["proof (state)\nthis:\n  interpret_floatarith (inner_floatariths [] []) vs =\n  (\\<Sum>i<length [].\n      interpret_floatariths [] vs ! i * interpret_floatariths [] vs ! i)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        interpret_floatarith (inner_floatariths xs ys) vs =\n        (\\<Sum>i<length ys.\n            interpret_floatariths xs vs ! i *\n            interpret_floatariths ys vs ! i)\\<rbrakk>\n       \\<Longrightarrow> interpret_floatarith\n                          (inner_floatariths (x # xs) (y # ys)) vs =\n                         (\\<Sum>i<length (y # ys).\n                             interpret_floatariths (x # xs) vs ! i *\n                             interpret_floatariths (y # ys) vs ! i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        interpret_floatarith (inner_floatariths xs ys) vs =\n        (\\<Sum>i<length ys.\n            interpret_floatariths xs vs ! i *\n            interpret_floatariths ys vs ! i)\\<rbrakk>\n       \\<Longrightarrow> interpret_floatarith\n                          (inner_floatariths (x # xs) (y # ys)) vs =\n                         (\\<Sum>i<length (y # ys).\n                             interpret_floatariths (x # xs) vs ! i *\n                             interpret_floatariths (y # ys) vs ! i)", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  interpret_floatarith (inner_floatariths xs ys) vs =\n  (\\<Sum>i<length ys.\n      interpret_floatariths xs vs ! i * interpret_floatariths ys vs ! i)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        interpret_floatarith (inner_floatariths xs ys) vs =\n        (\\<Sum>i<length ys.\n            interpret_floatariths xs vs ! i *\n            interpret_floatariths ys vs ! i)\\<rbrakk>\n       \\<Longrightarrow> interpret_floatarith\n                          (inner_floatariths (x # xs) (y # ys)) vs =\n                         (\\<Sum>i<length (y # ys).\n                             interpret_floatariths (x # xs) vs ! i *\n                             interpret_floatariths (y # ys) vs ! i)", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  interpret_floatarith (inner_floatariths xs ys) vs =\n  (\\<Sum>i<length ys.\n      interpret_floatariths xs vs ! i * interpret_floatariths ys vs ! i)", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  interpret_floatarith (inner_floatariths xs ys) vs =\n  (\\<Sum>i<length ys.\n      interpret_floatariths xs vs ! i * interpret_floatariths ys vs ! i)\n\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths (x # xs) (y # ys)) vs =\n    (\\<Sum>i<length (y # ys).\n        interpret_floatariths (x # xs) vs ! i *\n        interpret_floatariths (y # ys) vs ! i)", "unfolding length_Cons sum.lessThan_Suc_shift"], ["proof (prove)\nusing this:\n  length xs = length ys\n  interpret_floatarith (inner_floatariths xs ys) vs =\n  (\\<Sum>i<length ys.\n      interpret_floatariths xs vs ! i * interpret_floatariths ys vs ! i)\n\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths (x # xs) (y # ys)) vs =\n    interpret_floatariths (x # xs) vs ! 0 *\n    interpret_floatariths (y # ys) vs ! 0 +\n    (\\<Sum>i<length ys.\n        interpret_floatariths (x # xs) vs ! Suc i *\n        interpret_floatariths (y # ys) vs ! Suc i)", "by simp"], ["proof (state)\nthis:\n  interpret_floatarith (inner_floatariths (x # xs) (y # ys)) vs =\n  (\\<Sum>i<length (y # ys).\n      interpret_floatariths (x # xs) vs ! i *\n      interpret_floatariths (y # ys) vs ! i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  interpret_floatarith_inner_floatariths:\n  assumes \"length xs = DIM('a::executable_euclidean_space)\"\n  assumes \"length ys = DIM('a)\"\n  assumes \"eucl_of_list (interpret_floatariths xs vs) = (x::'a)\"\n  assumes \"eucl_of_list (interpret_floatariths ys vs) = y\"\n  shows \"interpret_floatarith (inner_floatariths xs ys) vs = x \\<bullet> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths xs ys) vs = x \\<bullet> y", "using assms"], ["proof (prove)\nusing this:\n  length xs = DIM('a)\n  length ys = DIM('a)\n  einterpret xs vs = x\n  einterpret ys vs = y\n\ngoal (1 subgoal):\n 1. interpret_floatarith (inner_floatariths xs ys) vs = x \\<bullet> y", "by (subst euclidean_inner)\n    (auto simp: interpret_floatarith_inner_eq sum_Basis_sum_nth_Basis_list eucl_of_list_inner\n      index_nth_id\n      intro!: euclidean_eqI[where 'a='a] sum.cong)"], ["", "lemma max_Var_floatarith_inner_floatariths[simp]:\n  assumes \"length f = length g\"\n  shows \"max_Var_floatarith (inner_floatariths f g) = max (max_Var_floatariths f) (max_Var_floatariths g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatarith (inner_floatariths f g) =\n    max (max_Var_floatariths f) (max_Var_floatariths g)", "using assms"], ["proof (prove)\nusing this:\n  length f = length g\n\ngoal (1 subgoal):\n 1. max_Var_floatarith (inner_floatariths f g) =\n    max (max_Var_floatariths f) (max_Var_floatariths g)", "by (induction f g rule: list_induct2) auto"], ["", "definition FDERIV_floatarith where\n  \"FDERIV_floatarith fa xs d = inner_floatariths (map (\\<lambda>x. fold_const_fa (DERIV_floatarith x fa)) xs) d\"\n\\<comment> \\<open>TODO: specialize to \\<open>FDERIV_floatarith fa [0..<n] [m..<m + n]\\<close> and do the rest with @{term subst_floatarith}?\n   TODO: introduce approximation on type @{typ \"real^'i^'j\"} and use @{term jacobian}?\\<close>"], ["", "lemma interpret_floatariths_map: \"interpret_floatariths (map f xs) vs = map (\\<lambda>x. interpret_floatarith (f x) vs) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths (map f xs) vs =\n    map (\\<lambda>x. interpret_floatarith (f x) vs) xs", "by (induct xs) (auto simp: )"], ["", "lemma max_Var_floatarith_DERIV_floatarith:\n  \"max_Var_floatarith (DERIV_floatarith x fa) \\<le> max_Var_floatarith fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatarith (DERIV_floatarith x fa) \\<le> max_Var_floatarith fa", "by (induction x fa rule: DERIV_floatarith.induct) (auto)"], ["", "lemma max_Var_floatarith_FDERIV_floatarith:\n  \"length xs = length d \\<Longrightarrow>\n    max_Var_floatarith (FDERIV_floatarith fa xs d) \\<le> max (max_Var_floatarith fa) (max_Var_floatariths d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length d \\<Longrightarrow>\n    max_Var_floatarith (FDERIV_floatarith fa xs d)\n    \\<le> max (max_Var_floatarith fa) (max_Var_floatariths d)", "unfolding FDERIV_floatarith_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length d \\<Longrightarrow>\n    max_Var_floatarith\n     (inner_floatariths\n       (map (\\<lambda>x. fold_const_fa (DERIV_floatarith x fa)) xs) d)\n    \\<le> max (max_Var_floatarith fa) (max_Var_floatariths d)", "by (auto simp: max_Var_floatariths_Max intro!: max_Var_floatarith_DERIV_floatarith[THEN order_trans]\n      max_Var_floatarith_fold_const_fa[THEN order_trans])"], ["", "definition FDERIV_floatariths where\n  \"FDERIV_floatariths fas xs d = map (\\<lambda>fa. FDERIV_floatarith fa xs d) fas\""], ["", "lemma max_Var_floatarith_FDERIV_floatariths:\n  \"length xs = length d \\<Longrightarrow> max_Var_floatariths (FDERIV_floatariths fa xs d) \\<le> max (max_Var_floatariths fa) (max_Var_floatariths d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length d \\<Longrightarrow>\n    max_Var_floatariths (FDERIV_floatariths fa xs d)\n    \\<le> max (max_Var_floatariths fa) (max_Var_floatariths d)", "by (auto simp: FDERIV_floatariths_def max_Var_floatariths_Max\n      intro!: max_Var_floatarith_FDERIV_floatarith[THEN order_trans])\n    (auto simp: max_def)"], ["", "lemma length_FDERIV_floatariths[simp]:\n  \"length (FDERIV_floatariths fas xs ds) = length fas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (FDERIV_floatariths fas xs ds) = length fas", "by (auto simp: FDERIV_floatariths_def)"], ["", "lemma FDERIV_floatariths_nth[simp]:\n  \"i < length fas \\<Longrightarrow> FDERIV_floatariths fas xs ds ! i  = FDERIV_floatarith (fas ! i) xs ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length fas \\<Longrightarrow>\n    FDERIV_floatariths fas xs ds ! i = FDERIV_floatarith (fas ! i) xs ds", "by (auto simp: FDERIV_floatariths_def)"], ["", "definition \"FDERIV_n_floatariths fas xs ds n = ((\\<lambda>x. FDERIV_floatariths x xs ds)^^n) fas\""], ["", "lemma FDERIV_n_floatariths_Suc[simp]:\n  \"FDERIV_n_floatariths fa xs ds 0 = fa\"\n  \"FDERIV_n_floatariths fa xs ds (Suc n) = FDERIV_floatariths (FDERIV_n_floatariths fa xs ds n) xs ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FDERIV_n_floatariths fa xs ds 0 = fa &&&\n    FDERIV_n_floatariths fa xs ds (Suc n) =\n    FDERIV_floatariths (FDERIV_n_floatariths fa xs ds n) xs ds", "by (auto simp: FDERIV_n_floatariths_def)"], ["", "lemma length_FDERIV_n_floatariths[simp]: \"length (FDERIV_n_floatariths fa xs ds n) = length fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (FDERIV_n_floatariths fa xs ds n) = length fa", "by (induction n) (auto simp: FDERIV_n_floatariths_def)"], ["", "lemma max_Var_floatarith_FDERIV_n_floatariths:\n  \"length xs = length d \\<Longrightarrow> max_Var_floatariths (FDERIV_n_floatariths fa xs d n) \\<le> max (max_Var_floatariths fa) (max_Var_floatariths d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length d \\<Longrightarrow>\n    max_Var_floatariths (FDERIV_n_floatariths fa xs d n)\n    \\<le> max (max_Var_floatariths fa) (max_Var_floatariths d)", "by (induction n)\n    (auto intro!: max_Var_floatarith_FDERIV_floatariths[THEN order_trans] simp: FDERIV_n_floatariths_def)"], ["", "lemma interpret_floatarith_FDERIV_floatarith_cong:\n  assumes rq: \"\\<And>i. i < max_Var_floatarith f \\<Longrightarrow> rs ! i = qs ! i\"\n  assumes [simp]: \"length ds = length xs\" \"length es = length xs\"\n  assumes \"interpret_floatariths ds qs = interpret_floatariths es rs\"\n  shows \"interpret_floatarith (FDERIV_floatarith f xs ds) qs =\n   interpret_floatarith (FDERIV_floatarith f xs es) rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (FDERIV_floatarith f xs ds) qs =\n    interpret_floatarith (FDERIV_floatarith f xs es) rs", "apply (auto simp: FDERIV_floatarith_def interpret_floatarith_inner_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<length xs.\n        interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n        interpret_floatarith (ds ! i) qs) =\n    (\\<Sum>i<length xs.\n        interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n        interpret_floatarith (es ! i) rs)", "apply (rule sum.cong[OF refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<length xs} \\<Longrightarrow>\n       interpret_floatarith (DERIV_floatarith (xs ! x) f) qs *\n       interpret_floatarith (ds ! x) qs =\n       interpret_floatarith (DERIV_floatarith (xs ! x) f) rs *\n       interpret_floatarith (es ! x) rs", "subgoal premises prems for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n    interpret_floatarith (ds ! i) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n    interpret_floatarith (es ! i) rs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n    interpret_floatarith (ds ! i) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n    interpret_floatarith (es ! i) rs", "have \"interpret_floatarith (DERIV_floatarith (xs ! i) f) qs = interpret_floatarith (DERIV_floatarith (xs ! i) f) rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs", "apply (rule interpret_floatarith_max_Var_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < max_Var_floatarith\n             (DERIV_floatarith (xs ! i) f) \\<Longrightarrow>\n       rs ! ia = qs ! ia", "apply (auto simp: intro!: rq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < max_Var_floatarith\n             (DERIV_floatarith (xs ! i) f) \\<Longrightarrow>\n       ia < max_Var_floatarith f", "by (metis leD le_trans max_Var_floatarith_DERIV_floatarith nat_less_le)"], ["proof (state)\nthis:\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) qs =\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) rs\n\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n    interpret_floatarith (ds ! i) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n    interpret_floatarith (es ! i) rs", "moreover"], ["proof (state)\nthis:\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) qs =\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) rs\n\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n    interpret_floatarith (ds ! i) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n    interpret_floatarith (es ! i) rs", "have \"interpret_floatarith (ds ! i) qs = interpret_floatarith (es ! i) rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (ds ! i) qs = interpret_floatarith (es ! i) rs", "using assms"], ["proof (prove)\nusing this:\n  ?i < max_Var_floatarith f \\<Longrightarrow> rs ! ?i = qs ! ?i\n  length ds = length xs\n  length es = length xs\n  interpret_floatariths ds qs = interpret_floatariths es rs\n\ngoal (1 subgoal):\n 1. interpret_floatarith (ds ! i) qs = interpret_floatarith (es ! i) rs", "by (metis \\<open>i \\<in> {..<length xs}\\<close> interpret_floatariths_nth lessThan_iff)"], ["proof (state)\nthis:\n  interpret_floatarith (ds ! i) qs = interpret_floatarith (es ! i) rs\n\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n    interpret_floatarith (ds ! i) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n    interpret_floatarith (es ! i) rs", "ultimately"], ["proof (chain)\npicking this:\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) qs =\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) rs\n  interpret_floatarith (ds ! i) qs = interpret_floatarith (es ! i) rs", "show ?thesis"], ["proof (prove)\nusing this:\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) qs =\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) rs\n  interpret_floatarith (ds ! i) qs = interpret_floatarith (es ! i) rs\n\ngoal (1 subgoal):\n 1. interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n    interpret_floatarith (ds ! i) qs =\n    interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n    interpret_floatarith (es ! i) rs", "by auto"], ["proof (state)\nthis:\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) qs *\n  interpret_floatarith (ds ! i) qs =\n  interpret_floatarith (DERIV_floatarith (xs ! i) f) rs *\n  interpret_floatarith (es ! i) rs\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem\n  matrix_vector_mult_eq_list_of_eucl_nth:\n  \"(M::real^'n::enum^'m::enum) *v v =\n    (\\<Sum>i<CARD('m).\n      (\\<Sum>j<CARD('n). list_of_eucl M ! (i * CARD('n) + j) * list_of_eucl v ! j) *\\<^sub>R Basis_list ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M *v v =\n    (\\<Sum>i<CARD('m).\n        (\\<Sum>j<CARD('n).\n            list_of_eucl M ! (i * CARD('n) + j) *\n            list_of_eucl v ! j) *\\<^sub>R\n        Basis_list ! i)", "using eucl_of_list_matrix_vector_mult_eq_sum_nth_Basis_list[of \"list_of_eucl M\" \"list_of_eucl v\",\n      where 'n='n and 'm = 'm]"], ["proof (prove)\nusing this:\n  \\<lbrakk>length (list_of_eucl M) = CARD('n) * CARD('m);\n   length (list_of_eucl v) = CARD('n)\\<rbrakk>\n  \\<Longrightarrow> eucl_of_list (list_of_eucl M) *v\n                    eucl_of_list (list_of_eucl v) =\n                    (\\<Sum>i<CARD('m).\n                        (\\<Sum>j<CARD('n).\n                            list_of_eucl M ! (i * CARD('n) + j) *\n                            list_of_eucl v ! j) *\\<^sub>R\n                        Basis_list ! i)\n\ngoal (1 subgoal):\n 1. M *v v =\n    (\\<Sum>i<CARD('m).\n        (\\<Sum>j<CARD('n).\n            list_of_eucl M ! (i * CARD('n) + j) *\n            list_of_eucl v ! j) *\\<^sub>R\n        Basis_list ! i)", "by auto"], ["", "definition \"mmult_fa l m n AS BS =\n  concat (map (\\<lambda>i. map (\\<lambda>k. inner_floatariths\n    (map (\\<lambda>j. AS ! (i * m + j)) [0..<m]) (map (\\<lambda>j. BS ! (j * n + k)) [0..<m])) [0..<n]) [0..<l])\""], ["", "lemma length_mmult_fa[simp]: \"length (mmult_fa l m n AS BS) = l * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (mmult_fa l m n AS BS) = l * n", "by (auto simp: mmult_fa_def length_concat o_def sum_list_distinct_conv_sum_set)"], ["", "lemma einterpret_mmult_fa:\n  assumes [simp]: \"Dn = CARD('n::enum)\" \"Dm = CARD('m::enum)\" \"Dl = CARD('l::enum)\"\n    \"length A = CARD('l)*CARD('m)\" \"length B = CARD('m)*CARD('n)\"\n  shows \"einterpret (mmult_fa Dl Dm Dn A B) vs = (einterpret A vs::((real, 'm::enum) vec, 'l) vec) ** (einterpret B vs::((real, 'n::enum) vec, 'm) vec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (mmult_fa Dl Dm Dn A B) vs =\n    einterpret A vs ** einterpret B vs", "apply (vector matrix_matrix_mult_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i ia.\n       einterpret (mmult_fa Dl Dm Dn A B) vs $ i $ ia =\n       (\\<Sum>k\\<in>UNIV.\n          einterpret A vs $ i $ k * einterpret B vs $ k $ ia)", "apply (auto simp: mmult_fa_def vec_nth_eucl_of_list_eq2 index_Basis_list_axis2\n      concat_map_map_index length_concat o_def sum_list_distinct_conv_sum_set\n      interpret_floatarith_inner_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       (\\<Sum>ib<CARD('m).\n           interpret_floatarith\n            (A ! (index enum_class.enum i * CARD('m) + ib)) vs *\n           interpret_floatarith\n            (B ! (ib * CARD('n) + index enum_class.enum ia)) vs) =\n       (\\<Sum>k\\<in>UNIV.\n          interpret_floatarith\n           (A !\n            (index enum_class.enum i * CARD('m) + index enum_class.enum k))\n           vs *\n          interpret_floatarith\n           (B !\n            (index enum_class.enum k * CARD('n) + index enum_class.enum ia))\n           vs)", "apply (subst sum_index_enum_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       (\\<Sum>ib<CARD('m).\n           interpret_floatarith\n            (A ! (index enum_class.enum i * CARD('m) + ib)) vs *\n           interpret_floatarith\n            (B ! (ib * CARD('n) + index enum_class.enum ia)) vs) =\n       (\\<Sum>ib<CARD('m).\n           interpret_floatarith\n            (A ! (index enum_class.enum i * CARD('m) + ib)) vs *\n           interpret_floatarith\n            (B ! (ib * CARD('n) + index enum_class.enum ia)) vs)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma max_Var_floatariths_mmult_fa:\n  assumes [simp]: \"length A = D * E\" \"length B = E * F\"\n  shows \"max_Var_floatariths (mmult_fa D E F A B) \\<le> max (max_Var_floatariths A) (max_Var_floatariths B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (mmult_fa D E F A B)\n    \\<le> max (max_Var_floatariths A) (max_Var_floatariths B)", "apply (auto simp: mmult_fa_def concat_map_map_index intro!: max_Var_floatariths_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (A ! (i div F * E + ia))\n                         \\<le> max (max_Var_floatariths A)\n                                (max_Var_floatariths B)\n 2. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith\n                          (B ! (ia * F + [0..<F] ! (i mod F)))\n                         \\<le> max (max_Var_floatariths A)\n                                (max_Var_floatariths B)", "apply (rule max.coboundedI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (A ! (i div F * E + ia))\n                         \\<le> max_Var_floatariths A\n 2. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith\n                          (B ! (ia * F + [0..<F] ! (i mod F)))\n                         \\<le> max (max_Var_floatariths A)\n                                (max_Var_floatariths B)", "apply (auto intro!: max_Var_floatarith_le_max_Var_floatariths_nth max.coboundedI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E\\<rbrakk>\n       \\<Longrightarrow> ia * F + [0..<F] ! (i mod F) < E * F", "apply (cases \"F = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E; F = 0\\<rbrakk>\n       \\<Longrightarrow> ia * F + [0..<F] ! (i mod F) < E * F\n 2. \\<And>i ia.\n       \\<lbrakk>i < F * D; ia < E; F \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> ia * F + [0..<F] ! (i mod F) < E * F", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma isDERIV_inner_iff:\n  assumes \"length xs = length ys\"\n  shows \"isDERIV i (inner_floatariths xs ys) vs \\<longleftrightarrow>\n    (\\<forall>k < length xs. isDERIV i (xs ! k) vs) \\<and> (\\<forall>k < length ys. isDERIV i (ys ! k) vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV i (inner_floatariths xs ys) vs =\n    ((\\<forall>k<length xs. isDERIV i (xs ! k) vs) \\<and>\n     (\\<forall>k<length ys. isDERIV i (ys ! k) vs))", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. isDERIV i (inner_floatariths xs ys) vs =\n    ((\\<forall>k<length xs. isDERIV i (xs ! k) vs) \\<and>\n     (\\<forall>k<length ys. isDERIV i (ys ! k) vs))", "by (induction xs ys rule: list_induct2) (auto simp: nth_Cons split: nat.splits)"], ["", "lemma isDERIV_Power: \"isDERIV x (fa) vs \\<Longrightarrow> isDERIV x (fa ^\\<^sub>e n) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x fa vs \\<Longrightarrow> isDERIV x (fa ^\\<^sub>e n) vs", "by (induction n) (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["", "lemma isDERIV_mmult_fa_nth:\n  assumes \"\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs\"\n  assumes \"\\<And>j. j < E * F \\<Longrightarrow> isDERIV i (B ! j) xs\"\n  assumes [simp]: \"length A = D * E\" \"length B = E * F\" \"j < D * F\"\n  shows \"isDERIV i (mmult_fa D E F A B ! j) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV i (mmult_fa D E F A B ! j) xs", "using assms"], ["proof (prove)\nusing this:\n  ?j < D * E \\<Longrightarrow> isDERIV i (A ! ?j) xs\n  ?j < E * F \\<Longrightarrow> isDERIV i (B ! ?j) xs\n  length A = D * E\n  length B = E * F\n  j < D * F\n\ngoal (1 subgoal):\n 1. isDERIV i (mmult_fa D E F A B ! j) xs", "apply (cases \"F = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs;\n     \\<And>j. j < E * F \\<Longrightarrow> isDERIV i (B ! j) xs;\n     length A = D * E; length B = E * F; j < D * F; F = 0\\<rbrakk>\n    \\<Longrightarrow> isDERIV i (mmult_fa D E F A B ! j) xs\n 2. \\<lbrakk>\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs;\n     \\<And>j. j < E * F \\<Longrightarrow> isDERIV i (B ! j) xs;\n     length A = D * E; length B = E * F; j < D * F; F \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> isDERIV i (mmult_fa D E F A B ! j) xs", "apply (auto simp: mmult_fa_def concat_map_map_index isDERIV_inner_iff ac_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs;\n        \\<And>j. j < E * F \\<Longrightarrow> isDERIV i (B ! j) xs; 0 < F;\n        k < E\\<rbrakk>\n       \\<Longrightarrow> isDERIV i (A ! (k + E * (j div F))) xs", "apply (metis add.commute assms(5) in_square_lemma less_square_imp_div_less mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"mvmult_fa n m AS B =\n  map (\\<lambda>i. inner_floatariths (map (\\<lambda>j. AS ! (i * m + j)) [0..<m]) (map (\\<lambda>j. B ! j) [0..<m])) [0..<n]\""], ["", "lemma einterpret_mvmult_fa:\n  assumes [simp]: \"Dn = CARD('n::enum)\" \"Dm = CARD('m::enum)\"\n    \"length A = CARD('n)*CARD('m)\" \"length B = CARD('m)\"\n  shows \"einterpret (mvmult_fa Dn Dm A B) vs = (einterpret A vs::((real, 'm::enum) vec, 'n) vec) *v (einterpret B vs::(real, 'm) vec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (mvmult_fa Dn Dm A B) vs = einterpret A vs *v einterpret B vs", "apply (vector matrix_vector_mult_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       einterpret (mvmult_fa Dn Dm A B) vs $ i =\n       (\\<Sum>j\\<in>UNIV. einterpret A vs $ i $ j * einterpret B vs $ j)", "apply (auto simp: mvmult_fa_def vec_nth_eucl_of_list_eq2 index_Basis_list_axis2 index_Basis_list_axis1 vec_nth_eucl_of_list_eq\n      concat_map_map_index length_concat o_def sum_list_distinct_conv_sum_set\n      interpret_floatarith_inner_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>ia<CARD('m).\n           interpret_floatarith\n            (A ! (index enum_class.enum i * CARD('m) + ia)) vs *\n           interpret_floatarith (B ! ia) vs) =\n       (\\<Sum>j\\<in>UNIV.\n          interpret_floatarith\n           (A !\n            (index enum_class.enum i * CARD('m) + index enum_class.enum j))\n           vs *\n          interpret_floatarith (B ! index enum_class.enum j) vs)", "apply (subst sum_index_enum_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>ia<CARD('m).\n           interpret_floatarith\n            (A ! (index enum_class.enum i * CARD('m) + ia)) vs *\n           interpret_floatarith (B ! ia) vs) =\n       (\\<Sum>ia<CARD('m).\n           interpret_floatarith\n            (A ! (index enum_class.enum i * CARD('m) + ia)) vs *\n           interpret_floatarith (B ! ia) vs)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma max_Var_floatariths_mvult_fa:\n  assumes [simp]: \"length A = D * E\" \"length B = E\"\n  shows \"max_Var_floatariths (mvmult_fa D E A B) \\<le> max (max_Var_floatariths A) (max_Var_floatariths B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (mvmult_fa D E A B)\n    \\<le> max (max_Var_floatariths A) (max_Var_floatariths B)", "apply (auto simp: mvmult_fa_def concat_map_map_index intro!: max_Var_floatariths_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < D; ia < E\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (A ! (i * E + ia))\n                         \\<le> max (max_Var_floatariths A)\n                                (max_Var_floatariths B)", "apply (rule max.coboundedI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < D; ia < E\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (A ! (i * E + ia))\n                         \\<le> max_Var_floatariths A", "by (auto intro!: max_Var_floatarith_le_max_Var_floatariths_nth max.coboundedI2)"], ["", "lemma isDERIV_mvmult_fa_nth:\n  assumes \"\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs\"\n  assumes \"\\<And>j. j < E \\<Longrightarrow> isDERIV i (B ! j) xs\"\n  assumes [simp]: \"length A = D * E\" \"length B = E\" \"j < D\"\n  shows \"isDERIV i (mvmult_fa D E A B ! j) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV i (mvmult_fa D E A B ! j) xs", "using assms"], ["proof (prove)\nusing this:\n  ?j < D * E \\<Longrightarrow> isDERIV i (A ! ?j) xs\n  ?j < E \\<Longrightarrow> isDERIV i (B ! ?j) xs\n  length A = D * E\n  length B = E\n  j < D\n\ngoal (1 subgoal):\n 1. isDERIV i (mvmult_fa D E A B ! j) xs", "apply (auto simp: mvmult_fa_def concat_map_map_index isDERIV_inner_iff ac_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<And>j. j < D * E \\<Longrightarrow> isDERIV i (A ! j) xs;\n        \\<And>j. j < E \\<Longrightarrow> isDERIV i (B ! j) xs;\n        k < E\\<rbrakk>\n       \\<Longrightarrow> isDERIV i (A ! (k + E * j)) xs", "by (metis assms(5) in_square_lemma semiring_normalization_rules(24) semiring_normalization_rules(7))"], ["", "lemma max_Var_floatariths_mapI:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> max_Var_floatarith (f x) \\<le> m\"\n  shows \"max_Var_floatariths (map f xs) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map f xs) \\<le> m", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> set xs \\<Longrightarrow> max_Var_floatarith (f ?x) \\<le> m\n\ngoal (1 subgoal):\n 1. max_Var_floatariths (map f xs) \\<le> m", "by (force intro!: max_Var_floatariths_leI simp: in_set_conv_nth)"], ["", "lemma\n  max_Var_floatariths_list_updateI:\n  assumes \"max_Var_floatariths xs \\<le> m\"\n  assumes \"max_Var_floatarith v \\<le> m\"\n  assumes \"i < length xs\"\n  shows \"max_Var_floatariths (xs[i := v]) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (xs[i := v]) \\<le> m", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatariths xs \\<le> m\n  max_Var_floatarith v \\<le> m\n  i < length xs\n\ngoal (1 subgoal):\n 1. max_Var_floatariths (xs[i := v]) \\<le> m", "apply (auto simp: nth_list_update intro!: max_Var_floatariths_leI )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>max_Var_floatariths xs \\<le> m;\n        max_Var_floatarith v \\<le> m; i < length xs; ia < length xs;\n        i \\<noteq> ia\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (xs ! ia) \\<le> m", "using max_Var_floatarith_le_max_Var_floatariths_nthI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n < length ?fas; max_Var_floatariths ?fas \\<le> ?z\\<rbrakk>\n  \\<Longrightarrow> max_Var_floatarith (?fas ! ?n) \\<le> ?z\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>max_Var_floatariths xs \\<le> m;\n        max_Var_floatarith v \\<le> m; i < length xs; ia < length xs;\n        i \\<noteq> ia\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (xs ! ia) \\<le> m", "by blast"], ["", "lemma\n  max_Var_floatariths_replicateI:\n  assumes \"max_Var_floatarith v \\<le> m\"\n  shows \"max_Var_floatariths (replicate n v) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (replicate n v) \\<le> m", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatarith v \\<le> m\n\ngoal (1 subgoal):\n 1. max_Var_floatariths (replicate n v) \\<le> m", "by (auto intro!: max_Var_floatariths_leI )"], ["", "definition \"FDERIV_n_floatarith fa xs ds n = ((\\<lambda>x. FDERIV_floatarith x xs ds)^^n) fa\""], ["", "lemma FDERIV_n_floatariths_nth: \"i < length fas \\<Longrightarrow> FDERIV_n_floatariths fas xs ds n ! i = FDERIV_n_floatarith (fas ! i) xs ds n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length fas \\<Longrightarrow>\n    FDERIV_n_floatariths fas xs ds n ! i =\n    FDERIV_n_floatarith (fas ! i) xs ds n", "by (induction n)\n    (auto simp: FDERIV_n_floatarith_def FDERIV_floatariths_nth)"], ["", "lemma einterpret_fold_const_fa[simp]:\n  \"(einterpret (map (\\<lambda>i. fold_const_fa (fa i)) xs) vs::'a::executable_euclidean_space) =\n    einterpret (map fa xs) vs\" if \"length xs = DIM('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map (\\<lambda>i. fold_const_fa (fa i)) xs) vs =\n    einterpret (map fa xs) vs", "using that"], ["proof (prove)\nusing this:\n  length xs = DIM('a)\n\ngoal (1 subgoal):\n 1. einterpret (map (\\<lambda>i. fold_const_fa (fa i)) xs) vs =\n    einterpret (map fa xs) vs", "by (auto intro!: euclidean_eqI[where 'a='a] simp: algebra_simps eucl_of_list_inner)"], ["", "lemma einterpret_plus[simp]:\n  shows \"(einterpret (map (\\<lambda>i. fa1 i + fa2 i) [0..<DIM('a)]) vs::'a) =\n    einterpret (map fa1 [0..<DIM('a::executable_euclidean_space)]) vs + einterpret (map fa2 [0..<DIM('a)]) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map (\\<lambda>i. fa1 i + fa2 i) [0..<DIM('a)]) vs =\n    einterpret (map fa1 [0..<DIM('a)]) vs +\n    einterpret (map fa2 [0..<DIM('a)]) vs", "by (auto intro!: euclidean_eqI[where 'a='a] simp: algebra_simps eucl_of_list_inner)"], ["", "lemma einterpret_uminus[simp]:\n  shows \"(einterpret (map (\\<lambda>i. - fa1 i) [0..<DIM('a)]) vs::'a::executable_euclidean_space) =\n    - einterpret (map fa1 [0..<DIM('a)]) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map (\\<lambda>i. - fa1 i) [0..<DIM('a)]) vs =\n    - einterpret (map fa1 [0..<DIM('a)]) vs", "by (auto intro!: euclidean_eqI[where 'a='a] simp: algebra_simps eucl_of_list_inner)"], ["", "lemma diff_floatarith_conv_add_uminus: \"a - b = a + - b\" for a b::floatarith"], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b = a + - b", "by (auto simp: minus_floatarith_def plus_floatarith_def uminus_floatarith_def)"], ["", "lemma einterpret_minus[simp]:\n  shows \"(einterpret (map (\\<lambda>i. fa1 i - fa2 i) [0..<DIM('a)]) vs::'a::executable_euclidean_space) =\n    einterpret (map fa1 [0..<DIM('a)]) vs - einterpret (map fa2 [0..<DIM('a)]) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map (\\<lambda>i. fa1 i - fa2 i) [0..<DIM('a)]) vs =\n    einterpret (map fa1 [0..<DIM('a)]) vs -\n    einterpret (map fa2 [0..<DIM('a)]) vs", "by (simp add: diff_floatarith_conv_add_uminus)"], ["", "lemma einterpret_scaleR[simp]:\n  shows \"(einterpret (map (\\<lambda>i. fa1 * fa2 i) [0..<DIM('a)]) vs::'a::executable_euclidean_space) =\n    interpret_floatarith (fa1) vs *\\<^sub>R einterpret (map fa2 [0..<DIM('a)]) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map (\\<lambda>i. fa1 * fa2 i) [0..<DIM('a)]) vs =\n    interpret_floatarith fa1 vs *\\<^sub>R\n    einterpret (map fa2 [0..<DIM('a)]) vs", "by (auto intro!: euclidean_eqI[where 'a='a] simp: algebra_simps eucl_of_list_inner)"], ["", "lemma einterpret_nth[simp]:\n  assumes [simp]: \"length xs = DIM('a)\"\n  shows \"(einterpret (map ((!) xs) [0..<DIM('a)]) vs::'a::executable_euclidean_space) = einterpret xs vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map ((!) xs) [0..<DIM('a)]) vs = einterpret xs vs", "by (auto intro!: euclidean_eqI[where 'a='a] simp: algebra_simps eucl_of_list_inner)"], ["", "type_synonym 'n rvec = \"(real, 'n) vec\""], ["", "lemma length_mvmult_fa[simp]: \"length (mvmult_fa D E xs ys) = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (mvmult_fa D E xs ys) = D", "by (auto simp: mvmult_fa_def)"], ["", "lemma interpret_mvmult_nth:\n  assumes \"D = CARD('n::enum)\"\n  assumes \"E = CARD('m::enum)\"\n  assumes \"length xs = D * E\"\n  assumes \"length ys = E\"\n  assumes \"n < CARD('n)\"\n  shows \"interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    ((einterpret xs vs::((real, 'm) vec, 'n) vec) *v einterpret ys vs) \\<bullet> (Basis_list ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "have \"interpret_floatarith (mvmult_fa D E xs ys ! n) vs = einterpret (mvmult_fa D E xs ys) vs \\<bullet> (Basis_list ! n::'n rvec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    einterpret (mvmult_fa D E xs ys) vs \\<bullet> Basis_list ! n", "using assms"], ["proof (prove)\nusing this:\n  D = CARD('n)\n  E = CARD('m)\n  length xs = D * E\n  length ys = E\n  n < CARD('n)\n\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    einterpret (mvmult_fa D E xs ys) vs \\<bullet> Basis_list ! n", "by (auto simp: eucl_of_list_inner)"], ["proof (state)\nthis:\n  interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n  einterpret (mvmult_fa D E xs ys) vs \\<bullet> Basis_list ! n\n\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "also"], ["proof (state)\nthis:\n  interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n  einterpret (mvmult_fa D E xs ys) vs \\<bullet> Basis_list ! n\n\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "from einterpret_mvmult_fa[OF assms(1,2), of xs ys vs]"], ["proof (chain)\npicking this:\n  \\<lbrakk>length xs = CARD('n) * CARD('m); length ys = CARD('m)\\<rbrakk>\n  \\<Longrightarrow> einterpret (mvmult_fa D E xs ys) vs =\n                    einterpret xs vs *v einterpret ys vs", "have \"einterpret (mvmult_fa D E xs ys) vs = (einterpret xs vs::((real, 'm) vec, 'n) vec) *v einterpret ys vs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs = CARD('n) * CARD('m); length ys = CARD('m)\\<rbrakk>\n  \\<Longrightarrow> einterpret (mvmult_fa D E xs ys) vs =\n                    einterpret xs vs *v einterpret ys vs\n\ngoal (1 subgoal):\n 1. einterpret (mvmult_fa D E xs ys) vs =\n    einterpret xs vs *v einterpret ys vs", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs = CARD('n) * CARD('m); length ys = CARD('m)\\<rbrakk>\n  \\<Longrightarrow> einterpret (mvmult_fa D E xs ys) vs =\n                    einterpret xs vs *v einterpret ys vs\n  D = CARD('n)\n  E = CARD('m)\n  length xs = D * E\n  length ys = E\n  n < CARD('n)\n\ngoal (1 subgoal):\n 1. einterpret (mvmult_fa D E xs ys) vs =\n    einterpret xs vs *v einterpret ys vs", "by simp"], ["proof (state)\nthis:\n  einterpret (mvmult_fa D E xs ys) vs = einterpret xs vs *v einterpret ys vs\n\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "finally"], ["proof (chain)\npicking this:\n  interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n  (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "show ?thesis"], ["proof (prove)\nusing this:\n  interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n  (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n\n\ngoal (1 subgoal):\n 1. interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n    (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n", "by simp"], ["proof (state)\nthis:\n  interpret_floatarith (mvmult_fa D E xs ys ! n) vs =\n  (einterpret xs vs *v einterpret ys vs) \\<bullet> Basis_list ! n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [simp del] = fold_const_fa.simps"], ["", "lemma take_eq_map_nth: \"n < length xs \\<Longrightarrow> take n xs = map ((!) xs) [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> take n xs = map ((!) xs) [0..<n]", "by (induction xs) (auto intro!: nth_equalityI)"], ["", "lemmas [simp del] = upt_rec_numeral"], ["", "lemmas map_nth_eq_take = take_eq_map_nth[symmetric]"], ["", "subsection \\<open>Definition of Approximating Function using Affine Arithmetic\\<close>"], ["", "lemma interpret_Floatreal: \"interpret_floatarith (floatarith.Num f) vs = (real_of_float f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Num f) vs = real_of_float f", "by simp"], ["", "ML \\<open>\n(* Make a congruence rule out of a defining equation for the interpretation\n\n   th is one defining equation of f,\n     i.e. th is \"f (Cp ?t1 ... ?tn) = P(f ?t1, .., f ?tn)\" \n   Cp is a constructor pattern and P is a pattern \n\n   The result is:\n     [|?A1 = f ?t1 ; .. ; ?An= f ?tn |] ==> P (?A1, .., ?An) = f (Cp ?t1 .. ?tn)\n       + the a list of names of the A1 .. An, Those are fresh in the ctxt *)\n\nfun mk_congeq ctxt fs th =\n  let\n    val Const (fN, _) = th |> Thm.prop_of |> HOLogic.dest_Trueprop |> HOLogic.dest_eq\n      |> fst |> strip_comb |> fst;\n    val ((_, [th']), ctxt') = Variable.import true [th] ctxt;\n    val (lhs, rhs) = HOLogic.dest_eq (HOLogic.dest_Trueprop (Thm.prop_of th'));\n    fun add_fterms (t as t1 $ t2) =\n          if exists (fn f => Term.could_unify (t |> strip_comb |> fst, f)) fs\n          then insert (op aconv) t\n          else add_fterms t1 #> add_fterms t2\n      | add_fterms (t as Abs _) =\n          if exists_Const (fn (c, _) => c = fN) t\n          then K [t]\n          else K []\n      | add_fterms _ = I;\n    val fterms = add_fterms rhs [];\n    val (xs, ctxt'') = Variable.variant_fixes (replicate (length fterms) \"x\") ctxt';\n    val tys = map fastype_of fterms;\n    val vs = map Free (xs ~~ tys);\n    val env = fterms ~~ vs; (*FIXME*)\n    fun replace_fterms (t as t1 $ t2) =\n        (case AList.lookup (op aconv) env t of\n            SOME v => v\n          | NONE => replace_fterms t1 $ replace_fterms t2)\n      | replace_fterms t =\n        (case AList.lookup (op aconv) env t of\n            SOME v => v\n          | NONE => t);\n    fun mk_def (Abs (x, xT, t), v) =\n          HOLogic.mk_Trueprop (HOLogic.all_const xT $ Abs (x, xT, HOLogic.mk_eq (v $ Bound 0, t)))\n      | mk_def (t, v) = HOLogic.mk_Trueprop (HOLogic.mk_eq (v, t));\n    fun tryext x =\n      (x RS @{lemma \"(\\<forall>x. f x = g x) \\<Longrightarrow> f = g\" by blast} handle THM _ => x);\n    val cong =\n      (Goal.prove ctxt'' [] (map mk_def env)\n        (HOLogic.mk_Trueprop (HOLogic.mk_eq (lhs, replace_fterms rhs)))\n        (fn {context, prems, ...} =>\n          Local_Defs.unfold0_tac context (map tryext prems) THEN resolve_tac ctxt'' [th'] 1)) RS sym;\n    val (cong' :: vars') =\n      Variable.export ctxt'' ctxt (cong :: map (Drule.mk_term o Thm.cterm_of ctxt'') vs);\n    val vs' = map (fst o fst o Term.dest_Var o Thm.term_of o Drule.dest_term) vars';\n\n  in (vs', cong') end;\n\nfun mk_congs ctxt eqs =\n  let\n    val fs = fold_rev (fn eq => insert (op =) (eq |> Thm.prop_of |> HOLogic.dest_Trueprop\n      |> HOLogic.dest_eq |> fst |> strip_comb\n      |> fst)) eqs [];\n    val tys = fold_rev (fn f => fold (insert (op =)) (f |> fastype_of |> binder_types |> tl)) fs [];\n    val (vs, ctxt') = Variable.variant_fixes (replicate (length tys) \"vs\") ctxt;\n    val subst =\n      the o AList.lookup (op =)\n        (map2 (fn T => fn v => (T, Thm.cterm_of ctxt' (Free (v, T)))) tys vs);\n    fun prep_eq eq =\n      let\n        val (_, _ :: vs) = eq |> Thm.prop_of |> HOLogic.dest_Trueprop\n          |> HOLogic.dest_eq |> fst |> strip_comb;\n        val subst = map_filter (fn Var v => SOME (v, subst (#2 v)) | _ => NONE) vs;\n      in Thm.instantiate ([], subst) eq end;\n    val (ps, congs) = map_split (mk_congeq ctxt' fs o prep_eq) eqs;\n    val bds = AList.make (K ([], [])) tys;\n  in (ps ~~ Variable.export ctxt' ctxt congs, bds) end\n\\<close>"], ["", "ML \\<open>\nfun interpret_floatariths_congs ctxt =\n  mk_congs ctxt @{thms interpret_floatarith.simps interpret_floatariths.simps}\n  |> fst\n  |> map snd\n\\<close>"], ["", "ML \\<open>\nfun preproc_form_conv ctxt =\n  Simplifier.rewrite\n   (put_simpset HOL_basic_ss ctxt addsimps\n     (Named_Theorems.get ctxt @{named_theorems approximation_preproc}))\\<close>"], ["", "ML \\<open>fun reify_floatariths_tac ctxt i =\n  CONVERSION (preproc_form_conv ctxt) i\n  THEN REPEAT_ALL_NEW (fn i => resolve_tac ctxt (interpret_floatariths_congs ctxt) i) i\\<close>"], ["", "method_setup reify_floatariths = \\<open>\n  Scan.succeed (fn ctxt => SIMPLE_METHOD' (reify_floatariths_tac ctxt))\n\\<close> \"reification of floatariths expression\""], ["", "schematic_goal reify_example:\n  \"[xs!i * xs!j, xs!i + xs!j powr (sin (xs!0)), xs!k + (2 / 3 * xs!i * xs!j)] = interpret_floatariths ?fas xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [xs ! i * xs ! j, xs ! i + xs ! j powr sin (xs ! 0),\n     xs ! k + 2 / 3 * xs ! i * xs ! j] =\n    interpret_floatariths ?fas xs", "by (reify_floatariths)"], ["", "ML \\<open>fun interpret_floatariths_step_tac ctxt i = resolve_tac ctxt (interpret_floatariths_congs ctxt) i\\<close>"], ["", "method_setup reify_floatariths_step = \\<open>\n  Scan.succeed (fn ctxt => SIMPLE_METHOD' (interpret_floatariths_step_tac ctxt))\n\\<close> \"reification of floatariths expression (step)\""], ["", "lemma eucl_of_list_interpret_floatariths_cong:\n  fixes y::\"'a::executable_euclidean_space\"\n  assumes \"\\<And>b. b \\<in> Basis \\<Longrightarrow> interpret_floatarith (fa (index Basis_list b)) vs = y \\<bullet> b\"\n  assumes \"length xs = DIM('a)\"\n  shows \"eucl_of_list (interpret_floatariths (map fa [0..<DIM('a)]) vs) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. einterpret (map fa [0..<DIM('a)]) vs = y", "apply (rule euclidean_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> Basis \\<Longrightarrow>\n       einterpret (map fa [0..<DIM('a)]) vs \\<bullet> b = y \\<bullet> b", "apply (subst eucl_of_list_inner)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b. b \\<in> Basis \\<Longrightarrow> b \\<in> Basis\n 2. \\<And>b.\n       b \\<in> Basis \\<Longrightarrow>\n       length (interpret_floatariths (map fa [0..<DIM('a)]) vs) = DIM('a)\n 3. \\<And>b.\n       b \\<in> Basis \\<Longrightarrow>\n       interpret_floatariths (map fa [0..<DIM('a)]) vs !\n       index Basis_list b =\n       y \\<bullet> b", "by (auto simp: assms)"], ["", "lemma interpret_floatariths_fold_const_fa[simp]:\n  \"interpret_floatariths (map fold_const_fa ds) = interpret_floatariths ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths (map fold_const_fa ds) = interpret_floatariths ds", "by (auto intro!: nth_equalityI)"], ["", "fun subst_floatarith where\n\"subst_floatarith s (Add a b)         = Add (subst_floatarith s a) (subst_floatarith s b)\" |\n\"subst_floatarith s (Mult a b)        = Mult (subst_floatarith s a) (subst_floatarith s b)\" |\n\"subst_floatarith s (Minus a)         = Minus (subst_floatarith s a)\" |\n\"subst_floatarith s (Inverse a)       = Inverse (subst_floatarith s a)\" |\n\"subst_floatarith s (Cos a)           = Cos (subst_floatarith s a)\" |\n\"subst_floatarith s (Arctan a)        = Arctan (subst_floatarith s a)\" |\n\"subst_floatarith s (Min a b)         = Min (subst_floatarith s a) (subst_floatarith s b)\" |\n\"subst_floatarith s (Max a b)         = Max (subst_floatarith s a) (subst_floatarith s b)\" |\n\"subst_floatarith s (Abs a)           = Abs (subst_floatarith s a)\" |\n\"subst_floatarith s Pi                = Pi\" |\n\"subst_floatarith s (Sqrt a)          = Sqrt (subst_floatarith s a)\" |\n\"subst_floatarith s (Exp a)           = Exp (subst_floatarith s a)\" |\n\"subst_floatarith s (Powr a b)        = Powr (subst_floatarith s a) (subst_floatarith s b)\" |\n\"subst_floatarith s (Ln a)            = Ln (subst_floatarith s a)\" |\n\"subst_floatarith s (Power a i)       = Power (subst_floatarith s a) i\" |\n\"subst_floatarith s (Floor a)         = Floor (subst_floatarith s a)\" |\n\"subst_floatarith s (Num f)           = Num f\" |\n\"subst_floatarith s (Var n)           = s n\""], ["", "lemma interpret_floatarith_subst_floatarith:\n  assumes \"max_Var_floatarith fa \\<le> D\"\n  shows \"interpret_floatarith (subst_floatarith s fa) vs =\n    interpret_floatarith fa (map (\\<lambda>i. interpret_floatarith (s i) vs) [0..<D])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (subst_floatarith s fa) vs =\n    interpret_floatarith fa\n     (map (\\<lambda>i. interpret_floatarith (s i) vs) [0..<D])", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatarith fa \\<le> D\n\ngoal (1 subgoal):\n 1. interpret_floatarith (subst_floatarith s fa) vs =\n    interpret_floatarith fa\n     (map (\\<lambda>i. interpret_floatarith (s i) vs) [0..<D])", "by (induction fa) auto"], ["", "lemma max_Var_floatarith_subst_floatarith_le[THEN order_trans]:\n  assumes \"length xs \\<ge> max_Var_floatarith fa\"\n  shows \"max_Var_floatarith (subst_floatarith ((!) xs) fa) \\<le> max_Var_floatariths xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatarith (subst_floatarith ((!) xs) fa)\n    \\<le> max_Var_floatariths xs", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatarith fa \\<le> length xs\n\ngoal (1 subgoal):\n 1. max_Var_floatarith (subst_floatarith ((!) xs) fa)\n    \\<le> max_Var_floatariths xs", "by (induction fa) (auto intro!: max_Var_floatarith_le_max_Var_floatariths_nth)"], ["", "lemma max_Var_floatariths_subst_floatarith_le[THEN order_trans]:\n  assumes \"length xs \\<ge> max_Var_floatariths fas\"\n  shows \"max_Var_floatariths (map (subst_floatarith ((!) xs)) fas) \\<le> max_Var_floatariths xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (subst_floatarith ((!) xs)) fas)\n    \\<le> max_Var_floatariths xs", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatariths fas \\<le> length xs\n\ngoal (1 subgoal):\n 1. max_Var_floatariths (map (subst_floatarith ((!) xs)) fas)\n    \\<le> max_Var_floatariths xs", "by (induction fas) (auto simp: max_Var_floatarith_subst_floatarith_le)"], ["", "fun continuous_on_floatarith :: \"floatarith \\<Rightarrow> bool\" where\n  \"continuous_on_floatarith (Add a b)         = (continuous_on_floatarith a \\<and> continuous_on_floatarith b)\" |\n\"continuous_on_floatarith (Mult a b)        = (continuous_on_floatarith a \\<and> continuous_on_floatarith b)\" |\n\"continuous_on_floatarith (Minus a)         = continuous_on_floatarith a\" |\n\"continuous_on_floatarith (Inverse a)       = False\" |\n\"continuous_on_floatarith (Cos a)           = continuous_on_floatarith a\" |\n\"continuous_on_floatarith (Arctan a)        = continuous_on_floatarith a\" |\n\"continuous_on_floatarith (Min a b)         = (continuous_on_floatarith a \\<and> continuous_on_floatarith b)\" |\n\"continuous_on_floatarith (Max a b) = (continuous_on_floatarith a \\<and> continuous_on_floatarith b)\" |\n\"continuous_on_floatarith (Abs a)           = continuous_on_floatarith a\" |\n\"continuous_on_floatarith Pi                = True\" |\n\"continuous_on_floatarith (Sqrt a)          = False\" |\n\"continuous_on_floatarith (Exp a)           = continuous_on_floatarith a\" |\n\"continuous_on_floatarith (Powr a b)        = False\" |\n\"continuous_on_floatarith (Ln a)            = False\" |\n\"continuous_on_floatarith (Floor a)         = False\" |\n\"continuous_on_floatarith (Power a n)       = (if n = 0 then True else continuous_on_floatarith a)\" |\n\"continuous_on_floatarith (Num f)           = True\" |\n\"continuous_on_floatarith (Var n)           = True\""], ["", "definition \"Maxs\\<^sub>e xs = fold (\\<lambda>a b. floatarith.Max a b) xs\""], ["", "definition \"norm2\\<^sub>e n = Maxs\\<^sub>e (map (\\<lambda>j. Norm (map (\\<lambda>i. Var (Suc j * n + i)) [0..<n])) [0..<n]) (Num 0)\""], ["", "definition \"N\\<^sub>r l = Num (float_of l)\""], ["", "lemma interpret_floatarith_Norm:\n  \"interpret_floatarith (Norm xs) vs = L2_set (\\<lambda>i. interpret_floatarith (xs ! i) vs) {0..<length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Norm xs) vs =\n    L2_set (\\<lambda>i. interpret_floatarith (xs ! i) vs) {0..<length xs}", "by (auto simp: Norm_def L2_set_def sum_list_sum_nth power2_eq_square)"], ["", "lemma interpret_floatarith_Nr[simp]: \"interpret_floatarith (N\\<^sub>r U) vs = real_of_float (float_of U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (N\\<^sub>r U) vs = real_of_float (float_of U)", "by (auto simp: N\\<^sub>r_def)"], ["", "fun list_updates where\n  \"list_updates [] _ xs = xs\"\n| \"list_updates _ [] xs = xs\"\n| \"list_updates (i#is) (u#us) xs = list_updates is us (xs[i:=u])\""], ["", "lemma list_updates_nth_notmem:\n  assumes \"length xs = length ys\"\n  assumes \"i \\<notin> set xs\"\n  shows \"list_updates xs ys vs ! i = vs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates xs ys vs ! i = vs ! i", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  i \\<notin> set xs\n\ngoal (1 subgoal):\n 1. list_updates xs ys vs ! i = vs ! i", "by (induction xs ys arbitrary: i vs rule: list_induct2) auto"], ["", "lemma list_updates_nth_less:\n  assumes \"length xs = length ys\" \"distinct xs\"\n  assumes \"i < length vs\"\n  shows \"list_updates xs ys vs ! i = (if i \\<in> set xs then ys ! (index xs i) else vs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates xs ys vs ! i =\n    (if i \\<in> set xs then ys ! index xs i else vs ! i)", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  distinct xs\n  i < length vs\n\ngoal (1 subgoal):\n 1. list_updates xs ys vs ! i =\n    (if i \\<in> set xs then ys ! index xs i else vs ! i)", "by (induction xs ys arbitrary: i vs rule: list_induct2) (auto simp: list_updates_nth_notmem)"], ["", "lemma length_list_updates[simp]: \"length (list_updates xs ys vs) = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_updates xs ys vs) = length vs", "by (induction xs ys vs rule: list_updates.induct) simp_all"], ["", "lemma list_updates_nth_ge[simp]:\n  \"x \\<ge> length vs \\<Longrightarrow> length xs = length ys \\<Longrightarrow> list_updates xs ys vs ! x = vs ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length vs \\<le> x; length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> list_updates xs ys vs ! x = vs ! x", "apply (induction xs ys vs rule: list_updates.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uu_ xs.\n       \\<lbrakk>length xs \\<le> x; length [] = length uu_\\<rbrakk>\n       \\<Longrightarrow> list_updates [] uu_ xs ! x = xs ! x\n 2. \\<And>v va xs.\n       \\<lbrakk>length xs \\<le> x; length (v # va) = length []\\<rbrakk>\n       \\<Longrightarrow> list_updates (v # va) [] xs ! x = xs ! x\n 3. \\<And>i is u us xs.\n       \\<lbrakk>\\<lbrakk>length (xs[i := u]) \\<le> x;\n                 length is = length us\\<rbrakk>\n                \\<Longrightarrow> list_updates is us (xs[i := u]) ! x =\n                                  xs[i := u] ! x;\n        length xs \\<le> x; length (i # is) = length (u # us)\\<rbrakk>\n       \\<Longrightarrow> list_updates (i # is) (u # us) xs ! x = xs ! x", "apply (auto simp: nth_list_update)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i is u us xs.\n       \\<lbrakk>list_updates is us (xs[i := u]) ! x = xs[i := u] ! x;\n        length xs \\<le> x; length is = length us\\<rbrakk>\n       \\<Longrightarrow> xs[i := u] ! x = xs ! x", "by (metis list_update_beyond nth_list_update_neq)"], ["", "lemma\n  list_updates_nth:\n  assumes [simp]: \"length xs = length ys\" \"distinct xs\"\n  shows \"list_updates xs ys vs ! i = (if i < length vs \\<and> i \\<in> set xs then ys ! index xs i else vs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates xs ys vs ! i =\n    (if i < length vs \\<and> i \\<in> set xs then ys ! index xs i\n     else vs ! i)", "by (auto simp: list_updates_nth_less list_updates_nth_notmem)"], ["", "lemma list_of_eucl_coord_update:\n  assumes [simp]: \"length xs = DIM('a::executable_euclidean_space)\"\n  assumes [simp]: \"distinct xs\"\n  assumes [simp]: \"i \\<in> Basis\"\n  assumes [simp]: \"\\<And>n. n \\<in> set xs \\<Longrightarrow> n < length vs\"\n  shows \"list_updates xs (list_of_eucl (x + (p - x \\<bullet> i) *\\<^sub>R i::'a)) vs =\n   (list_updates xs (list_of_eucl x) vs)[xs ! index Basis_list i := p]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates xs (list_of_eucl (x + (p - x \\<bullet> i) *\\<^sub>R i))\n     vs =\n    (list_updates xs (list_of_eucl x) vs)[xs ! index Basis_list i := p]", "apply (auto intro!: nth_equalityI simp: list_updates_nth nth_list_update)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (x + (p - x \\<bullet> i) *\\<^sub>R i) \\<bullet>\n    Basis_list ! index xs (xs ! index Basis_list i) =\n    p\n 2. \\<And>ia.\n       \\<lbrakk>ia \\<in> set xs;\n        xs ! index Basis_list i \\<noteq> ia\\<rbrakk>\n       \\<Longrightarrow> (x + (p - x \\<bullet> i) *\\<^sub>R i) \\<bullet>\n                         Basis_list ! index xs ia =\n                         x \\<bullet> Basis_list ! index xs ia", "apply (simp add: algebra_simps inner_Basis index_nth_id)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>ia \\<in> set xs;\n        xs ! index Basis_list i \\<noteq> ia\\<rbrakk>\n       \\<Longrightarrow> (x + (p - x \\<bullet> i) *\\<^sub>R i) \\<bullet>\n                         Basis_list ! index xs ia =\n                         x \\<bullet> Basis_list ! index xs ia", "apply (auto simp add: algebra_simps inner_Basis index_nth_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"eucl_of_env is vs = eucl_of_list (map (nth vs) is)\""], ["", "lemma list_updates_list_of_eucl_of_env[simp]:\n  assumes [simp]: \"length xs = DIM('a::executable_euclidean_space)\" \"distinct xs\"\n  shows \"list_updates xs (list_of_eucl (eucl_of_env xs vs::'a)) vs = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates xs (list_of_eucl (eucl_of_env xs vs)) vs = vs", "by (auto intro!: nth_equalityI simp: list_updates_nth nth_list_update eucl_of_env_def)"], ["", "lemma nth_nth_eucl_of_env_inner:\n  \"b \\<in> Basis \\<Longrightarrow> length is = DIM('a) \\<Longrightarrow> vs ! (is ! index Basis_list b) = eucl_of_env is vs \\<bullet> b\"\n  for b::\"'a::executable_euclidean_space\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> Basis; length is = DIM('a)\\<rbrakk>\n    \\<Longrightarrow> vs ! (is ! index Basis_list b) =\n                      eucl_of_env is vs \\<bullet> b", "by (auto simp: eucl_of_env_def eucl_of_list_inner)"], ["", "lemma list_updates_idem[simp]:\n  assumes \"(\\<And>i. i \\<in> set X0 \\<Longrightarrow> i < length vs)\"\n  shows \"(list_updates X0 (map ((!) vs) X0) vs) = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates X0 (map ((!) vs) X0) vs = vs", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> set X0 \\<Longrightarrow> ?i < length vs\n\ngoal (1 subgoal):\n 1. list_updates X0 (map ((!) vs) X0) vs = vs", "by (induction X0) auto"], ["", "lemma pairwise_orthogonal_Basis[intro, simp]: \"pairwise orthogonal Basis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise orthogonal Basis", "by (auto simp: pairwise_alt orthogonal_def inner_Basis)"], ["", "primrec freshs_floatarith where\n  \"freshs_floatarith (Var y) x \\<longleftrightarrow> (y \\<notin> set x)\"\n| \"freshs_floatarith (Num a) x \\<longleftrightarrow> True\"\n| \"freshs_floatarith Pi x \\<longleftrightarrow> True\"\n| \"freshs_floatarith (Cos a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Abs a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Arctan a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Sqrt a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Exp a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Floor a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Power a n) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Minus a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Ln a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Inverse a) x \\<longleftrightarrow> freshs_floatarith a x\"\n| \"freshs_floatarith (Add a b) x \\<longleftrightarrow> freshs_floatarith a x \\<and> freshs_floatarith b x\"\n| \"freshs_floatarith (Mult a b) x \\<longleftrightarrow> freshs_floatarith a x \\<and> freshs_floatarith b x\"\n| \"freshs_floatarith (floatarith.Max a b) x \\<longleftrightarrow> freshs_floatarith a x \\<and> freshs_floatarith b x\"\n| \"freshs_floatarith (floatarith.Min a b) x \\<longleftrightarrow> freshs_floatarith a x \\<and> freshs_floatarith b x\"\n| \"freshs_floatarith (Powr a b) x \\<longleftrightarrow> freshs_floatarith a x \\<and> freshs_floatarith b x\""], ["", "lemma freshs_floatarith[simp]:\n  assumes \"freshs_floatarith fa ds\" \"length ds = length xs\"\n  shows \"interpret_floatarith fa (list_updates ds xs vs) = interpret_floatarith fa vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith fa (list_updates ds xs vs) =\n    interpret_floatarith fa vs", "using assms"], ["proof (prove)\nusing this:\n  freshs_floatarith fa ds\n  length ds = length xs\n\ngoal (1 subgoal):\n 1. interpret_floatarith fa (list_updates ds xs vs) =\n    interpret_floatarith fa vs", "by (induction fa) (auto simp: list_updates_nth_notmem)"], ["", "lemma freshs_floatarith_max_Var_floatarithI:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> max_Var_floatarith f \\<le> x\"\n  shows \"freshs_floatarith f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshs_floatarith f xs", "using assms Suc_n_not_le_n"], ["proof (prove)\nusing this:\n  ?x \\<in> set xs \\<Longrightarrow> max_Var_floatarith f \\<le> ?x\n  \\<not> Suc ?n \\<le> ?n\n\ngoal (1 subgoal):\n 1. freshs_floatarith f xs", "by (induction f; force)"], ["", "definition \"freshs_floatariths fas xs = (\\<forall>fa\\<in>set fas. freshs_floatarith fa xs)\""], ["", "lemma freshs_floatariths_max_Var_floatarithsI:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> max_Var_floatariths f \\<le> x\"\n  shows \"freshs_floatariths f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshs_floatariths f xs", "using assms le_trans max_Var_floatarith_le_max_Var_floatariths"], ["proof (prove)\nusing this:\n  ?x \\<in> set xs \\<Longrightarrow> max_Var_floatariths f \\<le> ?x\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n  ?fa \\<in> set ?fas \\<Longrightarrow>\n  max_Var_floatarith ?fa \\<le> max_Var_floatariths ?fas\n\ngoal (1 subgoal):\n 1. freshs_floatariths f xs", "by (force simp: freshs_floatariths_def intro!: freshs_floatarith_max_Var_floatarithI)"], ["", "lemma freshs_floatariths_freshs_floatarithI:\n  assumes \"\\<And>fa. fa \\<in> set fas \\<Longrightarrow> freshs_floatarith fa xs\"\n  shows \"freshs_floatariths fas xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshs_floatariths fas xs", "by (auto simp: freshs_floatariths_def assms)"], ["", "lemma fresh_floatariths_fresh_floatarithI:\n  assumes \"freshs_floatariths fas xs\"\n  assumes \"fa \\<in> set fas\"\n  shows \"freshs_floatarith fa xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshs_floatarith fa xs", "using assms"], ["proof (prove)\nusing this:\n  freshs_floatariths fas xs\n  fa \\<in> set fas\n\ngoal (1 subgoal):\n 1. freshs_floatarith fa xs", "by (auto simp: freshs_floatariths_def)"], ["", "lemma fresh_floatariths_fresh_floatarith[simp]:\n  \"fresh_floatariths (fas) i \\<Longrightarrow> fa \\<in> set fas \\<Longrightarrow> fresh_floatarith fa i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fresh_floatariths fas i; fa \\<in> set fas\\<rbrakk>\n    \\<Longrightarrow> fresh_floatarith fa i", "by (induction fas) auto"], ["", "lemma interpret_floatariths_fresh_cong:\n  assumes \"\\<And>i. \\<not>fresh_floatariths f i \\<Longrightarrow> xs ! i = ys ! i\"\n  shows \"interpret_floatariths f ys = interpret_floatariths f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths f ys = interpret_floatariths f xs", "by (auto intro!: nth_equalityI assms interpret_floatarith_fresh_cong simp: )"], ["", "fun subterms :: \"floatarith \\<Rightarrow> floatarith set\" where\n\"subterms (Add a b) = insert (Add a b) (subterms a \\<union> subterms b)\" |\n\"subterms (Mult a b) = insert (Mult a b) (subterms a \\<union> subterms b)\" |\n\"subterms (Min a b) = insert (Min a b) (subterms a \\<union> subterms b)\" |\n\"subterms (floatarith.Max a b) = insert (floatarith.Max a b) (subterms a \\<union> subterms b)\" |\n\"subterms (Powr a b) = insert (Powr a b) (subterms a \\<union> subterms b)\" |\n\"subterms (Inverse a) = insert (Inverse a) (subterms a)\" |\n\"subterms (Cos a) = insert (Cos a) (subterms a)\" |\n\"subterms (Arctan a) = insert (Arctan a) (subterms a)\" |\n\"subterms (Abs a) = insert (Abs a) (subterms a)\" |\n\"subterms (Sqrt a) = insert (Sqrt a) (subterms a)\" |\n\"subterms (Exp a) = insert (Exp a) (subterms a)\" |\n\"subterms (Ln a) = insert (Ln a) (subterms a)\" |\n\"subterms (Power a n) = insert (Power a n) (subterms a)\" |\n\"subterms (Floor a) = insert (Floor a) (subterms a)\" |\n\"subterms (Minus a) = insert (Minus a) (subterms a)\" |\n\"subterms Pi = {Pi}\" |\n\"subterms (Var v) = {Var v}\" |\n\"subterms (Num n) = {Num n}\""], ["", "lemma subterms_self[simp]: \"fa2 \\<in> subterms fa2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fa2 \\<in> subterms fa2", "by (induction fa2) auto"], ["", "lemma interpret_floatarith_FDERIV_floatarith_eucl_of_env:\\<comment> \\<open>TODO: cleanup, reduce to DERIV?!\\<close>\n  assumes iD: \"\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs\"\n  assumes ds_fresh: \"freshs_floatarith fa ds\"\n  assumes [simp]: \"length xs = DIM ('a)\" \"length ds = DIM ('a)\"\n    \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < length vs\" \"distinct xs\"\n    \"\\<And>i. i \\<in> set ds \\<Longrightarrow> i < length vs\" \"distinct ds\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    (interpret_floatarith fa (list_updates xs (list_of_eucl x) vs))) has_derivative\n    (\\<lambda>d. interpret_floatarith (FDERIV_floatarith fa xs (map Var ds)) (list_updates ds (list_of_eucl d) vs) )\n    ) (at (eucl_of_env xs vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "using iD ds_fresh"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) fa vs\n  freshs_floatarith fa ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "proof (induction fa)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Add fa1 fa2) vs;\n        freshs_floatarith (Add fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Add fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Add fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Minus fa) vs;\n        freshs_floatarith (Minus fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Minus fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Minus fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n      freshs_floatarith Pi ds\\<rbrakk>\n     \\<Longrightarrow> ((\\<lambda>x.\n                            interpret_floatarith Pi\n                             (list_updates xs (list_of_eucl x)\n                               vs)) has_derivative\n                        (\\<lambda>d.\n                            interpret_floatarith\n                             (FDERIV_floatarith Pi xs (map Var ds))\n                             (list_updates ds (list_of_eucl d) vs)))\n                        (at (eucl_of_env xs vs))\nA total of 18 subgoals...", "case (Add fa1 fa2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Add fa1 fa2) vs\n  freshs_floatarith (Add fa1 fa2) ds\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Add fa1 fa2) vs;\n        freshs_floatarith (Add fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Add fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Add fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Minus fa) vs;\n        freshs_floatarith (Minus fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Minus fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Minus fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n      freshs_floatarith Pi ds\\<rbrakk>\n     \\<Longrightarrow> ((\\<lambda>x.\n                            interpret_floatarith Pi\n                             (list_updates xs (list_of_eucl x)\n                               vs)) has_derivative\n                        (\\<lambda>d.\n                            interpret_floatarith\n                             (FDERIV_floatarith Pi xs (map Var ds))\n                             (list_updates ds (list_of_eucl d) vs)))\n                        (at (eucl_of_env xs vs))\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Add fa1 fa2) vs\n  freshs_floatarith (Add fa1 fa2) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Add fa1 fa2) vs\n  freshs_floatarith (Add fa1 fa2) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Add fa1 fa2)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Add fa1 fa2) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Add fa1 fa2)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith (Add fa1 fa2) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (17 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Minus fa) vs;\n        freshs_floatarith (Minus fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Minus fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Minus fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n         freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Sqrt fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Sqrt fa) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Minus fa) vs;\n        freshs_floatarith (Minus fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Minus fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Minus fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n         freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Sqrt fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Sqrt fa) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 17 subgoals...", "case (Minus fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Minus fa) vs\n  freshs_floatarith (Minus fa) ds\n\ngoal (17 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Minus fa) vs;\n        freshs_floatarith (Minus fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Minus fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Minus fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n         freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Sqrt fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Sqrt fa) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Minus fa) vs\n  freshs_floatarith (Minus fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Minus fa) vs\n  freshs_floatarith (Minus fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Minus fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Minus fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Minus fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Minus fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n         freshs_floatarith (Exp fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Exp fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n         freshs_floatarith (Exp fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Exp fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 16 subgoals...", "case (Mult fa1 fa2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Mult fa1 fa2) vs\n  freshs_floatarith (Mult fa1 fa2) ds\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Mult fa1 fa2) vs;\n        freshs_floatarith (Mult fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Mult fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Mult fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n         freshs_floatarith (Exp fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Exp fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Mult fa1 fa2) vs\n  freshs_floatarith (Mult fa1 fa2) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Mult fa1 fa2) vs\n  freshs_floatarith (Mult fa1 fa2) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Mult fa1 fa2)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Mult fa1 fa2) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Mult fa1 fa2)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith (Mult fa1 fa2) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (15 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa1 vs;\n                  freshs_floatarith fa1 ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa1\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<lbrakk>\\<And>i.\n                     i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n          freshs_floatarith fa2 ds\\<rbrakk>\n         \\<Longrightarrow> ((\\<lambda>x.\n                                interpret_floatarith fa2\n                                 (list_updates xs (list_of_eucl x)\n                                   vs)) has_derivative\n                            (\\<lambda>d.\n                                interpret_floatarith\n                                 (FDERIV_floatarith fa2 xs (map Var ds))\n                                 (list_updates ds (list_of_eucl d) vs)))\n                            (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV (xs ! i) (Powr fa1 fa2) vs;\n         freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Powr fa1 fa2)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Powr fa1 fa2) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa1 vs;\n                  freshs_floatarith fa1 ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa1\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<lbrakk>\\<And>i.\n                     i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n          freshs_floatarith fa2 ds\\<rbrakk>\n         \\<Longrightarrow> ((\\<lambda>x.\n                                interpret_floatarith fa2\n                                 (list_updates xs (list_of_eucl x)\n                                   vs)) has_derivative\n                            (\\<lambda>d.\n                                interpret_floatarith\n                                 (FDERIV_floatarith fa2 xs (map Var ds))\n                                 (list_updates ds (list_of_eucl d) vs)))\n                            (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV (xs ! i) (Powr fa1 fa2) vs;\n         freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Powr fa1 fa2)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Powr fa1 fa2) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 15 subgoals...", "case (Inverse fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Inverse fa) vs\n  freshs_floatarith (Inverse fa) ds\n\ngoal (15 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Inverse fa) vs;\n        freshs_floatarith (Inverse fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Inverse fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Inverse fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa1 vs;\n                  freshs_floatarith fa1 ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa1\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<lbrakk>\\<And>i.\n                     i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n          freshs_floatarith fa2 ds\\<rbrakk>\n         \\<Longrightarrow> ((\\<lambda>x.\n                                interpret_floatarith fa2\n                                 (list_updates xs (list_of_eucl x)\n                                   vs)) has_derivative\n                            (\\<lambda>d.\n                                interpret_floatarith\n                                 (FDERIV_floatarith fa2 xs (map Var ds))\n                                 (list_updates ds (list_of_eucl d) vs)))\n                            (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV (xs ! i) (Powr fa1 fa2) vs;\n         freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Powr fa1 fa2)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Powr fa1 fa2) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Inverse fa) vs\n  freshs_floatarith (Inverse fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Inverse fa) vs\n  freshs_floatarith (Inverse fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Inverse fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Inverse fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (force intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] power2_eq_square)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Inverse fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Inverse fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (14 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n         freshs_floatarith (Ln fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Ln fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n         freshs_floatarith (Ln fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Ln fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 14 subgoals...", "case (Cos fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Cos fa) vs\n  freshs_floatarith (Cos fa) ds\n\ngoal (14 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Cos fa) vs;\n        freshs_floatarith (Cos fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Cos fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Cos fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n         freshs_floatarith (Ln fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Ln fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Cos fa) vs\n  freshs_floatarith (Cos fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Cos fa) vs\n  freshs_floatarith (Cos fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Cos fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Cos fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros ext simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map add.commute minus_sin_cos_eq\n        simp flip: mult_minus_left list_of_eucl_coord_update cos_pi_minus)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Cos fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Cos fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (13 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa x2a.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n         freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (fa ^\\<^sub>e x2a)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa x2a.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n         freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (fa ^\\<^sub>e x2a)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 13 subgoals...", "case (Arctan fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Arctan fa) vs\n  freshs_floatarith (Arctan fa) ds\n\ngoal (13 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Arctan fa) vs;\n        freshs_floatarith (Arctan fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Arctan fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Arctan fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa x2a.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n         freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (fa ^\\<^sub>e x2a)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Arctan fa) vs\n  freshs_floatarith (Arctan fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Arctan fa) vs\n  freshs_floatarith (Arctan fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Arctan fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Arctan fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Arctan fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Arctan fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (12 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n         freshs_floatarith (Floor fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Floor fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Floor fa) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n         freshs_floatarith (Floor fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Floor fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Floor fa) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 12 subgoals...", "case (Abs fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Abs fa) vs\n  freshs_floatarith (Abs fa) ds\n\ngoal (12 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Abs fa) vs;\n        freshs_floatarith (Abs fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Abs fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Abs fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV (xs ! i) fa vs;\n                  freshs_floatarith fa ds\\<rbrakk>\n                 \\<Longrightarrow> ((\\<lambda>x.\n  interpret_floatarith fa\n   (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                    (\\<lambda>d.\n  interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n   (list_updates ds (list_of_eucl d) vs)))\n                                    (at (eucl_of_env xs vs));\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n         freshs_floatarith (Floor fa) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith (Floor fa)\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Floor fa) xs\n                                  (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Abs fa) vs\n  freshs_floatarith (Abs fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Abs fa) vs\n  freshs_floatarith (Abs fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Abs fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Abs fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Abs fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Abs fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (11 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>x.\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV (xs ! i) (Var x) vs;\n         freshs_floatarith (Var x) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>xa.\n                               interpret_floatarith (Var x)\n                                (list_updates xs (list_of_eucl xa)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Var x) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>x.\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV (xs ! i) (Var x) vs;\n         freshs_floatarith (Var x) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>xa.\n                               interpret_floatarith (Var x)\n                                (list_updates xs (list_of_eucl xa)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Var x) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 11 subgoals...", "case (Max fa1 fa2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Max fa1 fa2) vs\n  freshs_floatarith (Max fa1 fa2) ds\n\ngoal (11 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Max fa1 fa2) vs;\n        freshs_floatarith (Max fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Max fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Max fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>x.\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV (xs ! i) (Var x) vs;\n         freshs_floatarith (Var x) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>xa.\n                               interpret_floatarith (Var x)\n                                (list_updates xs (list_of_eucl xa)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Var x) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Max fa1 fa2) vs\n  freshs_floatarith (Max fa1 fa2) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Max fa1 fa2) vs\n  freshs_floatarith (Max fa1 fa2) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Max fa1 fa2)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Max fa1 fa2) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Max fa1 fa2)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith (Max fa1 fa2) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (10 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>x.\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV (xs ! i) (Num x) vs;\n         freshs_floatarith (Num x) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>xa.\n                               interpret_floatarith (Num x)\n                                (list_updates xs (list_of_eucl xa)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Num x) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>x.\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV (xs ! i) (Num x) vs;\n         freshs_floatarith (Num x) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>xa.\n                               interpret_floatarith (Num x)\n                                (list_updates xs (list_of_eucl xa)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Num x) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))", "case (Min fa1 fa2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Min fa1 fa2) vs\n  freshs_floatarith (Min fa1 fa2) ds\n\ngoal (10 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Min fa1 fa2) vs;\n        freshs_floatarith (Min fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Min fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Min fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 10. \\<And>x.\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV (xs ! i) (Num x) vs;\n         freshs_floatarith (Num x) ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>xa.\n                               interpret_floatarith (Num x)\n                                (list_updates xs (list_of_eucl xa)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith (Num x) xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Min fa1 fa2) vs\n  freshs_floatarith (Min fa1 fa2) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Min fa1 fa2) vs\n  freshs_floatarith (Min fa1 fa2) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Min fa1 fa2)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Min fa1 fa2) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Min fa1 fa2)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith (Min fa1 fa2) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (9 subgoals):\n 1. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case Pi"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) Pi vs\n  freshs_floatarith Pi ds\n\ngoal (9 subgoals):\n 1. \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) Pi vs;\n     freshs_floatarith Pi ds\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith Pi\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith Pi xs (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 9. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) Pi vs\n  freshs_floatarith Pi ds", "show ?case"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) Pi vs\n  freshs_floatarith Pi ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith Pi\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith Pi xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith Pi\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith Pi xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (8 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Sqrt fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Sqrt fa) vs\n  freshs_floatarith (Sqrt fa) ds\n\ngoal (8 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Sqrt fa) vs;\n        freshs_floatarith (Sqrt fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Sqrt fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 8. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Sqrt fa) vs\n  freshs_floatarith (Sqrt fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Sqrt fa) vs\n  freshs_floatarith (Sqrt fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Sqrt fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (force intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Sqrt fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Sqrt fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (7 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Exp fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Exp fa) vs\n  freshs_floatarith (Exp fa) ds\n\ngoal (7 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Exp fa) vs;\n        freshs_floatarith (Exp fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Exp fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Exp fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 7. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Exp fa) vs\n  freshs_floatarith (Exp fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Exp fa) vs\n  freshs_floatarith (Exp fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Exp fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Exp fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Exp fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Exp fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (6 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Powr fa1 fa2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Powr fa1 fa2) vs\n  freshs_floatarith (Powr fa1 fa2) ds\n\ngoal (6 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa1 vs;\n                 freshs_floatarith fa1 ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa1\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa1 xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n         freshs_floatarith fa2 ds\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>x.\n                               interpret_floatarith fa2\n                                (list_updates xs (list_of_eucl x)\n                                  vs)) has_derivative\n                           (\\<lambda>d.\n                               interpret_floatarith\n                                (FDERIV_floatarith fa2 xs (map Var ds))\n                                (list_updates ds (list_of_eucl d) vs)))\n                           (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Powr fa1 fa2) vs;\n        freshs_floatarith (Powr fa1 fa2) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Powr fa1 fa2)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Powr fa1 fa2) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 6. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Powr fa1 fa2) vs\n  freshs_floatarith (Powr fa1 fa2) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa1 vs;\n   freshs_floatarith fa1 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa1\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa1 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa2 vs;\n   freshs_floatarith fa2 ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa2\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa2 xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Powr fa1 fa2) vs\n  freshs_floatarith (Powr fa1 fa2) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Powr fa1 fa2)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (Powr fa1 fa2) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (force intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps divide_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Powr fa1 fa2)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith (Powr fa1 fa2) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (5 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Ln fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Ln fa) vs\n  freshs_floatarith (Ln fa) ds\n\ngoal (5 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Ln fa) vs;\n        freshs_floatarith (Ln fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Ln fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Ln fa) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 5. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Ln fa) vs\n  freshs_floatarith (Ln fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Ln fa) vs\n  freshs_floatarith (Ln fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Ln fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Ln fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (force intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Ln fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Ln fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (4 subgoals):\n 1. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Power fa x2a)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (fa ^\\<^sub>e x2a) vs\n  freshs_floatarith (fa ^\\<^sub>e x2a) ds\n\ngoal (4 subgoals):\n 1. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 4. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (fa ^\\<^sub>e x2a) vs\n  freshs_floatarith (fa ^\\<^sub>e x2a) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (fa ^\\<^sub>e x2a) vs\n  freshs_floatarith (fa ^\\<^sub>e x2a) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (fa ^\\<^sub>e x2a)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "apply (cases x2a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<And>i.\n                         i < DIM('a) \\<Longrightarrow>\n                         isDERIV (xs ! i) fa vs;\n              freshs_floatarith fa ds\\<rbrakk>\n             \\<Longrightarrow> ((\\<lambda>x.\n                                    interpret_floatarith fa\n                                     (list_updates xs (list_of_eucl x)\n vs)) has_derivative\n                                (\\<lambda>d.\n                                    interpret_floatarith\n                                     (FDERIV_floatarith fa xs (map Var ds))\n                                     (list_updates ds (list_of_eucl d) vs)))\n                                (at (eucl_of_env xs vs));\n     \\<And>i.\n        i < DIM('a) \\<Longrightarrow>\n        isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n     freshs_floatarith (fa ^\\<^sub>e x2a) ds; x2a = 0\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           interpret_floatarith (fa ^\\<^sub>e x2a)\n                            (list_updates xs (list_of_eucl x)\n                              vs)) has_derivative\n                       (\\<lambda>d.\n                           interpret_floatarith\n                            (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                              (map Var ds))\n                            (list_updates ds (list_of_eucl d) vs)))\n                       (at (eucl_of_env xs vs))\n 2. \\<And>nat.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV (xs ! i) (fa ^\\<^sub>e x2a) vs;\n        freshs_floatarith (fa ^\\<^sub>e x2a) ds; x2a = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (fa ^\\<^sub>e x2a)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "apply (auto intro!: DIM_positive derivative_eq_intros simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>((\\<lambda>x.\n                     interpret_floatarith fa\n                      (list_updates xs (list_of_eucl x) vs)) has_derivative\n                 (\\<lambda>d.\n                     eucl_of_list\n                      (map (\\<lambda>x.\n                               interpret_floatarith (DERIV_floatarith x fa)\n                                (list_updates ds (list_of_eucl d) vs))\n                        xs) \\<bullet>\n                     eucl_of_list\n                      (map ((!) (list_updates ds (list_of_eucl d) vs)) ds)))\n                 (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n        freshs_floatarith fa ds; x2a = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>h.\n                             interpret_floatarith fa vs ^ nat *\n                             (eucl_of_list\n                               (map (\\<lambda>x.\n  interpret_floatarith (DERIV_floatarith x fa)\n   (list_updates ds (list_of_eucl h) vs))\n                                 xs) \\<bullet>\n                              eucl_of_list\n                               (map ((!)\n(list_updates ds (list_of_eucl h) vs))\n                                 ds)) +\n                             real nat *\n                             (interpret_floatarith fa vs *\n                              (interpret_floatarith fa vs ^ (nat - Suc 0) *\n                               (eucl_of_list\n                                 (map (\\<lambda>x.\n    interpret_floatarith (DERIV_floatarith x fa)\n     (list_updates ds (list_of_eucl h) vs))\n                                   xs) \\<bullet>\n                                eucl_of_list\n                                 (map ((!)\n  (list_updates ds (list_of_eucl h) vs))\n                                   ds))))) =\n                         (\\<lambda>d.\n                             interpret_floatarith fa vs ^ nat *\n                             (eucl_of_list\n                               (map (\\<lambda>x.\n  interpret_floatarith (DERIV_floatarith x fa)\n   (list_updates ds (list_of_eucl d) vs))\n                                 xs) \\<bullet>\n                              eucl_of_list\n                               (map ((!)\n(list_updates ds (list_of_eucl d) vs))\n                                 ds)) +\n                             real nat *\n                             (interpret_floatarith fa vs ^ nat *\n                              (eucl_of_list\n                                (map (\\<lambda>x.\n   interpret_floatarith (DERIV_floatarith x fa)\n    (list_updates ds (list_of_eucl d) vs))\n                                  xs) \\<bullet>\n                               eucl_of_list\n                                (map ((!)\n (list_updates ds (list_of_eucl d) vs))\n                                  ds))))", "apply (auto intro!: ext simp: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat h.\n       \\<lbrakk>((\\<lambda>x.\n                     interpret_floatarith fa\n                      (list_updates xs (list_of_eucl x) vs)) has_derivative\n                 (\\<lambda>d.\n                     eucl_of_list\n                      (map (\\<lambda>x.\n                               interpret_floatarith (DERIV_floatarith x fa)\n                                (list_updates ds (list_of_eucl d) vs))\n                        xs) \\<bullet>\n                     eucl_of_list\n                      (map ((!) (list_updates ds (list_of_eucl d) vs)) ds)))\n                 (at (eucl_of_env xs vs));\n        \\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n        freshs_floatarith fa ds; x2a = Suc nat;\n        interpret_floatarith fa vs *\n        interpret_floatarith fa vs ^ (nat - Suc 0) \\<noteq>\n        interpret_floatarith fa vs ^ nat;\n        0 < nat\\<rbrakk>\n       \\<Longrightarrow> eucl_of_list\n                          (map (\\<lambda>x.\n                                   interpret_floatarith\n                                    (DERIV_floatarith x fa)\n                                    (list_updates ds (list_of_eucl h) vs))\n                            xs) \\<bullet>\n                         eucl_of_list\n                          (map ((!) (list_updates ds (list_of_eucl h) vs))\n                            ds) =\n                         0", "by (simp add: semiring_normalization_rules(27))"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (fa ^\\<^sub>e x2a)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Floor fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Floor fa) vs\n  freshs_floatarith (Floor fa) ds\n\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV (xs ! i) fa vs;\n                 freshs_floatarith fa ds\\<rbrakk>\n                \\<Longrightarrow> ((\\<lambda>x.\n interpret_floatarith fa\n  (list_updates xs (list_of_eucl x) vs)) has_derivative\n                                   (\\<lambda>d.\n interpret_floatarith (FDERIV_floatarith fa xs (map Var ds))\n  (list_updates ds (list_of_eucl d) vs)))\n                                   (at (eucl_of_env xs vs));\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) (Floor fa) vs;\n        freshs_floatarith (Floor fa) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              interpret_floatarith (Floor fa)\n                               (list_updates xs (list_of_eucl x)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Floor fa) xs\n                                 (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 3. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Floor fa) vs\n  freshs_floatarith (Floor fa) ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < DIM('a) \\<Longrightarrow> isDERIV (xs ! i) fa vs;\n   freshs_floatarith fa ds\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         interpret_floatarith fa\n                          (list_updates xs (list_of_eucl x)\n                            vs)) has_derivative\n                     (\\<lambda>d.\n                         interpret_floatarith\n                          (FDERIV_floatarith fa xs (map Var ds))\n                          (list_updates ds (list_of_eucl d) vs)))\n                     (at (eucl_of_env xs vs))\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Floor fa) vs\n  freshs_floatarith (Floor fa) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith (Floor fa)\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Floor fa) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (force intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith (Floor fa)\n        (list_updates xs (list_of_eucl x) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Floor fa) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Var x)"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Var x) vs\n  freshs_floatarith (Var x) ds\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Var x) vs;\n        freshs_floatarith (Var x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Var x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Var x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))\n 2. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Var x) vs\n  freshs_floatarith (Var x) ds", "show ?case"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Var x) vs\n  freshs_floatarith (Var x) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>xa.\n         interpret_floatarith (Var x)\n          (list_updates xs (list_of_eucl xa) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Var x) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "apply (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] if_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set ds \\<Longrightarrow>\n    ((\\<lambda>xa. list_updates xs (list_of_eucl xa) vs ! x) has_derivative\n     (\\<lambda>d.\n         eucl_of_list\n          (map (\\<lambda>xa.\n                   (if xa = x\n                    then interpret_floatarith (fold_const_fa (Num 1))\n                    else interpret_floatarith (fold_const_fa (Num 0)))\n                    (list_updates ds (list_of_eucl d) vs))\n            xs) \\<bullet>\n         eucl_of_list (map ((!) (list_updates ds (list_of_eucl d) vs)) ds)))\n     (at (eucl_of_env xs vs))", "apply (subst list_updates_nth)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       x \\<notin> set ds \\<Longrightarrow>\n       length xs = length (list_of_eucl xa)\n 2. \\<And>xa. x \\<notin> set ds \\<Longrightarrow> distinct xs\n 3. x \\<notin> set ds \\<Longrightarrow>\n    ((\\<lambda>xa.\n         if x < length vs \\<and> x \\<in> set xs\n         then list_of_eucl xa ! index xs x else vs ! x) has_derivative\n     (\\<lambda>d.\n         eucl_of_list\n          (map (\\<lambda>xa.\n                   (if xa = x\n                    then interpret_floatarith (fold_const_fa (Num 1))\n                    else interpret_floatarith (fold_const_fa (Num 0)))\n                    (list_updates ds (list_of_eucl d) vs))\n            xs) \\<bullet>\n         eucl_of_list (map ((!) (list_updates ds (list_of_eucl d) vs)) ds)))\n     (at (eucl_of_env xs vs))", "apply (auto intro!: derivative_eq_intros ext split: if_splits\n        cong: if_cong simp: if_distribR eucl_of_list_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> set ds; x \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> xa \\<bullet> Basis_list ! index xs x =\n                         Basis_list ! index xs x \\<bullet>\n                         eucl_of_list\n                          (map ((!) (list_updates ds (list_of_eucl xa) vs))\n                            ds)", "apply (subst inner_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> set ds; x \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> Basis_list ! index xs x \\<bullet> xa =\n                         Basis_list ! index xs x \\<bullet>\n                         eucl_of_list\n                          (map ((!) (list_updates ds (list_of_eucl xa) vs))\n                            ds)", "apply (rule arg_cong[where f=\"\\<lambda>b. a \\<bullet> b\" for a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> set ds; x \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> xa =\n                         eucl_of_list\n                          (map ((!) (list_updates ds (list_of_eucl xa) vs))\n                            ds)", "apply (auto intro!: euclidean_eqI[where 'a='a] simp: eucl_of_list_inner list_updates_nth index_nth_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((\\<lambda>xa.\n       interpret_floatarith (Var x)\n        (list_updates xs (list_of_eucl xa) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Var x) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "case (Num x)"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Num x) vs\n  freshs_floatarith (Num x) ds\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>i.\n                   i < DIM('a) \\<Longrightarrow>\n                   isDERIV (xs ! i) (Num x) vs;\n        freshs_floatarith (Num x) ds\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa.\n                              interpret_floatarith (Num x)\n                               (list_updates xs (list_of_eucl xa)\n                                 vs)) has_derivative\n                          (\\<lambda>d.\n                              interpret_floatarith\n                               (FDERIV_floatarith (Num x) xs (map Var ds))\n                               (list_updates ds (list_of_eucl d) vs)))\n                          (at (eucl_of_env xs vs))", "then"], ["proof (chain)\npicking this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Num x) vs\n  freshs_floatarith (Num x) ds", "show ?case"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV (xs ! ?i) (Num x) vs\n  freshs_floatarith (Num x) ds\n\ngoal (1 subgoal):\n 1. ((\\<lambda>xa.\n         interpret_floatarith (Num x)\n          (list_updates xs (list_of_eucl xa) vs)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith (FDERIV_floatarith (Num x) xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (auto intro!: derivative_eq_intros DIM_positive simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths \n        interpret_floatariths_map algebra_simps list_of_eucl_coord_update[symmetric] )"], ["proof (state)\nthis:\n  ((\\<lambda>xa.\n       interpret_floatarith (Num x)\n        (list_updates xs (list_of_eucl xa) vs)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith (FDERIV_floatarith (Num x) xs (map Var ds))\n        (list_updates ds (list_of_eucl d) vs)))\n   (at (eucl_of_env xs vs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interpret_floatarith_FDERIV_floatarith_append:\n  assumes iD: \"\\<And>i j. i < DIM('a) \\<Longrightarrow> isDERIV i (fa) (list_of_eucl x @ params)\"\n  assumes m: \"max_Var_floatarith fa \\<le> DIM('a) + length params\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n      interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n        (\\<lambda>d. interpret_floatarith\n         (FDERIV_floatarith fa [0..<DIM('a)] (map Var [length params + DIM('a)..<length params + 2*DIM('a)]))\n         (list_of_eucl x @ params @ list_of_eucl d))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "have m_nth: \"ia < max_Var_floatarith fa \\<Longrightarrow> ia < DIM('a) + length params\" for ia"], ["proof (prove)\ngoal (1 subgoal):\n 1. ia < max_Var_floatarith fa \\<Longrightarrow>\n    ia < DIM('a) + length params", "using less_le_trans m"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  max_Var_floatarith fa \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. ia < max_Var_floatarith fa \\<Longrightarrow>\n    ia < DIM('a) + length params", "by blast"], ["proof (state)\nthis:\n  ?ia < max_Var_floatarith fa \\<Longrightarrow>\n  ?ia < DIM('a) + length params\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "have \"((\\<lambda>xa::'a. interpret_floatarith fa\n           (list_updates [0..<DIM('a)] (list_of_eucl xa) (list_of_eucl x @ params @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d. interpret_floatarith (FDERIV_floatarith fa [0..<DIM('a)] (map Var [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_updates [length params + DIM('a)..<length params + 2 * DIM('a)] (list_of_eucl d)\n            (list_of_eucl x @ params @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)] (list_of_eucl x @ params @ replicate DIM('a) 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>xa.\n         interpret_floatarith fa\n          (list_updates [0..<DIM('a)] (list_of_eucl xa)\n            (list_of_eucl x @ params @ replicate DIM('a) 0))) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_updates\n            [length params + DIM('a)..<length params + 2 * DIM('a)]\n            (list_of_eucl d)\n            (list_of_eucl x @ params @ replicate DIM('a) 0))))\n     (at (eucl_of_env [0..<DIM('a)]\n           (list_of_eucl x @ params @ replicate DIM('a) 0)))", "by (rule interpret_floatarith_FDERIV_floatarith_eucl_of_env)\n      (auto intro!: iD freshs_floatarith_max_Var_floatarithI isDERIV_max_Var_floatarithI[OF iD]\n        max_Var_floatarith_le_max_Var_floatariths[THEN order_trans] m[THEN order_trans]\n        simp: nth_append add.commute less_diff_conv2 m_nth)"], ["proof (state)\nthis:\n  ((\\<lambda>xa.\n       interpret_floatarith fa\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith fa [0..<DIM('a)]\n          (map Var [length params + DIM('a)..<length params + 2 * DIM('a)]))\n        (list_updates\n          [length params + DIM('a)..<length params + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ params @ replicate DIM('a) 0)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>xa.\n       interpret_floatarith fa\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith fa [0..<DIM('a)]\n          (map Var [length params + DIM('a)..<length params + 2 * DIM('a)]))\n        (list_updates\n          [length params + DIM('a)..<length params + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ params @ replicate DIM('a) 0)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "have \"interpret_floatarith fa (list_updates [0..<DIM('a)] (list_of_eucl xa) (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n    interpret_floatarith fa (list_of_eucl xa @ params)\" for xa::'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith fa\n     (list_updates [0..<DIM('a)] (list_of_eucl xa)\n       (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n    interpret_floatarith fa (list_of_eucl xa @ params)", "apply (auto intro!: nth_equalityI interpret_floatarith_max_Var_cong simp: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < max_Var_floatarith fa \\<Longrightarrow>\n       (list_of_eucl xa @ params) ! i =\n       list_updates [0..<DIM('a)] (list_of_eucl xa)\n        (list_of_eucl x @ params @ replicate DIM('a) 0) !\n       i", "apply (auto simp: list_updates_nth nth_append dest: m_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  interpret_floatarith fa\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n  interpret_floatarith fa (list_of_eucl ?xa @ params)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "moreover"], ["proof (state)\nthis:\n  interpret_floatarith fa\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n  interpret_floatarith fa (list_of_eucl ?xa @ params)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "have \"(list_updates [length params + DIM('a)..<length params + 2 * DIM('a)] (list_of_eucl d) (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n    (list_of_eucl x @ params @ list_of_eucl d)\" for d::'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates [length params + DIM('a)..<length params + 2 * DIM('a)]\n     (list_of_eucl d) (list_of_eucl x @ params @ replicate DIM('a) 0) =\n    list_of_eucl x @ params @ list_of_eucl d", "by (auto simp: intro!: nth_equalityI simp: list_updates_nth nth_append add.commute)"], ["proof (state)\nthis:\n  list_updates [length params + DIM('a)..<length params + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  list_of_eucl x @ params @ list_of_eucl ?d\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "moreover"], ["proof (state)\nthis:\n  list_updates [length params + DIM('a)..<length params + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  list_of_eucl x @ params @ list_of_eucl ?d\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "have \"(eucl_of_env [0..<DIM('a)] (list_of_eucl x @ params @ replicate DIM('a) 0)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eucl_of_env [0..<DIM('a)]\n     (list_of_eucl x @ params @ replicate DIM('a) 0) =\n    x", "by (auto intro!: euclidean_eqI[where 'a='a] simp: eucl_of_env_def eucl_of_list_inner nth_append)"], ["proof (state)\nthis:\n  eucl_of_env [0..<DIM('a)]\n   (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>xa.\n       interpret_floatarith fa\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith fa [0..<DIM('a)]\n          (map Var [length params + DIM('a)..<length params + 2 * DIM('a)]))\n        (list_updates\n          [length params + DIM('a)..<length params + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ params @ replicate DIM('a) 0)))\n  interpret_floatarith fa\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n  interpret_floatarith fa (list_of_eucl ?xa @ params)\n  list_updates [length params + DIM('a)..<length params + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  list_of_eucl x @ params @ list_of_eucl ?d\n  eucl_of_env [0..<DIM('a)]\n   (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  x", "show ?thesis"], ["proof (prove)\nusing this:\n  ((\\<lambda>xa.\n       interpret_floatarith fa\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith fa [0..<DIM('a)]\n          (map Var [length params + DIM('a)..<length params + 2 * DIM('a)]))\n        (list_updates\n          [length params + DIM('a)..<length params + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ params @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ params @ replicate DIM('a) 0)))\n  interpret_floatarith fa\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ params @ replicate DIM('a) 0)) =\n  interpret_floatarith fa (list_of_eucl ?xa @ params)\n  list_updates [length params + DIM('a)..<length params + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  list_of_eucl x @ params @ list_of_eucl ?d\n  eucl_of_env [0..<DIM('a)]\n   (list_of_eucl x @ params @ replicate DIM('a) 0) =\n  x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var\n              [length params + DIM('a)..<length params + 2 * DIM('a)]))\n          (list_of_eucl x @ params @ list_of_eucl d)))\n     (at x)", "by simp"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       interpret_floatarith fa (list_of_eucl x @ params)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith fa [0..<DIM('a)]\n          (map Var [length params + DIM('a)..<length params + 2 * DIM('a)]))\n        (list_of_eucl x @ params @ list_of_eucl d)))\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interpret_floatarith_FDERIV_floatarith:\n  assumes iD: \"\\<And>i j. i < DIM('a) \\<Longrightarrow> isDERIV i (fa) (list_of_eucl x)\"\n  assumes m: \"max_Var_floatarith fa \\<le> DIM('a)\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n      interpret_floatarith fa (list_of_eucl x)) has_derivative\n        (\\<lambda>d. interpret_floatarith\n         (FDERIV_floatarith fa [0..<DIM('a)] (map Var [DIM('a)..<2*DIM('a)]))\n         (list_of_eucl x @ list_of_eucl d))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. interpret_floatarith fa (list_of_eucl x)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var [DIM('a)..<2 * DIM('a)]))\n          (list_of_eucl x @ list_of_eucl d)))\n     (at x)", "using interpret_floatarith_FDERIV_floatarith_append[where params=Nil,simplified, OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>i. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  ((\\<lambda>x. interpret_floatarith fa (list_of_eucl x)) has_derivative\n   (\\<lambda>d.\n       interpret_floatarith\n        (FDERIV_floatarith fa [0..<DIM('a)]\n          (map Var [DIM('a)..<2 * DIM('a)]))\n        (list_of_eucl x @ list_of_eucl d)))\n   (at x)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. interpret_floatarith fa (list_of_eucl x)) has_derivative\n     (\\<lambda>d.\n         interpret_floatarith\n          (FDERIV_floatarith fa [0..<DIM('a)]\n            (map Var [DIM('a)..<2 * DIM('a)]))\n          (list_of_eucl x @ list_of_eucl d)))\n     (at x)", "by simp"], ["", "lemma interpret_floatarith_eventually_isDERIV:\n  assumes iD: \"\\<And>i j. i < DIM('a) \\<Longrightarrow> isDERIV i fa (list_of_eucl x @ params)\"\n  assumes m: \"max_Var_floatarith fa \\<le> DIM('a::executable_euclidean_space) + length params\"\n  shows \"\\<forall>i < DIM('a). \\<forall>\\<^sub>F (x::'a) in at x. isDERIV i fa (list_of_eucl x @ params)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)", "using iD m"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV ?i fa (list_of_eucl x @ params)\n  max_Var_floatarith fa \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)", "proof (induction fa)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "case (Inverse fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Inverse fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Inverse fa) \\<le> DIM('a) + length params\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Inverse fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Inverse fa) \\<le> DIM('a) + length params", "have \"\\<forall>i<DIM('a). \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Inverse fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Inverse fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "have iD: \"i < DIM('a) \\<Longrightarrow> isDERIV i fa (list_of_eucl x @ params)\" \"interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0", "using Inverse.prems(1)[OF ]"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Inverse fa) (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0", "by force+"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV ?i fa (list_of_eucl x @ params)\n  interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "from Inverse"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Inverse fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Inverse fa) \\<le> DIM('a) + length params", "have m: \"max_Var_floatarith fa \\<le> DIM('a) + length params\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Inverse fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Inverse fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. max_Var_floatarith fa \\<le> DIM('a) + length params", "by simp"], ["proof (state)\nthis:\n  max_Var_floatarith fa \\<le> DIM('a) + length params\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "from has_derivative_continuous[OF interpret_floatarith_FDERIV_floatarith_append, OF iD(1) m]"], ["proof (chain)\npicking this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have \"isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\""], ["proof (prove)\nusing this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "by simp"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have \"\\<forall>\\<^sub>F x in at x. interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0", "using iD(2) tendsto_imp_eventually_ne"], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n  interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0\n  \\<lbrakk>(?f \\<longlongrightarrow> ?c) ?F; ?c \\<noteq> ?c'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F z in ?F. ?f z \\<noteq> ?c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0", "by (auto simp: isCont_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Inverse fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Inverse fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Inverse fa)\n                                (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 10. \\<lbrakk>\\<And>i.\n                 i < DIM('a) \\<Longrightarrow>\n                 isDERIV i Pi (list_of_eucl x @ params);\n      max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n     \\<Longrightarrow> \\<forall>i<DIM('a).\n                          \\<forall>\\<^sub>F x in at x.\n                             isDERIV i Pi (list_of_eucl x @ params)\nA total of 18 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     interpret_floatarith fa (list_of_eucl x @ params) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i (Inverse fa) (list_of_eucl x @ params)", "by (auto elim: eventually_elim2)"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i (Inverse fa) (list_of_eucl x @ params)\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "case (Sqrt fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Sqrt fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Sqrt fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params", "have \"\\<forall>i<DIM('a). \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Sqrt fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "have iD: \"i < DIM('a) \\<Longrightarrow> isDERIV i fa (list_of_eucl x @ params)\" \"interpret_floatarith fa (list_of_eucl x @ params) > 0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    0 < interpret_floatarith fa (list_of_eucl x @ params)", "using Sqrt.prems(1)[OF ]"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Sqrt fa) (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    0 < interpret_floatarith fa (list_of_eucl x @ params)", "by force+"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV ?i fa (list_of_eucl x @ params)\n  0 < interpret_floatarith fa (list_of_eucl x @ params)\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "from Sqrt"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Sqrt fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params", "have m: \"max_Var_floatarith fa \\<le> DIM('a) + length params\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Sqrt fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. max_Var_floatarith fa \\<le> DIM('a) + length params", "by simp"], ["proof (state)\nthis:\n  max_Var_floatarith fa \\<le> DIM('a) + length params\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "from has_derivative_continuous[OF interpret_floatarith_FDERIV_floatarith_append, OF iD(1) m]"], ["proof (chain)\npicking this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have \"isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\""], ["proof (prove)\nusing this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "by simp"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have \"\\<forall>\\<^sub>F x in at x. interpret_floatarith fa (list_of_eucl x @ params) > 0\""], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       0 < interpret_floatarith fa (list_of_eucl x @ params)", "using iD(2) order_tendstoD"], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n  0 < interpret_floatarith fa (list_of_eucl x @ params)\n  \\<lbrakk>(?f \\<longlongrightarrow> ?y) ?F; ?a < ?y\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?a < ?f x\n  \\<lbrakk>(?f \\<longlongrightarrow> ?y) ?F; ?y < ?a\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?f x < ?a\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       0 < interpret_floatarith fa (list_of_eucl x @ params)", "by (auto simp: isCont_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa (list_of_eucl x @ params)\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Sqrt fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Sqrt fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Sqrt fa)\n                                 (list_of_eucl x @ params)\nA total of 17 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa (list_of_eucl x @ params)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i (Sqrt fa) (list_of_eucl x @ params)", "by (auto elim: eventually_elim2)"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i (Sqrt fa) (list_of_eucl x @ params)\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "case (Powr fa1 fa2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa1 (list_of_eucl x @ params);\n   max_Var_floatarith fa1 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa1 (list_of_eucl x @ params)\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa2 (list_of_eucl x @ params);\n   max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa2 (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Powr fa1 fa2) (list_of_eucl x @ params)\n  max_Var_floatarith (Powr fa1 fa2) \\<le> DIM('a) + length params\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa1 (list_of_eucl x @ params);\n   max_Var_floatarith fa1 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa1 (list_of_eucl x @ params)\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa2 (list_of_eucl x @ params);\n   max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa2 (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Powr fa1 fa2) (list_of_eucl x @ params)\n  max_Var_floatarith (Powr fa1 fa2) \\<le> DIM('a) + length params", "have \"\\<forall>i<DIM('a). \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params)\"\n    \"\\<forall>i<DIM('a). \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa1 (list_of_eucl x @ params);\n   max_Var_floatarith fa1 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa1 (list_of_eucl x @ params)\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa2 (list_of_eucl x @ params);\n   max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa2 (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Powr fa1 fa2) (list_of_eucl x @ params)\n  max_Var_floatarith (Powr fa1 fa2) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i fa1 (list_of_eucl x @ params) &&&\n    \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params)\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params)\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "have iD: \"i < DIM('a) \\<Longrightarrow> isDERIV i fa1 (list_of_eucl x @ params)\" \"interpret_floatarith fa1 (list_of_eucl x @ params) > 0\"\n    for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa1 (list_of_eucl x @ params)) &&&\n    0 < interpret_floatarith fa1 (list_of_eucl x @ params)", "using Powr.prems(1)"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Powr fa1 fa2) (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa1 (list_of_eucl x @ params)) &&&\n    0 < interpret_floatarith fa1 (list_of_eucl x @ params)", "by force+"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV ?i fa1 (list_of_eucl x @ params)\n  0 < interpret_floatarith fa1 (list_of_eucl x @ params)\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "from Powr"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa1 (list_of_eucl x @ params);\n   max_Var_floatarith fa1 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa1 (list_of_eucl x @ params)\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa2 (list_of_eucl x @ params);\n   max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa2 (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Powr fa1 fa2) (list_of_eucl x @ params)\n  max_Var_floatarith (Powr fa1 fa2) \\<le> DIM('a) + length params", "have m: \"max_Var_floatarith fa1 \\<le> DIM('a) + length params\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa1 (list_of_eucl x @ params);\n   max_Var_floatarith fa1 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa1 (list_of_eucl x @ params)\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa2 (list_of_eucl x @ params);\n   max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa2 (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Powr fa1 fa2) (list_of_eucl x @ params)\n  max_Var_floatarith (Powr fa1 fa2) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. max_Var_floatarith fa1 \\<le> DIM('a) + length params", "by simp"], ["proof (state)\nthis:\n  max_Var_floatarith fa1 \\<le> DIM('a) + length params\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "from has_derivative_continuous[OF interpret_floatarith_FDERIV_floatarith_append, OF iD(1) m]"], ["proof (chain)\npicking this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x", "have \"isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x\""], ["proof (prove)\nusing this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params))\n     x", "by simp"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x", "have \"\\<forall>\\<^sub>F x in at x. interpret_floatarith fa1 (list_of_eucl x @ params) > 0\""], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       0 < interpret_floatarith fa1 (list_of_eucl x @ params)", "using iD(2) order_tendstoD"], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa1 (list_of_eucl x @ params)) x\n  0 < interpret_floatarith fa1 (list_of_eucl x @ params)\n  \\<lbrakk>(?f \\<longlongrightarrow> ?y) ?F; ?a < ?y\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?a < ?f x\n  \\<lbrakk>(?f \\<longlongrightarrow> ?y) ?F; ?y < ?a\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?f x < ?a\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       0 < interpret_floatarith fa1 (list_of_eucl x @ params)", "by (auto simp: isCont_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa1 (list_of_eucl x @ params)\n\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 16 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params)\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa1 (list_of_eucl x @ params)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params)\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa1 (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i (Powr fa1 fa2) (list_of_eucl x @ params)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i<DIM('a).\n                   \\<forall>\\<^sub>F x in at x.\n                      isDERIV i fa1 (list_of_eucl x @ params);\n        \\<forall>i<DIM('a).\n           \\<forall>\\<^sub>F x in at x.\n              isDERIV i fa2 (list_of_eucl x @ params);\n        \\<forall>\\<^sub>F x in at x.\n           0 < interpret_floatarith fa1 (list_of_eucl x @ params);\n        i < DIM('a)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                            isDERIV i (Powr fa1 fa2)\n                             (list_of_eucl x @ params)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<DIM('a).\n                \\<forall>\\<^sub>F x in at x.\n                   isDERIV i fa1 (list_of_eucl x @ params);\n     \\<forall>i<DIM('a).\n        \\<forall>\\<^sub>F x in at x.\n           isDERIV i fa2 (list_of_eucl x @ params);\n     \\<forall>\\<^sub>F x in at x.\n        0 < interpret_floatarith fa1 (list_of_eucl x @ params);\n     i < DIM('a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                         isDERIV i (Powr fa1 fa2) (list_of_eucl x @ params)", "apply (safe dest!: spec[of _ i])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<^sub>F x in at x.\n                0 < interpret_floatarith fa1 (list_of_eucl x @ params);\n     i < DIM('a);\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params);\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i fa2 (list_of_eucl x @ params)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                         isDERIV i (Powr fa1 fa2) (list_of_eucl x @ params)", "subgoal premises prems"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isDERIV i (Powr fa1 fa2) (list_of_eucl x @ params)", "using prems(1,3,4)"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa1 (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x. isDERIV i fa1 (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x. isDERIV i fa2 (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isDERIV i (Powr fa1 fa2) (list_of_eucl x @ params)", "by eventually_elim auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i (Powr fa1 fa2) (list_of_eucl x @ params)\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "case (Ln fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Ln fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Ln fa) \\<le> DIM('a) + length params\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Ln fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Ln fa) \\<le> DIM('a) + length params", "have \"\\<forall>i<DIM('a). \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Ln fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Ln fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "have iD: \"i < DIM('a) \\<Longrightarrow> isDERIV i fa (list_of_eucl x @ params)\" \"interpret_floatarith fa (list_of_eucl x @ params) > 0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    0 < interpret_floatarith fa (list_of_eucl x @ params)", "using Ln.prems(1)[OF ]"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Ln fa) (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    0 < interpret_floatarith fa (list_of_eucl x @ params)", "by force+"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV ?i fa (list_of_eucl x @ params)\n  0 < interpret_floatarith fa (list_of_eucl x @ params)\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "from Ln"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Ln fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Ln fa) \\<le> DIM('a) + length params", "have m: \"max_Var_floatarith fa \\<le> DIM('a) + length params\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Ln fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Ln fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. max_Var_floatarith fa \\<le> DIM('a) + length params", "by simp"], ["proof (state)\nthis:\n  max_Var_floatarith fa \\<le> DIM('a) + length params\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "from has_derivative_continuous[OF interpret_floatarith_FDERIV_floatarith_append, OF iD(1) m]"], ["proof (chain)\npicking this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have \"isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\""], ["proof (prove)\nusing this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "by simp"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have \"\\<forall>\\<^sub>F x in at x. interpret_floatarith fa (list_of_eucl x @ params) > 0\""], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       0 < interpret_floatarith fa (list_of_eucl x @ params)", "using iD(2) order_tendstoD"], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n  0 < interpret_floatarith fa (list_of_eucl x @ params)\n  \\<lbrakk>(?f \\<longlongrightarrow> ?y) ?F; ?a < ?y\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?a < ?f x\n  \\<lbrakk>(?f \\<longlongrightarrow> ?y) ?F; ?y < ?a\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?f x < ?a\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       0 < interpret_floatarith fa (list_of_eucl x @ params)", "by (auto simp: isCont_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa (list_of_eucl x @ params)\n\ngoal (15 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 15 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa (list_of_eucl x @ params)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     0 < interpret_floatarith fa (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i (Ln fa) (list_of_eucl x @ params)", "by (auto elim: eventually_elim2)"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i (Ln fa) (list_of_eucl x @ params)\n\ngoal (14 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 14 subgoals...", "case (Power fa m)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (fa ^\\<^sub>e m) (list_of_eucl x @ params)\n  max_Var_floatarith (fa ^\\<^sub>e m) \\<le> DIM('a) + length params\n\ngoal (14 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (fa ^\\<^sub>e m) (list_of_eucl x @ params)\n  max_Var_floatarith (fa ^\\<^sub>e m) \\<le> DIM('a) + length params", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (fa ^\\<^sub>e m) (list_of_eucl x @ params)\n  max_Var_floatarith (fa ^\\<^sub>e m) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i (fa ^\\<^sub>e m) (list_of_eucl x @ params)", "by (cases m) auto"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i (fa ^\\<^sub>e m) (list_of_eucl x @ params)\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "case (Floor fa)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Floor fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Floor fa) \\<le> DIM('a) + length params\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Floor fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Floor fa) \\<le> DIM('a) + length params", "have \"\\<forall>i<DIM('a). \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Floor fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Floor fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "have iD: \"i < DIM('a) \\<Longrightarrow> isDERIV i fa (list_of_eucl x @ params)\"\n    \"interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>", "using Floor.prems(1)[OF ]"], ["proof (prove)\nusing this:\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Floor fa) (list_of_eucl x @ params)\n\ngoal (1 subgoal):\n 1. (i < DIM('a) \\<Longrightarrow>\n     isDERIV i fa (list_of_eucl x @ params)) &&&\n    interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>", "by force+"], ["proof (state)\nthis:\n  ?i < DIM('a) \\<Longrightarrow> isDERIV ?i fa (list_of_eucl x @ params)\n  interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "from Floor"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Floor fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Floor fa) \\<le> DIM('a) + length params", "have m: \"max_Var_floatarith fa \\<le> DIM('a) + length params\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < DIM('a) \\<Longrightarrow>\n              isDERIV i fa (list_of_eucl x @ params);\n   max_Var_floatarith fa \\<le> DIM('a) + length params\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<DIM('a).\n                       \\<forall>\\<^sub>F x in at x.\n                          isDERIV i fa (list_of_eucl x @ params)\n  ?i < DIM('a) \\<Longrightarrow>\n  isDERIV ?i (Floor fa) (list_of_eucl x @ params)\n  max_Var_floatarith (Floor fa) \\<le> DIM('a) + length params\n\ngoal (1 subgoal):\n 1. max_Var_floatarith fa \\<le> DIM('a) + length params", "by simp"], ["proof (state)\nthis:\n  max_Var_floatarith fa \\<le> DIM('a) + length params\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "from has_derivative_continuous[OF interpret_floatarith_FDERIV_floatarith_append, OF iD(1) m]"], ["proof (chain)\npicking this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "have cont: \"isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\""], ["proof (prove)\nusing this:\n  (\\<And>i j. i < DIM('a) \\<Longrightarrow> i < DIM('a)) \\<Longrightarrow>\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x", "by simp"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "let ?i = \"\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)\""], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "have \"\\<forall>\\<^sub>F y in at x. ?i y > floor (?i x)\" \"\\<forall>\\<^sub>F y in at x. ?i y < ceiling (?i x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F y in at x.\n       real_of_int\n        \\<lfloor>interpret_floatarith fa (list_of_eucl x @ params)\\<rfloor>\n       < interpret_floatarith fa (list_of_eucl y @ params) &&&\n    \\<forall>\\<^sub>F y in at x.\n       interpret_floatarith fa (list_of_eucl y @ params)\n       < real_of_int\n          \\<lceil>interpret_floatarith fa (list_of_eucl x @ params)\\<rceil>", "using cont"], ["proof (prove)\nusing this:\n  isCont (\\<lambda>x. interpret_floatarith fa (list_of_eucl x @ params)) x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F y in at x.\n       real_of_int\n        \\<lfloor>interpret_floatarith fa (list_of_eucl x @ params)\\<rfloor>\n       < interpret_floatarith fa (list_of_eucl y @ params) &&&\n    \\<forall>\\<^sub>F y in at x.\n       interpret_floatarith fa (list_of_eucl y @ params)\n       < real_of_int\n          \\<lceil>interpret_floatarith fa (list_of_eucl x @ params)\\<rceil>", "by (auto simp: isCont_def eventually_floor_less eventually_less_ceiling iD(2))"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F y in at x.\n     real_of_int\n      \\<lfloor>interpret_floatarith fa (list_of_eucl x @ params)\\<rfloor>\n     < interpret_floatarith fa (list_of_eucl y @ params)\n  \\<forall>\\<^sub>F y in at x.\n     interpret_floatarith fa (list_of_eucl y @ params)\n     < real_of_int\n        \\<lceil>interpret_floatarith fa (list_of_eucl x @ params)\\<rceil>\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F y in at x.\n     real_of_int\n      \\<lfloor>interpret_floatarith fa (list_of_eucl x @ params)\\<rfloor>\n     < interpret_floatarith fa (list_of_eucl y @ params)\n  \\<forall>\\<^sub>F y in at x.\n     interpret_floatarith fa (list_of_eucl y @ params)\n     < real_of_int\n        \\<lceil>interpret_floatarith fa (list_of_eucl x @ params)\\<rceil>", "have \"\\<forall>\\<^sub>F x in at x. ?i x \\<notin> \\<int>\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F y in at x.\n     real_of_int\n      \\<lfloor>interpret_floatarith fa (list_of_eucl x @ params)\\<rfloor>\n     < interpret_floatarith fa (list_of_eucl y @ params)\n  \\<forall>\\<^sub>F y in at x.\n     interpret_floatarith fa (list_of_eucl y @ params)\n     < real_of_int\n        \\<lceil>interpret_floatarith fa (list_of_eucl x @ params)\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>", "apply eventually_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>real_of_int\n                 \\<lfloor>interpret_floatarith fa\n                           (list_of_eucl x @ params)\\<rfloor>\n                < interpret_floatarith fa (list_of_eucl xa @ params);\n        interpret_floatarith fa (list_of_eucl xa @ params)\n        < real_of_int\n           \\<lceil>interpret_floatarith fa\n                    (list_of_eucl x @ params)\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> interpret_floatarith fa (list_of_eucl xa @ params)\n                         \\<notin> \\<int>", "apply (auto simp: Ints_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>\\<lfloor>interpret_floatarith fa\n                          (list_of_eucl x @ params)\\<rfloor>\n                < xaa;\n        xaa\n        < \\<lceil>interpret_floatarith fa (list_of_eucl x @ params)\\<rceil>;\n        interpret_floatarith fa (list_of_eucl xa @ params) =\n        real_of_int xaa\\<rbrakk>\n       \\<Longrightarrow> False", "by linarith"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>\n\ngoal (13 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 13 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params)\n  \\<forall>\\<^sub>F x in at x.\n     interpret_floatarith fa (list_of_eucl x @ params) \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. \\<forall>i<DIM('a).\n       \\<forall>\\<^sub>F x in at x.\n          isDERIV i (Floor fa) (list_of_eucl x @ params)", "by (auto elim: eventually_elim2)"], ["proof (state)\nthis:\n  \\<forall>i<DIM('a).\n     \\<forall>\\<^sub>F x in at x.\n        isDERIV i (Floor fa) (list_of_eucl x @ params)\n\ngoal (12 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Add fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Add fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Add fa1 fa2)\n                                (list_of_eucl x @ params)\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Minus fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Minus fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Minus fa)\n                                (list_of_eucl x @ params)\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Mult fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Mult fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Mult fa1 fa2)\n                                (list_of_eucl x @ params)\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Cos fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Cos fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Cos fa) (list_of_eucl x @ params)\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Arctan fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Arctan fa)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Arctan fa)\n                                (list_of_eucl x @ params)\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa (list_of_eucl x @ params);\n                 max_Var_floatarith fa\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Abs fa) (list_of_eucl x @ params);\n        max_Var_floatarith (Abs fa) \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Abs fa) (list_of_eucl x @ params)\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Max fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Max fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Max fa1 fa2)\n                                (list_of_eucl x @ params)\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>\\<And>i.\n                            i < DIM('a) \\<Longrightarrow>\n                            isDERIV i fa1 (list_of_eucl x @ params);\n                 max_Var_floatarith fa1\n                 \\<le> DIM('a) + length params\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<DIM('a).\n                                     \\<forall>\\<^sub>F x in at x.\n  isDERIV i fa1 (list_of_eucl x @ params);\n        \\<lbrakk>\\<And>i.\n                    i < DIM('a) \\<Longrightarrow>\n                    isDERIV i fa2 (list_of_eucl x @ params);\n         max_Var_floatarith fa2 \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i fa2 (list_of_eucl x @ params);\n        \\<And>i.\n           i < DIM('a) \\<Longrightarrow>\n           isDERIV i (Min fa1 fa2) (list_of_eucl x @ params);\n        max_Var_floatarith (Min fa1 fa2)\n        \\<le> DIM('a) + length params\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<DIM('a).\n                            \\<forall>\\<^sub>F x in at x.\n                               isDERIV i (Min fa1 fa2)\n                                (list_of_eucl x @ params)\n 9. \\<lbrakk>\\<And>i.\n                i < DIM('a) \\<Longrightarrow>\n                isDERIV i Pi (list_of_eucl x @ params);\n     max_Var_floatarith Pi \\<le> DIM('a) + length params\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<DIM('a).\n                         \\<forall>\\<^sub>F x in at x.\n                            isDERIV i Pi (list_of_eucl x @ params)\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>\\<And>i.\n                             i < DIM('a) \\<Longrightarrow>\n                             isDERIV i fa (list_of_eucl x @ params);\n                  max_Var_floatarith fa\n                  \\<le> DIM('a) + length params\\<rbrakk>\n                 \\<Longrightarrow> \\<forall>i<DIM('a).\n\\<forall>\\<^sub>F x in at x. isDERIV i fa (list_of_eucl x @ params);\n         \\<And>i.\n            i < DIM('a) \\<Longrightarrow>\n            isDERIV i (Exp fa) (list_of_eucl x @ params);\n         max_Var_floatarith (Exp fa) \\<le> DIM('a) + length params\\<rbrakk>\n        \\<Longrightarrow> \\<forall>i<DIM('a).\n                             \\<forall>\\<^sub>F x in at x.\n                                isDERIV i (Exp fa) (list_of_eucl x @ params)\nA total of 12 subgoals...", "qed (fastforce intro: DIM_positive elim: eventually_elim2)+"], ["", "lemma eventually_isFDERIV:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x@params)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a::executable_euclidean_space) + length params\"\n  shows \"\\<forall>\\<^sub>F (x::'a) in at x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ params)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ params)", "by (auto simp: isFDERIV_def all_nat_less_eq eventually_ball_finite_distrib isFDERIV_lengthD[OF iD]\n      intro!: interpret_floatarith_eventually_isDERIV[OF isFDERIV_uptD[OF iD], rule_format]\n        max_Var_floatarith_le_max_Var_floatariths[THEN order_trans] m)"], ["", "lemma isFDERIV_eventually_isFDERIV:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x@params)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a::executable_euclidean_space) + length params\"\n    shows \"\\<forall>\\<^sub>F (x::'a) in at x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ params)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ params)", "by (rule eventually_isFDERIV) (use assms in \\<open>auto simp: isFDERIV_def\\<close>)"], ["", "lemma interpret_floatarith_FDERIV_floatariths_eucl_of_env:\n  assumes iD: \"isFDERIV DIM('a) xs fas vs\"\n  assumes fresh: \"freshs_floatariths (fas) ds\"\n  assumes [simp]: \"length ds = DIM ('a)\"\n    \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < length vs\" \"distinct xs\"\n    \"\\<And>i. i \\<in> set ds \\<Longrightarrow> i < length vs\" \"distinct ds\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    eucl_of_list\n      (interpret_floatariths fas (list_updates xs (list_of_eucl x) vs))::'a) has_derivative\n        (\\<lambda>d. eucl_of_list (interpret_floatariths\n         (FDERIV_floatariths fas xs (map Var ds))\n         (list_updates ds (list_of_eucl d) vs)))) (at (eucl_of_env xs vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         einterpret fas\n          (list_updates xs (list_of_eucl x) vs)) has_derivative\n     (\\<lambda>d.\n         einterpret (FDERIV_floatariths fas xs (map Var ds))\n          (list_updates ds (list_of_eucl d) vs)))\n     (at (eucl_of_env xs vs))", "by (subst has_derivative_componentwise_within)\n    (auto simp add: eucl_of_list_inner isFDERIV_lengthD[OF iD]\n      intro!: interpret_floatarith_FDERIV_floatarith_eucl_of_env iD[THEN isFDERIV_isDERIV_D]\n        fresh_floatariths_fresh_floatarithI fresh)"], ["", "lemma interpret_floatarith_FDERIV_floatariths_append:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ ramsch)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a) + length ramsch\"\n  assumes [simp]: \"length fas = DIM('a)\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    eucl_of_list\n      (interpret_floatariths fas (list_of_eucl x@ramsch))::'a) has_derivative\n        (\\<lambda>d. eucl_of_list (interpret_floatariths\n         (FDERIV_floatariths fas [0..<DIM('a)] (map Var [DIM('a)+length ramsch..<2*DIM('a) + length ramsch]))\n         (list_of_eucl x @ ramsch @ list_of_eucl d)))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "have m_nth: \"ia < max_Var_floatariths fas \\<Longrightarrow> ia < DIM('a) + length ramsch\" for ia"], ["proof (prove)\ngoal (1 subgoal):\n 1. ia < max_Var_floatariths fas \\<Longrightarrow>\n    ia < DIM('a) + length ramsch", "using m"], ["proof (prove)\nusing this:\n  max_Var_floatariths fas \\<le> DIM('a) + length ramsch\n\ngoal (1 subgoal):\n 1. ia < max_Var_floatariths fas \\<Longrightarrow>\n    ia < DIM('a) + length ramsch", "by simp"], ["proof (state)\nthis:\n  ?ia < max_Var_floatariths fas \\<Longrightarrow>\n  ?ia < DIM('a) + length ramsch\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "have m_nth': \"ia < max_Var_floatarith (fas ! j) \\<Longrightarrow> ia < DIM('a) + length ramsch\" if \"j < DIM('a)\" for j ia"], ["proof (prove)\ngoal (1 subgoal):\n 1. ia < max_Var_floatarith (fas ! j) \\<Longrightarrow>\n    ia < DIM('a) + length ramsch", "using m_nth max_Var_floatariths_lessI that"], ["proof (prove)\nusing this:\n  ?ia < max_Var_floatariths fas \\<Longrightarrow>\n  ?ia < DIM('a) + length ramsch\n  \\<lbrakk>?i < max_Var_floatarith (?fas ! ?j); ?j < length ?fas\\<rbrakk>\n  \\<Longrightarrow> ?i < max_Var_floatariths ?fas\n  j < DIM('a)\n\ngoal (1 subgoal):\n 1. ia < max_Var_floatarith (fas ! j) \\<Longrightarrow>\n    ia < DIM('a) + length ramsch", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?j < DIM('a); ?ia < max_Var_floatarith (fas ! ?j)\\<rbrakk>\n  \\<Longrightarrow> ?ia < DIM('a) + length ramsch\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "have \"((\\<lambda>xa::'a. eucl_of_list\n         (interpret_floatariths fas\n           (list_updates [0..<DIM('a)] (list_of_eucl xa)\n             (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))::'a) has_derivative\n (\\<lambda>d. eucl_of_list\n        (interpret_floatariths\n          (FDERIV_floatariths fas [0..<DIM('a)] (map Var [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]))\n          (list_updates [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)] (list_of_eucl d)\n            (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))))\n (at (eucl_of_env [0..<DIM('a)] (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>xa.\n         einterpret fas\n          (list_updates [0..<DIM('a)] (list_of_eucl xa)\n            (list_of_eucl x @ ramsch @ replicate DIM('a) 0))) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]))\n          (list_updates\n            [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]\n            (list_of_eucl d)\n            (list_of_eucl x @ ramsch @ replicate DIM('a) 0))))\n     (at (eucl_of_env [0..<DIM('a)]\n           (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))", "by (rule interpret_floatarith_FDERIV_floatariths_eucl_of_env[of\n          \"[0..<DIM('a)]\" fas \"list_of_eucl x@ramsch@replicate DIM('a) 0\" \"[length ramsch+DIM('a)..<length ramsch+2*DIM('a)]\"])\n       (auto intro!: iD[THEN isFDERIV_uptD] freshs_floatarith_max_Var_floatarithI isFDERIV_max_Var_congI[OF iD]\n        max_Var_floatarith_le_max_Var_floatariths[THEN order_trans] m[THEN order_trans]\n        freshs_floatariths_max_Var_floatarithsI simp: nth_append m add.commute less_diff_conv2 m_nth)"], ["proof (state)\nthis:\n  ((\\<lambda>xa.\n       einterpret fas\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       einterpret\n        (FDERIV_floatariths fas [0..<DIM('a)]\n          (map Var [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]))\n        (list_updates\n          [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>xa.\n       einterpret fas\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       einterpret\n        (FDERIV_floatariths fas [0..<DIM('a)]\n          (map Var [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]))\n        (list_updates\n          [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "have \"interpret_floatariths fas (list_updates [0..<DIM('a)] (list_of_eucl xa) (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n    interpret_floatariths fas (list_of_eucl xa @ ramsch)\" for xa::'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths fas\n     (list_updates [0..<DIM('a)] (list_of_eucl xa)\n       (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n    interpret_floatariths fas (list_of_eucl xa @ ramsch)", "apply (auto intro!: nth_equalityI interpret_floatarith_max_Var_cong simp: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < DIM('a); ia < max_Var_floatarith (fas ! i)\\<rbrakk>\n       \\<Longrightarrow> (list_of_eucl xa @ ramsch) ! ia =\n                         list_updates [0..<DIM('a)] (list_of_eucl xa)\n                          (list_of_eucl x @ ramsch @ replicate DIM('a) 0) !\n                         ia", "apply (auto simp: list_updates_nth nth_append dest: m_nth')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  interpret_floatariths fas\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n  interpret_floatariths fas (list_of_eucl ?xa @ ramsch)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "moreover"], ["proof (state)\nthis:\n  interpret_floatariths fas\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n  interpret_floatariths fas (list_of_eucl ?xa @ ramsch)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "have\n    \"(list_updates [DIM('a) + length ramsch..<length ramsch + 2 * DIM('a)]\n        (list_of_eucl d)\n        (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n      (list_of_eucl x @ ramsch @ list_of_eucl d)\" for d::'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_updates [DIM('a) + length ramsch..<length ramsch + 2 * DIM('a)]\n     (list_of_eucl d) (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n    list_of_eucl x @ ramsch @ list_of_eucl d", "by (auto simp: intro!: nth_equalityI simp: list_updates_nth nth_append)"], ["proof (state)\nthis:\n  list_updates [DIM('a) + length ramsch..<length ramsch + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  list_of_eucl x @ ramsch @ list_of_eucl ?d\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "moreover"], ["proof (state)\nthis:\n  list_updates [DIM('a) + length ramsch..<length ramsch + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  list_of_eucl x @ ramsch @ list_of_eucl ?d\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "have \"(eucl_of_env [0..<DIM('a)] (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eucl_of_env [0..<DIM('a)]\n     (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n    x", "by (auto intro!: euclidean_eqI[where 'a='a] simp: eucl_of_env_def eucl_of_list_inner nth_append)"], ["proof (state)\nthis:\n  eucl_of_env [0..<DIM('a)]\n   (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>xa.\n       einterpret fas\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       einterpret\n        (FDERIV_floatariths fas [0..<DIM('a)]\n          (map Var [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]))\n        (list_updates\n          [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))\n  interpret_floatariths fas\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n  interpret_floatariths fas (list_of_eucl ?xa @ ramsch)\n  list_updates [DIM('a) + length ramsch..<length ramsch + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  list_of_eucl x @ ramsch @ list_of_eucl ?d\n  eucl_of_env [0..<DIM('a)]\n   (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  x", "show ?thesis"], ["proof (prove)\nusing this:\n  ((\\<lambda>xa.\n       einterpret fas\n        (list_updates [0..<DIM('a)] (list_of_eucl xa)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))) has_derivative\n   (\\<lambda>d.\n       einterpret\n        (FDERIV_floatariths fas [0..<DIM('a)]\n          (map Var [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]))\n        (list_updates\n          [length ramsch + DIM('a)..<length ramsch + 2 * DIM('a)]\n          (list_of_eucl d)\n          (list_of_eucl x @ ramsch @ replicate DIM('a) 0))))\n   (at (eucl_of_env [0..<DIM('a)]\n         (list_of_eucl x @ ramsch @ replicate DIM('a) 0)))\n  interpret_floatariths fas\n   (list_updates [0..<DIM('a)] (list_of_eucl ?xa)\n     (list_of_eucl x @ ramsch @ replicate DIM('a) 0)) =\n  interpret_floatariths fas (list_of_eucl ?xa @ ramsch)\n  list_updates [DIM('a) + length ramsch..<length ramsch + 2 * DIM('a)]\n   (list_of_eucl ?d) (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  list_of_eucl x @ ramsch @ list_of_eucl ?d\n  eucl_of_env [0..<DIM('a)]\n   (list_of_eucl x @ ramsch @ replicate DIM('a) 0) =\n  x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var\n              [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n          (list_of_eucl x @ ramsch @ list_of_eucl d)))\n     (at x)", "by (simp add: add.commute)"], ["proof (state)\nthis:\n  ((\\<lambda>x. einterpret fas (list_of_eucl x @ ramsch)) has_derivative\n   (\\<lambda>d.\n       einterpret\n        (FDERIV_floatariths fas [0..<DIM('a)]\n          (map Var [DIM('a) + length ramsch..<2 * DIM('a) + length ramsch]))\n        (list_of_eucl x @ ramsch @ list_of_eucl d)))\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interpret_floatarith_FDERIV_floatariths:\n  assumes iD: \"isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)\"\n  assumes m: \"max_Var_floatariths fas \\<le> DIM('a)\"\n  assumes [simp]: \"length fas = DIM('a)\"\n  shows \"((\\<lambda>x::'a::executable_euclidean_space.\n    eucl_of_list\n      (interpret_floatariths fas (list_of_eucl x))::'a) has_derivative\n        (\\<lambda>d. eucl_of_list (interpret_floatariths\n         (FDERIV_floatariths fas [0..<DIM('a)] (map Var [DIM('a)..<2*DIM('a)]))\n         (list_of_eucl x @ list_of_eucl d)))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var [DIM('a)..<2 * DIM('a)]))\n          (list_of_eucl x @ list_of_eucl d)))\n     (at x)", "using interpret_floatarith_FDERIV_floatariths_append[where ramsch=Nil, simplified, OF assms]"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. einterpret fas (list_of_eucl x)) has_derivative\n   (\\<lambda>d.\n       einterpret\n        (FDERIV_floatariths fas [0..<DIM('a)]\n          (map Var [DIM('a)..<2 * DIM('a)]))\n        (list_of_eucl x @ list_of_eucl d)))\n   (at x)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. einterpret fas (list_of_eucl x)) has_derivative\n     (\\<lambda>d.\n         einterpret\n          (FDERIV_floatariths fas [0..<DIM('a)]\n            (map Var [DIM('a)..<2 * DIM('a)]))\n          (list_of_eucl x @ list_of_eucl d)))\n     (at x)", "by simp"], ["", "lemma continuous_on_min[continuous_intros]:\n  fixes f g :: \"'a::topological_space \\<Rightarrow> 'b::linorder_topology\"\n  shows \"continuous_on A f \\<Longrightarrow> continuous_on A g \\<Longrightarrow> continuous_on A (\\<lambda>x. min (f x) (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous_on A f; continuous_on A g\\<rbrakk>\n    \\<Longrightarrow> continuous_on A (\\<lambda>x. min (f x) (g x))", "by (auto simp: continuous_on_def intro!: tendsto_min)"], ["", "lemmas [continuous_intros] = continuous_on_max"], ["", "lemma continuous_on_if_const[continuous_intros]:\n  \"continuous_on s f \\<Longrightarrow> continuous_on s g \\<Longrightarrow> continuous_on s (\\<lambda>x. if p then f x else g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous_on s f; continuous_on s g\\<rbrakk>\n    \\<Longrightarrow> continuous_on s (\\<lambda>x. if p then f x else g x)", "by (cases p) auto"], ["", "lemma continuous_on_floatarith:\n  assumes \"continuous_on_floatarith fa\" \"length xs = DIM('a)\" \"distinct xs\"\n  shows \"continuous_on UNIV (\\<lambda>x. interpret_floatarith fa (list_updates xs (list_of_eucl (x::'a::executable_euclidean_space)) vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         interpret_floatarith fa (list_updates xs (list_of_eucl x) vs))", "using assms"], ["proof (prove)\nusing this:\n  continuous_on_floatarith fa\n  length xs = DIM('a)\n  distinct xs\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         interpret_floatarith fa (list_updates xs (list_of_eucl x) vs))", "by (induction fa)\n    (auto intro!: continuous_intros split: if_splits simp: list_updates_nth list_of_eucl_nth_if)"], ["", "fun open_form :: \"form \\<Rightarrow> bool\" where\n\"open_form (Bound x a b f)  = False\" |\n\"open_form (Assign x a f)   = False\" |\n\"open_form (Less a b) \\<longleftrightarrow> continuous_on_floatarith a \\<and> continuous_on_floatarith b\" |\n\"open_form (LessEqual a b)  = False\" |\n\"open_form (AtLeastAtMost x a b) = False\" |\n\"open_form (Conj f g) \\<longleftrightarrow> open_form f \\<and> open_form g\" |\n\"open_form (Disj f g) \\<longleftrightarrow> open_form f \\<and> open_form g\""], ["", "lemma open_form:\n  assumes \"open_form f\" \"length xs = DIM('a::executable_euclidean_space)\" \"distinct xs\"\n  shows \"open (Collect (\\<lambda>x::'a. interpret_form f (list_updates xs (list_of_eucl x) vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open {x. interpret_form f (list_updates xs (list_of_eucl x) vs)}", "using assms"], ["proof (prove)\nusing this:\n  open_form f\n  length xs = DIM('a)\n  distinct xs\n\ngoal (1 subgoal):\n 1. open {x. interpret_form f (list_updates xs (list_of_eucl x) vs)}", "by (induction f) (auto intro!: open_Collect_less continuous_on_floatarith open_Collect_conj open_Collect_disj)"], ["", "primrec isnFDERIV where\n  \"isnFDERIV N fas xs ds vs 0 = True\"\n| \"isnFDERIV N fas xs ds vs (Suc n) \\<longleftrightarrow>\n    isFDERIV N xs (FDERIV_n_floatariths fas xs (map Var ds) n) vs \\<and>\n    isnFDERIV N fas xs ds vs n\""], ["", "lemma one_add_square_eq_0: \"1 + (x)\\<^sup>2 \\<noteq> (0::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + x\\<^sup>2 \\<noteq> 0", "by (sos \"((R<1 + (([~1] * A=0) + (R<1 * (R<1 * [x]^2)))))\")"], ["", "lemma isDERIV_fold_const_fa[intro]:\n  assumes \"isDERIV x fa vs\"\n  shows \"isDERIV x (fold_const_fa fa) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa fa) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x fa vs\n\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa fa) vs", "apply (induction fa)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Add fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Add fa1 fa2)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Minus fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Minus fa)) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Mult fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Mult fa1 fa2)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Inverse fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Inverse fa)) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Cos fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Cos fa)) vs\n 6. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Arctan fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa)) vs\n 7. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 10. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\nA total of 18 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa1_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa1_) vs;\n     isDERIV x fa2_ vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2_) vs;\n     isDERIV x (Add fa1_ fa2_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Add fa1_ fa2_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits option.splits)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Minus fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Minus fa)) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Mult fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Mult fa1 fa2)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Inverse fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Inverse fa)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Cos fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Cos fa)) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Arctan fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa)) vs\n 6. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 9. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 10. \\<And>fa.\n        \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                 isDERIV x (fold_const_fa fa) vs;\n         isDERIV x (Sqrt fa) vs\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\nA total of 17 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Minus fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Minus fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Mult fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Mult fa1 fa2)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Inverse fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Inverse fa)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Cos fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Cos fa)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Arctan fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa)) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 8. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 9. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 10. \\<And>fa.\n        \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                 isDERIV x (fold_const_fa fa) vs;\n         isDERIV x (Exp fa) vs\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\nA total of 16 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa1_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa1_) vs;\n     isDERIV x fa2_ vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2_) vs;\n     isDERIV x (Mult fa1_ fa2_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Mult fa1_ fa2_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits option.splits)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Inverse fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Inverse fa)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Cos fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Cos fa)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Arctan fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 7. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 8. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 9. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                 isDERIV x (fold_const_fa fa1) vs;\n         isDERIV x fa2 vs \\<Longrightarrow>\n         isDERIV x (fold_const_fa fa2) vs;\n         isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\nA total of 15 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Inverse fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Inverse fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Cos fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Cos fa)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Arctan fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 6. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 7. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 8. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 10. \\<And>fa.\n        \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                 isDERIV x (fold_const_fa fa) vs;\n         isDERIV x (Ln fa) vs\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\nA total of 14 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Cos fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Cos fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Arctan fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 5. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 6. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 7. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 9. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 10. \\<And>fa x2a.\n        \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                 isDERIV x (fold_const_fa fa) vs;\n         isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\nA total of 13 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Arctan fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Arctan fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Abs fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa)) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 4. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 6. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 8. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 9. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 10. \\<And>fa.\n        \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                 isDERIV x (fold_const_fa fa) vs;\n         isDERIV x (Floor fa) vs\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\nA total of 12 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Abs fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Abs fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Max fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1 fa2)) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 3. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 7. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 8. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 9. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 10. \\<And>xa.\n        isDERIV x (Var xa) vs \\<Longrightarrow>\n        isDERIV x (fold_const_fa (Var xa)) vs\nA total of 11 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa1_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa1_) vs;\n     isDERIV x fa2_ vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2_) vs;\n     isDERIV x (Max fa1_ fa2_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Max fa1_ fa2_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Min fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1 fa2)) vs\n 2. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 6. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 7. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 8. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 9. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 10. \\<And>xa.\n        isDERIV x (Num xa) vs \\<Longrightarrow>\n        isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa1_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa1_) vs;\n     isDERIV x fa2_ vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2_) vs;\n     isDERIV x (Min fa1_ fa2_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Min fa1_ fa2_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (9 subgoals):\n 1. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 6. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 7. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 8. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 9. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x Pi vs \\<Longrightarrow> isDERIV x (fold_const_fa Pi) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Sqrt fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 5. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 6. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 7. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 8. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Sqrt fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Sqrt fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Exp fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa)) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 4. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 5. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 6. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 7. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Exp fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Exp fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>isDERIV x fa1 vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa1) vs;\n        isDERIV x fa2 vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2) vs;\n        isDERIV x (Powr fa1 fa2) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1 fa2)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 3. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 4. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 5. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 6. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa1_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa1_) vs;\n     isDERIV x fa2_ vs \\<Longrightarrow> isDERIV x (fold_const_fa fa2_) vs;\n     isDERIV x (Powr fa1_ fa2_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Powr fa1_ fa2_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Ln fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa)) vs\n 2. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 3. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 4. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 5. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Ln fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Ln fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>fa x2a.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e x2a)) vs\n 2. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 3. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 4. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal for fa n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa) vs;\n     isDERIV x (fa ^\\<^sub>e n) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (fa ^\\<^sub>e n)) vs", "by (cases n) (auto simp: fold_const_fa.simps split: floatarith.splits nat.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>isDERIV x fa vs \\<Longrightarrow>\n                isDERIV x (fold_const_fa fa) vs;\n        isDERIV x (Floor fa) vs\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa)) vs\n 2. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 3. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x fa_ vs \\<Longrightarrow>\n             isDERIV x (fold_const_fa fa_) vs;\n     isDERIV x (Floor fa_) vs\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (fold_const_fa (Floor fa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits) (subst (asm) fold_const_fa[symmetric], force)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       isDERIV x (Var xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Var xa)) vs\n 2. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (Var xa_) vs \\<Longrightarrow>\n    isDERIV x (fold_const_fa (Var xa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       isDERIV x (Num xa) vs \\<Longrightarrow>\n       isDERIV x (fold_const_fa (Num xa)) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (Num xa_) vs \\<Longrightarrow>\n    isDERIV x (fold_const_fa (Num xa_)) vs", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma isDERIV_fold_const_fa_minus[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  shows \"isDERIV x (fold_const_fa (Minus fa)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Minus fa)) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x (fold_const_fa fa) vs\n\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Minus fa)) vs", "by (induction fa) (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["", "lemma isDERIV_fold_const_fa_plus[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  assumes \"isDERIV x (fold_const_fa fb) vs\"\n  shows \"isDERIV x (fold_const_fa (Add fa fb)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Add fa fb)) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x (fold_const_fa fa) vs\n  isDERIV x (fold_const_fa fb) vs\n\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Add fa fb)) vs", "by (induction fa)\n    (auto simp: fold_const_fa.simps\n      split: floatarith.splits option.splits)"], ["", "lemma isDERIV_fold_const_fa_mult[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  assumes \"isDERIV x (fold_const_fa fb) vs\"\n  shows \"isDERIV x (fold_const_fa (Mult fa fb)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Mult fa fb)) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x (fold_const_fa fa) vs\n  isDERIV x (fold_const_fa fb) vs\n\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Mult fa fb)) vs", "by (induction fa)\n    (auto simp: fold_const_fa.simps\n      split: floatarith.splits option.splits)"], ["", "lemma isDERIV_fold_const_fa_power[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  shows \"isDERIV x (fold_const_fa (fa ^\\<^sub>e n)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (fa ^\\<^sub>e n)) vs", "apply (cases n, simp add: fold_const_fa.simps split: floatarith.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       isDERIV x (fold_const_fa (fa ^\\<^sub>e n)) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x (fold_const_fa fa) vs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       isDERIV x (fold_const_fa (fa ^\\<^sub>e n)) vs", "by (induction fa)\n    (auto simp: fold_const_fa.simps split: floatarith.splits option.splits)"], ["", "lemma isDERIV_fold_const_fa_inverse[intro!]:\n  assumes \"isDERIV x (fold_const_fa fa) vs\"\n  assumes \"interpret_floatarith fa vs \\<noteq> 0\"\n  shows \"isDERIV x (fold_const_fa (Inverse fa)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Inverse fa)) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x (fold_const_fa fa) vs\n  interpret_floatarith fa vs \\<noteq> 0\n\ngoal (1 subgoal):\n 1. isDERIV x (fold_const_fa (Inverse fa)) vs", "by (simp add: fold_const_fa.simps)"], ["", "lemma add_square_ne_zero[simp]: \"(y::'a::linordered_idom) > 0 \\<Longrightarrow> y + x\\<^sup>2 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < y \\<Longrightarrow> y + x\\<^sup>2 \\<noteq> (0::'a)", "by auto (metis less_add_same_cancel2 power2_less_0)"], ["", "lemma isDERIV_FDERIV_floatarith:\n  assumes \"isDERIV x fa vs\" \"\\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs\"\n  assumes [simp]: \"length xs = length ds\"\n  shows \"isDERIV x (FDERIV_floatarith fa xs ds) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV x (FDERIV_floatarith fa xs ds) vs", "using assms"], ["proof (prove)\nusing this:\n  isDERIV x fa vs\n  ?i < length ds \\<Longrightarrow> isDERIV x (ds ! ?i) vs\n  length xs = length ds\n\ngoal (1 subgoal):\n 1. isDERIV x (FDERIV_floatarith fa xs ds) vs", "apply (induction fa)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Add fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Add fa1 fa2) xs ds)\n                          vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Minus fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Minus fa) xs ds) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Mult fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Mult fa1 fa2) xs ds)\n                          vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Inverse fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Inverse fa) xs ds) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Cos fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Cos fa) xs ds) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Arctan fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa) xs ds) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 10. \\<lbrakk>isDERIV x Pi vs;\n      \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n      length xs = length ds\\<rbrakk>\n     \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\nA total of 18 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa1_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1_ xs ds) vs;\n     \\<lbrakk>isDERIV x fa2_ vs;\n      \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n      length xs = length ds\\<rbrakk>\n     \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2_ xs ds) vs;\n     isDERIV x (Add fa1_ fa2_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Add fa1_ fa2_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Minus fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Minus fa) xs ds) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Mult fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Mult fa1 fa2) xs ds)\n                          vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Inverse fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Inverse fa) xs ds) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Cos fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Cos fa) xs ds) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Arctan fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa) xs ds) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 9. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                  \\<And>i.\n                     i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                  length xs = length ds\\<rbrakk>\n                 \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds)\n                                    vs;\n         isDERIV x (Sqrt fa) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\nA total of 17 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Minus fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Minus fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Mult fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Mult fa1 fa2) xs ds)\n                          vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Inverse fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Inverse fa) xs ds) vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Cos fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Cos fa) xs ds) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Arctan fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa) xs ds) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 8. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                  \\<And>i.\n                     i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                  length xs = length ds\\<rbrakk>\n                 \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds)\n                                    vs;\n         isDERIV x (Exp fa) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\nA total of 16 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa1_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1_ xs ds) vs;\n     \\<lbrakk>isDERIV x fa2_ vs;\n      \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n      length xs = length ds\\<rbrakk>\n     \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2_ xs ds) vs;\n     isDERIV x (Mult fa1_ fa2_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Mult fa1_ fa2_) xs ds)\n                       vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Inverse fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Inverse fa) xs ds) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Cos fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Cos fa) xs ds) vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Arctan fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa) xs ds) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 7. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                  \\<And>i.\n                     i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                  length xs = length ds\\<rbrakk>\n                 \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                    vs;\n         \\<lbrakk>isDERIV x fa2 vs;\n          \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n          length xs = length ds\\<rbrakk>\n         \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n         isDERIV x (Powr fa1 fa2) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                           vs\nA total of 15 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Inverse fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Inverse fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Cos fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Cos fa) xs ds) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Arctan fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa) xs ds) vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 6. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                  \\<And>i.\n                     i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                  length xs = length ds\\<rbrakk>\n                 \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds)\n                                    vs;\n         isDERIV x (Ln fa) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\nA total of 14 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Cos fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Cos fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Arctan fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa) xs ds) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 5. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 10. \\<And>fa x2a.\n        \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                  \\<And>i.\n                     i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                  length xs = length ds\\<rbrakk>\n                 \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds)\n                                    vs;\n         isDERIV x (fa ^\\<^sub>e x2a) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x\n                           (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\nA total of 13 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Arctan fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Arctan fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Abs fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa) xs ds) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 4. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 9. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 10. \\<And>fa.\n        \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                  \\<And>i.\n                     i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                  length xs = length ds\\<rbrakk>\n                 \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds)\n                                    vs;\n         isDERIV x (Floor fa) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\nA total of 12 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Abs fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Abs fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Max fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1 fa2) xs ds)\n                          vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 3. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 8. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 9. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 10. \\<And>xa.\n        \\<lbrakk>isDERIV x (Var xa) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\nA total of 11 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa1_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1_ xs ds) vs;\n     \\<lbrakk>isDERIV x fa2_ vs;\n      \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n      length xs = length ds\\<rbrakk>\n     \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2_ xs ds) vs;\n     isDERIV x (Max fa1_ fa2_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Max fa1_ fa2_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Min fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1 fa2) xs ds)\n                          vs\n 2. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 5. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 7. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 8. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 9. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 10. \\<And>xa.\n        \\<lbrakk>isDERIV x (Num xa) vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa1_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1_ xs ds) vs;\n     \\<lbrakk>isDERIV x fa2_ vs;\n      \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n      length xs = length ds\\<rbrakk>\n     \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2_ xs ds) vs;\n     isDERIV x (Min fa1_ fa2_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Min fa1_ fa2_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 4. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 6. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 8. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 9. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x Pi vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith Pi xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Sqrt fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa) xs ds) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 5. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 7. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 8. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Sqrt fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Sqrt fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Exp fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa) xs ds) vs\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 4. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 6. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 7. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Exp fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Exp fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa1 vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1 xs ds)\n                                   vs;\n        \\<lbrakk>isDERIV x fa2 vs;\n         \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n         length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2 xs ds) vs;\n        isDERIV x (Powr fa1 fa2) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1 fa2) xs ds)\n                          vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 3. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 5. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 6. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa1_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa1_ xs ds) vs;\n     \\<lbrakk>isDERIV x fa2_ vs;\n      \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n      length xs = length ds\\<rbrakk>\n     \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa2_ xs ds) vs;\n     isDERIV x (Powr fa1_ fa2_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Powr fa1_ fa2_) xs ds)\n                       vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Ln fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa) xs ds) vs\n 2. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 3. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 4. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 5. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Ln fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Ln fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>fa x2a.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (fa ^\\<^sub>e x2a) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x\n                          (FDERIV_floatarith (fa ^\\<^sub>e x2a) xs ds) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 3. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 4. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal for fa n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n     isDERIV x (fa ^\\<^sub>e n) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (fa ^\\<^sub>e n) xs ds)\n                       vs", "by (cases n) (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>isDERIV x fa vs;\n                 \\<And>i.\n                    i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n                 length xs = length ds\\<rbrakk>\n                \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa xs ds) vs;\n        isDERIV x (Floor fa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa) xs ds) vs\n 2. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 3. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>isDERIV x fa_ vs;\n              \\<And>i.\n                 i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n              length xs = length ds\\<rbrakk>\n             \\<Longrightarrow> isDERIV x (FDERIV_floatarith fa_ xs ds) vs;\n     isDERIV x (Floor fa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Floor fa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>isDERIV x (Var xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa) xs ds) vs\n 2. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x (Var xa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Var xa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>isDERIV x (Num xa) vs;\n        \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n        length xs = length ds\\<rbrakk>\n       \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa) xs ds) vs", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isDERIV x (Num xa_) vs;\n     \\<And>i. i < length ds \\<Longrightarrow> isDERIV x (ds ! i) vs;\n     length xs = length ds\\<rbrakk>\n    \\<Longrightarrow> isDERIV x (FDERIV_floatarith (Num xa_) xs ds) vs", "by (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma isDERIV_FDERIV_floatariths:\n  assumes \"isFDERIV N xs fas vs\" \"isFDERIV N xs ds vs\" and [simp]: \"length fas = length ds\"\n  shows \"isFDERIV N xs (FDERIV_floatariths fas xs ds) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV N xs (FDERIV_floatariths fas xs ds) vs", "using assms"], ["proof (prove)\nusing this:\n  isFDERIV N xs fas vs\n  isFDERIV N xs ds vs\n  length fas = length ds\n\ngoal (1 subgoal):\n 1. isFDERIV N xs (FDERIV_floatariths fas xs ds) vs", "by (auto simp: isFDERIV_def FDERIV_floatariths_def intro!: isDERIV_FDERIV_floatarith)"], ["", "lemma isFDERIV_imp_isFDERIV_FDERIV_n:\n  assumes \"length fas = length ds\"\n  shows \"isFDERIV N xs fas vs \\<Longrightarrow> isFDERIV N xs ds vs \\<Longrightarrow>\n    isFDERIV N xs (FDERIV_n_floatariths fas xs ds n) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isFDERIV N xs fas vs; isFDERIV N xs ds vs\\<rbrakk>\n    \\<Longrightarrow> isFDERIV N xs (FDERIV_n_floatariths fas xs ds n) vs", "using assms"], ["proof (prove)\nusing this:\n  length fas = length ds\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isFDERIV N xs fas vs; isFDERIV N xs ds vs\\<rbrakk>\n    \\<Longrightarrow> isFDERIV N xs (FDERIV_n_floatariths fas xs ds n) vs", "by (induction n) (auto intro!: isDERIV_FDERIV_floatariths)"], ["", "lemma isFDERIV_map_Var:\n  assumes [simp]: \"length ds = N\" \"length xs = N\"\n  shows \"isFDERIV N xs (map Var ds) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV N xs (map Var ds) vs", "by (auto simp: isFDERIV_def)"], ["", "theorem isFDERIV_imp_isnFDERIV:\n  assumes \"isFDERIV N xs fas vs\" and [simp]: \"length fas = N\" \"length xs = N\" \"length ds = N\"\n  shows \"isnFDERIV N fas xs ds vs n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isnFDERIV N fas xs ds vs n", "using assms"], ["proof (prove)\nusing this:\n  isFDERIV N xs fas vs\n  length fas = N\n  length xs = N\n  length ds = N\n\ngoal (1 subgoal):\n 1. isnFDERIV N fas xs ds vs n", "by (induction n) (auto intro!: isFDERIV_imp_isFDERIV_FDERIV_n isFDERIV_map_Var)"], ["", "lemma eventually_isnFDERIV:\n  assumes iD: \"isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2*DIM('a)] (list_of_eucl x @ list_of_eucl (d::'a)) n\"\n  assumes m: \"max_Var_floatariths fas \\<le> 2 * DIM('a::executable_euclidean_space)\"\n  shows \"\\<forall>\\<^sub>F (x::'a) in at x. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2*DIM('a)] (list_of_eucl x @ list_of_eucl d) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) n", "using iD"], ["proof (prove)\nusing this:\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) n\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n     (list_of_eucl x @ list_of_eucl d) 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) 0\n 2. \\<And>n.\n       \\<lbrakk>isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n                 (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n                \\<forall>\\<^sub>F x in at x.\n                   isnFDERIV DIM('a) fas [0..<DIM('a)]\n                    [DIM('a)..<2 * DIM('a)]\n                    (list_of_eucl x @ list_of_eucl d) n;\n        isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n         (list_of_eucl x @ list_of_eucl d) (Suc n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                            isnFDERIV DIM('a) fas [0..<DIM('a)]\n                             [DIM('a)..<2 * DIM('a)]\n                             (list_of_eucl x @ list_of_eucl d) (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) n\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) (Suc n)\n\ngoal (2 subgoals):\n 1. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n     (list_of_eucl x @ list_of_eucl d) 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) 0\n 2. \\<And>n.\n       \\<lbrakk>isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n                 (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n                \\<forall>\\<^sub>F x in at x.\n                   isnFDERIV DIM('a) fas [0..<DIM('a)]\n                    [DIM('a)..<2 * DIM('a)]\n                    (list_of_eucl x @ list_of_eucl d) n;\n        isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n         (list_of_eucl x @ list_of_eucl d) (Suc n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                            isnFDERIV DIM('a) fas [0..<DIM('a)]\n                             [DIM('a)..<2 * DIM('a)]\n                             (list_of_eucl x @ list_of_eucl d) (Suc n)", "then"], ["proof (chain)\npicking this:\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) n\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) (Suc n)", "have 1: \"\\<forall>\\<^sub>F x in at x. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)] (list_of_eucl x @ list_of_eucl d) n\"\n    and 2: \"isFDERIV DIM('a) [0..<DIM('a)] (FDERIV_n_floatariths fas [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)]) n)\n      (list_of_eucl x @ list_of_eucl d)\""], ["proof (prove)\nusing this:\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) n\n  isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n   (list_of_eucl x @ list_of_eucl d) (Suc n)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) n &&&\n    isFDERIV DIM('a) [0..<DIM('a)]\n     (FDERIV_n_floatariths fas [0..<DIM('a)]\n       (map Var [DIM('a)..<2 * DIM('a)]) n)\n     (list_of_eucl x @ list_of_eucl d)", "by simp_all"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) n\n  isFDERIV DIM('a) [0..<DIM('a)]\n   (FDERIV_n_floatariths fas [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)])\n     n)\n   (list_of_eucl x @ list_of_eucl d)\n\ngoal (2 subgoals):\n 1. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n     (list_of_eucl x @ list_of_eucl d) 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) 0\n 2. \\<And>n.\n       \\<lbrakk>isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n                 (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n                \\<forall>\\<^sub>F x in at x.\n                   isnFDERIV DIM('a) fas [0..<DIM('a)]\n                    [DIM('a)..<2 * DIM('a)]\n                    (list_of_eucl x @ list_of_eucl d) n;\n        isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n         (list_of_eucl x @ list_of_eucl d) (Suc n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                            isnFDERIV DIM('a) fas [0..<DIM('a)]\n                             [DIM('a)..<2 * DIM('a)]\n                             (list_of_eucl x @ list_of_eucl d) (Suc n)", "have \"max_Var_floatariths (FDERIV_n_floatariths fas [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)]) n) \\<le>\n      DIM('a) + length (list_of_eucl d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatariths\n     (FDERIV_n_floatariths fas [0..<DIM('a)]\n       (map Var [DIM('a)..<2 * DIM('a)]) n)\n    \\<le> DIM('a) + length (list_of_eucl d)", "by (auto intro!: max_Var_floatarith_FDERIV_n_floatariths[THEN order_trans] m[THEN order_trans])"], ["proof (state)\nthis:\n  max_Var_floatariths\n   (FDERIV_n_floatariths fas [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)])\n     n)\n  \\<le> DIM('a) + length (list_of_eucl d)\n\ngoal (2 subgoals):\n 1. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n     (list_of_eucl x @ list_of_eucl d) 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) 0\n 2. \\<And>n.\n       \\<lbrakk>isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n                 (list_of_eucl x @ list_of_eucl d) n \\<Longrightarrow>\n                \\<forall>\\<^sub>F x in at x.\n                   isnFDERIV DIM('a) fas [0..<DIM('a)]\n                    [DIM('a)..<2 * DIM('a)]\n                    (list_of_eucl x @ list_of_eucl d) n;\n        isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n         (list_of_eucl x @ list_of_eucl d) (Suc n)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                            isnFDERIV DIM('a) fas [0..<DIM('a)]\n                             [DIM('a)..<2 * DIM('a)]\n                             (list_of_eucl x @ list_of_eucl d) (Suc n)", "from eventually_isFDERIV[OF 2 this] 1"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in at x.\n     isFDERIV DIM('a) [0..<DIM('a)]\n      (FDERIV_n_floatariths fas [0..<DIM('a)]\n        (map Var [DIM('a)..<2 * DIM('a)]) n)\n      (list_of_eucl x @ list_of_eucl d)\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) n", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at x.\n     isFDERIV DIM('a) [0..<DIM('a)]\n      (FDERIV_n_floatariths fas [0..<DIM('a)]\n        (map Var [DIM('a)..<2 * DIM('a)]) n)\n      (list_of_eucl x @ list_of_eucl d)\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) n\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) (Suc n)", "by eventually_elim simp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n      (list_of_eucl x @ list_of_eucl d) (Suc n)\n\ngoal (1 subgoal):\n 1. isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n     (list_of_eucl x @ list_of_eucl d) 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at x.\n       isnFDERIV DIM('a) fas [0..<DIM('a)] [DIM('a)..<2 * DIM('a)]\n        (list_of_eucl x @ list_of_eucl d) 0", "qed simp"], ["", "lemma isFDERIV_open:\n  assumes \"max_Var_floatariths fas \\<le> DIM('a)\"\n  shows \"open {x::'a. isFDERIV DIM('a::executable_euclidean_space)  [0..<DIM('a)] fas (list_of_eucl x)}\"\n    (is \"open (Collect ?s)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. open {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)}", "proof (safe intro!: topological_space_class.openI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x) \\<Longrightarrow>\n       \\<exists>T.\n          open T \\<and>\n          x \\<in> T \\<and>\n          T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas\n                             (list_of_eucl x)}", "fix x::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x) \\<Longrightarrow>\n       \\<exists>T.\n          open T \\<and>\n          x \\<in> T \\<and>\n          T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas\n                             (list_of_eucl x)}", "assume x: \"?s x\""], ["proof (state)\nthis:\n  isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x) \\<Longrightarrow>\n       \\<exists>T.\n          open T \\<and>\n          x \\<in> T \\<and>\n          T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas\n                             (list_of_eucl x)}", "with eventually_isFDERIV[where 'a='a, of fas x Nil]"], ["proof (chain)\npicking this:\n  \\<lbrakk>isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ []);\n   max_Var_floatariths fas \\<le> DIM('a) + length []\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                       isFDERIV DIM('a) [0..<DIM('a)] fas\n                        (list_of_eucl x @ [])\n  isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)", "have \"\\<forall>\\<^sub>F x in at x. x \\<in> Collect ?s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x @ []);\n   max_Var_floatariths fas \\<le> DIM('a) + length []\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in at x.\n                       isFDERIV DIM('a) [0..<DIM('a)] fas\n                        (list_of_eucl x @ [])\n  isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at x.\n       x \\<in> {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)}", "by (auto simp: assms)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at x.\n     x \\<in> {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x) \\<Longrightarrow>\n       \\<exists>T.\n          open T \\<and>\n          x \\<in> T \\<and>\n          T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas\n                             (list_of_eucl x)}", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in at x.\n     x \\<in> {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)}", "obtain S where \"open S\" \"x \\<in> S\"\n    \"(\\<forall>xa\\<in>S. xa \\<noteq> x \\<longrightarrow> ?s xa)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at x.\n     x \\<in> {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)}\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>open S; x \\<in> S;\n         \\<forall>xa\\<in>S.\n            xa \\<noteq> x \\<longrightarrow>\n            isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl xa)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding eventually_at_topological"], ["proof (prove)\nusing this:\n  \\<exists>S.\n     open S \\<and>\n     x \\<in> S \\<and>\n     (\\<forall>xa\\<in>S.\n         xa \\<noteq> x \\<longrightarrow>\n         xa \\<in> UNIV \\<longrightarrow>\n         xa \\<in> {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)})\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>open S; x \\<in> S;\n         \\<forall>xa\\<in>S.\n            xa \\<noteq> x \\<longrightarrow>\n            isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl xa)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  open S\n  x \\<in> S\n  \\<forall>xa\\<in>S.\n     xa \\<noteq> x \\<longrightarrow>\n     isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl xa)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x) \\<Longrightarrow>\n       \\<exists>T.\n          open T \\<and>\n          x \\<in> T \\<and>\n          T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas\n                             (list_of_eucl x)}", "with x"], ["proof (chain)\npicking this:\n  isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)\n  open S\n  x \\<in> S\n  \\<forall>xa\\<in>S.\n     xa \\<noteq> x \\<longrightarrow>\n     isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl xa)", "show \"\\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> Collect ?s\""], ["proof (prove)\nusing this:\n  isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)\n  open S\n  x \\<in> S\n  \\<forall>xa\\<in>S.\n     xa \\<noteq> x \\<longrightarrow>\n     isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl xa)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       open T \\<and>\n       x \\<in> T \\<and>\n       T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas\n                          (list_of_eucl x)}", "by (auto intro!: exI[where x=S])"], ["proof (state)\nthis:\n  \\<exists>T.\n     open T \\<and>\n     x \\<in> T \\<and>\n     T \\<subseteq> {x. isFDERIV DIM('a) [0..<DIM('a)] fas (list_of_eucl x)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interpret_floatarith_FDERIV_floatarith_eq:\n  assumes [simp]: \"length xs = DIM('a::executable_euclidean_space)\" \"length ds = DIM('a)\"\n  shows \"interpret_floatarith (FDERIV_floatarith fa xs ds) vs =\n    einterpret (map (\\<lambda>x. DERIV_floatarith x fa) xs) vs \\<bullet> (einterpret ds vs::'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (FDERIV_floatarith fa xs ds) vs =\n    einterpret (map (\\<lambda>x. DERIV_floatarith x fa) xs) vs \\<bullet>\n    einterpret ds vs", "by (auto simp: FDERIV_floatarith_def interpret_floatarith_inner_floatariths)"], ["", "lemma\n  interpret_floatariths_FDERIV_floatariths_cong:\n  assumes [simp]: \"length d1s = DIM('a::executable_euclidean_space)\" \"length d2s = DIM('a)\" \"length fas1 = length fas2\"\n  assumes fresh1: \"freshs_floatariths fas1 d1s\"\n  assumes fresh2: \"freshs_floatariths fas2 d2s\"\n  assumes eq1: \"\\<And>i. i < length fas1 \\<Longrightarrow> interpret_floatariths (map (\\<lambda>x. DERIV_floatarith x (fas1 ! i)) [0..<DIM('a)]) xs1 =\n    interpret_floatariths (map (\\<lambda>x. DERIV_floatarith x (fas2 ! i)) [0..<DIM('a)]) xs2\"\n  assumes eq2: \"\\<And>i. i < DIM('a) \\<Longrightarrow> xs1 ! (d1s ! i) = xs2 ! (d2s ! i)\"\n  shows \"interpret_floatariths (FDERIV_floatariths fas1 [0..<DIM('a)] (map floatarith.Var d1s)) xs1 =\n    interpret_floatariths (FDERIV_floatariths fas2 [0..<DIM('a)] (map floatarith.Var d2s)) xs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths\n     (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n    interpret_floatariths\n     (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interpret_floatariths\n     (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n    interpret_floatariths\n     (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2", "note eq1"], ["proof (state)\nthis:\n  ?i < length fas1 \\<Longrightarrow>\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas1 ! ?i)) [0..<DIM('a)]) xs1 =\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas2 ! ?i)) [0..<DIM('a)]) xs2\n\ngoal (1 subgoal):\n 1. interpret_floatariths\n     (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n    interpret_floatariths\n     (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2", "moreover"], ["proof (state)\nthis:\n  ?i < length fas1 \\<Longrightarrow>\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas1 ! ?i)) [0..<DIM('a)]) xs1 =\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas2 ! ?i)) [0..<DIM('a)]) xs2\n\ngoal (1 subgoal):\n 1. interpret_floatariths\n     (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n    interpret_floatariths\n     (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2", "have \"interpret_floatariths (map Var d1s) (xs1) =\n    interpret_floatariths (map Var d2s) (xs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths (map Var d1s) xs1 =\n    interpret_floatariths (map Var d2s) xs2", "by (auto intro!: nth_equalityI eq2)"], ["proof (state)\nthis:\n  interpret_floatariths (map Var d1s) xs1 =\n  interpret_floatariths (map Var d2s) xs2\n\ngoal (1 subgoal):\n 1. interpret_floatariths\n     (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n    interpret_floatariths\n     (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2", "ultimately"], ["proof (chain)\npicking this:\n  ?i < length fas1 \\<Longrightarrow>\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas1 ! ?i)) [0..<DIM('a)]) xs1 =\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas2 ! ?i)) [0..<DIM('a)]) xs2\n  interpret_floatariths (map Var d1s) xs1 =\n  interpret_floatariths (map Var d2s) xs2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i < length fas1 \\<Longrightarrow>\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas1 ! ?i)) [0..<DIM('a)]) xs1 =\n  interpret_floatariths\n   (map (\\<lambda>x. DERIV_floatarith x (fas2 ! ?i)) [0..<DIM('a)]) xs2\n  interpret_floatariths (map Var d1s) xs1 =\n  interpret_floatariths (map Var d2s) xs2\n\ngoal (1 subgoal):\n 1. interpret_floatariths\n     (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n    interpret_floatariths\n     (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2", "by (auto intro!: nth_equalityI simp: interpret_floatarith_FDERIV_floatarith_eq)"], ["proof (state)\nthis:\n  interpret_floatariths\n   (FDERIV_floatariths fas1 [0..<DIM('a)] (map Var d1s)) xs1 =\n  interpret_floatariths\n   (FDERIV_floatariths fas2 [0..<DIM('a)] (map Var d2s)) xs2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subst_floatarith_Var_DERIV_floatarith:\n  assumes \"\\<And>x. x = n \\<longleftrightarrow> s x = n\"\n  shows \"subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n  DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n    DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)", "using assms"], ["proof (prove)\nusing this:\n  (?x = n) = (s ?x = n)\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n    DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)", "proof (induction fa)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Add fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Add fa1 fa2))\n 2. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Minus fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Minus fa))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Mult fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2))\n 4. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Inverse fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Inverse fa))\n 5. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Cos fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Cos fa))\n 6. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Arctan fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Arctan fa))\n 7. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Abs fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Abs fa))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Max fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Min fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2))\n 10. (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n     subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n Pi) =\n     DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) Pi)\nA total of 18 subgoals...", "case (Power fa n)"], ["proof (state)\nthis:\n  (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n  subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n  DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)\n  (?x = n) = (s ?x = n)\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Add fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Add fa1 fa2))\n 2. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Minus fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Minus fa))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Mult fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2))\n 4. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Inverse fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Inverse fa))\n 5. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Cos fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Cos fa))\n 6. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Arctan fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Arctan fa))\n 7. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Abs fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Abs fa))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Max fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Min fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2))\n 10. (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n     subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n Pi) =\n     DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) Pi)\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n  subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n  DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)\n  (?x = n) = (s ?x = n)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n  subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa) =\n  DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa)\n  (?x = n) = (s ?x = n)\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x))\n     (DERIV_floatarith n (fa ^\\<^sub>e n)) =\n    DERIV_floatarith n\n     (subst_floatarith (\\<lambda>x. Var (s x)) (fa ^\\<^sub>e n))", "by (cases n) auto"], ["proof (state)\nthis:\n  subst_floatarith (\\<lambda>x. Var (s x))\n   (DERIV_floatarith n (fa ^\\<^sub>e n)) =\n  DERIV_floatarith n\n   (subst_floatarith (\\<lambda>x. Var (s x)) (fa ^\\<^sub>e n))\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Add fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Add fa1 fa2))\n 2. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Minus fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Minus fa))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Mult fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2))\n 4. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Inverse fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Inverse fa))\n 5. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Cos fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Cos fa))\n 6. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Arctan fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Arctan fa))\n 7. \\<And>fa.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Abs fa)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Abs fa))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Max fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>(\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (DERIV_floatarith n fa1) =\n                DERIV_floatarith n\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1);\n        (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n        subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n fa2) =\n        DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) fa2);\n        \\<And>x. (x = n) = (s x = n)\\<rbrakk>\n       \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x))\n                          (DERIV_floatarith n (Min fa1 fa2)) =\n                         DERIV_floatarith n\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2))\n 10. (\\<And>x. (x = n) = (s x = n)) \\<Longrightarrow>\n     subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith n Pi) =\n     DERIV_floatarith n (subst_floatarith (\\<lambda>x. Var (s x)) Pi)\nA total of 17 subgoals...", "qed force+"], ["", "lemma subst_floatarith_inner_floatariths[simp]:\n  assumes \"length fs = length gs\"\n  shows \"subst_floatarith s (inner_floatariths fs gs) =\n      inner_floatariths (map (subst_floatarith s) fs) (map (subst_floatarith s) gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith s (inner_floatariths fs gs) =\n    inner_floatariths (map (subst_floatarith s) fs)\n     (map (subst_floatarith s) gs)", "using assms"], ["proof (prove)\nusing this:\n  length fs = length gs\n\ngoal (1 subgoal):\n 1. subst_floatarith s (inner_floatariths fs gs) =\n    inner_floatariths (map (subst_floatarith s) fs)\n     (map (subst_floatarith s) gs)", "by (induction rule: list_induct2) auto"], ["", "fun_cases subst_floatarith_Num: \"subst_floatarith s fa = Num y\"\n  and subst_floatarith_Add: \"subst_floatarith s fa = Add x y\"\n  and subst_floatarith_Minus: \"subst_floatarith s fa = Minus y\""], ["", "lemma Num_eq_subst_Var[simp]: \"Num x = subst_floatarith (\\<lambda>x. Var (s x)) fa \\<longleftrightarrow> fa = Num x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Num x = subst_floatarith (\\<lambda>x. Var (s x)) fa) = (fa = Num x)", "by (cases fa) auto"], ["", "lemma Add_eq_subst_VarE:\n  assumes \"Add fa1 fa2 = subst_floatarith (\\<lambda>x. Var (s x)) fa\"\n  obtains a1 a2 where \"fa = Add a1 a2\" \"fa1 = subst_floatarith (\\<lambda>x. Var (s x)) a1\"\n      \"fa2 = subst_floatarith (\\<lambda>x. Var (s x)) a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 a2.\n        \\<lbrakk>fa = Add a1 a2;\n         fa1 = subst_floatarith (\\<lambda>x. Var (s x)) a1;\n         fa2 = subst_floatarith (\\<lambda>x. Var (s x)) a2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  Add fa1 fa2 = subst_floatarith (\\<lambda>x. Var (s x)) fa\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2.\n        \\<lbrakk>fa = Add a1 a2;\n         fa1 = subst_floatarith (\\<lambda>x. Var (s x)) a1;\n         fa2 = subst_floatarith (\\<lambda>x. Var (s x)) a2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases fa) auto"], ["", "lemma subst_floatarith_eq_self[simp]: \"subst_floatarith s f = f\" if \"max_Var_floatarith f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith s f = f", "using that"], ["proof (prove)\nusing this:\n  max_Var_floatarith f = 0\n\ngoal (1 subgoal):\n 1. subst_floatarith s f = f", "by (induction f) auto"], ["", "lemma fold_const_fa_unique: \"False\" if \"(\\<And>x. f = Num x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using that[of 0] that[of 1]"], ["proof (prove)\nusing this:\n  f = Num 0\n  f = Num 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["", "lemma zero_unique: False if \"(\\<And>x::float. x = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using that[of 0] that[of 1]"], ["proof (prove)\nusing this:\n  0 = 0\n  1 = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["", "lemma fold_const_fa_Mult_eq_NumE:\n  assumes \"fold_const_fa (Mult a b) = Num x\"\n  obtains y z where \"fold_const_fa a = Num y\" \"fold_const_fa b = Num z\" \"x = y * z\"\n  | y where \"fold_const_fa a = Num 0\" \"x = 0\"\n  | y where \"fold_const_fa b = Num 0\" \"x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>fold_const_fa a = Num y; fold_const_fa b = Num z;\n                 x = y * z\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<lbrakk>fold_const_fa a = Num 0; x = 0\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>fold_const_fa b = Num 0; x = 0\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  fold_const_fa (Mult a b) = Num x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>fold_const_fa a = Num y; fold_const_fa b = Num z;\n                 x = y * z\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<lbrakk>fold_const_fa a = Num 0; x = 0\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>fold_const_fa b = Num 0; x = 0\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by atomize_elim (auto simp: fold_const_fa.simps split!: option.splits if_splits\n      elim!: dest_Num_fa_Some dest_Num_fa_None)"], ["", "lemma fold_const_fa_Add_eq_NumE:\n  assumes \"fold_const_fa (Add a b) = Num x\"\n  obtains y z where \"fold_const_fa a = Num y\" \"fold_const_fa b = Num z\" \"x = y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        \\<lbrakk>fold_const_fa a = Num y; fold_const_fa b = Num z;\n         x = y + z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  fold_const_fa (Add a b) = Num x\n\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        \\<lbrakk>fold_const_fa a = Num y; fold_const_fa b = Num z;\n         x = y + z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (auto simp: fold_const_fa.simps split!: option.splits if_splits\n      elim!: dest_Num_fa_Some dest_Num_fa_None)"], ["", "lemma subst_floatarith_Var_fold_const_fa[symmetric]:\n  \"fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa)", "proof (induction fa)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Add fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Add fa1 fa2))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Mult fa1 fa2))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 6. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 7. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 10. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\nA total of 18 subgoals...", "case (Add fa1 fa2)"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Add fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Add fa1 fa2))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Mult fa1 fa2))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 6. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 7. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 10. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)", "show ?case"], ["proof (prove)\nusing this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)\n\ngoal (1 subgoal):\n 1. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Add fa1 fa2)) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Add fa1 fa2))", "apply (auto simp: fold_const_fa.simps\n        split!: floatarith.splits option.splits if_splits\n        elim!: dest_Num_fa_Some)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1);\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)) =\n     None;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 0;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 0\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 7. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 9. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>x2 x2a.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num x2;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num x2a;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n         Num x2a;\n         fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n         dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n        \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 0;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 0\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 6. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 8. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 0;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 0\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 5. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 7. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 0;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 0\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 4. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 6. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 3. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 5. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 2. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 4. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 3. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 0\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 2. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Add fa1 fa2)) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Add fa1 fa2))\n\ngoal (17 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Mult fa1 fa2))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 6. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 9. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Mult fa1 fa2))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 6. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 9. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\nA total of 17 subgoals...", "case (Mult fa1 fa2)"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)\n\ngoal (17 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Mult fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Mult fa1 fa2))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 6. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 9. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)", "show ?case"], ["proof (prove)\nusing this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)\n\ngoal (1 subgoal):\n 1. fold_const_fa\n     (subst_floatarith (\\<lambda>x. Var (s x)) (Mult fa1 fa2)) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Mult fa1 fa2))", "apply (auto simp: fold_const_fa.simps\n        split!: floatarith.splits option.splits if_splits\n        elim!: dest_Num_fa_Some)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1);\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)) =\n     None;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1);\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)) =\n     None;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 10. \\<And>x2.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num 1;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num x2;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n         Num 1;\n         dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n         x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 15 subgoals...", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1);\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1)) =\n     None;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 9. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>x2.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num 1;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num x2;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n         Num x2;\n         fold_const_fa fa1 = Num 1;\n         dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n        \\<Longrightarrow> fold_const_fa fa2 = Num x2\nA total of 14 subgoals...", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 8. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 10. \\<And>x2 x2a.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num x2;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num x2a;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n         Num x2;\n         x2 \\<noteq> 0; x2 \\<noteq> 1;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n         Num x2a;\n         dest_Num_fa (fold_const_fa fa1) = None;\n         dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 13 subgoals...", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 7. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 9. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>x2.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num x2;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num 1;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n         Num x2;\n         x2 \\<noteq> 0; x2 \\<noteq> 1;\n         dest_Num_fa (fold_const_fa fa1) = None;\n         fold_const_fa fa2 = Num 1\\<rbrakk>\n        \\<Longrightarrow> fold_const_fa fa1 = Num x2\nA total of 12 subgoals...", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 0;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 0;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 0\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 8. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 10. \\<And>x2 x2a.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num x2;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num x2a;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n         Num x2;\n         x2 \\<noteq> 0; x2 \\<noteq> 1;\n         dest_Num_fa (fold_const_fa fa1) = None;\n         fold_const_fa fa2 = Num x2a; x2a \\<noteq> 0;\n         x2a \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 11 subgoals...", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 0;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 0;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 7. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 9. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>x2 x2a.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 Num x2;\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         Num x2a;\n         subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n         Num x2a;\n         fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n         dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n        \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2);\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa\n      (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2)) =\n     None;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 6. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 8. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 5. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 7. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n             Num 1;\n     fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) = Num 1;\n     subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) = Num 1;\n     dest_Num_fa (fold_const_fa fa1) = None;\n     fold_const_fa fa2 = Num 1\\<rbrakk>\n    \\<Longrightarrow> fold_const_fa fa1 = Num 1\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 4. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 6. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 3. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 5. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num 1;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2;\n        fold_const_fa fa1 = Num 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa2 = Num x2\n 2. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 4. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 3. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num 1;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None;\n        fold_const_fa fa2 = Num 1\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa fa1 = Num x2\n 2. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1) =\n        Num x2;\n        x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa1) = None; fold_const_fa fa2 = Num x2a;\n        x2a \\<noteq> 0; x2a \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                Num x2;\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        Num x2a;\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2) =\n        Num x2a;\n        fold_const_fa fa1 = Num x2; x2 \\<noteq> 0; x2 \\<noteq> 1;\n        dest_Num_fa (fold_const_fa fa2) = None\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Num_eq_subst_Var dest_Num_fa.simps(1) option.simps(3))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Mult fa1 fa2)) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Mult fa1 fa2))\n\ngoal (16 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 8. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 9. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 8. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 9. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\nA total of 16 subgoals...", "case (Min)"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1_)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2_)\n\ngoal (16 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 7. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Min fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Min fa1 fa2))\n 8. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 9. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1_)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2_)", "show ?case"], ["proof (prove)\nusing this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1_)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2_)\n\ngoal (1 subgoal):\n 1. fold_const_fa\n     (subst_floatarith (\\<lambda>x. Var (s x)) (Min fa1_ fa2_)) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Min fa1_ fa2_))", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Min fa1_ fa2_)) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Min fa1_ fa2_))\n\ngoal (15 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 7. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 8. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 9. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 subst_floatarith (\\<lambda>x. Var (s x))\n                  (fold_const_fa fa1);\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         subst_floatarith (\\<lambda>x. Var (s x))\n          (fold_const_fa fa2)\\<rbrakk>\n        \\<Longrightarrow> fold_const_fa\n                           (subst_floatarith (\\<lambda>x. Var (s x))\n                             (Powr fa1 fa2)) =\n                          subst_floatarith (\\<lambda>x. Var (s x))\n                           (fold_const_fa (Powr fa1 fa2))\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 7. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 8. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 9. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 subst_floatarith (\\<lambda>x. Var (s x))\n                  (fold_const_fa fa1);\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         subst_floatarith (\\<lambda>x. Var (s x))\n          (fold_const_fa fa2)\\<rbrakk>\n        \\<Longrightarrow> fold_const_fa\n                           (subst_floatarith (\\<lambda>x. Var (s x))\n                             (Powr fa1 fa2)) =\n                          subst_floatarith (\\<lambda>x. Var (s x))\n                           (fold_const_fa (Powr fa1 fa2))\nA total of 15 subgoals...", "case (Max)"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1_)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2_)\n\ngoal (15 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Max fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Max fa1 fa2))\n 7. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 8. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 9. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\n 10. \\<And>fa1 fa2.\n        \\<lbrakk>fold_const_fa\n                  (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                 subst_floatarith (\\<lambda>x. Var (s x))\n                  (fold_const_fa fa1);\n         fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n         subst_floatarith (\\<lambda>x. Var (s x))\n          (fold_const_fa fa2)\\<rbrakk>\n        \\<Longrightarrow> fold_const_fa\n                           (subst_floatarith (\\<lambda>x. Var (s x))\n                             (Powr fa1 fa2)) =\n                          subst_floatarith (\\<lambda>x. Var (s x))\n                           (fold_const_fa (Powr fa1 fa2))\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1_)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2_)", "show ?case"], ["proof (prove)\nusing this:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa1_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa1_)\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2_) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa2_)\n\ngoal (1 subgoal):\n 1. fold_const_fa\n     (subst_floatarith (\\<lambda>x. Var (s x)) (Max fa1_ fa2_)) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Max fa1_ fa2_))", "by (auto simp: fold_const_fa.simps split: floatarith.splits)"], ["proof (state)\nthis:\n  fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Max fa1_ fa2_)) =\n  subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Max fa1_ fa2_))\n\ngoal (14 subgoals):\n 1. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Minus fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Minus fa))\n 2. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Inverse fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Inverse fa))\n 3. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Cos fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Cos fa))\n 4. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa\n        (subst_floatarith (\\<lambda>x. Var (s x)) (Arctan fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Arctan fa))\n 5. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Abs fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Abs fa))\n 6. fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) Pi) =\n    subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa Pi)\n 7. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Sqrt fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Sqrt fa))\n 8. \\<And>fa.\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (fold_const_fa fa) \\<Longrightarrow>\n       fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Exp fa)) =\n       subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Exp fa))\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>fold_const_fa\n                 (subst_floatarith (\\<lambda>x. Var (s x)) fa1) =\n                subst_floatarith (\\<lambda>x. Var (s x))\n                 (fold_const_fa fa1);\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa2) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa2)\\<rbrakk>\n       \\<Longrightarrow> fold_const_fa\n                          (subst_floatarith (\\<lambda>x. Var (s x))\n                            (Powr fa1 fa2)) =\n                         subst_floatarith (\\<lambda>x. Var (s x))\n                          (fold_const_fa (Powr fa1 fa2))\n 10. \\<And>fa.\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) =\n        subst_floatarith (\\<lambda>x. Var (s x))\n         (fold_const_fa fa) \\<Longrightarrow>\n        fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) (Ln fa)) =\n        subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa (Ln fa))\nA total of 14 subgoals...", "qed (auto simp: fold_const_fa.simps\n        split!: floatarith.splits option.splits if_splits\n        elim!: dest_Num_fa_Some)"], ["", "lemma subst_floatarith_eq_Num[simp]: \"(subst_floatarith (\\<lambda>x. Var (s x)) fa = Num x) \\<longleftrightarrow> fa = Num x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subst_floatarith (\\<lambda>x. Var (s x)) fa = Num x) = (fa = Num x)", "by (induction fa) (auto simp: )"], ["", "lemma fold_const_fa_subst_eq_Num0_iff[simp]:\n  \"fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) = Num x \\<longleftrightarrow> fold_const_fa fa = Num x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fold_const_fa (subst_floatarith (\\<lambda>x. Var (s x)) fa) = Num x) =\n    (fold_const_fa fa = Num x)", "unfolding subst_floatarith_Var_fold_const_fa[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (subst_floatarith (\\<lambda>x. Var (s x)) (fold_const_fa fa) = Num x) =\n    (fold_const_fa fa = Num x)", "by simp"], ["", "lemma subst_floatarith_Var_FDERIV_floatarith:\n  assumes len: \"length xs = DIM('a::executable_euclidean_space)\" and [simp]: \"length ds = DIM('a)\"\n  assumes eq: \"\\<And>x y. x \\<in> set xs \\<Longrightarrow> (y = x) = (s y = x)\"\n  shows \"subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    (FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs (map (subst_floatarith (\\<lambda>x. Var (s x))) ds))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)", "have [simp]: \"\\<And>x. x \\<in> set xs \\<Longrightarrow> subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith x fa1) =\n    (DERIV_floatarith x (subst_floatarith (\\<lambda>x. Var (s x)) fa1))\"\n    for fa1"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith x fa1) =\n       DERIV_floatarith x (subst_floatarith (\\<lambda>x. Var (s x)) fa1)", "by (rule subst_floatarith_Var_DERIV_floatarith) (rule eq)"], ["proof (state)\nthis:\n  ?x \\<in> set xs \\<Longrightarrow>\n  subst_floatarith (\\<lambda>x. Var (s x)) (DERIV_floatarith ?x ?fa1.1) =\n  DERIV_floatarith ?x (subst_floatarith (\\<lambda>x. Var (s x)) ?fa1.1)\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)", "have map_eq: \"(map (\\<lambda>xa. if xa = s x then Num 1 else Num 0) xs) =\n      (map (\\<lambda>xa. if xa = x then Num 1 else Num 0) xs)\"\n    for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>xa. if xa = s x then Num 1 else Num 0) xs =\n    map (\\<lambda>xa. if xa = x then Num 1 else Num 0) xs", "apply (subst map_eq_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xa\\<in>set xs.\n       (if xa = s x then Num 1 else Num 0) =\n       (if xa = x then Num 1 else Num 0)", "using eq[of x x] eq[of \"s x\"]"], ["proof (prove)\nusing this:\n  x \\<in> set xs \\<Longrightarrow> (x = x) = (s x = x)\n  s x \\<in> set xs \\<Longrightarrow> (?y = s x) = (s ?y = s x)\n\ngoal (1 subgoal):\n 1. \\<forall>xa\\<in>set xs.\n       (if xa = s x then Num 1 else Num 0) =\n       (if xa = x then Num 1 else Num 0)", "by (auto simp: )"], ["proof (state)\nthis:\n  map (\\<lambda>xa. if xa = s ?x then Num 1 else Num 0) xs =\n  map (\\<lambda>xa. if xa = ?x then Num 1 else Num 0) xs\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)", "using len"], ["proof (prove)\nusing this:\n  length xs = DIM('a)\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n    FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)", "by (induction fa)\n      (auto simp: FDERIV_floatarith_def o_def if_distrib\n        subst_floatarith_Var_fold_const_fa fold_const_fa.simps(18) map_eq\n        cong: map_cong if_cong)"], ["proof (state)\nthis:\n  subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_floatarith fa xs ds) =\n  FDERIV_floatarith (subst_floatarith (\\<lambda>x. Var (s x)) fa) xs\n   (map (subst_floatarith (\\<lambda>x. Var (s x))) ds)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subst_floatarith_Var_FDERIV_n_nth:\n  assumes len: \"length xs = DIM('a::executable_euclidean_space)\" and [simp]: \"length ds = DIM('a)\"\n  assumes eq: \"\\<And>x y. x \\<in> set xs \\<Longrightarrow> (y = x) = (s y = x)\"\n  assumes [simp]: \"i < length fas\"\n  shows \"subst_floatarith (\\<lambda>x. Var (s x)) (FDERIV_n_floatariths fas xs ds n ! i) =\n    (FDERIV_n_floatariths (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) n ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x))\n     (FDERIV_n_floatariths fas xs ds n ! i) =\n    FDERIV_n_floatariths\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) n !\n    i", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. subst_floatarith (\\<lambda>x. Var (s x))\n     (FDERIV_n_floatariths fas xs ds 0 ! i) =\n    FDERIV_n_floatariths\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) 0 !\n    i\n 2. \\<And>n.\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (FDERIV_n_floatariths fas xs ds n ! i) =\n       FDERIV_n_floatariths\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) n !\n       i \\<Longrightarrow>\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (FDERIV_n_floatariths fas xs ds (Suc n) ! i) =\n       FDERIV_n_floatariths\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) (Suc n) !\n       i", "case (Suc n)"], ["proof (state)\nthis:\n  subst_floatarith (\\<lambda>x. Var (s x))\n   (FDERIV_n_floatariths fas xs ds n ! i) =\n  FDERIV_n_floatariths (map (subst_floatarith (\\<lambda>x. Var (s x))) fas)\n   xs (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) n !\n  i\n\ngoal (2 subgoals):\n 1. subst_floatarith (\\<lambda>x. Var (s x))\n     (FDERIV_n_floatariths fas xs ds 0 ! i) =\n    FDERIV_n_floatariths\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) 0 !\n    i\n 2. \\<And>n.\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (FDERIV_n_floatariths fas xs ds n ! i) =\n       FDERIV_n_floatariths\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) n !\n       i \\<Longrightarrow>\n       subst_floatarith (\\<lambda>x. Var (s x))\n        (FDERIV_n_floatariths fas xs ds (Suc n) ! i) =\n       FDERIV_n_floatariths\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n        (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) (Suc n) !\n       i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x))\n     (FDERIV_n_floatariths fas xs ds (Suc n) ! i) =\n    FDERIV_n_floatariths\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) (Suc n) !\n    i", "by (simp add: subst_floatarith_Var_FDERIV_floatarith[OF len _ eq] Suc.IH[symmetric])"], ["proof (state)\nthis:\n  subst_floatarith (\\<lambda>x. Var (s x))\n   (FDERIV_n_floatariths fas xs ds (Suc n) ! i) =\n  FDERIV_n_floatariths (map (subst_floatarith (\\<lambda>x. Var (s x))) fas)\n   xs (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) (Suc n) !\n  i\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>x. Var (s x))\n     (FDERIV_n_floatariths fas xs ds 0 ! i) =\n    FDERIV_n_floatariths\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) fas) xs\n     (map (subst_floatarith (\\<lambda>x. Var (s x))) ds) 0 !\n    i", "qed simp"], ["", "lemma subst_floatarith_Var_max_Var_floatarith:\n  assumes \"\\<And>i. i < max_Var_floatarith fa \\<Longrightarrow> s i = i\"\n  shows \"subst_floatarith (\\<lambda>i. Var (s i)) fa = fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>i. Var (s i)) fa = fa", "using assms"], ["proof (prove)\nusing this:\n  ?i < max_Var_floatarith fa \\<Longrightarrow> s ?i = ?i\n\ngoal (1 subgoal):\n 1. subst_floatarith (\\<lambda>i. Var (s i)) fa = fa", "by (induction fa) auto"], ["", "lemma interpret_floatarith_subst_floatarith_idem:\n  assumes mv: \"max_Var_floatarith fa \\<le> length vs\"\n  assumes idem: \"\\<And>j. j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\"\n  shows \"interpret_floatarith (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs = interpret_floatarith fa vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs =\n    interpret_floatarith fa vs", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatarith fa \\<le> length vs\n  ?j < max_Var_floatarith fa \\<Longrightarrow> vs ! s ?j = vs ! ?j\n\ngoal (1 subgoal):\n 1. interpret_floatarith (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs =\n    interpret_floatarith fa vs", "by (induction fa) auto"], ["", "lemma isDERIV_subst_Var_floatarith:\n  assumes mv: \"max_Var_floatarith fa \\<le> length vs\"\n  assumes idem: \"\\<And>j. j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\"\n  assumes \"\\<And>j. s j = i \\<longleftrightarrow> j = i\"\n  shows \"isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs = isDERIV i fa vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs =\n    isDERIV i fa vs", "using mv idem"], ["proof (prove)\nusing this:\n  max_Var_floatarith fa \\<le> length vs\n  ?j < max_Var_floatarith fa \\<Longrightarrow> vs ! s ?j = vs ! ?j\n\ngoal (1 subgoal):\n 1. isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa) vs =\n    isDERIV i fa vs", "proof (induction fa)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Add fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Add fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Add fa1 fa2))\n                          vs =\n                         isDERIV i (Add fa1 fa2) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Minus fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Minus fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Minus fa))\n                          vs =\n                         isDERIV i (Minus fa) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Mult fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Mult fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Mult fa1 fa2))\n                          vs =\n                         isDERIV i (Mult fa1 fa2) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Inverse fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Inverse fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Inverse fa))\n                          vs =\n                         isDERIV i (Inverse fa) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Cos fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Cos fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Cos fa))\n                          vs =\n                         isDERIV i (Cos fa) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Arctan fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Arctan fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Arctan fa))\n                          vs =\n                         isDERIV i (Arctan fa) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Abs fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Abs fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Abs fa))\n                          vs =\n                         isDERIV i (Abs fa) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Max fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Max fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Max fa1 fa2))\n                          vs =\n                         isDERIV i (Max fa1 fa2) vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Min fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Min fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Min fa1 fa2))\n                          vs =\n                         isDERIV i (Min fa1 fa2) vs\n 10. \\<lbrakk>max_Var_floatarith Pi \\<le> length vs;\n      \\<And>j.\n         j < max_Var_floatarith Pi \\<Longrightarrow>\n         vs ! s j = vs ! j\\<rbrakk>\n     \\<Longrightarrow> isDERIV i\n                        (subst_floatarith (\\<lambda>i. Var (s i)) Pi) vs =\n                       isDERIV i Pi vs\nA total of 18 subgoals...", "case (Power fa n)"], ["proof (state)\nthis:\n  \\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n   \\<And>j.\n      j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\\<rbrakk>\n  \\<Longrightarrow> isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa)\n                     vs =\n                    isDERIV i fa vs\n  max_Var_floatarith (fa ^\\<^sub>e n) \\<le> length vs\n  ?j < max_Var_floatarith (fa ^\\<^sub>e n) \\<Longrightarrow>\n  vs ! s ?j = vs ! ?j\n\ngoal (18 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Add fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Add fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Add fa1 fa2))\n                          vs =\n                         isDERIV i (Add fa1 fa2) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Minus fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Minus fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Minus fa))\n                          vs =\n                         isDERIV i (Minus fa) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Mult fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Mult fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Mult fa1 fa2))\n                          vs =\n                         isDERIV i (Mult fa1 fa2) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Inverse fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Inverse fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Inverse fa))\n                          vs =\n                         isDERIV i (Inverse fa) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Cos fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Cos fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Cos fa))\n                          vs =\n                         isDERIV i (Cos fa) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Arctan fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Arctan fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Arctan fa))\n                          vs =\n                         isDERIV i (Arctan fa) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Abs fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Abs fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Abs fa))\n                          vs =\n                         isDERIV i (Abs fa) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Max fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Max fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Max fa1 fa2))\n                          vs =\n                         isDERIV i (Max fa1 fa2) vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Min fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Min fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Min fa1 fa2))\n                          vs =\n                         isDERIV i (Min fa1 fa2) vs\n 10. \\<lbrakk>max_Var_floatarith Pi \\<le> length vs;\n      \\<And>j.\n         j < max_Var_floatarith Pi \\<Longrightarrow>\n         vs ! s j = vs ! j\\<rbrakk>\n     \\<Longrightarrow> isDERIV i\n                        (subst_floatarith (\\<lambda>i. Var (s i)) Pi) vs =\n                       isDERIV i Pi vs\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n   \\<And>j.\n      j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\\<rbrakk>\n  \\<Longrightarrow> isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa)\n                     vs =\n                    isDERIV i fa vs\n  max_Var_floatarith (fa ^\\<^sub>e n) \\<le> length vs\n  ?j < max_Var_floatarith (fa ^\\<^sub>e n) \\<Longrightarrow>\n  vs ! s ?j = vs ! ?j", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n   \\<And>j.\n      j < max_Var_floatarith fa \\<Longrightarrow> vs ! s j = vs ! j\\<rbrakk>\n  \\<Longrightarrow> isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) fa)\n                     vs =\n                    isDERIV i fa vs\n  max_Var_floatarith (fa ^\\<^sub>e n) \\<le> length vs\n  ?j < max_Var_floatarith (fa ^\\<^sub>e n) \\<Longrightarrow>\n  vs ! s ?j = vs ! ?j\n\ngoal (1 subgoal):\n 1. isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) (fa ^\\<^sub>e n))\n     vs =\n    isDERIV i (fa ^\\<^sub>e n) vs", "by (cases n) auto"], ["proof (state)\nthis:\n  isDERIV i (subst_floatarith (\\<lambda>i. Var (s i)) (fa ^\\<^sub>e n)) vs =\n  isDERIV i (fa ^\\<^sub>e n) vs\n\ngoal (17 subgoals):\n 1. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Add fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Add fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Add fa1 fa2))\n                          vs =\n                         isDERIV i (Add fa1 fa2) vs\n 2. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Minus fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Minus fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Minus fa))\n                          vs =\n                         isDERIV i (Minus fa) vs\n 3. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Mult fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Mult fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Mult fa1 fa2))\n                          vs =\n                         isDERIV i (Mult fa1 fa2) vs\n 4. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Inverse fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Inverse fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Inverse fa))\n                          vs =\n                         isDERIV i (Inverse fa) vs\n 5. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Cos fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Cos fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Cos fa))\n                          vs =\n                         isDERIV i (Cos fa) vs\n 6. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Arctan fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Arctan fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Arctan fa))\n                          vs =\n                         isDERIV i (Arctan fa) vs\n 7. \\<And>fa.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa)\n                                   vs =\n                                  isDERIV i fa vs;\n        max_Var_floatarith (Abs fa) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Abs fa) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Abs fa))\n                          vs =\n                         isDERIV i (Abs fa) vs\n 8. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Max fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Max fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Max fa1 fa2))\n                          vs =\n                         isDERIV i (Max fa1 fa2) vs\n 9. \\<And>fa1 fa2.\n       \\<lbrakk>\\<lbrakk>max_Var_floatarith fa1 \\<le> length vs;\n                 \\<And>j.\n                    j < max_Var_floatarith fa1 \\<Longrightarrow>\n                    vs ! s j = vs ! j\\<rbrakk>\n                \\<Longrightarrow> isDERIV i\n                                   (subst_floatarith (\\<lambda>i. Var (s i))\n                                     fa1)\n                                   vs =\n                                  isDERIV i fa1 vs;\n        \\<lbrakk>max_Var_floatarith fa2 \\<le> length vs;\n         \\<And>j.\n            j < max_Var_floatarith fa2 \\<Longrightarrow>\n            vs ! s j = vs ! j\\<rbrakk>\n        \\<Longrightarrow> isDERIV i\n                           (subst_floatarith (\\<lambda>i. Var (s i)) fa2)\n                           vs =\n                          isDERIV i fa2 vs;\n        max_Var_floatarith (Min fa1 fa2) \\<le> length vs;\n        \\<And>j.\n           j < max_Var_floatarith (Min fa1 fa2) \\<Longrightarrow>\n           vs ! s j = vs ! j\\<rbrakk>\n       \\<Longrightarrow> isDERIV i\n                          (subst_floatarith (\\<lambda>i. Var (s i))\n                            (Min fa1 fa2))\n                          vs =\n                         isDERIV i (Min fa1 fa2) vs\n 10. \\<lbrakk>max_Var_floatarith Pi \\<le> length vs;\n      \\<And>j.\n         j < max_Var_floatarith Pi \\<Longrightarrow>\n         vs ! s j = vs ! j\\<rbrakk>\n     \\<Longrightarrow> isDERIV i\n                        (subst_floatarith (\\<lambda>i. Var (s i)) Pi) vs =\n                       isDERIV i Pi vs\nA total of 17 subgoals...", "qed (auto simp: interpret_floatarith_subst_floatarith_idem)"], ["", "lemma isFDERIV_subst_Var_floatarith:\n  assumes mv: \"max_Var_floatariths fas \\<le> length vs\"\n  assumes idem: \"\\<And>j. j < max_Var_floatariths fas \\<Longrightarrow> vs ! (s j) = vs ! j\"\n  assumes \"\\<And>i j. i \\<in> set xs \\<Longrightarrow> s j = i \\<longleftrightarrow> j = i\"\n  shows \"isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs = isFDERIV n xs fas vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs =\n    isFDERIV n xs fas vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs =\n    isFDERIV n xs fas vs", "have mv: \"\\<And>i. i < length fas \\<Longrightarrow> max_Var_floatarith (fas ! i) \\<le> length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length fas \\<Longrightarrow>\n       max_Var_floatarith (fas ! i) \\<le> length vs", "apply (rule order_trans[OF _ mv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length fas \\<Longrightarrow>\n       max_Var_floatarith (fas ! i) \\<le> max_Var_floatariths fas", "by (intro max_Var_floatarith_le_max_Var_floatariths_nth)"], ["proof (state)\nthis:\n  ?i < length fas \\<Longrightarrow>\n  max_Var_floatarith (fas ! ?i) \\<le> length vs\n\ngoal (1 subgoal):\n 1. isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs =\n    isFDERIV n xs fas vs", "have idem: \"\\<And>i j. i < length fas \\<Longrightarrow> j < max_Var_floatarith (fas ! i) \\<Longrightarrow> vs ! s j = vs ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fas; j < max_Var_floatarith (fas ! i)\\<rbrakk>\n       \\<Longrightarrow> vs ! s j = vs ! j", "using idem"], ["proof (prove)\nusing this:\n  ?j < max_Var_floatariths fas \\<Longrightarrow> vs ! s ?j = vs ! ?j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fas; j < max_Var_floatarith (fas ! i)\\<rbrakk>\n       \\<Longrightarrow> vs ! s j = vs ! j", "by (auto simp: dest!: max_Var_floatariths_lessI)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < length fas; ?j < max_Var_floatarith (fas ! ?i)\\<rbrakk>\n  \\<Longrightarrow> vs ! s ?j = vs ! ?j\n\ngoal (1 subgoal):\n 1. isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs =\n    isFDERIV n xs fas vs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs =\n    isFDERIV n xs fas vs", "unfolding isFDERIV_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>i<n.\n         \\<forall>j<n.\n            isDERIV (xs ! i)\n             (map (subst_floatarith (\\<lambda>i. Var (s i))) fas ! j)\n             vs) \\<and>\n     length (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) = n \\<and>\n     length xs = n) =\n    ((\\<forall>i<n. \\<forall>j<n. isDERIV (xs ! i) (fas ! j) vs) \\<and>\n     length fas = n \\<and> length xs = n)", "using mv idem assms(3)"], ["proof (prove)\nusing this:\n  ?i < length fas \\<Longrightarrow>\n  max_Var_floatarith (fas ! ?i) \\<le> length vs\n  \\<lbrakk>?i < length fas; ?j < max_Var_floatarith (fas ! ?i)\\<rbrakk>\n  \\<Longrightarrow> vs ! s ?j = vs ! ?j\n  ?i \\<in> set xs \\<Longrightarrow> (s ?j = ?i) = (?j = ?i)\n\ngoal (1 subgoal):\n 1. ((\\<forall>i<n.\n         \\<forall>j<n.\n            isDERIV (xs ! i)\n             (map (subst_floatarith (\\<lambda>i. Var (s i))) fas ! j)\n             vs) \\<and>\n     length (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) = n \\<and>\n     length xs = n) =\n    ((\\<forall>i<n. \\<forall>j<n. isDERIV (xs ! i) (fas ! j) vs) \\<and>\n     length fas = n \\<and> length xs = n)", "by (auto simp: isDERIV_subst_Var_floatarith)"], ["proof (state)\nthis:\n  isFDERIV n xs (map (subst_floatarith (\\<lambda>i. Var (s i))) fas) vs =\n  isFDERIV n xs fas vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interpret_floatariths_append[simp]:\n  \"interpret_floatariths (xs @ ys) vs = interpret_floatariths xs vs @ interpret_floatariths ys vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatariths (xs @ ys) vs =\n    interpret_floatariths xs vs @ interpret_floatariths ys vs", "by (induction xs) auto"], ["", "lemma not_fresh_inner_floatariths:\n  assumes \"length xs = length ys\"\n  shows \"\\<not> fresh_floatarith (inner_floatariths xs ys) i \\<longleftrightarrow> \\<not>fresh_floatariths xs i \\<or> \\<not>fresh_floatariths ys i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> fresh_floatarith (inner_floatariths xs ys) i) =\n    (\\<not> fresh_floatariths xs i \\<or> \\<not> fresh_floatariths ys i)", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. (\\<not> fresh_floatarith (inner_floatariths xs ys) i) =\n    (\\<not> fresh_floatariths xs i \\<or> \\<not> fresh_floatariths ys i)", "by (induction xs ys rule: list_induct2) auto"], ["", "lemma fresh_inner_floatariths:\n  assumes \"length xs = length ys\"\n  shows \"fresh_floatarith (inner_floatariths xs ys) i \\<longleftrightarrow> fresh_floatariths xs i \\<and> fresh_floatariths ys i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatarith (inner_floatariths xs ys) i =\n    (fresh_floatariths xs i \\<and> fresh_floatariths ys i)", "using not_fresh_inner_floatariths assms"], ["proof (prove)\nusing this:\n  length ?xs = length ?ys \\<Longrightarrow>\n  (\\<not> fresh_floatarith (inner_floatariths ?xs ?ys) ?i) =\n  (\\<not> fresh_floatariths ?xs ?i \\<or> \\<not> fresh_floatariths ?ys ?i)\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. fresh_floatarith (inner_floatariths xs ys) i =\n    (fresh_floatariths xs i \\<and> fresh_floatariths ys i)", "by auto"], ["", "lemma not_fresh_floatariths_map:\n  \" \\<not> fresh_floatariths (map f xs) i \\<longleftrightarrow> (\\<exists>x \\<in> set xs. \\<not>fresh_floatarith (f x) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> fresh_floatariths (map f xs) i) =\n    (\\<exists>x\\<in>set xs. \\<not> fresh_floatarith (f x) i)", "by (induction xs) auto"], ["", "lemma fresh_floatariths_map:\n  \" fresh_floatariths (map f xs) i \\<longleftrightarrow> (\\<forall>x \\<in> set xs. fresh_floatarith (f x) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatariths (map f xs) i =\n    (\\<forall>x\\<in>set xs. fresh_floatarith (f x) i)", "by (induction xs) auto"], ["", "lemma fresh_floatarith_fold_const_fa: \"fresh_floatarith fa i \\<Longrightarrow> fresh_floatarith (fold_const_fa fa) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatarith fa i \\<Longrightarrow>\n    fresh_floatarith (fold_const_fa fa) i", "by (induction fa) (auto simp: fold_const_fa.simps split: floatarith.splits option.splits)"], ["", "lemma fresh_floatarith_fold_const_fa_Add[intro!]:\n  assumes \"fresh_floatarith (fold_const_fa a) i\" \"fresh_floatarith (fold_const_fa b) i\"\n  shows \"fresh_floatarith (fold_const_fa (Add a b)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatarith (fold_const_fa (Add a b)) i", "using assms"], ["proof (prove)\nusing this:\n  fresh_floatarith (fold_const_fa a) i\n  fresh_floatarith (fold_const_fa b) i\n\ngoal (1 subgoal):\n 1. fresh_floatarith (fold_const_fa (Add a b)) i", "by (auto simp: fold_const_fa.simps split!: floatarith.splits option.splits)"], ["", "lemma fresh_floatarith_fold_const_fa_Mult[intro!]:\n  assumes \"fresh_floatarith (fold_const_fa a) i\" \"fresh_floatarith (fold_const_fa b) i\"\n  shows \"fresh_floatarith (fold_const_fa (Mult a b)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatarith (fold_const_fa (Mult a b)) i", "using assms"], ["proof (prove)\nusing this:\n  fresh_floatarith (fold_const_fa a) i\n  fresh_floatarith (fold_const_fa b) i\n\ngoal (1 subgoal):\n 1. fresh_floatarith (fold_const_fa (Mult a b)) i", "by (auto simp: fold_const_fa.simps split!: floatarith.splits option.splits)"], ["", "lemma fresh_floatarith_fold_const_fa_Minus[intro!]:\n  assumes \"fresh_floatarith (fold_const_fa b) i\"\n  shows \"fresh_floatarith (fold_const_fa (Minus b)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_floatarith (fold_const_fa (Minus b)) i", "using assms"], ["proof (prove)\nusing this:\n  fresh_floatarith (fold_const_fa b) i\n\ngoal (1 subgoal):\n 1. fresh_floatarith (fold_const_fa (Minus b)) i", "by (auto simp: fold_const_fa.simps split!: floatarith.splits)"], ["", "lemma fresh_FDERIV_floatarith:\n  \"fresh_floatarith ode_e i \\<Longrightarrow> fresh_floatariths ds i\n  \\<Longrightarrow> length ds = DIM('a)\n  \\<Longrightarrow> fresh_floatarith (FDERIV_floatarith ode_e [0..<DIM('a::executable_euclidean_space)] ds) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n     length ds = DIM('a)\\<rbrakk>\n    \\<Longrightarrow> fresh_floatarith\n                       (FDERIV_floatarith ode_e [0..<DIM('a)] ds) i", "proof (induction ode_e)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Add ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Add ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 2. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Minus ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Minus ode_e) [0..<DIM('a)] ds)\n                          i\n 3. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Mult ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Mult ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 4. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Inverse ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Inverse ode_e) [0..<DIM('a)]\n                            ds)\n                          i\n 5. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Cos ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Cos ode_e) [0..<DIM('a)] ds) i\n 6. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Arctan ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Arctan ode_e) [0..<DIM('a)]\n                            ds)\n                          i\n 7. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Abs ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Abs ode_e) [0..<DIM('a)] ds) i\n 8. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Max ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Max ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 9. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Min ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Min ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 10. \\<lbrakk>fresh_floatarith Pi i; fresh_floatariths ds i;\n      length ds = DIM('a)\\<rbrakk>\n     \\<Longrightarrow> fresh_floatarith\n                        (FDERIV_floatarith Pi [0..<DIM('a)] ds) i\nA total of 18 subgoals...", "case (Power ode_e n)"], ["proof (state)\nthis:\n  \\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n   length ds = DIM('a)\\<rbrakk>\n  \\<Longrightarrow> fresh_floatarith\n                     (FDERIV_floatarith ode_e [0..<DIM('a)] ds) i\n  fresh_floatarith (ode_e ^\\<^sub>e n) i\n  fresh_floatariths ds i\n  length ds = DIM('a)\n\ngoal (18 subgoals):\n 1. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Add ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Add ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 2. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Minus ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Minus ode_e) [0..<DIM('a)] ds)\n                          i\n 3. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Mult ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Mult ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 4. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Inverse ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Inverse ode_e) [0..<DIM('a)]\n                            ds)\n                          i\n 5. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Cos ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Cos ode_e) [0..<DIM('a)] ds) i\n 6. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Arctan ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Arctan ode_e) [0..<DIM('a)]\n                            ds)\n                          i\n 7. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Abs ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Abs ode_e) [0..<DIM('a)] ds) i\n 8. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Max ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Max ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 9. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Min ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Min ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 10. \\<lbrakk>fresh_floatarith Pi i; fresh_floatariths ds i;\n      length ds = DIM('a)\\<rbrakk>\n     \\<Longrightarrow> fresh_floatarith\n                        (FDERIV_floatarith Pi [0..<DIM('a)] ds) i\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n   length ds = DIM('a)\\<rbrakk>\n  \\<Longrightarrow> fresh_floatarith\n                     (FDERIV_floatarith ode_e [0..<DIM('a)] ds) i\n  fresh_floatarith (ode_e ^\\<^sub>e n) i\n  fresh_floatariths ds i\n  length ds = DIM('a)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n   length ds = DIM('a)\\<rbrakk>\n  \\<Longrightarrow> fresh_floatarith\n                     (FDERIV_floatarith ode_e [0..<DIM('a)] ds) i\n  fresh_floatarith (ode_e ^\\<^sub>e n) i\n  fresh_floatariths ds i\n  length ds = DIM('a)\n\ngoal (1 subgoal):\n 1. fresh_floatarith\n     (FDERIV_floatarith (ode_e ^\\<^sub>e n) [0..<DIM('a)] ds) i", "by (cases n) (auto simp: FDERIV_floatarith_def fresh_inner_floatariths fresh_floatariths_map fresh_floatarith_fold_const_fa)"], ["proof (state)\nthis:\n  fresh_floatarith (FDERIV_floatarith (ode_e ^\\<^sub>e n) [0..<DIM('a)] ds)\n   i\n\ngoal (17 subgoals):\n 1. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Add ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Add ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 2. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Minus ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Minus ode_e) [0..<DIM('a)] ds)\n                          i\n 3. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Mult ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Mult ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 4. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Inverse ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Inverse ode_e) [0..<DIM('a)]\n                            ds)\n                          i\n 5. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Cos ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Cos ode_e) [0..<DIM('a)] ds) i\n 6. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Arctan ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Arctan ode_e) [0..<DIM('a)]\n                            ds)\n                          i\n 7. \\<And>ode_e.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e [0..<DIM('a)]\n                                     ds)\n                                   i;\n        fresh_floatarith (Abs ode_e) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Abs ode_e) [0..<DIM('a)] ds) i\n 8. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Max ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Max ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 9. \\<And>ode_e1 ode_e2.\n       \\<lbrakk>\\<lbrakk>fresh_floatarith ode_e1 i; fresh_floatariths ds i;\n                 length ds = DIM('a)\\<rbrakk>\n                \\<Longrightarrow> fresh_floatarith\n                                   (FDERIV_floatarith ode_e1 [0..<DIM('a)]\n                                     ds)\n                                   i;\n        \\<lbrakk>fresh_floatarith ode_e2 i; fresh_floatariths ds i;\n         length ds = DIM('a)\\<rbrakk>\n        \\<Longrightarrow> fresh_floatarith\n                           (FDERIV_floatarith ode_e2 [0..<DIM('a)] ds) i;\n        fresh_floatarith (Min ode_e1 ode_e2) i; fresh_floatariths ds i;\n        length ds = DIM('a)\\<rbrakk>\n       \\<Longrightarrow> fresh_floatarith\n                          (FDERIV_floatarith (Min ode_e1 ode_e2)\n                            [0..<DIM('a)] ds)\n                          i\n 10. \\<lbrakk>fresh_floatarith Pi i; fresh_floatariths ds i;\n      length ds = DIM('a)\\<rbrakk>\n     \\<Longrightarrow> fresh_floatarith\n                        (FDERIV_floatarith Pi [0..<DIM('a)] ds) i\nA total of 17 subgoals...", "qed (auto simp: FDERIV_floatarith_def fresh_inner_floatariths fresh_floatariths_map fresh_floatarith_fold_const_fa)"], ["", "lemma not_fresh_FDERIV_floatarith:\n  \"\\<not> fresh_floatarith (FDERIV_floatarith ode_e [0..<DIM('a::executable_euclidean_space)] ds) i\n  \\<Longrightarrow> length ds = DIM('a)\n  \\<Longrightarrow> \\<not>fresh_floatarith ode_e i \\<or> \\<not>fresh_floatariths ds i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fresh_floatarith\n                     (FDERIV_floatarith ode_e [0..<DIM('a)] ds) i;\n     length ds = DIM('a)\\<rbrakk>\n    \\<Longrightarrow> \\<not> fresh_floatarith ode_e i \\<or>\n                      \\<not> fresh_floatariths ds i", "using fresh_FDERIV_floatarith"], ["proof (prove)\nusing this:\n  \\<lbrakk>fresh_floatarith ?ode_e ?i; fresh_floatariths ?ds ?i;\n   length ?ds = DIM(?'a)\\<rbrakk>\n  \\<Longrightarrow> fresh_floatarith\n                     (FDERIV_floatarith ?ode_e [0..<DIM(?'a)] ?ds) ?i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fresh_floatarith\n                     (FDERIV_floatarith ode_e [0..<DIM('a)] ds) i;\n     length ds = DIM('a)\\<rbrakk>\n    \\<Longrightarrow> \\<not> fresh_floatarith ode_e i \\<or>\n                      \\<not> fresh_floatariths ds i", "by auto"], ["", "lemma not_fresh_FDERIV_floatariths:\n  \"\\<not> fresh_floatariths (FDERIV_floatariths ode_e [0..<DIM('a::executable_euclidean_space)] ds) i \\<Longrightarrow>\n  length ds = DIM('a) \\<Longrightarrow> \\<not>fresh_floatariths ode_e i \\<or> \\<not>fresh_floatariths ds i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fresh_floatariths\n                     (FDERIV_floatariths ode_e [0..<DIM('a)] ds) i;\n     length ds = DIM('a)\\<rbrakk>\n    \\<Longrightarrow> \\<not> fresh_floatariths ode_e i \\<or>\n                      \\<not> fresh_floatariths ds i", "by (induction ode_e) (auto simp: FDERIV_floatariths_def dest!: not_fresh_FDERIV_floatarith)"], ["", "lemma isDERIV_FDERIV_floatarith_linear:\n  fixes x h::\"'a::executable_euclidean_space\"\n  assumes \"\\<And>k. k < DIM('a) \\<Longrightarrow> isDERIV i (DERIV_floatarith k fa) xs\"\n  assumes \"max_Var_floatarith fa \\<le> DIM('a)\"\n  assumes [simp]: \"length xs = DIM('a)\" \"length hs = DIM('a)\"\n  shows \"isDERIV i (FDERIV_floatarith fa [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)]))\n            (xs @ hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDERIV i\n     (FDERIV_floatarith fa [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)]))\n     (xs @ hs)", "using assms"], ["proof (prove)\nusing this:\n  ?k < DIM('a) \\<Longrightarrow> isDERIV i (DERIV_floatarith ?k fa) xs\n  max_Var_floatarith fa \\<le> DIM('a)\n  length xs = DIM('a)\n  length hs = DIM('a)\n\ngoal (1 subgoal):\n 1. isDERIV i\n     (FDERIV_floatarith fa [0..<DIM('a)] (map Var [DIM('a)..<2 * DIM('a)]))\n     (xs @ hs)", "apply (auto simp: FDERIV_floatarith_def isDERIV_inner_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<And>k.\n                   k < DIM('a) \\<Longrightarrow>\n                   isDERIV i (DERIV_floatarith k fa) xs;\n        max_Var_floatarith fa \\<le> DIM('a); k < DIM('a)\\<rbrakk>\n       \\<Longrightarrow> isDERIV i (fold_const_fa (DERIV_floatarith k fa))\n                          (xs @ hs)", "apply (rule isDERIV_max_Var_floatarithI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<And>k.\n                   k < DIM('a) \\<Longrightarrow>\n                   isDERIV i (DERIV_floatarith k fa) xs;\n        max_Var_floatarith fa \\<le> DIM('a); k < DIM('a)\\<rbrakk>\n       \\<Longrightarrow> isDERIV i (fold_const_fa (DERIV_floatarith k fa))\n                          (?ys7 k)\n 2. \\<And>k ia.\n       \\<lbrakk>\\<And>k.\n                   k < DIM('a) \\<Longrightarrow>\n                   isDERIV i (DERIV_floatarith k fa) xs;\n        max_Var_floatarith fa \\<le> DIM('a); k < DIM('a);\n        ia < max_Var_floatarith\n              (fold_const_fa (DERIV_floatarith k fa))\\<rbrakk>\n       \\<Longrightarrow> (xs @ hs) ! ia = ?ys7 k ! ia", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k ia.\n       \\<lbrakk>\\<And>k.\n                   k < DIM('a) \\<Longrightarrow>\n                   isDERIV i (DERIV_floatarith k fa) xs;\n        max_Var_floatarith fa \\<le> DIM('a); k < DIM('a);\n        ia < max_Var_floatarith\n              (fold_const_fa (DERIV_floatarith k fa))\\<rbrakk>\n       \\<Longrightarrow> (xs @ hs) ! ia = xs ! ia", "apply (auto simp: nth_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k ia.\n       \\<lbrakk>\\<And>k.\n                   k < DIM('a) \\<Longrightarrow>\n                   isDERIV i (DERIV_floatarith k fa) xs;\n        max_Var_floatarith fa \\<le> DIM('a); k < DIM('a);\n        ia < max_Var_floatarith (fold_const_fa (DERIV_floatarith k fa));\n        \\<not> ia < DIM('a)\\<rbrakk>\n       \\<Longrightarrow> hs ! (ia - DIM('a)) = xs ! ia", "by (metis add_diff_inverse_nat leD max_Var_floatarith_DERIV_floatarith\n      max_Var_floatarith_fold_const_fa trans_le_add1)"], ["", "lemma\n  isFDERIV_FDERIV_floatariths_linear:\n  fixes x h::\"'a::executable_euclidean_space\"\n  assumes \"\\<And>i j k.\n       i < DIM('a) \\<Longrightarrow>\n       j < DIM('a) \\<Longrightarrow> k < DIM('a) \\<Longrightarrow> isDERIV i (DERIV_floatarith k (fas ! j)) (xs)\"\n  assumes [simp]: \"length fas = DIM('a::executable_euclidean_space)\"\n  assumes [simp]: \"length xs = DIM('a)\" \"length hs = DIM('a)\"\n  assumes \"max_Var_floatariths fas \\<le> DIM('a)\"\n  shows \"isFDERIV DIM('a) [0..<DIM('a::executable_euclidean_space)]\n     (FDERIV_floatariths fas [0..<DIM('a)] (map floatarith.Var [DIM('a)..<2 * DIM('a)]))\n     (xs @ hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isFDERIV DIM('a) [0..<DIM('a)]\n     (FDERIV_floatariths fas [0..<DIM('a)]\n       (map Var [DIM('a)..<2 * DIM('a)]))\n     (xs @ hs)", "apply (auto simp: isFDERIV_def intro!: isDERIV_FDERIV_floatarith_linear assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < DIM('a); j < DIM('a)\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (fas ! j) \\<le> DIM('a)", "using assms(5) max_Var_floatariths_lessI not_le_imp_less"], ["proof (prove)\nusing this:\n  max_Var_floatariths fas \\<le> DIM('a)\n  \\<lbrakk>?i < max_Var_floatarith (?fas ! ?j); ?j < length ?fas\\<rbrakk>\n  \\<Longrightarrow> ?i < max_Var_floatariths ?fas\n  \\<not> ?y \\<le> ?x \\<Longrightarrow> ?x < ?y\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < DIM('a); j < DIM('a)\\<rbrakk>\n       \\<Longrightarrow> max_Var_floatarith (fas ! j) \\<le> DIM('a)", "by fastforce"], ["", "definition isFDERIV_approx where\n  \"isFDERIV_approx p n xs fas vs =\n    ((\\<forall>i<n. \\<forall>j<n. isDERIV_approx p (xs ! i) (fas ! j) vs) \\<and> length fas = n \\<and> length xs = n)\""], ["", "lemma isFDERIV_approx:\n  \"bounded_by vs VS \\<Longrightarrow> isFDERIV_approx prec n xs fas VS \\<Longrightarrow> isFDERIV n xs fas vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bounded_by vs VS; isFDERIV_approx prec n xs fas VS\\<rbrakk>\n    \\<Longrightarrow> isFDERIV n xs fas vs", "by (auto simp: isFDERIV_approx_def isFDERIV_def intro!: isDERIV_approx)"], ["", "primrec isnFDERIV_approx where\n  \"isnFDERIV_approx p N fas xs ds vs 0 = True\"\n| \"isnFDERIV_approx p N fas xs ds vs (Suc n) \\<longleftrightarrow>\n    isFDERIV_approx p N xs (FDERIV_n_floatariths fas xs (map Var ds) n) vs \\<and>\n    isnFDERIV_approx p N fas xs ds vs n\""], ["", "lemma isnFDERIV_approx:\n  \"bounded_by vs VS \\<Longrightarrow> isnFDERIV_approx prec N fas xs ds VS n \\<Longrightarrow> isnFDERIV N fas xs ds vs n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bounded_by vs VS;\n     isnFDERIV_approx prec N fas xs ds VS n\\<rbrakk>\n    \\<Longrightarrow> isnFDERIV N fas xs ds vs n", "by (induction n) (auto intro!: isFDERIV_approx)"], ["", "fun plain_floatarith::\"nat \\<Rightarrow> floatarith \\<Rightarrow> bool\" where\n  \"plain_floatarith N (floatarith.Add a b) \\<longleftrightarrow> plain_floatarith N a \\<and> plain_floatarith N b\"\n| \"plain_floatarith N (floatarith.Mult a b) \\<longleftrightarrow> plain_floatarith N a \\<and> plain_floatarith N b\"\n| \"plain_floatarith N (floatarith.Minus a) \\<longleftrightarrow> plain_floatarith N a\"\n| \"plain_floatarith N (floatarith.Pi) \\<longleftrightarrow> True\"\n| \"plain_floatarith N (floatarith.Num n) \\<longleftrightarrow> True\"\n| \"plain_floatarith N (floatarith.Var i) \\<longleftrightarrow> i < N\"\n| \"plain_floatarith N (floatarith.Max a b) \\<longleftrightarrow> plain_floatarith N a \\<and> plain_floatarith N b\"\n| \"plain_floatarith N (floatarith.Min a b) \\<longleftrightarrow> plain_floatarith N a \\<and> plain_floatarith N b\"\n| \"plain_floatarith N (floatarith.Power a n) \\<longleftrightarrow> plain_floatarith N a\"\n| \"plain_floatarith N (floatarith.Cos a) \\<longleftrightarrow> False\" \\<comment> \\<open>TODO: should be plain!\\<close>\n| \"plain_floatarith N (floatarith.Arctan a) \\<longleftrightarrow> False\" \\<comment> \\<open>TODO: should be plain!\\<close>\n| \"plain_floatarith N (floatarith.Abs a) \\<longleftrightarrow> plain_floatarith N a\"\n| \"plain_floatarith N (floatarith.Exp a) \\<longleftrightarrow> False\" \\<comment> \\<open>TODO: should be plain!\\<close>\n| \"plain_floatarith N (floatarith.Sqrt a) \\<longleftrightarrow> False\" \\<comment> \\<open>TODO: should be plain!\\<close>\n| \"plain_floatarith N (floatarith.Floor a) \\<longleftrightarrow> plain_floatarith N a\"\n\n| \"plain_floatarith N (floatarith.Powr a b) \\<longleftrightarrow> False\"\n| \"plain_floatarith N (floatarith.Inverse a) \\<longleftrightarrow> False\"\n| \"plain_floatarith N (floatarith.Ln a) \\<longleftrightarrow> False\""], ["", "lemma plain_floatarith_approx_not_None:\n  assumes \"plain_floatarith N fa\" \"N \\<le> length XS\" \"\\<And>i. i < N \\<Longrightarrow> XS ! i \\<noteq> None\"\n  shows \"approx p fa XS \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approx p fa XS \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  plain_floatarith N fa\n  N \\<le> length XS\n  ?i < N \\<Longrightarrow> XS ! ?i \\<noteq> None\n\ngoal (1 subgoal):\n 1. approx p fa XS \\<noteq> None", "by (induction fa)\n    (auto simp: Let_def split_beta' prod_eq_iff approx.simps)"], ["", "definition \"Rad_of w = w * (Pi / Num 180)\""], ["", "lemma interpret_Rad_of[simp]: \"interpret_floatarith (Rad_of w) xs = rad_of (interpret_floatarith w xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Rad_of w) xs = rad_of (interpret_floatarith w xs)", "by (auto simp: Rad_of_def rad_of_def)"], ["", "definition \"Deg_of w = Num 180 * w / Pi\""], ["", "lemma interpret_Deg_of[simp]: \"interpret_floatarith (Deg_of w) xs = deg_of (interpret_floatarith w xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (Deg_of w) xs = deg_of (interpret_floatarith w xs)", "by (auto simp: Deg_of_def deg_of_def inverse_eq_divide)"], ["", "unbundle no_floatarith_notation"], ["", "end"]]}