{"file_name": "/home/qj213/afp-2021-10-22/thys/Affine_Arithmetic/Counterclockwise_2D_Arbitrary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Affine_Arithmetic", "problem_names": ["lemma ccw'_imp_ccw: \"ccw' a b c \\<Longrightarrow> ccw a b c\"", "lemma ccw_ncoll_imp_ccw: \"ccw a b c \\<Longrightarrow> \\<not>coll a b c \\<Longrightarrow> ccw' a b c\"", "lemma ccw_translate: \"ccw p (p + q) (p + r) = ccw 0 q r\"", "lemma ccw_translate_origin: \"NO_MATCH 0 p \\<Longrightarrow> ccw p q r = ccw 0 (q - p) (r - p)\"", "lemma psi_scale:\n  \"psi (r *\\<^sub>R a) (r *\\<^sub>R b) 0 = (if r > 0 then psi a b 0 else if r < 0 then psi 0 b a else True)\"\n  \"psi (r *\\<^sub>R a) 0 (r *\\<^sub>R b) = (if r > 0 then psi a 0 b else if r < 0 then psi b 0 a else True)\"\n  \"psi 0 (r *\\<^sub>R a) (r *\\<^sub>R b) = (if r > 0 then psi 0 a b else if r < 0 then psi b a 0 else True)\"", "lemma ccw_scale23: \"ccw 0 a b \\<Longrightarrow> r > 0 \\<Longrightarrow> ccw 0 (r *\\<^sub>R a) (r *\\<^sub>R b)\"", "lemma psi_notI: \"distinct3 p q r \\<Longrightarrow> psi p q r \\<Longrightarrow> \\<not> psi q p r\"", "lemma not_lex_eq: \"\\<not> lex a b \\<longleftrightarrow> lex b a \\<and> a \\<noteq> b\"", "lemma lex_trans: \"lex a b \\<Longrightarrow> lex b c \\<Longrightarrow> lex a c\"", "lemma lex_sym_eqI: \"lex a b \\<Longrightarrow> lex b a \\<Longrightarrow> a = b\"\n  and lex_sym_eq_iff: \"lex a b \\<Longrightarrow> lex b a \\<longleftrightarrow> a = b\"", "lemma lex_refl[simp]: \"lex p p\"", "lemma psi_disjuncts:\n  \"distinct3 p q r \\<Longrightarrow> psi p q r \\<or> psi p r q \\<or> psi q r p \\<or> psi q p r \\<or> psi r p q \\<or> psi r q p\"", "lemma nlex_ccw_left: \"lex x 0 \\<Longrightarrow> ccw 0 (0, 1) x\"", "lemma lex_scaleR_nonneg: \"lex a b \\<Longrightarrow> r \\<ge> 0 \\<Longrightarrow> lex a (a + r *\\<^sub>R (b - a))\"", "lemma lex_scale1_zero:\n    \"lex (v *\\<^sub>R u) 0 = (if v > 0 then lex u 0 else if v < 0 then lex 0 u else True)\"\n  and lex_scale2_zero:\n    \"lex 0 (v *\\<^sub>R u) = (if v > 0 then lex 0 u else if v < 0 then lex u 0 else True)\"", "lemma nlex_add:\n  assumes \"lex a 0\" \"lex b 0\"\n  shows \"lex (a + b) 0\"", "lemma nlex_sum:\n  assumes \"finite X\"\n  assumes \"\\<And>x. x \\<in> X \\<Longrightarrow> lex (f x) 0\"\n  shows \"lex (sum f X) 0\"", "lemma abs_add_nlex:\n  assumes \"coll 0 a b\"\n  assumes \"lex a 0\"\n  assumes \"lex b 0\"\n  shows \"abs (a + b) = abs a + abs b\"", "lemma lex_sum_list: \"(\\<And>x. x \\<in> set xs \\<Longrightarrow> lex x 0) \\<Longrightarrow> lex (sum_list xs) 0\"", "lemma\n  abs_sum_list_coll:\n  assumes coll: \"list_all (coll 0 x) xs\"\n  assumes \"x \\<noteq> 0\"\n  assumes up: \"list_all (\\<lambda>x. lex x 0) xs\"\n  shows \"abs (sum_list xs) = sum_list (map abs xs)\"", "lemma lex_diff1: \"lex (a - b) c = lex a (c + b)\"\n  and lex_diff2: \"lex c (a - b) = lex (c + b) a\"", "lemma sum_list_eq_0_iff_nonpos:\n  fixes xs::\"'a::ordered_ab_group_add list\"\n  shows \"list_all (\\<lambda>x. x \\<le> 0) xs \\<Longrightarrow> sum_list xs = 0 \\<longleftrightarrow> (\\<forall>n\\<in>set xs. n = 0)\"", "lemma sum_list_nlex_eq_zeroI:\n  assumes nlex: \"list_all (\\<lambda>x. lex x 0) xs\"\n  assumes \"sum_list xs = 0\"\n  assumes \"x \\<in> set xs\"\n  shows \"x = 0\"", "lemma sum_list_eq0I: \"(\\<forall>x\\<in>set xs. x = 0) \\<Longrightarrow> sum_list xs = 0\"", "lemma sum_list_nlex_eq_zero_iff:\n  assumes nlex: \"list_all (\\<lambda>x. lex x 0) xs\"\n  shows \"sum_list xs = 0 \\<longleftrightarrow> list_all ((=) 0) xs\"", "lemma\n  assumes \"lex p q\" \"lex q r\" \"0 \\<le> a\" \"0 \\<le> b\" \"0 \\<le> c\" \"a + b + c = 1\"\n  assumes comb_def: \"comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r\"\n  shows lex_convex3: \"lex p comb\" \"lex comb r\"", "lemma lex_convex_self2:\n  assumes \"lex p q\" \"0 \\<le> a\" \"a \\<le> 1\"\n  defines \"r \\<equiv> a *\\<^sub>R p + (1 - a) *\\<^sub>R q\"\n  shows \"lex p r\" (is ?th1)\n    and \"lex r q\" (is ?th2)", "lemma lex_uminus0[simp]: \"lex (-a) 0 = lex 0 a\"", "lemma\n  lex_fst_zero_imp:\n  \"fst x = 0 \\<Longrightarrow> lex x 0 \\<Longrightarrow> lex y 0 \\<Longrightarrow> \\<not>coll 0 x y \\<Longrightarrow> ccw' 0 y x\"", "lemma lex_ccw_left: \"lex x y \\<Longrightarrow> r > 0 \\<Longrightarrow> ccw y (y + (0, r)) x\"", "lemma lex_translate_origin: \"NO_MATCH 0 a \\<Longrightarrow> lex a b = lex 0 (b - a)\"", "lemma lexs_irrefl: \"\\<not> lexs p p\"\n  and lexs_imp_lex: \"lexs x y \\<Longrightarrow> lex x y\"\n  and not_lexs: \"(\\<not> lexs x y) = (lex y x)\"\n  and not_lex: \"(\\<not> lex x y) = (lexs y x)\"\n  and eq_lex_refl: \"x = y \\<Longrightarrow> lex x y\"", "lemma lexs_trans: \"lexs x y \\<Longrightarrow> lexs y z \\<Longrightarrow> lexs x z\"\n  and lexs_lex_trans: \"lexs x y \\<Longrightarrow> lex y z \\<Longrightarrow> lexs x z\"\n  and lex_lexs_trans: \"lex x y \\<Longrightarrow> lexs y z \\<Longrightarrow> lexs x z\"\n  and lex_neq_trans: \"lex a b \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> lexs a b\"\n  and neq_lex_trans: \"a \\<noteq> b \\<Longrightarrow> lex a b \\<Longrightarrow> lexs a b\"\n  and lexs_imp_neq: \"lexs a b \\<Longrightarrow> a \\<noteq> b\"", "lemma\n  assumes d: \"distinct4 s p q r\"\n  shows contra1: \"\\<not>(lex p q \\<and> lex q r \\<and> lex r s \\<and> indelta s p q r)\" (is ?th1)\n    and contra2: \"\\<not>(lex s p \\<and> lex p q \\<and> lex q r \\<and> indelta s p q r)\" (is ?th2)\n    and contra3: \"\\<not>(lex p r \\<and> lex p s \\<and> lex q r \\<and> lex q s \\<and> insquare p r q s)\" (is ?th3)", "lemma ccw'_subst_psi_disj:\n  assumes \"det3 t r s = 0\"\n  assumes \"psi t r s \\<or> psi t s r \\<or> psi s r t\"\n  assumes \"s \\<noteq> t\"\n  assumes \"ccw' t r p\"\n  shows \"ccw' t s p\"", "lemma lex_contr:\n  assumes \"distinct4 t s q r\"\n  assumes \"lex t s\" \"lex s r\"\n  assumes \"det3 t s r = 0\"\n  assumes \"ccw' t s q\"\n  assumes \"ccw' t q r\"\n  shows \"False\"", "lemma contra4:\n  assumes \"distinct4 s r q p\"\n  assumes lex: \"lex q p\" \"lex p r\" \"lex r s\"\n  assumes ccw: \"ccw r q s\" \"ccw r s p\" \"ccw r q p\"\n  shows False", "lemma not_coll_ordered_lexI:\n  assumes \"l \\<noteq> x0\"\n    and \"lex x1 r\"\n    and \"lex x1 l\"\n    and \"lex r x0\"\n    and \"lex l x0\"\n    and \"ccw' x0 l x1\"\n    and \"ccw' x0 x1 r\"\n  shows \"det3 x0 l r \\<noteq> 0\"", "lemma lex_total: \"lex t q \\<and> t \\<noteq> q \\<or> lex q t \\<and> t \\<noteq> q \\<or> t = q\"", "lemma\n  ccw_two_up_contra:\n  assumes c: \"ccw' t p q\" \"ccw' t q r\"\n  assumes ccws: \"ccw t s p\" \"ccw t s q\" \"ccw t s r\" \"ccw t p q\" \"ccw t q r\" \"ccw t r p\"\n  assumes distinct: \"distinct5 t s p q r\"\n  shows False", "lemma\n  ccw_transitive_contr:\n  fixes t s p q r\n  assumes ccws: \"ccw t s p\" \"ccw t s q\" \"ccw t s r\" \"ccw t p q\" \"ccw t q r\" \"ccw t r p\"\n  assumes distinct: \"distinct5 t s p q r\"\n  shows False", "lemma ccw_scaleR1:\n  \"det3 0 xr P \\<noteq> 0 \\<Longrightarrow> 0 < e \\<Longrightarrow> ccw 0 xr P \\<Longrightarrow> ccw 0 (e*\\<^sub>Rxr) P\"", "lemma ccw_scaleR2:\n  \"det3 0 xr P \\<noteq> 0 \\<Longrightarrow> 0 < e \\<Longrightarrow> ccw 0 xr P \\<Longrightarrow> ccw 0 xr (e*\\<^sub>RP)\"", "lemma ccw_translate3_aux:\n  assumes \"\\<not>coll 0 a b\"\n  assumes \"x < 1\"\n  assumes \"ccw 0 (a - x*\\<^sub>Ra) (b - x *\\<^sub>R a)\"\n  shows \"ccw 0 a b\"", "lemma ccw_translate3_minus: \"det3 0 a b \\<noteq> 0 \\<Longrightarrow> x < 1 \\<Longrightarrow> ccw 0 a (b - x *\\<^sub>R a) \\<Longrightarrow> ccw 0 a b\"", "lemma ccw_translate3: \"det3 0 a b \\<noteq> 0 \\<Longrightarrow> x < 1 \\<Longrightarrow> ccw 0 a b \\<Longrightarrow> ccw 0 a (x *\\<^sub>R a + b)\"", "lemma ccw_switch23: \"det3 0 P Q \\<noteq> 0 \\<Longrightarrow> (\\<not> ccw 0 Q P \\<longleftrightarrow> ccw 0 P Q)\"", "lemma ccw0_upward: \"fst a > 0 \\<Longrightarrow> snd a = 0 \\<Longrightarrow> snd b > snd a \\<Longrightarrow> ccw 0 a b\"", "lemma ccw_uminus3[simp]: \"det3 a b c \\<noteq> 0 \\<Longrightarrow> ccw (-a) (-b) (-c) = ccw a b c\"", "lemma coll_minus_eq: \"coll (x - a) (x - b) (x - c) = coll a b c\"", "lemma ccw_minus3: \"\\<not> coll a b c \\<Longrightarrow> ccw (x - a) (x - b) (x - c) \\<longleftrightarrow> ccw a b c\"", "lemma ccw0_uminus[simp]: \"\\<not> coll 0 a b \\<Longrightarrow> ccw 0 (-a) (-b) \\<longleftrightarrow> ccw 0 a b\"", "lemma lex_convex2:\n  assumes \"lex p q\" \"lex p r\" \"0 \\<le> u\" \"u \\<le> 1\"\n  shows \"lex p (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\"", "lemma lex_convex2':\n  assumes \"lex q p\" \"lex r p\" \"0 \\<le> u\" \"u \\<le> 1\"\n  shows \"lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r) p\"", "lemma psi_convex1:\n  assumes \"psi c a b\"\n  assumes \"psi d a b\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"psi (u *\\<^sub>R c + v *\\<^sub>R d) a b\"", "lemma psi_convex2:\n  assumes \"psi a c b\"\n  assumes \"psi a d b\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"psi a (u *\\<^sub>R c + v *\\<^sub>R d) b\"", "lemma psi_convex3:\n  assumes \"psi a b c\"\n  assumes \"psi a b d\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"psi a b (u *\\<^sub>R c + v *\\<^sub>R d)\"", "lemma coll_convex:\n  assumes \"coll a b c\" \"coll a b d\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\"", "lemma (in ccw_vector_space) convex3:\n  assumes \"u \\<ge> 0\" \"v \\<ge> 0\" \"u + v = 1\" \"ccw a b d\" \"ccw a b c\"\n  shows \"ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\"", "lemma ccw_self[simp]: \"ccw a a b\" \"ccw b a a\"", "lemma ccw_sefl'[simp]: \"ccw a b a\"", "lemma ccw_convex':\n  assumes uv: \"u \\<ge> 0\" \"v \\<ge> 0\" \"u + v = 1\"\n  assumes \"ccw a b c\" and 1: \"coll a b c\"\n  assumes \"ccw a b d\" and 2: \"\\<not> coll a b d\"\n  shows \"ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\"", "lemma ccw_convex:\n  assumes uv: \"u \\<ge> 0\" \"v \\<ge> 0\" \"u + v = 1\"\n  assumes \"ccw a b c\"\n  assumes \"ccw a b d\"\n  assumes lex: \"coll a b c \\<Longrightarrow> coll a b d \\<Longrightarrow> lex b a\"\n  shows \"ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\"", "lemma ccw_sorted_scaleR: \"ccw.sortedP 0 xs \\<Longrightarrow> r > 0 \\<Longrightarrow> ccw.sortedP 0 (map ((*\\<^sub>R) r) xs)\"", "lemma ccw_sorted_implies_ccw'_sortedP:\n  assumes nonaligned: \"\\<And>y z. y \\<in> set Ps \\<Longrightarrow> z \\<in> set Ps \\<Longrightarrow> y \\<noteq> z \\<Longrightarrow> \\<not> coll 0 y z\"\n  assumes sorted: \"linorder_list0.sortedP (ccw 0) Ps\"\n  assumes \"distinct Ps\"\n  shows \"linorder_list0.sortedP (ccw' 0 ) Ps\""], "translations": [["", "lemma ccw'_imp_ccw: \"ccw' a b c \\<Longrightarrow> ccw a b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw' a b c \\<Longrightarrow> ccw a b c", "by (simp add: ccw_def)"], ["", "lemma ccw_ncoll_imp_ccw: \"ccw a b c \\<Longrightarrow> \\<not>coll a b c \\<Longrightarrow> ccw' a b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ccw a b c; det3 a b c \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> ccw' a b c", "by (simp add: ccw_def)"], ["", "lemma ccw_translate: \"ccw p (p + q) (p + r) = ccw 0 q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw p (p + q) (p + r) = ccw 0 q r", "by (auto simp: ccw_def psi_def lex_def)"], ["", "lemma ccw_translate_origin: \"NO_MATCH 0 p \\<Longrightarrow> ccw p q r = ccw 0 (q - p) (r - p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NO_MATCH (0::'a) p \\<Longrightarrow> ccw p q r = ccw 0 (q - p) (r - p)", "using ccw_translate[of p \"q - p\" \"r - p\"]"], ["proof (prove)\nusing this:\n  ccw p (p + (q - p)) (p + (r - p)) = ccw 0 (q - p) (r - p)\n\ngoal (1 subgoal):\n 1. NO_MATCH (0::'a) p \\<Longrightarrow> ccw p q r = ccw 0 (q - p) (r - p)", "by simp"], ["", "lemma psi_scale:\n  \"psi (r *\\<^sub>R a) (r *\\<^sub>R b) 0 = (if r > 0 then psi a b 0 else if r < 0 then psi 0 b a else True)\"\n  \"psi (r *\\<^sub>R a) 0 (r *\\<^sub>R b) = (if r > 0 then psi a 0 b else if r < 0 then psi b 0 a else True)\"\n  \"psi 0 (r *\\<^sub>R a) (r *\\<^sub>R b) = (if r > 0 then psi 0 a b else if r < 0 then psi b a 0 else True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. psi (r *\\<^sub>R a) (r *\\<^sub>R b) 0 =\n    (if 0 < r then psi a b 0 else if r < 0 then psi 0 b a else True) &&&\n    psi (r *\\<^sub>R a) 0 (r *\\<^sub>R b) =\n    (if 0 < r then psi a 0 b else if r < 0 then psi b 0 a else True) &&&\n    psi 0 (r *\\<^sub>R a) (r *\\<^sub>R b) =\n    (if 0 < r then psi 0 a b else if r < 0 then psi b a 0 else True)", "by (auto simp: psi_def lex_def det3_def' not_less algebra_split_simps)"], ["", "lemma ccw_scale23: \"ccw 0 a b \\<Longrightarrow> r > 0 \\<Longrightarrow> ccw 0 (r *\\<^sub>R a) (r *\\<^sub>R b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ccw 0 a b; 0 < r\\<rbrakk>\n    \\<Longrightarrow> ccw 0 (r *\\<^sub>R a) (r *\\<^sub>R b)", "by (auto simp: ccw_def psi_scale)"], ["", "lemma psi_notI: \"distinct3 p q r \\<Longrightarrow> psi p q r \\<Longrightarrow> \\<not> psi q p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct3 p q r; psi p q r\\<rbrakk>\n    \\<Longrightarrow> \\<not> psi q p r", "by (auto simp: algebra_simps psi_def lex_def)"], ["", "lemma not_lex_eq: \"\\<not> lex a b \\<longleftrightarrow> lex b a \\<and> a \\<noteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> Counterclockwise_2D_Arbitrary.lex a b) =\n    (Counterclockwise_2D_Arbitrary.lex b a \\<and> a \\<noteq> b)", "by (auto simp: algebra_simps lex_def prod_eq_iff)"], ["", "lemma lex_trans: \"lex a b \\<Longrightarrow> lex b c \\<Longrightarrow> lex a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex a b;\n     Counterclockwise_2D_Arbitrary.lex b c\\<rbrakk>\n    \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex a c", "by (auto simp: lex_def)"], ["", "lemma lex_sym_eqI: \"lex a b \\<Longrightarrow> lex b a \\<Longrightarrow> a = b\"\n  and lex_sym_eq_iff: \"lex a b \\<Longrightarrow> lex b a \\<longleftrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>Counterclockwise_2D_Arbitrary.lex a b;\n      Counterclockwise_2D_Arbitrary.lex b a\\<rbrakk>\n     \\<Longrightarrow> a = b) &&&\n    (Counterclockwise_2D_Arbitrary.lex a b \\<Longrightarrow>\n     Counterclockwise_2D_Arbitrary.lex b a = (a = b))", "by (auto simp: lex_def)"], ["", "lemma lex_refl[simp]: \"lex p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p p", "by (metis not_lex_eq)"], ["", "lemma psi_disjuncts:\n  \"distinct3 p q r \\<Longrightarrow> psi p q r \\<or> psi p r q \\<or> psi q r p \\<or> psi q p r \\<or> psi r p q \\<or> psi r q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct3 p q r \\<Longrightarrow>\n    psi p q r \\<or>\n    psi p r q \\<or>\n    psi q r p \\<or> psi q p r \\<or> psi r p q \\<or> psi r q p", "by (auto simp: psi_def not_lex_eq)"], ["", "lemma nlex_ccw_left: \"lex x 0 \\<Longrightarrow> ccw 0 (0, 1) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex x 0 \\<Longrightarrow> ccw 0 (0, 1) x", "by (auto simp: ccw_def lex_def psi_def ccw'_def det3_def')"], ["", "interpretation ccw_system123 ccw"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw_system123 ccw S", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p q r. ccw p q r \\<Longrightarrow> ccw q r p\n 2. \\<And>p q r.\n       \\<lbrakk>distinct3 p q r; in3 S p q r; ccw p q r\\<rbrakk>\n       \\<Longrightarrow> \\<not> ccw p r q\n 3. \\<And>p q r.\n       \\<lbrakk>distinct3 p q r; in3 S p q r\\<rbrakk>\n       \\<Longrightarrow> ccw p q r \\<or> ccw p r q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw p_ q_ r_ \\<Longrightarrow> ccw q_ r_ p_", "by (force simp: ccw_def ccw'_def det3_def' algebra_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p q r.\n       \\<lbrakk>distinct3 p q r; in3 S p q r; ccw p q r\\<rbrakk>\n       \\<Longrightarrow> \\<not> ccw p r q\n 2. \\<And>p q r.\n       \\<lbrakk>distinct3 p q r; in3 S p q r\\<rbrakk>\n       \\<Longrightarrow> ccw p q r \\<or> ccw p r q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct3 p_ q_ r_; in3 S p_ q_ r_; ccw p_ q_ r_\\<rbrakk>\n    \\<Longrightarrow> \\<not> ccw p_ r_ q_", "by (force simp: ccw_def ccw'_def det3_def' psi_def algebra_simps lex_sym_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q r.\n       \\<lbrakk>distinct3 p q r; in3 S p q r\\<rbrakk>\n       \\<Longrightarrow> ccw p q r \\<or> ccw p r q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct3 p_ q_ r_; in3 S p_ q_ r_\\<rbrakk>\n    \\<Longrightarrow> ccw p_ q_ r_ \\<or> ccw p_ r_ q_", "by (drule psi_disjuncts) (force simp: ccw_def ccw'_def det3_def' algebra_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lex_scaleR_nonneg: \"lex a b \\<Longrightarrow> r \\<ge> 0 \\<Longrightarrow> lex a (a + r *\\<^sub>R (b - a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex a b; 0 \\<le> r\\<rbrakk>\n    \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex a\n                       (a + r *\\<^sub>R (b - a))", "by (auto simp: lex_def)"], ["", "lemma lex_scale1_zero:\n    \"lex (v *\\<^sub>R u) 0 = (if v > 0 then lex u 0 else if v < 0 then lex 0 u else True)\"\n  and lex_scale2_zero:\n    \"lex 0 (v *\\<^sub>R u) = (if v > 0 then lex 0 u else if v < 0 then lex u 0 else True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R u) 0 =\n    (if 0 < v then Counterclockwise_2D_Arbitrary.lex u 0\n     else if v < 0 then Counterclockwise_2D_Arbitrary.lex 0 u else True) &&&\n    Counterclockwise_2D_Arbitrary.lex 0 (v *\\<^sub>R u) =\n    (if 0 < v then Counterclockwise_2D_Arbitrary.lex 0 u\n     else if v < 0 then Counterclockwise_2D_Arbitrary.lex u 0 else True)", "by (auto simp: lex_def prod_eq_iff less_eq_prod_def algebra_split_simps)"], ["", "lemma nlex_add:\n  assumes \"lex a 0\" \"lex b 0\"\n  shows \"lex (a + b) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (a + b) 0", "using assms"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex a 0\n  Counterclockwise_2D_Arbitrary.lex b 0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (a + b) 0", "by (auto simp: lex_def)"], ["", "lemma nlex_sum:\n  assumes \"finite X\"\n  assumes \"\\<And>x. x \\<in> X \\<Longrightarrow> lex (f x) 0\"\n  shows \"lex (sum f X) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (sum f X) 0", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  ?x \\<in> X \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex (f ?x) 0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (sum f X) 0", "by induction (auto intro!: nlex_add)"], ["", "lemma abs_add_nlex:\n  assumes \"coll 0 a b\"\n  assumes \"lex a 0\"\n  assumes \"lex b 0\"\n  shows \"abs (a + b) = abs a + abs b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>a + b\\<bar> = \\<bar>a\\<bar> + \\<bar>b\\<bar>", "proof (rule antisym[OF abs_triangle_ineq])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "have \"fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>", "using assms"], ["proof (prove)\nusing this:\n  coll 0 a b\n  Counterclockwise_2D_Arbitrary.lex a 0\n  Counterclockwise_2D_Arbitrary.lex b 0\n\ngoal (1 subgoal):\n 1. fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>", "by (auto simp add: det3_def' abs_prod_def lex_def)"], ["proof (state)\nthis:\n  fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "moreover"], ["proof (state)\nthis:\n  fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "{"], ["proof (state)\nthis:\n  fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "assume H: \"fst a < 0\" \"fst b < 0\""], ["proof (state)\nthis:\n  fst a < 0\n  fst b < 0\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "hence \"snd b \\<le> 0 \\<longleftrightarrow> snd a \\<le> 0\""], ["proof (prove)\nusing this:\n  fst a < 0\n  fst b < 0\n\ngoal (1 subgoal):\n 1. (snd b \\<le> 0) = (snd a \\<le> 0)", "using assms"], ["proof (prove)\nusing this:\n  fst a < 0\n  fst b < 0\n  coll 0 a b\n  Counterclockwise_2D_Arbitrary.lex a 0\n  Counterclockwise_2D_Arbitrary.lex b 0\n\ngoal (1 subgoal):\n 1. (snd b \\<le> 0) = (snd a \\<le> 0)", "by (auto simp: lex_def det3_def' mult.commute)\n        (metis mult_le_cancel_left_neg mult_zero_right)+"], ["proof (state)\nthis:\n  (snd b \\<le> 0) = (snd a \\<le> 0)\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "hence \"\\<bar>snd a\\<bar> + \\<bar>snd b\\<bar> \\<le> \\<bar>snd a + snd b\\<bar>\""], ["proof (prove)\nusing this:\n  (snd b \\<le> 0) = (snd a \\<le> 0)\n\ngoal (1 subgoal):\n 1. \\<bar>snd a\\<bar> + \\<bar>snd b\\<bar> \\<le> \\<bar>snd a + snd b\\<bar>", "using H"], ["proof (prove)\nusing this:\n  (snd b \\<le> 0) = (snd a \\<le> 0)\n  fst a < 0\n  fst b < 0\n\ngoal (1 subgoal):\n 1. \\<bar>snd a\\<bar> + \\<bar>snd b\\<bar> \\<le> \\<bar>snd a + snd b\\<bar>", "by auto"], ["proof (state)\nthis:\n  \\<bar>snd a\\<bar> + \\<bar>snd b\\<bar> \\<le> \\<bar>snd a + snd b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "}"], ["proof (state)\nthis:\n  \\<lbrakk>fst a < 0; fst b < 0\\<rbrakk>\n  \\<Longrightarrow> \\<bar>snd a\\<bar> + \\<bar>snd b\\<bar>\n                    \\<le> \\<bar>snd a + snd b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "hence \"snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>fst a < 0; fst b < 0\\<rbrakk>\n  \\<Longrightarrow> \\<bar>snd a\\<bar> + \\<bar>snd b\\<bar>\n                    \\<le> \\<bar>snd a + snd b\\<bar>\n\ngoal (1 subgoal):\n 1. snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>fst a < 0; fst b < 0\\<rbrakk>\n  \\<Longrightarrow> \\<bar>snd a\\<bar> + \\<bar>snd b\\<bar>\n                    \\<le> \\<bar>snd a + snd b\\<bar>\n  coll 0 a b\n  Counterclockwise_2D_Arbitrary.lex a 0\n  Counterclockwise_2D_Arbitrary.lex b 0\n\ngoal (1 subgoal):\n 1. snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>", "by (auto simp add: det3_def' abs_prod_def lex_def)"], ["proof (state)\nthis:\n  snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "ultimately"], ["proof (chain)\npicking this:\n  fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\n  snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>", "show \"\\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>\""], ["proof (prove)\nusing this:\n  fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\n  snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>", "unfolding less_eq_prod_def"], ["proof (prove)\nusing this:\n  fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar>\n  snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>\n\ngoal (1 subgoal):\n 1. fst (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> fst \\<bar>a + b\\<bar> \\<and>\n    snd (\\<bar>a\\<bar> + \\<bar>b\\<bar>) \\<le> snd \\<bar>a + b\\<bar>", ".."], ["proof (state)\nthis:\n  \\<bar>a\\<bar> + \\<bar>b\\<bar> \\<le> \\<bar>a + b\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_sum_list: \"(\\<And>x. x \\<in> set xs \\<Longrightarrow> lex x 0) \\<Longrightarrow> lex (sum_list xs) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set xs \\<Longrightarrow>\n        Counterclockwise_2D_Arbitrary.lex x 0) \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex (sum_list xs) 0", "by (induct xs) (auto simp: nlex_add)"], ["", "lemma\n  abs_sum_list_coll:\n  assumes coll: \"list_all (coll 0 x) xs\"\n  assumes \"x \\<noteq> 0\"\n  assumes up: \"list_all (\\<lambda>x. lex x 0) xs\"\n  shows \"abs (sum_list xs) = sum_list (map abs xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sum_list xs\\<bar> = sum_list (map abs xs)", "using assms"], ["proof (prove)\nusing this:\n  list_all (coll 0 x) xs\n  x \\<noteq> 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) xs\n\ngoal (1 subgoal):\n 1. \\<bar>sum_list xs\\<bar> = sum_list (map abs xs)", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (coll 0 x) []; x \\<noteq> 0;\n     list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n      []\\<rbrakk>\n    \\<Longrightarrow> \\<bar>sum_list []\\<bar> = sum_list (map abs [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>list_all (coll 0 x) xs; x \\<noteq> 0;\n                 list_all\n                  (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n                  xs\\<rbrakk>\n                \\<Longrightarrow> \\<bar>sum_list xs\\<bar> =\n                                  sum_list (map abs xs);\n        list_all (coll 0 x) (a # xs); x \\<noteq> 0;\n        list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n         (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<bar>sum_list (a # xs)\\<bar> =\n                         sum_list (map abs (a # xs))", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>list_all (coll 0 x) ys; x \\<noteq> 0;\n   list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) ys\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_list ys\\<bar> = sum_list (map abs ys)\n  list_all (coll 0 x) (y # ys)\n  x \\<noteq> 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) (y # ys)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (coll 0 x) []; x \\<noteq> 0;\n     list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n      []\\<rbrakk>\n    \\<Longrightarrow> \\<bar>sum_list []\\<bar> = sum_list (map abs [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>list_all (coll 0 x) xs; x \\<noteq> 0;\n                 list_all\n                  (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n                  xs\\<rbrakk>\n                \\<Longrightarrow> \\<bar>sum_list xs\\<bar> =\n                                  sum_list (map abs xs);\n        list_all (coll 0 x) (a # xs); x \\<noteq> 0;\n        list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n         (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<bar>sum_list (a # xs)\\<bar> =\n                         sum_list (map abs (a # xs))", "hence \"coll 0 x y\" \"coll 0 x (sum_list ys)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all (coll 0 x) ys; x \\<noteq> 0;\n   list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) ys\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_list ys\\<bar> = sum_list (map abs ys)\n  list_all (coll 0 x) (y # ys)\n  x \\<noteq> 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) (y # ys)\n\ngoal (1 subgoal):\n 1. coll 0 x y &&& coll 0 x (sum_list ys)", "by (auto simp: list_all_iff intro!: coll_sum_list)"], ["proof (state)\nthis:\n  coll 0 x y\n  coll 0 x (sum_list ys)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (coll 0 x) []; x \\<noteq> 0;\n     list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n      []\\<rbrakk>\n    \\<Longrightarrow> \\<bar>sum_list []\\<bar> = sum_list (map abs [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>list_all (coll 0 x) xs; x \\<noteq> 0;\n                 list_all\n                  (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n                  xs\\<rbrakk>\n                \\<Longrightarrow> \\<bar>sum_list xs\\<bar> =\n                                  sum_list (map abs xs);\n        list_all (coll 0 x) (a # xs); x \\<noteq> 0;\n        list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n         (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<bar>sum_list (a # xs)\\<bar> =\n                         sum_list (map abs (a # xs))", "hence \"coll 0 y (sum_list ys)\""], ["proof (prove)\nusing this:\n  coll 0 x y\n  coll 0 x (sum_list ys)\n\ngoal (1 subgoal):\n 1. coll 0 y (sum_list ys)", "using \\<open>x \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  coll 0 x y\n  coll 0 x (sum_list ys)\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coll 0 y (sum_list ys)", "by (rule coll_trans)"], ["proof (state)\nthis:\n  coll 0 y (sum_list ys)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (coll 0 x) []; x \\<noteq> 0;\n     list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n      []\\<rbrakk>\n    \\<Longrightarrow> \\<bar>sum_list []\\<bar> = sum_list (map abs [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>list_all (coll 0 x) xs; x \\<noteq> 0;\n                 list_all\n                  (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n                  xs\\<rbrakk>\n                \\<Longrightarrow> \\<bar>sum_list xs\\<bar> =\n                                  sum_list (map abs xs);\n        list_all (coll 0 x) (a # xs); x \\<noteq> 0;\n        list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n         (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<bar>sum_list (a # xs)\\<bar> =\n                         sum_list (map abs (a # xs))", "hence \"\\<bar>y + sum_list ys\\<bar> = abs y + abs (sum_list ys)\""], ["proof (prove)\nusing this:\n  coll 0 y (sum_list ys)\n\ngoal (1 subgoal):\n 1. \\<bar>y + sum_list ys\\<bar> = \\<bar>y\\<bar> + \\<bar>sum_list ys\\<bar>", "using Cons"], ["proof (prove)\nusing this:\n  coll 0 y (sum_list ys)\n  \\<lbrakk>list_all (coll 0 x) ys; x \\<noteq> 0;\n   list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) ys\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_list ys\\<bar> = sum_list (map abs ys)\n  list_all (coll 0 x) (y # ys)\n  x \\<noteq> 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) (y # ys)\n\ngoal (1 subgoal):\n 1. \\<bar>y + sum_list ys\\<bar> = \\<bar>y\\<bar> + \\<bar>sum_list ys\\<bar>", "by (subst abs_add_nlex) (auto simp: list_all_iff lex_sum_list)"], ["proof (state)\nthis:\n  \\<bar>y + sum_list ys\\<bar> = \\<bar>y\\<bar> + \\<bar>sum_list ys\\<bar>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (coll 0 x) []; x \\<noteq> 0;\n     list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n      []\\<rbrakk>\n    \\<Longrightarrow> \\<bar>sum_list []\\<bar> = sum_list (map abs [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>list_all (coll 0 x) xs; x \\<noteq> 0;\n                 list_all\n                  (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n                  xs\\<rbrakk>\n                \\<Longrightarrow> \\<bar>sum_list xs\\<bar> =\n                                  sum_list (map abs xs);\n        list_all (coll 0 x) (a # xs); x \\<noteq> 0;\n        list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n         (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<bar>sum_list (a # xs)\\<bar> =\n                         sum_list (map abs (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<bar>y + sum_list ys\\<bar> = \\<bar>y\\<bar> + \\<bar>sum_list ys\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>sum_list (y # ys)\\<bar> = sum_list (map abs (y # ys))", "using Cons"], ["proof (prove)\nusing this:\n  \\<bar>y + sum_list ys\\<bar> = \\<bar>y\\<bar> + \\<bar>sum_list ys\\<bar>\n  \\<lbrakk>list_all (coll 0 x) ys; x \\<noteq> 0;\n   list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) ys\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_list ys\\<bar> = sum_list (map abs ys)\n  list_all (coll 0 x) (y # ys)\n  x \\<noteq> 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) (y # ys)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_list (y # ys)\\<bar> = sum_list (map abs (y # ys))", "by simp"], ["proof (state)\nthis:\n  \\<bar>sum_list (y # ys)\\<bar> = sum_list (map abs (y # ys))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all (coll 0 x) []; x \\<noteq> 0;\n     list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0)\n      []\\<rbrakk>\n    \\<Longrightarrow> \\<bar>sum_list []\\<bar> = sum_list (map abs [])", "qed simp"], ["", "lemma lex_diff1: \"lex (a - b) c = lex a (c + b)\"\n  and lex_diff2: \"lex c (a - b) = lex (c + b) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (a - b) c =\n    Counterclockwise_2D_Arbitrary.lex a (c + b) &&&\n    Counterclockwise_2D_Arbitrary.lex c (a - b) =\n    Counterclockwise_2D_Arbitrary.lex (c + b) a", "by (auto simp: lex_def)"], ["", "lemma sum_list_eq_0_iff_nonpos:\n  fixes xs::\"'a::ordered_ab_group_add list\"\n  shows \"list_all (\\<lambda>x. x \\<le> 0) xs \\<Longrightarrow> sum_list xs = 0 \\<longleftrightarrow> (\\<forall>n\\<in>set xs. n = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x \\<le> (0::'a)) xs \\<Longrightarrow>\n    (sum_list xs = (0::'a)) = (\\<forall>n\\<in>set xs. n = (0::'a))", "by (auto simp: list_all_iff sum_list_sum_nth sum_nonpos_eq_0_iff)\n    (auto simp add: in_set_conv_nth)"], ["", "lemma sum_list_nlex_eq_zeroI:\n  assumes nlex: \"list_all (\\<lambda>x. lex x 0) xs\"\n  assumes \"sum_list xs = 0\"\n  assumes \"x \\<in> set xs\"\n  shows \"x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x = 0", "from assms(2)"], ["proof (chain)\npicking this:\n  sum_list xs = 0", "have z1: \"sum_list (map fst xs) = 0\" and z2: \"sum_list (map snd xs) = 0\""], ["proof (prove)\nusing this:\n  sum_list xs = 0\n\ngoal (1 subgoal):\n 1. sum_list (map fst xs) = 0 &&& sum_list (map snd xs) = 0", "by (auto simp: prod_eq_iff fst_sum_list snd_sum_list)"], ["proof (state)\nthis:\n  sum_list (map fst xs) = 0\n  sum_list (map snd xs) = 0\n\ngoal (1 subgoal):\n 1. x = 0", "from nlex"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) xs", "have \"list_all (\\<lambda>x. x \\<le> 0) (map fst xs)\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) xs\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x \\<le> 0) (map fst xs)", "by (auto simp: lex_def list_all_iff)"], ["proof (state)\nthis:\n  list_all (\\<lambda>x. x \\<le> 0) (map fst xs)\n\ngoal (1 subgoal):\n 1. x = 0", "from sum_list_eq_0_iff_nonpos[OF this] z1 nlex"], ["proof (chain)\npicking this:\n  (sum_list (map fst xs) = 0) = (\\<forall>n\\<in>set (map fst xs). n = 0)\n  sum_list (map fst xs) = 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) xs", "have\n    z1': \"list_all (\\<lambda>x. x = 0) (map fst xs)\"\n    and \"list_all (\\<lambda>x. x \\<le> 0) (map snd xs)\""], ["proof (prove)\nusing this:\n  (sum_list (map fst xs) = 0) = (\\<forall>n\\<in>set (map fst xs). n = 0)\n  sum_list (map fst xs) = 0\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) xs\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x = 0) (map fst xs) &&&\n    list_all (\\<lambda>x. x \\<le> 0) (map snd xs)", "by (auto simp: list_all_iff lex_def)"], ["proof (state)\nthis:\n  list_all (\\<lambda>x. x = 0) (map fst xs)\n  list_all (\\<lambda>x. x \\<le> 0) (map snd xs)\n\ngoal (1 subgoal):\n 1. x = 0", "from sum_list_eq_0_iff_nonpos[OF this(2)] z2"], ["proof (chain)\npicking this:\n  (sum_list (map snd xs) = 0) = (\\<forall>n\\<in>set (map snd xs). n = 0)\n  sum_list (map snd xs) = 0", "have \"list_all (\\<lambda>x. x = 0) (map snd xs)\""], ["proof (prove)\nusing this:\n  (sum_list (map snd xs) = 0) = (\\<forall>n\\<in>set (map snd xs). n = 0)\n  sum_list (map snd xs) = 0\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x = 0) (map snd xs)", "by (simp add: list_all_iff)"], ["proof (state)\nthis:\n  list_all (\\<lambda>x. x = 0) (map snd xs)\n\ngoal (1 subgoal):\n 1. x = 0", "with z1'"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>x. x = 0) (map fst xs)\n  list_all (\\<lambda>x. x = 0) (map snd xs)", "show \"x = 0\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. x = 0) (map fst xs)\n  list_all (\\<lambda>x. x = 0) (map snd xs)\n\ngoal (1 subgoal):\n 1. x = 0", "by (auto simp: list_all_iff zero_prod_def assms prod_eq_iff)"], ["proof (state)\nthis:\n  x = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_eq0I: \"(\\<forall>x\\<in>set xs. x = 0) \\<Longrightarrow> sum_list xs = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. x = (0::'a) \\<Longrightarrow>\n    sum_list xs = (0::'a)", "by (induct xs) auto"], ["", "lemma sum_list_nlex_eq_zero_iff:\n  assumes nlex: \"list_all (\\<lambda>x. lex x 0) xs\"\n  shows \"sum_list xs = 0 \\<longleftrightarrow> list_all ((=) 0) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum_list xs = 0) = list_all ((=) 0) xs", "using assms"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. Counterclockwise_2D_Arbitrary.lex x 0) xs\n\ngoal (1 subgoal):\n 1. (sum_list xs = 0) = list_all ((=) 0) xs", "by (auto intro: sum_list_nlex_eq_zeroI sum_list_eq0I simp: list_all_iff)"], ["", "lemma\n  assumes \"lex p q\" \"lex q r\" \"0 \\<le> a\" \"0 \\<le> b\" \"0 \\<le> c\" \"a + b + c = 1\"\n  assumes comb_def: \"comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r\"\n  shows lex_convex3: \"lex p comb\" \"lex comb r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p comb &&&\n    Counterclockwise_2D_Arbitrary.lex comb r", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. Counterclockwise_2D_Arbitrary.lex p comb\n 2. Counterclockwise_2D_Arbitrary.lex comb r", "from convex3_alt[OF assms(3-6), of p q r]"], ["proof (chain)\npicking this:\n  (\\<And>u v.\n      \\<lbrakk>a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r =\n               p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p);\n       0 \\<le> u; 0 \\<le> v; u + v \\<le> 1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain u v where\n    uv: \"a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r = p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p)\" \"0 \\<le> u\" \"0 \\<le> v\" \"u + v \\<le> 1\""], ["proof (prove)\nusing this:\n  (\\<And>u v.\n      \\<lbrakk>a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r =\n               p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p);\n       0 \\<le> u; 0 \\<le> v; u + v \\<le> 1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r =\n                 p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p);\n         0 \\<le> u; 0 \\<le> v; u + v \\<le> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r =\n  p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p)\n  0 \\<le> u\n  0 \\<le> v\n  u + v \\<le> 1\n\ngoal (2 subgoals):\n 1. Counterclockwise_2D_Arbitrary.lex p comb\n 2. Counterclockwise_2D_Arbitrary.lex comb r", "have \"lex p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p r", "using assms"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p q\n  Counterclockwise_2D_Arbitrary.lex q r\n  0 \\<le> a\n  0 \\<le> b\n  0 \\<le> c\n  a + b + c = 1\n  comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p r", "by (metis lex_trans)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p r\n\ngoal (2 subgoals):\n 1. Counterclockwise_2D_Arbitrary.lex p comb\n 2. Counterclockwise_2D_Arbitrary.lex comb r", "hence \"lex (v *\\<^sub>R (p - r)) 0\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r)) 0", "using uv"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p r\n  a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r =\n  p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p)\n  0 \\<le> u\n  0 \\<le> v\n  u + v \\<le> 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r)) 0", "by (simp add: lex_scale1_zero lex_diff1)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r)) 0\n\ngoal (2 subgoals):\n 1. Counterclockwise_2D_Arbitrary.lex p comb\n 2. Counterclockwise_2D_Arbitrary.lex comb r", "also"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r)) 0\n\ngoal (2 subgoals):\n 1. Counterclockwise_2D_Arbitrary.lex p comb\n 2. Counterclockwise_2D_Arbitrary.lex comb r", "have \"lex 0 (u *\\<^sub>R (q - p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex 0 (u *\\<^sub>R (q - p))", "using \\<open>lex p q\\<close> uv"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p q\n  a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r =\n  p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p)\n  0 \\<le> u\n  0 \\<le> v\n  u + v \\<le> 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex 0 (u *\\<^sub>R (q - p))", "by (simp add: lex_scale2_zero lex_diff2)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex 0 (u *\\<^sub>R (q - p))\n\ngoal (2 subgoals):\n 1. Counterclockwise_2D_Arbitrary.lex p comb\n 2. Counterclockwise_2D_Arbitrary.lex comb r", "finally (lex_trans)"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r))\n   (u *\\<^sub>R (q - p))", "show \"lex p comb\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r))\n   (u *\\<^sub>R (q - p))\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p comb", "unfolding comb_def uv"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex (v *\\<^sub>R (p - r))\n   (u *\\<^sub>R (q - p))\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p\n     (p + u *\\<^sub>R (q - p) + v *\\<^sub>R (r - p))", "by (simp add: lex_def prod_eq_iff algebra_simps)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p comb\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "from comb_def"], ["proof (chain)\npicking this:\n  comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r", "have comb_def': \"comb = c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p\""], ["proof (prove)\nusing this:\n  comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r\n\ngoal (1 subgoal):\n 1. comb = c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p", "by simp"], ["proof (state)\nthis:\n  comb = c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "from assms"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex p q\n  Counterclockwise_2D_Arbitrary.lex q r\n  0 \\<le> a\n  0 \\<le> b\n  0 \\<le> c\n  a + b + c = 1\n  comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r", "have \"c + b + a = 1\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p q\n  Counterclockwise_2D_Arbitrary.lex q r\n  0 \\<le> a\n  0 \\<le> b\n  0 \\<le> c\n  a + b + c = 1\n  comb = a *\\<^sub>R p + b *\\<^sub>R q + c *\\<^sub>R r\n\ngoal (1 subgoal):\n 1. c + b + a = 1", "by simp"], ["proof (state)\nthis:\n  c + b + a = 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "from convex3_alt[OF assms(5,4,3) this, of r q p]"], ["proof (chain)\npicking this:\n  (\\<And>u v.\n      \\<lbrakk>c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p =\n               r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r);\n       0 \\<le> u; 0 \\<le> v; u + v \\<le> 1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain u v where uv: \"c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p = r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r)\"\n    \"0 \\<le> u\" \"0 \\<le> v\" \"u + v \\<le> 1\""], ["proof (prove)\nusing this:\n  (\\<And>u v.\n      \\<lbrakk>c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p =\n               r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r);\n       0 \\<le> u; 0 \\<le> v; u + v \\<le> 1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p =\n                 r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r);\n         0 \\<le> u; 0 \\<le> v; u + v \\<le> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p =\n  r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r)\n  0 \\<le> u\n  0 \\<le> v\n  u + v \\<le> 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "have \"lex (u *\\<^sub>R (q - r)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r)) 0", "using uv \\<open>lex q r\\<close>"], ["proof (prove)\nusing this:\n  c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p =\n  r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r)\n  0 \\<le> u\n  0 \\<le> v\n  u + v \\<le> 1\n  Counterclockwise_2D_Arbitrary.lex q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r)) 0", "by (simp add: lex_scale1_zero lex_diff1)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r)) 0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "also"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r)) 0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "have \"lex 0  (v *\\<^sub>R (r - p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex 0 (v *\\<^sub>R (r - p))", "using uv \\<open>lex p r\\<close>"], ["proof (prove)\nusing this:\n  c *\\<^sub>R r + b *\\<^sub>R q + a *\\<^sub>R p =\n  r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r)\n  0 \\<le> u\n  0 \\<le> v\n  u + v \\<le> 1\n  Counterclockwise_2D_Arbitrary.lex p r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex 0 (v *\\<^sub>R (r - p))", "by (simp add: lex_scale2_zero lex_diff2)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex 0 (v *\\<^sub>R (r - p))\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "finally (lex_trans)"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r))\n   (v *\\<^sub>R (r - p))", "show \"lex comb r\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r))\n   (v *\\<^sub>R (r - p))\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex comb r", "unfolding comb_def' uv"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R (q - r))\n   (v *\\<^sub>R (r - p))\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex\n     (r + u *\\<^sub>R (q - r) + v *\\<^sub>R (p - r)) r", "by (simp add: lex_def prod_eq_iff algebra_simps)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex comb r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_convex_self2:\n  assumes \"lex p q\" \"0 \\<le> a\" \"a \\<le> 1\"\n  defines \"r \\<equiv> a *\\<^sub>R p + (1 - a) *\\<^sub>R q\"\n  shows \"lex p r\" (is ?th1)\n    and \"lex r q\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p r &&&\n    Counterclockwise_2D_Arbitrary.lex r q", "using lex_convex3[OF \\<open>lex p q\\<close>, of q a \"1 - a\" 0 r]\n      assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex q q; 0 \\<le> a; 0 \\<le> 1 - a;\n   0 \\<le> 0; a + (1 - a) + 0 = 1;\n   r = a *\\<^sub>R p + (1 - a) *\\<^sub>R q + 0 *\\<^sub>R q\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex p r\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex q q; 0 \\<le> a; 0 \\<le> 1 - a;\n   0 \\<le> 0; a + (1 - a) + 0 = 1;\n   r = a *\\<^sub>R p + (1 - a) *\\<^sub>R q + 0 *\\<^sub>R q\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex r q\n  Counterclockwise_2D_Arbitrary.lex p q\n  0 \\<le> a\n  a \\<le> 1\n  r \\<equiv> a *\\<^sub>R p + (1 - a) *\\<^sub>R q\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p r &&&\n    Counterclockwise_2D_Arbitrary.lex r q", "by (simp_all add: r_def)"], ["", "lemma lex_uminus0[simp]: \"lex (-a) 0 = lex 0 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (- a) 0 =\n    Counterclockwise_2D_Arbitrary.lex 0 a", "by (auto simp: lex_def)"], ["", "lemma\n  lex_fst_zero_imp:\n  \"fst x = 0 \\<Longrightarrow> lex x 0 \\<Longrightarrow> lex y 0 \\<Longrightarrow> \\<not>coll 0 x y \\<Longrightarrow> ccw' 0 y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x = 0; Counterclockwise_2D_Arbitrary.lex x 0;\n     Counterclockwise_2D_Arbitrary.lex y 0; det3 0 x y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> ccw' 0 y x", "by (auto simp: ccw'_def det3_def' lex_def algebra_split_simps)"], ["", "lemma lex_ccw_left: \"lex x y \\<Longrightarrow> r > 0 \\<Longrightarrow> ccw y (y + (0, r)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex x y; 0 < r\\<rbrakk>\n    \\<Longrightarrow> ccw y (y + (0, r)) x", "by (auto simp: ccw_def ccw'_def det3_def' algebra_simps lex_def psi_def)"], ["", "lemma lex_translate_origin: \"NO_MATCH 0 a \\<Longrightarrow> lex a b = lex 0 (b - a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NO_MATCH (0::'a) a \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex a b =\n    Counterclockwise_2D_Arbitrary.lex 0 (b - a)", "by (auto simp: lex_def)"], ["", "subsection \\<open>Order prover setup\\<close>"], ["", "definition \"lexs p q \\<longleftrightarrow> (lex p q \\<and> p \\<noteq> q)\""], ["", "lemma lexs_irrefl: \"\\<not> lexs p p\"\n  and lexs_imp_lex: \"lexs x y \\<Longrightarrow> lex x y\"\n  and not_lexs: \"(\\<not> lexs x y) = (lex y x)\"\n  and not_lex: \"(\\<not> lex x y) = (lexs y x)\"\n  and eq_lex_refl: \"x = y \\<Longrightarrow> lex x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> lexs p p &&&\n     (lexs x y \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex x y)) &&&\n    (\\<not> lexs x y) = Counterclockwise_2D_Arbitrary.lex y x &&&\n    (\\<not> Counterclockwise_2D_Arbitrary.lex x y) = lexs y x &&&\n    (x = y \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex x y)", "by (auto simp: lexs_def lex_def prod_eq_iff)"], ["", "lemma lexs_trans: \"lexs x y \\<Longrightarrow> lexs y z \\<Longrightarrow> lexs x z\"\n  and lexs_lex_trans: \"lexs x y \\<Longrightarrow> lex y z \\<Longrightarrow> lexs x z\"\n  and lex_lexs_trans: \"lex x y \\<Longrightarrow> lexs y z \\<Longrightarrow> lexs x z\"\n  and lex_neq_trans: \"lex a b \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> lexs a b\"\n  and neq_lex_trans: \"a \\<noteq> b \\<Longrightarrow> lex a b \\<Longrightarrow> lexs a b\"\n  and lexs_imp_neq: \"lexs a b \\<Longrightarrow> a \\<noteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>lexs x y; lexs y z\\<rbrakk> \\<Longrightarrow> lexs x z) &&&\n     (\\<lbrakk>lexs x y; Counterclockwise_2D_Arbitrary.lex y z\\<rbrakk>\n      \\<Longrightarrow> lexs x z) &&&\n     (\\<lbrakk>Counterclockwise_2D_Arbitrary.lex x y; lexs y z\\<rbrakk>\n      \\<Longrightarrow> lexs x z)) &&&\n    (\\<lbrakk>Counterclockwise_2D_Arbitrary.lex a b; a \\<noteq> b\\<rbrakk>\n     \\<Longrightarrow> lexs a b) &&&\n    (\\<lbrakk>a \\<noteq> b; Counterclockwise_2D_Arbitrary.lex a b\\<rbrakk>\n     \\<Longrightarrow> lexs a b) &&&\n    (lexs a b \\<Longrightarrow> a \\<noteq> b)", "by (auto simp: lexs_def lex_def prod_eq_iff)"], ["", "declare\n  lexs_irrefl[THEN notE, order add less_reflE: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lex_refl[order add le_refl: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lexs_imp_lex[order add less_imp_le: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare\n  not_lexs[THEN iffD2, order add not_lessI: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare not_lex[THEN iffD2, order add not_leI: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare\n  not_lexs[THEN iffD1, order add not_lessD: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare not_lex[THEN iffD1, order add not_leD: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lex_sym_eqI[order add eqI: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare eq_lex_refl[order add eqD1: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare sym[THEN eq_lex_refl, order add eqD2: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lexs_trans[order add less_trans: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lexs_lex_trans[order add less_le_trans: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lex_lexs_trans[order add le_less_trans: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lex_trans[order add le_trans: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lex_neq_trans[order add le_neq_trans: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare neq_lex_trans[order add neq_le_trans: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare lexs_imp_neq[order add less_imp_neq: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare\n  eq_neq_eq_imp_neq[order add eq_neq_eq_imp_neq: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "declare not_sym[order add not_sym: linorder \"(=) :: point => point => bool\" lex lexs]"], ["", "subsection \\<open>Contradictions\\<close>"], ["", "lemma\n  assumes d: \"distinct4 s p q r\"\n  shows contra1: \"\\<not>(lex p q \\<and> lex q r \\<and> lex r s \\<and> indelta s p q r)\" (is ?th1)\n    and contra2: \"\\<not>(lex s p \\<and> lex p q \\<and> lex q r \\<and> indelta s p q r)\" (is ?th2)\n    and contra3: \"\\<not>(lex p r \\<and> lex p s \\<and> lex q r \\<and> lex q s \\<and> insquare p r q s)\" (is ?th3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "assume \"det3 s p q = 0\" \"det3 s q r = 0\" \"det3 s r p = 0\" \"det3 p q r = 0\""], ["proof (state)\nthis:\n  coll s p q\n  coll s q r\n  coll s r p\n  coll p q r\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "hence ?th1 ?th2 ?th3"], ["proof (prove)\nusing this:\n  coll s p q\n  coll s q r\n  coll s r p\n  coll p q r\n\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "using d"], ["proof (prove)\nusing this:\n  coll s p q\n  coll s q r\n  coll s r p\n  coll p q r\n  distinct4 s p q r\n\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "by (auto simp add: det3_def' ccw'_def ccw_def psi_def algebra_simps)"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q s \\<and>\n                            insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q s \\<and>\n                            insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q s \\<and>\n                            insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "assume *: \"\\<not>(det3 s p q = 0 \\<and> det3 s q r = 0 \\<and> det3 s r p = 0 \\<and> det3 p q r = 0)\""], ["proof (state)\nthis:\n  \\<not> (coll s p q \\<and> coll s q r \\<and> coll s r p \\<and> coll p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "{"], ["proof (state)\nthis:\n  \\<not> (coll s p q \\<and> coll s q r \\<and> coll s r p \\<and> coll p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "assume d0: \"det3 p q r = 0\""], ["proof (state)\nthis:\n  coll p q r\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "with d"], ["proof (chain)\npicking this:\n  distinct4 s p q r\n  coll p q r", "have \"?th1 \\<and> ?th2\""], ["proof (prove)\nusing this:\n  distinct4 s p q r\n  coll p q r\n\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) \\<and>\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)", "by (force simp add: det3_def' ccw'_def ccw_def psi_def algebra_simps)"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "}"], ["proof (state)\nthis:\n  coll p q r \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "moreover"], ["proof (state)\nthis:\n  coll p q r \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "{"], ["proof (state)\nthis:\n  coll p q r \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "assume dp: \"det3 p q r \\<noteq> 0\""], ["proof (state)\nthis:\n  det3 p q r \\<noteq> 0\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "have \"?th1 \\<and> ?th2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) \\<and>\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)", "unfolding de_Morgan_disj[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r \\<or>\n            Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)", "proof (rule notI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "case prems: 1"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n  Counterclockwise_2D_Arbitrary.lex s p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "hence **: \"indelta s p q r\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n  Counterclockwise_2D_Arbitrary.lex s p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r\n\ngoal (1 subgoal):\n 1. indelta s p q r", "by auto"], ["proof (state)\nthis:\n  indelta s p q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "hence nonnegs: \"det3 p q r \\<ge> 0\" \"0 \\<le> det3 s q r\" \"0 \\<le> det3 p s r\" \"0 \\<le> det3 p q s\""], ["proof (prove)\nusing this:\n  indelta s p q r\n\ngoal (1 subgoal):\n 1. (0 \\<le> det3 p q r &&& 0 \\<le> det3 s q r) &&&\n    0 \\<le> det3 p s r &&& 0 \\<le> det3 p q s", "by (auto simp: ccw_def ccw'_def det3_def' algebra_simps)"], ["proof (state)\nthis:\n  0 \\<le> det3 p q r\n  0 \\<le> det3 s q r\n  0 \\<le> det3 p s r\n  0 \\<le> det3 p q s\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "hence det_pos: \"det3 p q r > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> det3 p q r\n  0 \\<le> det3 s q r\n  0 \\<le> det3 p s r\n  0 \\<le> det3 p q s\n\ngoal (1 subgoal):\n 1. 0 < det3 p q r", "using dp"], ["proof (prove)\nusing this:\n  0 \\<le> det3 p q r\n  0 \\<le> det3 s q r\n  0 \\<le> det3 p s r\n  0 \\<le> det3 p q s\n  det3 p q r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < det3 p q r", "by simp"], ["proof (state)\nthis:\n  0 < det3 p q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "have det_eq: \"det3 s q r + det3 p s r + det3 p q s = det3 p q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 s q r + det3 p s r + det3 p q s = det3 p q r", "by (auto simp: ccw_def det3_def' algebra_simps)"], ["proof (state)\nthis:\n  det3 s q r + det3 p s r + det3 p q s = det3 p q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "hence det_div_eq:\n          \"det3 s q r / det3 p q r + det3 p s r / det3 p q r + det3 p q s / det3 p q r = 1\""], ["proof (prove)\nusing this:\n  det3 s q r + det3 p s r + det3 p q s = det3 p q r\n\ngoal (1 subgoal):\n 1. det3 s q r / det3 p q r + det3 p s r / det3 p q r +\n    det3 p q s / det3 p q r =\n    1", "using det_pos"], ["proof (prove)\nusing this:\n  det3 s q r + det3 p s r + det3 p q s = det3 p q r\n  0 < det3 p q r\n\ngoal (1 subgoal):\n 1. det3 s q r / det3 p q r + det3 p s r / det3 p q r +\n    det3 p q s / det3 p q r =\n    1", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  det3 s q r / det3 p q r + det3 p s r / det3 p q r +\n  det3 p q s / det3 p q r =\n  1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "from lex_convex3[OF _ _ _ _ _ det_div_eq convex_comb_dets[OF det_pos, of s]]"], ["proof (chain)\npicking this:\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p q;\n   Counterclockwise_2D_Arbitrary.lex q r; 0 \\<le> det3 s q r / det3 p q r;\n   0 \\<le> det3 p s r / det3 p q r; 0 \\<le> det3 p q s / det3 p q r\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex p s\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p q;\n   Counterclockwise_2D_Arbitrary.lex q r; 0 \\<le> det3 s q r / det3 p q r;\n   0 \\<le> det3 p s r / det3 p q r; 0 \\<le> det3 p q s / det3 p q r\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex s r", "have \"lex p s\" \"lex s r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p q;\n   Counterclockwise_2D_Arbitrary.lex q r; 0 \\<le> det3 s q r / det3 p q r;\n   0 \\<le> det3 p s r / det3 p q r; 0 \\<le> det3 p q s / det3 p q r\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex p s\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p q;\n   Counterclockwise_2D_Arbitrary.lex q r; 0 \\<le> det3 s q r / det3 p q r;\n   0 \\<le> det3 p s r / det3 p q r; 0 \\<le> det3 p q s / det3 p q r\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex s r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p s &&&\n    Counterclockwise_2D_Arbitrary.lex s r", "using prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p q;\n   Counterclockwise_2D_Arbitrary.lex q r; 0 \\<le> det3 s q r / det3 p q r;\n   0 \\<le> det3 p s r / det3 p q r; 0 \\<le> det3 p q s / det3 p q r\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex p s\n  \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p q;\n   Counterclockwise_2D_Arbitrary.lex q r; 0 \\<le> det3 s q r / det3 p q r;\n   0 \\<le> det3 p s r / det3 p q r; 0 \\<le> det3 p q s / det3 p q r\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex s r\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n  Counterclockwise_2D_Arbitrary.lex s p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p s &&&\n    Counterclockwise_2D_Arbitrary.lex s r", "by (auto simp: nonnegs)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex s r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n    Counterclockwise_2D_Arbitrary.lex s p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p q \\<and>\n    Counterclockwise_2D_Arbitrary.lex q r \\<and>\n    indelta s p q r \\<Longrightarrow>\n    False", "with prems d"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n  Counterclockwise_2D_Arbitrary.lex s p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r\n  distinct4 s p q r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex s r", "show False"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r \\<or>\n  Counterclockwise_2D_Arbitrary.lex s p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p q \\<and>\n  Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r\n  distinct4 s p q r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex s r\n\ngoal (1 subgoal):\n 1. False", "by (simp add: lex_sym_eq_iff)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "}"], ["proof (state)\nthis:\n  det3 p q r \\<noteq> 0 \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "moreover"], ["proof (state)\nthis:\n  det3 p q r \\<noteq> 0 \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "have ?th3"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "proof (safe, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "case prems: 1"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  ccw p r q\n  ccw r q s\n  ccw q s p\n  ccw s p r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "have nonnegs: \"det3 p r q \\<ge> 0\" \"det3 r q s \\<ge> 0\" \"det3 s p r \\<ge> 0\" \"det3 q s p \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> det3 p r q &&& 0 \\<le> det3 r q s) &&&\n    0 \\<le> det3 s p r &&& 0 \\<le> det3 q s p", "using prems"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  ccw p r q\n  ccw r q s\n  ccw q s p\n  ccw s p r\n\ngoal (1 subgoal):\n 1. (0 \\<le> det3 p r q &&& 0 \\<le> det3 r q s) &&&\n    0 \\<le> det3 s p r &&& 0 \\<le> det3 q s p", "by (auto simp add: ccw_def ccw'_def less_eq_real_def)"], ["proof (state)\nthis:\n  0 \\<le> det3 p r q\n  0 \\<le> det3 r q s\n  0 \\<le> det3 s p r\n  0 \\<le> det3 q s p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "have dets_eq: \"det3 p r q + det3 q s p = det3 r q s + det3 s p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 p r q + det3 q s p = det3 r q s + det3 s p r", "by (auto simp: det3_def')"], ["proof (state)\nthis:\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "hence **: \"det3 p r q = 0 \\<and> det3 q s p = 0 \\<Longrightarrow> det3 r q s = 0 \\<and> det3 s p r = 0\""], ["proof (prove)\nusing this:\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r\n\ngoal (1 subgoal):\n 1. coll p r q \\<and> coll q s p \\<Longrightarrow>\n    coll r q s \\<and> coll s p r", "using prems"], ["proof (prove)\nusing this:\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  ccw p r q\n  ccw r q s\n  ccw q s p\n  ccw s p r\n\ngoal (1 subgoal):\n 1. coll p r q \\<and> coll q s p \\<Longrightarrow>\n    coll r q s \\<and> coll s p r", "by (auto simp: ccw_def ccw'_def)"], ["proof (state)\nthis:\n  coll p r q \\<and> coll q s p \\<Longrightarrow>\n  coll r q s \\<and> coll s p r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  coll p r q \\<and> coll q s p \\<Longrightarrow>\n  coll r q s \\<and> coll s p r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  coll p r q \\<and> coll q s p \\<Longrightarrow>\n  coll r q s \\<and> coll s p r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "fix p r q s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "assume det_pos: \"det3 p r q > 0\""], ["proof (state)\nthis:\n  0 < det3 p r q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "assume dets_eq: \"det3 p r q + det3 q s p = det3 r q s + det3 s p r\""], ["proof (state)\nthis:\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "assume nonnegs:\"det3 r q s \\<ge> 0\" \"det3 s p r \\<ge> 0\" \"det3 q s p \\<ge> 0\""], ["proof (state)\nthis:\n  0 \\<le> det3 r q s\n  0 \\<le> det3 s p r\n  0 \\<le> det3 q s p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "assume g14: \"lex p r\" \"lex p s\" \"lex q r\" \"lex q s\""], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "assume d: \"distinct4 s p q r\""], ["proof (state)\nthis:\n  distinct4 s p q r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "let ?sum = \"(det3 p r q + det3 q s p) / det3 p r q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "have eqs: \"det3 s p r = det3 p r s\" \"det3 r q s = det3 s r q\" \"det3 q s p = - det3 p s q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 s p r = det3 p r s &&&\n    det3 r q s = det3 s r q &&& det3 q s p = - det3 p s q", "by (auto simp: det3_def' algebra_simps)"], ["proof (state)\nthis:\n  det3 s p r = det3 p r s\n  det3 r q s = det3 s r q\n  det3 q s p = - det3 p s q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "from convex_comb_dets[OF det_pos, of s]"], ["proof (chain)\npicking this:\n  s =\n  (det3 s r q / det3 p r q) *\\<^sub>R p +\n  (det3 p s q / det3 p r q) *\\<^sub>R r +\n  (det3 p r s / det3 p r q) *\\<^sub>R q", "have \"((det3 p r q / det3 p r q) *\\<^sub>R s + (det3 q s p / det3 p r q) *\\<^sub>R r) /\\<^sub>R ?sum =\n            ((det3 r q s / det3 p r q) *\\<^sub>R p + (det3 s p r / det3 p r q) *\\<^sub>R q) /\\<^sub>R ?sum\""], ["proof (prove)\nusing this:\n  s =\n  (det3 s r q / det3 p r q) *\\<^sub>R p +\n  (det3 p s q / det3 p r q) *\\<^sub>R r +\n  (det3 p r s / det3 p r q) *\\<^sub>R q\n\ngoal (1 subgoal):\n 1. ((det3 p r q / det3 p r q) *\\<^sub>R s +\n     (det3 q s p / det3 p r q) *\\<^sub>R r) /\\<^sub>R\n    ((det3 p r q + det3 q s p) / det3 p r q) =\n    ((det3 r q s / det3 p r q) *\\<^sub>R p +\n     (det3 s p r / det3 p r q) *\\<^sub>R q) /\\<^sub>R\n    ((det3 p r q + det3 q s p) / det3 p r q)", "unfolding eqs"], ["proof (prove)\nusing this:\n  s =\n  (det3 s r q / det3 p r q) *\\<^sub>R p +\n  (det3 p s q / det3 p r q) *\\<^sub>R r +\n  (det3 p r s / det3 p r q) *\\<^sub>R q\n\ngoal (1 subgoal):\n 1. ((det3 p r q / det3 p r q) *\\<^sub>R s +\n     (- det3 p s q / det3 p r q) *\\<^sub>R r) /\\<^sub>R\n    ((det3 p r q + - det3 p s q) / det3 p r q) =\n    ((det3 s r q / det3 p r q) *\\<^sub>R p +\n     (det3 p r s / det3 p r q) *\\<^sub>R q) /\\<^sub>R\n    ((det3 p r q + - det3 p s q) / det3 p r q)", "by (simp add: algebra_simps prod_eq_iff)"], ["proof (state)\nthis:\n  ((det3 p r q / det3 p r q) *\\<^sub>R s +\n   (det3 q s p / det3 p r q) *\\<^sub>R r) /\\<^sub>R\n  ((det3 p r q + det3 q s p) / det3 p r q) =\n  ((det3 r q s / det3 p r q) *\\<^sub>R p +\n   (det3 s p r / det3 p r q) *\\<^sub>R q) /\\<^sub>R\n  ((det3 p r q + det3 q s p) / det3 p r q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "hence srpq: \"(det3 p r q / det3 p r q / ?sum) *\\<^sub>R s + (det3 q s p / det3 p r q / ?sum) *\\<^sub>R r =\n          (det3 r q s / det3 p r q / ?sum) *\\<^sub>R p + (det3 s p r / det3 p r q  / ?sum) *\\<^sub>R q\"\n          (is \"?s *\\<^sub>R s + ?r *\\<^sub>R r = ?p *\\<^sub>R p + ?q *\\<^sub>R q\")"], ["proof (prove)\nusing this:\n  ((det3 p r q / det3 p r q) *\\<^sub>R s +\n   (det3 q s p / det3 p r q) *\\<^sub>R r) /\\<^sub>R\n  ((det3 p r q + det3 q s p) / det3 p r q) =\n  ((det3 r q s / det3 p r q) *\\<^sub>R p +\n   (det3 s p r / det3 p r q) *\\<^sub>R q) /\\<^sub>R\n  ((det3 p r q + det3 q s p) / det3 p r q)\n\ngoal (1 subgoal):\n 1. (det3 p r q / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    s +\n    (det3 q s p / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    r =\n    (det3 r q s / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    p +\n    (det3 s p r / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    q", "using det_pos"], ["proof (prove)\nusing this:\n  ((det3 p r q / det3 p r q) *\\<^sub>R s +\n   (det3 q s p / det3 p r q) *\\<^sub>R r) /\\<^sub>R\n  ((det3 p r q + det3 q s p) / det3 p r q) =\n  ((det3 r q s / det3 p r q) *\\<^sub>R p +\n   (det3 s p r / det3 p r q) *\\<^sub>R q) /\\<^sub>R\n  ((det3 p r q + det3 q s p) / det3 p r q)\n  0 < det3 p r q\n\ngoal (1 subgoal):\n 1. (det3 p r q / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    s +\n    (det3 q s p / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    r =\n    (det3 r q s / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    p +\n    (det3 s p r / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    q", "by (simp add: algebra_simps inverse_eq_divide)"], ["proof (state)\nthis:\n  (det3 p r q / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  s +\n  (det3 q s p / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  r =\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p +\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "have eqs: \"?s + ?r = 1\" \"?p + ?q = 1\"\n          and s: \"?s \\<ge> 0\" \"?s \\<le> 1\"\n          and r: \"?r \\<ge> 0\" \"?r \\<le> 1\"\n          and p: \"?p \\<ge> 0\" \"?p \\<le> 1\"\n          and q: \"?q \\<ge> 0\" \"?q \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n      det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n      1 &&&\n      det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n      det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n      1) &&&\n     0 \\<le> det3 p r q / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    (0 \\<le> det3 q s p / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    (0 \\<le> det3 r q s / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    0 \\<le> det3 s p r / det3 p r q /\n            ((det3 p r q + det3 q s p) / det3 p r q) &&&\n    det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n    \\<le> 1", "unfolding add_divide_distrib[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((det3 p r q + det3 q s p) / det3 p r q /\n      ((det3 p r q + det3 q s p) / det3 p r q) =\n      1 &&&\n      (det3 r q s + det3 s p r) / det3 p r q /\n      ((det3 p r q + det3 q s p) / det3 p r q) =\n      1) &&&\n     0 \\<le> det3 p r q / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    (0 \\<le> det3 q s p / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    (0 \\<le> det3 r q s / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    0 \\<le> det3 s p r / det3 p r q /\n            ((det3 p r q + det3 q s p) / det3 p r q) &&&\n    det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n    \\<le> 1", "using det_pos nonnegs dets_eq"], ["proof (prove)\nusing this:\n  0 < det3 p r q\n  0 \\<le> det3 r q s\n  0 \\<le> det3 s p r\n  0 \\<le> det3 q s p\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r\n\ngoal (1 subgoal):\n 1. (((det3 p r q + det3 q s p) / det3 p r q /\n      ((det3 p r q + det3 q s p) / det3 p r q) =\n      1 &&&\n      (det3 r q s + det3 s p r) / det3 p r q /\n      ((det3 p r q + det3 q s p) / det3 p r q) =\n      1) &&&\n     0 \\<le> det3 p r q / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    (0 \\<le> det3 q s p / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    (0 \\<le> det3 r q s / det3 p r q /\n             ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n     \\<le> 1) &&&\n    0 \\<le> det3 s p r / det3 p r q /\n            ((det3 p r q + det3 q s p) / det3 p r q) &&&\n    det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n    \\<le> 1", "by (auto)"], ["proof (state)\nthis:\n  det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n  det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  1\n  det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n  det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  1\n  0 \\<le> det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) \\<le> 1\n  0 \\<le> det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) \\<le> 1\n  0 \\<le> det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) \\<le> 1\n  0 \\<le> det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "from eqs"], ["proof (chain)\npicking this:\n  det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n  det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  1\n  det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n  det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  1", "have eqs': \"1 - ?s = ?r\" \"1 - ?r = ?s\" \"1 - ?p = ?q\" \"1 - ?q = ?p\""], ["proof (prove)\nusing this:\n  det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n  det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  1\n  det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) +\n  det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  1\n\ngoal (1 subgoal):\n 1. (1 -\n     det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n     det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) &&&\n     1 -\n     det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n     det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)) &&&\n    1 - det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n    det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) &&&\n    1 - det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n    det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)", "by auto"], ["proof (state)\nthis:\n  1 - det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  1 - det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  1 - det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  1 - det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "have comm: \"?r *\\<^sub>R r + ?s *\\<^sub>R s = ?s *\\<^sub>R s + ?r *\\<^sub>R r\"\n          \"?q *\\<^sub>R q + ?p *\\<^sub>R p = ?p *\\<^sub>R p + ?q *\\<^sub>R q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (det3 q s p / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    r +\n    (det3 p r q / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    s =\n    (det3 p r q / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    s +\n    (det3 q s p / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    r &&&\n    (det3 s p r / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    q +\n    (det3 r q s / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    p =\n    (det3 r q s / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    p +\n    (det3 s p r / det3 p r q /\n     ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n    q", "by simp_all"], ["proof (state)\nthis:\n  (det3 q s p / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  r +\n  (det3 p r q / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  s =\n  (det3 p r q / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  s +\n  (det3 q s p / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  r\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q +\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p =\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p +\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "define K\n          where \"K = (det3 r q s / det3 p r q / ?sum) *\\<^sub>R p + (det3 s p r / det3 p r q  / ?sum) *\\<^sub>R q\""], ["proof (state)\nthis:\n  K =\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p +\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "note rewrs = eqs' comm srpq K_def[symmetric]"], ["proof (state)\nthis:\n  1 - det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  1 - det3 q s p / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 p r q / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  1 - det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  1 - det3 s p r / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q) =\n  det3 r q s / det3 p r q / ((det3 p r q + det3 q s p) / det3 p r q)\n  (det3 q s p / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  r +\n  (det3 p r q / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  s =\n  (det3 p r q / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  s +\n  (det3 q s p / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  r\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q +\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p =\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p +\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q\n  (det3 p r q / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  s +\n  (det3 q s p / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  r =\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p +\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q\n  (det3 r q s / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  p +\n  (det3 s p r / det3 p r q /\n   ((det3 p r q + det3 q s p) / det3 p r q)) *\\<^sub>R\n  q =\n  K\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "from lex_convex_self2[OF _ s, of s r, unfolded rewrs]\n           lex_convex_self2[OF _ r, of r s, unfolded rewrs]\n           lex_convex_self2[OF _ p, of p q, unfolded rewrs]\n           lex_convex_self2[OF _ q, of q p, unfolded rewrs]"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex s r \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex s K\n  Counterclockwise_2D_Arbitrary.lex s r \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K r\n  Counterclockwise_2D_Arbitrary.lex r s \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex r K\n  Counterclockwise_2D_Arbitrary.lex r s \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K s\n  Counterclockwise_2D_Arbitrary.lex p q \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex p K\n  Counterclockwise_2D_Arbitrary.lex p q \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K q\n  Counterclockwise_2D_Arbitrary.lex q p \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex q K\n  Counterclockwise_2D_Arbitrary.lex q p \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K p", "have False"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex s r \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex s K\n  Counterclockwise_2D_Arbitrary.lex s r \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K r\n  Counterclockwise_2D_Arbitrary.lex r s \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex r K\n  Counterclockwise_2D_Arbitrary.lex r s \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K s\n  Counterclockwise_2D_Arbitrary.lex p q \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex p K\n  Counterclockwise_2D_Arbitrary.lex p q \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K q\n  Counterclockwise_2D_Arbitrary.lex q p \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex q K\n  Counterclockwise_2D_Arbitrary.lex q p \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K p\n\ngoal (1 subgoal):\n 1. False", "using g14 d det_pos"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex s r \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex s K\n  Counterclockwise_2D_Arbitrary.lex s r \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K r\n  Counterclockwise_2D_Arbitrary.lex r s \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex r K\n  Counterclockwise_2D_Arbitrary.lex r s \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K s\n  Counterclockwise_2D_Arbitrary.lex p q \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex p K\n  Counterclockwise_2D_Arbitrary.lex p q \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K q\n  Counterclockwise_2D_Arbitrary.lex q p \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex q K\n  Counterclockwise_2D_Arbitrary.lex q p \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex K p\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  distinct4 s p q r\n  0 < det3 p r q\n\ngoal (1 subgoal):\n 1. False", "by (metis lex_trans not_lex_eq)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>0 < det3 ?pa2 ?ra2 ?qa2;\n   det3 ?pa2 ?ra2 ?qa2 + det3 ?qa2 ?sa2 ?pa2 =\n   det3 ?ra2 ?qa2 ?sa2 + det3 ?sa2 ?pa2 ?ra2;\n   0 \\<le> det3 ?ra2 ?qa2 ?sa2; 0 \\<le> det3 ?sa2 ?pa2 ?ra2;\n   0 \\<le> det3 ?qa2 ?sa2 ?pa2; Counterclockwise_2D_Arbitrary.lex ?pa2 ?ra2;\n   Counterclockwise_2D_Arbitrary.lex ?pa2 ?sa2;\n   Counterclockwise_2D_Arbitrary.lex ?qa2 ?ra2;\n   Counterclockwise_2D_Arbitrary.lex ?qa2 ?sa2;\n   distinct4 ?sa2 ?pa2 ?qa2 ?ra2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "note wlog = this"], ["proof (state)\nthis:\n  \\<lbrakk>0 < det3 ?pa2 ?ra2 ?qa2;\n   det3 ?pa2 ?ra2 ?qa2 + det3 ?qa2 ?sa2 ?pa2 =\n   det3 ?ra2 ?qa2 ?sa2 + det3 ?sa2 ?pa2 ?ra2;\n   0 \\<le> det3 ?ra2 ?qa2 ?sa2; 0 \\<le> det3 ?sa2 ?pa2 ?ra2;\n   0 \\<le> det3 ?qa2 ?sa2 ?pa2; Counterclockwise_2D_Arbitrary.lex ?pa2 ?ra2;\n   Counterclockwise_2D_Arbitrary.lex ?pa2 ?sa2;\n   Counterclockwise_2D_Arbitrary.lex ?qa2 ?ra2;\n   Counterclockwise_2D_Arbitrary.lex ?qa2 ?sa2;\n   distinct4 ?sa2 ?pa2 ?qa2 ?ra2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "from dets_eq"], ["proof (chain)\npicking this:\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r", "have 1: \"det3 q s p + det3 p r q = det3 s p r + det3 r q s\""], ["proof (prove)\nusing this:\n  det3 p r q + det3 q s p = det3 r q s + det3 s p r\n\ngoal (1 subgoal):\n 1. det3 q s p + det3 p r q = det3 s p r + det3 r q s", "by simp"], ["proof (state)\nthis:\n  det3 q s p + det3 p r q = det3 s p r + det3 r q s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "from d"], ["proof (chain)\npicking this:\n  distinct4 s p q r", "have d': \"distinct4 r q p s\""], ["proof (prove)\nusing this:\n  distinct4 s p q r\n\ngoal (1 subgoal):\n 1. distinct4 r q p s", "by auto"], ["proof (state)\nthis:\n  distinct4 r q p s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "note wlog[of q s p r, OF _ 1 nonnegs(3,2,1) prems(4,3,2,1) d']\n        wlog[of p r q s, OF _ dets_eq nonnegs(2,3,4) prems(1-4) d]"], ["proof (state)\nthis:\n  0 < det3 q s p \\<Longrightarrow> False\n  0 < det3 p r q \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Counterclockwise_2D_Arbitrary.lex p r;\n     Counterclockwise_2D_Arbitrary.lex p s;\n     Counterclockwise_2D_Arbitrary.lex q r;\n     Counterclockwise_2D_Arbitrary.lex q s; ccw p r q; ccw r q s; ccw q s p;\n     ccw s p r\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  coll p r q \\<and> coll q s p \\<Longrightarrow>\n  coll r q s \\<and> coll s p r\n  0 < det3 q s p \\<Longrightarrow> False\n  0 < det3 p r q \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  coll p r q \\<and> coll q s p \\<Longrightarrow>\n  coll r q s \\<and> coll s p r\n  0 < det3 q s p \\<Longrightarrow> False\n  0 < det3 p r q \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using nonnegs d *"], ["proof (prove)\nusing this:\n  coll p r q \\<and> coll q s p \\<Longrightarrow>\n  coll r q s \\<and> coll s p r\n  0 < det3 q s p \\<Longrightarrow> False\n  0 < det3 p r q \\<Longrightarrow> False\n  0 \\<le> det3 p r q\n  0 \\<le> det3 r q s\n  0 \\<le> det3 s p r\n  0 \\<le> det3 q s p\n  distinct4 s p q r\n  \\<not> (coll s p q \\<and> coll s q r \\<and> coll s r p \\<and> coll p q r)\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: less_eq_real_def det3_def' algebra_simps)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "ultimately"], ["proof (chain)\npicking this:\n  coll p q r \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  det3 p q r \\<noteq> 0 \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "have ?th1 ?th2 ?th3"], ["proof (prove)\nusing this:\n  coll p q r \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  det3 p q r \\<noteq> 0 \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and>\n          indelta s p q r) \\<and>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "by blast+"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "}"], ["proof (state)\nthis:\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal (3 subgoals):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n 2. \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n 3. \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q s \\<and>\n                            insquare p r q s)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "show ?th1 ?th2 ?th3"], ["proof (prove)\nusing this:\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            indelta s p q r)\n  \\<lbrakk>coll s p q; coll s q r; coll s r p; coll p q r\\<rbrakk>\n  \\<Longrightarrow> \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n                            Counterclockwise_2D_Arbitrary.lex q s \\<and>\n                            insquare p r q s)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (coll s p q \\<and>\n          coll s q r \\<and> coll s r p \\<and> coll p q r) \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex r s \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            indelta s p q r) &&&\n    \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s \\<and>\n            Counterclockwise_2D_Arbitrary.lex q r \\<and>\n            Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)", "by force+"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex r s \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex s p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and> indelta s p q r)\n  \\<not> (Counterclockwise_2D_Arbitrary.lex p r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex q s \\<and> insquare p r q s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccw'_subst_psi_disj:\n  assumes \"det3 t r s = 0\"\n  assumes \"psi t r s \\<or> psi t s r \\<or> psi s r t\"\n  assumes \"s \\<noteq> t\"\n  assumes \"ccw' t r p\"\n  shows \"ccw' t s p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw' t s p", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "assume \"r \\<noteq> s\""], ["proof (state)\nthis:\n  r \\<noteq> s\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "from assms"], ["proof (chain)\npicking this:\n  coll t r s\n  psi t r s \\<or> psi t s r \\<or> psi s r t\n  s \\<noteq> t\n  ccw' t r p", "have \"r \\<noteq> t\""], ["proof (prove)\nusing this:\n  coll t r s\n  psi t r s \\<or> psi t s r \\<or> psi s r t\n  s \\<noteq> t\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. r \\<noteq> t", "by (auto simp: det3_def' ccw'_def algebra_simps)"], ["proof (state)\nthis:\n  r \\<noteq> t\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "from assms"], ["proof (chain)\npicking this:\n  coll t r s\n  psi t r s \\<or> psi t s r \\<or> psi s r t\n  s \\<noteq> t\n  ccw' t r p", "have \"det3 r s t = 0\""], ["proof (prove)\nusing this:\n  coll t r s\n  psi t r s \\<or> psi t s r \\<or> psi s r t\n  s \\<noteq> t\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. coll r s t", "by (auto simp: algebra_simps det3_def')"], ["proof (state)\nthis:\n  coll r s t\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "from coll_ex_scaling[OF assms(3) this]"], ["proof (chain)\npicking this:\n  \\<exists>ra. r = s + ra *\\<^sub>R (t - s)", "obtain x where s: \"r = s + x *\\<^sub>R (t - s)\""], ["proof (prove)\nusing this:\n  \\<exists>ra. r = s + ra *\\<^sub>R (t - s)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        r = s + x *\\<^sub>R (t - s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = s + x *\\<^sub>R (t - s)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "from assms(4)[simplified s]"], ["proof (chain)\npicking this:\n  ccw' t (s + x *\\<^sub>R (t - s)) p", "have \"0 < det3 0 (s + x *\\<^sub>R (t - s) - t) (p - t)\""], ["proof (prove)\nusing this:\n  ccw' t (s + x *\\<^sub>R (t - s)) p\n\ngoal (1 subgoal):\n 1. 0 < det3 0 (s + x *\\<^sub>R (t - s) - t) (p - t)", "by (auto simp: algebra_simps det3_def' ccw'_def)"], ["proof (state)\nthis:\n  0 < det3 0 (s + x *\\<^sub>R (t - s) - t) (p - t)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "also"], ["proof (state)\nthis:\n  0 < det3 0 (s + x *\\<^sub>R (t - s) - t) (p - t)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "have \"s + x *\\<^sub>R (t - s) - t = (1 - x) *\\<^sub>R (s - t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s + x *\\<^sub>R (t - s) - t = (1 - x) *\\<^sub>R (s - t)", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  s + x *\\<^sub>R (t - s) - t = (1 - x) *\\<^sub>R (s - t)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "finally"], ["proof (chain)\npicking this:\n  0 < det3 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)", "have ccw': \"ccw' 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)\""], ["proof (prove)\nusing this:\n  0 < det3 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)\n\ngoal (1 subgoal):\n 1. ccw' 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)", "by (simp add: ccw'_def)"], ["proof (state)\nthis:\n  ccw' 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "hence neq: \"x \\<noteq> 1\""], ["proof (prove)\nusing this:\n  ccw' 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1", "by (auto simp add: det3_def' ccw'_def)"], ["proof (state)\nthis:\n  x \\<noteq> 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "have tr: \"fst s < fst r \\<Longrightarrow> fst t = fst s \\<Longrightarrow> snd t \\<le> snd r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst s < fst r; fst t = fst s\\<rbrakk>\n    \\<Longrightarrow> snd t \\<le> snd r", "by (simp add: s)"], ["proof (state)\nthis:\n  \\<lbrakk>fst s < fst r; fst t = fst s\\<rbrakk>\n  \\<Longrightarrow> snd t \\<le> snd r\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "from s"], ["proof (chain)\npicking this:\n  r = s + x *\\<^sub>R (t - s)", "have \"fst (r - s) = fst (x *\\<^sub>R (t - s))\" \"snd (r - s) = snd (x *\\<^sub>R (t - s))\""], ["proof (prove)\nusing this:\n  r = s + x *\\<^sub>R (t - s)\n\ngoal (1 subgoal):\n 1. fst (r - s) = fst (x *\\<^sub>R (t - s)) &&&\n    snd (r - s) = snd (x *\\<^sub>R (t - s))", "by (auto simp: )"], ["proof (state)\nthis:\n  fst (r - s) = fst (x *\\<^sub>R (t - s))\n  snd (r - s) = snd (x *\\<^sub>R (t - s))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "hence \"x = (if fst (t - s) = 0 then snd (r - s) / snd (t - s) else fst (r - s) / fst (t - s))\""], ["proof (prove)\nusing this:\n  fst (r - s) = fst (x *\\<^sub>R (t - s))\n  snd (r - s) = snd (x *\\<^sub>R (t - s))\n\ngoal (1 subgoal):\n 1. x =\n    (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n     else fst (r - s) / fst (t - s))", "using \\<open>s \\<noteq> t\\<close>"], ["proof (prove)\nusing this:\n  fst (r - s) = fst (x *\\<^sub>R (t - s))\n  snd (r - s) = snd (x *\\<^sub>R (t - s))\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. x =\n    (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n     else fst (r - s) / fst (t - s))", "by (auto simp add: field_simps prod_eq_iff)"], ["proof (state)\nthis:\n  x =\n  (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n   else fst (r - s) / fst (t - s))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "also"], ["proof (state)\nthis:\n  x =\n  (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n   else fst (r - s) / fst (t - s))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "have \"\\<dots> \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n     else fst (r - s) / fst (t - s))\n    \\<le> 1", "using assms"], ["proof (prove)\nusing this:\n  coll t r s\n  psi t r s \\<or> psi t s r \\<or> psi s r t\n  s \\<noteq> t\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n     else fst (r - s) / fst (t - s))\n    \\<le> 1", "by (auto simp: lex_def psi_def tr)"], ["proof (state)\nthis:\n  (if fst (t - s) = 0 then snd (r - s) / snd (t - s)\n   else fst (r - s) / fst (t - s))\n  \\<le> 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "finally"], ["proof (chain)\npicking this:\n  x \\<le> 1", "have \"x < 1\""], ["proof (prove)\nusing this:\n  x \\<le> 1\n\ngoal (1 subgoal):\n 1. x < 1", "using neq"], ["proof (prove)\nusing this:\n  x \\<le> 1\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. x < 1", "by simp"], ["proof (state)\nthis:\n  x < 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ccw' t s p\n 2. \\<not> ?P \\<Longrightarrow> ccw' t s p", "thus ?thesis"], ["proof (prove)\nusing this:\n  x < 1\n\ngoal (1 subgoal):\n 1. ccw' t s p", "using ccw'"], ["proof (prove)\nusing this:\n  x < 1\n  ccw' 0 ((1 - x) *\\<^sub>R (s - t)) (p - t)\n\ngoal (1 subgoal):\n 1. ccw' t s p", "by (auto simp: ccw'.translate_origin)"], ["proof (state)\nthis:\n  ccw' t s p\n\ngoal (1 subgoal):\n 1. \\<not> r \\<noteq> s \\<Longrightarrow> ccw' t s p", "qed (insert assms, simp)"], ["", "lemma lex_contr:\n  assumes \"distinct4 t s q r\"\n  assumes \"lex t s\" \"lex s r\"\n  assumes \"det3 t s r = 0\"\n  assumes \"ccw' t s q\"\n  assumes \"ccw' t q r\"\n  shows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using ccw'_subst_psi_disj[of t s r q] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>coll t s r; psi t s r \\<or> psi t r s \\<or> psi r s t;\n   r \\<noteq> t; ccw' t s q\\<rbrakk>\n  \\<Longrightarrow> ccw' t r q\n  distinct4 t s q r\n  Counterclockwise_2D_Arbitrary.lex t s\n  Counterclockwise_2D_Arbitrary.lex s r\n  coll t s r\n  ccw' t s q\n  ccw' t q r\n\ngoal (1 subgoal):\n 1. False", "by (cases \"r = t\") (auto simp: det3_def' algebra_simps psi_def ccw'_def)"], ["", "lemma contra4:\n  assumes \"distinct4 s r q p\"\n  assumes lex: \"lex q p\" \"lex p r\" \"lex r s\"\n  assumes ccw: \"ccw r q s\" \"ccw r s p\" \"ccw r q p\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume c: \"ccw s q p\""], ["proof (state)\nthis:\n  ccw s q p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "from c"], ["proof (chain)\npicking this:\n  ccw s q p", "have *: \"indelta s r q p\""], ["proof (prove)\nusing this:\n  ccw s q p\n\ngoal (1 subgoal):\n 1. indelta s r q p", "using assms"], ["proof (prove)\nusing this:\n  ccw s q p\n  distinct4 s r q p\n  Counterclockwise_2D_Arbitrary.lex q p\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex r s\n  ccw r q s\n  ccw r s p\n  ccw r q p\n\ngoal (1 subgoal):\n 1. indelta s r q p", "by simp"], ["proof (state)\nthis:\n  indelta s r q p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "with contra1[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex r q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and> indelta s r q p)\n  indelta s r q p", "have \"\\<not> (lex r q \\<and> lex q p \\<and> lex p s)\""], ["proof (prove)\nusing this:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex r q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and> indelta s r q p)\n  indelta s r q p\n\ngoal (1 subgoal):\n 1. \\<not> (Counterclockwise_2D_Arbitrary.lex r q \\<and>\n            Counterclockwise_2D_Arbitrary.lex q p \\<and>\n            Counterclockwise_2D_Arbitrary.lex p s)", "by blast"], ["proof (state)\nthis:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex r q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"\\<not> lex q p\""], ["proof (prove)\nusing this:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex r q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s)\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q p", "using \\<open>ccw s q p\\<close> contra1 cyclic assms nondegenerate"], ["proof (prove)\nusing this:\n  \\<not> (Counterclockwise_2D_Arbitrary.lex r q \\<and>\n          Counterclockwise_2D_Arbitrary.lex q p \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s)\n  ccw s q p\n  distinct4 ?s ?p ?q ?r \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex ?p ?q \\<and>\n          Counterclockwise_2D_Arbitrary.lex ?q ?r \\<and>\n          Counterclockwise_2D_Arbitrary.lex ?r ?s \\<and>\n          indelta ?s ?p ?q ?r)\n  ccw ?p ?q ?r \\<Longrightarrow> ccw ?q ?r ?p\n  distinct4 s r q p\n  Counterclockwise_2D_Arbitrary.lex q p\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex r s\n  ccw r q s\n  ccw r s p\n  ccw r q p\n  \\<lbrakk>distinct3 ?p ?q ?r; in3 ?S ?p ?q ?r\\<rbrakk>\n  \\<Longrightarrow> ccw ?p ?q ?r \\<or> ccw ?p ?r ?q\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q p", "by blast"], ["proof (state)\nthis:\n  \\<not> Counterclockwise_2D_Arbitrary.lex q p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> Counterclockwise_2D_Arbitrary.lex q p\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<not> Counterclockwise_2D_Arbitrary.lex q p\n  distinct4 s r q p\n  Counterclockwise_2D_Arbitrary.lex q p\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex r s\n  ccw r q s\n  ccw r s p\n  ccw r q p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> ccw s q p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ccw s q p \\<Longrightarrow> False", "assume \"\\<not> ccw s q p\""], ["proof (state)\nthis:\n  \\<not> ccw s q p\n\ngoal (1 subgoal):\n 1. \\<not> ccw s q p \\<Longrightarrow> False", "with ccw"], ["proof (chain)\npicking this:\n  ccw r q s\n  ccw r s p\n  ccw r q p\n  \\<not> ccw s q p", "have \"ccw q s p \\<and> ccw s p r \\<and> ccw p r q \\<and> ccw r q s\""], ["proof (prove)\nusing this:\n  ccw r q s\n  ccw r s p\n  ccw r q p\n  \\<not> ccw s q p\n\ngoal (1 subgoal):\n 1. insquare q s p r", "by (metis assms(1) ccw'.cyclic ccw_def not_ccw'_eq psi_disjuncts)"], ["proof (state)\nthis:\n  insquare q s p r\n\ngoal (1 subgoal):\n 1. \\<not> ccw s q p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  insquare q s p r\n\ngoal (1 subgoal):\n 1. \\<not> ccw s q p \\<Longrightarrow> False", "from lex"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex q p\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex r s", "have \"lex q r\" \"lex q s\" \"lex p r\" \"lex p s\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex q p\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex r s\n\ngoal (1 subgoal):\n 1. (Counterclockwise_2D_Arbitrary.lex q r &&&\n     Counterclockwise_2D_Arbitrary.lex q s) &&&\n    Counterclockwise_2D_Arbitrary.lex p r &&&\n    Counterclockwise_2D_Arbitrary.lex p s", "by order+"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n\ngoal (1 subgoal):\n 1. \\<not> ccw s q p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  insquare q s p r\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s", "show False"], ["proof (prove)\nusing this:\n  insquare q s p r\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n\ngoal (1 subgoal):\n 1. False", "using contra3[of r q p s] \\<open>distinct4 s r q p\\<close>"], ["proof (prove)\nusing this:\n  insquare q s p r\n  Counterclockwise_2D_Arbitrary.lex q r\n  Counterclockwise_2D_Arbitrary.lex q s\n  Counterclockwise_2D_Arbitrary.lex p r\n  Counterclockwise_2D_Arbitrary.lex p s\n  distinct4 r q p s \\<Longrightarrow>\n  \\<not> (Counterclockwise_2D_Arbitrary.lex q s \\<and>\n          Counterclockwise_2D_Arbitrary.lex q r \\<and>\n          Counterclockwise_2D_Arbitrary.lex p s \\<and>\n          Counterclockwise_2D_Arbitrary.lex p r \\<and> insquare q s p r)\n  distinct4 s r q p\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_coll_ordered_lexI:\n  assumes \"l \\<noteq> x0\"\n    and \"lex x1 r\"\n    and \"lex x1 l\"\n    and \"lex r x0\"\n    and \"lex l x0\"\n    and \"ccw' x0 l x1\"\n    and \"ccw' x0 x1 r\"\n  shows \"det3 x0 l r \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 x0 l r \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "assume \"coll x0 l r\""], ["proof (state)\nthis:\n  coll x0 l r\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>coll x0 l r\\<close>"], ["proof (chain)\npicking this:\n  coll x0 l r", "have 1: \"coll 0 (l - x0) (r - x0)\""], ["proof (prove)\nusing this:\n  coll x0 l r\n\ngoal (1 subgoal):\n 1. coll 0 (l - x0) (r - x0)", "by (simp add: det3_def' algebra_simps)"], ["proof (state)\nthis:\n  coll 0 (l - x0) (r - x0)\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>lex r x0\\<close>"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex r x0", "have 2: \"lex (r - x0) 0\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex r x0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (r - x0) 0", "by (auto simp add: lex_def)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (r - x0) 0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>lex l x0\\<close>"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex l x0", "have 3: \"lex (l - x0) 0\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex l x0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (l - x0) 0", "by (auto simp add: lex_def)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (l - x0) 0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>ccw' x0 l x1\\<close>"], ["proof (chain)\npicking this:\n  ccw' x0 l x1", "have 4: \"ccw' 0 (l - x0) (x1 - x0)\""], ["proof (prove)\nusing this:\n  ccw' x0 l x1\n\ngoal (1 subgoal):\n 1. ccw' 0 (l - x0) (x1 - x0)", "by (simp add: det3_def' ccw'_def algebra_simps)"], ["proof (state)\nthis:\n  ccw' 0 (l - x0) (x1 - x0)\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>ccw' x0 x1 r\\<close>"], ["proof (chain)\npicking this:\n  ccw' x0 x1 r", "have 5: \"ccw' 0 (x1 - x0) (r - x0)\""], ["proof (prove)\nusing this:\n  ccw' x0 x1 r\n\ngoal (1 subgoal):\n 1. ccw' 0 (x1 - x0) (r - x0)", "by (simp add: det3_def' ccw'_def algebra_simps)"], ["proof (state)\nthis:\n  ccw' 0 (x1 - x0) (r - x0)\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>lex x1 r\\<close>"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex x1 r", "have 6: \"lex 0 (r - x0 - (x1 - x0))\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex x1 r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex 0 (r - x0 - (x1 - x0))", "by (auto simp: lex_def)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex 0 (r - x0 - (x1 - x0))\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from \\<open>lex x1 l\\<close>"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex x1 l", "have 7: \"lex 0 (l - x0 - (x1 - x0))\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex x1 l\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex 0 (l - x0 - (x1 - x0))", "by (auto simp: lex_def)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex 0 (l - x0 - (x1 - x0))\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "define r' where \"r' = r - x0\""], ["proof (state)\nthis:\n  r' = r - x0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "define l' where \"l' = l - x0\""], ["proof (state)\nthis:\n  l' = l - x0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "define x0' where \"x0' = x1 - x0\""], ["proof (state)\nthis:\n  x0' = x1 - x0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from 1 2 3 4 5 6 7"], ["proof (chain)\npicking this:\n  coll 0 (l - x0) (r - x0)\n  Counterclockwise_2D_Arbitrary.lex (r - x0) 0\n  Counterclockwise_2D_Arbitrary.lex (l - x0) 0\n  ccw' 0 (l - x0) (x1 - x0)\n  ccw' 0 (x1 - x0) (r - x0)\n  Counterclockwise_2D_Arbitrary.lex 0 (r - x0 - (x1 - x0))\n  Counterclockwise_2D_Arbitrary.lex 0 (l - x0 - (x1 - x0))", "have rs: \"coll 0 l' r'\" \"lex r' 0\"\n    \"lex l' 0\"\n    \"ccw' 0 l' x0'\"\n    \"ccw' 0 x0' r'\"\n    \"lex 0 (r' - x0')\"\n    \"lex 0 (l' - x0')\""], ["proof (prove)\nusing this:\n  coll 0 (l - x0) (r - x0)\n  Counterclockwise_2D_Arbitrary.lex (r - x0) 0\n  Counterclockwise_2D_Arbitrary.lex (l - x0) 0\n  ccw' 0 (l - x0) (x1 - x0)\n  ccw' 0 (x1 - x0) (r - x0)\n  Counterclockwise_2D_Arbitrary.lex 0 (r - x0 - (x1 - x0))\n  Counterclockwise_2D_Arbitrary.lex 0 (l - x0 - (x1 - x0))\n\ngoal (1 subgoal):\n 1. (coll 0 l' r' &&&\n     Counterclockwise_2D_Arbitrary.lex r' 0 &&&\n     Counterclockwise_2D_Arbitrary.lex l' 0) &&&\n    (ccw' 0 l' x0' &&& ccw' 0 x0' r') &&&\n    Counterclockwise_2D_Arbitrary.lex 0 (r' - x0') &&&\n    Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')", "unfolding r'_def[symmetric] l'_def[symmetric] x0'_def[symmetric]"], ["proof (prove)\nusing this:\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n\ngoal (1 subgoal):\n 1. (coll 0 l' r' &&&\n     Counterclockwise_2D_Arbitrary.lex r' 0 &&&\n     Counterclockwise_2D_Arbitrary.lex l' 0) &&&\n    (ccw' 0 l' x0' &&& ccw' 0 x0' r') &&&\n    Counterclockwise_2D_Arbitrary.lex 0 (r' - x0') &&&\n    Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')", "by auto"], ["proof (state)\nthis:\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  l \\<noteq> x0\n  Counterclockwise_2D_Arbitrary.lex x1 r\n  Counterclockwise_2D_Arbitrary.lex x1 l\n  Counterclockwise_2D_Arbitrary.lex r x0\n  Counterclockwise_2D_Arbitrary.lex l x0\n  ccw' x0 l x1\n  ccw' x0 x1 r", "have \"l' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  l \\<noteq> x0\n  Counterclockwise_2D_Arbitrary.lex x1 r\n  Counterclockwise_2D_Arbitrary.lex x1 l\n  Counterclockwise_2D_Arbitrary.lex r x0\n  Counterclockwise_2D_Arbitrary.lex l x0\n  ccw' x0 l x1\n  ccw' x0 x1 r\n\ngoal (1 subgoal):\n 1. l' \\<noteq> 0", "by (auto simp: l'_def)"], ["proof (state)\nthis:\n  l' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from coll_scale[OF \\<open>coll 0 l' _\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>x. r' = x *\\<^sub>R l'", "obtain y where y: \"r' = y *\\<^sub>R l'\""], ["proof (prove)\nusing this:\n  \\<exists>x. r' = x *\\<^sub>R l'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        r' = y *\\<^sub>R l' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r' = y *\\<^sub>R l'\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  r' = y *\\<^sub>R l'\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "assume \"y > 0\""], ["proof (state)\nthis:\n  0 < y\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "with rs"], ["proof (chain)\npicking this:\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n  0 < y", "have False"], ["proof (prove)\nusing this:\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n  0 < y\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: det3_def' algebra_simps y ccw'_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  0 < y \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  0 < y \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  0 < y \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "assume \"y < 0\""], ["proof (state)\nthis:\n  y < 0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "with rs"], ["proof (chain)\npicking this:\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n  y < 0", "have False"], ["proof (prove)\nusing this:\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n  y < 0\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: lex_def not_less algebra_simps algebra_split_simps y ccw'_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  y < 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y < 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  y < 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "assume \"y = 0\""], ["proof (state)\nthis:\n  y = 0\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "from this rs"], ["proof (chain)\npicking this:\n  y = 0\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')", "have False"], ["proof (prove)\nusing this:\n  y = 0\n  coll 0 l' r'\n  Counterclockwise_2D_Arbitrary.lex r' 0\n  Counterclockwise_2D_Arbitrary.lex l' 0\n  ccw' 0 l' x0'\n  ccw' 0 x0' r'\n  Counterclockwise_2D_Arbitrary.lex 0 (r' - x0')\n  Counterclockwise_2D_Arbitrary.lex 0 (l' - x0')\n\ngoal (1 subgoal):\n 1. False", "by (simp add: ccw'_def y)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  y = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coll x0 l r \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  0 < y \\<Longrightarrow> False\n  y < 0 \\<Longrightarrow> False\n  y = 0 \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  0 < y \\<Longrightarrow> False\n  y < 0 \\<Longrightarrow> False\n  y = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation ccw_system4 ccw"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw_system4 ccw S", "proof unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q r t.\n       \\<lbrakk>distinct4 p q r t; in4 S p q r t; ccw t q r; ccw p t r;\n        ccw p q t\\<rbrakk>\n       \\<Longrightarrow> ccw p q r", "fix p q r t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q r t.\n       \\<lbrakk>distinct4 p q r t; in4 S p q r t; ccw t q r; ccw p t r;\n        ccw p q t\\<rbrakk>\n       \\<Longrightarrow> ccw p q r", "assume ccw: \"ccw t q r\" \"ccw p t r\" \"ccw p q t\""], ["proof (state)\nthis:\n  ccw t q r\n  ccw p t r\n  ccw p q t\n\ngoal (1 subgoal):\n 1. \\<And>p q r t.\n       \\<lbrakk>distinct4 p q r t; in4 S p q r t; ccw t q r; ccw p t r;\n        ccw p q t\\<rbrakk>\n       \\<Longrightarrow> ccw p q r", "show \"ccw p q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw p q r", "proof (cases \"det3 t q r = 0 \\<and> det3 p t r = 0 \\<and> det3 p q t = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. coll t q r \\<and> coll p t r \\<and> coll p q t \\<Longrightarrow>\n    ccw p q r\n 2. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "case True"], ["proof (state)\nthis:\n  coll t q r \\<and> coll p t r \\<and> coll p q t\n\ngoal (2 subgoals):\n 1. coll t q r \\<and> coll p t r \\<and> coll p q t \\<Longrightarrow>\n    ccw p q r\n 2. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "{"], ["proof (state)\nthis:\n  coll t q r \\<and> coll p t r \\<and> coll p q t\n\ngoal (2 subgoals):\n 1. coll t q r \\<and> coll p t r \\<and> coll p q t \\<Longrightarrow>\n    ccw p q r\n 2. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "assume \"psi t q r \\<or> psi q r t \\<or> psi r t q\"\n        \"psi p t r \\<or> psi t r p \\<or> psi r p t\"\n        \"psi p q t \\<or> psi q t p \\<or> psi t p q\""], ["proof (state)\nthis:\n  psi t q r \\<or> psi q r t \\<or> psi r t q\n  psi p t r \\<or> psi t r p \\<or> psi r p t\n  psi p q t \\<or> psi q t p \\<or> psi t p q\n\ngoal (2 subgoals):\n 1. coll t q r \\<and> coll p t r \\<and> coll p q t \\<Longrightarrow>\n    ccw p q r\n 2. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "hence \"psi p q r \\<or> psi q r p \\<or> psi r p q\""], ["proof (prove)\nusing this:\n  psi t q r \\<or> psi q r t \\<or> psi r t q\n  psi p t r \\<or> psi t r p \\<or> psi r p t\n  psi p q t \\<or> psi q t p \\<or> psi t p q\n\ngoal (1 subgoal):\n 1. psi p q r \\<or> psi q r p \\<or> psi r p q", "using lex_sym_eq_iff psi_def"], ["proof (prove)\nusing this:\n  psi t q r \\<or> psi q r t \\<or> psi r t q\n  psi p t r \\<or> psi t r p \\<or> psi r p t\n  psi p q t \\<or> psi q t p \\<or> psi t p q\n  Counterclockwise_2D_Arbitrary.lex ?a ?b \\<Longrightarrow>\n  Counterclockwise_2D_Arbitrary.lex ?b ?a = (?a = ?b)\n  psi ?p ?q ?r =\n  (Counterclockwise_2D_Arbitrary.lex ?p ?q \\<and>\n   Counterclockwise_2D_Arbitrary.lex ?q ?r)\n\ngoal (1 subgoal):\n 1. psi p q r \\<or> psi q r p \\<or> psi r p q", "by blast"], ["proof (state)\nthis:\n  psi p q r \\<or> psi q r p \\<or> psi r p q\n\ngoal (2 subgoals):\n 1. coll t q r \\<and> coll p t r \\<and> coll p q t \\<Longrightarrow>\n    ccw p q r\n 2. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "}"], ["proof (state)\nthis:\n  \\<lbrakk>psi t q r \\<or> psi q r t \\<or> psi r t q;\n   psi p t r \\<or> psi t r p \\<or> psi r p t;\n   psi p q t \\<or> psi q t p \\<or> psi t p q\\<rbrakk>\n  \\<Longrightarrow> psi p q r \\<or> psi q r p \\<or> psi r p q\n\ngoal (2 subgoals):\n 1. coll t q r \\<and> coll p t r \\<and> coll p q t \\<Longrightarrow>\n    ccw p q r\n 2. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "with True ccw"], ["proof (chain)\npicking this:\n  coll t q r \\<and> coll p t r \\<and> coll p q t\n  ccw t q r\n  ccw p t r\n  ccw p q t\n  \\<lbrakk>psi t q r \\<or> psi q r t \\<or> psi r t q;\n   psi p t r \\<or> psi t r p \\<or> psi r p t;\n   psi p q t \\<or> psi q t p \\<or> psi t p q\\<rbrakk>\n  \\<Longrightarrow> psi p q r \\<or> psi q r p \\<or> psi r p q", "show ?thesis"], ["proof (prove)\nusing this:\n  coll t q r \\<and> coll p t r \\<and> coll p q t\n  ccw t q r\n  ccw p t r\n  ccw p q t\n  \\<lbrakk>psi t q r \\<or> psi q r t \\<or> psi r t q;\n   psi p t r \\<or> psi t r p \\<or> psi r p t;\n   psi p q t \\<or> psi q t p \\<or> psi t p q\\<rbrakk>\n  \\<Longrightarrow> psi p q r \\<or> psi q r p \\<or> psi r p q\n\ngoal (1 subgoal):\n 1. ccw p q r", "by (simp add: det3_def' algebra_simps ccw_def ccw'_def)"], ["proof (state)\nthis:\n  ccw p q r\n\ngoal (1 subgoal):\n 1. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "case False"], ["proof (state)\nthis:\n  \\<not> (coll t q r \\<and> coll p t r \\<and> coll p q t)\n\ngoal (1 subgoal):\n 1. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "hence \"0 \\<le> det3 t q r\" \"0 \\<le> det3 p t r\" \"0 \\<le> det3 p q t\""], ["proof (prove)\nusing this:\n  \\<not> (coll t q r \\<and> coll p t r \\<and> coll p q t)\n\ngoal (1 subgoal):\n 1. 0 \\<le> det3 t q r &&& 0 \\<le> det3 p t r &&& 0 \\<le> det3 p q t", "using ccw"], ["proof (prove)\nusing this:\n  \\<not> (coll t q r \\<and> coll p t r \\<and> coll p q t)\n  ccw t q r\n  ccw p t r\n  ccw p q t\n\ngoal (1 subgoal):\n 1. 0 \\<le> det3 t q r &&& 0 \\<le> det3 p t r &&& 0 \\<le> det3 p q t", "by (auto simp: less_eq_real_def ccw_def ccw'_def)"], ["proof (state)\nthis:\n  0 \\<le> det3 t q r\n  0 \\<le> det3 p t r\n  0 \\<le> det3 p q t\n\ngoal (1 subgoal):\n 1. \\<not> (coll t q r \\<and>\n            coll p t r \\<and> coll p q t) \\<Longrightarrow>\n    ccw p q r", "with False"], ["proof (chain)\npicking this:\n  \\<not> (coll t q r \\<and> coll p t r \\<and> coll p q t)\n  0 \\<le> det3 t q r\n  0 \\<le> det3 p t r\n  0 \\<le> det3 p q t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (coll t q r \\<and> coll p t r \\<and> coll p q t)\n  0 \\<le> det3 t q r\n  0 \\<le> det3 p t r\n  0 \\<le> det3 p q t\n\ngoal (1 subgoal):\n 1. ccw p q r", "by (auto simp: ccw_def det3_def' algebra_simps ccw'_def intro!: disjI1)"], ["proof (state)\nthis:\n  ccw p q r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ccw p q r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_total: \"lex t q \\<and> t \\<noteq> q \\<or> lex q t \\<and> t \\<noteq> q \\<or> t = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t q \\<and> t \\<noteq> q \\<or>\n    Counterclockwise_2D_Arbitrary.lex q t \\<and> t \\<noteq> q \\<or> t = q", "by auto"], ["", "lemma\n  ccw_two_up_contra:\n  assumes c: \"ccw' t p q\" \"ccw' t q r\"\n  assumes ccws: \"ccw t s p\" \"ccw t s q\" \"ccw t s r\" \"ccw t p q\" \"ccw t q r\" \"ccw t r p\"\n  assumes distinct: \"distinct5 t s p q r\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "from ccws"], ["proof (chain)\npicking this:\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p", "have nn: \"det3 t s p \\<ge> 0\" \"det3 t s q \\<ge> 0\" \"det3 t s r \\<ge> 0\" \"det3 t r p \\<ge> 0\""], ["proof (prove)\nusing this:\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n\ngoal (1 subgoal):\n 1. (0 \\<le> det3 t s p &&& 0 \\<le> det3 t s q) &&&\n    0 \\<le> det3 t s r &&& 0 \\<le> det3 t r p", "by (auto simp add: less_eq_real_def ccw_def ccw'_def)"], ["proof (state)\nthis:\n  0 \\<le> det3 t s p\n  0 \\<le> det3 t s q\n  0 \\<le> det3 t s r\n  0 \\<le> det3 t r p\n\ngoal (1 subgoal):\n 1. False", "with c det_identity[of t p q s r]"], ["proof (chain)\npicking this:\n  ccw' t p q\n  ccw' t q r\n  det3 t p q * det3 t s r + det3 t q r * det3 t s p +\n  det3 t r p * det3 t s q =\n  0\n  0 \\<le> det3 t s p\n  0 \\<le> det3 t s q\n  0 \\<le> det3 t s r\n  0 \\<le> det3 t r p", "have tsr: \"coll t s r\" and tsp: \"coll t s p\""], ["proof (prove)\nusing this:\n  ccw' t p q\n  ccw' t q r\n  det3 t p q * det3 t s r + det3 t q r * det3 t s p +\n  det3 t r p * det3 t s q =\n  0\n  0 \\<le> det3 t s p\n  0 \\<le> det3 t s q\n  0 \\<le> det3 t s r\n  0 \\<le> det3 t r p\n\ngoal (1 subgoal):\n 1. coll t s r &&& coll t s p", "by (auto simp: add_nonneg_eq_0_iff ccw'_def)"], ["proof (state)\nthis:\n  coll t s r\n  coll t s p\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  coll t s r\n  coll t s p\n\ngoal (1 subgoal):\n 1. False", "have trp: \"coll t r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coll t r p", "by (metis ccw'_subst_collinear distinct not_ccw'_eq tsr tsp)"], ["proof (state)\nthis:\n  coll t r p\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  coll t s r\n  coll t s p\n  coll t r p", "have tpr: \"coll t p r\""], ["proof (prove)\nusing this:\n  coll t s r\n  coll t s p\n  coll t r p\n\ngoal (1 subgoal):\n 1. coll t p r", "by (auto simp: det3_def' algebra_simps)"], ["proof (state)\nthis:\n  coll t p r\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  coll t p r\n\ngoal (1 subgoal):\n 1. False", "have psi: \"psi t p r \\<or> psi t r p \\<or> psi r p t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. psi t p r \\<or> psi t r p \\<or> psi r p t", "unfolding psi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "have ntsr: \"\\<not> ccw' t s r\" \"\\<not> ccw' t r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ccw' t s r &&& \\<not> ccw' t r s", "using tsr"], ["proof (prove)\nusing this:\n  coll t s r\n\ngoal (1 subgoal):\n 1. \\<not> ccw' t s r &&& \\<not> ccw' t r s", "by (auto simp: not_ccw'_eq det3_def' algebra_simps)"], ["proof (state)\nthis:\n  \\<not> ccw' t s r\n  \\<not> ccw' t r s\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "have f8: \"\\<not> ccw' t r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ccw' t r s", "using tsr not_ccw'_eq"], ["proof (prove)\nusing this:\n  coll t s r\n  (\\<not> ccw' ?t ?p ?s) = (ccw' ?t ?s ?p \\<or> coll ?t ?s ?p)\n\ngoal (1 subgoal):\n 1. \\<not> ccw' t r s", "by blast"], ["proof (state)\nthis:\n  \\<not> ccw' t r s\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "have f9: \"\\<not> ccw' t r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ccw' t r p", "using tpr"], ["proof (prove)\nusing this:\n  coll t p r\n\ngoal (1 subgoal):\n 1. \\<not> ccw' t r p", "by (simp add: not_ccw'_eq)"], ["proof (state)\nthis:\n  \\<not> ccw' t r p\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "have f10: \"(lex t r \\<and> lex r p \\<or> lex r p \\<and> lex p t \\<or> lex p t \\<and> lex t r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t \\<or>\n    Counterclockwise_2D_Arbitrary.lex p t \\<and>\n    Counterclockwise_2D_Arbitrary.lex t r", "using ccw_def ccws(6) psi_def f9"], ["proof (prove)\nusing this:\n  ccw ?p ?q ?r =\n  (ccw' ?p ?q ?r \\<or>\n   coll ?p ?q ?r \\<and>\n   (psi ?p ?q ?r \\<or> psi ?q ?r ?p \\<or> psi ?r ?p ?q))\n  ccw t r p\n  psi ?p ?q ?r =\n  (Counterclockwise_2D_Arbitrary.lex ?p ?q \\<and>\n   Counterclockwise_2D_Arbitrary.lex ?q ?r)\n  \\<not> ccw' t r p\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t \\<or>\n    Counterclockwise_2D_Arbitrary.lex p t \\<and>\n    Counterclockwise_2D_Arbitrary.lex t r", "by auto"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex t r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r p \\<or>\n  Counterclockwise_2D_Arbitrary.lex r p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p t \\<or>\n  Counterclockwise_2D_Arbitrary.lex p t \\<and>\n  Counterclockwise_2D_Arbitrary.lex t r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "have \"\\<not> ccw' t r q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ccw' t r q", "using c(2) not_ccw'_eq"], ["proof (prove)\nusing this:\n  ccw' t q r\n  (\\<not> ccw' ?t ?p ?s) = (ccw' ?t ?s ?p \\<or> coll ?t ?s ?p)\n\ngoal (1 subgoal):\n 1. \\<not> ccw' t r q", "by blast"], ["proof (state)\nthis:\n  \\<not> ccw' t r q\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "moreover"], ["proof (state)\nthis:\n  \\<not> ccw' t r q\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "have \"\\<not>coll t q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 t q s \\<noteq> 0", "using ntsr ccw'_subst_collinear distinct c(2)"], ["proof (prove)\nusing this:\n  \\<not> ccw' t s r\n  \\<not> ccw' t r s\n  \\<lbrakk>coll ?t ?r ?s; ?s \\<noteq> ?t; ccw' ?t ?r ?p\\<rbrakk>\n  \\<Longrightarrow> ccw' ?t ?s ?p \\<or> ccw' ?t ?p ?s\n  distinct5 t s p q r\n  ccw' t q r\n\ngoal (1 subgoal):\n 1. det3 t q s \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  det3 t q s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "hence \"ccw' t s q\""], ["proof (prove)\nusing this:\n  det3 t q s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' t s q", "by (meson ccw_def ccws(2) not_ccw'_eq)"], ["proof (state)\nthis:\n  ccw' t s q\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "moreover"], ["proof (state)\nthis:\n  ccw' t s q\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "from tsr tsp \\<open>coll t r p\\<close>"], ["proof (chain)\npicking this:\n  coll t s r\n  coll t s p\n  coll t r p", "have \"coll t p s\" \"coll t p r\" \"coll t r s\""], ["proof (prove)\nusing this:\n  coll t s r\n  coll t s p\n  coll t r p\n\ngoal (1 subgoal):\n 1. coll t p s &&& coll t p r &&& coll t r s", "by (auto simp add: det3_def' algebra_simps)"], ["proof (state)\nthis:\n  coll t p s\n  coll t p r\n  coll t r s\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> ccw' t r q\n  ccw' t s q\n  coll t p s\n  coll t p r\n  coll t r s", "show \"lex t p \\<and> lex p r \\<or> lex t r \\<and> lex r p \\<or> lex r p \\<and> lex p t\""], ["proof (prove)\nusing this:\n  \\<not> ccw' t r q\n  ccw' t s q\n  coll t p s\n  coll t p r\n  coll t r s\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex t p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p r \\<or>\n    Counterclockwise_2D_Arbitrary.lex t r \\<and>\n    Counterclockwise_2D_Arbitrary.lex r p \\<or>\n    Counterclockwise_2D_Arbitrary.lex r p \\<and>\n    Counterclockwise_2D_Arbitrary.lex p t", "by (metis ccw'_subst_psi_disj distinct ccw_def ccws(3) contra4 tsp ntsr(1) f10 lex_total\n        psi_def trp)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex t p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p r \\<or>\n  Counterclockwise_2D_Arbitrary.lex t r \\<and>\n  Counterclockwise_2D_Arbitrary.lex r p \\<or>\n  Counterclockwise_2D_Arbitrary.lex r p \\<and>\n  Counterclockwise_2D_Arbitrary.lex p t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  psi t p r \\<or> psi t r p \\<or> psi r p t\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  psi t p r \\<or> psi t r p \\<or> psi r p t\n\ngoal (1 subgoal):\n 1. False", "from distinct"], ["proof (chain)\npicking this:\n  distinct5 t s p q r", "have \"r \\<noteq> t\""], ["proof (prove)\nusing this:\n  distinct5 t s p q r\n\ngoal (1 subgoal):\n 1. r \\<noteq> t", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> t\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  coll t p r\n  psi t p r \\<or> psi t r p \\<or> psi r p t\n  r \\<noteq> t", "have \"ccw' t r q\""], ["proof (prove)\nusing this:\n  coll t p r\n  psi t p r \\<or> psi t r p \\<or> psi r p t\n  r \\<noteq> t\n\ngoal (1 subgoal):\n 1. ccw' t r q", "using c(1)"], ["proof (prove)\nusing this:\n  coll t p r\n  psi t p r \\<or> psi t r p \\<or> psi r p t\n  r \\<noteq> t\n  ccw' t p q\n\ngoal (1 subgoal):\n 1. ccw' t r q", "by (rule ccw'_subst_psi_disj)"], ["proof (state)\nthis:\n  ccw' t r q\n\ngoal (1 subgoal):\n 1. False", "thus False"], ["proof (prove)\nusing this:\n  ccw' t r q\n\ngoal (1 subgoal):\n 1. False", "using c(2)"], ["proof (prove)\nusing this:\n  ccw' t r q\n  ccw' t q r\n\ngoal (1 subgoal):\n 1. False", "by (simp add: ccw'_contra)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  ccw_transitive_contr:\n  fixes t s p q r\n  assumes ccws: \"ccw t s p\" \"ccw t s q\" \"ccw t s r\" \"ccw t p q\" \"ccw t q r\" \"ccw t r p\"\n  assumes distinct: \"distinct5 t s p q r\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "from ccws distinct"], ["proof (chain)\npicking this:\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r", "have *: \"ccw p t r\" \"ccw p q t\""], ["proof (prove)\nusing this:\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r\n\ngoal (1 subgoal):\n 1. ccw p t r &&& ccw p q t", "by (metis cyclic)+"], ["proof (state)\nthis:\n  ccw p t r\n  ccw p q t\n\ngoal (1 subgoal):\n 1. False", "with distinct"], ["proof (chain)\npicking this:\n  distinct5 t s p q r\n  ccw p t r\n  ccw p q t", "have \"ccw r p q\""], ["proof (prove)\nusing this:\n  distinct5 t s p q r\n  ccw p t r\n  ccw p q t\n\ngoal (1 subgoal):\n 1. ccw r p q", "using interior[OF _ _ ccws(5) *, of UNIV]"], ["proof (prove)\nusing this:\n  distinct5 t s p q r\n  ccw p t r\n  ccw p q t\n  \\<lbrakk>distinct4 p q r t; in4 UNIV p q r t\\<rbrakk>\n  \\<Longrightarrow> ccw p q r\n\ngoal (1 subgoal):\n 1. ccw r p q", "by (auto intro: cyclic)"], ["proof (state)\nthis:\n  ccw r p q\n\ngoal (1 subgoal):\n 1. False", "from ccws"], ["proof (chain)\npicking this:\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p", "have nonnegs: \"det3 t s p \\<ge> 0\" \"det3 t s q \\<ge> 0\" \"det3 t s r \\<ge> 0\" \"det3 t p q \\<ge> 0\"\n    \"det3 t q r \\<ge> 0\" \"det3 t r p \\<ge> 0\""], ["proof (prove)\nusing this:\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n\ngoal (1 subgoal):\n 1. (0 \\<le> det3 t s p &&& 0 \\<le> det3 t s q &&& 0 \\<le> det3 t s r) &&&\n    0 \\<le> det3 t p q &&& 0 \\<le> det3 t q r &&& 0 \\<le> det3 t r p", "by (auto simp add: less_eq_real_def ccw_def ccw'_def)"], ["proof (state)\nthis:\n  0 \\<le> det3 t s p\n  0 \\<le> det3 t s q\n  0 \\<le> det3 t s r\n  0 \\<le> det3 t p q\n  0 \\<le> det3 t q r\n  0 \\<le> det3 t r p\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  0 \\<le> det3 t s p\n  0 \\<le> det3 t s q\n  0 \\<le> det3 t s r\n  0 \\<le> det3 t p q\n  0 \\<le> det3 t q r\n  0 \\<le> det3 t r p\n\ngoal (1 subgoal):\n 1. False", "assume \"ccw' t p q\" \"ccw' t q r\" \"ccw' t r p\""], ["proof (state)\nthis:\n  ccw' t p q\n  ccw' t q r\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. False", "hence False"], ["proof (prove)\nusing this:\n  ccw' t p q\n  ccw' t q r\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. False", "using ccw_two_up_contra ccws distinct"], ["proof (prove)\nusing this:\n  ccw' t p q\n  ccw' t q r\n  ccw' t r p\n  \\<lbrakk>ccw' ?t ?p ?q; ccw' ?t ?q ?r; ccw ?t ?s ?p; ccw ?t ?s ?q;\n   ccw ?t ?s ?r; ccw ?t ?p ?q; ccw ?t ?q ?r; ccw ?t ?r ?p;\n   distinct5 ?t ?s ?p ?q ?r\\<rbrakk>\n  \\<Longrightarrow> False\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t q r; ccw' t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t q r; ccw' t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t q r; ccw' t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume c: \"coll t q r\" \"coll t r p\""], ["proof (state)\nthis:\n  coll t q r\n  coll t r p\n\ngoal (1 subgoal):\n 1. False", "with distinct four_points_aligned(1)[OF c, of s]"], ["proof (chain)\npicking this:\n  distinct5 t s p q r\n  distinct5 t s q r p \\<Longrightarrow> coll t p q\n  coll t q r\n  coll t r p", "have \"coll t p q\""], ["proof (prove)\nusing this:\n  distinct5 t s p q r\n  distinct5 t s q r p \\<Longrightarrow> coll t p q\n  coll t q r\n  coll t r p\n\ngoal (1 subgoal):\n 1. coll t p q", "by auto"], ["proof (state)\nthis:\n  coll t p q\n\ngoal (1 subgoal):\n 1. False", "hence \"(psi t p q \\<or> psi p q t \\<or> psi q t p)\"\n      \"psi t q r \\<or> psi q r t \\<or> psi r t q\"\n      \"psi t r p \\<or> psi r p t \\<or> psi p t r\""], ["proof (prove)\nusing this:\n  coll t p q\n\ngoal (1 subgoal):\n 1. psi t p q \\<or> psi p q t \\<or> psi q t p &&&\n    psi t q r \\<or> psi q r t \\<or> psi r t q &&&\n    psi t r p \\<or> psi r p t \\<or> psi p t r", "using ccws(4,5,6) c"], ["proof (prove)\nusing this:\n  coll t p q\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  coll t q r\n  coll t r p\n\ngoal (1 subgoal):\n 1. psi t p q \\<or> psi p q t \\<or> psi q t p &&&\n    psi t q r \\<or> psi q r t \\<or> psi r t q &&&\n    psi t r p \\<or> psi r p t \\<or> psi p t r", "by (simp_all add: ccw_def ccw'_def)"], ["proof (state)\nthis:\n  psi t p q \\<or> psi p q t \\<or> psi q t p\n  psi t q r \\<or> psi q r t \\<or> psi r t q\n  psi t r p \\<or> psi r p t \\<or> psi p t r\n\ngoal (1 subgoal):\n 1. False", "hence False"], ["proof (prove)\nusing this:\n  psi t p q \\<or> psi p q t \\<or> psi q t p\n  psi t q r \\<or> psi q r t \\<or> psi r t q\n  psi t r p \\<or> psi r p t \\<or> psi p t r\n\ngoal (1 subgoal):\n 1. False", "using distinct"], ["proof (prove)\nusing this:\n  psi t p q \\<or> psi p q t \\<or> psi q t p\n  psi t q r \\<or> psi q r t \\<or> psi r t q\n  psi t r p \\<or> psi r p t \\<or> psi p t r\n  distinct5 t s p q r\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: psi_def ccw'_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>coll t q r; coll t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>coll t q r; coll t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>coll t q r; coll t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume c: \"det3 t p q = 0\" \"det3 t q r > 0\" \"det3 t r p = 0\""], ["proof (state)\nthis:\n  coll t p q\n  0 < det3 t q r\n  coll t r p\n\ngoal (1 subgoal):\n 1. False", "have \"\\<And>x. det3 t q r = 0 \\<or> t = x \\<or> r = q \\<or> q = x \\<or> r = p \\<or> p = x \\<or> r = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       coll t q r \\<or>\n       t = x \\<or> r = q \\<or> q = x \\<or> r = p \\<or> p = x \\<or> r = x", "by (meson c(1) c(3) distinct four_points_aligned(1))"], ["proof (state)\nthis:\n  coll t q r \\<or>\n  t = ?x \\<or> r = q \\<or> q = ?x \\<or> r = p \\<or> p = ?x \\<or> r = ?x\n\ngoal (1 subgoal):\n 1. False", "hence False"], ["proof (prove)\nusing this:\n  coll t q r \\<or>\n  t = ?x \\<or> r = q \\<or> q = ?x \\<or> r = p \\<or> p = ?x \\<or> r = ?x\n\ngoal (1 subgoal):\n 1. False", "by (metis (full_types) c(2) distinct less_irrefl)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>coll t p q; 0 < det3 t q r; coll t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>coll t p q; 0 < det3 t q r; coll t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>coll t p q; 0 < det3 t q r; coll t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume c: \"det3 t p q = 0\" \"det3 t q r = 0\" \"det3 t r p > 0\""], ["proof (state)\nthis:\n  coll t p q\n  coll t q r\n  0 < det3 t r p\n\ngoal (1 subgoal):\n 1. False", "have \"\\<And>x. det3 t r p = 0 \\<or> t = x \\<or> r = x \\<or> q = x \\<or> p = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. coll t r p \\<or> t = x \\<or> r = x \\<or> q = x \\<or> p = x", "by (meson c(1) c(2) distinct four_points_aligned(1))"], ["proof (state)\nthis:\n  coll t r p \\<or> t = ?x \\<or> r = ?x \\<or> q = ?x \\<or> p = ?x\n\ngoal (1 subgoal):\n 1. False", "hence False"], ["proof (prove)\nusing this:\n  coll t r p \\<or> t = ?x \\<or> r = ?x \\<or> q = ?x \\<or> p = ?x\n\ngoal (1 subgoal):\n 1. False", "by (metis (no_types) c(3) distinct less_numeral_extra(3))"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>coll t p q; coll t q r; 0 < det3 t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>coll t p q; coll t q r; 0 < det3 t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>coll t p q; coll t q r; 0 < det3 t r p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume c: \"ccw' t p q\" \"ccw' t q r\""], ["proof (state)\nthis:\n  ccw' t p q\n  ccw' t q r\n\ngoal (1 subgoal):\n 1. False", "from ccw_two_up_contra[OF this ccws distinct]"], ["proof (chain)\npicking this:\n  False", "have False"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. False", "."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t q r\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t q r\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t q r\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume c: \"ccw' t p q\" \"ccw' t r p\""], ["proof (state)\nthis:\n  ccw' t p q\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. False", "from ccw_two_up_contra[OF this(2,1), of s] ccws distinct"], ["proof (chain)\npicking this:\n  \\<lbrakk>ccw t s r; ccw t s p; ccw t s q; ccw t r p; ccw t p q; ccw t q r;\n   distinct5 t s r p q\\<rbrakk>\n  \\<Longrightarrow> False\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r", "have False"], ["proof (prove)\nusing this:\n  \\<lbrakk>ccw t s r; ccw t s p; ccw t s q; ccw t r p; ccw t p q; ccw t q r;\n   distinct5 t s r p q\\<rbrakk>\n  \\<Longrightarrow> False\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t p q; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume c: \"ccw' t q r\" \"ccw' t r p\""], ["proof (state)\nthis:\n  ccw' t q r\n  ccw' t r p\n\ngoal (1 subgoal):\n 1. False", "from ccw_two_up_contra[OF this, of s] ccws distinct"], ["proof (chain)\npicking this:\n  \\<lbrakk>ccw t s q; ccw t s r; ccw t s p; ccw t q r; ccw t r p; ccw t p q;\n   distinct5 t s q r p\\<rbrakk>\n  \\<Longrightarrow> False\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r", "have False"], ["proof (prove)\nusing this:\n  \\<lbrakk>ccw t s q; ccw t s r; ccw t s p; ccw t q r; ccw t r p; ccw t p q;\n   distinct5 t s q r p\\<rbrakk>\n  \\<Longrightarrow> False\n  ccw t s p\n  ccw t s q\n  ccw t s r\n  ccw t p q\n  ccw t q r\n  ccw t r p\n  distinct5 t s p q r\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>ccw' t q r; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>ccw' t p q; ccw' t q r; ccw' t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>coll t q r; coll t r p\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>coll t p q; 0 < det3 t q r; coll t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>coll t p q; coll t q r; 0 < det3 t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>ccw' t p q; ccw' t q r\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>ccw' t p q; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>ccw' t q r; ccw' t r p\\<rbrakk> \\<Longrightarrow> False", "show \"False\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ccw' t p q; ccw' t q r; ccw' t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>coll t q r; coll t r p\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>coll t p q; 0 < det3 t q r; coll t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>coll t p q; coll t q r; 0 < det3 t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>ccw' t p q; ccw' t q r\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>ccw' t p q; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>ccw' t q r; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using \\<open>0 \\<le> det3 t p q\\<close>\n    \\<open>0 \\<le> det3 t q r\\<close>\\<open>0 \\<le> det3 t r p\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>ccw' t p q; ccw' t q r; ccw' t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>coll t q r; coll t r p\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>coll t p q; 0 < det3 t q r; coll t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>coll t p q; coll t q r; 0 < det3 t r p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>ccw' t p q; ccw' t q r\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>ccw' t p q; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>ccw' t q r; ccw' t r p\\<rbrakk> \\<Longrightarrow> False\n  0 \\<le> det3 t p q\n  0 \\<le> det3 t q r\n  0 \\<le> det3 t r p\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: less_eq_real_def ccw'_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation ccw: ccw_system ccw"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw_system ccw S", "by unfold_locales (metis ccw_transitive_contr nondegenerate)"], ["", "lemma ccw_scaleR1:\n  \"det3 0 xr P \\<noteq> 0 \\<Longrightarrow> 0 < e \\<Longrightarrow> ccw 0 xr P \\<Longrightarrow> ccw 0 (e*\\<^sub>Rxr) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>det3 0 xr P \\<noteq> 0; 0 < e; ccw 0 xr P\\<rbrakk>\n    \\<Longrightarrow> ccw 0 (e *\\<^sub>R xr) P", "by (simp add: ccw_def)"], ["", "lemma ccw_scaleR2:\n  \"det3 0 xr P \\<noteq> 0 \\<Longrightarrow> 0 < e \\<Longrightarrow> ccw 0 xr P \\<Longrightarrow> ccw 0 xr (e*\\<^sub>RP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>det3 0 xr P \\<noteq> 0; 0 < e; ccw 0 xr P\\<rbrakk>\n    \\<Longrightarrow> ccw 0 xr (e *\\<^sub>R P)", "by (simp add: ccw_def)"], ["", "lemma ccw_translate3_aux:\n  assumes \"\\<not>coll 0 a b\"\n  assumes \"x < 1\"\n  assumes \"ccw 0 (a - x*\\<^sub>Ra) (b - x *\\<^sub>R a)\"\n  shows \"ccw 0 a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw 0 a b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ccw 0 a b", "from assms"], ["proof (chain)\npicking this:\n  det3 0 a b \\<noteq> 0\n  x < 1\n  ccw 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a)", "have \"\\<not> coll 0 (a - x*\\<^sub>Ra) (b - x *\\<^sub>R a)\""], ["proof (prove)\nusing this:\n  det3 0 a b \\<noteq> 0\n  x < 1\n  ccw 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a)\n\ngoal (1 subgoal):\n 1. det3 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  det3 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw 0 a b", "with assms"], ["proof (chain)\npicking this:\n  det3 0 a b \\<noteq> 0\n  x < 1\n  ccw 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a)\n  det3 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a) \\<noteq> 0", "have \"ccw' 0 ((1 - x) *\\<^sub>R a) (b - x *\\<^sub>R a)\""], ["proof (prove)\nusing this:\n  det3 0 a b \\<noteq> 0\n  x < 1\n  ccw 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a)\n  det3 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' 0 ((1 - x) *\\<^sub>R a) (b - x *\\<^sub>R a)", "by (simp add: algebra_simps ccw_def)"], ["proof (state)\nthis:\n  ccw' 0 ((1 - x) *\\<^sub>R a) (b - x *\\<^sub>R a)\n\ngoal (1 subgoal):\n 1. ccw 0 a b", "thus \"ccw 0 a b\""], ["proof (prove)\nusing this:\n  ccw' 0 ((1 - x) *\\<^sub>R a) (b - x *\\<^sub>R a)\n\ngoal (1 subgoal):\n 1. ccw 0 a b", "using \\<open>x < 1\\<close>"], ["proof (prove)\nusing this:\n  ccw' 0 ((1 - x) *\\<^sub>R a) (b - x *\\<^sub>R a)\n  x < 1\n\ngoal (1 subgoal):\n 1. ccw 0 a b", "by (simp add: ccw_def)"], ["proof (state)\nthis:\n  ccw 0 a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccw_translate3_minus: \"det3 0 a b \\<noteq> 0 \\<Longrightarrow> x < 1 \\<Longrightarrow> ccw 0 a (b - x *\\<^sub>R a) \\<Longrightarrow> ccw 0 a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>det3 0 a b \\<noteq> 0; x < 1;\n     ccw 0 a (b - x *\\<^sub>R a)\\<rbrakk>\n    \\<Longrightarrow> ccw 0 a b", "using ccw_translate3_aux[of a b x] ccw_scaleR1[of a \"b - x *\\<^sub>R a\" \"1-x\" ]"], ["proof (prove)\nusing this:\n  \\<lbrakk>det3 0 a b \\<noteq> 0; x < 1;\n   ccw 0 (a - x *\\<^sub>R a) (b - x *\\<^sub>R a)\\<rbrakk>\n  \\<Longrightarrow> ccw 0 a b\n  \\<lbrakk>det3 0 a (b - x *\\<^sub>R a) \\<noteq> 0; 0 < 1 - x;\n   ccw 0 a (b - x *\\<^sub>R a)\\<rbrakk>\n  \\<Longrightarrow> ccw 0 ((1 - x) *\\<^sub>R a) (b - x *\\<^sub>R a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>det3 0 a b \\<noteq> 0; x < 1;\n     ccw 0 a (b - x *\\<^sub>R a)\\<rbrakk>\n    \\<Longrightarrow> ccw 0 a b", "by (auto simp add: algebra_simps)"], ["", "lemma ccw_translate3: \"det3 0 a b \\<noteq> 0 \\<Longrightarrow> x < 1 \\<Longrightarrow> ccw 0 a b \\<Longrightarrow> ccw 0 a (x *\\<^sub>R a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>det3 0 a b \\<noteq> 0; x < 1; ccw 0 a b\\<rbrakk>\n    \\<Longrightarrow> ccw 0 a (x *\\<^sub>R a + b)", "by (rule ccw_translate3_minus) (auto simp add: algebra_simps)"], ["", "lemma ccw_switch23: \"det3 0 P Q \\<noteq> 0 \\<Longrightarrow> (\\<not> ccw 0 Q P \\<longleftrightarrow> ccw 0 P Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 0 P Q \\<noteq> 0 \\<Longrightarrow> (\\<not> ccw 0 Q P) = ccw 0 P Q", "by (auto simp: ccw_def algebra_simps not_ccw'_eq ccw'_not_coll)"], ["", "lemma ccw0_upward: \"fst a > 0 \\<Longrightarrow> snd a = 0 \\<Longrightarrow> snd b > snd a \\<Longrightarrow> ccw 0 a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < fst a; snd a = 0; snd a < snd b\\<rbrakk>\n    \\<Longrightarrow> ccw 0 a b", "by (auto simp: ccw_def det3_def' algebra_simps ccw'_def)"], ["", "lemma ccw_uminus3[simp]: \"det3 a b c \\<noteq> 0 \\<Longrightarrow> ccw (-a) (-b) (-c) = ccw a b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 a b c \\<noteq> 0 \\<Longrightarrow>\n    ccw (- a) (- b) (- c) = ccw a b c", "by (auto simp: ccw_def ccw'_def algebra_simps det3_def')"], ["", "lemma coll_minus_eq: \"coll (x - a) (x - b) (x - c) = coll a b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coll (x - a) (x - b) (x - c) = coll a b c", "by (auto simp: det3_def' algebra_simps)"], ["", "lemma ccw_minus3: \"\\<not> coll a b c \\<Longrightarrow> ccw (x - a) (x - b) (x - c) \\<longleftrightarrow> ccw a b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 a b c \\<noteq> 0 \\<Longrightarrow>\n    ccw (x - a) (x - b) (x - c) = ccw a b c", "by (simp add: ccw_def coll_minus_eq)"], ["", "lemma ccw0_uminus[simp]: \"\\<not> coll 0 a b \\<Longrightarrow> ccw 0 (-a) (-b) \\<longleftrightarrow> ccw 0 a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det3 0 a b \\<noteq> 0 \\<Longrightarrow> ccw 0 (- a) (- b) = ccw 0 a b", "using ccw_uminus3[of 0 a b]"], ["proof (prove)\nusing this:\n  det3 0 a b \\<noteq> 0 \\<Longrightarrow> ccw (- 0) (- a) (- b) = ccw 0 a b\n\ngoal (1 subgoal):\n 1. det3 0 a b \\<noteq> 0 \\<Longrightarrow> ccw 0 (- a) (- b) = ccw 0 a b", "by simp"], ["", "lemma lex_convex2:\n  assumes \"lex p q\" \"lex p r\" \"0 \\<le> u\" \"u \\<le> 1\"\n  shows \"lex p (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n 2. \\<not> ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "note \\<open>lex p q\\<close>"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p q\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n 2. \\<not> ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "also"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p q\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n 2. \\<not> ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "assume \"lex q r\""], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex q r\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n 2. \\<not> ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "hence \"lex q (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex q\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "using \\<open>0 \\<le> u\\<close> \\<open>u \\<le> 1\\<close>"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex q r\n  0 \\<le> u\n  u \\<le> 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex q\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "by (rule lex_convex_self2)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex q (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n 2. \\<not> ?P \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "finally (lex_trans)"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex p (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "show ?thesis"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "."], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "note \\<open>lex p r\\<close>"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p r\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "also"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p r\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "assume \"\\<not> lex q r\""], ["proof (state)\nthis:\n  \\<not> Counterclockwise_2D_Arbitrary.lex q r\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "hence \"lex r q\""], ["proof (prove)\nusing this:\n  \\<not> Counterclockwise_2D_Arbitrary.lex q r\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex r q", "by simp"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex r q\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "hence \"lex r ((1 - u) *\\<^sub>R r + (1 - (1 - u)) *\\<^sub>R q)\""], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex r q\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex r\n     ((1 - u) *\\<^sub>R r + (1 - (1 - u)) *\\<^sub>R q)", "using \\<open>0 \\<le> u\\<close> \\<open>u \\<le> 1\\<close>"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex r q\n  0 \\<le> u\n  u \\<le> 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex r\n     ((1 - u) *\\<^sub>R r + (1 - (1 - u)) *\\<^sub>R q)", "by (intro lex_convex_self2) simp_all"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex r\n   ((1 - u) *\\<^sub>R r + (1 - (1 - u)) *\\<^sub>R q)\n\ngoal (1 subgoal):\n 1. \\<not> Counterclockwise_2D_Arbitrary.lex q r \\<Longrightarrow>\n    Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "finally (lex_trans)"], ["proof (chain)\npicking this:\n  Counterclockwise_2D_Arbitrary.lex p\n   ((1 - u) *\\<^sub>R r + (1 - (1 - u)) *\\<^sub>R q)", "show ?thesis"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex p\n   ((1 - u) *\\<^sub>R r + (1 - (1 - u)) *\\<^sub>R q)\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex p\n     (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex p (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_convex2':\n  assumes \"lex q p\" \"lex r p\" \"0 \\<le> u\" \"u \\<le> 1\"\n  shows \"lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n     p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n     p", "have \"lex (- p) (u *\\<^sub>R (-q) + (1 - u) *\\<^sub>R (-r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (- p)\n     (u *\\<^sub>R - q + (1 - u) *\\<^sub>R - r)", "using assms"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex q p\n  Counterclockwise_2D_Arbitrary.lex r p\n  0 \\<le> u\n  u \\<le> 1\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (- p)\n     (u *\\<^sub>R - q + (1 - u) *\\<^sub>R - r)", "by (intro lex_convex2) (auto simp: lex_def)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (- p)\n   (u *\\<^sub>R - q + (1 - u) *\\<^sub>R - r)\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n     p", "thus ?thesis"], ["proof (prove)\nusing this:\n  Counterclockwise_2D_Arbitrary.lex (- p)\n   (u *\\<^sub>R - q + (1 - u) *\\<^sub>R - r)\n\ngoal (1 subgoal):\n 1. Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r)\n     p", "by (auto simp: lex_def algebra_simps)"], ["proof (state)\nthis:\n  Counterclockwise_2D_Arbitrary.lex (u *\\<^sub>R q + (1 - u) *\\<^sub>R r) p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_convex1:\n  assumes \"psi c a b\"\n  assumes \"psi d a b\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"psi (u *\\<^sub>R c + v *\\<^sub>R d) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "from assms"], ["proof (chain)\npicking this:\n  psi c a b\n  psi d a b\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1", "have v: \"v = (1 - u)\""], ["proof (prove)\nusing this:\n  psi c a b\n  psi d a b\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. v = 1 - u", "by simp"], ["proof (state)\nthis:\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "using assms"], ["proof (prove)\nusing this:\n  psi c a b\n  psi d a b\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "by (auto simp: psi_def v intro!: lex_convex2' lex_convex2)"], ["proof (state)\nthis:\n  psi (u *\\<^sub>R c + v *\\<^sub>R d) a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_convex2:\n  assumes \"psi a c b\"\n  assumes \"psi a d b\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"psi a (u *\\<^sub>R c + v *\\<^sub>R d) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. psi a (u *\\<^sub>R c + v *\\<^sub>R d) b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. psi a (u *\\<^sub>R c + v *\\<^sub>R d) b", "from assms"], ["proof (chain)\npicking this:\n  psi a c b\n  psi a d b\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1", "have v: \"v = (1 - u)\""], ["proof (prove)\nusing this:\n  psi a c b\n  psi a d b\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. v = 1 - u", "by simp"], ["proof (state)\nthis:\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. psi a (u *\\<^sub>R c + v *\\<^sub>R d) b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. psi a (u *\\<^sub>R c + v *\\<^sub>R d) b", "using assms"], ["proof (prove)\nusing this:\n  psi a c b\n  psi a d b\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. psi a (u *\\<^sub>R c + v *\\<^sub>R d) b", "by (auto simp: psi_def v intro!: lex_convex2' lex_convex2)"], ["proof (state)\nthis:\n  psi a (u *\\<^sub>R c + v *\\<^sub>R d) b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_convex3:\n  assumes \"psi a b c\"\n  assumes \"psi a b d\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"psi a b (u *\\<^sub>R c + v *\\<^sub>R d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from assms"], ["proof (chain)\npicking this:\n  psi a b c\n  psi a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1", "have v: \"v = (1 - u)\""], ["proof (prove)\nusing this:\n  psi a b c\n  psi a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. v = 1 - u", "by simp"], ["proof (state)\nthis:\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d)", "using assms"], ["proof (prove)\nusing this:\n  psi a b c\n  psi a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (auto simp: psi_def v intro!: lex_convex2)"], ["proof (state)\nthis:\n  psi a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coll_convex:\n  assumes \"coll a b c\" \"coll a b d\"\n  assumes \"0 \\<le> u\" \"0 \\<le> v\" \"u + v = 1\"\n  shows \"coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume \"a \\<noteq> b\""], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "with assms(1, 2)"], ["proof (chain)\npicking this:\n  coll a b c\n  coll a b d\n  a \\<noteq> b", "obtain x y where xy: \"c - a = x *\\<^sub>R (b - a)\" \"d - a = y *\\<^sub>R (b - a)\""], ["proof (prove)\nusing this:\n  coll a b c\n  coll a b d\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>c - a = x *\\<^sub>R (b - a);\n         d - a = y *\\<^sub>R (b - a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: det3_translate_origin dest!: coll_scale)"], ["proof (state)\nthis:\n  c - a = x *\\<^sub>R (b - a)\n  d - a = y *\\<^sub>R (b - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from assms"], ["proof (chain)\npicking this:\n  coll a b c\n  coll a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1", "have \"(u + v) *\\<^sub>R a = a\""], ["proof (prove)\nusing this:\n  coll a b c\n  coll a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n\ngoal (1 subgoal):\n 1. (u + v) *\\<^sub>R a = a", "by simp"], ["proof (state)\nthis:\n  (u + v) *\\<^sub>R a = a\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence \"u *\\<^sub>R c + v *\\<^sub>R d - a = u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a)\""], ["proof (prove)\nusing this:\n  (u + v) *\\<^sub>R a = a\n\ngoal (1 subgoal):\n 1. u *\\<^sub>R c + v *\\<^sub>R d - a =\n    u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a)", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  u *\\<^sub>R c + v *\\<^sub>R d - a =\n  u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "also"], ["proof (state)\nthis:\n  u *\\<^sub>R c + v *\\<^sub>R d - a =\n  u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"\\<dots> = u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a) =\n    u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a)", "by (simp add: xy)"], ["proof (state)\nthis:\n  u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a) =\n  u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "also"], ["proof (state)\nthis:\n  u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a) =\n  u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"\\<dots> = (u * x + v * y) *\\<^sub>R (b - a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a) =\n    (u * x + v * y) *\\<^sub>R (b - a)", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a) =\n  (u * x + v * y) *\\<^sub>R (b - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "also"], ["proof (state)\nthis:\n  u *\\<^sub>R x *\\<^sub>R (b - a) + v *\\<^sub>R y *\\<^sub>R (b - a) =\n  (u * x + v * y) *\\<^sub>R (b - a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"coll 0 (b - a) \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coll 0 (b - a) ((u * x + v * y) *\\<^sub>R (b - a))", "by (simp add: coll_scaleR_right_eq)"], ["proof (state)\nthis:\n  coll 0 (b - a) ((u * x + v * y) *\\<^sub>R (b - a))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n 2. \\<not> ?P \\<Longrightarrow> coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "finally"], ["proof (chain)\npicking this:\n  coll 0 (b - a) (u *\\<^sub>R c + v *\\<^sub>R d - a)", "show ?thesis"], ["proof (prove)\nusing this:\n  coll 0 (b - a) (u *\\<^sub>R c + v *\\<^sub>R d - a)\n\ngoal (1 subgoal):\n 1. coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (auto simp: det3_translate_origin)"], ["proof (state)\nthis:\n  coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. \\<not> a \\<noteq> b \\<Longrightarrow>\n    coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "qed simp"], ["", "lemma (in ccw_vector_space) convex3:\n  assumes \"u \\<ge> 0\" \"v \\<ge> 0\" \"u + v = 1\" \"ccw a b d\" \"ccw a b c\"\n  shows \"ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"v = 1 - u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = 1 - u", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b d\n  ccw a b c\n\ngoal (1 subgoal):\n 1. v = 1 - u", "by simp"], ["proof (state)\nthis:\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence \"ccw 0 (b - a) (u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a))\""], ["proof (prove)\nusing this:\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. ccw (0::'a) (b - a) (u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a))", "using assms"], ["proof (prove)\nusing this:\n  v = 1 - u\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b d\n  ccw a b c\n\ngoal (1 subgoal):\n 1. ccw (0::'a) (b - a) (u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a))", "by (cases \"u = 0\" \"v = 0\" rule: bool.exhaust[case_product bool.exhaust])\n      (auto simp add: translate_origin intro!: add3)"], ["proof (state)\nthis:\n  ccw (0::'a) (b - a) (u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a))\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "also"], ["proof (state)\nthis:\n  ccw (0::'a) (b - a) (u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a))\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"(u + v) *\\<^sub>R a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u + v) *\\<^sub>R a = a", "by (simp add: assms)"], ["proof (state)\nthis:\n  (u + v) *\\<^sub>R a = a\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence \"u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a) = u *\\<^sub>R c + v *\\<^sub>R d - a\""], ["proof (prove)\nusing this:\n  (u + v) *\\<^sub>R a = a\n\ngoal (1 subgoal):\n 1. u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a) =\n    u *\\<^sub>R c + v *\\<^sub>R d - a", "by (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  u *\\<^sub>R (c - a) + v *\\<^sub>R (d - a) =\n  u *\\<^sub>R c + v *\\<^sub>R d - a\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "finally"], ["proof (chain)\npicking this:\n  ccw (0::'a) (b - a) (u *\\<^sub>R c + v *\\<^sub>R d - a)", "show ?thesis"], ["proof (prove)\nusing this:\n  ccw (0::'a) (b - a) (u *\\<^sub>R c + v *\\<^sub>R d - a)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: translate_origin)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccw_self[simp]: \"ccw a a b\" \"ccw b a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw a a b &&& ccw b a a", "by (auto simp: ccw_def psi_def intro: cyclic)"], ["", "lemma ccw_sefl'[simp]: \"ccw a b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw a b a", "by (rule cyclic) simp"], ["", "lemma ccw_convex':\n  assumes uv: \"u \\<ge> 0\" \"v \\<ge> 0\" \"u + v = 1\"\n  assumes \"ccw a b c\" and 1: \"coll a b c\"\n  assumes \"ccw a b d\" and 2: \"\\<not> coll a b d\"\n  shows \"ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from assms"], ["proof (chain)\npicking this:\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  coll a b c\n  ccw a b d\n  det3 a b d \\<noteq> 0", "have u: \"0 \\<le> u\" \"u \\<le> 1\" and v: \"v = 1 - u\""], ["proof (prove)\nusing this:\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  coll a b c\n  ccw a b d\n  det3 a b d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (0 \\<le> u &&& u \\<le> 1) &&& v = 1 - u", "by (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  0 \\<le> u\n  u \\<le> 1\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "let ?c = \"u *\\<^sub>R c + v *\\<^sub>R d\""], ["proof (state)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from 1"], ["proof (chain)\npicking this:\n  coll a b c", "have abd: \"ccw' a b d\""], ["proof (prove)\nusing this:\n  coll a b c\n\ngoal (1 subgoal):\n 1. ccw' a b d", "using assms"], ["proof (prove)\nusing this:\n  coll a b c\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  coll a b c\n  ccw a b d\n  det3 a b d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' a b d", "by (auto simp: ccw_def)"], ["proof (state)\nthis:\n  ccw' a b d\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  ccw' a b d\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume 2: \"\\<not> coll a b c\""], ["proof (state)\nthis:\n  det3 a b c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from 2"], ["proof (chain)\npicking this:\n  det3 a b c \\<noteq> 0", "have \"ccw' a b c\""], ["proof (prove)\nusing this:\n  det3 a b c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' a b c", "using assms"], ["proof (prove)\nusing this:\n  det3 a b c \\<noteq> 0\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  coll a b c\n  ccw a b d\n  det3 a b d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' a b c", "by (auto simp: ccw_def)"], ["proof (state)\nthis:\n  ccw' a b c\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "with abd"], ["proof (chain)\npicking this:\n  ccw' a b d\n  ccw' a b c", "have \"ccw' a b ?c\""], ["proof (prove)\nusing this:\n  ccw' a b d\n  ccw' a b c\n\ngoal (1 subgoal):\n 1. ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)", "using assms"], ["proof (prove)\nusing this:\n  ccw' a b d\n  ccw' a b c\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  coll a b c\n  ccw a b d\n  det3 a b d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (auto intro!: ccw'.convex3)"], ["proof (state)\nthis:\n  ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence ?thesis"], ["proof (prove)\nusing this:\n  ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: ccw_def)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  det3 a b c \\<noteq> 0 \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  det3 a b c \\<noteq> 0 \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  det3 a b c \\<noteq> 0 \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume 2: \"coll a b c\""], ["proof (state)\nthis:\n  coll a b c\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  coll a b c\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume \"a = b\""], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence ?thesis"], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by simp"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume \"v = 0\""], ["proof (state)\nthis:\n  v = 0\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence ?thesis"], ["proof (prove)\nusing this:\n  v = 0\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (auto simp: v assms)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  v = 0 \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  v = 0 \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  v = 0 \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume \"v \\<noteq> 0\" \"a \\<noteq> b\""], ["proof (state)\nthis:\n  v \\<noteq> 0\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"coll c a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coll c a b", "using 2"], ["proof (prove)\nusing this:\n  coll a b c\n\ngoal (1 subgoal):\n 1. coll c a b", "by (auto simp: det3_def' algebra_simps)"], ["proof (state)\nthis:\n  coll c a b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from coll_ex_scaling[OF \\<open>a \\<noteq> b\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>r. c = a + r *\\<^sub>R (b - a)", "obtain r where c: \"c = a + r *\\<^sub>R (b - a)\""], ["proof (prove)\nusing this:\n  \\<exists>r. c = a + r *\\<^sub>R (b - a)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        c = a + r *\\<^sub>R (b - a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = a + r *\\<^sub>R (b - a)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have *: \"u *\\<^sub>R (a + r *\\<^sub>R (b - a)) + v *\\<^sub>R d - a = (u * r) *\\<^sub>R (b - a)  + (1 - u) *\\<^sub>R (d - a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u *\\<^sub>R (a + r *\\<^sub>R (b - a)) + v *\\<^sub>R d - a =\n    (u * r) *\\<^sub>R (b - a) + (1 - u) *\\<^sub>R (d - a)", "by (auto simp: algebra_simps v)"], ["proof (state)\nthis:\n  u *\\<^sub>R (a + r *\\<^sub>R (b - a)) + v *\\<^sub>R d - a =\n  (u * r) *\\<^sub>R (b - a) + (1 - u) *\\<^sub>R (d - a)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"ccw' a b ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)", "using \\<open>v \\<noteq> 0\\<close> uv abd"], ["proof (prove)\nusing this:\n  v \\<noteq> 0\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw' a b d\n\ngoal (1 subgoal):\n 1. ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: ccw'.translate_origin c *)"], ["proof (state)\nthis:\n  ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence ?thesis"], ["proof (prove)\nusing this:\n  ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: ccw_def)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<noteq> 0; a \\<noteq> b\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "ultimately"], ["proof (chain)\npicking this:\n  a = b \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  v = 0 \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>v \\<noteq> 0; a \\<noteq> b\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have ?thesis"], ["proof (prove)\nusing this:\n  a = b \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  v = 0 \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>v \\<noteq> 0; a \\<noteq> b\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by blast"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  coll a b c \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "ultimately"], ["proof (chain)\npicking this:\n  det3 a b c \\<noteq> 0 \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  coll a b c \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "show ?thesis"], ["proof (prove)\nusing this:\n  det3 a b c \\<noteq> 0 \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  coll a b c \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by blast"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccw_convex:\n  assumes uv: \"u \\<ge> 0\" \"v \\<ge> 0\" \"u + v = 1\"\n  assumes \"ccw a b c\"\n  assumes \"ccw a b d\"\n  assumes lex: \"coll a b c \\<Longrightarrow> coll a b d \\<Longrightarrow> lex b a\"\n  shows \"ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from assms"], ["proof (chain)\npicking this:\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a", "have u: \"0 \\<le> u\" \"u \\<le> 1\" and v: \"v = 1 - u\""], ["proof (prove)\nusing this:\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. (0 \\<le> u &&& u \\<le> 1) &&& v = 1 - u", "by (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  0 \\<le> u\n  u \\<le> 1\n  v = 1 - u\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "let ?c = \"u *\\<^sub>R c + v *\\<^sub>R d\""], ["proof (state)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume coll: \"coll a b c \\<and> coll a b d\""], ["proof (state)\nthis:\n  coll a b c \\<and> coll a b d\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence \"coll a b ?c\""], ["proof (prove)\nusing this:\n  coll a b c \\<and> coll a b d\n\ngoal (1 subgoal):\n 1. coll a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (auto intro!: coll_convex assms)"], ["proof (state)\nthis:\n  coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from coll"], ["proof (chain)\npicking this:\n  coll a b c \\<and> coll a b d", "have \"psi a b c \\<or> psi b c a \\<or> psi c a b\" \"psi a b d \\<or> psi b d a \\<or> psi d a b\""], ["proof (prove)\nusing this:\n  coll a b c \\<and> coll a b d\n\ngoal (1 subgoal):\n 1. psi a b c \\<or> psi b c a \\<or> psi c a b &&&\n    psi a b d \\<or> psi b d a \\<or> psi d a b", "using assms"], ["proof (prove)\nusing this:\n  coll a b c \\<and> coll a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. psi a b c \\<or> psi b c a \\<or> psi c a b &&&\n    psi a b d \\<or> psi b d a \\<or> psi d a b", "by (auto simp add: ccw_def ccw'_not_coll)"], ["proof (state)\nthis:\n  psi a b c \\<or> psi b c a \\<or> psi c a b\n  psi a b d \\<or> psi b d a \\<or> psi d a b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence \"psi a b ?c \\<or> psi b ?c a \\<or> psi ?c a b\""], ["proof (prove)\nusing this:\n  psi a b c \\<or> psi b c a \\<or> psi c a b\n  psi a b d \\<or> psi b d a \\<or> psi d a b\n\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d) \\<or>\n    psi b (u *\\<^sub>R c + v *\\<^sub>R d) a \\<or>\n    psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "using coll uv lex"], ["proof (prove)\nusing this:\n  psi a b c \\<or> psi b c a \\<or> psi c a b\n  psi a b d \\<or> psi b d a \\<or> psi d a b\n  coll a b c \\<and> coll a b d\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. psi a b (u *\\<^sub>R c + v *\\<^sub>R d) \\<or>\n    psi b (u *\\<^sub>R c + v *\\<^sub>R d) a \\<or>\n    psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "by (auto simp: psi_def ccw_def not_lex lexs_def v intro: lex_convex2 lex_convex2')"], ["proof (state)\nthis:\n  psi a b (u *\\<^sub>R c + v *\\<^sub>R d) \\<or>\n  psi b (u *\\<^sub>R c + v *\\<^sub>R d) a \\<or>\n  psi (u *\\<^sub>R c + v *\\<^sub>R d) a b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "ultimately"], ["proof (chain)\npicking this:\n  coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  psi a b (u *\\<^sub>R c + v *\\<^sub>R d) \\<or>\n  psi b (u *\\<^sub>R c + v *\\<^sub>R d) a \\<or>\n  psi (u *\\<^sub>R c + v *\\<^sub>R d) a b", "have ?thesis"], ["proof (prove)\nusing this:\n  coll a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  psi a b (u *\\<^sub>R c + v *\\<^sub>R d) \\<or>\n  psi b (u *\\<^sub>R c + v *\\<^sub>R d) a \\<or>\n  psi (u *\\<^sub>R c + v *\\<^sub>R d) a b\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: ccw_def)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  coll a b c \\<and> coll a b d \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  coll a b c \\<and> coll a b d \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  coll a b c \\<and> coll a b d \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume 1: \"\\<not> coll a b d\" and 2: \"\\<not> coll a b c\""], ["proof (state)\nthis:\n  det3 a b d \\<noteq> 0\n  det3 a b c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from 1"], ["proof (chain)\npicking this:\n  det3 a b d \\<noteq> 0", "have abd: \"ccw' a b d\""], ["proof (prove)\nusing this:\n  det3 a b d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' a b d", "using assms"], ["proof (prove)\nusing this:\n  det3 a b d \\<noteq> 0\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. ccw' a b d", "by (auto simp: ccw_def)"], ["proof (state)\nthis:\n  ccw' a b d\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from 2"], ["proof (chain)\npicking this:\n  det3 a b c \\<noteq> 0", "have \"ccw' a b c\""], ["proof (prove)\nusing this:\n  det3 a b c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw' a b c", "using assms"], ["proof (prove)\nusing this:\n  det3 a b c \\<noteq> 0\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. ccw' a b c", "by (auto simp: ccw_def)"], ["proof (state)\nthis:\n  ccw' a b c\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "with abd"], ["proof (chain)\npicking this:\n  ccw' a b d\n  ccw' a b c", "have \"ccw' a b ?c\""], ["proof (prove)\nusing this:\n  ccw' a b d\n  ccw' a b c\n\ngoal (1 subgoal):\n 1. ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)", "using assms"], ["proof (prove)\nusing this:\n  ccw' a b d\n  ccw' a b c\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (auto intro!: ccw'.convex3)"], ["proof (state)\nthis:\n  ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "hence ?thesis"], ["proof (prove)\nusing this:\n  ccw' a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: ccw_def)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>det3 a b d \\<noteq> 0; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>det3 a b d \\<noteq> 0; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>det3 a b d \\<noteq> 0; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume \"\\<not> coll a b d\" \"coll a b c\""], ["proof (state)\nthis:\n  det3 a b d \\<noteq> 0\n  coll a b c\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (rule ccw_convex') fact+"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>det3 a b d \\<noteq> 0; coll a b c\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>det3 a b d \\<noteq> 0; coll a b c\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>det3 a b d \\<noteq> 0; coll a b c\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "assume 1: \"coll a b d\" and 2: \"\\<not> coll a b c\""], ["proof (state)\nthis:\n  coll a b d\n  det3 a b c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "have \"0 \\<le> 1 - u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> 1 - u", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> u\n  0 \\<le> v\n  u + v = 1\n  ccw a b c\n  ccw a b d\n  \\<lbrakk>coll a b c; coll a b d\\<rbrakk>\n  \\<Longrightarrow> Counterclockwise_2D_Arbitrary.lex b a\n\ngoal (1 subgoal):\n 1. 0 \\<le> 1 - u", "by (auto )"], ["proof (state)\nthis:\n  0 \\<le> 1 - u\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "from ccw_convex'[OF this \\<open>0 \\<le> u\\<close> _ \\<open>ccw a b d\\<close> 1 \\<open>ccw a b c\\<close> 2]"], ["proof (chain)\npicking this:\n  1 - u + u = 1 \\<Longrightarrow>\n  ccw a b ((1 - u) *\\<^sub>R d + u *\\<^sub>R c)", "have ?thesis"], ["proof (prove)\nusing this:\n  1 - u + u = 1 \\<Longrightarrow>\n  ccw a b ((1 - u) *\\<^sub>R d + u *\\<^sub>R c)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by (simp add: algebra_simps v)"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>coll a b d; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "ultimately"], ["proof (chain)\npicking this:\n  coll a b c \\<and> coll a b d \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>det3 a b d \\<noteq> 0; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>det3 a b d \\<noteq> 0; coll a b c\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>coll a b d; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "show ?thesis"], ["proof (prove)\nusing this:\n  coll a b c \\<and> coll a b d \\<Longrightarrow>\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>det3 a b d \\<noteq> 0; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>det3 a b d \\<noteq> 0; coll a b c\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n  \\<lbrakk>coll a b d; det3 a b c \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal (1 subgoal):\n 1. ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)", "by blast"], ["proof (state)\nthis:\n  ccw a b (u *\\<^sub>R c + v *\\<^sub>R d)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation ccw: ccw_convex ccw S \"\\<lambda>a b. lex b a\" for S"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw_convex ccw S (\\<lambda>a b. Counterclockwise_2D_Arbitrary.lex b a)", "by unfold_locales (rule ccw_convex)"], ["", "lemma ccw_sorted_scaleR: \"ccw.sortedP 0 xs \\<Longrightarrow> r > 0 \\<Longrightarrow> ccw.sortedP 0 (map ((*\\<^sub>R) r) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ccw.sortedP 0 xs; 0 < r\\<rbrakk>\n    \\<Longrightarrow> ccw.sortedP 0 (map ((*\\<^sub>R) r) xs)", "by (induct xs)\n    (auto intro!: ccw.sortedP.Cons ccw_scale23 elim!: ccw.sortedP_Cons simp del: scaleR_Pair)"], ["", "lemma ccw_sorted_implies_ccw'_sortedP:\n  assumes nonaligned: \"\\<And>y z. y \\<in> set Ps \\<Longrightarrow> z \\<in> set Ps \\<Longrightarrow> y \\<noteq> z \\<Longrightarrow> \\<not> coll 0 y z\"\n  assumes sorted: \"linorder_list0.sortedP (ccw 0) Ps\"\n  assumes \"distinct Ps\"\n  shows \"linorder_list0.sortedP (ccw' 0 ) Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw'.sortedP 0 Ps", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y \\<in> set Ps; ?z \\<in> set Ps; ?y \\<noteq> ?z\\<rbrakk>\n  \\<Longrightarrow> det3 0 ?y ?z \\<noteq> 0\n  ccw.sortedP 0 Ps\n  distinct Ps\n\ngoal (1 subgoal):\n 1. ccw'.sortedP 0 Ps", "proof (induction Ps)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "case (Cons P Ps)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>y z.\n              \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps; y \\<noteq> z\\<rbrakk>\n              \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n   ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n  \\<Longrightarrow> ccw'.sortedP 0 Ps\n  \\<lbrakk>?y \\<in> set (P # Ps); ?z \\<in> set (P # Ps);\n   ?y \\<noteq> ?z\\<rbrakk>\n  \\<Longrightarrow> det3 0 ?y ?z \\<noteq> 0\n  ccw.sortedP 0 (P # Ps)\n  distinct (P # Ps)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>y z.\n              \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps; y \\<noteq> z\\<rbrakk>\n              \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n   ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n  \\<Longrightarrow> ccw'.sortedP 0 Ps\n  \\<lbrakk>?y \\<in> set (P # Ps); ?z \\<in> set (P # Ps);\n   ?y \\<noteq> ?z\\<rbrakk>\n  \\<Longrightarrow> det3 0 ?y ?z \\<noteq> 0\n  ccw.sortedP 0 (P # Ps)\n  distinct (P # Ps)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "assume p: \"p \\<in> set Ps\""], ["proof (state)\nthis:\n  p \\<in> set Ps\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "moreover"], ["proof (state)\nthis:\n  p \\<in> set Ps\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "from p Cons.prems"], ["proof (chain)\npicking this:\n  p \\<in> set Ps\n  \\<lbrakk>?y \\<in> set (P # Ps); ?z \\<in> set (P # Ps);\n   ?y \\<noteq> ?z\\<rbrakk>\n  \\<Longrightarrow> det3 0 ?y ?z \\<noteq> 0\n  ccw.sortedP 0 (P # Ps)\n  distinct (P # Ps)", "have \"ccw 0 P p\""], ["proof (prove)\nusing this:\n  p \\<in> set Ps\n  \\<lbrakk>?y \\<in> set (P # Ps); ?z \\<in> set (P # Ps);\n   ?y \\<noteq> ?z\\<rbrakk>\n  \\<Longrightarrow> det3 0 ?y ?z \\<noteq> 0\n  ccw.sortedP 0 (P # Ps)\n  distinct (P # Ps)\n\ngoal (1 subgoal):\n 1. ccw 0 P p", "by (auto elim!: linorder_list0.sortedP_Cons intro: Cons)"], ["proof (state)\nthis:\n  ccw 0 P p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> set Ps\n  ccw 0 P p", "have \"ccw' 0 P p\""], ["proof (prove)\nusing this:\n  p \\<in> set Ps\n  ccw 0 P p\n\ngoal (1 subgoal):\n 1. ccw' 0 P p", "using \\<open>distinct (P#Ps)\\<close>"], ["proof (prove)\nusing this:\n  p \\<in> set Ps\n  ccw 0 P p\n  distinct (P # Ps)\n\ngoal (1 subgoal):\n 1. ccw' 0 P p", "by (intro ccw_ncoll_imp_ccw Cons) auto"], ["proof (state)\nthis:\n  ccw' 0 P p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> set Ps \\<Longrightarrow> ccw' 0 P ?p2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "moreover"], ["proof (state)\nthis:\n  ?p2 \\<in> set Ps \\<Longrightarrow> ccw' 0 P ?p2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "have \"linorder_list0.sortedP (ccw' 0) Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccw'.sortedP 0 Ps", "using Cons.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y \\<in> set (P # Ps); ?z \\<in> set (P # Ps);\n   ?y \\<noteq> ?z\\<rbrakk>\n  \\<Longrightarrow> det3 0 ?y ?z \\<noteq> 0\n  ccw.sortedP 0 (P # Ps)\n  distinct (P # Ps)\n\ngoal (1 subgoal):\n 1. ccw'.sortedP 0 Ps", "by (intro Cons) (auto elim!: linorder_list0.sortedP_Cons intro: Cons)"], ["proof (state)\nthis:\n  ccw'.sortedP 0 Ps\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []\n 2. \\<And>a Ps.\n       \\<lbrakk>\\<lbrakk>\\<And>y z.\n                            \\<lbrakk>y \\<in> set Ps; z \\<in> set Ps;\n                             y \\<noteq> z\\<rbrakk>\n                            \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n                 ccw.sortedP 0 Ps; distinct Ps\\<rbrakk>\n                \\<Longrightarrow> ccw'.sortedP 0 Ps;\n        \\<And>y z.\n           \\<lbrakk>y \\<in> set (a # Ps); z \\<in> set (a # Ps);\n            y \\<noteq> z\\<rbrakk>\n           \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n        ccw.sortedP 0 (a # Ps); distinct (a # Ps)\\<rbrakk>\n       \\<Longrightarrow> ccw'.sortedP 0 (a # Ps)", "ultimately"], ["proof (chain)\npicking this:\n  ?p2 \\<in> set Ps \\<Longrightarrow> ccw' 0 P ?p2\n  ccw'.sortedP 0 Ps", "show ?case"], ["proof (prove)\nusing this:\n  ?p2 \\<in> set Ps \\<Longrightarrow> ccw' 0 P ?p2\n  ccw'.sortedP 0 Ps\n\ngoal (1 subgoal):\n 1. ccw'.sortedP 0 (P # Ps)", "by (auto intro!: linorder_list0.Cons )"], ["proof (state)\nthis:\n  ccw'.sortedP 0 (P # Ps)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y z.\n                \\<lbrakk>y \\<in> set []; z \\<in> set [];\n                 y \\<noteq> z\\<rbrakk>\n                \\<Longrightarrow> det3 0 y z \\<noteq> 0;\n     ccw.sortedP 0 []; distinct []\\<rbrakk>\n    \\<Longrightarrow> ccw'.sortedP 0 []", "qed (auto intro: linorder_list0.Nil)"], ["", "end"]]}