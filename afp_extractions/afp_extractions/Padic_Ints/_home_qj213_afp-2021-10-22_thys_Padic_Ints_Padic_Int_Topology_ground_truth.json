{"file_name": "/home/qj213/afp-2021-10-22/thys/Padic_Ints/Padic_Int_Topology.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Padic_Ints", "problem_names": ["lemma val_Zp_dist_sym:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  shows \"val_Zp_dist a b = val_Zp_dist b a\"", "lemma val_Zp_dist_ultrametric:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"c \\<in> carrier Zp\"\n  shows \"val_Zp_dist b c \\<ge> min (val_Zp_dist a c) (val_Zp_dist a b)\"", "lemma val_Zp_dist_infty:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"val_Zp_dist a b = \\<infinity>\"\n  shows \"a = b\"", "lemma val_Zp_dist_infty':\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"a = b\"\n  shows \"val_Zp_dist a b = \\<infinity>\"", "lemma val_Zp_dist_res_eq:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"val_Zp_dist a b > k\"\n  shows \"(a k) = (b k)\"", "lemma val_Zp_dist_res_eq2:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"(a k) = (b k)\" \n  shows \"val_Zp_dist a b \\<ge> k\"", "lemma val_Zp_dist_triangle_eqs:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"c \\<in> carrier Zp\"\n  assumes \"val_Zp_dist a b > n\"\n  assumes \"val_Zp_dist a c > n\"\n  assumes \"(k::nat) < n\"\n  shows \"a k = b k\"\n        \"a k = c k\"\n        \"b k = c k\"", "lemma closed_seqs_diff_closed:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  shows \"s m \\<ominus> a \\<in> carrier Zp\"", "lemma is_Zp_cauchy_imp_closed:\n  assumes \"is_Zp_cauchy s\"\n  shows \"s \\<in> closed_seqs Zp\"", "lemma is_Zp_cauchy_imp_res_eventually_const_0:\n  assumes \"is_Zp_cauchy s\"\n  fixes n::nat\n  obtains N where \"\\<And> n0 n1. n0 > N \\<and> n1 > N \\<Longrightarrow> (s n0) n = (s n1) n\"", "lemma is_Zp_cauchyI:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"\\<And> n.  (\\<exists>N. (\\<forall> n0 n1. n0 > N \\<and> n1 > N \\<longrightarrow> (s n0) n = (s n1) n))\"\n  shows \"is_Zp_cauchy s\"", "lemma is_Zp_cauchy_imp_res_eventually_const:\n  assumes \"is_Zp_cauchy s\"\n  fixes n::nat\n  obtains N r where \"r \\<in> carrier (Zp_res_ring n)\" and \"\\<And> m. m > N \\<Longrightarrow> (s m) n = r\"", "lemma res_lim_Zp_cauchy_0:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"f = (res_lim s) k\"\n  shows \"(\\<exists>N.  (\\<forall> m. (m > N \\<longrightarrow> (s m) k = f)))\"\n        \"f \\<in> carrier (Zp_res_ring k)\"", "lemma res_lim_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  obtains N where \"\\<And> m.  (m > N \\<longrightarrow> (s m) k = (res_lim s) k)\"", "lemma res_lim_in_Zp:\n  assumes \"is_Zp_cauchy s\"\n  shows \"res_lim s \\<in> carrier Zp\"", "lemma is_Zp_cauchy_imp_has_limit:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"a = res_lim s\"\n  shows \"Zp_converges_to s a\"", "lemma convergent_imp_Zp_cauchy: \n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  shows \"is_Zp_cauchy s\"", "lemma unique_limit:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  assumes \"Zp_converges_to s b\"\n  shows \"a = b\"", "lemma unique_limit':\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  shows \"a = res_lim s\"", "lemma Zp_converges_toE:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  shows \"\\<exists>N. \\<forall>k > N. s k n = a n\"", "lemma Zp_converges_toI:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"\\<And>n. \\<exists>N. \\<forall>k > N. s k n = a n\"\n  shows \"Zp_converges_to s a\"", "lemma sum_of_Zp_cauchy_is_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"is_Zp_cauchy t\"\n  shows \"is_Zp_cauchy (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)\"", "lemma prod_of_Zp_cauchy_is_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"is_Zp_cauchy t\"\n  shows \"is_Zp_cauchy (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)\"", "lemma constant_is_Zp_cauchy:\n  assumes \"is_constant_seq Zp s\"\n  shows \"is_Zp_cauchy s\"", "lemma smult_is_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"a \\<in> carrier Zp\"\n  shows \"is_Zp_cauchy (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s)\"", "lemma Zp_cauchy_imp_approaches_res_lim:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"a = res_lim s\"\n  obtains N where \"\\<And>n. n> N \\<Longrightarrow> val_Zp (a \\<ominus> (s n)) > eint k\"", "lemma Zp_continuous_is_Zp_closed:\n  assumes \"is_Zp_continuous f\"\n  shows \"f \\<in> carrier (Fun Zp)\"", "lemma is_Zp_continuousI:\n  assumes \"f \\<in> carrier (Fun Zp)\"\n  assumes \"\\<And>s. is_Zp_cauchy s \\<Longrightarrow> is_Zp_cauchy (f \\<circ> s)\"\n  shows \"is_Zp_continuous f\"", "lemma Zp_continuous_is_closed:\n  assumes \"is_Zp_continuous f\"\n  shows \"f \\<in> carrier (Fun Zp)\"", "lemma constant_is_Zp_continuous:\n  assumes \"a \\<in> carrier Zp\"\n  shows \"is_Zp_continuous (const a)\"", "lemma sum_of_cont_is_cont:\n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_continuous g\"\n  shows \"is_Zp_continuous (f \\<oplus>\\<^bsub>Fun Zp\\<^esub> g)\"", "lemma prod_of_cont_is_cont:\n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_continuous g\"\n  shows \"is_Zp_continuous (f \\<otimes>\\<^bsub>Fun Zp\\<^esub> g)\"", "lemma smult_is_continuous:\n  assumes \"is_Zp_continuous f\"\n  assumes \"a \\<in> carrier Zp\"\n  shows \"is_Zp_continuous (a \\<odot>\\<^bsub>Fun Zp\\<^esub> f)\"", "lemma id_Zp_is_Zp_continuous:\n\"is_Zp_continuous ring_id\"", "lemma nat_pow_is_Zp_continuous:\n  assumes \"is_Zp_continuous f\"\n  shows \"is_Zp_continuous (f[^]\\<^bsub>Fun Zp\\<^esub>(n::nat))\"", "lemma ring_id_pow_closed:\n\"(ring_id)[^]\\<^bsub>Fun Zp\\<^esub> (n::nat) \\<in> carrier (Fun Zp)\"", "lemma monomial_equation:\n  assumes \"c \\<in> carrier Zp\"\n  shows \"monomial c n = c \\<odot>\\<^bsub>Fun Zp\\<^esub> (ring_id)[^]\\<^bsub>Fun Zp\\<^esub>n\"", "lemma monomial_is_Zp_continuous:\n  assumes \"c \\<in> carrier Zp\"\n  shows \"is_Zp_continuous (monomial c n)\"", "lemma alt_seq_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  shows \"is_Zp_cauchy (alt_seq s)\"", "lemma alt_seq_limit:\n  assumes \"is_Zp_cauchy s\"\n  shows \"res_lim(alt_seq s) = res_lim s\"", "lemma res_lim_pushforward: \n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_cauchy s\"\n  assumes \"t = alt_seq s\"\n  shows \"res_lim (f \\<circ> t) = f (res_lim t)\"", "lemma res_lim_pushforward': \n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_cauchy s\"\n  assumes \"t = alt_seq s\"\n  shows \"res_lim (f \\<circ> s) = res_lim (f \\<circ> t)\"", "lemma continuous_limit:\n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_cauchy s\"\n  shows \"Zp_converges_to (f \\<circ> s) (f (res_lim s))\""], "translations": [["", "lemma val_Zp_dist_sym:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  shows \"val_Zp_dist a b = val_Zp_dist b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp_dist a b = val_Zp_dist b a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp_dist a b = val_Zp_dist b a", "have 1: \"a \\<ominus> b = \\<ominus> (b \\<ominus> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> b = \\<ominus> (b \\<ominus> a)", "using assms(1) assms(2)"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a \\<ominus> b = \\<ominus> (b \\<ominus> a)", "using minus_a_inv"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?a \\<ominus> ?b = \\<ominus> (?b \\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. a \\<ominus> b = \\<ominus> (b \\<ominus> a)", "by blast"], ["proof (state)\nthis:\n  a \\<ominus> b = \\<ominus> (b \\<ominus> a)\n\ngoal (1 subgoal):\n 1. val_Zp_dist a b = val_Zp_dist b a", "then"], ["proof (chain)\npicking this:\n  a \\<ominus> b = \\<ominus> (b \\<ominus> a)", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<ominus> b = \\<ominus> (b \\<ominus> a)\n\ngoal (1 subgoal):\n 1. val_Zp_dist a b = val_Zp_dist b a", "using R.minus_closed Zp_def assms(1) assms(2) padic_integers.val_Zp_of_minus \n      padic_integers_axioms val_Zp_dist_def"], ["proof (prove)\nusing this:\n  a \\<ominus> b = \\<ominus> (b \\<ominus> a)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<ominus> ?y \\<in> carrier Zp\n  Zp \\<equiv> padic_int p\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  \\<lbrakk>padic_integers ?p; ?a \\<in> carrier (padic_int ?p)\\<rbrakk>\n  \\<Longrightarrow> padic_integers.val_Zp ?p ?a =\n                    padic_integers.val_Zp ?p\n                     (\\<ominus>\\<^bsub>padic_int ?p\\<^esub> ?a)\n  padic_integers p\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. val_Zp_dist a b = val_Zp_dist b a", "by auto"], ["proof (state)\nthis:\n  val_Zp_dist a b = val_Zp_dist b a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma val_Zp_dist_ultrametric:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"c \\<in> carrier Zp\"\n  shows \"val_Zp_dist b c \\<ge> min (val_Zp_dist a c) (val_Zp_dist a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "let ?X = \"b \\<ominus> a\""], ["proof (state)\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "let ?Y = \"a \\<ominus> c\""], ["proof (state)\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "let ?Z = \"b \\<ominus> c\""], ["proof (state)\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "have 0: \"?Z = ?X \\<oplus> ?Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<ominus> c = b \\<ominus> a \\<oplus> (a \\<ominus> c)", "using R.add.m_comm assms(1) assms(2) assms(3) R.plus_diff_simp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y = ?y \\<oplus> ?x\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  c \\<in> carrier Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp; ?c \\<in> carrier Zp;\n   ?X = ?a \\<ominus> ?b; ?Y = ?c \\<ominus> ?a\\<rbrakk>\n  \\<Longrightarrow> ?X \\<oplus> ?Y = ?c \\<ominus> ?b\n\ngoal (1 subgoal):\n 1. b \\<ominus> c = b \\<ominus> a \\<oplus> (a \\<ominus> c)", "by auto"], ["proof (state)\nthis:\n  b \\<ominus> c = b \\<ominus> a \\<oplus> (a \\<ominus> c)\n\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "have 4: \"val_Zp ?Z \\<ge> min (val_Zp ?X) (val_Zp ?Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n    \\<le> val_Zp (b \\<ominus> c)", "using \"0\" assms(1) assms(2) assms(3) val_Zp_ultrametric"], ["proof (prove)\nusing this:\n  b \\<ominus> c = b \\<ominus> a \\<oplus> (a \\<ominus> c)\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  c \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> min (val_Zp ?x) (val_Zp ?y)\n                    \\<le> val_Zp (?x \\<oplus> ?y)\n\ngoal (1 subgoal):\n 1. min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n    \\<le> val_Zp (b \\<ominus> c)", "by auto"], ["proof (state)\nthis:\n  min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n  \\<le> val_Zp (b \\<ominus> c)\n\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "then"], ["proof (chain)\npicking this:\n  min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n  \\<le> val_Zp (b \\<ominus> c)", "show ?thesis"], ["proof (prove)\nusing this:\n  min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n  \\<le> val_Zp (b \\<ominus> c)\n\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "using  assms val_Zp_dist_sym"], ["proof (prove)\nusing this:\n  min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n  \\<le> val_Zp (b \\<ominus> c)\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  c \\<in> carrier Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp_dist ?a ?b = val_Zp_dist ?b ?a\n\ngoal (1 subgoal):\n 1. min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c", "unfolding  val_Zp_dist_def"], ["proof (prove)\nusing this:\n  min (val_Zp (b \\<ominus> a)) (val_Zp (a \\<ominus> c))\n  \\<le> val_Zp (b \\<ominus> c)\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  c \\<in> carrier Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp (?a \\<ominus> ?b) = val_Zp (?b \\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. min (val_Zp (a \\<ominus> c)) (val_Zp (a \\<ominus> b))\n    \\<le> val_Zp (b \\<ominus> c)", "by (simp add: min.commute)"], ["proof (state)\nthis:\n  min (val_Zp_dist a c) (val_Zp_dist a b) \\<le> val_Zp_dist b c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma val_Zp_dist_infty:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"val_Zp_dist a b = \\<infinity>\"\n  shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp_dist a b = \\<infinity>\n\ngoal (1 subgoal):\n 1. a = b", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp (a \\<ominus> b) = \\<infinity>\n\ngoal (1 subgoal):\n 1. a = b", "by (metis R.r_right_minus_eq not_eint_eq val_ord_Zp)"], ["", "lemma val_Zp_dist_infty':\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"a = b\"\n  shows \"val_Zp_dist a b = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp_dist a b = \\<infinity>", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  a = b\n\ngoal (1 subgoal):\n 1. val_Zp_dist a b = \\<infinity>", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  a = b\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b) = \\<infinity>", "by (simp add: val_Zp_def)"], ["", "text\\<open>\n  The following property will be useful in the proof of Hensel's Lemma: two $p$-adic integers are\n  close together if and only if their residues are equal at high orders.\n\\<close>"], ["", "lemma val_Zp_dist_res_eq:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"val_Zp_dist a b > k\"\n  shows \"(a k) = (b k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = b k", "using  assms(1) assms(2) assms(3) val_Zp_dist_def"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  eint (int k) < val_Zp_dist a b\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. a k = b k", "by (simp add: Zp_residue_eq)"], ["", "lemma val_Zp_dist_res_eq2:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"(a k) = (b k)\" \n  shows \"val_Zp_dist a b \\<ge> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int k) \\<le> val_Zp_dist a b", "using assms(1) assms(2) assms(3) Zp_residue_eq2"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  a k = b k\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp; ?a ?k = ?b ?k;\n   ?a \\<noteq> ?b\\<rbrakk>\n  \\<Longrightarrow> eint (int ?k) \\<le> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. eint (int k) \\<le> val_Zp_dist a b", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  a k = b k\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp; ?a ?k = ?b ?k;\n   ?a \\<noteq> ?b\\<rbrakk>\n  \\<Longrightarrow> eint (int ?k) \\<le> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. eint (int k) \\<le> val_Zp (a \\<ominus> b)", "by (simp add: val_Zp_def)"], ["", "lemma val_Zp_dist_triangle_eqs:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"c \\<in> carrier Zp\"\n  assumes \"val_Zp_dist a b > n\"\n  assumes \"val_Zp_dist a c > n\"\n  assumes \"(k::nat) < n\"\n  shows \"a k = b k\"\n        \"a k = c k\"\n        \"b k = c k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = b k &&& a k = c k &&& b k = c k", "unfolding val_Zp_dist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = b k &&& a k = c k &&& b k = c k", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. a k = b k\n 2. a k = c k\n 3. b k = c k", "show 0: \"a k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = b k", "using assms(1) assms(2) assms(4) assms(6) val_Zp_dist_res_eq"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  eint (int n) < val_Zp_dist a b\n  k < n\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp;\n   eint (int ?k) < val_Zp_dist ?a ?b\\<rbrakk>\n  \\<Longrightarrow> ?a ?k = ?b ?k\n\ngoal (1 subgoal):\n 1. a k = b k", "by (metis less_imp_le_nat p_residue_padic_int)"], ["proof (state)\nthis:\n  a k = b k\n\ngoal (2 subgoals):\n 1. a k = c k\n 2. b k = c k", "show 1: \"a k = c k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = c k", "using assms(1) assms(3) assms(5) assms(6) val_Zp_dist_res_eq"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  c \\<in> carrier Zp\n  eint (int n) < val_Zp_dist a c\n  k < n\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp;\n   eint (int ?k) < val_Zp_dist ?a ?b\\<rbrakk>\n  \\<Longrightarrow> ?a ?k = ?b ?k\n\ngoal (1 subgoal):\n 1. a k = c k", "by (meson eint_ord_simps(1) le_less_trans less_imp_triv not_less of_nat_le_iff)"], ["proof (state)\nthis:\n  a k = c k\n\ngoal (1 subgoal):\n 1. b k = c k", "show \"b k = c k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b k = c k", "using 0 1"], ["proof (prove)\nusing this:\n  a k = b k\n  a k = c k\n\ngoal (1 subgoal):\n 1. b k = c k", "by auto"], ["proof (state)\nthis:\n  b k = c k\n\ngoal:\nNo subgoals!", "qed"], ["", "(**********************************************************************)\n  (**********************************************************************)"], ["", "subsection\\<open>Cauchy Sequences\\<close>"], ["", "(**********************************************************************)\n  (**********************************************************************)"], ["", "text\\<open>\n  The definition of Cauchy sequence here is equivalent to standard the metric notion, and is\n  identical to the one found on page 50 of \\cite{engler2005valued}.\n\\<close>"], ["", "lemma closed_seqs_diff_closed:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  shows \"s m \\<ominus> a \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m \\<ominus> a \\<in> carrier Zp", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s m \\<ominus> a \\<in> carrier Zp", "by (simp add: closed_seqs_memE)"], ["", "definition is_Zp_cauchy :: \"padic_int_seq \\<Rightarrow> bool\" where\n\"is_Zp_cauchy s = ((s \\<in> closed_seqs Zp) \\<and> (\\<forall> (n::int). \\<exists> (N::nat). \\<forall> m k::nat. \n\n                  (m>N \\<and> k>N \\<longrightarrow> (val_Zp_dist (s m) (s k)) > eint n)))\""], ["", "text\\<open>Relation for a sequence which converges to a point:\\<close>"], ["", "definition Zp_converges_to :: \"padic_int_seq \\<Rightarrow> padic_int \\<Rightarrow> bool\" where\n          \"Zp_converges_to s a = ((a \\<in> carrier Zp \\<and> s \\<in> closed_seqs Zp)  \n                              \\<and> (\\<forall>(n::int). (\\<exists>(k:: nat). (\\<forall>( m::nat).\n                                (m > k \\<longrightarrow> (val_Zp ((s m) \\<ominus> a)) > eint n) ))))\""], ["", "lemma is_Zp_cauchy_imp_closed:\n  assumes \"is_Zp_cauchy s\"\n  shows \"s \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using assms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n\ngoal (1 subgoal):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "unfolding is_Zp_cauchy_def"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n  (\\<forall>n.\n      \\<exists>N.\n         \\<forall>m k.\n            N < m \\<and> N < k \\<longrightarrow>\n            eint n < val_Zp_dist (s m) (s k))\n\ngoal (1 subgoal):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by blast"], ["", "text\\<open>\n  Analogous to the lemmas about residues and $p$-adic distances, we can characterize Cauchy \n  sequences without reference to a distance function: a sequence is Cauchy if and only if for \n  every natural number $k$, the $k^{th}$ residues of the elements in the sequence are eventually\n  all equal.\n\\<close>"], ["", "lemma is_Zp_cauchy_imp_res_eventually_const_0:\n  assumes \"is_Zp_cauchy s\"\n  fixes n::nat\n  obtains N where \"\\<And> n0 n1. n0 > N \\<and> n1 > N \\<Longrightarrow> (s n0) n = (s n1) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists> (N::nat). \\<forall> m k::nat. (m>N \\<and> k>N \\<longrightarrow> (val_Zp_dist (s m) (s k)) > (int n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint (int n) < val_Zp_dist (s m) (s k)", "using assms is_Zp_cauchy_def"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint (int n) < val_Zp_dist (s m) (s k)", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>m k.\n        N < m \\<and> N < k \\<longrightarrow>\n        eint (int n) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>N.\n     \\<forall>m k.\n        N < m \\<and> N < k \\<longrightarrow>\n        eint (int n) < val_Zp_dist (s m) (s k)", "obtain N where P0: \" \\<forall> m k::nat. (m>N \\<and> k>N \\<longrightarrow> (val_Zp_dist (s m) (s k)) > (int n))\""], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>m k.\n        N < m \\<and> N < k \\<longrightarrow>\n        eint (int n) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m k.\n           N < m \\<and> N < k \\<longrightarrow>\n           eint (int n) < val_Zp_dist (s m) (s k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow>\n     eint (int n) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have P1: \"\\<And> n0 n1. n0 > N \\<and> n1 > N \\<Longrightarrow> (s n0) n = (s n1) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1. N < n0 \\<and> N < n1 \\<Longrightarrow> s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1. N < n0 \\<and> N < n1 \\<Longrightarrow> s n0 n = s n1 n", "fix n0 n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1. N < n0 \\<and> N < n1 \\<Longrightarrow> s n0 n = s n1 n", "assume A: \"n0 > N \\<and> n1 > N\""], ["proof (state)\nthis:\n  N < n0 \\<and> N < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1. N < n0 \\<and> N < n1 \\<Longrightarrow> s n0 n = s n1 n", "have \"(n0>N \\<and> n1>N \\<longrightarrow> (val_Zp_dist (s n0) (s n1)) > (int n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N < n0 \\<and> N < n1 \\<longrightarrow>\n    eint (int n) < val_Zp_dist (s n0) (s n1)", "using P0"], ["proof (prove)\nusing this:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow>\n     eint (int n) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. N < n0 \\<and> N < n1 \\<longrightarrow>\n    eint (int n) < val_Zp_dist (s n0) (s n1)", "by blast"], ["proof (state)\nthis:\n  N < n0 \\<and> N < n1 \\<longrightarrow>\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1. N < n0 \\<and> N < n1 \\<Longrightarrow> s n0 n = s n1 n", "then"], ["proof (chain)\npicking this:\n  N < n0 \\<and> N < n1 \\<longrightarrow>\n  eint (int n) < val_Zp_dist (s n0) (s n1)", "have C0: \"(val_Zp_dist (s n0) (s n1)) > (int n)\""], ["proof (prove)\nusing this:\n  N < n0 \\<and> N < n1 \\<longrightarrow>\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) (s n1)", "using A"], ["proof (prove)\nusing this:\n  N < n0 \\<and> N < n1 \\<longrightarrow>\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n  N < n0 \\<and> N < n1\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) (s n1)", "by blast"], ["proof (state)\nthis:\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1. N < n0 \\<and> N < n1 \\<Longrightarrow> s n0 n = s n1 n", "show \"(s n0) n = (s n1) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "have A0: \"(val_Zp_dist (s n0) (s n1)) > (int n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) (s n1)", "using C0"], ["proof (prove)\nusing this:\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) (s n1)", "by blast"], ["proof (state)\nthis:\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "have A1: \"s n0 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 \\<in> carrier Zp", "using is_Zp_cauchy_imp_closed[of s] assms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s \\<Longrightarrow>\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  is_Zp_cauchy s\n\ngoal (1 subgoal):\n 1. s n0 \\<in> carrier Zp", "by (simp add: closed_seqs_memE)"], ["proof (state)\nthis:\n  s n0 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "have A2: \"s n1 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n1 \\<in> carrier Zp", "using is_Zp_cauchy_def assms closed_seqs_memE[of _ Zp]"], ["proof (prove)\nusing this:\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  is_Zp_cauchy s\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s n1 \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  s n1 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "using A0 val_Zp_dist_res_eq  A1 A2"], ["proof (prove)\nusing this:\n  eint (int n) < val_Zp_dist (s n0) (s n1)\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp;\n   eint (int ?k) < val_Zp_dist ?a ?b\\<rbrakk>\n  \\<Longrightarrow> ?a ?k = ?b ?k\n  s n0 \\<in> carrier Zp\n  s n1 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "by metis"], ["proof (state)\nthis:\n  s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  N < ?n0.1 \\<and> N < ?n1.1 \\<Longrightarrow> s ?n0.1 n = s ?n1.1 n\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  N < ?n0.1 \\<and> N < ?n1.1 \\<Longrightarrow> s ?n0.1 n = s ?n1.1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  N < ?n0.1 \\<and> N < ?n1.1 \\<Longrightarrow> s ?n0.1 n = s ?n1.1 n\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  N < ?n0.1 \\<and> N < ?n1.1 \\<Longrightarrow> s ?n0.1 n = s ?n1.1 n\n  (\\<And>n0 n1.\n      ?N1 < n0 \\<and> ?N1 < n1 \\<Longrightarrow>\n      s n0 n = s n1 n) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_Zp_cauchyI:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"\\<And> n.  (\\<exists>N. (\\<forall> n0 n1. n0 > N \\<and> n1 > N \\<longrightarrow> (s n0) n = (s n1) n))\"\n  shows \"is_Zp_cauchy s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "have \"(\\<forall> (n::int). \\<exists> (N::nat). \\<forall> m k::nat. (m>N \\<and> k>N \\<longrightarrow> (val_Zp_dist (s m) (s k)) > n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint x < val_Zp_dist (s m) (s k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint x < val_Zp_dist (s m) (s k)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint x < val_Zp_dist (s m) (s k)", "show \"\\<exists> (N::nat). \\<forall> m k::nat. (m>N \\<and> k>N \\<longrightarrow> (val_Zp_dist (s m) (s k)) > eint n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "have \"(\\<exists>N. (\\<forall> n0 n1. n0 > N \\<and> n1 > N \\<longrightarrow> (s n0) (Suc (nat n)) = (s n1) (Suc (nat n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          s n0 (Suc (nat n)) = s n1 (Suc (nat n))", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> s n0 ?n1 = s n1 ?n1\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          s n0 (Suc (nat n)) = s n1 (Suc (nat n))", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        s n0 (Suc (nat n)) = s n1 (Suc (nat n))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "then"], ["proof (chain)\npicking this:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        s n0 (Suc (nat n)) = s n1 (Suc (nat n))", "obtain N where N_def: \"(\\<forall> n0 n1. n0 > N \\<and> n1 > N \\<longrightarrow> (s n0) (Suc (nat n)) = (s n1) (Suc (nat n)))\""], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        s n0 (Suc (nat n)) = s n1 (Suc (nat n))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n0 n1.\n           N < n0 \\<and> N < n1 \\<longrightarrow>\n           s n0 (Suc (nat n)) = s n1 (Suc (nat n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1.\n     N < n0 \\<and> N < n1 \\<longrightarrow>\n     s n0 (Suc (nat n)) = s n1 (Suc (nat n))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "have 0: \"n \\<le> eint (int (nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint n \\<le> eint (int (nat n))", "by simp"], ["proof (state)\nthis:\n  eint n \\<le> eint (int (nat n))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "have \"\\<forall>m k. N < m \\<and> N < k \\<longrightarrow> (nat n) < val_Zp_dist (s m) (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m k.\n       N < m \\<and> N < k \\<longrightarrow>\n       eint (int (nat n)) < val_Zp_dist (s m) (s k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<forall>k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint (int (nat n)) < val_Zp_dist (s m) (s k)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<forall>k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint (int (nat n)) < val_Zp_dist (s m) (s k)", "show \"\\<forall>k. N < m \\<and> N < k \\<longrightarrow> int (nat n) < val_Zp_dist (s m) (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k.\n       N < m \\<and> N < k \\<longrightarrow>\n       eint (int (nat n)) < val_Zp_dist (s m) (s k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       N < m \\<and> N < k \\<longrightarrow>\n       eint (int (nat n)) < val_Zp_dist (s m) (s k)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       N < m \\<and> N < k \\<longrightarrow>\n       eint (int (nat n)) < val_Zp_dist (s m) (s k)", "show \"N < m \\<and> N < k \\<longrightarrow> int(nat n) < val_Zp_dist (s m) (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N < m \\<and> N < k \\<longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. N < m \\<and> N < k \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "assume A: \"N < m \\<and> N < k\""], ["proof (state)\nthis:\n  N < m \\<and> N < k\n\ngoal (1 subgoal):\n 1. N < m \\<and> N < k \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "then"], ["proof (chain)\npicking this:\n  N < m \\<and> N < k", "have E: \"(s m) (Suc(nat n)) = (s k) (Suc(nat n))\""], ["proof (prove)\nusing this:\n  N < m \\<and> N < k\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n))", "using N_def"], ["proof (prove)\nusing this:\n  N < m \\<and> N < k\n  \\<forall>n0 n1.\n     N < n0 \\<and> N < n1 \\<longrightarrow>\n     s n0 (Suc (nat n)) = s n1 (Suc (nat n))\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n))", "by blast"], ["proof (state)\nthis:\n  s m (Suc (nat n)) = s k (Suc (nat n))\n\ngoal (1 subgoal):\n 1. N < m \\<and> N < k \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "then"], ["proof (chain)\npicking this:\n  s m (Suc (nat n)) = s k (Suc (nat n))", "show \" int (nat n) < val_Zp_dist (s m) (s k)\""], ["proof (prove)\nusing this:\n  s m (Suc (nat n)) = s k (Suc (nat n))\n\ngoal (1 subgoal):\n 1. eint (int (nat n)) < val_Zp_dist (s m) (s k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n)) \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "have 0: \"(s m) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m \\<in> carrier Zp", "by (simp add: assms(1) closed_seqs_memE)"], ["proof (state)\nthis:\n  s m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n)) \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "have 1: \"(s k) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s k \\<in> carrier Zp", "using Zp_def assms(1) closed_seqs_memE[of _ Zp] padic_integers_axioms"], ["proof (prove)\nusing this:\n  Zp \\<equiv> padic_int p\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier Zp\n  padic_integers p\n\ngoal (1 subgoal):\n 1. s k \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  s k \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n)) \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "have \"int (Suc (nat n)) \\<le> val_Zp_dist (s m) (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) (s k)", "using   E 0 1 val_Zp_dist_res_eq[of \"(s m)\" \"(s k)\" \"Suc (nat n)\"] val_Zp_dist_res_eq2"], ["proof (prove)\nusing this:\n  s m (Suc (nat n)) = s k (Suc (nat n))\n  s m \\<in> carrier Zp\n  s k \\<in> carrier Zp\n  \\<lbrakk>s m \\<in> carrier Zp; s k \\<in> carrier Zp;\n   eint (int (Suc (nat n))) < val_Zp_dist (s m) (s k)\\<rbrakk>\n  \\<Longrightarrow> s m (Suc (nat n)) = s k (Suc (nat n))\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp; ?a ?k = ?b ?k\\<rbrakk>\n  \\<Longrightarrow> eint (int ?k) \\<le> val_Zp_dist ?a ?b\n\ngoal (1 subgoal):\n 1. eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) (s k)", "by blast"], ["proof (state)\nthis:\n  eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n)) \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "then"], ["proof (chain)\npicking this:\n  eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) (s k)", "have \"int (nat n) < val_Zp_dist (s m) (s k)\""], ["proof (prove)\nusing this:\n  eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. eint (int (nat n)) < val_Zp_dist (s m) (s k)", "by (metis Suc_ile_eq add.commute of_nat_Suc)"], ["proof (state)\nthis:\n  eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = s k (Suc (nat n)) \\<Longrightarrow>\n    eint (int (nat n)) < val_Zp_dist (s m) (s k)", "then"], ["proof (chain)\npicking this:\n  eint (int (nat n)) < val_Zp_dist (s m) (s k)", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. eint (int (nat n)) < val_Zp_dist (s m) (s k)", "by blast"], ["proof (state)\nthis:\n  eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  N < m \\<and> N < k \\<longrightarrow>\n  eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k.\n     N < m \\<and> N < k \\<longrightarrow>\n     eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow>\n     eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "hence \"\\<forall>m k. N < m \\<and> N < k \\<longrightarrow> n < val_Zp_dist (s m) (s k)\""], ["proof (prove)\nusing this:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow>\n     eint (int (nat n)) < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. \\<forall>m k.\n       N < m \\<and> N < k \\<longrightarrow> eint n < val_Zp_dist (s m) (s k)", "using 0"], ["proof (prove)\nusing this:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow>\n     eint (int (nat n)) < val_Zp_dist (s m) (s k)\n  eint n \\<le> eint (int (nat n))\n\ngoal (1 subgoal):\n 1. \\<forall>m k.\n       N < m \\<and> N < k \\<longrightarrow> eint n < val_Zp_dist (s m) (s k)", "by (simp add: order_le_less_subst2)"], ["proof (state)\nthis:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow> eint n < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m k.\n     N < m \\<and> N < k \\<longrightarrow> eint n < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>m k.\n          N < m \\<and> N < k \\<longrightarrow>\n          eint n < val_Zp_dist (s m) (s k)", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>m k.\n        N < m \\<and> N < k \\<longrightarrow>\n        eint n < val_Zp_dist (s m) (s k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>m k.\n        N < m \\<and> N < k \\<longrightarrow>\n        eint n < val_Zp_dist (s m) (s k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     \\<exists>N.\n        \\<forall>m k.\n           N < m \\<and> N < k \\<longrightarrow>\n           eint x < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     \\<exists>N.\n        \\<forall>m k.\n           N < m \\<and> N < k \\<longrightarrow>\n           eint x < val_Zp_dist (s m) (s k)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     \\<exists>N.\n        \\<forall>m k.\n           N < m \\<and> N < k \\<longrightarrow>\n           eint x < val_Zp_dist (s m) (s k)\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "using is_Zp_cauchy_def assms"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     \\<exists>N.\n        \\<forall>m k.\n           N < m \\<and> N < k \\<longrightarrow>\n           eint x < val_Zp_dist (s m) (s k)\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> s n0 ?n1 = s n1 ?n1\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "by blast"], ["proof (state)\nthis:\n  is_Zp_cauchy s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_Zp_cauchy_imp_res_eventually_const:\n  assumes \"is_Zp_cauchy s\"\n  fixes n::nat\n  obtains N r where \"r \\<in> carrier (Zp_res_ring n)\" and \"\\<And> m. m > N \\<Longrightarrow> (s m) n = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ n));\n         \\<And>m. N < m \\<Longrightarrow> s m n = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ n));\n         \\<And>m. N < m \\<Longrightarrow> s m n = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain N where A0: \"\\<And> n0 n1. n0 > N \\<and> n1 > N \\<Longrightarrow> (s n0) n = (s n1) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms is_Zp_cauchy_imp_res_eventually_const_0 padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>n0 n1.\n          N < n0 \\<and> N < n1 \\<Longrightarrow>\n          ?s n0 ?n = ?s n1 ?n) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  padic_integers p\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n0 n1.\n            N < n0 \\<and> N < n1 \\<Longrightarrow>\n            s n0 n = s n1 n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  N < ?n0.1 \\<and> N < ?n1.1 \\<Longrightarrow> s ?n0.1 n = s ?n1.1 n\n\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ n));\n         \\<And>m. N < m \\<Longrightarrow> s m n = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain r where A1: \"s (Suc N) n = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r. s (Suc N) n = r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  s (Suc N) n = r\n\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ n));\n         \\<And>m. N < m \\<Longrightarrow> s m n = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 0: \"r \\<in> carrier (Zp_res_ring n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> carrier (residue_ring (p ^ n))", "using  Zp_def \\<open>s (Suc N) n = r\\<close> assms closed_seqs_memE[of _ Zp] \n      is_Zp_cauchy_def padic_integers_axioms residues_closed"], ["proof (prove)\nusing this:\n  Zp \\<equiv> padic_int p\n  s (Suc N) n = r\n  is_Zp_cauchy s\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier Zp\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  padic_integers p\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  ?a ?k \\<in> carrier (residue_ring (p ^ ?k))\n\ngoal (1 subgoal):\n 1. r \\<in> carrier (residue_ring (p ^ n))", "by blast"], ["proof (state)\nthis:\n  r \\<in> carrier (residue_ring (p ^ n))\n\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ n));\n         \\<And>m. N < m \\<Longrightarrow> s m n = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 1: \"\\<And> m. m > N \\<Longrightarrow> (s m) n = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. N < m \\<Longrightarrow> s m n = r", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. N < m \\<Longrightarrow> s m n = r", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. N < m \\<Longrightarrow> s m n = r", "assume \" m > N\""], ["proof (state)\nthis:\n  N < m\n\ngoal (1 subgoal):\n 1. \\<And>m. N < m \\<Longrightarrow> s m n = r", "then"], ["proof (chain)\npicking this:\n  N < m", "show \"(s m) n = r\""], ["proof (prove)\nusing this:\n  N < m\n\ngoal (1 subgoal):\n 1. s m n = r", "using A0 A1"], ["proof (prove)\nusing this:\n  N < m\n  N < ?n0.1 \\<and> N < ?n1.1 \\<Longrightarrow> s ?n0.1 n = s ?n1.1 n\n  s (Suc N) n = r\n\ngoal (1 subgoal):\n 1. s m n = r", "by blast"], ["proof (state)\nthis:\n  s m n = r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  N < ?m1 \\<Longrightarrow> s ?m1 n = r\n\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ n));\n         \\<And>m. N < m \\<Longrightarrow> s m n = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  N < ?m1 \\<Longrightarrow> s ?m1 n = r", "show ?thesis"], ["proof (prove)\nusing this:\n  N < ?m1 \\<Longrightarrow> s ?m1 n = r\n\ngoal (1 subgoal):\n 1. thesis", "using 0 1  that"], ["proof (prove)\nusing this:\n  N < ?m1 \\<Longrightarrow> s ?m1 n = r\n  r \\<in> carrier (residue_ring (p ^ n))\n  N < ?m1 \\<Longrightarrow> s ?m1 n = r\n  \\<lbrakk>?r1 \\<in> carrier (residue_ring (p ^ n));\n   \\<And>m. ?N1 < m \\<Longrightarrow> s m n = ?r1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n  This function identifies the eventual residues of the elements of a cauchy sequence. \n  Since a $p$-adic integer is defined to be the map which identifies its residues, this map \n  will turn out to be precisely the limit of a cauchy sequence.\n\\<close>"], ["", "definition res_lim :: \"padic_int_seq \\<Rightarrow> padic_int\" where\n\"res_lim s = (\\<lambda> k. (THE r. (\\<exists>N.  (\\<forall> m. m > N \\<longrightarrow> (s m) k = r))))\""], ["", "lemma res_lim_Zp_cauchy_0:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"f = (res_lim s) k\"\n  shows \"(\\<exists>N.  (\\<forall> m. (m > N \\<longrightarrow> (s m) k = f)))\"\n        \"f \\<in> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>m>N. s m k = f &&&\n    f \\<in> carrier (residue_ring (p ^ k))", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "obtain N r where P0: \"r \\<in> carrier (Zp_res_ring k)\" and P1: \"\\<And> m. m > N \\<Longrightarrow> (s m) k = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r N.\n        \\<lbrakk>r \\<in> carrier (residue_ring (p ^ k));\n         \\<And>m. N < m \\<Longrightarrow> s m k = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson assms(1) is_Zp_cauchy_imp_res_eventually_const)"], ["proof (state)\nthis:\n  r \\<in> carrier (residue_ring (p ^ k))\n  N < ?m1 \\<Longrightarrow> s ?m1 k = r\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "obtain P where  P_def: \"P = (\\<lambda> x. (\\<exists>N.  (\\<forall> m. m > N \\<longrightarrow> (s m) k = x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        P =\n        (\\<lambda>x. \\<exists>N. \\<forall>m>N. s m k = x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  P = (\\<lambda>x. \\<exists>N. \\<forall>m>N. s m k = x)\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "have 0: \"P r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P r", "using P1 P_def"], ["proof (prove)\nusing this:\n  N < ?m1 \\<Longrightarrow> s ?m1 k = r\n  P = (\\<lambda>x. \\<exists>N. \\<forall>m>N. s m k = x)\n\ngoal (1 subgoal):\n 1. P r", "by auto"], ["proof (state)\nthis:\n  P r\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "have 1: \"(\\<And>x. P x \\<Longrightarrow> x = r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "assume A_x: \"P x\""], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "obtain N0 where \"(\\<forall> m. m > N0 \\<longrightarrow> (s m) k = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N0.\n        \\<forall>m>N0. s m k = x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A_x P_def"], ["proof (prove)\nusing this:\n  P x\n  P = (\\<lambda>x. \\<exists>N. \\<forall>m>N. s m k = x)\n\ngoal (1 subgoal):\n 1. (\\<And>N0.\n        \\<forall>m>N0. s m k = x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m>N0. s m k = x\n\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "let ?M = \"max N0 N\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "have C0: \"s (Suc ?M) k = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (max N0 N)) k = x", "by (simp add: \\<open>\\<forall>m>N0. s m k = x\\<close>)"], ["proof (state)\nthis:\n  s (Suc (max N0 N)) k = x\n\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "have C1: \"s (Suc ?M) k = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (max N0 N)) k = r", "by (simp add: P1)"], ["proof (state)\nthis:\n  s (Suc (max N0 N)) k = r\n\ngoal (1 subgoal):\n 1. \\<And>x. P x \\<Longrightarrow> x = r", "show \"x = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = r", "using C0 C1"], ["proof (prove)\nusing this:\n  s (Suc (max N0 N)) k = x\n  s (Suc (max N0 N)) k = r\n\ngoal (1 subgoal):\n 1. x = r", "by auto"], ["proof (state)\nthis:\n  x = r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P ?x1 \\<Longrightarrow> ?x1 = r\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "have R: \"r = (THE x. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = (THE x. P x)", "using the_equality 0 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P ?a; \\<And>x. ?P x \\<Longrightarrow> x = ?a\\<rbrakk>\n  \\<Longrightarrow> (THE x. ?P x) = ?a\n  P r\n  P ?x1 \\<Longrightarrow> ?x1 = r\n\ngoal (1 subgoal):\n 1. r = (THE x. P x)", "by metis"], ["proof (state)\nthis:\n  r = (THE x. P x)\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "have \"(res_lim s) k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim s k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)", "using res_lim_def"], ["proof (prove)\nusing this:\n  res_lim ?s = (\\<lambda>k. THE r. \\<exists>N. \\<forall>m>N. ?s m k = r)\n\ngoal (1 subgoal):\n 1. res_lim s k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)", "by simp"], ["proof (state)\nthis:\n  res_lim s k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "then"], ["proof (chain)\npicking this:\n  res_lim s k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)", "have \"f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\""], ["proof (prove)\nusing this:\n  res_lim s k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\n\ngoal (1 subgoal):\n 1. f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)", "using assms"], ["proof (prove)\nusing this:\n  res_lim s k = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\n  is_Zp_cauchy s\n  f = res_lim s k\n\ngoal (1 subgoal):\n 1. f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)", "by auto"], ["proof (state)\nthis:\n  f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "then"], ["proof (chain)\npicking this:\n  f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)", "have \"f = (THE r. P r)\""], ["proof (prove)\nusing this:\n  f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\n\ngoal (1 subgoal):\n 1. f = (THE r. P r)", "using P_def"], ["proof (prove)\nusing this:\n  f = (THE r. \\<exists>N. \\<forall>m>N. s m k = r)\n  P = (\\<lambda>x. \\<exists>N. \\<forall>m>N. s m k = x)\n\ngoal (1 subgoal):\n 1. f = (THE r. P r)", "by auto"], ["proof (state)\nthis:\n  f = (THE r. P r)\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "then"], ["proof (chain)\npicking this:\n  f = (THE r. P r)", "have \"r = f\""], ["proof (prove)\nusing this:\n  f = (THE r. P r)\n\ngoal (1 subgoal):\n 1. r = f", "using R"], ["proof (prove)\nusing this:\n  f = (THE r. P r)\n  r = (THE x. P x)\n\ngoal (1 subgoal):\n 1. r = f", "by auto"], ["proof (state)\nthis:\n  r = f\n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>m>N. s m k = f\n 2. f \\<in> carrier (residue_ring (p ^ k))", "then"], ["proof (chain)\npicking this:\n  r = f", "show \"(\\<exists>N.  (\\<forall> m. (m > N \\<longrightarrow> (s m) k = f)))\""], ["proof (prove)\nusing this:\n  r = f\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>m>N. s m k = f", "using 0 P_def"], ["proof (prove)\nusing this:\n  r = f\n  P r\n  P = (\\<lambda>x. \\<exists>N. \\<forall>m>N. s m k = x)\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>m>N. s m k = f", "by blast"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>m>N. s m k = f\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (residue_ring (p ^ k))", "show \"f \\<in> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (residue_ring (p ^ k))", "using P0 \\<open>r = f\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> carrier (residue_ring (p ^ k))\n  r = f\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (residue_ring (p ^ k))", "by auto"], ["proof (state)\nthis:\n  f \\<in> carrier (residue_ring (p ^ k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma res_lim_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  obtains N where \"\\<And> m.  (m > N \\<longrightarrow> (s m) k = (res_lim s) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>m.\n            N < m \\<longrightarrow> s m k = res_lim s k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using res_lim_Zp_cauchy_0 assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_Zp_cauchy ?s; ?f = res_lim ?s ?k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>N. \\<forall>m>N. ?s m ?k = ?f\n  \\<lbrakk>is_Zp_cauchy ?s; ?f = res_lim ?s ?k\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> carrier (residue_ring (p ^ ?k))\n  is_Zp_cauchy s\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>m.\n            N < m \\<longrightarrow> s m k = res_lim s k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by presburger"], ["", "lemma res_lim_in_Zp:\n  assumes \"is_Zp_cauchy s\"\n  shows \"res_lim s \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim s \\<in> carrier Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim s \\<in> carrier Zp", "have \"res_lim s \\<in> padic_set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim s \\<in> padic_set p", "proof(rule padic_set_memI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m. res_lim s m \\<in> carrier (residue_ring (p ^ m))\n 2. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "show \"\\<And>m. res_lim s m \\<in> carrier (residue_ring (p^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. res_lim s m \\<in> carrier (residue_ring (p ^ m))", "using res_lim_Zp_cauchy_0"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_Zp_cauchy ?s; ?f = res_lim ?s ?k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>N. \\<forall>m>N. ?s m ?k = ?f\n  \\<lbrakk>is_Zp_cauchy ?s; ?f = res_lim ?s ?k\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> carrier (residue_ring (p ^ ?k))\n\ngoal (1 subgoal):\n 1. \\<And>m. res_lim s m \\<in> carrier (residue_ring (p ^ m))", "by (simp add:  assms)"], ["proof (state)\nthis:\n  res_lim s ?m1 \\<in> carrier (residue_ring (p ^ ?m1))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "show \"\\<And>m n. m < n \\<Longrightarrow> residue (p^ m) (res_lim s n) = res_lim s m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "fix m n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "obtain N where  N0: \"\\<And> l.  (l > N \\<longrightarrow> (s l) m = (res_lim s) m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>l.\n            N < l \\<longrightarrow> s l m = res_lim s m) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms res_lim_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>l.\n            N < l \\<longrightarrow> s l m = res_lim s m) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  N < ?l1 \\<longrightarrow> s ?l1 m = res_lim s m\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "obtain M where M0: \"\\<And> l.  (l > M \\<longrightarrow> (s l) n = (res_lim s) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M.\n        (\\<And>l.\n            M < l \\<longrightarrow> s l n = res_lim s n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms prod.simps(2) res_lim_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  (case (?x1.0, ?x2.0) of (x, xa) \\<Rightarrow> ?f x xa) = ?f ?x1.0 ?x2.0\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        (\\<And>l.\n            M < l \\<longrightarrow> s l n = res_lim s n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M < ?l1 \\<longrightarrow> s ?l1 n = res_lim s n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "obtain K where K_def: \"K = max M N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>K. K = max M N \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  K = max M N\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "have Km: \"\\<And> l.  (l > K \\<longrightarrow> (s l) m = (res_lim s) m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l. K < l \\<longrightarrow> s l m = res_lim s m", "using K_def N0"], ["proof (prove)\nusing this:\n  K = max M N\n  N < ?l1 \\<longrightarrow> s ?l1 m = res_lim s m\n\ngoal (1 subgoal):\n 1. \\<And>l. K < l \\<longrightarrow> s l m = res_lim s m", "by simp"], ["proof (state)\nthis:\n  K < ?l1 \\<longrightarrow> s ?l1 m = res_lim s m\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "have Kn: \"\\<And> l.  (l > K \\<longrightarrow> (s l) n = (res_lim s) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l. K < l \\<longrightarrow> s l n = res_lim s n", "using K_def M0"], ["proof (prove)\nusing this:\n  K = max M N\n  M < ?l1 \\<longrightarrow> s ?l1 n = res_lim s n\n\ngoal (1 subgoal):\n 1. \\<And>l. K < l \\<longrightarrow> s l n = res_lim s n", "by simp"], ["proof (state)\nthis:\n  K < ?l1 \\<longrightarrow> s ?l1 n = res_lim s n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "assume \"m < n\""], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow> residue (p ^ m) (res_lim s n) = res_lim s m", "show \"residue (p^ m) (res_lim s n) = res_lim s m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "obtain l where l_def: \"l = Suc K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l. l = Suc K \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  l = Suc K\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "have ln: \"(res_lim s n) = (s l) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim s n = s l n", "by (simp add: Kn l_def)"], ["proof (state)\nthis:\n  res_lim s n = s l n\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "have lm: \"(res_lim s m) = (s l) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim s m = s l m", "by (simp add: Km l_def)"], ["proof (state)\nthis:\n  res_lim s m = s l m\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "have s_car: \"s l \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s l \\<in> carrier Zp", "using assms is_Zp_cauchy_def closed_seqs_memE[of _ Zp]"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s l \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  s l \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "then"], ["proof (chain)\npicking this:\n  s l \\<in> carrier Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  s l \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "using s_car lm ln \\<open>m < n\\<close> p_residue_def p_residue_padic_int"], ["proof (prove)\nusing this:\n  s l \\<in> carrier Zp\n  s l \\<in> carrier Zp\n  res_lim s m = s l m\n  res_lim s n = s l n\n  m < n\n  p_residue ?m ?n \\<equiv> residue (p ^ ?m) ?n\n  \\<lbrakk>?x \\<in> carrier Zp; ?k \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> p_residue ?k (?x ?m) = ?x ?k\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (res_lim s n) = res_lim s m", "by auto"], ["proof (state)\nthis:\n  residue (p ^ m) (res_lim s n) = res_lim s m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  residue (p ^ m) (res_lim s n) = res_lim s m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?m1 < ?n1 \\<Longrightarrow>\n  residue (p ^ ?m1) (res_lim s ?n1) = res_lim s ?m1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res_lim s \\<in> padic_set p\n\ngoal (1 subgoal):\n 1. res_lim s \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  res_lim s \\<in> padic_set p", "show ?thesis"], ["proof (prove)\nusing this:\n  res_lim s \\<in> padic_set p\n\ngoal (1 subgoal):\n 1. res_lim s \\<in> carrier Zp", "by (simp add: Zp_def padic_int_simps(5))"], ["proof (state)\nthis:\n  res_lim s \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["", "(**********************************************************************)\n  (**********************************************************************)"], ["", "subsection\\<open>Completeness of $\\mathbb{Z}_p$\\<close>"], ["", "(**********************************************************************)\n  (**********************************************************************)"], ["", "text\\<open>\n  We can use the developments above to show that a sequence of $p$-adic integers is convergent \n  if and only if it is cauchy, and that limits of convergent sequences are always unique.\n\\<close>"], ["", "lemma is_Zp_cauchy_imp_has_limit:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"a = res_lim s\"\n  shows \"Zp_converges_to s a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "have 0: \"(a \\<in> carrier Zp \\<and> s \\<in> closed_seqs Zp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using assms(1) assms(2) is_Zp_cauchy_def res_lim_in_Zp"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  a = res_lim s\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  is_Zp_cauchy ?s \\<Longrightarrow> res_lim ?s \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by blast"], ["proof (state)\nthis:\n  a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "have 1: \"(\\<forall>(n::int). (\\<exists>(k:: nat). (\\<forall>( m::nat). \n            (m > k \\<longrightarrow> (val_Zp ((s m) \\<ominus> a)) \\<ge> n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)", "show \"\\<exists>k. \\<forall>m>k.  eint n \\<le> val_Zp (s m \\<ominus> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)", "obtain K where K_def: \"\\<And>m. (m > K \\<longrightarrow> (s m) (nat n) = (res_lim s) (nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>K.\n        (\\<And>m.\n            K < m \\<longrightarrow>\n            s m (nat n) = res_lim s (nat n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1) res_lim_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>K.\n        (\\<And>m.\n            K < m \\<longrightarrow>\n            s m (nat n) = res_lim s (nat n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  K < ?m1 \\<longrightarrow> s ?m1 (nat n) = res_lim s (nat n)\n\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)", "have \"\\<forall>m>K.  n \\<le> val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m>K. eint n \\<le> val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. K < m \\<longrightarrow> eint n \\<le> val_Zp_dist (s m) a", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. K < m \\<longrightarrow> eint n \\<le> val_Zp_dist (s m) a", "show \"K < m \\<longrightarrow>  n \\<le> val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K < m \\<longrightarrow> eint n \\<le> val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. K < m \\<Longrightarrow> eint n \\<le> val_Zp_dist (s m) a", "assume A: \"K < m\""], ["proof (state)\nthis:\n  K < m\n\ngoal (1 subgoal):\n 1. K < m \\<Longrightarrow> eint n \\<le> val_Zp_dist (s m) a", "show \" n \\<le> val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "have X: \"(s m) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m \\<in> carrier Zp", "using \"0\" closed_seqs_memE[of _ Zp]"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. s m \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  s m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "have \"(s m) (nat n) = (res_lim s) (nat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m (nat n) = res_lim s (nat n)", "using A K_def"], ["proof (prove)\nusing this:\n  K < m\n  K < ?m1 \\<longrightarrow> s ?m1 (nat n) = res_lim s (nat n)\n\ngoal (1 subgoal):\n 1. s m (nat n) = res_lim s (nat n)", "by blast"], ["proof (state)\nthis:\n  s m (nat n) = res_lim s (nat n)\n\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  s m (nat n) = res_lim s (nat n)", "have \"(s m) (nat n) = a (nat n)\""], ["proof (prove)\nusing this:\n  s m (nat n) = res_lim s (nat n)\n\ngoal (1 subgoal):\n 1. s m (nat n) = a (nat n)", "using assms(2)"], ["proof (prove)\nusing this:\n  s m (nat n) = res_lim s (nat n)\n  a = res_lim s\n\ngoal (1 subgoal):\n 1. s m (nat n) = a (nat n)", "by blast"], ["proof (state)\nthis:\n  s m (nat n) = a (nat n)\n\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  s m (nat n) = a (nat n)", "have \"int (nat n) \\<le> val_Zp_dist (s m) a\""], ["proof (prove)\nusing this:\n  s m (nat n) = a (nat n)\n\ngoal (1 subgoal):\n 1. eint (int (nat n)) \\<le> val_Zp_dist (s m) a", "using  X val_Zp_dist_res_eq2 \"0\""], ["proof (prove)\nusing this:\n  s m (nat n) = a (nat n)\n  s m \\<in> carrier Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp; ?a ?k = ?b ?k\\<rbrakk>\n  \\<Longrightarrow> eint (int ?k) \\<le> val_Zp_dist ?a ?b\n  a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. eint (int (nat n)) \\<le> val_Zp_dist (s m) a", "by blast"], ["proof (state)\nthis:\n  eint (int (nat n)) \\<le> val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  eint (int (nat n)) \\<le> val_Zp_dist (s m) a", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (int (nat n)) \\<le> val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. eint n \\<le> val_Zp_dist (s m) a", "by (metis eint_ord_simps(1) int_ops(1) less_not_sym nat_eq_iff2 not_le order_trans zero_eint_def)"], ["proof (state)\nthis:\n  eint n \\<le> val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint n \\<le> val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  K < m \\<longrightarrow> eint n \\<le> val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m>K. eint n \\<le> val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)", "then"], ["proof (chain)\npicking this:\n  \\<forall>m>K. eint n \\<le> val_Zp_dist (s m) a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m>K. eint n \\<le> val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)", "using val_Zp_dist_def"], ["proof (prove)\nusing this:\n  \\<forall>m>K. eint n \\<le> val_Zp_dist (s m) a\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k. \\<forall>m>k. eint n \\<le> val_Zp (s m \\<ominus> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)\n\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)\n\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "using\n    \"0\" Zp_converges_to_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     \\<exists>k. \\<forall>m>k. eint x \\<le> val_Zp (s m \\<ominus> a)\n  a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  Zp_converges_to ?s ?a =\n  ((?a \\<in> carrier Zp \\<and>\n    ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (?s m \\<ominus> ?a)))\n\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "by (metis Suc_ile_eq val_Zp_dist_def)"], ["proof (state)\nthis:\n  Zp_converges_to s a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergent_imp_Zp_cauchy: \n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  shows \"is_Zp_cauchy s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "apply(rule is_Zp_cauchyI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  Zp_converges_to s a\n\ngoal (2 subgoals):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "show \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "obtain k where k_def:\"\\<forall>m>k.  n < val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms val_Zp_dist_def"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  Zp_converges_to s a\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding Zp_converges_to_def"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  (a \\<in> carrier Zp \\<and>\n   s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n  (\\<forall>n. \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> a))\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by presburger"], ["proof (state)\nthis:\n  \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "have A0:  \"\\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n", "have \"\\<And>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1. k < n0 \\<and> k < n1 \\<Longrightarrow> s n0 n = s n1 n", "fix n0 n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1. k < n0 \\<and> k < n1 \\<Longrightarrow> s n0 n = s n1 n", "assume A: \" k < n0 \\<and> k < n1\""], ["proof (state)\nthis:\n  k < n0 \\<and> k < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1. k < n0 \\<and> k < n1 \\<Longrightarrow> s n0 n = s n1 n", "show \" s n0 n = s n1 n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "have 0: \"n < val_Zp_dist (s n0) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) a", "using k_def"], ["proof (prove)\nusing this:\n  \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) a", "using  A"], ["proof (prove)\nusing this:\n  \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a\n  k < n0 \\<and> k < n1\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n0) a", "by blast"], ["proof (state)\nthis:\n  eint (int n) < val_Zp_dist (s n0) a\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "have 1: \"n < val_Zp_dist (s n1) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n1) a", "using k_def"], ["proof (prove)\nusing this:\n  \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n1) a", "using  A"], ["proof (prove)\nusing this:\n  \\<forall>m>k. eint (int n) < val_Zp_dist (s m) a\n  k < n0 \\<and> k < n1\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp_dist (s n1) a", "by blast"], ["proof (state)\nthis:\n  eint (int n) < val_Zp_dist (s n1) a\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "hence 2: \"(s n0) n = a n\""], ["proof (prove)\nusing this:\n  eint (int n) < val_Zp_dist (s n1) a\n\ngoal (1 subgoal):\n 1. s n0 n = a n", "using 0 assms val_Zp_dist_res_eq[of \"s n0\" a n] closed_seqs_memE"], ["proof (prove)\nusing this:\n  eint (int n) < val_Zp_dist (s n1) a\n  eint (int n) < val_Zp_dist (s n0) a\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  Zp_converges_to s a\n  \\<lbrakk>s n0 \\<in> carrier Zp; a \\<in> carrier Zp;\n   eint (int n) < val_Zp_dist (s n0) a\\<rbrakk>\n  \\<Longrightarrow> s n0 n = a n\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. s n0 n = a n", "by blast"], ["proof (state)\nthis:\n  s n0 n = a n\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "hence 3: \"(s n1) n = a n\""], ["proof (prove)\nusing this:\n  s n0 n = a n\n\ngoal (1 subgoal):\n 1. s n1 n = a n", "using 1 assms val_Zp_dist_res_eq[of \"s n1\" a n] closed_seqs_memE"], ["proof (prove)\nusing this:\n  s n0 n = a n\n  eint (int n) < val_Zp_dist (s n1) a\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  Zp_converges_to s a\n  \\<lbrakk>s n1 \\<in> carrier Zp; a \\<in> carrier Zp;\n   eint (int n) < val_Zp_dist (s n1) a\\<rbrakk>\n  \\<Longrightarrow> s n1 n = a n\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. s n1 n = a n", "by blast"], ["proof (state)\nthis:\n  s n1 n = a n\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "using 2 3"], ["proof (prove)\nusing this:\n  s n0 n = a n\n  s n1 n = a n\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "by auto"], ["proof (state)\nthis:\n  s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k < ?n0.1 \\<and> k < ?n1.1 \\<longrightarrow> s ?n0.1 n = s ?n1.1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n", "thus ?thesis"], ["proof (prove)\nusing this:\n  k < ?n0.1 \\<and> k < ?n1.1 \\<longrightarrow> s ?n0.1 n = s ?n1.1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "using A0"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_limit:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  assumes \"Zp_converges_to s b\"\n  shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a = b", "have \"\\<And>k. a k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "fix k::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "obtain k0 where k0_def:\"\\<forall>m>k0.  k < val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k0.\n        \\<forall>m>k0. eint (int k) < val_Zp_dist (s m) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  Zp_converges_to s a\n  Zp_converges_to s b\n\ngoal (1 subgoal):\n 1. (\\<And>k0.\n        \\<forall>m>k0. eint (int k) < val_Zp_dist (s m) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding val_Zp_dist_def Zp_converges_to_def"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  (a \\<in> carrier Zp \\<and>\n   s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n  (\\<forall>n. \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> a))\n  (b \\<in> carrier Zp \\<and>\n   s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n  (\\<forall>n. \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> b))\n\ngoal (1 subgoal):\n 1. (\\<And>k0.\n        \\<forall>m>k0.\n           eint (int k) < val_Zp (s m \\<ominus> a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m>k0. eint (int k) < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "obtain k1 where k1_def:\"\\<forall>m>k1. k <  val_Zp_dist (s m) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        \\<forall>m>k1. eint (int k) < val_Zp_dist (s m) b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  Zp_converges_to s a\n  Zp_converges_to s b\n\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        \\<forall>m>k1. eint (int k) < val_Zp_dist (s m) b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding val_Zp_dist_def Zp_converges_to_def"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  (a \\<in> carrier Zp \\<and>\n   s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n  (\\<forall>n. \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> a))\n  (b \\<in> carrier Zp \\<and>\n   s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n  (\\<forall>n. \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> b))\n\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        \\<forall>m>k1.\n           eint (int k) < val_Zp (s m \\<ominus> b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m>k1. eint (int k) < val_Zp_dist (s m) b\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have k0_prop: \"\\<And>m. m> k0 \\<Longrightarrow> (s m) k = a k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. k0 < m \\<Longrightarrow> s m k = a k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. k0 < m \\<Longrightarrow> s m k = a k", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. k0 < m \\<Longrightarrow> s m k = a k", "assume A: \"m > k0\""], ["proof (state)\nthis:\n  k0 < m\n\ngoal (1 subgoal):\n 1. \\<And>m. k0 < m \\<Longrightarrow> s m k = a k", "then"], ["proof (chain)\npicking this:\n  k0 < m", "show \"(s m) k = a k\""], ["proof (prove)\nusing this:\n  k0 < m\n\ngoal (1 subgoal):\n 1. s m k = a k", "using k0_def assms closed_seqs_memE[of s Zp] val_Zp_dist_res_eq[of _ a k] of_nat_Suc"], ["proof (prove)\nusing this:\n  k0 < m\n  \\<forall>m>k0. eint (int k) < val_Zp_dist (s m) a\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  Zp_converges_to s a\n  Zp_converges_to s b\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  s ?k \\<in> carrier Zp\n  \\<lbrakk>?a \\<in> carrier Zp; a \\<in> carrier Zp;\n   eint (int k) < val_Zp_dist ?a a\\<rbrakk>\n  \\<Longrightarrow> ?a k = a k\n  of_nat (Suc ?m) = (1::?'a) + of_nat ?m\n\ngoal (1 subgoal):\n 1. s m k = a k", "by blast"], ["proof (state)\nthis:\n  s m k = a k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k0 < ?m1 \\<Longrightarrow> s ?m1 k = a k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have k1_prop: \"\\<And>m. m> k1 \\<Longrightarrow> (s m) k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. k1 < m \\<Longrightarrow> s m k = b k", "using k1_def assms closed_seqs_memE[of s Zp]"], ["proof (prove)\nusing this:\n  \\<forall>m>k1. eint (int k) < val_Zp_dist (s m) b\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  Zp_converges_to s a\n  Zp_converges_to s b\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  s ?k \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<And>m. k1 < m \\<Longrightarrow> s m k = b k", "by (simp add: val_Zp_dist_res_eq)"], ["proof (state)\nthis:\n  k1 < ?m1 \\<Longrightarrow> s ?m1 k = b k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have \"\\<And> m. m > (max k0 k1) \\<Longrightarrow> a k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. max k0 k1 < m \\<Longrightarrow> a k = b k", "using k0_prop k1_prop"], ["proof (prove)\nusing this:\n  k0 < ?m1 \\<Longrightarrow> s ?m1 k = a k\n  k1 < ?m1 \\<Longrightarrow> s ?m1 k = b k\n\ngoal (1 subgoal):\n 1. \\<And>m. max k0 k1 < m \\<Longrightarrow> a k = b k", "by force"], ["proof (state)\nthis:\n  max k0 k1 < ?m1 \\<Longrightarrow> a k = b k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "then"], ["proof (chain)\npicking this:\n  max k0 k1 < ?m1 \\<Longrightarrow> a k = b k", "show \"a k = b k\""], ["proof (prove)\nusing this:\n  max k0 k1 < ?m1 \\<Longrightarrow> a k = b k\n\ngoal (1 subgoal):\n 1. a k = b k", "by blast"], ["proof (state)\nthis:\n  a k = b k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a ?k1 = b ?k1\n\ngoal (1 subgoal):\n 1. a = b", "then"], ["proof (chain)\npicking this:\n  a ?k1 = b ?k1", "show ?thesis"], ["proof (prove)\nusing this:\n  a ?k1 = b ?k1\n\ngoal (1 subgoal):\n 1. a = b", "by blast"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_limit':\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  shows \"a = res_lim s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = res_lim s", "using unique_limit[of s a \"res_lim s\"] assms \n        convergent_imp_Zp_cauchy is_Zp_cauchy_imp_has_limit res_lim_in_Zp"], ["proof (prove)\nusing this:\n  \\<lbrakk>s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>; a \\<in> carrier Zp;\n   res_lim s \\<in> carrier Zp; Zp_converges_to s a;\n   Zp_converges_to s (res_lim s)\\<rbrakk>\n  \\<Longrightarrow> a = res_lim s\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  Zp_converges_to s a\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>; ?a \\<in> carrier Zp;\n   Zp_converges_to ?s ?a\\<rbrakk>\n  \\<Longrightarrow> is_Zp_cauchy ?s\n  \\<lbrakk>is_Zp_cauchy ?s; ?a = res_lim ?s\\<rbrakk>\n  \\<Longrightarrow> Zp_converges_to ?s ?a\n  is_Zp_cauchy ?s \\<Longrightarrow> res_lim ?s \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a = res_lim s", "by blast"], ["", "lemma Zp_converges_toE:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"Zp_converges_to s a\"\n  shows \"\\<exists>N. \\<forall>k > N. s k n = a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. s k n = a n", "by (metis assms(1) assms(2) assms(3) \n      convergent_imp_Zp_cauchy \n      res_lim_Zp_cauchy unique_limit')"], ["", "lemma Zp_converges_toI:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"\\<And>n. \\<exists>N. \\<forall>k > N. s k n = a n\"\n  shows \"Zp_converges_to s a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "have 0: \"(a \\<in> carrier Zp \\<and> s \\<in> closed_seqs Zp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  \\<exists>N. \\<forall>k>N. s k ?n1 = a ?n1\n\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by auto"], ["proof (state)\nthis:\n  a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "have 1: \"(\\<forall>n::int. \\<exists>k. \\<forall>m>k.  n < val_Zp_dist (s m) a) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a", "fix n::int"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a", "show \"\\<exists>k. \\<forall>m>k.  n < val_Zp_dist (s m) a \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "proof(cases \"n < 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a\n 2. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "case True"], ["proof (state)\nthis:\n  n < 0\n\ngoal (2 subgoals):\n 1. n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a\n 2. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "have \"\\<forall>m>0.  n < val_Zp_dist (s m) a \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m>0. eint n < val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. 0 < m \\<longrightarrow> eint n < val_Zp_dist (s m) a", "fix m ::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. 0 < m \\<longrightarrow> eint n < val_Zp_dist (s m) a", "show \"0 < m \\<longrightarrow>  n < val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<longrightarrow> eint n < val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "have 0: \"eint n < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint n < 0", "by (simp add: True zero_eint_def)"], ["proof (state)\nthis:\n  eint n < 0\n\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "have 1: \" s m \\<ominus> a \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m \\<ominus> a \\<in> carrier Zp", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  \\<exists>N. \\<forall>k>N. s k ?n1 = a ?n1\n\ngoal (1 subgoal):\n 1. s m \\<ominus> a \\<in> carrier Zp", "by (simp add: closed_seqs_diff_closed)"], ["proof (state)\nthis:\n  s m \\<ominus> a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "thus \" n < val_Zp_dist (s m) a\""], ["proof (prove)\nusing this:\n  s m \\<ominus> a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. eint n < val_Zp_dist (s m) a", "using 0  True val_pos[of \"s m \\<ominus> a\"]"], ["proof (prove)\nusing this:\n  s m \\<ominus> a \\<in> carrier Zp\n  eint n < 0\n  n < 0\n  s m \\<ominus> a \\<in> carrier Zp \\<Longrightarrow>\n  0 \\<le> val_Zp (s m \\<ominus> a)\n\ngoal (1 subgoal):\n 1. eint n < val_Zp_dist (s m) a", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  s m \\<ominus> a \\<in> carrier Zp\n  eint n < 0\n  n < 0\n  s m \\<ominus> a \\<in> carrier Zp \\<Longrightarrow>\n  0 \\<le> val_Zp (s m \\<ominus> a)\n\ngoal (1 subgoal):\n 1. eint n < val_Zp (s m \\<ominus> a)", "by auto"], ["proof (state)\nthis:\n  eint n < val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < m \\<longrightarrow> eint n < val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m>0. eint n < val_Zp_dist (s m) a\n\ngoal (2 subgoals):\n 1. n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a\n 2. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  \\<forall>m>0. eint n < val_Zp_dist (s m) a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m>0. eint n < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "case False"], ["proof (state)\nthis:\n  \\<not> n < 0\n\ngoal (1 subgoal):\n 1. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  \\<not> n < 0", "have P0: \"n \\<ge> 0\""], ["proof (prove)\nusing this:\n  \\<not> n < 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> n", "by auto"], ["proof (state)\nthis:\n  0 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "obtain N where N_def: \"\\<forall>k > N. s k (Suc (nat n)) = a (Suc (nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>k>N. s k (Suc (nat n)) = a (Suc (nat n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  \\<exists>N. \\<forall>k>N. s k ?n1 = a ?n1\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>k>N. s k (Suc (nat n)) = a (Suc (nat n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>k>N. s k (Suc (nat n)) = a (Suc (nat n))\n\ngoal (1 subgoal):\n 1. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "have \"\\<forall>m>N.  n < val_Zp_dist (s m) a \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m>N. eint n < val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. N < m \\<longrightarrow> eint n < val_Zp_dist (s m) a", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. N < m \\<longrightarrow> eint n < val_Zp_dist (s m) a", "show \" N < m \\<longrightarrow>  n < val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N < m \\<longrightarrow> eint n < val_Zp_dist (s m) a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. N < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "assume A: \"N < m\""], ["proof (state)\nthis:\n  N < m\n\ngoal (1 subgoal):\n 1. N < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  N < m", "have A0: \"s m (Suc (nat n)) = a (Suc (nat n))\""], ["proof (prove)\nusing this:\n  N < m\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = a (Suc (nat n))", "using N_def"], ["proof (prove)\nusing this:\n  N < m\n  \\<forall>k>N. s k (Suc (nat n)) = a (Suc (nat n))\n\ngoal (1 subgoal):\n 1. s m (Suc (nat n)) = a (Suc (nat n))", "by blast"], ["proof (state)\nthis:\n  s m (Suc (nat n)) = a (Suc (nat n))\n\ngoal (1 subgoal):\n 1. N < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "have \"(Suc (nat n)) \\<le> val_Zp_dist (s m) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) a", "using assms A0 val_Zp_dist_res_eq2[of \"s m\" a \"Suc (nat n)\"] closed_seqs_memE"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a \\<in> carrier Zp\n  \\<exists>N. \\<forall>k>N. s k ?n1 = a ?n1\n  s m (Suc (nat n)) = a (Suc (nat n))\n  \\<lbrakk>s m \\<in> carrier Zp; a \\<in> carrier Zp;\n   s m (Suc (nat n)) = a (Suc (nat n))\\<rbrakk>\n  \\<Longrightarrow> eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) a\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) a", "by blast"], ["proof (state)\nthis:\n  eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. N < m \\<Longrightarrow> eint n < val_Zp_dist (s m) a", "thus \"n < val_Zp_dist (s m) a\""], ["proof (prove)\nusing this:\n  eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. eint n < val_Zp_dist (s m) a", "using False"], ["proof (prove)\nusing this:\n  eint (int (Suc (nat n))) \\<le> val_Zp_dist (s m) a\n  \\<not> n < 0\n\ngoal (1 subgoal):\n 1. eint n < val_Zp_dist (s m) a", "by (meson P0 eint_ord_simps(2) less_Suc_eq less_le_trans nat_less_iff)"], ["proof (state)\nthis:\n  eint n < val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  N < m \\<longrightarrow> eint n < val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m>N. eint n < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<not> n < 0 \\<Longrightarrow>\n    \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "then"], ["proof (chain)\npicking this:\n  \\<forall>m>N. eint n < val_Zp_dist (s m) a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m>N. eint n < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k. \\<forall>m>k. eint n < val_Zp_dist (s m) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to s a", "unfolding Zp_converges_to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> carrier Zp \\<and>\n     s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n    (\\<forall>n.\n        \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> a))", "using 0 1"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp \\<and> s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. (a \\<in> carrier Zp \\<and>\n     s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n    (\\<forall>n.\n        \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> a))", "by (simp add: val_Zp_dist_def)"], ["proof (state)\nthis:\n  Zp_converges_to s a\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Sums and products of cauchy sequences are cauchy:\\<close>"], ["", "lemma sum_of_Zp_cauchy_is_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"is_Zp_cauchy t\"\n  shows \"is_Zp_cauchy (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)", "proof(rule is_Zp_cauchyI)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"(s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using assms seq_plus_closed is_Zp_cauchy_def"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  is_Zp_cauchy t\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?s' \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\\<rbrakk>\n  \\<Longrightarrow> ?s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                    ?s'\n                    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n\ngoal (1 subgoal):\n 1. s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by blast"], ["proof (state)\nthis:\n  s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n  \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"\\<And>n. \\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n             (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "obtain N1 where N1_def: \"\\<forall>n0 n1. N1 < n0 \\<and> N1 < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N1.\n        \\<forall>n0 n1.\n           N1 < n0 \\<and> N1 < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1) is_Zp_cauchy_imp_res_eventually_const_0 padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>n0 n1.\n          N < n0 \\<and> N < n1 \\<Longrightarrow>\n          ?s n0 ?n = ?s n1 ?n) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  padic_integers p\n\ngoal (1 subgoal):\n 1. (\\<And>N1.\n        \\<forall>n0 n1.\n           N1 < n0 \\<and> N1 < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. N1 < n0 \\<and> N1 < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "obtain N2 where N2_def: \"\\<forall>n0 n1. N2 < n0 \\<and> N2 < n1 \\<longrightarrow> t n0 n = t n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N2.\n        \\<forall>n0 n1.\n           N2 < n0 \\<and> N2 < n1 \\<longrightarrow>\n           t n0 n = t n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2) is_Zp_cauchy_imp_res_eventually_const_0 padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy t\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>n0 n1.\n          N < n0 \\<and> N < n1 \\<Longrightarrow>\n          ?s n0 ?n = ?s n1 ?n) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  padic_integers p\n\ngoal (1 subgoal):\n 1. (\\<And>N2.\n        \\<forall>n0 n1.\n           N2 < n0 \\<and> N2 < n1 \\<longrightarrow>\n           t n0 n = t n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. N2 < n0 \\<and> N2 < n1 \\<longrightarrow> t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "obtain M where M_def: \"M = max N1 N2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M. M = max N1 N2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  M = max N1 N2\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "have \"\\<forall>n0 n1. M < n0 \\<and> M < n1 \\<longrightarrow> (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0.\n       \\<forall>n1.\n          M < n0 \\<and> M < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "fix n0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0.\n       \\<forall>n1.\n          M < n0 \\<and> M < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"\\<forall>n1. M < n0 \\<and> M < n1 \\<longrightarrow> (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "fix n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \" M < n0 \\<and> M < n1 \\<longrightarrow> (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<longrightarrow>\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "assume A: \"M < n0 \\<and> M < n1 \""], ["proof (state)\nthis:\n  M < n0 \\<and> M < n1\n\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "have Fs: \" s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "using A M_def N1_def"], ["proof (prove)\nusing this:\n  M < n0 \\<and> M < n1\n  M = max N1 N2\n  \\<forall>n0 n1. N1 < n0 \\<and> N1 < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "by auto"], ["proof (state)\nthis:\n  s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "have Ft: \" t n0 n = t n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n0 n = t n1 n", "using A M_def N2_def"], ["proof (prove)\nusing this:\n  M < n0 \\<and> M < n1\n  M = max N1 N2\n  \\<forall>n0 n1. N2 < n0 \\<and> N2 < n1 \\<longrightarrow> t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. t n0 n = t n1 n", "by auto"], ["proof (state)\nthis:\n  t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "then"], ["proof (chain)\npicking this:\n  t n0 n = t n1 n", "show \"(s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\nusing this:\n  t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "using seq_plus_simp[of s t] assms"], ["proof (prove)\nusing this:\n  t n0 n = t n1 n\n  \\<lbrakk>s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   t \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\\<rbrakk>\n  \\<Longrightarrow> (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)\n                     ?k =\n                    s ?k \\<oplus> t ?k\n  is_Zp_cauchy s\n  is_Zp_cauchy t\n\ngoal (1 subgoal):\n 1. (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "by (simp add: Fs is_Zp_cauchy_imp_closed residue_of_sum)"], ["proof (state)\nthis:\n  (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n  (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M < n0 \\<and> M < n1 \\<longrightarrow>\n  (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n  (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "then"], ["proof (chain)\npicking this:\n  \\<forall>n0 n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n        (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n        (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 ?n1 =\n        (s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 ?n1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_of_Zp_cauchy_is_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"is_Zp_cauchy t\"\n  shows \"is_Zp_cauchy (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t)", "proof(rule is_Zp_cauchyI)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0\n              n =\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"(s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using assms(1) assms(2) is_Zp_cauchy_def seq_mult_closed"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  is_Zp_cauchy t\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?s' \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\\<rbrakk>\n  \\<Longrightarrow> ?s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                    ?s'\n                    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by auto"], ["proof (state)\nthis:\n  s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t\n  \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0\n              n =\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"\\<And>n. \\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0\n              n =\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0\n              n =\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0\n              n =\n             (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "obtain N1 where N1_def: \"\\<forall>n0 n1. N1 < n0 \\<and> N1 < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N1.\n        \\<forall>n0 n1.\n           N1 < n0 \\<and> N1 < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1) is_Zp_cauchy_imp_res_eventually_const_0 padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>n0 n1.\n          N < n0 \\<and> N < n1 \\<Longrightarrow>\n          ?s n0 ?n = ?s n1 ?n) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  padic_integers p\n\ngoal (1 subgoal):\n 1. (\\<And>N1.\n        \\<forall>n0 n1.\n           N1 < n0 \\<and> N1 < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. N1 < n0 \\<and> N1 < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "obtain N2 where N2_def: \"\\<forall>n0 n1. N2 < n0 \\<and> N2 < n1 \\<longrightarrow> t n0 n = t n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N2.\n        \\<forall>n0 n1.\n           N2 < n0 \\<and> N2 < n1 \\<longrightarrow>\n           t n0 n = t n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2) is_Zp_cauchy_imp_res_eventually_const_0 padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy t\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>n0 n1.\n          N < n0 \\<and> N < n1 \\<Longrightarrow>\n          ?s n0 ?n = ?s n1 ?n) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  padic_integers p\n\ngoal (1 subgoal):\n 1. (\\<And>N2.\n        \\<forall>n0 n1.\n           N2 < n0 \\<and> N2 < n1 \\<longrightarrow>\n           t n0 n = t n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. N2 < n0 \\<and> N2 < n1 \\<longrightarrow> t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "obtain M where M_def: \"M = max N1 N2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M. M = max N1 N2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  M = max N1 N2\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "have \"\\<forall>n0 n1. M < n0 \\<and> M < n1 \\<longrightarrow> (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0.\n       \\<forall>n1.\n          M < n0 \\<and> M < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "fix n0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0.\n       \\<forall>n1.\n          M < n0 \\<and> M < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \"\\<forall>n1. M < n0 \\<and> M < n1 \\<longrightarrow> (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "fix n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1.\n       M < n0 \\<and> M < n1 \\<longrightarrow>\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n       (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show \" M < n0 \\<and> M < n1 \\<longrightarrow> (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<longrightarrow>\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "assume A: \"M < n0 \\<and> M < n1 \""], ["proof (state)\nthis:\n  M < n0 \\<and> M < n1\n\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "have Fs: \" s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "using A M_def N1_def"], ["proof (prove)\nusing this:\n  M < n0 \\<and> M < n1\n  M = max N1 N2\n  \\<forall>n0 n1. N1 < n0 \\<and> N1 < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. s n0 n = s n1 n", "by auto"], ["proof (state)\nthis:\n  s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "have Ft: \" t n0 n = t n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n0 n = t n1 n", "using A M_def N2_def"], ["proof (prove)\nusing this:\n  M < n0 \\<and> M < n1\n  M = max N1 N2\n  \\<forall>n0 n1. N2 < n0 \\<and> N2 < n1 \\<longrightarrow> t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. t n0 n = t n1 n", "by auto"], ["proof (state)\nthis:\n  t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. M < n0 \\<and> M < n1 \\<Longrightarrow>\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "then"], ["proof (chain)\npicking this:\n  t n0 n = t n1 n", "show \"(s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n = (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\""], ["proof (prove)\nusing this:\n  t n0 n = t n1 n\n\ngoal (1 subgoal):\n 1. (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "using seq_mult_simp[of s t] is_Zp_cauchy_imp_closed assms"], ["proof (prove)\nusing this:\n  t n0 n = t n1 n\n  \\<lbrakk>s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   t \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\\<rbrakk>\n  \\<Longrightarrow> (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                     t)\n                     ?k =\n                    s ?k \\<otimes> t ?k\n  is_Zp_cauchy ?s \\<Longrightarrow>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  is_Zp_cauchy s\n  is_Zp_cauchy t\n\ngoal (1 subgoal):\n 1. (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n    (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "by (simp add: Fs residue_of_prod)"], ["proof (state)\nthis:\n  (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n  (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M < n0 \\<and> M < n1 \\<longrightarrow>\n  (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n  (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "then"], ["proof (chain)\npicking this:\n  \\<forall>n0 n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1.\n     M < n0 \\<and> M < n1 \\<longrightarrow>\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n     (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n          (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n        (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 n =\n        (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n0 ?n1 =\n        (s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> t) n1 ?n1\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Constant sequences are cauchy:\\<close>"], ["", "lemma constant_is_Zp_cauchy:\n  assumes \"is_constant_seq Zp s\"\n  shows \"is_Zp_cauchy s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "proof(rule is_Zp_cauchyI)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "show \"s \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "proof(rule closed_seqs_memI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. s k \\<in> carrier Zp", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. s k \\<in> carrier Zp", "show \"s k \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s k \\<in> carrier Zp", "using assms is_constant_seq_imp_closed"], ["proof (prove)\nusing this:\n  is_constant_seq Zp s\n  is_constant_seq ?R ?s \\<Longrightarrow>\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. s k \\<in> carrier Zp", "by (simp add: is_constant_seq_imp_closed closed_seqs_memE)"], ["proof (state)\nthis:\n  s k \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "obtain x where \"\\<And> k. s k = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. (\\<And>k. s k = x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_constant_seq Zp s\n\ngoal (1 subgoal):\n 1. (\\<And>x. (\\<And>k. s k = x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson is_constant_seqE)"], ["proof (state)\nthis:\n  s ?k1 = x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "then"], ["proof (chain)\npicking this:\n  s ?k1 = x", "show \"\\<And>n. \\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\nusing this:\n  s ?k1 = x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "by simp"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> s n0 ?n1 = s n1 ?n1\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Scalar multiplies of cauchy sequences are cauchy:\\<close>"], ["", "lemma smult_is_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"a \\<in> carrier Zp\"\n  shows \"is_Zp_cauchy (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s)", "apply(rule is_Zp_cauchyI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s) n0 n =\n             (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s) n1 n", "apply (meson U_function_ring.ring_seq_smult_closed U_function_ring_axioms assms(1) assms(2) is_Zp_cauchy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s) n0 n =\n             (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s) n1 n", "using assms ring_seq_smult_eval[of s a] is_Zp_cauchy_imp_closed[of s]"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  a \\<in> carrier Zp\n  \\<lbrakk>s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   a \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s)\n                     ?k =\n                    a \\<otimes> s ?k\n  is_Zp_cauchy s \\<Longrightarrow>\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s) n0 n =\n             (a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub> s) n1 n", "by (metis res_lim_Zp_cauchy residue_of_prod)"], ["", "lemma Zp_cauchy_imp_approaches_res_lim:\n  assumes \"is_Zp_cauchy s\"\n  assumes \"a = res_lim s\"\n  obtains N where \"\\<And>n. n> N \\<Longrightarrow> val_Zp (a \\<ominus> (s n)) > eint k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N < n \\<Longrightarrow>\n            eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N < n \\<Longrightarrow>\n            eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \" (\\<forall>n::int. \\<exists>k. \\<forall>m>k.  n < val_Zp_dist (s m) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a", "using Zp_converges_to_def[of s a] assms is_Zp_cauchy_imp_has_limit[of s a] val_Zp_dist_def"], ["proof (prove)\nusing this:\n  Zp_converges_to s a =\n  ((a \\<in> carrier Zp \\<and>\n    s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (s m \\<ominus> a)))\n  is_Zp_cauchy s\n  a = res_lim s\n  \\<lbrakk>is_Zp_cauchy s; a = res_lim s\\<rbrakk>\n  \\<Longrightarrow> Zp_converges_to s a\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N < n \\<Longrightarrow>\n            eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a", "have \"\\<exists>N. \\<forall>m>N.  k < val_Zp_dist (s m) a\""], ["proof (prove)\nusing this:\n  \\<forall>x. \\<exists>k. \\<forall>m>k. eint x < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>m>N. eint k < val_Zp_dist (s m) a", "by blast"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>m>N. eint k < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N < n \\<Longrightarrow>\n            eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>N. \\<forall>m>N. eint k < val_Zp_dist (s m) a", "obtain N where N_def: \"\\<forall>m>N.  k < val_Zp_dist (s m) a\""], ["proof (prove)\nusing this:\n  \\<exists>N. \\<forall>m>N. eint k < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m>N. eint k < val_Zp_dist (s m) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m>N. eint k < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N < n \\<Longrightarrow>\n            eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>n. n> N \\<Longrightarrow> val_Zp (a \\<ominus> (s n)) > k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. N < n \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. N < n \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s n)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. N < n \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s n)", "assume \"m > N\""], ["proof (state)\nthis:\n  N < m\n\ngoal (1 subgoal):\n 1. \\<And>n. N < n \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s n)", "then"], ["proof (chain)\npicking this:\n  N < m", "have 0: \"k < val_Zp_dist (s m) a\""], ["proof (prove)\nusing this:\n  N < m\n\ngoal (1 subgoal):\n 1. eint k < val_Zp_dist (s m) a", "using N_def"], ["proof (prove)\nusing this:\n  N < m\n  \\<forall>m>N. eint k < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. eint k < val_Zp_dist (s m) a", "by (simp add: val_Zp_def)"], ["proof (state)\nthis:\n  eint k < val_Zp_dist (s m) a\n\ngoal (1 subgoal):\n 1. \\<And>n. N < n \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s n)", "show \"k < val_Zp (a \\<ominus> s m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint k < val_Zp (a \\<ominus> s m)", "using \"0\" assms(1) assms(2) is_Zp_cauchy_def closed_seqs_memE[of _ Zp] val_Zp_dist_def val_Zp_dist_sym res_lim_in_Zp"], ["proof (prove)\nusing this:\n  eint k < val_Zp_dist (s m) a\n  is_Zp_cauchy s\n  a = res_lim s\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier Zp\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp_dist ?a ?b = val_Zp_dist ?b ?a\n  is_Zp_cauchy ?s \\<Longrightarrow> res_lim ?s \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. eint k < val_Zp (a \\<ominus> s m)", "by auto"], ["proof (state)\nthis:\n  eint k < val_Zp (a \\<ominus> s m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  N < ?n1 \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s ?n1)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N < n \\<Longrightarrow>\n            eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  N < ?n1 \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s ?n1)", "show ?thesis"], ["proof (prove)\nusing this:\n  N < ?n1 \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s ?n1)\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  N < ?n1 \\<Longrightarrow> eint k < val_Zp (a \\<ominus> s ?n1)\n  (\\<And>n.\n      ?N1 < n \\<Longrightarrow>\n      eint k < val_Zp (a \\<ominus> s n)) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)\n(****************************)"], ["", "section\\<open>Continuous Functions\\<close>"], ["", "(***********************************)\n(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "text\\<open>\n  For convenience, we will use a slightly unorthodox definition of continuity here.\n  Since $\\mathbb{Z}_p$ is complete, a function is continuous if and only if its compositions\n  with cauchy sequences are cauchy sequences. Thus we can define a continuous function on\n  $\\mathbb{Z}_p$ as a function which carries cauchy sequences to cauchy sequences under\n  composition. Note that this does not generalize to a definition of continuity for functions\n  defined on incomplete subsets of $\\mathbb{Z}_p$. For example, the function $1/x$ defined on\n  $\\mathbb{Z}_p - \\{0\\}$ clearly does not have this property but is continuous. However, towards\n  a proof of Hensel's Lemma we will only need to consider polynomial functions and so this \n  definition suffices for our purposes.\n\\<close>"], ["", "subsection\\<open>Defining Continuous Functions and Basic Examples\\<close>"], ["", "abbreviation Zp_constant_function (\"\\<cc>\\<^bsub>Zp\\<^esub>\") where\n\"\\<cc>\\<^bsub>Zp\\<^esub> a \\<equiv> constant_function (carrier Zp) a\""], ["", "definition is_Zp_continuous ::\"padic_int_fun \\<Rightarrow> bool\" where\n\"is_Zp_continuous f = (f \\<in> carrier (Fun Zp) \\<and>(\\<forall> s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy(f \\<circ> s)))\""], ["", "lemma Zp_continuous_is_Zp_closed:\n  assumes \"is_Zp_continuous f\"\n  shows \"f \\<in> carrier (Fun Zp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (function_ring (carrier Zp) Zp)", "using assms is_Zp_continuous_def"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (function_ring (carrier Zp) Zp)", "by blast"], ["", "lemma is_Zp_continuousI:\n  assumes \"f \\<in> carrier (Fun Zp)\"\n  assumes \"\\<And>s. is_Zp_cauchy s \\<Longrightarrow> is_Zp_cauchy (f \\<circ> s)\"\n  shows \"is_Zp_continuous f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_Zp_continuous f", "have \"(\\<forall> s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy(f \\<circ> s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)", "show \"is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)", "by (simp add: assms(2))"], ["proof (state)\nthis:\n  is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)\n\ngoal (1 subgoal):\n 1. is_Zp_continuous f", "then"], ["proof (chain)\npicking this:\n  \\<forall>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)\n\ngoal (1 subgoal):\n 1. is_Zp_continuous f", "using assms(1) is_Zp_continuous_def"], ["proof (prove)\nusing this:\n  \\<forall>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s)\n  f \\<in> carrier (function_ring (carrier Zp) Zp)\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n\ngoal (1 subgoal):\n 1. is_Zp_continuous f", "by blast"], ["proof (state)\nthis:\n  is_Zp_continuous f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Zp_continuous_is_closed:\n  assumes \"is_Zp_continuous f\"\n  shows \"f \\<in> carrier (Fun Zp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (function_ring (carrier Zp) Zp)", "using assms"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (function_ring (carrier Zp) Zp)", "unfolding is_Zp_continuous_def"], ["proof (prove)\nusing this:\n  f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n  (\\<forall>s. is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (f \\<circ> s))\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (function_ring (carrier Zp) Zp)", "by blast"], ["", "lemma constant_is_Zp_continuous:\n  assumes \"a \\<in> carrier Zp\"\n  shows \"is_Zp_continuous (const a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous (\\<cc>\\<^bsub>Zp\\<^esub> a)", "proof(rule is_Zp_continuousI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<cc>\\<^bsub>Zp\\<^esub> a \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "show \"\\<cc>\\<^bsub>Zp\\<^esub> a \\<in> carrier (function_ring (carrier Zp) Zp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<cc>\\<^bsub>Zp\\<^esub> a \\<in> carrier (function_ring (carrier Zp) Zp)", "by (simp add: assms constant_function_closed)"], ["proof (state)\nthis:\n  \\<cc>\\<^bsub>Zp\\<^esub> a \\<in> carrier (function_ring (carrier Zp) Zp)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "show \"\\<And>s. is_Zp_cauchy s \\<Longrightarrow> is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "assume A: \"is_Zp_cauchy s\""], ["proof (state)\nthis:\n  is_Zp_cauchy s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "have \"is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "using constant_function_comp_is_constant_seq[of a s] A assms \n        is_Zp_cauchy_imp_closed"], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<in> carrier Zp;\n   s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\\<rbrakk>\n  \\<Longrightarrow> is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\n  is_Zp_cauchy s\n  a \\<in> carrier Zp\n  is_Zp_cauchy ?s \\<Longrightarrow>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "by blast"], ["proof (state)\nthis:\n  is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "then"], ["proof (chain)\npicking this:\n  is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "show \"is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\""], ["proof (prove)\nusing this:\n  is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "using A assms  constant_is_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_constant_seq Zp (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\n  is_Zp_cauchy s\n  a \\<in> carrier Zp\n  is_constant_seq Zp ?s \\<Longrightarrow> is_Zp_cauchy ?s\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)", "by blast"], ["proof (state)\nthis:\n  is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_Zp_cauchy ?s2 \\<Longrightarrow>\n  is_Zp_cauchy (\\<cc>\\<^bsub>Zp\\<^esub> a \\<circ> ?s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_of_cont_is_cont:\n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_continuous g\"\n  shows \"is_Zp_continuous (f \\<oplus>\\<^bsub>Fun Zp\\<^esub> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous\n     (f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g)", "apply(rule is_Zp_continuousI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "using assms Zp_continuous_is_closed assms function_sum_comp_is_seq_sum[of _ f g]"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_continuous g\n  is_Zp_continuous ?f \\<Longrightarrow>\n  ?f \\<in> carrier (function_ring (carrier Zp) Zp)\n  is_Zp_continuous f\n  is_Zp_continuous g\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   f \\<in> carrier (function_ring (carrier Zp) Zp);\n   g \\<in> carrier (function_ring (carrier Zp) Zp)\\<rbrakk>\n  \\<Longrightarrow> f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                    g \\<circ>\n                    ?s =\n                    (f \\<circ>\n                     ?s) \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                    (g \\<circ> ?s)\n\ngoal (2 subgoals):\n 1. f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "apply (simp add: fun_add_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "using assms(1) assms(2) function_sum_comp_is_seq_sum is_Zp_cauchy_def is_Zp_continuous_def sum_of_Zp_cauchy_is_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_continuous g\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?f \\<in> carrier (function_ring (carrier Zp) Zp);\n   ?g \\<in> carrier (function_ring (carrier Zp) Zp)\\<rbrakk>\n  \\<Longrightarrow> ?f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                    ?g \\<circ>\n                    ?s =\n                    (?f \\<circ>\n                     ?s) \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                    (?g \\<circ> ?s)\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  \\<lbrakk>is_Zp_cauchy ?s; is_Zp_cauchy ?t\\<rbrakk>\n  \\<Longrightarrow> is_Zp_cauchy\n                     (?s \\<oplus>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                      ?t)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<oplus>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "by auto"], ["", "lemma prod_of_cont_is_cont:\n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_continuous g\"\n  shows \"is_Zp_continuous (f \\<otimes>\\<^bsub>Fun Zp\\<^esub> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous\n     (f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g)", "apply(rule is_Zp_continuousI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "using assms Zp_continuous_is_closed assms"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_continuous g\n  is_Zp_continuous ?f \\<Longrightarrow>\n  ?f \\<in> carrier (function_ring (carrier Zp) Zp)\n  is_Zp_continuous f\n  is_Zp_continuous g\n\ngoal (2 subgoals):\n 1. f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "apply (simp add: fun_mult_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "using  function_mult_comp_is_seq_mult[of _ f g] assms(1) assms(2) is_Zp_cauchy_imp_closed \n    is_Zp_continuous_def prod_of_Zp_cauchy_is_Zp_cauchy"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   f \\<in> carrier (function_ring (carrier Zp) Zp);\n   g \\<in> carrier (function_ring (carrier Zp) Zp)\\<rbrakk>\n  \\<Longrightarrow> f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                    g \\<circ>\n                    ?s =\n                    (f \\<circ>\n                     ?s) \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                    (g \\<circ> ?s)\n  is_Zp_continuous f\n  is_Zp_continuous g\n  is_Zp_cauchy ?s \\<Longrightarrow>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  \\<lbrakk>is_Zp_cauchy ?s; is_Zp_cauchy ?t\\<rbrakk>\n  \\<Longrightarrow> is_Zp_cauchy\n                     (?s \\<otimes>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                      ?t)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (f \\<otimes>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> g \\<circ>\n         s)", "by auto"], ["", "lemma smult_is_continuous:\n  assumes \"is_Zp_continuous f\"\n  assumes \"a \\<in> carrier Zp\"\n  shows \"is_Zp_continuous (a \\<odot>\\<^bsub>Fun Zp\\<^esub> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous\n     (a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f)", "apply(rule is_Zp_continuousI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f \\<circ> s)", "using assms"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  a \\<in> carrier Zp\n\ngoal (2 subgoals):\n 1. a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f \\<circ> s)", "apply (simp add: assms function_smult_closed is_Zp_continuous_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f \\<circ> s)", "using ring_seq_smult_comp_assoc assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?f \\<in> carrier (function_ring (carrier Zp) Zp);\n   ?a \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                    ?f \\<circ>\n                    ?s =\n                    ?a \\<odot>\\<^bsub>Zp\\<^bsup>\\<omega>\\<^esup>\\<^esub>\n                    (?f \\<circ> ?s)\n  is_Zp_continuous f\n  a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow>\n       is_Zp_cauchy\n        (a \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> f \\<circ> s)", "by (simp add: is_Zp_cauchy_imp_closed is_Zp_continuous_def smult_is_Zp_cauchy)"], ["", "lemma id_Zp_is_Zp_continuous:\n\"is_Zp_continuous ring_id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous ring_id", "apply(rule is_Zp_continuousI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ring_id \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>s.\n       is_Zp_cauchy s \\<Longrightarrow> is_Zp_cauchy (ring_id \\<circ> s)", "by (auto simp add: is_Zp_cauchy_imp_closed ring_id_seq_comp)"], ["", "lemma nat_pow_is_Zp_continuous:\n  assumes \"is_Zp_continuous f\"\n  shows \"is_Zp_continuous (f[^]\\<^bsub>Fun Zp\\<^esub>(n::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)", "apply(induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_Zp_continuous (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> 0)\n 2. \\<And>n.\n       is_Zp_continuous\n        (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n         n) \\<Longrightarrow>\n       is_Zp_continuous\n        (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> Suc n)", "using constant_is_Zp_continuous function_one_is_constant"], ["proof (prove)\nusing this:\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  is_Zp_continuous (\\<cc>\\<^bsub>Zp\\<^esub> ?a)\n  \\<cc>\\<^bsub>Zp\\<^esub> \\<one> =\n  \\<one>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n\ngoal (2 subgoals):\n 1. is_Zp_continuous (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> 0)\n 2. \\<And>n.\n       is_Zp_continuous\n        (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n         n) \\<Longrightarrow>\n       is_Zp_continuous\n        (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> Suc n)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       is_Zp_continuous\n        (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n         n) \\<Longrightarrow>\n       is_Zp_continuous\n        (f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> Suc n)", "by (simp add: assms prod_of_cont_is_cont)"], ["", "lemma ring_id_pow_closed:\n\"(ring_id)[^]\\<^bsub>Fun Zp\\<^esub> (n::nat) \\<in> carrier (Fun Zp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n    \\<in> carrier (function_ring (carrier Zp) Zp)", "by (simp add: function_ring_is_monoid monoid.nat_pow_closed)"], ["", "lemma monomial_equation:\n  assumes \"c \\<in> carrier Zp\"\n  shows \"monomial c n = c \\<odot>\\<^bsub>Fun Zp\\<^esub> (ring_id)[^]\\<^bsub>Fun Zp\\<^esub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial c n =\n    c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n    ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n", "apply(rule function_ring_car_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. monomial c n \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n    ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 3. \\<And>a.\n       a \\<in> carrier Zp \\<Longrightarrow>\n       monomial c n a =\n       (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n        ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)\n        a", "apply (simp add: assms monomial_functions)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n    ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>a.\n       a \\<in> carrier Zp \\<Longrightarrow>\n       monomial c n a =\n       (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n        ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)\n        a", "using assms function_smult_closed[of c \"ring_id [^]\\<^bsub>Fun Zp\\<^esub> n\"] ring_id_pow_closed"], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp\n  \\<lbrakk>c \\<in> carrier Zp;\n   ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n   \\<in> carrier (function_ring (carrier Zp) Zp)\\<rbrakk>\n  \\<Longrightarrow> c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                    ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                    n\n                    \\<in> carrier (function_ring (carrier Zp) Zp)\n  ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> ?n\n  \\<in> carrier (function_ring (carrier Zp) Zp)\n\ngoal (2 subgoals):\n 1. c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n    ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n    \\<in> carrier (function_ring (carrier Zp) Zp)\n 2. \\<And>a.\n       a \\<in> carrier Zp \\<Longrightarrow>\n       monomial c n a =\n       (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n        ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)\n        a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> carrier Zp \\<Longrightarrow>\n       monomial c n a =\n       (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n        ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)\n        a", "unfolding monomial_function_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> carrier Zp \\<Longrightarrow>\n       (\\<lambda>x\\<in>carrier Zp. c \\<otimes> x [^] n) a =\n       (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n        ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)\n        a", "using assms function_smult_eval[of c \"(ring_id)[^]\\<^bsub>Fun Zp\\<^esub> (n::nat)\"] \n        function_nat_pow_eval[of ring_id _ n]"], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp\n  \\<lbrakk>c \\<in> carrier Zp;\n   ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n   \\<in> carrier (function_ring (carrier Zp) Zp);\n   ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                     ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                     n)\n                     ?b =\n                    c \\<otimes>\n                    (ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                     n)\n                     ?b\n  \\<lbrakk>ring_id \\<in> carrier (function_ring (carrier Zp) Zp);\n   ?s \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n                     n)\n                     ?s =\n                    ring_id ?s [^] n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> carrier Zp \\<Longrightarrow>\n       (\\<lambda>x\\<in>carrier Zp. c \\<otimes> x [^] n) a =\n       (c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n        ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n)\n        a", "by (simp add: ring_id_eval ring_id_pow_closed)"], ["", "lemma monomial_is_Zp_continuous:\n  assumes \"c \\<in> carrier Zp\"\n  shows \"is_Zp_continuous (monomial c n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_continuous (monomial c n)", "using monomial_equation[of c n] nat_pow_is_Zp_continuous"], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp \\<Longrightarrow>\n  monomial c n =\n  c \\<odot>\\<^bsub>function_ring (carrier Zp) Zp\\<^esub>\n  ring_id [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> n\n  is_Zp_continuous ?f \\<Longrightarrow>\n  is_Zp_continuous (?f [^]\\<^bsub>function_ring (carrier Zp) Zp\\<^esub> ?n)\n\ngoal (1 subgoal):\n 1. is_Zp_continuous (monomial c n)", "by (simp add: assms id_Zp_is_Zp_continuous smult_is_continuous)"], ["", "subsection\\<open>Composition by a Continuous Function Commutes with Taking Limits of Sequences\\<close>"], ["", "text \\<open>\n  Due to our choice of definition for continuity, a little bit of care is required to show that\n  taking the limit of a cauchy sequence commutes with composition by a continuous function.\n  For a sequence $(s_n)_{n \\in \\mathbb{N}}$ converging to a point $t$, we can consider the \n  alternating sequence $(s_0, t, s_1, t, s_2, t, \\dots)$ which is also cauchy. Clearly \n  composition with $f$ yields $(f(s_0), f(t), f(s_1), f(t), f(s_2), f(t), \\dots)$ from which\n  we can see that the limit must be $f(t)$.\n\\<close>"], ["", "definition alt_seq where\n\"alt_seq s = (\\<lambda>k. (if (even k) then (s k) else (res_lim s)))\""], ["", "lemma alt_seq_Zp_cauchy:\n  assumes \"is_Zp_cauchy s\"\n  shows \"is_Zp_cauchy (alt_seq s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy (alt_seq s)", "proof(rule is_Zp_cauchyI)"], ["proof (state)\ngoal (2 subgoals):\n 1. alt_seq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             alt_seq s n0 n = alt_seq s n1 n", "show \"(alt_seq s) \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alt_seq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "unfolding alt_seq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. if even k then s k else res_lim s)\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using assms is_Zp_cauchy_imp_closed"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  is_Zp_cauchy ?s \\<Longrightarrow>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. if even k then s k else res_lim s)\n    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by (simp add: closed_seqs_memE closed_seqs_memI res_lim_in_Zp)"], ["proof (state)\nthis:\n  alt_seq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             alt_seq s n0 n = alt_seq s n1 n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             alt_seq s n0 n = alt_seq s n1 n", "show \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> alt_seq s n0 n = alt_seq s n1 n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          alt_seq s n0 n = alt_seq s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          alt_seq s n0 n = alt_seq s n1 n", "obtain N where N_def: \" \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n =  s n1 n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n0 n1.\n           N < n0 \\<and> N < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms is_Zp_cauchy_imp_res_eventually_const_0\n            padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>n0 n1.\n          N < n0 \\<and> N < n1 \\<Longrightarrow>\n          ?s n0 ?n = ?s n1 ?n) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  padic_integers p\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n0 n1.\n           N < n0 \\<and> N < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          alt_seq s n0 n = alt_seq s n1 n", "have \"\\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> alt_seq s n0 n = alt_seq s n1 n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1.\n       N < n0 \\<and> N < n1 \\<longrightarrow>\n       alt_seq s n0 n = alt_seq s n1 n", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>N < n0; N < n1\\<rbrakk>\n       \\<Longrightarrow> alt_seq s n0 n = alt_seq s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>N < n0; N < n1\\<rbrakk>\n       \\<Longrightarrow> alt_seq s n0 n = alt_seq s n1 n", "fix n0 n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>N < n0; N < n1\\<rbrakk>\n       \\<Longrightarrow> alt_seq s n0 n = alt_seq s n1 n", "assume A: \"N < n0\" \"N < n1\""], ["proof (state)\nthis:\n  N < n0\n  N < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>N < n0; N < n1\\<rbrakk>\n       \\<Longrightarrow> alt_seq s n0 n = alt_seq s n1 n", "show \"alt_seq s n0 n = alt_seq s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alt_seq s n0 n = alt_seq s n1 n", "using N_def"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. alt_seq s n0 n = alt_seq s n1 n", "unfolding alt_seq_def"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. (if even n0 then s n0 else res_lim s) n =\n    (if even n1 then s n1 else res_lim s) n", "by (smt A(1) A(2) assms lessI max_less_iff_conj \n            res_lim_Zp_cauchy padic_integers_axioms)"], ["proof (state)\nthis:\n  alt_seq s n0 n = alt_seq s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1.\n     N < n0 \\<and> N < n1 \\<longrightarrow> alt_seq s n0 n = alt_seq s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          alt_seq s n0 n = alt_seq s n1 n", "then"], ["proof (chain)\npicking this:\n  \\<forall>n0 n1.\n     N < n0 \\<and> N < n1 \\<longrightarrow> alt_seq s n0 n = alt_seq s n1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1.\n     N < n0 \\<and> N < n1 \\<longrightarrow> alt_seq s n0 n = alt_seq s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow>\n          alt_seq s n0 n = alt_seq s n1 n", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        alt_seq s n0 n = alt_seq s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow>\n        alt_seq s n0 n = alt_seq s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alt_seq_limit:\n  assumes \"is_Zp_cauchy s\"\n  shows \"res_lim(alt_seq s) = res_lim s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim (alt_seq s) = res_lim s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim (alt_seq s) = res_lim s", "have \"\\<And>k. res_lim(alt_seq s) k = res_lim s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "obtain N where N_def: \"\\<forall> m. m> N \\<longrightarrow>  s m k = res_lim s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m>N. s m k = res_lim s k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms res_lim_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m>N. s m k = res_lim s k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m>N. s m k = res_lim s k\n\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "obtain N' where N'_def: \"\\<forall> m. m> N' \\<longrightarrow>  (alt_seq s) m k = res_lim (alt_seq s) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N'.\n        \\<forall>m>N'.\n           alt_seq s m k = res_lim (alt_seq s) k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms res_lim_Zp_cauchy \n            alt_seq_Zp_cauchy"], ["proof (prove)\nusing this:\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_Zp_cauchy ?s \\<Longrightarrow> is_Zp_cauchy (alt_seq ?s)\n\ngoal (1 subgoal):\n 1. (\\<And>N'.\n        \\<forall>m>N'.\n           alt_seq s m k = res_lim (alt_seq s) k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m>N'. alt_seq s m k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "have \"\\<And>m. m > (max N N') \\<Longrightarrow> s m k = res_lim (alt_seq s) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "assume A0: \"m > (max N N')\""], ["proof (state)\nthis:\n  max N N' < m\n\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "have A1: \"s m k = res_lim s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m k = res_lim s k", "using A0 N_def"], ["proof (prove)\nusing this:\n  max N N' < m\n  \\<forall>m>N. s m k = res_lim s k\n\ngoal (1 subgoal):\n 1. s m k = res_lim s k", "by simp"], ["proof (state)\nthis:\n  s m k = res_lim s k\n\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "have A2: \"(alt_seq s) m k = res_lim (alt_seq s) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alt_seq s m k = res_lim (alt_seq s) k", "using A0 N'_def"], ["proof (prove)\nusing this:\n  max N N' < m\n  \\<forall>m>N'. alt_seq s m k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. alt_seq s m k = res_lim (alt_seq s) k", "by simp"], ["proof (state)\nthis:\n  alt_seq s m k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "have A3: \"(alt_seq s) m k = res_lim s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alt_seq s m k = res_lim s k", "using alt_seq_def A1 A2"], ["proof (prove)\nusing this:\n  alt_seq ?s = (\\<lambda>k. if even k then ?s k else res_lim ?s)\n  s m k = res_lim s k\n  alt_seq s m k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. alt_seq s m k = res_lim s k", "by presburger"], ["proof (state)\nthis:\n  alt_seq s m k = res_lim s k\n\ngoal (1 subgoal):\n 1. \\<And>m. max N N' < m \\<Longrightarrow> s m k = res_lim (alt_seq s) k", "show \"s m k = res_lim (alt_seq s) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m k = res_lim (alt_seq s) k", "using A1 A2 A3"], ["proof (prove)\nusing this:\n  s m k = res_lim s k\n  alt_seq s m k = res_lim (alt_seq s) k\n  alt_seq s m k = res_lim s k\n\ngoal (1 subgoal):\n 1. s m k = res_lim (alt_seq s) k", "by auto"], ["proof (state)\nthis:\n  s m k = res_lim (alt_seq s) k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  max N N' < ?m2 \\<Longrightarrow> s ?m2 k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "then"], ["proof (chain)\npicking this:\n  max N N' < ?m2 \\<Longrightarrow> s ?m2 k = res_lim (alt_seq s) k", "have P:\"\\<And>m. m > (max N N') \\<Longrightarrow> (res_lim s k) = res_lim (alt_seq s) k\""], ["proof (prove)\nusing this:\n  max N N' < ?m2 \\<Longrightarrow> s ?m2 k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       max N N' < m \\<Longrightarrow> res_lim s k = res_lim (alt_seq s) k", "using N_def"], ["proof (prove)\nusing this:\n  max N N' < ?m2 \\<Longrightarrow> s ?m2 k = res_lim (alt_seq s) k\n  \\<forall>m>N. s m k = res_lim s k\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       max N N' < m \\<Longrightarrow> res_lim s k = res_lim (alt_seq s) k", "by auto"], ["proof (state)\nthis:\n  max N N' < ?m2 \\<Longrightarrow> res_lim s k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (alt_seq s) k = res_lim s k", "show \"res_lim(alt_seq s) k = res_lim s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim (alt_seq s) k = res_lim s k", "using P[of \"Suc (max N N')\"]"], ["proof (prove)\nusing this:\n  max N N' < Suc (max N N') \\<Longrightarrow>\n  res_lim s k = res_lim (alt_seq s) k\n\ngoal (1 subgoal):\n 1. res_lim (alt_seq s) k = res_lim s k", "by auto"], ["proof (state)\nthis:\n  res_lim (alt_seq s) k = res_lim s k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res_lim (alt_seq s) ?k2 = res_lim s ?k2\n\ngoal (1 subgoal):\n 1. res_lim (alt_seq s) = res_lim s", "then"], ["proof (chain)\npicking this:\n  res_lim (alt_seq s) ?k2 = res_lim s ?k2", "show ?thesis"], ["proof (prove)\nusing this:\n  res_lim (alt_seq s) ?k2 = res_lim s ?k2\n\ngoal (1 subgoal):\n 1. res_lim (alt_seq s) = res_lim s", "by (simp add: ext)"], ["proof (state)\nthis:\n  res_lim (alt_seq s) = res_lim s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma res_lim_pushforward: \n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_cauchy s\"\n  assumes \"t = alt_seq s\"\n  shows \"res_lim (f \\<circ> t) = f (res_lim t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) = f (res_lim t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) = f (res_lim t)", "have 0: \"Zp_converges_to (f \\<circ> t) (res_lim (f \\<circ> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> t) (res_lim (f \\<circ> t))", "using assms alt_seq_Zp_cauchy is_Zp_cauchy_imp_has_limit \n          is_Zp_continuous_def"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n  is_Zp_cauchy ?s \\<Longrightarrow> is_Zp_cauchy (alt_seq ?s)\n  \\<lbrakk>is_Zp_cauchy ?s; ?a = res_lim ?s\\<rbrakk>\n  \\<Longrightarrow> Zp_converges_to ?s ?a\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> t) (res_lim (f \\<circ> t))", "by blast"], ["proof (state)\nthis:\n  Zp_converges_to (f \\<circ> t) (res_lim (f \\<circ> t))\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) = f (res_lim t)", "have  \"\\<And>k. res_lim (f \\<circ> t) k = f (res_lim t) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (f \\<circ> t) k = f (res_lim t) k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (f \\<circ> t) k = f (res_lim t) k", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. res_lim (f \\<circ> t) k = f (res_lim t) k", "show \"res_lim (f \\<circ> t) k = f (res_lim t) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "obtain N where N_def: \"\\<And>m. m> N \\<Longrightarrow> (f \\<circ> t) m k = (res_lim (f \\<circ> t)) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>m.\n            N < m \\<Longrightarrow>\n            (f \\<circ> t) m k = res_lim (f \\<circ> t) k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 0"], ["proof (prove)\nusing this:\n  Zp_converges_to (f \\<circ> t) (res_lim (f \\<circ> t))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>m.\n            N < m \\<Longrightarrow>\n            (f \\<circ> t) m k = res_lim (f \\<circ> t) k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson convergent_imp_Zp_cauchy Zp_converges_to_def res_lim_Zp_cauchy)"], ["proof (state)\nthis:\n  N < ?m2 \\<Longrightarrow> (f \\<circ> t) ?m2 k = res_lim (f \\<circ> t) k\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "obtain M where M_def: \"M = 2*(Suc N) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M. M = 2 * Suc N + 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  M = 2 * Suc N + 1\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "have 0: \"t M = res_lim s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t M = res_lim s", "using assms"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n\ngoal (1 subgoal):\n 1. t M = res_lim s", "unfolding alt_seq_def"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = (\\<lambda>k. if even k then s k else res_lim s)\n\ngoal (1 subgoal):\n 1. t M = res_lim s", "by (simp add: M_def)"], ["proof (state)\nthis:\n  t M = res_lim s\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "have 1: \"(f \\<circ> t) M k = (res_lim (f \\<circ> t)) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = res_lim (f \\<circ> t) k", "using N_def M_def"], ["proof (prove)\nusing this:\n  N < ?m2 \\<Longrightarrow> (f \\<circ> t) ?m2 k = res_lim (f \\<circ> t) k\n  M = 2 * Suc N + 1\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = res_lim (f \\<circ> t) k", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = res_lim (f \\<circ> t) k\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "have 2: \"(f \\<circ> t) M k = f (t M) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = f (t M) k", "by simp"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = f (t M) k\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "have 3: \"(f \\<circ> t) M k = f (res_lim s) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = f (res_lim s) k", "using 0 2"], ["proof (prove)\nusing this:\n  t M = res_lim s\n  (f \\<circ> t) M k = f (t M) k\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = f (res_lim s) k", "by simp"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = f (res_lim s) k\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "have 4: \"(f \\<circ> t) M k = f (res_lim t) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = f (res_lim t) k", "using 3 assms alt_seq_limit[of s]"], ["proof (prove)\nusing this:\n  (f \\<circ> t) M k = f (res_lim s) k\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n  is_Zp_cauchy s \\<Longrightarrow> res_lim (alt_seq s) = res_lim s\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = f (res_lim t) k", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = f (res_lim t) k\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "using 4 1"], ["proof (prove)\nusing this:\n  (f \\<circ> t) M k = f (res_lim t) k\n  (f \\<circ> t) M k = res_lim (f \\<circ> t) k\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) k = f (res_lim t) k", "by auto"], ["proof (state)\nthis:\n  res_lim (f \\<circ> t) k = f (res_lim t) k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res_lim (f \\<circ> t) k = f (res_lim t) k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res_lim (f \\<circ> t) ?k2 = f (res_lim t) ?k2\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) = f (res_lim t)", "then"], ["proof (chain)\npicking this:\n  res_lim (f \\<circ> t) ?k2 = f (res_lim t) ?k2", "show ?thesis"], ["proof (prove)\nusing this:\n  res_lim (f \\<circ> t) ?k2 = f (res_lim t) ?k2\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> t) = f (res_lim t)", "by(simp add: ext)"], ["proof (state)\nthis:\n  res_lim (f \\<circ> t) = f (res_lim t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma res_lim_pushforward': \n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_cauchy s\"\n  assumes \"t = alt_seq s\"\n  shows \"res_lim (f \\<circ> s) = res_lim (f \\<circ> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "obtain a where a_def: \"a = res_lim (f \\<circ> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a = res_lim (f \\<circ> s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  a = res_lim (f \\<circ> s)\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "obtain b where b_def: \"b = res_lim (f \\<circ> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        b = res_lim (f \\<circ> t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  b = res_lim (f \\<circ> t)\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "have \"\\<And>k. a k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "obtain Na where Na_def: \"\\<And>m. m > Na \\<Longrightarrow> (f \\<circ> s) m k = a k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Na.\n        (\\<And>m.\n            Na < m \\<Longrightarrow>\n            (f \\<circ> s) m k = a k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a_def assms  is_Zp_continuous_def \n            padic_integers_axioms res_lim_Zp_cauchy"], ["proof (prove)\nusing this:\n  a = res_lim (f \\<circ> s)\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  padic_integers p\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>Na.\n        (\\<And>m.\n            Na < m \\<Longrightarrow>\n            (f \\<circ> s) m k = a k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Na < ?m2 \\<Longrightarrow> (f \\<circ> s) ?m2 k = a k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "obtain Nb where Nb_def: \"\\<And>m. m > Nb \\<Longrightarrow> (f \\<circ> t) m k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Nb.\n        (\\<And>m.\n            Nb < m \\<Longrightarrow>\n            (f \\<circ> t) m k = b k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using b_def assms is_Zp_continuous_def \n            padic_integers_axioms res_lim_Zp_cauchy\n            alt_seq_Zp_cauchy"], ["proof (prove)\nusing this:\n  b = res_lim (f \\<circ> t)\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  padic_integers p\n  \\<lbrakk>is_Zp_cauchy ?s;\n   \\<And>N.\n      (\\<And>m.\n          N < m \\<longrightarrow> ?s m ?k = res_lim ?s ?k) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_Zp_cauchy ?s \\<Longrightarrow> is_Zp_cauchy (alt_seq ?s)\n\ngoal (1 subgoal):\n 1. (\\<And>Nb.\n        (\\<And>m.\n            Nb < m \\<Longrightarrow>\n            (f \\<circ> t) m k = b k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Nb < ?m2 \\<Longrightarrow> (f \\<circ> t) ?m2 k = b k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "obtain M where M_def: \"M = 2*(max Na Nb) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M.\n        M = 2 * max Na Nb + 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  M = 2 * max Na Nb + 1\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M0: \"odd M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd M", "by (simp add: M_def)"], ["proof (state)\nthis:\n  odd M\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M1: \"M > Na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Na < M", "using M_def"], ["proof (prove)\nusing this:\n  M = 2 * max Na Nb + 1\n\ngoal (1 subgoal):\n 1. Na < M", "by auto"], ["proof (state)\nthis:\n  Na < M\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M2: \"M > Nb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nb < M", "using M_def"], ["proof (prove)\nusing this:\n  M = 2 * max Na Nb + 1\n\ngoal (1 subgoal):\n 1. Nb < M", "by auto"], ["proof (state)\nthis:\n  Nb < M\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M3: \"t M = res_lim s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t M = res_lim s", "using assms alt_seq_def M0"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n  alt_seq ?s = (\\<lambda>k. if even k then ?s k else res_lim ?s)\n  odd M\n\ngoal (1 subgoal):\n 1. t M = res_lim s", "by auto"], ["proof (state)\nthis:\n  t M = res_lim s\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M4: \"((f \\<circ> t) M) = f (res_lim s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M = f (res_lim s)", "using M3"], ["proof (prove)\nusing this:\n  t M = res_lim s\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M = f (res_lim s)", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> t) M = f (res_lim s)\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M5: \"((f \\<circ> t) M) k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = b k", "using M2 Nb_def"], ["proof (prove)\nusing this:\n  Nb < M\n  Nb < ?m2 \\<Longrightarrow> (f \\<circ> t) ?m2 k = b k\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = b k", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = b k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M6: \"f (res_lim s) = f (res_lim t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (res_lim s) = f (res_lim t)", "using assms alt_seq_limit[of s]"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n  is_Zp_cauchy s \\<Longrightarrow> res_lim (alt_seq s) = res_lim s\n\ngoal (1 subgoal):\n 1. f (res_lim s) = f (res_lim t)", "by auto"], ["proof (state)\nthis:\n  f (res_lim s) = f (res_lim t)\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M7: \"f (res_lim t) k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (res_lim t) k = b k", "using M4 M5 M6"], ["proof (prove)\nusing this:\n  (f \\<circ> t) M = f (res_lim s)\n  (f \\<circ> t) M k = b k\n  f (res_lim s) = f (res_lim t)\n\ngoal (1 subgoal):\n 1. f (res_lim t) k = b k", "by auto"], ["proof (state)\nthis:\n  f (res_lim t) k = b k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M8: \"(f \\<circ> s) M k = (f \\<circ> s) (Suc M) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> s) M k = (f \\<circ> s) (Suc M) k", "using M1 Na_def"], ["proof (prove)\nusing this:\n  Na < M\n  Na < ?m2 \\<Longrightarrow> (f \\<circ> s) ?m2 k = a k\n\ngoal (1 subgoal):\n 1. (f \\<circ> s) M k = (f \\<circ> s) (Suc M) k", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> s) M k = (f \\<circ> s) (Suc M) k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M9: \"(f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)", "using assms"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = alt_seq s\n\ngoal (1 subgoal):\n 1. (f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)", "unfolding alt_seq_def"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = (\\<lambda>k. if even k then s k else res_lim s)\n\ngoal (1 subgoal):\n 1. (f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)", "using M_def"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  t = (\\<lambda>k. if even k then s k else res_lim s)\n  M = 2 * max Na Nb + 1\n\ngoal (1 subgoal):\n 1. (f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M10: \"(f \\<circ> t) M k = (f \\<circ> t) (Suc M) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = (f \\<circ> t) (Suc M) k", "using M2 Nb_def"], ["proof (prove)\nusing this:\n  Nb < M\n  Nb < ?m2 \\<Longrightarrow> (f \\<circ> t) ?m2 k = b k\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = (f \\<circ> t) (Suc M) k", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = (f \\<circ> t) (Suc M) k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "have M11: \"(f \\<circ> t) M k = (f \\<circ> s) M k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = (f \\<circ> s) M k", "using M10 M8 M9"], ["proof (prove)\nusing this:\n  (f \\<circ> t) M k = (f \\<circ> t) (Suc M) k\n  (f \\<circ> s) M k = (f \\<circ> s) (Suc M) k\n  (f \\<circ> s) (Suc M) = (f \\<circ> t) (Suc M)\n\ngoal (1 subgoal):\n 1. (f \\<circ> t) M k = (f \\<circ> s) M k", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> t) M k = (f \\<circ> s) M k\n\ngoal (1 subgoal):\n 1. \\<And>k. a k = b k", "show \"a k = b k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = b k", "using M1 M11 M5 Na_def"], ["proof (prove)\nusing this:\n  Na < M\n  (f \\<circ> t) M k = (f \\<circ> s) M k\n  (f \\<circ> t) M k = b k\n  Na < ?m2 \\<Longrightarrow> (f \\<circ> s) ?m2 k = a k\n\ngoal (1 subgoal):\n 1. a k = b k", "by auto"], ["proof (state)\nthis:\n  a k = b k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a ?k2 = b ?k2\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "then"], ["proof (chain)\npicking this:\n  a ?k2 = b ?k2", "show ?thesis"], ["proof (prove)\nusing this:\n  a ?k2 = b ?k2\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "using a_def b_def ext[of a b]"], ["proof (prove)\nusing this:\n  a ?k2 = b ?k2\n  a = res_lim (f \\<circ> s)\n  b = res_lim (f \\<circ> t)\n  (\\<And>x. a x = b x) \\<Longrightarrow> a = b\n\ngoal (1 subgoal):\n 1. res_lim (f \\<circ> s) = res_lim (f \\<circ> t)", "by auto"], ["proof (state)\nthis:\n  res_lim (f \\<circ> s) = res_lim (f \\<circ> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_limit:\n  assumes \"is_Zp_continuous f\"\n  assumes \"is_Zp_cauchy s\"\n  shows \"Zp_converges_to (f \\<circ> s) (f (res_lim s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "obtain t where t_def: \"t = alt_seq s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t. t = alt_seq s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  t = alt_seq s\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "have 0: \"Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> s))", "using assms(1) assms(2) is_Zp_continuous_def \n      is_Zp_cauchy_imp_has_limit padic_integers_axioms"], ["proof (prove)\nusing this:\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  \\<lbrakk>is_Zp_cauchy ?s; ?a = res_lim ?s\\<rbrakk>\n  \\<Longrightarrow> Zp_converges_to ?s ?a\n  padic_integers p\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> s))", "by blast"], ["proof (state)\nthis:\n  Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> s))\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "have 1: \"Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> t))", "using \"0\" assms(1) assms(2) res_lim_pushforward' t_def"], ["proof (prove)\nusing this:\n  Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> s))\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_continuous ?f; is_Zp_cauchy ?s; ?t = alt_seq ?s\\<rbrakk>\n  \\<Longrightarrow> res_lim (?f \\<circ> ?s) = res_lim (?f \\<circ> ?t)\n  t = alt_seq s\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> t))", "by auto"], ["proof (state)\nthis:\n  Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> t))\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "have 2: \"Zp_converges_to (f \\<circ> s) (f (res_lim t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim t))", "using \"1\" assms(1) assms(2) res_lim_pushforward padic_integers_axioms t_def"], ["proof (prove)\nusing this:\n  Zp_converges_to (f \\<circ> s) (res_lim (f \\<circ> t))\n  is_Zp_continuous f\n  is_Zp_cauchy s\n  \\<lbrakk>is_Zp_continuous ?f; is_Zp_cauchy ?s; ?t = alt_seq ?s\\<rbrakk>\n  \\<Longrightarrow> res_lim (?f \\<circ> ?t) = ?f (res_lim ?t)\n  padic_integers p\n  t = alt_seq s\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim t))", "by auto"], ["proof (state)\nthis:\n  Zp_converges_to (f \\<circ> s) (f (res_lim t))\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "then"], ["proof (chain)\npicking this:\n  Zp_converges_to (f \\<circ> s) (f (res_lim t))", "show  \"Zp_converges_to (f \\<circ> s) (f (res_lim s))\""], ["proof (prove)\nusing this:\n  Zp_converges_to (f \\<circ> s) (f (res_lim t))\n\ngoal (1 subgoal):\n 1. Zp_converges_to (f \\<circ> s) (f (res_lim s))", "by (simp add: alt_seq_limit assms(2) t_def)"], ["proof (state)\nthis:\n  Zp_converges_to (f \\<circ> s) (f (res_lim s))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}