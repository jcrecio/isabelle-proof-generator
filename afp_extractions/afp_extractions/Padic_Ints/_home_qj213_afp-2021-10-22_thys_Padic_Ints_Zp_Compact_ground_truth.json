{"file_name": "/home/qj213/afp-2021-10-22/thys/Padic_Ints/Zp_Compact.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Padic_Ints", "problem_names": ["lemma res_ring_car: \n\"carrier (Zp_res_ring k) = {0..p ^ k - 1}\"", "lemma is_increasingI:\n  assumes \"\\<And> n m::nat. n>m \\<Longrightarrow> (f n) > (f m)\"\n  shows \"is_increasing f\"", "lemma is_increasingE: \n  assumes \"is_increasing f\"\n  assumes \" n> m\"\n  shows \"f n > f m\"", "lemma is_subseqI:\n  assumes \"is_increasing f\"\n  assumes \"s' = take_subseq s f\"\n  shows \"is_subseq_of s s'\"", "lemma is_subseq_ind:\n  assumes \"is_subseq_of s s'\"\n  shows \"\\<exists> l. s' k = s l\"", "lemma is_subseq_closed: \n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"is_subseq_of s s'\"\n  shows \"s' \\<in> closed_seqs Zp\"", "lemma seq_filter_pre_increasing:\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"seq_filter s P n < seq_filter s P (Suc n)\"", "lemma seq_filter_increasing:\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"is_increasing (seq_filter s P)\"", "lemma filter_exist:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"\\<And>m. n\\<le>m \\<Longrightarrow> P (s (seq_filter s P n))\"", "lemma fil_seq_pred:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"s' = filtered_seq s P\"\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"\\<And>m::nat. P (s' m)\"", "lemma maps_to_nE:\n  assumes \"maps_to_n n f\"\n  shows \"(f k) \\<in> {0..n}\"", "lemma maps_to_nI:\n  assumes \"\\<And>n. f n \\<in>{0 .. k}\"\n  shows \"maps_to_n k f\"", "lemma maps_to_n_drop_res:\n  assumes \"maps_to_n (Suc n) f\"\n  shows \"maps_to_n n (drop_res (Suc n) f)\"", "lemma drop_res_eq_f:\n  assumes \"maps_to_n (Suc n) f\"\n  assumes \"\\<not> (\\<forall>m. \\<exists>n. n>m \\<and> (f n = (Suc k)))\"\n  shows \"\\<exists>N. \\<forall>n. n>N \\<longrightarrow> f n = drop_res (Suc k) f n\"", "lemma maps_to_n_infinite_seq:\n  shows \"\\<And>f. maps_to_n (k::nat) f \\<Longrightarrow> \\<exists>l::int. \\<forall>m. \\<exists>n. n>m \\<and> (f n = l)\"", "lemma int_nat_p_pow_minus:\n\"int (nat (p ^ k - 1)) = p ^ k - 1\"", "lemma maps_to_n_infinite_seq_res_ring:\n\"\\<And>f. f \\<in> (UNIV::nat set) \\<rightarrow> carrier (Zp_res_ring k) \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n. n>m \\<and> (f n = l)\"", "lemma seq_maps_to_n:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(index_to_residue s k) \\<in> UNIV \\<rightarrow> carrier (Zp_res_ring k)\"", "lemma seq_pr_inc:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>l. \\<forall>m. \\<exists>n > m. (kth_res_equals k l) (s n)\"", "lemma kth_res_equals_subseq:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>n. is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and> (\\<forall>m. (filtered_seq s (kth_res_equals k n)) m k = n)\"", "lemma const_res_subseq_prop_0: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>l. (((const_res_subseq k s) = filtered_seq s (kth_res_equals k l)) \\<and> (is_subseq_of s (const_res_subseq k s)) \\<and> (\\<forall>m.(const_res_subseq k s) m k = l))\"", "lemma const_res_subseq_prop_1: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(\\<forall>m.(const_res_subseq k s) m k = (const_res k s) )\"", "lemma const_res_subseq: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s (const_res_subseq k s)\"", "lemma const_res_range:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"k > 0\"\n  shows \"const_res k s \\<in> carrier (Zp_res_ring k)\"", "lemma res_seq_res:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(res_seq s k) \\<in> closed_seqs Zp\"", "lemma res_seq_res':\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<And>n. res_seq s (Suc k) n (Suc k) = const_res (Suc k) (res_seq s k)\"", "lemma res_seq_subseq: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of (res_seq s k) (res_seq s (Suc k))\"", "lemma is_increasing_id:\n\"is_increasing (\\<lambda> n. n)\"", "lemma is_increasing_comp:\n  assumes \"is_increasing f\"\n  assumes \"is_increasing g\"\n  shows \"is_increasing (f \\<circ> g)\"", "lemma is_increasing_imp_geq_id[simp]:\n  assumes  \"is_increasing f\"\n  shows \"f n \\<ge>n\"", "lemma is_subseq_ofE:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"is_subseq_of s s'\"\n  shows \"\\<exists>k. k \\<ge> n \\<and> s' n = s k\"", "lemma is_subseq_of_id:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s s\"", "lemma is_subseq_of_trans:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"is_subseq_of s s'\"\n  assumes \"is_subseq_of s' s''\"\n  shows \"is_subseq_of s s''\"", "lemma res_seq_subseq':\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s (res_seq s k)\"", "lemma res_seq_subseq'':\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of (res_seq s n) (res_seq s (n + k))\"", "lemma res_seq_res_1:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"res_seq s (Suc k) 0 k = res_seq s k 0 k\"", "lemma acc_point_cres:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(acc_point s (Suc k)) = (const_res (Suc k) (res_seq s k))\"", "lemma acc_point_res:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\"", "lemma acc_point_closed:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"acc_point s \\<in>  carrier Zp\"", "lemma increasing_conv_induction_0_pre:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  shows \"\\<exists>k > convergent_subseq_fun s a n. (s k (Suc n)) = a (Suc n)\"", "lemma increasing_conv_subseq_fun_0:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"\\<exists>s'. s' = convergent_subseq s\"\n  assumes \"a = acc_point s\"\n  shows \"convergent_subseq_fun s a (Suc n) > convergent_subseq_fun s a n\"", "lemma increasing_conv_subseq_fun:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  assumes \"\\<exists>s'. s' = convergent_subseq s\"\n  shows \"is_increasing (convergent_subseq_fun s a)\"", "lemma convergent_subseq_is_subseq:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s (convergent_subseq s)\"", "lemma is_closed_seq_conv_subseq:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(convergent_subseq s) \\<in> closed_seqs Zp\"", "lemma convergent_subseq_res:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  shows \"convergent_subseq s l l = residue (p ^ l) (acc_point s l)\"", "lemma convergent_subseq_res':\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"n > l\"\n  shows \"convergent_subseq s n l = convergent_subseq s l l \"", "lemma convergent_subsequence_is_convergent:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  shows \"Zp_converges_to (convergent_subseq s) (acc_point s)\"", "theorem Zp_is_compact:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>s'. is_subseq_of s s' \\<and> (Zp_converges_to s' (acc_point s))\""], "translations": [["", "lemma res_ring_car: \n\"carrier (Zp_res_ring k) = {0..p ^ k - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (residue_ring (p ^ k)) = {0..p ^ k - 1}", "unfolding residue_ring_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier\n     \\<lparr>carrier = {0..p ^ k - 1},\n        monoid.mult = \\<lambda>x y. x * y mod p ^ k, one = 1, zero = 0,\n        add = \\<lambda>x y. (x + y) mod p ^ k\\<rparr> =\n    {0..p ^ k - 1}", "by simp"], ["", "text\\<open>The refinement of a sequence by a function $nat \\Rightarrow nat$\\<close>"], ["", "definition take_subseq :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> (nat \\<Rightarrow> nat) \\<Rightarrow> (nat \\<Rightarrow> 'a)\" where\n\"take_subseq s f = (\\<lambda>k. s (f k))\""], ["", "text\\<open>Predicate for increasing function on the natural numbers\\<close>"], ["", "definition is_increasing :: \"(nat \\<Rightarrow> nat) \\<Rightarrow> bool\" where\n\"is_increasing f = (\\<forall> n m::nat. n>m \\<longrightarrow> (f n) > (f m))\""], ["", "text\\<open>Elimination and introduction lemma for increasing functions\\<close>"], ["", "lemma is_increasingI:\n  assumes \"\\<And> n m::nat. n>m \\<Longrightarrow> (f n) > (f m)\"\n  shows \"is_increasing f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_increasing f", "unfolding is_increasing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n m. m < n \\<longrightarrow> f m < f n", "using assms"], ["proof (prove)\nusing this:\n  ?m2 < ?n2 \\<Longrightarrow> f ?m2 < f ?n2\n\ngoal (1 subgoal):\n 1. \\<forall>n m. m < n \\<longrightarrow> f m < f n", "by blast"], ["", "lemma is_increasingE: \n  assumes \"is_increasing f\"\n  assumes \" n> m\"\n  shows \"f n > f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f m < f n", "using assms"], ["proof (prove)\nusing this:\n  is_increasing f\n  m < n\n\ngoal (1 subgoal):\n 1. f m < f n", "unfolding is_increasing_def"], ["proof (prove)\nusing this:\n  \\<forall>n m. m < n \\<longrightarrow> f m < f n\n  m < n\n\ngoal (1 subgoal):\n 1. f m < f n", "by blast"], ["", "text\\<open>The subsequence predicate\\<close>"], ["", "definition is_subseq_of :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> (nat \\<Rightarrow> 'a) \\<Rightarrow> bool\" where\n\"is_subseq_of s s' = (\\<exists>(f::nat \\<Rightarrow> nat). is_increasing f \\<and> s' = take_subseq s f)\""], ["", "text\\<open>Subsequence introduction lemma\\<close>"], ["", "lemma is_subseqI:\n  assumes \"is_increasing f\"\n  assumes \"s' = take_subseq s f\"\n  shows \"is_subseq_of s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s s'", "using assms"], ["proof (prove)\nusing this:\n  is_increasing f\n  s' = take_subseq s f\n\ngoal (1 subgoal):\n 1. is_subseq_of s s'", "unfolding is_subseq_of_def"], ["proof (prove)\nusing this:\n  is_increasing f\n  s' = take_subseq s f\n\ngoal (1 subgoal):\n 1. \\<exists>f. is_increasing f \\<and> s' = take_subseq s f", "by auto"], ["", "lemma is_subseq_ind:\n  assumes \"is_subseq_of s s'\"\n  shows \"\\<exists> l. s' k = s l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. s' k = s l", "using assms"], ["proof (prove)\nusing this:\n  is_subseq_of s s'\n\ngoal (1 subgoal):\n 1. \\<exists>l. s' k = s l", "unfolding is_subseq_of_def  take_subseq_def"], ["proof (prove)\nusing this:\n  \\<exists>f. is_increasing f \\<and> s' = (\\<lambda>k. s (f k))\n\ngoal (1 subgoal):\n 1. \\<exists>l. s' k = s l", "by blast"], ["", "lemma is_subseq_closed: \n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"is_subseq_of s s'\"\n  shows \"s' \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "apply(rule closed_seqs_memI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. s' k \\<in> carrier Zp", "using is_subseq_ind assms closed_seqs_memE"], ["proof (prove)\nusing this:\n  is_subseq_of ?s ?s' \\<Longrightarrow> \\<exists>l. ?s' ?k = ?s l\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  is_subseq_of s s'\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. \\<And>k. s' k \\<in> carrier Zp", "by metis"], ["", "text\\<open>Given a sequence and a predicate, returns the function from nat to nat which represents\nthe increasing sequences of indices n on which P (s n) holds.\\<close>"], ["", "primrec seq_filter :: \"(nat \\<Rightarrow>'a) \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> nat \\<Rightarrow> nat\" where\n\"seq_filter s P (0::nat) = (LEAST k::nat. P (s k))\"|\n\"seq_filter s P (Suc n) = (LEAST k:: nat. (P (s k)) \\<and> k > (seq_filter s P n))\""], ["", "lemma seq_filter_pre_increasing:\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"seq_filter s P n < seq_filter s P (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq_filter s P n < seq_filter s P (Suc n)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. seq_filter s P n < (LEAST k. P (s k) \\<and> seq_filter s P n < k)", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n 2. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n 2. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "have \"\\<exists>k. P (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. P (s k)", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>n. \\<exists>m>n. P (s m)\n\ngoal (1 subgoal):\n 1. \\<exists>k. P (s k)", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. P (s k)\n\ngoal (2 subgoals):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n 2. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. P (s k)", "have \"\\<exists>k::nat. (LEAST k::nat. (P (s k))) \\<ge> 0\""], ["proof (prove)\nusing this:\n  \\<exists>k. P (s k)\n\ngoal (1 subgoal):\n 1. \\<exists>k. 0 \\<le> (LEAST k. P (s k))", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. 0 \\<le> (LEAST k. P (s k))\n\ngoal (2 subgoals):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n 2. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "obtain k where \"(LEAST k::nat. (P (s k))) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (LEAST k. P (s k)) = k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (LEAST k. P (s k)) = k\n\ngoal (2 subgoals):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n 2. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "have \"\\<exists>l. l = (LEAST l::nat. (P (s l) \\<and> l > k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. l = (LEAST l. P (s l) \\<and> k < l)", "by simp"], ["proof (state)\nthis:\n  \\<exists>l. l = (LEAST l. P (s l) \\<and> k < l)\n\ngoal (2 subgoals):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n 2. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>l. l = (LEAST l. P (s l) \\<and> k < l)\n\ngoal (1 subgoal):\n 1. seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)", "by (metis (no_types, lifting) LeastI assms)"], ["proof (state)\nthis:\n  seq_filter s P 0 < (LEAST k. P (s k) \\<and> seq_filter s P 0 < k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "case (Suc n)"], ["proof (state)\nthis:\n  seq_filter s P n < (LEAST k. P (s k) \\<and> seq_filter s P n < k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       seq_filter s P n\n       < (LEAST k. P (s k) \\<and> seq_filter s P n < k) \\<Longrightarrow>\n       seq_filter s P (Suc n)\n       < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "then"], ["proof (chain)\npicking this:\n  seq_filter s P n < (LEAST k. P (s k) \\<and> seq_filter s P n < k)", "show ?case"], ["proof (prove)\nusing this:\n  seq_filter s P n < (LEAST k. P (s k) \\<and> seq_filter s P n < k)\n\ngoal (1 subgoal):\n 1. seq_filter s P (Suc n)\n    < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)", "by (metis (no_types, lifting) LeastI assms)"], ["proof (state)\nthis:\n  seq_filter s P (Suc n)\n  < (LEAST k. P (s k) \\<and> seq_filter s P (Suc n) < k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_filter_increasing:\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"is_increasing (seq_filter s P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_increasing (seq_filter s P)", "by (metis assms seq_filter_pre_increasing is_increasingI lift_Suc_mono_less)"], ["", "definition filtered_seq :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> (nat \\<Rightarrow> 'a)\" where\n\"filtered_seq s P = take_subseq s (seq_filter s P)\""], ["", "lemma filter_exist:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"\\<And>m. n\\<le>m \\<Longrightarrow> P (s (seq_filter s P n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. n \\<le> m \\<Longrightarrow> P (s (seq_filter s P n))", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m. 0 \\<le> m \\<Longrightarrow> P (s (seq_filter s P 0))\n 2. \\<And>n m.\n       \\<lbrakk>\\<And>m.\n                   n \\<le> m \\<Longrightarrow> P (s (seq_filter s P n));\n        Suc n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> P (s (seq_filter s P (Suc n)))", "case 0"], ["proof (state)\nthis:\n  0 \\<le> m\n\ngoal (2 subgoals):\n 1. \\<And>m. 0 \\<le> m \\<Longrightarrow> P (s (seq_filter s P 0))\n 2. \\<And>n m.\n       \\<lbrakk>\\<And>m.\n                   n \\<le> m \\<Longrightarrow> P (s (seq_filter s P n));\n        Suc n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> P (s (seq_filter s P (Suc n)))", "then"], ["proof (chain)\npicking this:\n  0 \\<le> m", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<le> m\n\ngoal (1 subgoal):\n 1. P (s (seq_filter s P 0))", "using LeastI assms(2)"], ["proof (prove)\nusing this:\n  0 \\<le> m\n  ?P ?k \\<Longrightarrow> ?P (LEAST x. ?P x)\n  \\<forall>n. \\<exists>m>n. P (s m)\n\ngoal (1 subgoal):\n 1. P (s (seq_filter s P 0))", "by force"], ["proof (state)\nthis:\n  P (s (seq_filter s P 0))\n\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>\\<And>m.\n                   n \\<le> m \\<Longrightarrow> P (s (seq_filter s P n));\n        Suc n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> P (s (seq_filter s P (Suc n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>\\<And>m.\n                   n \\<le> m \\<Longrightarrow> P (s (seq_filter s P n));\n        Suc n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> P (s (seq_filter s P (Suc n)))", "case (Suc n)"], ["proof (state)\nthis:\n  n \\<le> ?m2 \\<Longrightarrow> P (s (seq_filter s P n))\n  Suc n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>\\<And>m.\n                   n \\<le> m \\<Longrightarrow> P (s (seq_filter s P n));\n        Suc n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> P (s (seq_filter s P (Suc n)))", "then"], ["proof (chain)\npicking this:\n  n \\<le> ?m2 \\<Longrightarrow> P (s (seq_filter s P n))\n  Suc n \\<le> m", "show ?case"], ["proof (prove)\nusing this:\n  n \\<le> ?m2 \\<Longrightarrow> P (s (seq_filter s P n))\n  Suc n \\<le> m\n\ngoal (1 subgoal):\n 1. P (s (seq_filter s P (Suc n)))", "by (smt LeastI assms(2) seq_filter.simps(2))"], ["proof (state)\nthis:\n  P (s (seq_filter s P (Suc n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>In a filtered sequence, every element satisfies the filtering predicate \\<close>"], ["", "lemma fil_seq_pred:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"s' = filtered_seq s P\"\n  assumes \"\\<forall>n::nat. \\<exists>m. m > n \\<and> P (s m)\"\n  shows \"\\<And>m::nat. P (s' m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "have \"\\<exists>k. P (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. P (s k)", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<forall>n. \\<exists>m>n. P (s m)\n\ngoal (1 subgoal):\n 1. \\<exists>k. P (s k)", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. P (s k)\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "obtain k where kdef: \"k = seq_filter s P m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k = seq_filter s P m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  k = seq_filter s P m\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "have \"\\<exists>k. P (s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. P (s k)", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<forall>n. \\<exists>m>n. P (s m)\n\ngoal (1 subgoal):\n 1. \\<exists>k. P (s k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k. P (s k)\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. P (s k)", "have \"P (s k)\""], ["proof (prove)\nusing this:\n  \\<exists>k. P (s k)\n\ngoal (1 subgoal):\n 1. P (s k)", "by (metis (full_types) assms(1) assms(3) kdef le_refl less_imp_triv not_less_eq filter_exist )"], ["proof (state)\nthis:\n  P (s k)\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "then"], ["proof (chain)\npicking this:\n  P (s k)", "have \"s' m = s k\""], ["proof (prove)\nusing this:\n  P (s k)\n\ngoal (1 subgoal):\n 1. s' m = s k", "by (simp add: assms(2) filtered_seq_def kdef take_subseq_def)"], ["proof (state)\nthis:\n  s' m = s k\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "hence \"P (s' m)\""], ["proof (prove)\nusing this:\n  s' m = s k\n\ngoal (1 subgoal):\n 1. P (s' m)", "by (simp add: \\<open>P (s k)\\<close>)"], ["proof (state)\nthis:\n  P (s' m)\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "thus \"\\<And>m. P (s' m)\""], ["proof (prove)\nusing this:\n  P (s' m)\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "using  assms(2) assms(3) dual_order.strict_trans filter_exist filtered_seq_def\n      lessI less_Suc_eq_le take_subseq_def"], ["proof (prove)\nusing this:\n  P (s' m)\n  s' = filtered_seq s P\n  \\<forall>n. \\<exists>m>n. P (s m)\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   \\<forall>n. \\<exists>m>n. ?P (?s m); ?n \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> ?P (?s (seq_filter ?s ?P ?n))\n  filtered_seq ?s ?P = take_subseq ?s (seq_filter ?s ?P)\n  ?n < Suc ?n\n  (?m < Suc ?n) = (?m \\<le> ?n)\n  take_subseq ?s ?f = (\\<lambda>k. ?s (?f k))\n\ngoal (1 subgoal):\n 1. \\<And>m. P (s' m)", "by (metis (mono_tags, hide_lams) assms(1))"], ["proof (state)\nthis:\n  P (s' ?m2)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition kth_res_equals :: \"nat \\<Rightarrow> int \\<Rightarrow> (padic_int  \\<Rightarrow> bool)\"  where\n\"kth_res_equals k n a = (a k = n)\""], ["", "(*The characteristic function of the underlying set of a sequence*)"], ["", "definition indicator:: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> ('a  \\<Rightarrow> bool)\" where\n\"indicator s a = (\\<exists>n::nat. s n = a)\""], ["", "text\\<open>Choice function for a subsequence with constant kth residue. Could be made constructive by \nchoosing the LEAST n if we wanted.\\<close>"], ["", "definition const_res_subseq :: \"nat \\<Rightarrow> padic_int_seq \\<Rightarrow> padic_int_seq\"  where\n\"const_res_subseq k s = (SOME s'::(padic_int_seq). (\\<exists> n. is_subseq_of s s' \\<and> s' \n  = (filtered_seq s (kth_res_equals k n)) \\<and> (\\<forall>m. s' m k = n)))\""], ["", "text\\<open>The constant kth residue value for the sequence obtained by the previous function\\<close>"], ["", "definition const_res :: \"nat \\<Rightarrow> padic_int_seq \\<Rightarrow> int\"  where\n\"const_res k s = (THE n. (\\<forall> m. (const_res_subseq k s) m k = n))\""], ["", "definition maps_to_n:: \"int \\<Rightarrow> (nat \\<Rightarrow> int) \\<Rightarrow> bool\" where\n\"maps_to_n n f = (\\<forall>(k::nat). f k \\<in> {0..n})\""], ["", "definition drop_res :: \"int \\<Rightarrow> (nat \\<Rightarrow> int) \\<Rightarrow> (nat \\<Rightarrow> int)\" where\n\"drop_res k f n = (if (f n) = k then 0 else f n)\""], ["", "lemma maps_to_nE:\n  assumes \"maps_to_n n f\"\n  shows \"(f k) \\<in> {0..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k \\<in> {0..n}", "using assms"], ["proof (prove)\nusing this:\n  maps_to_n n f\n\ngoal (1 subgoal):\n 1. f k \\<in> {0..n}", "unfolding maps_to_n_def"], ["proof (prove)\nusing this:\n  \\<forall>k. f k \\<in> {0..n}\n\ngoal (1 subgoal):\n 1. f k \\<in> {0..n}", "by blast"], ["", "lemma maps_to_nI:\n  assumes \"\\<And>n. f n \\<in>{0 .. k}\"\n  shows \"maps_to_n k f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maps_to_n k f", "using assms maps_to_n_def"], ["proof (prove)\nusing this:\n  f ?n2 \\<in> {0..k}\n  maps_to_n ?n ?f = (\\<forall>k. ?f k \\<in> {0..?n})\n\ngoal (1 subgoal):\n 1. maps_to_n k f", "by auto"], ["", "lemma maps_to_n_drop_res:\n  assumes \"maps_to_n (Suc n) f\"\n  shows \"maps_to_n n (drop_res (Suc n) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "have \"drop_res (Suc n) f k \\<in> {0..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop_res (int (Suc n)) f k \\<in> {0..int n}", "proof(cases \"f k = Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f k = int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}\n 2. f k \\<noteq> int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}", "case True"], ["proof (state)\nthis:\n  f k = int (Suc n)\n\ngoal (2 subgoals):\n 1. f k = int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}\n 2. f k \\<noteq> int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}", "then"], ["proof (chain)\npicking this:\n  f k = int (Suc n)", "have \"drop_res (Suc n) f k = 0\""], ["proof (prove)\nusing this:\n  f k = int (Suc n)\n\ngoal (1 subgoal):\n 1. drop_res (int (Suc n)) f k = 0", "unfolding drop_res_def"], ["proof (prove)\nusing this:\n  f k = int (Suc n)\n\ngoal (1 subgoal):\n 1. (if f k = int (Suc n) then 0 else f k) = 0", "by auto"], ["proof (state)\nthis:\n  drop_res (int (Suc n)) f k = 0\n\ngoal (2 subgoals):\n 1. f k = int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}\n 2. f k \\<noteq> int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}", "then"], ["proof (chain)\npicking this:\n  drop_res (int (Suc n)) f k = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f k = 0\n\ngoal (1 subgoal):\n 1. drop_res (int (Suc n)) f k \\<in> {0..int n}", "using assms local.drop_res_def maps_to_n_def"], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f k = 0\n  maps_to_n (int (Suc n)) f\n  drop_res ?k ?f ?n = (if ?f ?n = ?k then 0 else ?f ?n)\n  maps_to_n ?n ?f = (\\<forall>k. ?f k \\<in> {0..?n})\n\ngoal (1 subgoal):\n 1. drop_res (int (Suc n)) f k \\<in> {0..int n}", "by auto"], ["proof (state)\nthis:\n  drop_res (int (Suc n)) f k \\<in> {0..int n}\n\ngoal (1 subgoal):\n 1. f k \\<noteq> int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f k \\<noteq> int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}", "case False"], ["proof (state)\nthis:\n  f k \\<noteq> int (Suc n)\n\ngoal (1 subgoal):\n 1. f k \\<noteq> int (Suc n) \\<Longrightarrow>\n    drop_res (int (Suc n)) f k \\<in> {0..int n}", "then"], ["proof (chain)\npicking this:\n  f k \\<noteq> int (Suc n)", "show ?thesis"], ["proof (prove)\nusing this:\n  f k \\<noteq> int (Suc n)\n\ngoal (1 subgoal):\n 1. drop_res (int (Suc n)) f k \\<in> {0..int n}", "using assms atLeast0_atMost_Suc maps_to_n_def drop_res_def"], ["proof (prove)\nusing this:\n  f k \\<noteq> int (Suc n)\n  maps_to_n (int (Suc n)) f\n  {0..Suc ?n} = insert (Suc ?n) {0..?n}\n  maps_to_n ?n ?f = (\\<forall>k. ?f k \\<in> {0..?n})\n  drop_res ?k ?f ?n = (if ?f ?n = ?k then 0 else ?f ?n)\n\ngoal (1 subgoal):\n 1. drop_res (int (Suc n)) f k \\<in> {0..int n}", "by auto"], ["proof (state)\nthis:\n  drop_res (int (Suc n)) f k \\<in> {0..int n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  drop_res (int (Suc n)) f k \\<in> {0..int n}\n\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "then"], ["proof (chain)\npicking this:\n  drop_res (int (Suc n)) f k \\<in> {0..int n}", "have \"\\<And>k. drop_res (Suc n) f k \\<in> {0..n}\""], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f k \\<in> {0..int n}\n\ngoal (1 subgoal):\n 1. \\<And>k. drop_res (int (Suc n)) f k \\<in> {0..int n}", "using assms local.drop_res_def maps_to_n_def"], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f k \\<in> {0..int n}\n  maps_to_n (int (Suc n)) f\n  drop_res ?k ?f ?n = (if ?f ?n = ?k then 0 else ?f ?n)\n  maps_to_n ?n ?f = (\\<forall>k. ?f k \\<in> {0..?n})\n\ngoal (1 subgoal):\n 1. \\<And>k. drop_res (int (Suc n)) f k \\<in> {0..int n}", "by auto"], ["proof (state)\nthis:\n  drop_res (int (Suc n)) f ?k2 \\<in> {0..int n}\n\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "then"], ["proof (chain)\npicking this:\n  drop_res (int (Suc n)) f ?k2 \\<in> {0..int n}", "show \"maps_to_n n (drop_res (Suc n) f)\""], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f ?k2 \\<in> {0..int n}\n\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "using maps_to_nI"], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f ?k2 \\<in> {0..int n}\n  (\\<And>n. ?f n \\<in> {0..?k}) \\<Longrightarrow> maps_to_n ?k ?f\n\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "using maps_to_n_def"], ["proof (prove)\nusing this:\n  drop_res (int (Suc n)) f ?k2 \\<in> {0..int n}\n  (\\<And>n. ?f n \\<in> {0..?k}) \\<Longrightarrow> maps_to_n ?k ?f\n  maps_to_n ?n ?f = (\\<forall>k. ?f k \\<in> {0..?n})\n\ngoal (1 subgoal):\n 1. maps_to_n (int n) (drop_res (int (Suc n)) f)", "by blast"], ["proof (state)\nthis:\n  maps_to_n (int n) (drop_res (int (Suc n)) f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma drop_res_eq_f:\n  assumes \"maps_to_n (Suc n) f\"\n  assumes \"\\<not> (\\<forall>m. \\<exists>n. n>m \\<and> (f n = (Suc k)))\"\n  shows \"\\<exists>N. \\<forall>n. n>N \\<longrightarrow> f n = drop_res (Suc k) f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>n>N. f n = drop_res (int (Suc k)) f n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>n>N. f n = drop_res (int (Suc k)) f n", "have \"\\<exists>m. \\<forall>n. n \\<le> m \\<or> (f n) \\<noteq> (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n \\<noteq> int (Suc k)", "using assms"], ["proof (prove)\nusing this:\n  maps_to_n (int (Suc n)) f\n  \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k))\n\ngoal (1 subgoal):\n 1. \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n \\<noteq> int (Suc k)", "by (meson Suc_le_eq nat_le_linear)"], ["proof (state)\nthis:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n \\<noteq> int (Suc k)\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>n>N. f n = drop_res (int (Suc k)) f n", "then"], ["proof (chain)\npicking this:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n \\<noteq> int (Suc k)", "have \"\\<exists>m. \\<forall>n. n \\<le> m \\<or> (f n)  = drop_res (Suc k) f n\""], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n \\<noteq> int (Suc k)\n\ngoal (1 subgoal):\n 1. \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n = drop_res (int (Suc k)) f n", "using drop_res_def"], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n \\<noteq> int (Suc k)\n  drop_res ?k ?f ?n = (if ?f ?n = ?k then 0 else ?f ?n)\n\ngoal (1 subgoal):\n 1. \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n = drop_res (int (Suc k)) f n", "by auto"], ["proof (state)\nthis:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n = drop_res (int (Suc k)) f n\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>n>N. f n = drop_res (int (Suc k)) f n", "then"], ["proof (chain)\npicking this:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n = drop_res (int (Suc k)) f n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n. n \\<le> m \\<or> f n = drop_res (int (Suc k)) f n\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>n>N. f n = drop_res (int (Suc k)) f n", "by (meson less_Suc_eq_le order.asym)"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>n>N. f n = drop_res (int (Suc k)) f n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma maps_to_n_infinite_seq:\n  shows \"\\<And>f. maps_to_n (k::nat) f \\<Longrightarrow> \\<exists>l::int. \\<forall>m. \\<exists>n. n>m \\<and> (f n = l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       maps_to_n (int k) f \\<Longrightarrow>\n       \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "proof(induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       maps_to_n (int 0) f \\<Longrightarrow>\n       \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n 2. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "case 0"], ["proof (state)\nthis:\n  maps_to_n (int 0) f\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       maps_to_n (int 0) f \\<Longrightarrow>\n       \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n 2. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  maps_to_n (int 0) f", "have \"\\<And>n. f n \\<in> {0}\""], ["proof (prove)\nusing this:\n  maps_to_n (int 0) f\n\ngoal (1 subgoal):\n 1. \\<And>n. f n \\<in> {0}", "using maps_to_nE[of 0 f]"], ["proof (prove)\nusing this:\n  maps_to_n (int 0) f\n  maps_to_n 0 f \\<Longrightarrow> f ?k \\<in> {0..0}\n\ngoal (1 subgoal):\n 1. \\<And>n. f n \\<in> {0}", "by auto"], ["proof (state)\nthis:\n  f ?n2 \\<in> {0}\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       maps_to_n (int 0) f \\<Longrightarrow>\n       \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n 2. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  f ?n2 \\<in> {0}", "show \" \\<exists>l. \\<forall>m. \\<exists>n. m < n \\<and> f n = l\""], ["proof (prove)\nusing this:\n  f ?n2 \\<in> {0}\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n\ngoal (1 subgoal):\n 1. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "case (Suc k)"], ["proof (state)\nthis:\n  maps_to_n (int k) ?f2 \\<Longrightarrow>\n  \\<exists>l. \\<forall>m. \\<exists>n>m. ?f2 n = l\n  maps_to_n (int (Suc k)) f\n\ngoal (1 subgoal):\n 1. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "assume IH: \"\\<And>f. maps_to_n k f \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n. m < n \\<and> f n = l\""], ["proof (state)\nthis:\n  maps_to_n (int k) ?f2 \\<Longrightarrow>\n  \\<exists>l. \\<forall>m. \\<exists>n>m. ?f2 n = l\n\ngoal (1 subgoal):\n 1. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "assume A: \"maps_to_n (Suc k) f\""], ["proof (state)\nthis:\n  maps_to_n (int (Suc k)) f\n\ngoal (1 subgoal):\n 1. \\<And>k f.\n       \\<lbrakk>\\<And>f.\n                   maps_to_n (int k) f \\<Longrightarrow>\n                   \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l;\n        maps_to_n (int (Suc k)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "show \"\\<exists>l. \\<forall>m. \\<exists>n. n>m \\<and> (f n = l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "proof(cases \" \\<forall>m. \\<exists>n. n>m \\<and> (f n = (Suc k))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>m. \\<exists>n>m. f n = int (Suc k) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n 2. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "case True"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>n>m. f n = int (Suc k)\n\ngoal (2 subgoals):\n 1. \\<forall>m. \\<exists>n>m. f n = int (Suc k) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n 2. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  \\<forall>m. \\<exists>n>m. f n = int (Suc k)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m. \\<exists>n>m. f n = int (Suc k)\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k))", "obtain N where N_def: \"\\<forall>n. n>N \\<longrightarrow> f n = drop_res (Suc k) f n\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n>N. f n = drop_res (int (Suc k)) f n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using drop_res_eq_f drop_res_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k))\n  \\<lbrakk>maps_to_n (int (Suc ?n)) ?f;\n   \\<not> (\\<forall>m. \\<exists>n>m. ?f n = int (Suc ?k))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>N.\n                       \\<forall>n>N. ?f n = drop_res (int (Suc ?k)) ?f n\n  drop_res ?k ?f ?n = (if ?f ?n = ?k then 0 else ?f ?n)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n>N. f n = drop_res (int (Suc k)) f n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>n>N. f n = drop_res (int (Suc k)) f n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "have \" maps_to_n k (drop_res (Suc k) f) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. maps_to_n (int k) (drop_res (int (Suc k)) f)", "using A maps_to_n_drop_res"], ["proof (prove)\nusing this:\n  maps_to_n (int (Suc k)) f\n  maps_to_n (int (Suc ?n)) ?f \\<Longrightarrow>\n  maps_to_n (int ?n) (drop_res (int (Suc ?n)) ?f)\n\ngoal (1 subgoal):\n 1. maps_to_n (int k) (drop_res (int (Suc k)) f)", "by blast"], ["proof (state)\nthis:\n  maps_to_n (int k) (drop_res (int (Suc k)) f)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  maps_to_n (int k) (drop_res (int (Suc k)) f)", "have \" \\<exists>l. \\<forall>m. \\<exists>n. m < n \\<and> (drop_res (Suc k) f) n = l\""], ["proof (prove)\nusing this:\n  maps_to_n (int k) (drop_res (int (Suc k)) f)\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l", "using IH"], ["proof (prove)\nusing this:\n  maps_to_n (int k) (drop_res (int (Suc k)) f)\n  maps_to_n (int k) ?f2 \\<Longrightarrow>\n  \\<exists>l. \\<forall>m. \\<exists>n>m. ?f2 n = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l", "obtain l where l_def: \"\\<forall>m. \\<exists>n. m < n \\<and> (drop_res (Suc k) f) n = l\""], ["proof (prove)\nusing this:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<forall>m.\n           \\<exists>n>m. drop_res (int (Suc k)) f n = l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "have \"\\<forall>m. \\<exists>n. n>m \\<and> (f n = l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. \\<exists>n>m. f n = l", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. \\<exists>n>m. f n = l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. \\<exists>n>m. f n = l", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. \\<exists>n>m. f n = l", "show \"\\<exists>n>m. f n = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n>m. f n = l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n>m. f n = l", "obtain n where N'_def: \"(max m N) < n \\<and> (drop_res (Suc k) f) n = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        max m N < n \\<and> drop_res (int (Suc k)) f n = l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using l_def"], ["proof (prove)\nusing this:\n  \\<forall>m. \\<exists>n>m. drop_res (int (Suc k)) f n = l\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        max m N < n \\<and> drop_res (int (Suc k)) f n = l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  max m N < n \\<and> drop_res (int (Suc k)) f n = l\n\ngoal (1 subgoal):\n 1. \\<exists>n>m. f n = l", "have \"f n =  (drop_res (Suc k) f) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = drop_res (int (Suc k)) f n", "using N'_def N_def"], ["proof (prove)\nusing this:\n  max m N < n \\<and> drop_res (int (Suc k)) f n = l\n  \\<forall>n>N. f n = drop_res (int (Suc k)) f n\n\ngoal (1 subgoal):\n 1. f n = drop_res (int (Suc k)) f n", "by simp"], ["proof (state)\nthis:\n  f n = drop_res (int (Suc k)) f n\n\ngoal (1 subgoal):\n 1. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  f n = drop_res (int (Suc k)) f n", "show ?thesis"], ["proof (prove)\nusing this:\n  f n = drop_res (int (Suc k)) f n\n\ngoal (1 subgoal):\n 1. \\<exists>n>m. f n = l", "using N'_def"], ["proof (prove)\nusing this:\n  f n = drop_res (int (Suc k)) f n\n  max m N < n \\<and> drop_res (int (Suc k)) f n = l\n\ngoal (1 subgoal):\n 1. \\<exists>n>m. f n = l", "by auto"], ["proof (state)\nthis:\n  \\<exists>n>m. f n = l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n>m. f n = l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>n>m. f n = l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m. \\<exists>n>m. f n = int (Suc k)) \\<Longrightarrow>\n    \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "then"], ["proof (chain)\npicking this:\n  \\<forall>m. \\<exists>n>m. f n = l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m. \\<exists>n>m. f n = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma int_nat_p_pow_minus:\n\"int (nat (p ^ k - 1)) = p ^ k - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (nat (p ^ k - 1)) = p ^ k - 1", "by (simp add: prime prime_gt_0_int)"], ["", "lemma maps_to_n_infinite_seq_res_ring:\n\"\\<And>f. f \\<in> (UNIV::nat set) \\<rightarrow> carrier (Zp_res_ring k) \\<Longrightarrow> \\<exists>l. \\<forall>m. \\<exists>n. n>m \\<and> (f n = l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> UNIV \\<rightarrow>\n               carrier (residue_ring (p ^ k)) \\<Longrightarrow>\n       \\<exists>l. \\<forall>m. \\<exists>n>m. f n = l", "apply(rule maps_to_n_infinite_seq[of \"nat (p^k - 1)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> UNIV \\<rightarrow>\n               carrier (residue_ring (p ^ k)) \\<Longrightarrow>\n       maps_to_n (int (nat (p ^ k - 1))) f", "unfolding maps_to_n_def res_ring_car int_nat_p_pow_minus"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> UNIV \\<rightarrow> {0..p ^ k - 1} \\<Longrightarrow>\n       \\<forall>ka. f ka \\<in> {0..p ^ k - 1}", "by blast"], ["", "definition index_to_residue :: \"padic_int_seq \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> int\" where\n\"index_to_residue s k m = ((s m) k)\""], ["", "lemma seq_maps_to_n:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(index_to_residue s k) \\<in> UNIV \\<rightarrow> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "have A1: \"\\<And>m. (s m) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. s m \\<in> carrier Zp", "using assms closed_seqs_memE"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. \\<And>m. s m \\<in> carrier Zp", "by auto"], ["proof (state)\nthis:\n  s ?m2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "have A2: \"\\<And>m. (s m k) \\<in> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. s m k \\<in> carrier (residue_ring (p ^ k))", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>m. s m k \\<in> carrier (residue_ring (p ^ k))", "by (simp add: A1)"], ["proof (state)\nthis:\n  s ?m2 k \\<in> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "have \"\\<And>m. index_to_residue s k m = s m k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. index_to_residue s k m = s m k", "using index_to_residue_def"], ["proof (prove)\nusing this:\n  index_to_residue ?s ?k ?m = ?s ?m ?k\n\ngoal (1 subgoal):\n 1. \\<And>m. index_to_residue s k m = s m k", "by auto"], ["proof (state)\nthis:\n  index_to_residue s k ?m2 = s ?m2 k\n\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "thus \"index_to_residue s k \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))\""], ["proof (prove)\nusing this:\n  index_to_residue s k ?m2 = s ?m2 k\n\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "using A2"], ["proof (prove)\nusing this:\n  index_to_residue s k ?m2 = s ?m2 k\n  s ?m2 k \\<in> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "by simp"], ["proof (state)\nthis:\n  index_to_residue s k\n  \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_pr_inc:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>l. \\<forall>m. \\<exists>n > m. (kth_res_equals k l) (s n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "fix k l m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "have 0: \"(kth_res_equals k l) (s m) \\<Longrightarrow> (s m) k = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kth_res_equals k l (s m) \\<Longrightarrow> s m k = l", "by (simp add: kth_res_equals_def)"], ["proof (state)\nthis:\n  kth_res_equals k l (s m) \\<Longrightarrow> s m k = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "have 1: \"\\<And>k m. s m k = index_to_residue s k m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k m. s m k = index_to_residue s k m", "by (simp add: index_to_residue_def)"], ["proof (state)\nthis:\n  s ?m2 ?k2 = index_to_residue s ?k2 ?m2\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "have 2: \"(index_to_residue s k) \\<in> UNIV \\<rightarrow> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "using seq_maps_to_n assms"], ["proof (prove)\nusing this:\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  index_to_residue ?s ?k\n  \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ ?k))\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. index_to_residue s k\n    \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))", "by blast"], ["proof (state)\nthis:\n  index_to_residue s k\n  \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "have 3: \"\\<And>m. s m k \\<in> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. s m k \\<in> carrier (residue_ring (p ^ k))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. s m k \\<in> carrier (residue_ring (p ^ k))", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. s m k \\<in> carrier (residue_ring (p ^ k))", "have 30: \"s m k = index_to_residue s k m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m k = index_to_residue s k m", "using 1"], ["proof (prove)\nusing this:\n  s ?m2 ?k2 = index_to_residue s ?k2 ?m2\n\ngoal (1 subgoal):\n 1. s m k = index_to_residue s k m", "by blast"], ["proof (state)\nthis:\n  s m k = index_to_residue s k m\n\ngoal (1 subgoal):\n 1. \\<And>m. s m k \\<in> carrier (residue_ring (p ^ k))", "show \" s m k \\<in> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m k \\<in> carrier (residue_ring (p ^ k))", "unfolding 30"], ["proof (prove)\ngoal (1 subgoal):\n 1. index_to_residue s k m \\<in> carrier (residue_ring (p ^ k))", "using 2"], ["proof (prove)\nusing this:\n  index_to_residue s k\n  \\<in> UNIV \\<rightarrow> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. index_to_residue s k m \\<in> carrier (residue_ring (p ^ k))", "by blast"], ["proof (state)\nthis:\n  s m k \\<in> carrier (residue_ring (p ^ k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s ?m2 k \\<in> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "obtain j where j_def: \"j = nat (p^k - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        j = nat (p ^ k - 1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j = nat (p ^ k - 1)\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "have j_to_int: \"int j = p^k - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int j = p ^ k - 1", "using j_def"], ["proof (prove)\nusing this:\n  j = nat (p ^ k - 1)\n\ngoal (1 subgoal):\n 1. int j = p ^ k - 1", "by (simp add: prime prime_gt_0_int)"], ["proof (state)\nthis:\n  int j = p ^ k - 1\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "have \"\\<exists>l. \\<forall>m. \\<exists>n. n > m \\<and>  (index_to_residue s k n = l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. index_to_residue s k n = l", "by(rule maps_to_n_infinite_seq_res_ring[of _ k], rule seq_maps_to_n, rule assms)"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. index_to_residue s k n = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "hence \"\\<exists>l. \\<forall>m. \\<exists>n. n > m \\<and>  (s n k = l)\""], ["proof (prove)\nusing this:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. index_to_residue s k n = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. s n k = l", "by (simp add: index_to_residue_def)"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. s n k = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "thus \"\\<exists>l. \\<forall>m. \\<exists>n > m. (kth_res_equals k l) (s n)\""], ["proof (prove)\nusing this:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. s n k = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "using kth_res_equals_def"], ["proof (prove)\nusing this:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. s n k = l\n  kth_res_equals ?k ?n ?a = (?a ?k = ?n)\n\ngoal (1 subgoal):\n 1. \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kth_res_equals_subseq:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>n. is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and> (\\<forall>m. (filtered_seq s (kth_res_equals k n)) m k = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "obtain l where l_def: \" \\<forall> m. \\<exists>n > m. (kth_res_equals k l) (s n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms seq_pr_inc"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  \\<exists>l. \\<forall>m. \\<exists>n>m. kth_res_equals ?k l (?s n)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "have 0: \"is_subseq_of s (filtered_seq s (kth_res_equals k l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (filtered_seq s (kth_res_equals k l))", "unfolding filtered_seq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (take_subseq s (seq_filter s (kth_res_equals k l)))", "apply(rule is_subseqI[of \"seq_filter s (kth_res_equals k l)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_increasing (seq_filter s (kth_res_equals k l))\n 2. take_subseq s (seq_filter s (kth_res_equals k l)) =\n    take_subseq s (seq_filter s (kth_res_equals k l))", "apply(rule seq_filter_increasing, rule l_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. take_subseq s (seq_filter s (kth_res_equals k l)) =\n    take_subseq s (seq_filter s (kth_res_equals k l))", "by blast"], ["proof (state)\nthis:\n  is_subseq_of s (filtered_seq s (kth_res_equals k l))\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "have 1: \" (\\<forall>m. (filtered_seq s (kth_res_equals k l)) m k = l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. filtered_seq s (kth_res_equals k l) m k = l", "using l_def"], ["proof (prove)\nusing this:\n  \\<forall>m. \\<exists>n>m. kth_res_equals k l (s n)\n\ngoal (1 subgoal):\n 1. \\<forall>m. filtered_seq s (kth_res_equals k l) m k = l", "by (meson assms kth_res_equals_def fil_seq_pred padic_integers_axioms)"], ["proof (state)\nthis:\n  \\<forall>m. filtered_seq s (kth_res_equals k l) m k = l\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "using 0 1"], ["proof (prove)\nusing this:\n  is_subseq_of s (filtered_seq s (kth_res_equals k l))\n  \\<forall>m. filtered_seq s (kth_res_equals k l) m k = l\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>n.\n     is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n     (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma const_res_subseq_prop_0: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>l. (((const_res_subseq k s) = filtered_seq s (kth_res_equals k l)) \\<and> (is_subseq_of s (const_res_subseq k s)) \\<and> (\\<forall>m.(const_res_subseq k s) m k = l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n       is_subseq_of s (const_res_subseq k s) \\<and>\n       (\\<forall>m. const_res_subseq k s m k = l)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n       is_subseq_of s (const_res_subseq k s) \\<and>\n       (\\<forall>m. const_res_subseq k s m k = l)", "have \" \\<exists>n. (is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and> (\\<forall>m. (filtered_seq s (kth_res_equals k n)) m k = n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n       (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "by (simp add: kth_res_equals_subseq assms)"], ["proof (state)\nthis:\n  \\<exists>n.\n     is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n     (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n       is_subseq_of s (const_res_subseq k s) \\<and>\n       (\\<forall>m. const_res_subseq k s m k = l)", "then"], ["proof (chain)\npicking this:\n  \\<exists>n.\n     is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n     (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)", "have \"\\<exists>s'. (\\<exists>n. (is_subseq_of s s') \\<and> (s' = filtered_seq s (kth_res_equals k n)) \\<and> (\\<forall>m. s' m k = n))\""], ["proof (prove)\nusing this:\n  \\<exists>n.\n     is_subseq_of s (filtered_seq s (kth_res_equals k n)) \\<and>\n     (\\<forall>m. filtered_seq s (kth_res_equals k n) m k = n)\n\ngoal (1 subgoal):\n 1. \\<exists>s' n.\n       is_subseq_of s s' \\<and>\n       s' = filtered_seq s (kth_res_equals k n) \\<and>\n       (\\<forall>m. s' m k = n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s' n.\n     is_subseq_of s s' \\<and>\n     s' = filtered_seq s (kth_res_equals k n) \\<and>\n     (\\<forall>m. s' m k = n)\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n       is_subseq_of s (const_res_subseq k s) \\<and>\n       (\\<forall>m. const_res_subseq k s m k = l)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' n.\n     is_subseq_of s s' \\<and>\n     s' = filtered_seq s (kth_res_equals k n) \\<and>\n     (\\<forall>m. s' m k = n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s' n.\n     is_subseq_of s s' \\<and>\n     s' = filtered_seq s (kth_res_equals k n) \\<and>\n     (\\<forall>m. s' m k = n)\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n       is_subseq_of s (const_res_subseq k s) \\<and>\n       (\\<forall>m. const_res_subseq k s m k = l)", "using const_res_subseq_def[of k s] const_res_subseq_def someI_ex"], ["proof (prove)\nusing this:\n  \\<exists>s' n.\n     is_subseq_of s s' \\<and>\n     s' = filtered_seq s (kth_res_equals k n) \\<and>\n     (\\<forall>m. s' m k = n)\n  const_res_subseq k s =\n  (SOME s'.\n      \\<exists>n.\n         is_subseq_of s s' \\<and>\n         s' = filtered_seq s (kth_res_equals k n) \\<and>\n         (\\<forall>m. s' m k = n))\n  const_res_subseq ?k ?s =\n  (SOME s'.\n      \\<exists>n.\n         is_subseq_of ?s s' \\<and>\n         s' = filtered_seq ?s (kth_res_equals ?k n) \\<and>\n         (\\<forall>m. s' m ?k = n))\n  \\<exists>x. ?P x \\<Longrightarrow> ?P (SOME x. ?P x)\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n       is_subseq_of s (const_res_subseq k s) \\<and>\n       (\\<forall>m. const_res_subseq k s m k = l)", "by (smt const_res_subseq_def someI_ex)"], ["proof (state)\nthis:\n  \\<exists>l.\n     const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n     is_subseq_of s (const_res_subseq k s) \\<and>\n     (\\<forall>m. const_res_subseq k s m k = l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma const_res_subseq_prop_1: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(\\<forall>m.(const_res_subseq k s) m k = (const_res k s) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. const_res_subseq k s m k = const_res k s", "using const_res_subseq_prop_0[of s] const_res_def[of k s]"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  \\<exists>l.\n     const_res_subseq ?k s = filtered_seq s (kth_res_equals ?k l) \\<and>\n     is_subseq_of s (const_res_subseq ?k s) \\<and>\n     (\\<forall>m. const_res_subseq ?k s m ?k = l)\n  const_res k s = (THE n. \\<forall>m. const_res_subseq k s m k = n)\n\ngoal (1 subgoal):\n 1. \\<forall>m. const_res_subseq k s m k = const_res k s", "by (smt assms const_res_subseq_def const_res_def the_equality)"], ["", "lemma const_res_subseq: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s (const_res_subseq k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (const_res_subseq k s)", "using assms const_res_subseq_prop_0[of s k]"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  \\<exists>l.\n     const_res_subseq k s = filtered_seq s (kth_res_equals k l) \\<and>\n     is_subseq_of s (const_res_subseq k s) \\<and>\n     (\\<forall>m. const_res_subseq k s m k = l)\n\ngoal (1 subgoal):\n 1. is_subseq_of s (const_res_subseq k s)", "by blast"], ["", "lemma const_res_range:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"k > 0\"\n  shows \"const_res k s \\<in> carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_res k s \\<in> carrier (residue_ring (p ^ k))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. const_res k s \\<in> carrier (residue_ring (p ^ k))", "have 0: \"(const_res_subseq k s) 0 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_res_subseq k s 0 \\<in> carrier Zp", "using const_res_subseq[of s k] is_subseq_closed[of s \"const_res_subseq k s\"]\n          assms(1) closed_seqs_memE"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  is_subseq_of s (const_res_subseq k s)\n  \\<lbrakk>s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   is_subseq_of s (const_res_subseq k s)\\<rbrakk>\n  \\<Longrightarrow> const_res_subseq k s\n                    \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. const_res_subseq k s 0 \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  const_res_subseq k s 0 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. const_res k s \\<in> carrier (residue_ring (p ^ k))", "have 1: \"(const_res_subseq k s) 0 k \\<in>  carrier (Zp_res_ring k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_res_subseq k s 0 k \\<in> carrier (residue_ring (p ^ k))", "using 0"], ["proof (prove)\nusing this:\n  const_res_subseq k s 0 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. const_res_subseq k s 0 k \\<in> carrier (residue_ring (p ^ k))", "by simp"], ["proof (state)\nthis:\n  const_res_subseq k s 0 k \\<in> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. const_res k s \\<in> carrier (residue_ring (p ^ k))", "then"], ["proof (chain)\npicking this:\n  const_res_subseq k s 0 k \\<in> carrier (residue_ring (p ^ k))", "show  ?thesis"], ["proof (prove)\nusing this:\n  const_res_subseq k s 0 k \\<in> carrier (residue_ring (p ^ k))\n\ngoal (1 subgoal):\n 1. const_res k s \\<in> carrier (residue_ring (p ^ k))", "using assms const_res_subseq_prop_1[of s k]"], ["proof (prove)\nusing this:\n  const_res_subseq k s 0 k \\<in> carrier (residue_ring (p ^ k))\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  0 < k\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  \\<forall>m. const_res_subseq k s m k = const_res k s\n\ngoal (1 subgoal):\n 1. const_res k s \\<in> carrier (residue_ring (p ^ k))", "by (simp add: \\<open>s \\<in> closed_seqs Zp\\<close>)"], ["proof (state)\nthis:\n  const_res k s \\<in> carrier (residue_ring (p ^ k))\n\ngoal:\nNo subgoals!", "qed"], ["", "fun res_seq ::\"padic_int_seq \\<Rightarrow> nat \\<Rightarrow>  padic_int_seq\" where\n\"res_seq s 0 = s\"|\n\"res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)\""], ["", "lemma res_seq_res:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(res_seq s k) \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_seq s k \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "apply(induction k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. res_seq s 0 \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>k.\n       res_seq s k\n       \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n       res_seq s (Suc k) \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "apply (simp add: assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       res_seq s k\n       \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n       res_seq s (Suc k) \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by (simp add: const_res_subseq is_subseq_closed)"], ["", "lemma res_seq_res':\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<And>n. res_seq s (Suc k) n (Suc k) = const_res (Suc k) (res_seq s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. res_seq s (Suc k) n (Suc k) = const_res (Suc k) (res_seq s k)", "using assms res_seq_res[of s k] const_res_subseq_prop_1[of \"(res_seq s k)\" \"Suc k\" ]"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq s k \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  res_seq s k \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  \\<forall>m.\n     const_res_subseq (Suc k) (res_seq s k) m (Suc k) =\n     const_res (Suc k) (res_seq s k)\n\ngoal (1 subgoal):\n 1. \\<And>n. res_seq s (Suc k) n (Suc k) = const_res (Suc k) (res_seq s k)", "by simp"], ["", "lemma res_seq_subseq: \n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of (res_seq s k) (res_seq s (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of (res_seq s k) (res_seq s (Suc k))", "by (metis assms  const_res_subseq_prop_0 res_seq_res  \n      res_seq.simps(2))"], ["", "lemma is_increasing_id:\n\"is_increasing (\\<lambda> n. n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_increasing (\\<lambda>n. n)", "by (simp add: is_increasingI)"], ["", "lemma is_increasing_comp:\n  assumes \"is_increasing f\"\n  assumes \"is_increasing g\"\n  shows \"is_increasing (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_increasing (f \\<circ> g)", "using assms(1) assms(2) is_increasing_def"], ["proof (prove)\nusing this:\n  is_increasing f\n  is_increasing g\n  is_increasing ?f = (\\<forall>n m. m < n \\<longrightarrow> ?f m < ?f n)\n\ngoal (1 subgoal):\n 1. is_increasing (f \\<circ> g)", "by auto"], ["", "lemma is_increasing_imp_geq_id[simp]:\n  assumes  \"is_increasing f\"\n  shows \"f n \\<ge>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> f n", "apply(induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<le> f 0\n 2. \\<And>n. n \\<le> f n \\<Longrightarrow> Suc n \\<le> f (Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. n \\<le> f n \\<Longrightarrow> Suc n \\<le> f (Suc n)", "by (metis (mono_tags, lifting) assms is_increasing_def\n      leD lessI not_less_eq_eq order_less_le_subst2)"], ["", "lemma is_subseq_ofE:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"is_subseq_of s s'\"\n  shows \"\\<exists>k. k \\<ge> n \\<and> s' n = s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>n. s' n = s k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>n. s' n = s k", "obtain f where \"is_increasing f \\<and> s' = take_subseq s f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        is_increasing f \\<and> s' = take_subseq s f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2) is_subseq_of_def"], ["proof (prove)\nusing this:\n  is_subseq_of s s'\n  is_subseq_of ?s ?s' =\n  (\\<exists>f. is_increasing f \\<and> ?s' = take_subseq ?s f)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        is_increasing f \\<and> s' = take_subseq s f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_increasing f \\<and> s' = take_subseq s f\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>n. s' n = s k", "then"], ["proof (chain)\npicking this:\n  is_increasing f \\<and> s' = take_subseq s f", "have  \" f n \\<ge> n \\<and> s' n = s (f n)\""], ["proof (prove)\nusing this:\n  is_increasing f \\<and> s' = take_subseq s f\n\ngoal (1 subgoal):\n 1. n \\<le> f n \\<and> s' n = s (f n)", "unfolding take_subseq_def"], ["proof (prove)\nusing this:\n  is_increasing f \\<and> s' = (\\<lambda>k. s (f k))\n\ngoal (1 subgoal):\n 1. n \\<le> f n \\<and> s' n = s (f n)", "by simp"], ["proof (state)\nthis:\n  n \\<le> f n \\<and> s' n = s (f n)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>n. s' n = s k", "then"], ["proof (chain)\npicking this:\n  n \\<le> f n \\<and> s' n = s (f n)", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> f n \\<and> s' n = s (f n)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>n. s' n = s k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<ge>n. s' n = s k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_subseq_of_id:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subseq_of s s", "have \"s = take_subseq s (\\<lambda>n. n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = take_subseq s (\\<lambda>n. n)", "unfolding take_subseq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s", "by auto"], ["proof (state)\nthis:\n  s = take_subseq s (\\<lambda>n. n)\n\ngoal (1 subgoal):\n 1. is_subseq_of s s", "then"], ["proof (chain)\npicking this:\n  s = take_subseq s (\\<lambda>n. n)", "show ?thesis"], ["proof (prove)\nusing this:\n  s = take_subseq s (\\<lambda>n. n)\n\ngoal (1 subgoal):\n 1. is_subseq_of s s", "using is_increasing_id"], ["proof (prove)\nusing this:\n  s = take_subseq s (\\<lambda>n. n)\n  is_increasing (\\<lambda>n. n)\n\ngoal (1 subgoal):\n 1. is_subseq_of s s", "using is_subseqI"], ["proof (prove)\nusing this:\n  s = take_subseq s (\\<lambda>n. n)\n  is_increasing (\\<lambda>n. n)\n  \\<lbrakk>is_increasing ?f; ?s' = take_subseq ?s ?f\\<rbrakk>\n  \\<Longrightarrow> is_subseq_of ?s ?s'\n\ngoal (1 subgoal):\n 1. is_subseq_of s s", "by blast"], ["proof (state)\nthis:\n  is_subseq_of s s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_subseq_of_trans:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"is_subseq_of s s'\"\n  assumes \"is_subseq_of s' s''\"\n  shows \"is_subseq_of s s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "obtain f where f_def: \"is_increasing f \\<and> s' = take_subseq s f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        is_increasing f \\<and> s' = take_subseq s f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2) is_subseq_of_def"], ["proof (prove)\nusing this:\n  is_subseq_of s s'\n  is_subseq_of ?s ?s' =\n  (\\<exists>f. is_increasing f \\<and> ?s' = take_subseq ?s f)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        is_increasing f \\<and> s' = take_subseq s f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_increasing f \\<and> s' = take_subseq s f\n\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "obtain g where g_def: \"is_increasing g \\<and> s'' = take_subseq s' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        is_increasing g \\<and> s'' = take_subseq s' g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(3) is_subseq_of_def"], ["proof (prove)\nusing this:\n  is_subseq_of s' s''\n  is_subseq_of ?s ?s' =\n  (\\<exists>f. is_increasing f \\<and> ?s' = take_subseq ?s f)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        is_increasing g \\<and> s'' = take_subseq s' g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_increasing g \\<and> s'' = take_subseq s' g\n\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "have \"s'' = take_subseq s (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s'' = take_subseq s (f \\<circ> g)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. s'' x = take_subseq s (f \\<circ> g) x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. s'' x = take_subseq s (f \\<circ> g) x", "show \"s'' x = take_subseq s (f \\<circ> g) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s'' x = take_subseq s (f \\<circ> g) x", "using f_def g_def"], ["proof (prove)\nusing this:\n  is_increasing f \\<and> s' = take_subseq s f\n  is_increasing g \\<and> s'' = take_subseq s' g\n\ngoal (1 subgoal):\n 1. s'' x = take_subseq s (f \\<circ> g) x", "unfolding take_subseq_def"], ["proof (prove)\nusing this:\n  is_increasing f \\<and> s' = (\\<lambda>k. s (f k))\n  is_increasing g \\<and> s'' = (\\<lambda>k. s' (g k))\n\ngoal (1 subgoal):\n 1. s'' x = s ((f \\<circ> g) x)", "by auto"], ["proof (state)\nthis:\n  s'' x = take_subseq s (f \\<circ> g) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s'' = take_subseq s (f \\<circ> g)\n\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "then"], ["proof (chain)\npicking this:\n  s'' = take_subseq s (f \\<circ> g)", "show ?thesis"], ["proof (prove)\nusing this:\n  s'' = take_subseq s (f \\<circ> g)\n\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "using f_def g_def is_increasing_comp is_subseq_of_def"], ["proof (prove)\nusing this:\n  s'' = take_subseq s (f \\<circ> g)\n  is_increasing f \\<and> s' = take_subseq s f\n  is_increasing g \\<and> s'' = take_subseq s' g\n  \\<lbrakk>is_increasing ?f; is_increasing ?g\\<rbrakk>\n  \\<Longrightarrow> is_increasing (?f \\<circ> ?g)\n  is_subseq_of ?s ?s' =\n  (\\<exists>f. is_increasing f \\<and> ?s' = take_subseq ?s f)\n\ngoal (1 subgoal):\n 1. is_subseq_of s s''", "by blast"], ["proof (state)\nthis:\n  is_subseq_of s s''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma res_seq_subseq':\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s (res_seq s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s k)", "proof(induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_subseq_of s (res_seq s 0)\n 2. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. is_subseq_of s (res_seq s 0)\n 2. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s 0)", "using is_subseq_of_id"], ["proof (prove)\nusing this:\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  is_subseq_of ?s ?s\n\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s 0)", "by (simp add: assms)"], ["proof (state)\nthis:\n  is_subseq_of s (res_seq s 0)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "case (Suc k)"], ["proof (state)\nthis:\n  is_subseq_of s (res_seq s k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "assume \"is_subseq_of s (res_seq s k)\""], ["proof (state)\nthis:\n  is_subseq_of s (res_seq s k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of s (res_seq s k) \\<Longrightarrow>\n       is_subseq_of s (res_seq s (Suc k))", "then"], ["proof (chain)\npicking this:\n  is_subseq_of s (res_seq s k)", "show \"is_subseq_of s (res_seq s (Suc k)) \""], ["proof (prove)\nusing this:\n  is_subseq_of s (res_seq s k)\n\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s (Suc k))", "using assms is_subseq_of_trans res_seq_subseq"], ["proof (prove)\nusing this:\n  is_subseq_of s (res_seq s k)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>; is_subseq_of ?s ?s';\n   is_subseq_of ?s' ?s''\\<rbrakk>\n  \\<Longrightarrow> is_subseq_of ?s ?s''\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  is_subseq_of (res_seq ?s ?k) (res_seq ?s (Suc ?k))\n\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s (Suc k))", "by blast"], ["proof (state)\nthis:\n  is_subseq_of s (res_seq s (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma res_seq_subseq'':\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of (res_seq s n) (res_seq s (n + k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of (res_seq s n) (res_seq s (n + k))", "apply(induction k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_subseq_of (res_seq s n) (res_seq s (n + 0))\n 2. \\<And>k.\n       is_subseq_of (res_seq s n) (res_seq s (n + k)) \\<Longrightarrow>\n       is_subseq_of (res_seq s n) (res_seq s (n + Suc k))", "apply (simp add: assms is_subseq_of_id res_seq_res)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of (res_seq s n) (res_seq s (n + k)) \\<Longrightarrow>\n       is_subseq_of (res_seq s n) (res_seq s (n + Suc k))", "using add_Suc_right assms is_subseq_of_trans res_seq_res res_seq_subseq"], ["proof (prove)\nusing this:\n  ?m + Suc ?n = Suc (?m + ?n)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>; is_subseq_of ?s ?s';\n   is_subseq_of ?s' ?s''\\<rbrakk>\n  \\<Longrightarrow> is_subseq_of ?s ?s''\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq ?s ?k \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  is_subseq_of (res_seq ?s ?k) (res_seq ?s (Suc ?k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       is_subseq_of (res_seq s n) (res_seq s (n + k)) \\<Longrightarrow>\n       is_subseq_of (res_seq s n) (res_seq s (n + Suc k))", "by presburger"], ["", "(**)"], ["", "definition acc_point :: \"padic_int_seq \\<Rightarrow> padic_int\" where\n\"acc_point s k = (if (k = 0) then (0::int) else ((res_seq s k) 0 k))\""], ["", "lemma res_seq_res_1:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"res_seq s (Suc k) 0 k = res_seq s k 0 k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "obtain n where  n_def: \"res_seq s (Suc k) 0 = res_seq s k n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        res_seq s (Suc k) 0 = res_seq s k n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms is_subseq_of_def res_seq_subseq take_subseq_def)"], ["proof (state)\nthis:\n  res_seq s (Suc k) 0 = res_seq s k n\n\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "have \"res_seq s (Suc k) 0 k = res_seq s k n k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k n k", "using n_def"], ["proof (prove)\nusing this:\n  res_seq s (Suc k) 0 = res_seq s k n\n\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k n k", "by auto"], ["proof (state)\nthis:\n  res_seq s (Suc k) 0 k = res_seq s k n k\n\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "thus ?thesis"], ["proof (prove)\nusing this:\n  res_seq s (Suc k) 0 k = res_seq s k n k\n\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "using  assms padic_integers.p_res_ring_0' \n        padic_integers_axioms res_seq.elims  residues_closed"], ["proof (prove)\nusing this:\n  res_seq s (Suc k) 0 k = res_seq s k n k\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<lbrakk>padic_integers ?p;\n   ?x \\<in> carrier (residue_ring (?p ^ 0))\\<rbrakk>\n  \\<Longrightarrow> ?x = 0\n  padic_integers p\n  \\<lbrakk>res_seq ?x ?xa = ?y;\n   \\<And>s. \\<lbrakk>?x = s; ?xa = 0; ?y = s\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>s k.\n      \\<lbrakk>?x = s; ?xa = Suc k;\n       ?y = const_res_subseq (Suc k) (res_seq s k)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  ?a ?k \\<in> carrier (residue_ring (p ^ ?k))\n\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>res_seq s (Suc k) 0 k = res_seq s k n k;\n     s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n     \\<And>p x.\n        \\<lbrakk>padic_integers p;\n         x \\<in> carrier (residue_ring (p ^ 0))\\<rbrakk>\n        \\<Longrightarrow> x = 0;\n     padic_integers p;\n     \\<And>x xa y P.\n        \\<lbrakk>res_seq x xa = y;\n         \\<And>s.\n            \\<lbrakk>x = s; xa = 0; y = s\\<rbrakk> \\<Longrightarrow> P;\n         \\<And>s k.\n            \\<lbrakk>x = s; xa = Suc k;\n             y = const_res_subseq (Suc k) (res_seq s k)\\<rbrakk>\n            \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>a k.\n        a \\<in> carrier Zp \\<Longrightarrow>\n        a k \\<in> carrier (residue_ring (p ^ k))\\<rbrakk>\n    \\<Longrightarrow> res_seq s (Suc k) 0 k = res_seq s k 0 k", "have \"\\<forall>n. s n \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. s n \\<in> carrier Zp", "by (simp add: assms closed_seqs_memE)"], ["proof (state)\nthis:\n  \\<forall>n. s n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<lbrakk>res_seq s (Suc k) 0 k = res_seq s k n k;\n     s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n     \\<And>p x.\n        \\<lbrakk>padic_integers p;\n         x \\<in> carrier (residue_ring (p ^ 0))\\<rbrakk>\n        \\<Longrightarrow> x = 0;\n     padic_integers p;\n     \\<And>x xa y P.\n        \\<lbrakk>res_seq x xa = y;\n         \\<And>s.\n            \\<lbrakk>x = s; xa = 0; y = s\\<rbrakk> \\<Longrightarrow> P;\n         \\<And>s k.\n            \\<lbrakk>x = s; xa = Suc k;\n             y = const_res_subseq (Suc k) (res_seq s k)\\<rbrakk>\n            \\<Longrightarrow> P\\<rbrakk>\n        \\<Longrightarrow> P;\n     \\<And>a k.\n        a \\<in> carrier Zp \\<Longrightarrow>\n        a k \\<in> carrier (residue_ring (p ^ k))\\<rbrakk>\n    \\<Longrightarrow> res_seq s (Suc k) 0 k = res_seq s k 0 k", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. s n \\<in> carrier Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n. s n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. res_seq s (Suc k) 0 k = res_seq s k 0 k", "by (metis \\<open>res_seq s (Suc k) 0 k = res_seq s k n k\\<close> assms padic_integers.p_res_ring_0' padic_integers_axioms res_seq.elims res_seq_res' residues_closed)"], ["proof (state)\nthis:\n  res_seq s (Suc k) 0 k = res_seq s k 0 k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res_seq s (Suc k) 0 k = res_seq s k 0 k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma acc_point_cres:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(acc_point s (Suc k)) = (const_res (Suc k) (res_seq s k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "have \"Suc k > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc k", "by simp"], ["proof (state)\nthis:\n  0 < Suc k\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "have \"(res_seq s (Suc k)) = const_res_subseq (Suc k) (res_seq s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)", "by simp"], ["proof (state)\nthis:\n  res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "then"], ["proof (chain)\npicking this:\n  res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)", "have \"(const_res_subseq (Suc k) (res_seq s k)) 0 (Suc k) = const_res (Suc k)  (res_seq s k)\""], ["proof (prove)\nusing this:\n  res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)\n\ngoal (1 subgoal):\n 1. const_res_subseq (Suc k) (res_seq s k) 0 (Suc k) =\n    const_res (Suc k) (res_seq s k)", "using assms res_seq_res' padic_integers_axioms"], ["proof (prove)\nusing this:\n  res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq ?s (Suc ?k) ?n (Suc ?k) = const_res (Suc ?k) (res_seq ?s ?k)\n  padic_integers p\n\ngoal (1 subgoal):\n 1. const_res_subseq (Suc k) (res_seq s k) 0 (Suc k) =\n    const_res (Suc k) (res_seq s k)", "by auto"], ["proof (state)\nthis:\n  const_res_subseq (Suc k) (res_seq s k) 0 (Suc k) =\n  const_res (Suc k) (res_seq s k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "have \"acc_point s (Suc k) = res_seq s (Suc k) 0 (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = res_seq s (Suc k) 0 (Suc k)", "using acc_point_def"], ["proof (prove)\nusing this:\n  acc_point ?s ?k = (if ?k = 0 then 0 else res_seq ?s ?k 0 ?k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = res_seq s (Suc k) 0 (Suc k)", "by simp"], ["proof (state)\nthis:\n  acc_point s (Suc k) = res_seq s (Suc k) 0 (Suc k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "then"], ["proof (chain)\npicking this:\n  acc_point s (Suc k) = res_seq s (Suc k) 0 (Suc k)", "have \"acc_point s (Suc k) = (const_res_subseq (Suc k) (res_seq s k)) 0 (Suc k)\""], ["proof (prove)\nusing this:\n  acc_point s (Suc k) = res_seq s (Suc k) 0 (Suc k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res_subseq (Suc k) (res_seq s k) 0 (Suc k)", "by simp"], ["proof (state)\nthis:\n  acc_point s (Suc k) = const_res_subseq (Suc k) (res_seq s k) 0 (Suc k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  acc_point s (Suc k) = const_res_subseq (Suc k) (res_seq s k) 0 (Suc k)\n\ngoal (1 subgoal):\n 1. acc_point s (Suc k) = const_res (Suc k) (res_seq s k)", "by (simp add: \\<open>(const_res_subseq (Suc k) (res_seq s k)) 0 (Suc k) = const_res (Suc k) (res_seq s k)\\<close>)"], ["proof (state)\nthis:\n  acc_point s (Suc k) = const_res (Suc k) (res_seq s k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma acc_point_res:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "proof(cases \"k = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "then"], ["proof (chain)\npicking this:\n  k = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "by (simp add: acc_point_def residue_1_zero)"], ["proof (state)\nthis:\n  residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "assume \"k \\<noteq> 0\""], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "show \"residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "using False acc_point_def assms lessI less_imp_le nat.distinct(1) res_seq_res_1 res_seq_res \n          Zp_defs(3) closed_seqs_memE prime"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  acc_point ?s ?k = (if ?k = 0 then 0 else res_seq ?s ?k 0 ?k)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?n < Suc ?n\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n  0 \\<noteq> Suc ?x2.0\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq ?s (Suc ?k) 0 ?k = res_seq ?s ?k 0 ?k\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq ?s ?k \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  carrier Zp = padic_set p\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n  prime p\n\ngoal (1 subgoal):\n 1. residue (p ^ k) (acc_point s (Suc k)) = acc_point s k", "by (metis padic_set_res_coherent)"], ["proof (state)\nthis:\n  residue (p ^ k) (acc_point s (Suc k)) = acc_point s k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma acc_point_closed:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"acc_point s \\<in>  carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s \\<in> carrier Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. acc_point s \\<in> carrier Zp", "have \"acc_point s \\<in> padic_set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s \\<in> padic_set p", "proof(rule padic_set_memI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m. acc_point s m \\<in> carrier (residue_ring (p ^ m))\n 2. \\<And>m n.\n       m < n \\<Longrightarrow>\n       residue (p ^ m) (acc_point s n) = acc_point s m", "show \"\\<And>m. acc_point s m \\<in> carrier (residue_ring (p ^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "show \"acc_point s m \\<in> carrier (residue_ring (p ^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "proof(cases \"m = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))\n 2. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "case True"], ["proof (state)\nthis:\n  m = 0\n\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))\n 2. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "then"], ["proof (chain)\npicking this:\n  m = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  m = 0\n\ngoal (1 subgoal):\n 1. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "by (simp add: acc_point_def residue_ring_def)"], ["proof (state)\nthis:\n  acc_point s m \\<in> carrier (residue_ring (p ^ m))\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "case False"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "assume \"m \\<noteq> 0\""], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "then"], ["proof (chain)\npicking this:\n  m \\<noteq> 0", "have \"acc_point s m = res_seq s m 0 m\""], ["proof (prove)\nusing this:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. acc_point s m = res_seq s m 0 m", "(*\"res_seq s (Suc k) = const_res_subseq (Suc k) (res_seq s k)\"*)"], ["proof (prove)\nusing this:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. acc_point s m = res_seq s m 0 m", "by (simp add: acc_point_def)"], ["proof (state)\nthis:\n  acc_point s m = res_seq s m 0 m\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0 \\<Longrightarrow>\n    acc_point s m \\<in> carrier (residue_ring (p ^ m))", "then"], ["proof (chain)\npicking this:\n  acc_point s m = res_seq s m 0 m", "show ?thesis"], ["proof (prove)\nusing this:\n  acc_point s m = res_seq s m 0 m\n\ngoal (1 subgoal):\n 1. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "using const_res_range[of \"(const_res_subseq (m-1) s)\" m] acc_point_def[of s m]"], ["proof (prove)\nusing this:\n  acc_point s m = res_seq s m 0 m\n  \\<lbrakk>const_res_subseq (m - 1) s\n           \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   0 < m\\<rbrakk>\n  \\<Longrightarrow> const_res m (const_res_subseq (m - 1) s)\n                    \\<in> carrier (residue_ring (p ^ m))\n  acc_point s m = (if m = 0 then 0 else res_seq s m 0 m)\n\ngoal (1 subgoal):\n 1. acc_point s m \\<in> carrier (residue_ring (p ^ m))", "by (metis False Suc_pred acc_point_cres assms const_res_range neq0_conv res_seq_res)"], ["proof (state)\nthis:\n  acc_point s m \\<in> carrier (residue_ring (p ^ m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  acc_point s m \\<in> carrier (residue_ring (p ^ m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  acc_point s ?m2 \\<in> carrier (residue_ring (p ^ ?m2))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow>\n       residue (p ^ m) (acc_point s n) = acc_point s m", "show \"\\<And>m n. m < n \\<Longrightarrow> residue (p ^ m) (acc_point s n) = acc_point s m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow>\n       residue (p ^ m) (acc_point s n) = acc_point s m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow>\n       residue (p ^ m) (acc_point s n) = acc_point s m", "fix m n::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow>\n       residue (p ^ m) (acc_point s n) = acc_point s m", "assume A: \"m < n\""], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       m < n \\<Longrightarrow>\n       residue (p ^ m) (acc_point s n) = acc_point s m", "show \"residue (p ^ m) (acc_point s n) = acc_point s m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s n) = acc_point s m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s n) = acc_point s m", "obtain l where l_def: \"l = n - m - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l. l = n - m - 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  l = n - m - 1\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s n) = acc_point s m", "have \"residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m", "proof(induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. residue (p ^ m) (acc_point s (Suc (m + 0))) = acc_point s m\n 2. \\<And>l.\n       residue (p ^ m) (acc_point s (Suc (m + l))) =\n       acc_point s m \\<Longrightarrow>\n       residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. residue (p ^ m) (acc_point s (Suc (m + 0))) = acc_point s m\n 2. \\<And>l.\n       residue (p ^ m) (acc_point s (Suc (m + l))) =\n       acc_point s m \\<Longrightarrow>\n       residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s (Suc (m + 0))) = acc_point s m", "by (simp add: acc_point_res assms)"], ["proof (state)\nthis:\n  residue (p ^ m) (acc_point s (Suc (m + 0))) = acc_point s m\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       residue (p ^ m) (acc_point s (Suc (m + l))) =\n       acc_point s m \\<Longrightarrow>\n       residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       residue (p ^ m) (acc_point s (Suc (m + l))) =\n       acc_point s m \\<Longrightarrow>\n       residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "case (Suc l)"], ["proof (state)\nthis:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       residue (p ^ m) (acc_point s (Suc (m + l))) =\n       acc_point s m \\<Longrightarrow>\n       residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "then"], ["proof (chain)\npicking this:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m", "show ?case"], ["proof (prove)\nusing this:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "using Zp_defs(3) acc_point_def add_Suc_right assms  le_add1 closed_seqs_memE nat.distinct(1)\n                padic_integers.prime padic_integers_axioms res_seq_res res_seq_res_1"], ["proof (prove)\nusing this:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m\n  carrier Zp = padic_set p\n  acc_point ?s ?k = (if ?k = 0 then 0 else res_seq ?s ?k 0 ?k)\n  ?m + Suc ?n = Suc (?m + ?n)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?n \\<le> ?n + ?m\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n  0 \\<noteq> Suc ?x2.0\n  padic_integers ?p \\<Longrightarrow> prime ?p\n  padic_integers p\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq ?s ?k \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  res_seq ?s (Suc ?k) 0 ?k = res_seq ?s ?k 0 ?k\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m", "by (metis padic_set_res_coherent)"], ["proof (state)\nthis:\n  residue (p ^ m) (acc_point s (Suc (m + Suc l))) = acc_point s m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s n) = acc_point s m", "then"], ["proof (chain)\npicking this:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m", "show ?thesis"], ["proof (prove)\nusing this:\n  residue (p ^ m) (acc_point s (Suc (m + l))) = acc_point s m\n\ngoal (1 subgoal):\n 1. residue (p ^ m) (acc_point s n) = acc_point s m", "by (metis A Suc_diff_Suc Suc_eq_plus1 add_Suc_right add_diff_inverse_nat diff_diff_left \n              l_def le_less_trans less_not_refl order_less_imp_le)"], ["proof (state)\nthis:\n  residue (p ^ m) (acc_point s n) = acc_point s m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  residue (p ^ m) (acc_point s n) = acc_point s m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?m2 < ?n2 \\<Longrightarrow>\n  residue (p ^ ?m2) (acc_point s ?n2) = acc_point s ?m2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  acc_point s \\<in> padic_set p\n\ngoal (1 subgoal):\n 1. acc_point s \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  acc_point s \\<in> padic_set p", "show ?thesis"], ["proof (prove)\nusing this:\n  acc_point s \\<in> padic_set p\n\ngoal (1 subgoal):\n 1. acc_point s \\<in> carrier Zp", "by (simp add: Zp_defs(3))"], ["proof (state)\nthis:\n  acc_point s \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Choice function for a subsequence of s which converges to a, if it exists\\<close>"], ["", "fun convergent_subseq_fun :: \"padic_int_seq \\<Rightarrow> padic_int \\<Rightarrow> (nat \\<Rightarrow> nat)\" where\n\"convergent_subseq_fun s a 0 = 0\"|\n\"convergent_subseq_fun s a (Suc n) = (SOME k. k > (convergent_subseq_fun s a n)\n                                                \\<and> (s k (Suc n)) = a (Suc n))\""], ["", "definition convergent_subseq :: \"padic_int_seq \\<Rightarrow> padic_int_seq\" where\n\"convergent_subseq s = take_subseq s (convergent_subseq_fun s (acc_point s))\""], ["", "lemma increasing_conv_induction_0_pre:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  shows \"\\<exists>k > convergent_subseq_fun s a n. (s k (Suc n)) = a (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "obtain l::nat where \"l > 0 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l. 0 < l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  0 < l\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "have \"is_subseq_of s (res_seq s (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s (Suc n))", "using assms(1) res_seq_subseq'"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  is_subseq_of ?s (res_seq ?s ?k)\n\ngoal (1 subgoal):\n 1. is_subseq_of s (res_seq s (Suc n))", "by blast"], ["proof (state)\nthis:\n  is_subseq_of s (res_seq s (Suc n))\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "then"], ["proof (chain)\npicking this:\n  is_subseq_of s (res_seq s (Suc n))", "obtain m where \"s m = res_seq s (Suc n) l \\<and> m \\<ge> l\""], ["proof (prove)\nusing this:\n  is_subseq_of s (res_seq s (Suc n))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        s m = res_seq s (Suc n) l \\<and> l \\<le> m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis is_increasing_imp_geq_id is_subseq_of_def take_subseq_def )"], ["proof (state)\nthis:\n  s m = res_seq s (Suc n) l \\<and> l \\<le> m\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "have \"a (Suc n) = res_seq s (Suc n) 0 (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a (Suc n) = res_seq s (Suc n) 0 (Suc n)", "by (simp add: acc_point_def assms(2))"], ["proof (state)\nthis:\n  a (Suc n) = res_seq s (Suc n) 0 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "have \"s m (Suc n) = a (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s m (Suc n) = a (Suc n)", "by (metis \\<open>a (Suc n) = res_seq s (Suc n) 0 (Suc n)\\<close> \\<open>s m = res_seq s (Suc n) l \\<and> l \\<le> m\\<close> assms(1) res_seq_res')"], ["proof (state)\nthis:\n  s m (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  s m (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "using \\<open>0 < l\\<close> \\<open>s m = res_seq s (Suc n) l \\<and> l \\<le> m\\<close> less_le_trans  \\<open>s m (Suc n) = a (Suc n)\\<close>"], ["proof (prove)\nusing this:\n  s m (Suc n) = a (Suc n)\n  0 < l\n  s m = res_seq s (Suc n) l \\<and> l \\<le> m\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  s m (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)", "by (metis \\<open>a (Suc n) = res_seq s (Suc n) 0 (Suc n)\\<close> \\<open>is_subseq_of s (res_seq s (Suc n))\\<close>\n        assms(1) lessI is_subseq_ofE res_seq_res' )"], ["proof (state)\nthis:\n  \\<exists>k>convergent_subseq_fun s a n. s k (Suc n) = a (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma increasing_conv_subseq_fun_0:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"\\<exists>s'. s' = convergent_subseq s\"\n  assumes \"a = acc_point s\"\n  shows \"convergent_subseq_fun s a (Suc n) > convergent_subseq_fun s a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a n < convergent_subseq_fun s a (Suc n)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a n\n    < (SOME k.\n          convergent_subseq_fun s a n < k \\<and> s k (Suc n) = a (Suc n))", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. convergent_subseq_fun s a 0\n    < (SOME k.\n          convergent_subseq_fun s a 0 < k \\<and> s k (Suc 0) = a (Suc 0))\n 2. \\<And>n.\n       convergent_subseq_fun s a n\n       < (SOME k.\n             convergent_subseq_fun s a n < k \\<and>\n             s k (Suc n) = a (Suc n)) \\<Longrightarrow>\n       convergent_subseq_fun s a (Suc n)\n       < (SOME k.\n             convergent_subseq_fun s a (Suc n) < k \\<and>\n             s k (Suc (Suc n)) = a (Suc (Suc n)))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. convergent_subseq_fun s a 0\n    < (SOME k.\n          convergent_subseq_fun s a 0 < k \\<and> s k (Suc 0) = a (Suc 0))\n 2. \\<And>n.\n       convergent_subseq_fun s a n\n       < (SOME k.\n             convergent_subseq_fun s a n < k \\<and>\n             s k (Suc n) = a (Suc n)) \\<Longrightarrow>\n       convergent_subseq_fun s a (Suc n)\n       < (SOME k.\n             convergent_subseq_fun s a (Suc n) < k \\<and>\n             s k (Suc (Suc n)) = a (Suc (Suc n)))", "have \"convergent_subseq_fun s a 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a 0 = 0", "by simp"], ["proof (state)\nthis:\n  convergent_subseq_fun s a 0 = 0\n\ngoal (2 subgoals):\n 1. convergent_subseq_fun s a 0\n    < (SOME k.\n          convergent_subseq_fun s a 0 < k \\<and> s k (Suc 0) = a (Suc 0))\n 2. \\<And>n.\n       convergent_subseq_fun s a n\n       < (SOME k.\n             convergent_subseq_fun s a n < k \\<and>\n             s k (Suc n) = a (Suc n)) \\<Longrightarrow>\n       convergent_subseq_fun s a (Suc n)\n       < (SOME k.\n             convergent_subseq_fun s a (Suc n) < k \\<and>\n             s k (Suc (Suc n)) = a (Suc (Suc n)))", "then"], ["proof (chain)\npicking this:\n  convergent_subseq_fun s a 0 = 0", "show ?case"], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a 0 = 0\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a 0\n    < (SOME k.\n          convergent_subseq_fun s a 0 < k \\<and> s k (Suc 0) = a (Suc 0))", "by (smt assms(1) assms(3) less_Suc_eq less_Suc_eq_0_disj increasing_conv_induction_0_pre padic_integers_axioms someI_ex)"], ["proof (state)\nthis:\n  convergent_subseq_fun s a 0\n  < (SOME k. convergent_subseq_fun s a 0 < k \\<and> s k (Suc 0) = a (Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       convergent_subseq_fun s a n\n       < (SOME k.\n             convergent_subseq_fun s a n < k \\<and>\n             s k (Suc n) = a (Suc n)) \\<Longrightarrow>\n       convergent_subseq_fun s a (Suc n)\n       < (SOME k.\n             convergent_subseq_fun s a (Suc n) < k \\<and>\n             s k (Suc (Suc n)) = a (Suc (Suc n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       convergent_subseq_fun s a n\n       < (SOME k.\n             convergent_subseq_fun s a n < k \\<and>\n             s k (Suc n) = a (Suc n)) \\<Longrightarrow>\n       convergent_subseq_fun s a (Suc n)\n       < (SOME k.\n             convergent_subseq_fun s a (Suc n) < k \\<and>\n             s k (Suc (Suc n)) = a (Suc (Suc n)))", "case (Suc k)"], ["proof (state)\nthis:\n  convergent_subseq_fun s a k\n  < (SOME ka.\n        convergent_subseq_fun s a k < ka \\<and> s ka (Suc k) = a (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       convergent_subseq_fun s a n\n       < (SOME k.\n             convergent_subseq_fun s a n < k \\<and>\n             s k (Suc n) = a (Suc n)) \\<Longrightarrow>\n       convergent_subseq_fun s a (Suc n)\n       < (SOME k.\n             convergent_subseq_fun s a (Suc n) < k \\<and>\n             s k (Suc (Suc n)) = a (Suc (Suc n)))", "then"], ["proof (chain)\npicking this:\n  convergent_subseq_fun s a k\n  < (SOME ka.\n        convergent_subseq_fun s a k < ka \\<and> s ka (Suc k) = a (Suc k))", "show ?case"], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a k\n  < (SOME ka.\n        convergent_subseq_fun s a k < ka \\<and> s ka (Suc k) = a (Suc k))\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a (Suc k)\n    < (SOME ka.\n          convergent_subseq_fun s a (Suc k) < ka \\<and>\n          s ka (Suc (Suc k)) = a (Suc (Suc k)))", "by (metis (mono_tags, lifting) assms(1) assms(3) increasing_conv_induction_0_pre someI_ex)"], ["proof (state)\nthis:\n  convergent_subseq_fun s a (Suc k)\n  < (SOME ka.\n        convergent_subseq_fun s a (Suc k) < ka \\<and>\n        s ka (Suc (Suc k)) = a (Suc (Suc k)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma increasing_conv_subseq_fun:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  assumes \"\\<exists>s'. s' = convergent_subseq s\"\n  shows \"is_increasing (convergent_subseq_fun s a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_increasing (convergent_subseq_fun s a)", "by (metis assms(1) assms(2) increasing_conv_subseq_fun_0 is_increasingI lift_Suc_mono_less)"], ["", "lemma convergent_subseq_is_subseq:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"is_subseq_of s (convergent_subseq s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subseq_of s (convergent_subseq s)", "using assms convergent_subseq_def increasing_conv_subseq_fun is_subseqI"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  convergent_subseq ?s =\n  take_subseq ?s (convergent_subseq_fun ?s (acc_point ?s))\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>; ?a = acc_point ?s;\n   \\<exists>s'. s' = convergent_subseq ?s\\<rbrakk>\n  \\<Longrightarrow> is_increasing (convergent_subseq_fun ?s ?a)\n  \\<lbrakk>is_increasing ?f; ?s' = take_subseq ?s ?f\\<rbrakk>\n  \\<Longrightarrow> is_subseq_of ?s ?s'\n\ngoal (1 subgoal):\n 1. is_subseq_of s (convergent_subseq s)", "by blast"], ["", "lemma is_closed_seq_conv_subseq:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"(convergent_subseq s) \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by (simp add: assms convergent_subseq_def closed_seqs_memI closed_seqs_memE take_subseq_def)"], ["", "lemma convergent_subseq_res:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  shows \"convergent_subseq s l l = residue (p ^ l) (acc_point s l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "have \"\\<exists>k. convergent_subseq s l =  s k \\<and> s k l = a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "have \"convergent_subseq s l = s (convergent_subseq_fun s a l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s l = s (convergent_subseq_fun s a l)", "by (simp add: assms(2) convergent_subseq_def take_subseq_def)"], ["proof (state)\nthis:\n  convergent_subseq s l = s (convergent_subseq_fun s a l)\n\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "obtain k where kdef: \"(convergent_subseq_fun s a l) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        convergent_subseq_fun s a l = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  convergent_subseq_fun s a l = k\n\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "have \"convergent_subseq s l = s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s l = s k", "by (simp add: \\<open>convergent_subseq s l = s (convergent_subseq_fun s a l)\\<close> kdef)"], ["proof (state)\nthis:\n  convergent_subseq s l = s k\n\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "have \"s k l = a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s k l = a l", "proof(cases \"l = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow> s k l = a l\n 2. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "case True"], ["proof (state)\nthis:\n  l = 0\n\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow> s k l = a l\n 2. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "then"], ["proof (chain)\npicking this:\n  l = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  l = 0\n\ngoal (1 subgoal):\n 1. s k l = a l", "using acc_point_def assms(1) assms(2)"], ["proof (prove)\nusing this:\n  l = 0\n  acc_point ?s ?k = (if ?k = 0 then 0 else res_seq ?s ?k 0 ?k)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n\ngoal (1 subgoal):\n 1. s k l = a l", "by (metis closed_seqs_memE p_res_ring_0' residues_closed)"], ["proof (state)\nthis:\n  s k l = a l\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "case False"], ["proof (state)\nthis:\n  l \\<noteq> 0\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "have \"0 < l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < l", "using False"], ["proof (prove)\nusing this:\n  l \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < l", "by blast"], ["proof (state)\nthis:\n  0 < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "then"], ["proof (chain)\npicking this:\n  0 < l", "have \"k > convergent_subseq_fun s a (l-1)\""], ["proof (prove)\nusing this:\n  0 < l\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a (l - 1) < k", "by (metis One_nat_def Suc_pred assms(1) assms(2) increasing_conv_subseq_fun_0 kdef)"], ["proof (state)\nthis:\n  convergent_subseq_fun s a (l - 1) < k\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "then"], ["proof (chain)\npicking this:\n  convergent_subseq_fun s a (l - 1) < k", "have \"s k l = a l\""], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a (l - 1) < k\n\ngoal (1 subgoal):\n 1. s k l = a l", "using kdef \n        assms(1) assms(2) convergent_subseq_fun.simps(2) increasing_conv_induction_0_pre \n        padic_integers_axioms someI_ex One_nat_def  \\<open>0 < l\\<close> increasing_conv_induction_0_pre"], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a (l - 1) < k\n  convergent_subseq_fun s a l = k\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n  convergent_subseq_fun ?s ?a (Suc ?n) =\n  (SOME k.\n      convergent_subseq_fun ?s ?a ?n < k \\<and> ?s k (Suc ?n) = ?a (Suc ?n))\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?a = acc_point ?s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k>convergent_subseq_fun ?s ?a ?n.\n                       ?s k (Suc ?n) = ?a (Suc ?n)\n  padic_integers p\n  \\<exists>x. ?P x \\<Longrightarrow> ?P (SOME x. ?P x)\n  1 = Suc 0\n  0 < l\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?a = acc_point ?s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k>convergent_subseq_fun ?s ?a ?n.\n                       ?s k (Suc ?n) = ?a (Suc ?n)\n\ngoal (1 subgoal):\n 1. s k l = a l", "by (smt Suc_pred)"], ["proof (state)\nthis:\n  s k l = a l\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow> s k l = a l", "then"], ["proof (chain)\npicking this:\n  s k l = a l", "show ?thesis"], ["proof (prove)\nusing this:\n  s k l = a l\n\ngoal (1 subgoal):\n 1. s k l = a l", "by simp"], ["proof (state)\nthis:\n  s k l = a l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s k l = a l\n\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "then"], ["proof (chain)\npicking this:\n  s k l = a l", "have \"convergent_subseq s l =  s k \\<and> s k l = a l\""], ["proof (prove)\nusing this:\n  s k l = a l\n\ngoal (1 subgoal):\n 1. convergent_subseq s l = s k \\<and> s k l = a l", "using \\<open>convergent_subseq s l = s k\\<close>"], ["proof (prove)\nusing this:\n  s k l = a l\n  convergent_subseq s l = s k\n\ngoal (1 subgoal):\n 1. convergent_subseq s l = s k \\<and> s k l = a l", "by blast"], ["proof (state)\nthis:\n  convergent_subseq s l = s k \\<and> s k l = a l\n\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "thus ?thesis"], ["proof (prove)\nusing this:\n  convergent_subseq s l = s k \\<and> s k l = a l\n\ngoal (1 subgoal):\n 1. \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l\n\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l\n\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "using acc_point_closed assms(1) assms(2) Zp_defs(3) prime padic_set_res_coherent"], ["proof (prove)\nusing this:\n  \\<exists>k. convergent_subseq s l = s k \\<and> s k l = a l\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  acc_point ?s \\<in> carrier Zp\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n  carrier Zp = padic_set p\n  prime p\n  \\<lbrakk>?f \\<in> padic_set ?p; ?m \\<le> ?n; prime ?p\\<rbrakk>\n  \\<Longrightarrow> residue (?p ^ ?m) (?f ?n) = ?f ?m\n\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "by force"], ["proof (state)\nthis:\n  convergent_subseq s l l = residue (p ^ l) (acc_point s l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergent_subseq_res':\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"n > l\"\n  shows \"convergent_subseq s n l = convergent_subseq s l l \""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "have 0: \"convergent_subseq s l l = residue (p ^ l) (acc_point s l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "using assms(1) convergent_subseq_res"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?a = acc_point ?s\\<rbrakk>\n  \\<Longrightarrow> convergent_subseq ?s ?l ?l =\n                    residue (p ^ ?l) (acc_point ?s ?l)\n\ngoal (1 subgoal):\n 1. convergent_subseq s l l = residue (p ^ l) (acc_point s l)", "by auto"], ["proof (state)\nthis:\n  convergent_subseq s l l = residue (p ^ l) (acc_point s l)\n\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "have 1: \"convergent_subseq s n n = residue (p ^ n) (acc_point s n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s n n = residue (p ^ n) (acc_point s n)", "by (simp add: assms(1) convergent_subseq_res)"], ["proof (state)\nthis:\n  convergent_subseq s n n = residue (p ^ n) (acc_point s n)\n\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "have 2: \"convergent_subseq s n l = residue (p ^ l) (convergent_subseq s l l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s n l = residue (p ^ l) (convergent_subseq s l l)", "using 0 assms 1 Zp_defs(3) acc_point_closed is_closed_seq_conv_subseq \n        closed_seqs_memE le_refl less_imp_le_nat prime"], ["proof (prove)\nusing this:\n  convergent_subseq s l l = residue (p ^ l) (acc_point s l)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  l < n\n  convergent_subseq s n n = residue (p ^ n) (acc_point s n)\n  carrier Zp = padic_set p\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  acc_point ?s \\<in> carrier Zp\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  convergent_subseq ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n  ?n \\<le> ?n\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  prime p\n\ngoal (1 subgoal):\n 1. convergent_subseq s n l = residue (p ^ l) (convergent_subseq s l l)", "by (metis padic_set_res_coherent)"], ["proof (state)\nthis:\n  convergent_subseq s n l = residue (p ^ l) (convergent_subseq s l l)\n\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "using 0 1 2 Zp_defs(3) assms(1) is_closed_seq_conv_subseq closed_seqs_memE le_refl prime"], ["proof (prove)\nusing this:\n  convergent_subseq s l l = residue (p ^ l) (acc_point s l)\n  convergent_subseq s n n = residue (p ^ n) (acc_point s n)\n  convergent_subseq s n l = residue (p ^ l) (convergent_subseq s l l)\n  carrier Zp = padic_set p\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  convergent_subseq ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n  ?n \\<le> ?n\n  prime p\n\ngoal (1 subgoal):\n 1. convergent_subseq s n l = convergent_subseq s l l", "by (metis padic_set_res_coherent)"], ["proof (state)\nthis:\n  convergent_subseq s n l = convergent_subseq s l l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergent_subsequence_is_convergent:\n  assumes \"s \\<in> closed_seqs Zp\"\n  assumes \"a = acc_point s\"\n  shows \"Zp_converges_to (convergent_subseq s) (acc_point s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (convergent_subseq s) (acc_point s)", "(*\\<And>n. \\<exists>N. \\<forall>k > N. s k n = a n\"*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to (convergent_subseq s) (acc_point s)", "proof(rule Zp_converges_toI)"], ["proof (state)\ngoal (3 subgoals):\n 1. convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. acc_point s \\<in> carrier Zp\n 3. \\<And>n.\n       \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "show \"acc_point s \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s \\<in> carrier Zp", "using acc_point_closed assms"], ["proof (prove)\nusing this:\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  acc_point ?s \\<in> carrier Zp\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n\ngoal (1 subgoal):\n 1. acc_point s \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  acc_point s \\<in> carrier Zp\n\ngoal (2 subgoals):\n 1. convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "show \"convergent_subseq s \\<in> carrier (Zp\\<^bsup>\\<omega>\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "using is_closed_seq_conv_subseq assms"], ["proof (prove)\nusing this:\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  convergent_subseq ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n\ngoal (1 subgoal):\n 1. convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by simp"], ["proof (state)\nthis:\n  convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "show \"\\<And>n. \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "show \"\\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>k>N. convergent_subseq s k 0 = acc_point s 0\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>N. \\<forall>k>N. convergent_subseq s k 0 = acc_point s 0\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. convergent_subseq s k 0 = acc_point s 0", "using acc_point_closed[of s] assms convergent_subseq_def closed_seqs_memE of_nat_0 \n              ord_pos take_subseq_def zero_below_ord is_closed_seq_conv_subseq[of s]"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  acc_point s \\<in> carrier Zp\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n  convergent_subseq ?s =\n  take_subseq ?s (convergent_subseq_fun ?s (acc_point ?s))\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n  of_nat 0 = (0::?'a)\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> ord_Zp ?x\n  take_subseq ?s ?f = (\\<lambda>k. ?s (?f k))\n  \\<lbrakk>?x \\<in> carrier Zp; int ?n \\<le> ord_Zp ?x\\<rbrakk>\n  \\<Longrightarrow> ?x ?n = 0\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  convergent_subseq s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. convergent_subseq s k 0 = acc_point s 0", "by (metis residue_of_zero(2))"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>k>N. convergent_subseq s k 0 = acc_point s 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "have \"acc_point s (Suc n) = res_seq s (Suc n) 0 (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_point s (Suc n) = res_seq s (Suc n) 0 (Suc n)", "by (simp add: acc_point_def)"], ["proof (state)\nthis:\n  acc_point s (Suc n) = res_seq s (Suc n) 0 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "obtain k where kdef: \"convergent_subseq_fun s a (Suc n) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        convergent_subseq_fun s a (Suc n) = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  convergent_subseq_fun s a (Suc n) = k\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "have \"Suc n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc n", "by simp"], ["proof (state)\nthis:\n  0 < Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "then"], ["proof (chain)\npicking this:\n  0 < Suc n", "have \"k > (convergent_subseq_fun s a n)\""], ["proof (prove)\nusing this:\n  0 < Suc n\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a n < k", "using assms(1) assms(2) increasing_conv_subseq_fun_0 kdef"], ["proof (prove)\nusing this:\n  0 < Suc n\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  a = acc_point s\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   \\<exists>s'. s' = convergent_subseq ?s; ?a = acc_point ?s\\<rbrakk>\n  \\<Longrightarrow> convergent_subseq_fun ?s ?a ?n\n                    < convergent_subseq_fun ?s ?a (Suc ?n)\n  convergent_subseq_fun s a (Suc n) = k\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a n < k", "by blast"], ["proof (state)\nthis:\n  convergent_subseq_fun s a n < k\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "then"], ["proof (chain)\npicking this:\n  convergent_subseq_fun s a n < k", "have \" k > (convergent_subseq_fun s a n) \\<and> (s k (Suc n)) = a (Suc n)\""], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a n < k\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a n < k \\<and> s k (Suc n) = a (Suc n)", "using kdef"], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a n < k\n  convergent_subseq_fun s a (Suc n) = k\n\ngoal (1 subgoal):\n 1. convergent_subseq_fun s a n < k \\<and> s k (Suc n) = a (Suc n)", "by (metis (mono_tags, lifting) assms(1) assms(2) convergent_subseq_fun.simps(2) increasing_conv_induction_0_pre someI_ex)"], ["proof (state)\nthis:\n  convergent_subseq_fun s a n < k \\<and> s k (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "have \"s k (Suc n) = a (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s k (Suc n) = a (Suc n)", "using \\<open>convergent_subseq_fun s a n < k \\<and> s k (Suc n) = a (Suc n)\\<close>"], ["proof (prove)\nusing this:\n  convergent_subseq_fun s a n < k \\<and> s k (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. s k (Suc n) = a (Suc n)", "by blast"], ["proof (state)\nthis:\n  s k (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "then"], ["proof (chain)\npicking this:\n  s k (Suc n) = a (Suc n)", "have \"convergent_subseq s (Suc n) (Suc n) = a (Suc n)\""], ["proof (prove)\nusing this:\n  s k (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. convergent_subseq s (Suc n) (Suc n) = a (Suc n)", "by (metis assms(2) convergent_subseq_def kdef take_subseq_def)"], ["proof (state)\nthis:\n  convergent_subseq s (Suc n) (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "then"], ["proof (chain)\npicking this:\n  convergent_subseq s (Suc n) (Suc n) = a (Suc n)", "have \"\\<forall>l > n.  convergent_subseq s l (Suc n) = a (Suc n)\""], ["proof (prove)\nusing this:\n  convergent_subseq s (Suc n) (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<forall>l>n. convergent_subseq s l (Suc n) = a (Suc n)", "using convergent_subseq_res'"], ["proof (prove)\nusing this:\n  convergent_subseq s (Suc n) (Suc n) = a (Suc n)\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>; ?l < ?n\\<rbrakk>\n  \\<Longrightarrow> convergent_subseq ?s ?n ?l = convergent_subseq ?s ?l ?l\n\ngoal (1 subgoal):\n 1. \\<forall>l>n. convergent_subseq s l (Suc n) = a (Suc n)", "by (metis Suc_lessI assms(1))"], ["proof (state)\nthis:\n  \\<forall>l>n. convergent_subseq s l (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>k>N.\n             convergent_subseq s k n = acc_point s n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>l>n. convergent_subseq s l (Suc n) = a (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>l>n. convergent_subseq s l (Suc n) = a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<forall>l>n. convergent_subseq s l (Suc n) = a (Suc n)\n  a = acc_point s\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>k>N. convergent_subseq s k (Suc n) = acc_point s (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>k>N. convergent_subseq s k n = acc_point s n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>k>N. convergent_subseq s k ?n2 = acc_point s ?n2\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Zp_is_compact:\n  assumes \"s \\<in> closed_seqs Zp\"\n  shows \"\\<exists>s'. is_subseq_of s s' \\<and> (Zp_converges_to s' (acc_point s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'. is_subseq_of s s' \\<and> Zp_converges_to s' (acc_point s)", "using assms convergent_subseq_is_subseq convergent_subsequence_is_convergent"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  is_subseq_of ?s (convergent_subseq ?s)\n  \\<lbrakk>?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>;\n   ?a = acc_point ?s\\<rbrakk>\n  \\<Longrightarrow> Zp_converges_to (convergent_subseq ?s) (acc_point ?s)\n\ngoal (1 subgoal):\n 1. \\<exists>s'. is_subseq_of s s' \\<and> Zp_converges_to s' (acc_point s)", "by blast"], ["", "end"], ["", "end"]]}