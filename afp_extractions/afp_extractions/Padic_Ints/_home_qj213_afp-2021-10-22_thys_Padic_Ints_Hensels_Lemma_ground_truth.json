{"file_name": "/home/qj213/afp-2021-10-22/thys/Padic_Ints/Hensels_Lemma.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Padic_Ints", "problem_names": ["lemma(in ring) minus_sum:\n  assumes \"a \\<in> carrier R\"\n  assumes \"b \\<in> carrier R\"\n  shows \"\\<ominus> (a \\<oplus> b) = \\<ominus> a \\<oplus> \\<ominus> b\"", "lemma poly_diff_val:\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  shows \"val_Zp (f\\<bullet>a \\<ominus> f\\<bullet>b) \\<ge> val_Zp (a \\<ominus> b)\"", "lemma divide_closed:\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> carrier Zp\"\n  assumes \"y \\<noteq> \\<zero>\"\n  shows \"divide x y \\<in> carrier Zp\"", "lemma divide_formula:\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> carrier Zp\"\n  assumes \"y \\<noteq> \\<zero>\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"y \\<otimes> divide x y = x\"", "lemma divide_nonzero:\n  assumes \"x \\<in> nonzero Zp\"\n  assumes \"y \\<in> nonzero Zp\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"divide x y \\<in> nonzero Zp\"", "lemma val_of_divide:\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> nonzero Zp\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"val_Zp (divide x y) = val_Zp x - val_Zp y\"", "lemma val_of_divide':\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> carrier  Zp\"\n  assumes \"y \\<noteq> \\<zero>\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"val_Zp (divide x y) = val_Zp x - val_Zp y\"", "lemma(in UP_cring) taylor_deg_1_eval''':\n  assumes \"f \\<in> carrier P\"\n  assumes \"a \\<in> carrier R\"\n  assumes \"b \\<in> carrier R\"\n  assumes \"c = to_fun (shift (2::nat) (T\\<^bsub>a\\<^esub> f)) (\\<ominus>b)\"\n  assumes \"b \\<otimes> (deriv f a) = (to_fun f a)\"\n  shows \"to_fun f (a \\<ominus> b) =  (c \\<otimes> b[^](2::nat))\"", "lemma(in padic_integers) res_diff_zero_fact:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"(a \\<ominus> b) k = 0\"\n  shows \"a k = b k\" \"a k \\<ominus>\\<^bsub>Zp_res_ring k\\<^esub> b k = 0\"", "lemma(in padic_integers) res_diff_zero_fact':\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"a k = b k\"\n  shows \"a k \\<ominus>\\<^bsub>Zp_res_ring k\\<^esub> b k = 0\"", "lemma(in padic_integers) res_diff_zero_fact'':\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"a k = b k\"\n  shows \"(a \\<ominus> b) k = 0\"", "lemma(in padic_integers) is_Zp_cauchyI': \nassumes \"s \\<in> closed_seqs Zp\"\nassumes \"\\<forall>n::nat. \\<exists> k::int.\\<forall>m.  m \\<ge>  k \\<longrightarrow> val_Zp (s (Suc m) \\<ominus> s m) \\<ge> n\"\nshows \"is_Zp_cauchy s\"", "lemma f'_closed:\n\"f' \\<in> carrier Zp_x\"", "lemma f'_vals_closed:\n  assumes \"a \\<in> carrier Zp\"\n  shows \"f'\\<bullet>a \\<in> carrier Zp\"", "lemma fa_closed:\n\"(f\\<bullet>a) \\<in> carrier Zp\"", "lemma f'a_closed:\n\"(f'\\<bullet>a) \\<in> carrier Zp\"", "lemma fa_nonzero':\n\"(f\\<bullet>a) \\<in> nonzero Zp\"", "lemma f'a_nonzero[simp]:\n\"(f'\\<bullet>a) \\<noteq> \\<zero>\"", "lemma f'a_nonzero':\n\"(f'\\<bullet>a) \\<in> nonzero Zp\"", "lemma f'a_not_infinite[simp]: \n\"val_Zp (f'\\<bullet>a) \\<noteq> \\<infinity>\"", "lemma f'a_nonneg_val[simp]: \n\"val_Zp ((f'\\<bullet>a)) \\<ge> 0\"", "lemma hensel_hypothesis_weakened:\n\"val_Zp (f\\<bullet>a) > val_Zp (f'\\<bullet>a)\"", "lemma newton_step_closed:\n  \"newton_step a \\<in> carrier Zp\"", "lemma hensel_factor_id:\n\"(divide (f\\<bullet>a) (f'\\<bullet>a)) \\<otimes> ((f'\\<bullet>a)) = (f\\<bullet>a)\"", "lemma t_pos[simp]:\n\"t > 0\"", "lemma t_neq_infty[simp]:\n\"t \\<noteq> \\<infinity>\"", "lemma t_times_pow_pos[simp]:\n\"(2^(n::nat))*t > 0\"", "lemma newton_seq_props_induct:\nshows \"\\<And>k. k \\<le> n \\<Longrightarrow> (ns k) \\<in> carrier Zp\n              \\<and> val_Zp (f'\\<bullet>(ns k)) = val_Zp ((f'\\<bullet>a))\n              \\<and> val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t\"", "lemma newton_seq_closed:\nshows \"ns m \\<in> carrier Zp\"", "lemma f_of_newton_seq_closed:\nshows \"f \\<bullet> ns m \\<in> carrier Zp\"", "lemma newton_seq_fact1[simp]:\n\" val_Zp (f'\\<bullet>(ns k)) = val_Zp ((f'\\<bullet>a))\"", "lemma newton_seq_fact2:\n\"\\<And>k.  val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t\"", "lemma newton_seq_fact3:\n\"val_Zp (f\\<bullet>(ns l)) \\<ge> val_Zp (f'\\<bullet>(ns l))\"", "lemma newton_seq_fact4[simp]:\n  assumes \"f\\<bullet>(ns l) \\<noteq>\\<zero>\"\n  shows \"val_Zp (f\\<bullet>(ns l)) \\<ge> val_Zp (f'\\<bullet>(ns l))\"", "lemma newton_seq_fact5:\n\"divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\"", "lemma newton_seq_fact6:\n\"(f'\\<bullet>(ns l)) \\<in> nonzero Zp\"", "lemma newton_seq_fact7:\n \"(ns (Suc n)) \\<ominus> (ns n) = \\<ominus>divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n))\"", "lemma newton_seq_fact8:\n  assumes \"f\\<bullet>(ns l) \\<noteq>\\<zero>\"\n  shows \"divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> nonzero Zp\"", "lemma newton_seq_fact9:\n  assumes \"f\\<bullet>(ns n) \\<noteq>\\<zero>\"\n  shows \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) = val_Zp (f\\<bullet>(ns n)) - val_Zp (f'\\<bullet>(ns n))\"", "lemma newton_seq_is_Zp_cauchy_0:\nassumes \"\\<And>k. f\\<bullet>(ns k) \\<noteq>\\<zero>\"\nshows \"is_Zp_cauchy ns\"", "lemma eventually_zero:\n\"f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow> f \\<bullet> ns (k + Suc m) = \\<zero>\"", "lemma newton_seq_is_Zp_cauchy:\n\"is_Zp_cauchy ns\"", "lemma pre_hensel:\n\"val_Zp (a \\<ominus> (ns n)) >  val_Zp (f'\\<bullet>a)\"\n\"\\<exists>N. \\<forall>n. n> N \\<longrightarrow> (val_Zp (a \\<ominus> (ns n)) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\"\n\"val_Zp (f'\\<bullet>(ns n)) = val_Zp (f'\\<bullet>a)\"", "lemma hensel_seq_comp_f:\n \"res_lim ((to_fun f) \\<circ> ns) = \\<zero>\"", "lemma full_hensels_lemma:\n  obtains \\<alpha> where\n       \"f\\<bullet>\\<alpha> = \\<zero>\" and \"\\<alpha> \\<in> carrier Zp\"\n       \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp (f'\\<bullet>a)\"\n       \"(val_Zp (a \\<ominus> \\<alpha>) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\"\n       \"val_Zp (f'\\<bullet>\\<alpha>) = val_Zp (f'\\<bullet>a)\"", "lemma hensels_lemma:\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"(pderiv f)\\<bullet>a \\<noteq> \\<zero>\"\n  assumes \"f\\<bullet>a \\<noteq>\\<zero>\"\n  assumes \"val_Zp (f\\<bullet>a) > 2* val_Zp ((pderiv f)\\<bullet>a)\"\n  obtains \\<alpha> where\n       \"f\\<bullet>\\<alpha> = \\<zero>\" and \"\\<alpha> \\<in> carrier Zp\" \n       \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\"\n       \"val_Zp (a \\<ominus> \\<alpha>) = val_Zp (divide (f\\<bullet>a) ((pderiv f)\\<bullet>a))\"\n       \"val_Zp ((pderiv f)\\<bullet>\\<alpha>) = val_Zp ((pderiv f)\\<bullet>a)\"", "lemma hensels_lemma_unique_root:\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"(pderiv f)\\<bullet>a \\<noteq> \\<zero>\"\n  assumes \"f\\<bullet>a \\<noteq>\\<zero>\"\n  assumes \"(val_Zp (f\\<bullet>a) > 2* val_Zp ((pderiv f)\\<bullet>a))\"\n  assumes \"f\\<bullet>\\<alpha> = \\<zero>\" \n  assumes \"\\<alpha> \\<in> carrier Zp\" \n  assumes \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\"\n  assumes \"f\\<bullet>\\<beta> = \\<zero>\" \n  assumes \"\\<beta> \\<in> carrier Zp\" \n  assumes \"val_Zp (a \\<ominus> \\<beta>) > val_Zp ((pderiv f)\\<bullet>a)\"\n  assumes \"val_Zp ((pderiv f)\\<bullet>\\<alpha>) = val_Zp ((pderiv f)\\<bullet>a)\"\n  shows \"\\<alpha> = \\<beta>\"", "lemma hensels_lemma':\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"val_Zp (f\\<bullet>a) > 2*val_Zp ((pderiv f)\\<bullet>a)\"\n  shows \"\\<exists>!\\<alpha> \\<in> carrier Zp. f\\<bullet>\\<alpha> = \\<zero> \\<and> val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\"", "lemma Zp_square_root_criterion:\n  assumes \"p \\<noteq> 2\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"val_Zp b \\<ge> val_Zp a\"\n  assumes \"a \\<noteq> \\<zero>\"\n  assumes \"b \\<noteq> \\<zero>\"\n  shows \"\\<exists>y \\<in> carrier Zp. a[^](2::nat) \\<oplus> \\<p>\\<otimes>b[^](2::nat) = (y [^]\\<^bsub>Zp\\<^esub> (2::nat))\"", "lemma Zp_semialg_eq:\n  assumes \"a \\<in> nonzero Zp\"\n  shows \"\\<exists>y \\<in> carrier Zp. \\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat)) = (y [^] (2::nat))\"", "lemma Zp_nth_root_lemma:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"a \\<noteq> \\<one>\"\n  assumes \"n > 1\"\n  assumes \"val_Zp (\\<one> \\<ominus> a) > 2*val_Zp ([(n::nat)]\\<cdot> \\<one>)\"\n  shows \"\\<exists> b \\<in> carrier Zp. b[^]n = a\""], "translations": [["", "lemma(in ring) minus_sum:\n  assumes \"a \\<in> carrier R\"\n  assumes \"b \\<in> carrier R\"\n  shows \"\\<ominus> (a \\<oplus> b) = \\<ominus> a \\<oplus> \\<ominus> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<ominus> (a \\<oplus> b) = \\<ominus> a \\<oplus> \\<ominus> b", "by (simp add: assms(1) assms(2) local.minus_add)"], ["", "context padic_integers\nbegin"], ["", "lemma poly_diff_val:\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  shows \"val_Zp (f\\<bullet>a \\<ominus> f\\<bullet>b) \\<ge> val_Zp (a \\<ominus> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "obtain c where c_def: \"c \\<in> carrier Zp \\<and> (f\\<bullet>a \\<ominus> f\\<bullet>b) = (a \\<ominus> b) \\<otimes> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> carrier Zp \\<and>\n        f \\<bullet> a \\<ominus> f \\<bullet> b =\n        (a \\<ominus> b) \\<otimes> c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> carrier Zp \\<and>\n        f \\<bullet> a \\<ominus> f \\<bullet> b =\n        (a \\<ominus> b) \\<otimes> c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson to_fun_diff_factor)"], ["proof (state)\nthis:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> a \\<ominus> f \\<bullet> b = (a \\<ominus> b) \\<otimes> c\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "have 1: \"val_Zp c \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> val_Zp c", "using c_def val_pos"], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> a \\<ominus> f \\<bullet> b = (a \\<ominus> b) \\<otimes> c\n  ?x \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp ?x\n\ngoal (1 subgoal):\n 1. 0 \\<le> val_Zp c", "by blast"], ["proof (state)\nthis:\n  0 \\<le> val_Zp c\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "have 2: \"val_Zp (f\\<bullet>a \\<ominus> f\\<bullet>b) = val_Zp (a \\<ominus> b) + (val_Zp c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b) =\n    val_Zp (a \\<ominus> b) + val_Zp c", "using c_def val_Zp_mult"], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> a \\<ominus> f \\<bullet> b = (a \\<ominus> b) \\<otimes> c\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp (?x \\<otimes> ?y) = val_Zp ?x + val_Zp ?y\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b) =\n    val_Zp (a \\<ominus> b) + val_Zp c", "by (simp add: assms(2) assms(3))"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b) =\n  val_Zp (a \\<ominus> b) + val_Zp c\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b) =\n  val_Zp (a \\<ominus> b) + val_Zp c", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b) =\n  val_Zp (a \\<ominus> b) + val_Zp c\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "using \"1\""], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b) =\n  val_Zp (a \\<ominus> b) + val_Zp c\n  0 \\<le> val_Zp c\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> b)\n    \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)", "by auto"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> b)\n  \\<le> val_Zp (f \\<bullet> a \\<ominus> f \\<bullet> b)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Restricted p-adic division\\<close>"], ["", "definition divide where\n\"divide x y = (if x = \\<zero> then \\<zero> else \n              (\\<p>[^](nat (ord_Zp x - ord_Zp y)) \\<otimes> ac_Zp x \\<otimes> (inv ac_Zp y)))\""], ["", "lemma divide_closed:\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> carrier Zp\"\n  assumes \"y \\<noteq> \\<zero>\"\n  shows \"divide x y \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide x y \\<in> carrier Zp", "unfolding divide_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x = \\<zero> then \\<zero>\n     else [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n          ac_Zp x \\<otimes>\n          inv ac_Zp y)\n    \\<in> carrier Zp", "apply(cases \"x = \\<zero>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. x = \\<zero> \\<Longrightarrow>\n    (if x = \\<zero> then \\<zero>\n     else [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n          ac_Zp x \\<otimes>\n          inv ac_Zp y)\n    \\<in> carrier Zp\n 2. x \\<noteq> \\<zero> \\<Longrightarrow>\n    (if x = \\<zero> then \\<zero>\n     else [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n          ac_Zp x \\<otimes>\n          inv ac_Zp y)\n    \\<in> carrier Zp", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow>\n    (if x = \\<zero> then \\<zero>\n     else [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n          ac_Zp x \\<otimes>\n          inv ac_Zp y)\n    \\<in> carrier Zp", "using assms ac_Zp_is_Unit"], ["proof (prove)\nusing this:\n  x \\<in> carrier Zp\n  y \\<in> carrier Zp\n  y \\<noteq> \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> ac_Zp ?x \\<in> Units Zp\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow>\n    (if x = \\<zero> then \\<zero>\n     else [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n          ac_Zp x \\<otimes>\n          inv ac_Zp y)\n    \\<in> carrier Zp", "by (simp add: ac_Zp_in_Zp)"], ["", "lemma divide_formula:\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> carrier Zp\"\n  assumes \"y \\<noteq> \\<zero>\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"y \\<otimes> divide x y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y = x", "apply(cases \"x = \\<zero>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. x = \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x\n 2. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "apply (simp add: divide_def mult_zero_l)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "assume A: \"x \\<noteq> \\<zero>\""], ["proof (state)\nthis:\n  x \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "have 0: \"y \\<otimes> divide x y = \\<p>[^] nat (ord_Zp y) \\<otimes> ac_Zp y \\<otimes> (\\<p>[^](nat (ord_Zp x - ord_Zp y)) \\<otimes> ac_Zp x \\<otimes> (inv ac_Zp y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y =\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes> ac_Zp y \\<otimes>\n    ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n     ac_Zp x \\<otimes>\n     inv ac_Zp y)", "using assms ac_Zp_factors_x[of x] ac_Zp_factors_x[of y] A divide_def"], ["proof (prove)\nusing this:\n  x \\<in> carrier Zp\n  y \\<in> carrier Zp\n  y \\<noteq> \\<zero>\n  val_Zp y \\<le> val_Zp x\n  \\<lbrakk>x \\<in> carrier Zp; x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> x =\n                    [p] \\<cdot> \\<one> [^] nat (ord_Zp x) \\<otimes> ac_Zp x\n  \\<lbrakk>x \\<in> carrier Zp; x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> x = [p] \\<cdot> \\<one> [^] ord_Zp x \\<otimes> ac_Zp x\n  \\<lbrakk>y \\<in> carrier Zp; y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> y =\n                    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes> ac_Zp y\n  \\<lbrakk>y \\<in> carrier Zp; y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> y = [p] \\<cdot> \\<one> [^] ord_Zp y \\<otimes> ac_Zp y\n  x \\<noteq> \\<zero>\n  local.divide ?x ?y =\n  (if ?x = \\<zero> then \\<zero>\n   else [p] \\<cdot> \\<one> [^] nat (ord_Zp ?x - ord_Zp ?y) \\<otimes>\n        ac_Zp ?x \\<otimes>\n        inv ac_Zp ?y)\n\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y =\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes> ac_Zp y \\<otimes>\n    ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n     ac_Zp x \\<otimes>\n     inv ac_Zp y)", "by auto"], ["proof (state)\nthis:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes> ac_Zp y \\<otimes>\n  ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n   ac_Zp x \\<otimes>\n   inv ac_Zp y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "hence  1: \"y \\<otimes> divide x y = \\<p>[^] nat (ord_Zp  y) \\<otimes> (\\<p>[^](nat (ord_Zp  x - ord_Zp  y)) \\<otimes>  ac_Zp x \\<otimes> ac_Zp y \\<otimes>  (inv ac_Zp y))\""], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes> ac_Zp y \\<otimes>\n  ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n   ac_Zp x \\<otimes>\n   inv ac_Zp y)\n\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y =\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n    ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n     ac_Zp x \\<otimes>\n     ac_Zp y \\<otimes>\n     inv ac_Zp y)", "using mult_assoc mult_comm"], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes> ac_Zp y \\<otimes>\n  ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n   ac_Zp x \\<otimes>\n   inv ac_Zp y)\n  ?a \\<otimes> ?b \\<otimes> ?c = ?a \\<otimes> (?b \\<otimes> ?c)\n  ?a \\<otimes> ?b = ?b \\<otimes> ?a\n\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y =\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n    ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n     ac_Zp x \\<otimes>\n     ac_Zp y \\<otimes>\n     inv ac_Zp y)", "by auto"], ["proof (state)\nthis:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n  ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n   ac_Zp x \\<otimes>\n   ac_Zp y \\<otimes>\n   inv ac_Zp y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "have 2: \"(nat (ord_Zp  y) + nat (ord_Zp  x - ord_Zp  y)) = nat (ord_Zp  x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (ord_Zp y) + nat (ord_Zp x - ord_Zp y) = nat (ord_Zp x)", "using assms ord_pos[of x] ord_pos[of y] A val_ord_Zp"], ["proof (prove)\nusing this:\n  x \\<in> carrier Zp\n  y \\<in> carrier Zp\n  y \\<noteq> \\<zero>\n  val_Zp y \\<le> val_Zp x\n  \\<lbrakk>x \\<in> carrier Zp; x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> ord_Zp x\n  \\<lbrakk>y \\<in> carrier Zp; y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> ord_Zp y\n  x \\<noteq> \\<zero>\n  ?a \\<noteq> \\<zero> \\<Longrightarrow> val_Zp ?a = eint (ord_Zp ?a)\n\ngoal (1 subgoal):\n 1. nat (ord_Zp y) + nat (ord_Zp x - ord_Zp y) = nat (ord_Zp x)", "by auto"], ["proof (state)\nthis:\n  nat (ord_Zp y) + nat (ord_Zp x - ord_Zp y) = nat (ord_Zp x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "have \"y \\<otimes> divide x y = \\<p>[^] nat (ord_Zp  y) \\<otimes> \\<p>[^](nat (ord_Zp  x - ord_Zp  y)) \\<otimes>  ac_Zp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y =\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n    ac_Zp x", "using 1 A assms"], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n  ([p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n   ac_Zp x \\<otimes>\n   ac_Zp y \\<otimes>\n   inv ac_Zp y)\n  x \\<noteq> \\<zero>\n  x \\<in> carrier Zp\n  y \\<in> carrier Zp\n  y \\<noteq> \\<zero>\n  val_Zp y \\<le> val_Zp x\n\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y =\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n    [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n    ac_Zp x", "by (simp add: ac_Zp_in_Zp ac_Zp_is_Unit mult_assoc)"], ["proof (state)\nthis:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n  ac_Zp x\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<zero> \\<Longrightarrow> y \\<otimes> local.divide x y = x", "thus \"y \\<otimes> divide x y = x\""], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n  ac_Zp x\n\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y = x", "using \"2\" A ac_Zp_factors_x(1) assms(1) p_natpow_prod"], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y =\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp y) \\<otimes>\n  [p] \\<cdot> \\<one> [^] nat (ord_Zp x - ord_Zp y) \\<otimes>\n  ac_Zp x\n  nat (ord_Zp y) + nat (ord_Zp x - ord_Zp y) = nat (ord_Zp x)\n  x \\<noteq> \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> ?x =\n                    [p] \\<cdot> \\<one> [^] nat (ord_Zp ?x) \\<otimes>\n                    ac_Zp ?x\n  x \\<in> carrier Zp\n  [p] \\<cdot> \\<one> [^] ?n \\<otimes> [p] \\<cdot> \\<one> [^] ?m =\n  [p] \\<cdot> \\<one> [^] (?n + ?m)\n\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y = x", "by auto"], ["proof (state)\nthis:\n  y \\<otimes> local.divide x y = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma divide_nonzero:\n  assumes \"x \\<in> nonzero Zp\"\n  assumes \"y \\<in> nonzero Zp\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"divide x y \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide x y \\<in> nonzero Zp", "by (metis assms(1) assms(2) assms(3) divide_closed divide_formula mult_zero_l nonzero_closed nonzero_memE(2) nonzero_memI)"], ["", "lemma val_of_divide:\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> nonzero Zp\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"val_Zp (divide x y) = val_Zp x - val_Zp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "have 0: \"y \\<otimes> divide x y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<otimes> local.divide x y = x", "by (simp add: assms(1) assms(2) assms(3) divide_formula nonzero_closed nonzero_memE(2))"], ["proof (state)\nthis:\n  y \\<otimes> local.divide x y = x\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "hence \"val_Zp y + val_Zp (divide x y) = val_Zp x\""], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y = x\n\ngoal (1 subgoal):\n 1. val_Zp y + val_Zp (local.divide x y) = val_Zp x", "using assms(1) assms(2) divide_closed nonzero_closed not_nonzero_memI val_Zp_mult"], ["proof (prove)\nusing this:\n  y \\<otimes> local.divide x y = x\n  x \\<in> carrier Zp\n  y \\<in> nonzero Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> local.divide ?x ?y \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n  ?a = \\<zero> \\<Longrightarrow> ?a \\<notin> nonzero Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp (?x \\<otimes> ?y) = val_Zp ?x + val_Zp ?y\n\ngoal (1 subgoal):\n 1. val_Zp y + val_Zp (local.divide x y) = val_Zp x", "by fastforce"], ["proof (state)\nthis:\n  val_Zp y + val_Zp (local.divide x y) = val_Zp x\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp y + val_Zp (local.divide x y) = val_Zp x\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "by (smt Zp_def add.commute add.left_neutral add.right_neutral add_diff_assoc_eint assms(1) \n        assms(2) divide_nonzero eSuc_minus_eSuc iadd_Suc idiff_0_right mult_zero(1) mult_zero_l\n        nonzero_closed ord_pos order_refl padic_integers.Zp_int_inc_closed padic_integers.mult_comm \n        padic_integers.ord_of_nonzero(2) padic_integers_axioms val_Zp_eq_frac_0 val_Zp_mult val_Zp_p)"], ["proof (state)\nthis:\n  val_Zp (local.divide x y) = val_Zp x - val_Zp y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma val_of_divide':\n  assumes \"x \\<in> carrier Zp\"\n  assumes \"y \\<in> carrier  Zp\"\n  assumes \"y \\<noteq> \\<zero>\"\n  assumes \"val_Zp x \\<ge> val_Zp y\"\n  shows \"val_Zp (divide x y) = val_Zp x - val_Zp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "using Zp_def assms(1) assms(2) assms(3) assms(4) padic_integers.not_nonzero_Zp \n    padic_integers.val_of_divide padic_integers_axioms"], ["proof (prove)\nusing this:\n  Zp \\<equiv> padic_int p\n  x \\<in> carrier Zp\n  y \\<in> carrier Zp\n  y \\<noteq> \\<zero>\n  val_Zp y \\<le> val_Zp x\n  \\<lbrakk>padic_integers ?p; ?x \\<in> carrier (padic_int ?p);\n   ?x \\<notin> nonzero (padic_int ?p)\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\\<^bsub>padic_int ?p\\<^esub>\n  \\<lbrakk>padic_integers ?p; ?x \\<in> carrier (padic_int ?p);\n   ?y \\<in> nonzero (padic_int ?p);\n   padic_integers.val_Zp ?p ?y \\<le> padic_integers.val_Zp ?p ?x\\<rbrakk>\n  \\<Longrightarrow> padic_integers.val_Zp ?p\n                     (padic_integers.divide ?p ?x ?y) =\n                    padic_integers.val_Zp ?p ?x -\n                    padic_integers.val_Zp ?p ?y\n  padic_integers p\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide x y) = val_Zp x - val_Zp y", "by blast"], ["", "end"], ["", "lemma(in UP_cring) taylor_deg_1_eval''':\n  assumes \"f \\<in> carrier P\"\n  assumes \"a \\<in> carrier R\"\n  assumes \"b \\<in> carrier R\"\n  assumes \"c = to_fun (shift (2::nat) (T\\<^bsub>a\\<^esub> f)) (\\<ominus>b)\"\n  assumes \"b \\<otimes> (deriv f a) = (to_fun f a)\"\n  shows \"to_fun f (a \\<ominus> b) =  (c \\<otimes> b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "have 0: \"to_fun f (a \\<ominus> b) = (to_fun f a) \\<ominus> (deriv f a \\<otimes> b) \\<oplus> (c \\<otimes> b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) =\n    to_fun f a \\<ominus> deriv f a \\<otimes> b \\<oplus> c \\<otimes> b [^] 2", "using assms taylor_deg_1_eval''"], ["proof (prove)\nusing this:\n  f \\<in> carrier P\n  a \\<in> carrier R\n  b \\<in> carrier R\n  c = to_fun (shift 2 (T\\<^bsub>a\\<^esub> f)) (\\<ominus> b)\n  b \\<otimes> deriv f a = to_fun f a\n  \\<lbrakk>?f \\<in> carrier P; ?a \\<in> carrier R; ?b \\<in> carrier R;\n   ?c = to_fun (shift 2 (T\\<^bsub>?a\\<^esub> ?f)) (\\<ominus> ?b)\\<rbrakk>\n  \\<Longrightarrow> to_fun ?f (?a \\<ominus> ?b) =\n                    to_fun ?f ?a \\<ominus> deriv ?f ?a \\<otimes> ?b \\<oplus>\n                    ?c \\<otimes> ?b [^] 2\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) =\n    to_fun f a \\<ominus> deriv f a \\<otimes> b \\<oplus> c \\<otimes> b [^] 2", "by blast"], ["proof (state)\nthis:\n  to_fun f (a \\<ominus> b) =\n  to_fun f a \\<ominus> deriv f a \\<otimes> b \\<oplus> c \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "have 1: \"(to_fun f a) \\<ominus> (deriv f a \\<otimes> b) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> carrier P\n  a \\<in> carrier R\n  b \\<in> carrier R\n  c = to_fun (shift 2 (T\\<^bsub>a\\<^esub> f)) (\\<ominus> b)\n  b \\<otimes> deriv f a = to_fun f a\n\ngoal (1 subgoal):\n 1. to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier P; a \\<in> carrier R; b \\<in> carrier R;\n     c = to_fun (shift 2 (T\\<^bsub>a\\<^esub> f)) (\\<ominus> b);\n     b \\<otimes> deriv f a = to_fun f a\\<rbrakk>\n    \\<Longrightarrow> to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>", "have \"\\<forall>f a. f \\<notin> carrier P \\<or> a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f a.\n       f \\<notin> carrier P \\<or>\n       a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R", "using to_fun_closed"], ["proof (prove)\nusing this:\n  \\<lbrakk>?f \\<in> carrier P; ?x \\<in> carrier R\\<rbrakk>\n  \\<Longrightarrow> to_fun ?f ?x \\<in> carrier R\n\ngoal (1 subgoal):\n 1. \\<forall>f a.\n       f \\<notin> carrier P \\<or>\n       a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R", "by presburger"], ["proof (state)\nthis:\n  \\<forall>f a.\n     f \\<notin> carrier P \\<or>\n     a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier P; a \\<in> carrier R; b \\<in> carrier R;\n     c = to_fun (shift 2 (T\\<^bsub>a\\<^esub> f)) (\\<ominus> b);\n     b \\<otimes> deriv f a = to_fun f a\\<rbrakk>\n    \\<Longrightarrow> to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>", "then"], ["proof (chain)\npicking this:\n  \\<forall>f a.\n     f \\<notin> carrier P \\<or>\n     a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f a.\n     f \\<notin> carrier P \\<or>\n     a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R\n\ngoal (1 subgoal):\n 1. to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>", "using R.m_comm R.r_right_minus_eq assms(1) assms(2) assms(3) assms(5)"], ["proof (prove)\nusing this:\n  \\<forall>f a.\n     f \\<notin> carrier P \\<or>\n     a \\<notin> carrier R \\<or> to_fun f a \\<in> carrier R\n  \\<lbrakk>?x \\<in> carrier R; ?y \\<in> carrier R\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y = ?y \\<otimes> ?x\n  \\<lbrakk>?a \\<in> carrier R; ?b \\<in> carrier R\\<rbrakk>\n  \\<Longrightarrow> (?a \\<ominus> ?b = \\<zero>) = (?a = ?b)\n  f \\<in> carrier P\n  a \\<in> carrier R\n  b \\<in> carrier R\n  b \\<otimes> deriv f a = to_fun f a\n\ngoal (1 subgoal):\n 1. to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>", "by (simp add: deriv_closed)"], ["proof (state)\nthis:\n  to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "have 2: \"to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> (c \\<otimes> b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> c \\<otimes> b [^] 2", "using 0 1"], ["proof (prove)\nusing this:\n  to_fun f (a \\<ominus> b) =\n  to_fun f a \\<ominus> deriv f a \\<otimes> b \\<oplus> c \\<otimes> b [^] 2\n  to_fun f a \\<ominus> deriv f a \\<otimes> b = \\<zero>\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> c \\<otimes> b [^] 2", "by simp"], ["proof (state)\nthis:\n  to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> c \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "then"], ["proof (chain)\npicking this:\n  to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> c \\<otimes> b [^] 2", "show ?thesis"], ["proof (prove)\nusing this:\n  to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> c \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "using assms"], ["proof (prove)\nusing this:\n  to_fun f (a \\<ominus> b) = \\<zero> \\<oplus> c \\<otimes> b [^] 2\n  f \\<in> carrier P\n  a \\<in> carrier R\n  b \\<in> carrier R\n  c = to_fun (shift 2 (T\\<^bsub>a\\<^esub> f)) (\\<ominus> b)\n  b \\<otimes> deriv f a = to_fun f a\n\ngoal (1 subgoal):\n 1. to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2", "by (simp add: taylor_closed to_fun_closed shift_closed)"], ["proof (state)\nthis:\n  to_fun f (a \\<ominus> b) = c \\<otimes> b [^] 2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma(in padic_integers) res_diff_zero_fact:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"(a \\<ominus> b) k = 0\"\n  shows \"a k = b k\" \"a k \\<ominus>\\<^bsub>Zp_res_ring k\\<^esub> b k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k = b k &&& a k \\<ominus>\\<^bsub>residue_ring (p ^ k)\\<^esub> b k = 0", "apply(cases \"k = 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. k = 0 \\<Longrightarrow> a k = b k\n 2. k \\<noteq> 0 \\<Longrightarrow> a k = b k\n 3. a k \\<ominus>\\<^bsub>residue_ring (p ^ k)\\<^esub> b k = 0", "apply (metis assms(1) assms(2) p_res_ring_0 p_res_ring_0' p_res_ring_car p_residue_padic_int p_residue_range' zero_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. k \\<noteq> 0 \\<Longrightarrow> a k = b k\n 2. a k \\<ominus>\\<^bsub>residue_ring (p ^ k)\\<^esub> b k = 0", "apply (metis R.add.inv_closed R.add.m_lcomm R.minus_eq R.r_neg R.r_zero Zp_residue_add_zero(2) assms(1) assms(2) assms(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. a k \\<ominus>\\<^bsub>residue_ring (p ^ k)\\<^esub> b k = 0", "using assms(2) assms(3) residue_of_diff"], ["proof (prove)\nusing this:\n  b \\<in> carrier Zp\n  (a \\<ominus> b) k = 0\n  ?b \\<in> carrier Zp \\<Longrightarrow>\n  (?a \\<ominus> ?b) ?k =\n  ?a ?k \\<ominus>\\<^bsub>residue_ring (p ^ ?k)\\<^esub> ?b ?k\n\ngoal (1 subgoal):\n 1. a k \\<ominus>\\<^bsub>residue_ring (p ^ k)\\<^esub> b k = 0", "by auto"], ["", "lemma(in padic_integers) res_diff_zero_fact':\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"a k = b k\"\n  shows \"a k \\<ominus>\\<^bsub>Zp_res_ring k\\<^esub> b k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a k \\<ominus>\\<^bsub>residue_ring (p ^ k)\\<^esub> b k = 0", "by (simp add: assms(3) residue_minus)"], ["", "lemma(in padic_integers) res_diff_zero_fact'':\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"a k = b k\"\n  shows \"(a \\<ominus> b) k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<ominus> b) k = 0", "by (simp add: assms(2) assms(3) res_diff_zero_fact' residue_of_diff)"], ["", "lemma(in padic_integers) is_Zp_cauchyI': \nassumes \"s \\<in> closed_seqs Zp\"\nassumes \"\\<forall>n::nat. \\<exists> k::int.\\<forall>m.  m \\<ge>  k \\<longrightarrow> val_Zp (s (Suc m) \\<ominus> s m) \\<ge> n\"\nshows \"is_Zp_cauchy s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy s", "proof(rule is_Zp_cauchyI)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "show A0: \"s \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "by (simp add: assms(1))"], ["proof (state)\nthis:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "show \"\\<And>n. \\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "show \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0", "have \"\\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> s n0 0 = s n1 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> s n0 0 = s n1 0", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> s n0 0 = s n1 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> s n0 0 = s n1 0", "fix n0 n1::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> s n0 0 = s n1 0", "assume A: \"n0 > 0\" \"n1 > 0\""], ["proof (state)\nthis:\n  0 < n0\n  0 < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> s n0 0 = s n1 0", "have 0: \"s n0 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 \\<in> carrier Zp", "using A0"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. s n0 \\<in> carrier Zp", "by (simp add: closed_seqs_memE)"], ["proof (state)\nthis:\n  s n0 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> s n0 0 = s n1 0", "have 1: \"s n1 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n1 \\<in> carrier Zp", "using A0"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. s n1 \\<in> carrier Zp", "by (simp add: closed_seqs_memE)"], ["proof (state)\nthis:\n  s n1 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> s n0 0 = s n1 0", "show \" s n0 (0::nat) = s n1 (0::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 0 = s n1 0", "using A0 Zp_def 0 1 residues_closed"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  Zp \\<equiv> padic_int p\n  s n0 \\<in> carrier Zp\n  s n1 \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  ?a ?k \\<in> carrier (residue_ring (p ^ ?k))\n\ngoal (1 subgoal):\n 1. s n0 0 = s n1 0", "by (metis p_res_ring_0')"], ["proof (state)\nthis:\n  s n0 0 = s n1 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> s n0 0 = s n1 0\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> s n0 0 = s n1 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> s n0 0 = s n1 0\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 0 = s n1 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "assume IH: \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 n = s n1 n \\<Longrightarrow>\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow>\n             s n0 (Suc n) = s n1 (Suc n)", "show \" \\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "obtain N where N_def: \"\\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n0 n1.\n           N < n0 \\<and> N < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using IH"], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n0 n1.\n           N < n0 \\<and> N < n1 \\<longrightarrow>\n           s n0 n = s n1 n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "obtain k where k_def: \"\\<forall>m.  (Suc m) \\<ge> k \\<longrightarrow> val_Zp (s (Suc (Suc m)) \\<ominus> s (Suc m)) \\<ge> Suc (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<forall>m.\n           k \\<le> Suc m \\<longrightarrow>\n           eint (int (Suc (Suc n)))\n           \\<le> val_Zp\n                  (s (Suc (Suc m)) \\<ominus> s (Suc m)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms  Suc_n_not_le_n"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<forall>n.\n     \\<exists>k.\n        \\<forall>m.\n           k \\<le> int m \\<longrightarrow>\n           eint (int n) \\<le> val_Zp (s (Suc m) \\<ominus> s m)\n  \\<not> Suc ?n \\<le> ?n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<forall>m.\n           k \\<le> Suc m \\<longrightarrow>\n           eint (int (Suc (Suc n)))\n           \\<le> val_Zp\n                  (s (Suc (Suc m)) \\<ominus> s (Suc m)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson nat_le_iff)"], ["proof (state)\nthis:\n  \\<forall>m.\n     k \\<le> Suc m \\<longrightarrow>\n     eint (int (Suc (Suc n)))\n     \\<le> val_Zp (s (Suc (Suc m)) \\<ominus> s (Suc m))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "have \"\\<forall>n0 n1.  Suc (max N (max n k)) < n0 \\<and>  Suc (max N (max n k))< n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1.\n       Suc (max N (max n k)) < n0 \\<and>\n       Suc (max N (max n k)) < n1 \\<longrightarrow>\n       s n0 (Suc n) = s n1 (Suc n)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>Suc (max N (max n k)) < n0;\n        Suc (max N (max n k)) < n1\\<rbrakk>\n       \\<Longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>Suc (max N (max n k)) < n0;\n        Suc (max N (max n k)) < n1\\<rbrakk>\n       \\<Longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "fix n0 n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>Suc (max N (max n k)) < n0;\n        Suc (max N (max n k)) < n1\\<rbrakk>\n       \\<Longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "assume A: \"Suc (max N (max n k)) < n0\" \" Suc (max N (max n k)) < n1\""], ["proof (state)\nthis:\n  Suc (max N (max n k)) < n0\n  Suc (max N (max n k)) < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>Suc (max N (max n k)) < n0;\n        Suc (max N (max n k)) < n1\\<rbrakk>\n       \\<Longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "show \"s n0 (Suc n) = s n1 (Suc n) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "obtain K where K_def: \"K = Suc (max N (max n k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>K.\n        K = Suc (max N (max n k)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  K = Suc (max N (max n k))\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "have P0: \"\\<And>m. s ((Suc m)+ K) (Suc n) = s (Suc K) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. s (Suc m + K) (Suc n) = s (Suc K) (Suc n)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)", "show \"s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)", "apply(induction m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s (Suc (0 + K)) (Suc n) = s (Suc K) (Suc n)\n 2. \\<And>m.\n       s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n) \\<Longrightarrow>\n       s (Suc (Suc m + K)) (Suc n) = s (Suc K) (Suc n)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n) \\<Longrightarrow>\n       s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n) \\<Longrightarrow>\n       s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n) \\<Longrightarrow>\n       s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "assume A0: \" s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)\""], ["proof (state)\nthis:\n  s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n) \\<Longrightarrow>\n       s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "show \" s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "have I: \"k < m + K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < m + K", "using K_def"], ["proof (prove)\nusing this:\n  K = Suc (max N (max n k))\n\ngoal (1 subgoal):\n 1. k < m + K", "by linarith"], ["proof (state)\nthis:\n  k < m + K\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "have \"val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) \\<ge>  Suc (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int (Suc (Suc n)))\n    \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint (int (Suc (Suc n)))\n    \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "have \"(Suc (m + K)) > k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < Suc (m + K)", "by (simp add: I less_Suc_eq)"], ["proof (state)\nthis:\n  k < Suc (m + K)\n\ngoal (1 subgoal):\n 1. eint (int (Suc (Suc n)))\n    \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "then"], ["proof (chain)\npicking this:\n  k < Suc (m + K)", "show ?thesis"], ["proof (prove)\nusing this:\n  k < Suc (m + K)\n\ngoal (1 subgoal):\n 1. eint (int (Suc (Suc n)))\n    \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "using k_def less_imp_le_nat"], ["proof (prove)\nusing this:\n  k < Suc (m + K)\n  \\<forall>m.\n     k \\<le> Suc m \\<longrightarrow>\n     eint (int (Suc (Suc n)))\n     \\<le> val_Zp (s (Suc (Suc m)) \\<ominus> s (Suc m))\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. eint (int (Suc (Suc n)))\n    \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "by blast"], ["proof (state)\nthis:\n  eint (int (Suc (Suc n)))\n  \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int (Suc (Suc n)))\n  \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "hence D: \"val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) > (Suc n)\""], ["proof (prove)\nusing this:\n  eint (int (Suc (Suc n)))\n  \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n\ngoal (1 subgoal):\n 1. eint (int (Suc n))\n    < val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "using Suc_ile_eq"], ["proof (prove)\nusing this:\n  eint (int (Suc (Suc n)))\n  \\<le> val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n  (eint (?m + 1) \\<le> ?n) = (eint ?m < ?n)\n\ngoal (1 subgoal):\n 1. eint (int (Suc n))\n    < val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))", "by fastforce"], ["proof (state)\nthis:\n  eint (int (Suc n))\n  < val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "have \"s (Suc (Suc (m + K))) (Suc n) =  s (Suc (m + K)) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "have \"(s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))  (Suc n) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0", "using D assms(1) res_diff_zero_fact''[of \"s (Suc (Suc (m + K)))\" \"s (Suc (m + K)) \" \"Suc n\"]\n                      val_Zp_dist_res_eq[of \"s (Suc (Suc (m + K)))\" \"s (Suc (m + K)) \"  \"Suc n\"]"], ["proof (prove)\nusing this:\n  eint (int (Suc n))\n  < val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<lbrakk>s (Suc (Suc (m + K))) \\<in> carrier Zp;\n   s (Suc (m + K)) \\<in> carrier Zp;\n   s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\\<rbrakk>\n  \\<Longrightarrow> (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n                     (Suc n) =\n                    0\n  \\<lbrakk>s (Suc (Suc (m + K))) \\<in> carrier Zp;\n   s (Suc (m + K)) \\<in> carrier Zp;\n   eint (int (Suc n))\n   < val_Zp_dist (s (Suc (Suc (m + K)))) (s (Suc (m + K)))\\<rbrakk>\n  \\<Longrightarrow> s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n\ngoal (1 subgoal):\n 1. (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  eint (int (Suc n))\n  < val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  \\<lbrakk>s (Suc (Suc (m + K))) \\<in> carrier Zp;\n   s (Suc (m + K)) \\<in> carrier Zp;\n   s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\\<rbrakk>\n  \\<Longrightarrow> (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\n                     (Suc n) =\n                    0\n  \\<lbrakk>s (Suc (Suc (m + K))) \\<in> carrier Zp;\n   s (Suc (m + K)) \\<in> carrier Zp;\n   eint (int (Suc n))\n   < val_Zp (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K)))\\<rbrakk>\n  \\<Longrightarrow> s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n\ngoal (1 subgoal):\n 1. (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0", "by (simp add: closed_seqs_memE)"], ["proof (state)\nthis:\n  (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "hence 0: \"(s (Suc (Suc (m + K)))  (Suc n) \\<ominus>\\<^bsub>Zp_res_ring (Suc n)\\<^esub> (s (Suc (m + K)))  (Suc n)) = 0\""], ["proof (prove)\nusing this:\n  (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K)))\n     (Suc n) \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s\n                          (Suc (m + K)) (Suc n) =\n    0", "using res_diff_zero_fact(2)[of \"s (Suc (Suc (m + K)))\" \"s (Suc (m + K))\" \"Suc n\" ]\n                            assms(1)"], ["proof (prove)\nusing this:\n  (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0\n  \\<lbrakk>s (Suc (Suc (m + K))) \\<in> carrier Zp;\n   s (Suc (m + K)) \\<in> carrier Zp;\n   (s (Suc (Suc (m + K))) \\<ominus> s (Suc (m + K))) (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> s (Suc (Suc (m + K)))\n                     (Suc n) \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s\n    (Suc (m + K)) (Suc n) =\n                    0\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K)))\n     (Suc n) \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s\n                          (Suc (m + K)) (Suc n) =\n    0", "by (simp add: closed_seqs_memE)"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K)))\n   (Suc n) \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s (Suc (m + K))\n                        (Suc n) =\n  0\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "have 00: \"cring (Zp_res_ring (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cring (residue_ring (p ^ Suc n))", "using R_cring"], ["proof (prove)\nusing this:\n  0 < ?m \\<Longrightarrow> cring (residue_ring (p ^ ?m))\n\ngoal (1 subgoal):\n 1. cring (residue_ring (p ^ Suc n))", "by blast"], ["proof (state)\nthis:\n  cring (residue_ring (p ^ Suc n))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "have 01: \" s (Suc (Suc (m + K))) (Suc n) \\<in> carrier (Zp_res_ring (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) \\<in> carrier (residue_ring (p ^ Suc n))", "using assms(1) closed_seqs_memE residues_closed"], ["proof (prove)\nusing this:\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n  ?s \\<in> carrier ?R\\<^bsup>\\<omega>\\<^esup> \\<Longrightarrow>\n  ?s ?k \\<in> carrier ?R\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  ?a ?k \\<in> carrier (residue_ring (p ^ ?k))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) \\<in> carrier (residue_ring (p ^ Suc n))", "by blast"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K))) (Suc n) \\<in> carrier (residue_ring (p ^ Suc n))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "have 02: \"(\\<ominus>\\<^bsub>Zp_res_ring (Suc n)\\<^esub> (s (Suc (m + K)) (Suc n))) \\<in> carrier (Zp_res_ring (Suc n)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s (Suc (m + K))\n                 (Suc n)\n    \\<in> carrier (residue_ring (p ^ Suc n))", "by (meson \"00\" assms(1) cring.cring_simprules(3) closed_seqs_memE residues_closed)"], ["proof (state)\nthis:\n  \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s (Suc (m + K)) (Suc n)\n  \\<in> carrier (residue_ring (p ^ Suc n))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "unfolding a_minus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "using  00 01 02  \n                              cring.sum_zero_eq_neg[of \"Zp_res_ring (Suc n)\" \"s (Suc (Suc (m + K))) (Suc n)\"\n                                            \"\\<ominus>\\<^bsub>Zp_res_ring (Suc n)\\<^esub>s (Suc (m + K)) (Suc n)\"]"], ["proof (prove)\nusing this:\n  cring (residue_ring (p ^ Suc n))\n  s (Suc (Suc (m + K))) (Suc n) \\<in> carrier (residue_ring (p ^ Suc n))\n  \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s (Suc (m + K)) (Suc n)\n  \\<in> carrier (residue_ring (p ^ Suc n))\n  \\<lbrakk>cring (residue_ring (p ^ Suc n));\n   s (Suc (Suc (m + K))) (Suc n) \\<in> carrier (residue_ring (p ^ Suc n));\n   \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s (Suc (m + K)) (Suc n)\n   \\<in> carrier (residue_ring (p ^ Suc n));\n   s (Suc (Suc (m + K)))\n    (Suc n) \\<oplus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub>\n   \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s (Suc (m + K))\n                (Suc n) =\n   \\<zero>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> s (Suc (Suc (m + K))) (Suc n) =\n                    \\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> (\\<ominus>\\<^bsub>residue_ring (p ^ Suc n)\\<^esub> s\n        (Suc (m + K)) (Suc n))\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "by (metis 0  a_minus_def assms(1) cring.cring_simprules(21) closed_seqs_memE \n                            p_res_ring_zero residues_closed)"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "then"], ["proof (chain)\npicking this:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)", "show ?thesis"], ["proof (prove)\nusing this:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "using A0 assms(1)"], ["proof (prove)\nusing this:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc (m + K)) (Suc n)\n  s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)\n  s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)", "by simp"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s (Suc (Suc (m + K))) (Suc n) = s (Suc K) (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s (Suc (m + K)) (Suc n) = s (Suc K) (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s (Suc ?m2 + K) (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "have \"\\<exists>m0. n0 = (Suc m0) + K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m0. n0 = Suc m0 + K", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m0. n0 = Suc m0 + K", "have \"n0 > K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K < n0", "by (simp add: A(1) K_def)"], ["proof (state)\nthis:\n  K < n0\n\ngoal (1 subgoal):\n 1. \\<exists>m0. n0 = Suc m0 + K", "then"], ["proof (chain)\npicking this:\n  K < n0", "have \"n0 = (Suc (n0 - K - 1)) + K\""], ["proof (prove)\nusing this:\n  K < n0\n\ngoal (1 subgoal):\n 1. n0 = Suc (n0 - K - 1) + K", "by auto"], ["proof (state)\nthis:\n  n0 = Suc (n0 - K - 1) + K\n\ngoal (1 subgoal):\n 1. \\<exists>m0. n0 = Suc m0 + K", "then"], ["proof (chain)\npicking this:\n  n0 = Suc (n0 - K - 1) + K", "show ?thesis"], ["proof (prove)\nusing this:\n  n0 = Suc (n0 - K - 1) + K\n\ngoal (1 subgoal):\n 1. \\<exists>m0. n0 = Suc m0 + K", "by blast"], ["proof (state)\nthis:\n  \\<exists>m0. n0 = Suc m0 + K\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m0. n0 = Suc m0 + K\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<exists>m0. n0 = Suc m0 + K", "obtain m0 where m0_def: \"n0 = (Suc m0) + K\""], ["proof (prove)\nusing this:\n  \\<exists>m0. n0 = Suc m0 + K\n\ngoal (1 subgoal):\n 1. (\\<And>m0. n0 = Suc m0 + K \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n0 = Suc m0 + K\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "have \"\\<exists>m0. n1 = (Suc m0) + K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m0. n1 = Suc m0 + K", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m0. n1 = Suc m0 + K", "have \"n1 > K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K < n1", "by (simp add: A(2) K_def)"], ["proof (state)\nthis:\n  K < n1\n\ngoal (1 subgoal):\n 1. \\<exists>m0. n1 = Suc m0 + K", "then"], ["proof (chain)\npicking this:\n  K < n1", "have \"n1 = (Suc (n1 - K - 1)) + K\""], ["proof (prove)\nusing this:\n  K < n1\n\ngoal (1 subgoal):\n 1. n1 = Suc (n1 - K - 1) + K", "by auto"], ["proof (state)\nthis:\n  n1 = Suc (n1 - K - 1) + K\n\ngoal (1 subgoal):\n 1. \\<exists>m0. n1 = Suc m0 + K", "then"], ["proof (chain)\npicking this:\n  n1 = Suc (n1 - K - 1) + K", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 = Suc (n1 - K - 1) + K\n\ngoal (1 subgoal):\n 1. \\<exists>m0. n1 = Suc m0 + K", "by blast"], ["proof (state)\nthis:\n  \\<exists>m0. n1 = Suc m0 + K\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m0. n1 = Suc m0 + K\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<exists>m0. n1 = Suc m0 + K", "obtain m1 where m1_def: \"n1 = (Suc m1) + K\""], ["proof (prove)\nusing this:\n  \\<exists>m0. n1 = Suc m0 + K\n\ngoal (1 subgoal):\n 1. (\\<And>m1. n1 = Suc m1 + K \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n1 = Suc m1 + K\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "have 0: \"s n0 (Suc n) = s (Suc K) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s (Suc K) (Suc n)", "using m0_def P0[of \"m0\"]"], ["proof (prove)\nusing this:\n  n0 = Suc m0 + K\n  s (Suc m0 + K) (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s (Suc K) (Suc n)", "by auto"], ["proof (state)\nthis:\n  s n0 (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "have 1: \"s n1 (Suc n) = s (Suc K) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s n1 (Suc n) = s (Suc K) (Suc n)", "using m1_def P0[of \"m1\"]"], ["proof (prove)\nusing this:\n  n1 = Suc m1 + K\n  s (Suc m1 + K) (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. s n1 (Suc n) = s (Suc K) (Suc n)", "by auto"], ["proof (state)\nthis:\n  s n1 (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "using 0 1"], ["proof (prove)\nusing this:\n  s n0 (Suc n) = s (Suc K) (Suc n)\n  s n1 (Suc n) = s (Suc K) (Suc n)\n\ngoal (1 subgoal):\n 1. s n0 (Suc n) = s n1 (Suc n)", "by auto"], ["proof (state)\nthis:\n  s n0 (Suc n) = s n1 (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s n0 (Suc n) = s n1 (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1.\n     Suc (max N (max n k)) < n0 \\<and>\n     Suc (max N (max n k)) < n1 \\<longrightarrow>\n     s n0 (Suc n) = s n1 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>n0 n1.\n     Suc (max N (max n k)) < n0 \\<and>\n     Suc (max N (max n k)) < n1 \\<longrightarrow>\n     s n0 (Suc n) = s n1 (Suc n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1.\n     Suc (max N (max n k)) < n0 \\<and>\n     Suc (max N (max n k)) < n1 \\<longrightarrow>\n     s n0 (Suc n) = s n1 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> s n0 (Suc n) = s n1 (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> s n0 n = s n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> s n0 ?n2 = s n1 ?n2\n\ngoal:\nNo subgoals!", "qed"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "section\\<open>The Proof of Hensel's Lemma\\<close>"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "subsection\\<open>Building a Locale for the Proof of Hensel's Lemma\\<close>"], ["", "locale hensel = padic_integers+ \n  fixes f::padic_int_poly\n  fixes a::padic_int\n  assumes f_closed[simp]: \"f \\<in> carrier Zp_x\"\n  assumes a_closed[simp]: \"a \\<in> carrier Zp\"\n  assumes fa_nonzero[simp]: \"f\\<bullet>a \\<noteq>\\<zero>\"\n  assumes hensel_hypothesis[simp]: \"(val_Zp (f\\<bullet>a) > 2* val_Zp ((pderiv f)\\<bullet>a))\""], ["", "sublocale hensel < cring Zp"], ["proof (prove)\ngoal (1 subgoal):\n 1. cring Zp", "by (simp add: R.is_cring)"], ["", "context hensel\nbegin"], ["", "abbreviation f' where\n\"f' \\<equiv> pderiv f\""], ["", "lemma f'_closed:\n\"f' \\<in> carrier Zp_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<in> carrier (UP Zp)", "using f_closed pderiv_closed"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  ?p \\<in> carrier (UP Zp) \\<Longrightarrow> pderiv ?p \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. f' \\<in> carrier (UP Zp)", "by blast"], ["", "lemma f'_vals_closed:\n  assumes \"a \\<in> carrier Zp\"\n  shows \"f'\\<bullet>a \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> carrier Zp", "by (simp add: UP_cring.to_fun_closed Zp_x_is_UP_cring f'_closed)"], ["", "lemma fa_closed:\n\"(f\\<bullet>a) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<in> carrier Zp", "by (simp add: UP_cring.to_fun_closed Zp_x_is_UP_cring)"], ["", "lemma f'a_closed:\n\"(f'\\<bullet>a) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> carrier Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> carrier Zp", "have \"f' \\<in> carrier Zp_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<in> carrier (UP Zp)", "by (simp add: f'_closed)"], ["proof (state)\nthis:\n  f' \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  f' \\<in> carrier (UP Zp)", "show ?thesis"], ["proof (prove)\nusing this:\n  f' \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> carrier Zp", "by (simp add: f'_vals_closed)"], ["proof (state)\nthis:\n  f' \\<bullet> a \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fa_nonzero':\n\"(f\\<bullet>a) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<in> nonzero Zp", "using fa_closed fa_nonzero not_nonzero_Zp"], ["proof (prove)\nusing this:\n  f \\<bullet> a \\<in> carrier Zp\n  f \\<bullet> a \\<noteq> \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<in> nonzero Zp", "by blast"], ["", "lemma f'a_nonzero[simp]:\n\"(f'\\<bullet>a) \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<noteq> \\<zero>", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f' \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "assume \"\\<not> (f'\\<bullet>a) \\<noteq> \\<zero>\""], ["proof (state)\nthis:\n  \\<not> f' \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<not> f' \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> f' \\<bullet> a \\<noteq> \\<zero>", "have \"(f'\\<bullet>a) = \\<zero>\""], ["proof (prove)\nusing this:\n  \\<not> f' \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> a = \\<zero>", "by blast"], ["proof (state)\nthis:\n  f' \\<bullet> a = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<not> f' \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f' \\<bullet> a = \\<zero>", "have \"\\<infinity> < val_Zp (f\\<bullet>a)\""], ["proof (prove)\nusing this:\n  f' \\<bullet> a = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<infinity> < val_Zp (f \\<bullet> a)", "using hensel_hypothesis"], ["proof (prove)\nusing this:\n  f' \\<bullet> a = \\<zero>\n  eint 2 * val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<infinity> < val_Zp (f \\<bullet> a)", "by (simp add: val_Zp_def)"], ["proof (state)\nthis:\n  \\<infinity> < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<not> f' \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<infinity> < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. False", "using eint_ord_simps(6)"], ["proof (prove)\nusing this:\n  \\<infinity> < val_Zp (f \\<bullet> a)\n  (\\<infinity> < ?q) = False\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f'a_nonzero':\n\"(f'\\<bullet>a) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> nonzero Zp", "using f'a_closed f'a_nonzero not_nonzero_Zp"], ["proof (prove)\nusing this:\n  f' \\<bullet> a \\<in> carrier Zp\n  f' \\<bullet> a \\<noteq> \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> a \\<in> nonzero Zp", "by blast"], ["", "lemma f'a_not_infinite[simp]: \n\"val_Zp (f'\\<bullet>a) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>", "by (metis eint_ord_code(3) hensel_hypothesis linorder_not_less times_eint_simps(4))"], ["", "lemma f'a_nonneg_val[simp]: \n\"val_Zp ((f'\\<bullet>a)) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> val_Zp (f' \\<bullet> a)", "using f'a_closed val_pos"], ["proof (prove)\nusing this:\n  f' \\<bullet> a \\<in> carrier Zp\n  ?x \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp ?x\n\ngoal (1 subgoal):\n 1. 0 \\<le> val_Zp (f' \\<bullet> a)", "by blast"], ["", "lemma hensel_hypothesis_weakened:\n\"val_Zp (f\\<bullet>a) > val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)", "have 0: \"0 \\<le> val_Zp (f'\\<bullet>a) \\<and> val_Zp (f'\\<bullet>a) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> val_Zp (f' \\<bullet> a) \\<and>\n    val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>", "using f'a_closed val_ord_Zp val_pos"], ["proof (prove)\nusing this:\n  f' \\<bullet> a \\<in> carrier Zp\n  ?a \\<noteq> \\<zero> \\<Longrightarrow> val_Zp ?a = eint (ord_Zp ?a)\n  ?x \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp ?x\n\ngoal (1 subgoal):\n 1. 0 \\<le> val_Zp (f' \\<bullet> a) \\<and>\n    val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>", "by force"], ["proof (state)\nthis:\n  0 \\<le> val_Zp (f' \\<bullet> a) \\<and>\n  val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)", "have 1: \"1 < eint 2 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < eint 2", "by (simp add: one_eint_def)"], ["proof (state)\nthis:\n  1 < eint 2\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 < eint 2\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)", "using 0 eint_mult_mono'[of \"val_Zp (f'\\<bullet>a)\" 1 2] hensel_hypothesis"], ["proof (prove)\nusing this:\n  1 < eint 2\n  0 \\<le> val_Zp (f' \\<bullet> a) \\<and>\n  val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>\n  \\<lbrakk>0 \\<le> val_Zp (f' \\<bullet> a) \\<and>\n           val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>;\n   1 < eint 2\\<rbrakk>\n  \\<Longrightarrow> 1 * val_Zp (f' \\<bullet> a)\n                    \\<le> eint 2 * val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)", "by (metis linorder_not_less mult_one_left order_trans)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Constructing the Newton Sequence\\<close>"], ["", "definition newton_step :: \"padic_int \\<Rightarrow> padic_int\" where\n\"newton_step x = x \\<ominus> (divide (f\\<bullet>x) (f'\\<bullet>x))\""], ["", "lemma newton_step_closed:\n  \"newton_step a \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. newton_step a \\<in> carrier Zp", "using  divide_closed"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> local.divide ?x ?y \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. newton_step a \\<in> carrier Zp", "unfolding newton_step_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> local.divide ?x ?y \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a \\<ominus> local.divide (f \\<bullet> a) (f' \\<bullet> a)\n    \\<in> carrier Zp", "using f'a_closed f'a_nonzero fa_closed local.a_closed"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?y \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> local.divide ?x ?y \\<in> carrier Zp\n  f' \\<bullet> a \\<in> carrier Zp\n  f' \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> a \\<in> carrier Zp\n  a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a \\<ominus> local.divide (f \\<bullet> a) (f' \\<bullet> a)\n    \\<in> carrier Zp", "by blast"], ["", "fun newton_seq :: \"padic_int_seq\" (\"ns\") where\n\"newton_seq 0 = a\"|\n\"newton_seq (Suc n) = newton_step (newton_seq n)\""], ["", "subsection\\<open>Key Properties of the Newton Sequence\\<close>"], ["", "lemma hensel_factor_id:\n\"(divide (f\\<bullet>a) (f'\\<bullet>a)) \\<otimes> ((f'\\<bullet>a)) = (f\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> a) (f' \\<bullet> a) \\<otimes>\n    (f' \\<bullet> a) =\n    f \\<bullet> a", "using hensel_hypothesis hensel_axioms divide_formula f'a_closed \n        fa_closed hensel_hypothesis_weakened mult_comm"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n  hensel p f a\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp; ?y \\<noteq> \\<zero>;\n   val_Zp ?y \\<le> val_Zp ?x\\<rbrakk>\n  \\<Longrightarrow> ?y \\<otimes> local.divide ?x ?y = ?x\n  f' \\<bullet> a \\<in> carrier Zp\n  f \\<bullet> a \\<in> carrier Zp\n  val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n  ?a \\<otimes> ?b = ?b \\<otimes> ?a\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> a) (f' \\<bullet> a) \\<otimes>\n    (f' \\<bullet> a) =\n    f \\<bullet> a", "by auto"], ["", "definition hensel_factor (\"t\") where\n\"hensel_factor = val_Zp (f\\<bullet>a) - 2*(val_Zp (f'\\<bullet>a))\""], ["", "lemma t_pos[simp]:\n\"t > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t", "using hensel_factor_def hensel_hypothesis"], ["proof (prove)\nusing this:\n  t = val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. 0 < t", "by (simp add: eint_minus_le)"], ["", "lemma t_neq_infty[simp]:\n\"t \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> \\<infinity>", "by (simp add: hensel_factor_def val_Zp_def)"], ["", "lemma t_times_pow_pos[simp]:\n\"(2^(n::nat))*t > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < eint (2 ^ n) * t", "apply(cases \"n = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> 0 < eint (2 ^ n) * t\n 2. n \\<noteq> 0 \\<Longrightarrow> 0 < eint (2 ^ n) * t", "using one_eint_def"], ["proof (prove)\nusing this:\n  1 = eint 1\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> 0 < eint (2 ^ n) * t\n 2. n \\<noteq> 0 \\<Longrightarrow> 0 < eint (2 ^ n) * t", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> 0 < eint (2 ^ n) * t", "using eint_mult_mono'[of t 1 \"2^n\"] t_pos"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> t \\<and> t \\<noteq> \\<infinity>;\n   1 < eint (2 ^ n)\\<rbrakk>\n  \\<Longrightarrow> 1 * t \\<le> eint (2 ^ n) * t\n  0 < t\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> 0 < eint (2 ^ n) * t", "by (smt eint_ord_simps(2) linorder_not_less mult_one_left neq0_conv one_eint_def order_less_le order_trans self_le_power t_neq_infty)"], ["", "lemma newton_seq_props_induct:\nshows \"\\<And>k. k \\<le> n \\<Longrightarrow> (ns k) \\<in> carrier Zp\n              \\<and> val_Zp (f'\\<bullet>(ns k)) = val_Zp ((f'\\<bullet>a))\n              \\<and> val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> n \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<le> 0 \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "case 0"], ["proof (state)\nthis:\n  k \\<le> 0\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<le> 0 \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "then"], ["proof (chain)\npicking this:\n  k \\<le> 0", "have kz: \"k = 0\""], ["proof (prove)\nusing this:\n  k \\<le> 0\n\ngoal (1 subgoal):\n 1. k = 0", "by simp"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<le> 0 \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "have B0: \"( ns k) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "using kz"], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "by simp"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<le> 0 \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "have B1: \"val_Zp (f' \\<bullet> ns k) = (val_Zp (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "using kz newton_seq.simps(1)"], ["proof (prove)\nusing this:\n  k = 0\n  ns 0 = a\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "by presburger"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<le> 0 \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "have B2: \"val_Zp (f \\<bullet> (ns k)) \\<ge> (2 * (val_Zp (f'\\<bullet>a))) + 2 ^ k * t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have B20: \"(2 * (val_Zp (f'\\<bullet>a))) + 2 ^ k * t = (2 * (val_Zp (f'\\<bullet>a))) +  t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + t", "have \"(2 * (val_Zp (f'\\<bullet>a))) + 2 ^ k * t = (2 * (val_Zp (f'\\<bullet>a))) +  t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + t", "using kz  one_eint_def"], ["proof (prove)\nusing this:\n  k = 0\n  1 = eint 1\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + t", "by auto"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + t", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t", "show ?thesis"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + t", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t", "have \"(2 * (val_Zp (f'\\<bullet>a))) + 2 ^ k * t = (2 * (val_Zp (f'\\<bullet>a))) + val_Zp (f\\<bullet>a) - 2*(val_Zp (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    eint 2 * val_Zp (f' \\<bullet> a) + val_Zp (f \\<bullet> a) -\n    eint 2 * val_Zp (f' \\<bullet> a)", "unfolding hensel_factor_def"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  eint (2 ^ k) *\n  (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)) =\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    eint (2 ^ k) *\n    (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)) =\n    eint 2 * val_Zp (f' \\<bullet> a) + val_Zp (f \\<bullet> a) -\n    eint 2 * val_Zp (f' \\<bullet> a)", "by (simp add: val_Zp_def)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + val_Zp (f \\<bullet> a) -\n  eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + val_Zp (f \\<bullet> a) -\n  eint 2 * val_Zp (f' \\<bullet> a)", "have \"(2 * (val_Zp (f'\\<bullet>a))) + 2 ^ k * t =  val_Zp (f\\<bullet>a)\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  eint 2 * val_Zp (f' \\<bullet> a) + val_Zp (f \\<bullet> a) -\n  eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n    val_Zp (f \\<bullet> a)", "by (metis add_diff_cancel_eint eint_ord_simps(6) hensel_hypothesis)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t =\n  val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by (simp add: kz)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<le> 0 \\<Longrightarrow>\n       ns k \\<in> carrier Zp \\<and>\n       val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "thus ?case"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "using B0 B1"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n  ns k \\<in> carrier Zp\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "case (Suc n)"], ["proof (state)\nthis:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n  k \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>\\<And>k.\n                   k \\<le> n \\<Longrightarrow>\n                   ns k \\<in> carrier Zp \\<and>\n                   val_Zp (f' \\<bullet> ns k) =\n                   val_Zp (f' \\<bullet> a) \\<and>\n                   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                   \\<le> val_Zp (f \\<bullet> ns k);\n        k \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> ns k \\<in> carrier Zp \\<and>\n                         val_Zp (f' \\<bullet> ns k) =\n                         val_Zp (f' \\<bullet> a) \\<and>\n                         eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n                         \\<le> val_Zp (f \\<bullet> ns k)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "proof(cases \"k \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "case True"], ["proof (state)\nthis:\n  k \\<le> n\n\ngoal (2 subgoals):\n 1. k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)\n 2. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "then"], ["proof (chain)\npicking this:\n  k \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "using  Suc.IH"], ["proof (prove)\nusing this:\n  k \\<le> n\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "case False"], ["proof (state)\nthis:\n  \\<not> k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F1: \"(ns n) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n \\<in> carrier Zp", "using  Suc.IH"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. ns n \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F2: \"val_Zp (f'\\<bullet>(ns n)) = val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "using  Suc.IH"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F3: \"val_Zp (f\\<bullet>(ns n)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^n)*t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f \\<bullet> ns n)", "using  Suc.IH"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have kval: \"k = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = Suc n", "using False Suc.prems le_Suc_eq"], ["proof (prove)\nusing this:\n  \\<not> k \\<le> n\n  k \\<le> Suc n\n  (?m \\<le> Suc ?n) = (?m \\<le> ?n \\<or> ?m = Suc ?n)\n\ngoal (1 subgoal):\n 1. k = Suc n", "by blast"], ["proof (state)\nthis:\n  k = Suc n\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F6: \"val_Zp (f\\<bullet>(ns n)) \\<ge> val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "have \"2*(val_Zp (f'\\<bullet>a))  \\<ge> val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> eint 2 * val_Zp (f' \\<bullet> a)", "using f'a_closed val_pos eint_mult_mono'[of \"val_Zp (f'\\<bullet>a)\" 1 2]"], ["proof (prove)\nusing this:\n  f' \\<bullet> a \\<in> carrier Zp\n  ?x \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp ?x\n  \\<lbrakk>0 \\<le> val_Zp (f' \\<bullet> a) \\<and>\n           val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>;\n   1 < eint 2\\<rbrakk>\n  \\<Longrightarrow> 1 * val_Zp (f' \\<bullet> a)\n                    \\<le> eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> eint 2 * val_Zp (f' \\<bullet> a)", "by (metis Groups.add_ac(2) add.right_neutral eSuc_eint eint_0_iff(2) eint_add_left_cancel_le\n              eint_ord_simps(2) f'a_nonneg_val f'a_not_infinite infinity_ne_i1 linorder_not_less \n              mult_one_left not_one_less_zero one_add_one one_eint_def order_less_le order_trans zero_one_eint_neq(1))"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) \\<le> eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "hence  \"2*(val_Zp (f'\\<bullet>a)) + (2^n)*t  \\<ge> val_Zp (f'\\<bullet>a)\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) \\<le> eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t", "using t_times_pow_pos[of n]"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) \\<le> eint 2 * val_Zp (f' \\<bullet> a)\n  0 < eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t", "by (metis (no_types, lifting) add.right_neutral eint_add_left_cancel_le order_less_le order_trans)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "using F2 F3"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "by auto"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F5: \" divide (f\\<bullet>(ns n))(f'\\<bullet>(ns n)) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "have 00: \"f \\<bullet> ns n \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns n \\<in> carrier Zp", "by (simp add: F1 to_fun_closed)"], ["proof (state)\nthis:\n  f \\<bullet> ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "have \"val_Zp ((f'\\<bullet>a)) \\<noteq> val_Zp \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>", "by (simp add:  val_Zp_def)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>", "have 01: \"f' \\<bullet> ns n \\<in> nonzero Zp\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "using F2 F1 Zp_x_is_UP_cring f'_closed nonzero_def"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n  ns n \\<in> carrier Zp\n  UP_cring Zp\n  f' \\<in> carrier (UP Zp)\n  nonzero ?R = {a \\<in> carrier ?R. a \\<noteq> \\<zero>\\<^bsub>?R\\<^esub>}\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>;\n     val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a);\n     ns n \\<in> carrier Zp; UP_cring Zp; f' \\<in> carrier (UP Zp);\n     \\<And>R.\n        nonzero R =\n        {a \\<in> carrier R. a \\<noteq> \\<zero>\\<^bsub>R\\<^esub>}\\<rbrakk>\n    \\<Longrightarrow> f' \\<bullet> ns n \\<in> nonzero Zp", "have \"f' \\<bullet> ns n \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> carrier Zp", "using F1 Zp_continuous_is_Zp_closed f'_closed  polynomial_is_Zp_continuous"], ["proof (prove)\nusing this:\n  ns n \\<in> carrier Zp\n  is_Zp_continuous ?f \\<Longrightarrow>\n  ?f \\<in> carrier (function_ring (carrier Zp) Zp)\n  f' \\<in> carrier (UP Zp)\n  ?f \\<in> carrier (UP Zp) \\<Longrightarrow>\n  is_Zp_continuous ((\\<bullet>) ?f)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> carrier Zp", "by (simp add: to_fun_closed)"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<lbrakk>val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>;\n     val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a);\n     ns n \\<in> carrier Zp; UP_cring Zp; f' \\<in> carrier (UP Zp);\n     \\<And>R.\n        nonzero R =\n        {a \\<in> carrier R. a \\<noteq> \\<zero>\\<^bsub>R\\<^esub>}\\<rbrakk>\n    \\<Longrightarrow> f' \\<bullet> ns n \\<in> nonzero Zp", "then"], ["proof (chain)\npicking this:\n  f' \\<bullet> ns n \\<in> carrier Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "using F2 \\<open>val_Zp (f'\\<bullet>a) \\<noteq> val_Zp \\<zero>\\<close> not_nonzero_Zp"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns n \\<in> carrier Zp\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n  val_Zp (f' \\<bullet> a) \\<noteq> val_Zp \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "by fastforce"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  f' \\<bullet> ns n \\<in> nonzero Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "using F6"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "by (metis \"00\" F2 \\<open>val_Zp (f'\\<bullet>a) \\<noteq> val_Zp \\<zero>\\<close> divide_closed nonzero_closed)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F4:  \"(ns k) \\<ominus> (ns n) = (\\<ominus> divide (f\\<bullet>(ns n))(f'\\<bullet>(ns n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns k \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "using F1 F5 newton_seq.simps(2)[of n] kval"], ["proof (prove)\nusing this:\n  ns n \\<in> carrier Zp\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ns (Suc n) = newton_step (ns n)\n  k = Suc n\n\ngoal (1 subgoal):\n 1. ns k \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "unfolding newton_step_def"], ["proof (prove)\nusing this:\n  ns n \\<in> carrier Zp\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ns (Suc n) =\n  ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  k = Suc n\n\ngoal (1 subgoal):\n 1. ns k \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "by (metis R.l_neg R.minus_closed R.minus_zero R.plus_diff_simp R.r_neg2 R.r_right_minus_eq \n            a_minus_def local.a_closed minus_a_inv)"], ["proof (state)\nthis:\n  ns k \\<ominus> ns n =\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have F7: \"val_Zp (divide (f\\<bullet>(ns n))(f'\\<bullet>(ns n))) = val_Zp (f\\<bullet>(ns n)) - val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n    val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)", "apply(rule val_of_divide)"], ["proof (prove)\ngoal (3 subgoals):\n 1. f \\<bullet> ns n \\<in> carrier Zp\n 2. f' \\<bullet> ns n \\<in> nonzero Zp\n 3. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "apply (simp add: F1 to_fun_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp\n 2. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "using F1 f'_closed to_fun_closed F2 not_nonzero_Zp val_Zp_def"], ["proof (prove)\nusing this:\n  ns n \\<in> carrier Zp\n  f' \\<in> carrier (UP Zp)\n  \\<lbrakk>?f \\<in> carrier (UP Zp); ?x \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?f \\<bullet> ?x \\<in> carrier Zp\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (2 subgoals):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp\n 2. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "by (simp add: F6)"], ["proof (state)\nthis:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n  val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow>\n    ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp \\<and>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ns k \\<in> carrier Zp\n 2. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "show P0:\"ns k \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A0: \"ns k = ns n \\<ominus> (divide (f\\<bullet> (ns n)) (f'\\<bullet>(ns n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns k =\n    ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "by (simp add: kval newton_step_def)"], ["proof (state)\nthis:\n  ns k = ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A1: \"val_Zp (f'\\<bullet>(ns n)) = val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "using  Suc.IH"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A2: \"val_Zp (f\\<bullet>(ns n)) \\<ge>val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)", "have A20: \"(2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a)) \\<ge>val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "have \"val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)", "using hensel_hypothesis eint_minus_le"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n  ?b < ?c \\<Longrightarrow> 0 < ?c - ?b\n\ngoal (1 subgoal):\n 1. 0 < val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)", "by blast"], ["proof (state)\nthis:\n  0 < val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  0 < val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)", "have \"  (2 ^ n) * (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a))\n                        \\<ge> (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  0 < val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n    \\<le> eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "using eint_pos_int_times_ge"], ["proof (prove)\nusing this:\n  0 < val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  \\<lbrakk>0 \\<le> ?c; 0 < ?n\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> eint ?n * ?c\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n    \\<le> eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "by auto"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  \\<le> eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  \\<le> eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "have  \"  ((2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a)))\n                        \\<ge> (2 * val_Zp (f'\\<bullet>a)) + (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  \\<le> eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "by (simp add: val_Zp_def)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "have  \"  ((2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a)))\n                        \\<ge> (val_Zp (f\\<bullet>a) )\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "by simp"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  val_Zp (f \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "show  \"  ((2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a)))\n                        \\<ge> (val_Zp (f'\\<bullet>a) )\""], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "using hensel_hypothesis_weakened"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n          eint (2 ^ n) *\n          (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))", "by auto"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)", "have A21:\"val_Zp (f\\<bullet>(ns n)) \\<ge> (2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * (val_Zp (f\\<bullet>a) - 2 * val_Zp (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    eint (2 ^ n) *\n    (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n    \\<le> val_Zp (f \\<bullet> ns n)", "using  Suc.IH"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    eint (2 ^ n) *\n    (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n    \\<le> val_Zp (f \\<bullet> ns n)", "unfolding hensel_factor_def"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  eint (2 ^ ?k2) *\n  (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    eint (2 ^ n) *\n    (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n    \\<le> val_Zp (f \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)", "using A21 A20"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n  \\<le> val_Zp (f \\<bullet> ns n)\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) +\n        eint (2 ^ n) *\n        (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)", "by auto"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A3: \"ns n \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n \\<in> carrier Zp", "using  Suc.IH"], ["proof (prove)\nusing this:\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. ns n \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A4: \"val_Zp (f\\<bullet>(ns n)) \\<ge>val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "using A1 A2"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n  val_Zp (f' \\<bullet> a) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "by presburger"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A5: \"f\\<bullet>(ns n) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns n \\<in> carrier Zp", "by (simp add: F1 UP_cring.to_fun_closed Zp_x_is_UP_cring)"], ["proof (state)\nthis:\n  f \\<bullet> ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A6: \"(f'\\<bullet>(ns n)) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "have \"(f'\\<bullet>(ns n)) \\<in> carrier  Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> carrier Zp", "by (simp add: F1 UP_cring.to_fun_closed Zp_x_is_UP_cring f'_closed)"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "have \"val_Zp (f'\\<bullet>(ns n)) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>", "using A1"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>", "by (simp add:  val_Zp_def)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "using \\<open>f' \\<bullet> ns n \\<in> carrier Zp\\<close> not_nonzero_Zp val_Zp_def"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>\n  f' \\<bullet> ns n \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "by meson"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "have A7: \" (divide (f\\<bullet> (ns n)) (f'\\<bullet>(ns n))) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "using A5 A6 A4 A3 F5"], ["proof (prove)\nusing this:\n  f \\<bullet> ns n \\<in> carrier Zp\n  f' \\<bullet> ns n \\<in> nonzero Zp\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n  ns n \\<in> carrier Zp\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "by linarith"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "using A0 A3 cring.cring_simprules(4)"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ns k = ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  ns n \\<in> carrier Zp\n  \\<lbrakk>cring ?R; ?x \\<in> carrier ?R; ?y \\<in> carrier ?R\\<rbrakk>\n  \\<Longrightarrow> ?x \\<ominus>\\<^bsub>?R\\<^esub> ?y \\<in> carrier ?R\n\ngoal (1 subgoal):\n 1. ns k \\<in> carrier Zp", "by (simp add: F1 F5 cring.cring_simprules(4))"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P1: \"val_Zp (f' \\<bullet> ns k) = val_Zp (f'\\<bullet>a) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "proof(cases \"(f' \\<bullet> ns k) = (f' \\<bullet> ns n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f' \\<bullet> ns k = f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n 2. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "case True"], ["proof (state)\nthis:\n  f' \\<bullet> ns k = f' \\<bullet> ns n\n\ngoal (2 subgoals):\n 1. f' \\<bullet> ns k = f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n 2. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  f' \\<bullet> ns k = f' \\<bullet> ns n", "show ?thesis"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns k = f' \\<bullet> ns n\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "using  Suc.IH"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns k = f' \\<bullet> ns n\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "by (metis order_refl)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "case False"], ["proof (state)\nthis:\n  f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "have \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> val_Zp ((ns k) \\<ominus> (ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (ns k \\<ominus> ns n)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using False P0 f'_closed  poly_diff_val  Suc.IH"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n\n  ns k \\<in> carrier Zp\n  f' \\<in> carrier (UP Zp)\n  \\<lbrakk>?f \\<in> carrier (UP Zp); ?a \\<in> carrier Zp;\n   ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp (?a \\<ominus> ?b)\n                    \\<le> val_Zp (?f \\<bullet> ?a \\<ominus> ?f \\<bullet> ?b)\n  ?k2 \\<le> n \\<Longrightarrow>\n  ns ?k2 \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k2) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k2) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. val_Zp (ns k \\<ominus> ns n)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  val_Zp (ns k \\<ominus> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  val_Zp (ns k \\<ominus> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "have \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> val_Zp (\\<ominus> divide (f\\<bullet>(ns n))(f'\\<bullet>(ns n)))\""], ["proof (prove)\nusing this:\n  val_Zp (ns k \\<ominus> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (\\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using  F4"], ["proof (prove)\nusing this:\n  val_Zp (ns k \\<ominus> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n  ns k \\<ominus> ns n =\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (\\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by metis"], ["proof (state)\nthis:\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "have \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> val_Zp (divide (f\\<bullet>(ns n))(f'\\<bullet>(ns n)))\""], ["proof (prove)\nusing this:\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using F5 val_Zp_of_minus"], ["proof (prove)\nusing this:\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by presburger"], ["proof (state)\nthis:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "have P10: \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> val_Zp (f\\<bullet>(ns n)) - val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using F7"], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n  val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by metis"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "have P11: \"val_Zp (f'\\<bullet>(ns n)) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>", "by (simp add: F2)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>", "have \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> (2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * t -  val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using F3 P10"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n  val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by (smt eint_add_cancel_fact eint_add_left_cancel_le order_trans)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "have P12: \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> (2 *(val_Zp (f'\\<bullet>a))) + 2 ^ n * t - (val_Zp (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by (simp add: F2)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "have P13:\"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) \\<ge> (val_Zp (f'\\<bullet>a)) + 2 ^ n * t \""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "have \"(2 *(val_Zp (f'\\<bullet>a))) + (2 ^ n * t) - (val_Zp (f'\\<bullet>a)) =  (2 *(val_Zp (f'\\<bullet>a))) - (val_Zp (f'\\<bullet>a)) + (2 ^ n * t) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> a) =\n    eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n    eint (2 ^ n) * t", "using eint_minus_comm"], ["proof (prove)\nusing this:\n  ?d + ?b - ?c = ?d - ?c + ?b\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> a) =\n    eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n    eint (2 ^ n) * t", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a) =\n  eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a) =\n  eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * t", "show ?thesis"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a) =\n  eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using P12"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a) =\n  eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * t\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using f'a_not_infinite"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a) =\n  eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n  eint (2 ^ n) * t\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n  val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by force"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "have P14: \"val_Zp ((f' \\<bullet> ns k) \\<ominus> (f' \\<bullet> ns n)) > (val_Zp (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    < val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "using f'a_not_infinite ge_plus_pos_imp_gt t_times_pow_pos"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n  val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>\n  \\<lbrakk>?c \\<noteq> \\<infinity>; 0 < ?b; ?c + ?b \\<le> ?d\\<rbrakk>\n  \\<Longrightarrow> ?c < ?d\n  0 < eint (2 ^ ?n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    < val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  < val_Zp (f' \\<bullet> ns k \\<ominus> f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns k \\<noteq> f' \\<bullet> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "by (meson F1 F2 P0 P14 equal_val_Zp f'_closed f'a_closed to_fun_closed)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P2: \"val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P23: \"2 * (val_Zp (f'\\<bullet>a)) + ((2 ^ k) * t) \\<le> val_Zp (f \\<bullet> ns k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have 0: \"ns n \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n \\<in> carrier Zp", "by (simp add: F1)"], ["proof (state)\nthis:\n  ns n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have 1: \"local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "using F5"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have 2: \"(poly_shift_iter 2 (taylor (ns n) f)) \\<bullet> \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift 2 (taylor (ns n) f) \\<bullet>\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n    \\<in> carrier Zp", "using F1 F5 shift_closed 1"], ["proof (prove)\nusing this:\n  ns n \\<in> carrier Zp\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ?f \\<in> carrier (UP Zp) \\<Longrightarrow>\n  shift ?n ?f \\<in> carrier (UP Zp)\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. shift 2 (taylor (ns n) f) \\<bullet>\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n    \\<in> carrier Zp", "by (simp add: taylor_closed to_fun_closed)"], ["proof (state)\nthis:\n  shift 2 (taylor (ns n) f) \\<bullet>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have 3: \"divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<otimes> deriv f (ns n) = f \\<bullet> ns n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<otimes>\n    deriv f (ns n) =\n    f \\<bullet> ns n", "by (metis F1 F2 F6 divide_formula f'_closed f'a_not_infinite f_closed mult_comm pderiv_eval_deriv to_fun_closed val_Zp_def)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<otimes>\n  deriv f (ns n) =\n  f \\<bullet> ns n\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have 4: \"f \\<in> carrier Zp_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "by simp"], ["proof (state)\nthis:\n  f \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "obtain c where c_def: \"c = poly_shift_iter (2::nat) (taylor (ns n) f) \\<bullet> \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c =\n        shift 2 (taylor (ns n) f) \\<bullet>\n        \\<ominus> local.divide (f \\<bullet> ns n)\n                   (f' \\<bullet> ns n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c =\n  shift 2 (taylor (ns n) f) \\<bullet>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "then"], ["proof (chain)\npicking this:\n  c =\n  shift 2 (taylor (ns n) f) \\<bullet>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "have c_def': \"c \\<in> carrier Zp \\<and> f \\<bullet> (ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) = c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] (2::nat)\""], ["proof (prove)\nusing this:\n  c =\n  shift 2 (taylor (ns n) f) \\<bullet>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. c \\<in> carrier Zp \\<and>\n    f \\<bullet>\n    (ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n    c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2", "using 0 1 2 3 4 UP_cring.taylor_deg_1_eval'''[of Zp f \"ns n\" \"(divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n)))\" c]\n                Zp_x_is_UP_cring"], ["proof (prove)\nusing this:\n  c =\n  shift 2 (taylor (ns n) f) \\<bullet>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  ns n \\<in> carrier Zp\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  shift 2 (taylor (ns n) f) \\<bullet>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  \\<in> carrier Zp\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<otimes>\n  deriv f (ns n) =\n  f \\<bullet> ns n\n  f \\<in> carrier (UP Zp)\n  \\<lbrakk>UP_cring Zp; f \\<in> carrier (UP Zp); ns n \\<in> carrier Zp;\n   local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp;\n   c =\n   shift 2 (taylor (ns n) f) \\<bullet>\n   \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n);\n   local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<otimes>\n   deriv f (ns n) =\n   f \\<bullet> ns n\\<rbrakk>\n  \\<Longrightarrow> f \\<bullet>\n                    (ns n \\<ominus> local.divide (f \\<bullet> ns n)\n                                     (f' \\<bullet> ns n)) =\n                    c \\<otimes>\n                    local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^]\n                    2\n  UP_cring Zp\n\ngoal (1 subgoal):\n 1. c \\<in> carrier Zp \\<and>\n    f \\<bullet>\n    (ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n    c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2", "by blast"], ["proof (state)\nthis:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet>\n  (ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n  c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P230: \"f\\<bullet>(ns k) =  (c \\<otimes> (divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n)))[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns k =\n    c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2", "using c_def'"], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet>\n  (ns n \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)) =\n  c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns k =\n    c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2", "by (simp add: kval newton_step_def)"], ["proof (state)\nthis:\n  f \\<bullet> ns k =\n  c \\<otimes> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P231: \"val_Zp (f\\<bullet>(ns k)) = val_Zp c + 2*(val_Zp (f\\<bullet>(ns n)) - val_Zp(f'\\<bullet>(ns n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns k) =\n    val_Zp c +\n    eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns k) =\n    val_Zp c +\n    eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))", "have P2310: \"val_Zp (f\\<bullet>(ns k)) =  val_Zp c + val_Zp ((divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n)))[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns k) =\n    val_Zp c +\n    val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2)", "by (simp add: F5 P230 c_def' val_Zp_mult)"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> ns k) =\n  val_Zp c +\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns k) =\n    val_Zp c +\n    eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))", "have P2311: \"val_Zp ((divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n)))[^](2::nat)) \n                                                    =  2*(val_Zp (f\\<bullet>(ns n)) - val_Zp(f'\\<bullet>(ns n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2) =\n    eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))", "by (metis  F5 F7 R.pow_zero mult.commute not_nonzero_Zp of_nat_numeral times_eint_simps(3) val_Zp_def val_Zp_pow' zero_less_numeral)"], ["proof (state)\nthis:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2) =\n  eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns k) =\n    val_Zp c +\n    eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) [^] 2) =\n  eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> ns k) =\n    val_Zp c +\n    eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))", "by (simp add: P2310)"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> ns k) =\n  val_Zp c +\n  eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> ns k) =\n  val_Zp c +\n  eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P232: \"val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(val_Zp (f\\<bullet>(ns n)) - val_Zp(f'\\<bullet>(ns n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n    \\<le> val_Zp (f \\<bullet> ns k)", "by (simp add: P231 c_def' val_pos)"], ["proof (state)\nthis:\n  eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "have P236:  \"val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(2 *val_Zp (f'\\<bullet>a) + 2 ^ n * t)  - 2* val_Zp(f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "using P232 F3 eint_minus_ineq''[of \"val_Zp(f'\\<bullet>(ns n))\" \"(2 *val_Zp (f'\\<bullet>a)) + 2 ^ n * t\" \"val_Zp (f\\<bullet>(ns n))\" 2 ]\n                       F2 eint_pow_int_is_pos"], ["proof (prove)\nusing this:\n  eint 2 * (val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n))\n  \\<le> val_Zp (f \\<bullet> ns k)\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n  \\<lbrakk>val_Zp (f' \\<bullet> ns n) \\<noteq> \\<infinity>;\n   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n   \\<le> val_Zp (f \\<bullet> ns n);\n   0 < eint 2; eint 2 \\<noteq> \\<infinity>\\<rbrakk>\n  \\<Longrightarrow> eint 2 *\n                    (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n                    eint 2 * val_Zp (f' \\<bullet> ns n)\n                    \\<le> eint 2 *\n                          (val_Zp (f \\<bullet> ns n) -\n                           val_Zp (f' \\<bullet> ns n))\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n  0 < ?n \\<Longrightarrow> 0 < eint ?n\n\ngoal (1 subgoal):\n 1. eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "by auto"], ["proof (state)\nthis:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n  eint 2 * val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "hence  P237:  \"val_Zp (f\\<bullet>(ns k)) \\<ge>(4*val_Zp (f'\\<bullet>a)) + (2*((2 ^ n)* t)) - 2* val_Zp(f'\\<bullet>(ns n))\""], ["proof (prove)\nusing this:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n  eint 2 * val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k) \\<Longrightarrow>\n    eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "have \"2*(2*val_Zp (f'\\<bullet>a) + 2 ^ n * t)  = (4*val_Zp (f'\\<bullet>a)) + 2*(2 ^ n)* t \""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n    eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t", "using distrib_left[of 2 \"2*val_Zp (f'\\<bullet>a)\" \"2 ^ n * t\"] mult.assoc mult_one_right one_eint_def plus_eint_simps(1)\n                          hensel_factor_def val_Zp_def"], ["proof (prove)\nusing this:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a)) + eint 2 * (eint (2 ^ n) * t)\n  ?a * ?b * ?c = ?a * (?b * ?c)\n  ?n * 1 = ?n\n  1 = eint 1\n  eint ?m + eint ?n = eint (?m + ?n)\n  t = val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n    eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t", "by auto"], ["proof (state)\nthis:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k) \\<Longrightarrow>\n    eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "then"], ["proof (chain)\npicking this:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t", "show ?thesis"], ["proof (prove)\nusing this:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "using P236"], ["proof (prove)\nusing this:\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) =\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t) -\n  eint 2 * val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n    eint 2 * val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (f \\<bullet> ns k)", "by (metis mult.assoc)"], ["proof (state)\nthis:\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n  eint 2 * val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n  eint 2 * val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "hence P237:  \"val_Zp (f\\<bullet>(ns k)) \\<ge> 4*val_Zp (f'\\<bullet>a) + 2*(2 ^ n)* t - 2* val_Zp((f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * (eint (2 ^ n) * t) -\n  eint 2 * val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t -\n    eint 2 * val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (f \\<bullet> ns k)", "by (metis F2 mult.assoc)"], ["proof (state)\nthis:\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t -\n  eint 2 * val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "hence P238: \"val_Zp (f\\<bullet>(ns k)) \\<ge> 2*val_Zp (f'\\<bullet>a) + 2*(2 ^ n)* t\""], ["proof (prove)\nusing this:\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t -\n  eint 2 * val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "using eint_minus_comm[of \"4*val_Zp (f'\\<bullet>a) \" \"2*(2 ^ n)* t\" \"2* val_Zp((f'\\<bullet>a))\"]"], ["proof (prove)\nusing this:\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t -\n  eint 2 * val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns k)\n  eint 4 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t -\n  eint 2 * val_Zp (f' \\<bullet> a) =\n  eint 4 * val_Zp (f' \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a) +\n  eint 2 * eint (2 ^ n) * t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by (simp add: eint_int_minus_distr)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by (simp add: kval)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "show \"val_Zp (to_fun f' (ns k)) = val_Zp (f'\\<bullet>a) \\<and> \n                2 * val_Zp (f'\\<bullet>a) + eint (2 ^ k) * t \\<le> val_Zp (to_fun f (ns k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "using P1 P2"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n    eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns k \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma newton_seq_closed:\nshows \"ns m \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns m \\<in> carrier Zp", "using newton_seq_props_induct"], ["proof (prove)\nusing this:\n  ?k \\<le> ?n \\<Longrightarrow>\n  ns ?k \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k)\n\ngoal (1 subgoal):\n 1. ns m \\<in> carrier Zp", "by blast"], ["", "lemma f_of_newton_seq_closed:\nshows \"f \\<bullet> ns m \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns m \\<in> carrier Zp", "by (simp add: to_fun_closed newton_seq_closed)"], ["", "lemma newton_seq_fact1[simp]:\n\" val_Zp (f'\\<bullet>(ns k)) = val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "using newton_seq_props_induct"], ["proof (prove)\nusing this:\n  ?k \\<le> ?n \\<Longrightarrow>\n  ns ?k \\<in> carrier Zp \\<and>\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a) \\<and>\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns k) = val_Zp (f' \\<bullet> a)", "by blast"], ["", "lemma newton_seq_fact2:\n\"\\<And>k.  val_Zp (f\\<bullet>(ns k)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n       \\<le> val_Zp (f \\<bullet> ns k)", "by (meson le_iff_add newton_seq_props_induct)"], ["", "lemma newton_seq_fact3:\n\"val_Zp (f\\<bullet>(ns l)) \\<ge> val_Zp (f'\\<bullet>(ns l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "have \"2*(val_Zp (f'\\<bullet>a)) + (2^l)*t \\<ge> (val_Zp (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t", "using f'a_closed ord_pos t_pos"], ["proof (prove)\nusing this:\n  f' \\<bullet> a \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> ord_Zp ?x\n  0 < t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t", "by (smt eint_pos_int_times_ge f'a_nonneg_val f'a_not_infinite ge_plus_pos_imp_gt linorder_not_less nat_mult_not_infty order_less_le t_times_pow_pos)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t", "show \"val_Zp (f \\<bullet> ns l) \\<ge> val_Zp (f' \\<bullet> ns l) \""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "using  f'a_closed f'a_nonzero newton_seq_fact1[of l] newton_seq_fact2[of l]  val_Zp_def"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n  f' \\<bullet> a \\<in> carrier Zp\n  f' \\<bullet> a \\<noteq> \\<zero>\n  val_Zp (f' \\<bullet> ns l) = val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n  \\<le> val_Zp (f \\<bullet> ns l)\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>val_Zp (f' \\<bullet> a)\n             \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t;\n     f' \\<bullet> a \\<in> carrier Zp; f' \\<bullet> a \\<noteq> \\<zero>;\n     val_Zp (f' \\<bullet> ns l) = val_Zp (f' \\<bullet> a);\n     eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n     \\<le> val_Zp (f \\<bullet> ns l);\n     val_Zp =\n     (\\<lambda>x.\n         if x = \\<zero> then \\<infinity> else eint (padic_val p x))\\<rbrakk>\n    \\<Longrightarrow> val_Zp (f' \\<bullet> ns l)\n                      \\<le> val_Zp (f \\<bullet> ns l)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "using \\<open>eint 2 * val_Zp (f'\\<bullet>a) + eint (2 ^ l) * t \\<le> val_Zp (to_fun f (ns l))\\<close> \\<open>val_Zp (f'\\<bullet>a) \\<le> eint 2 * val_Zp (f'\\<bullet>a) + eint (2 ^ l) * t\\<close>"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n  \\<le> val_Zp (f \\<bullet> ns l)\n  val_Zp (f' \\<bullet> a)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ l) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "by force"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma newton_seq_fact4[simp]:\n  assumes \"f\\<bullet>(ns l) \\<noteq>\\<zero>\"\n  shows \"val_Zp (f\\<bullet>(ns l)) \\<ge> val_Zp (f'\\<bullet>(ns l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "using newton_seq_fact3"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns ?l) \\<le> val_Zp (f \\<bullet> ns ?l)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "by blast"], ["", "lemma newton_seq_fact5:\n\"divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp", "apply(rule divide_closed)"], ["proof (prove)\ngoal (3 subgoals):\n 1. f \\<bullet> ns l \\<in> carrier Zp\n 2. f' \\<bullet> ns l \\<in> carrier Zp\n 3. f' \\<bullet> ns l \\<noteq> \\<zero>", "apply (simp add: to_fun_closed newton_seq_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f' \\<bullet> ns l \\<in> carrier Zp\n 2. f' \\<bullet> ns l \\<noteq> \\<zero>", "apply (simp add: f'_closed to_fun_closed newton_seq_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<noteq> \\<zero>", "by (metis f'a_not_infinite newton_seq_fact1 val_Zp_def)"], ["", "lemma newton_seq_fact6:\n\"(f'\\<bullet>(ns l)) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<in> nonzero Zp", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<notin> nonzero Zp \\<Longrightarrow> False", "using  nonzero_memI nonzero_memE  \n        f'a_nonzero newton_seq_fact1  val_Zp_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> carrier Zp; ?a \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> nonzero Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<noteq> \\<zero>\n  f' \\<bullet> a \\<noteq> \\<zero>\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a)\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<notin> nonzero Zp \\<Longrightarrow> False", "by (metis (no_types, lifting) divide_closed f'_closed f'a_closed fa_closed hensel_factor_id \n      hensel_hypothesis_weakened mult_zero_l newton_seq_closed order_less_le to_fun_closed val_Zp_mult)"], ["", "lemma newton_seq_fact7:\n \"(ns (Suc n)) \\<ominus> (ns n) = \\<ominus>divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc n) \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "using newton_seq.simps(2)[of n]  newton_seq_fact5[of n] \n        newton_seq_closed[of \"Suc n\"]  newton_seq_closed[of n] \n        R.ring_simprules"], ["proof (prove)\nusing this:\n  ns (Suc n) = newton_step (ns n)\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ns (Suc n) \\<in> carrier Zp\n  ns n \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<in> carrier Zp\n  \\<zero> \\<in> carrier Zp\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<ominus> ?y \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<in> carrier Zp\n  \\<one> \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<oplus> ?z =\n                    ?x \\<oplus> (?y \\<oplus> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<oplus> ?x = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<oplus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y = ?y \\<oplus> ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<otimes> ?z =\n                    ?x \\<otimes> (?y \\<otimes> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<one> \\<otimes> ?x = ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<otimes> ?z =\n                    ?x \\<otimes> ?z \\<oplus> ?y \\<otimes> ?z\n  ?x \\<ominus> ?y = ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<zero> = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<ominus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (\\<ominus> ?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<oplus> (?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> (?x \\<oplus> ?y) =\n                    \\<ominus> ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> (\\<ominus> ?x) = ?x\n  \\<ominus> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (?y \\<oplus> ?z) =\n                    ?y \\<oplus> (?x \\<oplus> ?z)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?z \\<otimes> (?x \\<oplus> ?y) =\n                    ?z \\<otimes> ?x \\<oplus> ?z \\<otimes> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<otimes> ?x = \\<zero>\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<otimes> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<otimes> ?y = \\<ominus> (?x \\<otimes> ?y)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> \\<ominus> ?y = \\<ominus> (?x \\<otimes> ?y)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "unfolding newton_step_def a_minus_def"], ["proof (prove)\nusing this:\n  ns (Suc n) =\n  ns n \\<oplus>\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n) \\<in> carrier Zp\n  ns (Suc n) \\<in> carrier Zp\n  ns n \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<in> carrier Zp\n  \\<zero> \\<in> carrier Zp\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> \\<ominus> ?y \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<in> carrier Zp\n  \\<one> \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<oplus> ?z =\n                    ?x \\<oplus> (?y \\<oplus> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<oplus> ?x = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<oplus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y = ?y \\<oplus> ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<otimes> ?z =\n                    ?x \\<otimes> (?y \\<otimes> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<one> \\<otimes> ?x = ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<otimes> ?z =\n                    ?x \\<otimes> ?z \\<oplus> ?y \\<otimes> ?z\n  ?x \\<oplus> \\<ominus> ?y = ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<zero> = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<ominus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (\\<ominus> ?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<oplus> (?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> (?x \\<oplus> ?y) =\n                    \\<ominus> ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> (\\<ominus> ?x) = ?x\n  \\<ominus> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (?y \\<oplus> ?z) =\n                    ?y \\<oplus> (?x \\<oplus> ?z)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?z \\<otimes> (?x \\<oplus> ?y) =\n                    ?z \\<otimes> ?x \\<oplus> ?z \\<otimes> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<otimes> ?x = \\<zero>\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<otimes> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<otimes> ?y = \\<ominus> (?x \\<otimes> ?y)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> \\<ominus> ?y = \\<ominus> (?x \\<otimes> ?y)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<oplus> \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "by smt"], ["", "lemma newton_seq_fact8:\n  assumes \"f\\<bullet>(ns l) \\<noteq>\\<zero>\"\n  shows \"divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> nonzero Zp", "using assms divide_nonzero[of \"f \\<bullet> ns l\" \"f' \\<bullet> ns l\"]\n        nonzero_memI"], ["proof (prove)\nusing this:\n  f \\<bullet> ns l \\<noteq> \\<zero>\n  \\<lbrakk>f \\<bullet> ns l \\<in> nonzero Zp;\n   f' \\<bullet> ns l \\<in> nonzero Zp;\n   val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)\\<rbrakk>\n  \\<Longrightarrow> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)\n                    \\<in> nonzero Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?a \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> nonzero Zp", "using f_of_newton_seq_closed newton_seq_fact3 newton_seq_fact6"], ["proof (prove)\nusing this:\n  f \\<bullet> ns l \\<noteq> \\<zero>\n  \\<lbrakk>f \\<bullet> ns l \\<in> nonzero Zp;\n   f' \\<bullet> ns l \\<in> nonzero Zp;\n   val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)\\<rbrakk>\n  \\<Longrightarrow> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)\n                    \\<in> nonzero Zp\n  \\<lbrakk>?a \\<in> carrier Zp; ?a \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> nonzero Zp\n  f \\<bullet> ns ?m \\<in> carrier Zp\n  val_Zp (f' \\<bullet> ns ?l) \\<le> val_Zp (f \\<bullet> ns ?l)\n  f' \\<bullet> ns ?l \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> nonzero Zp", "by blast"], ["", "lemma newton_seq_fact9:\n  assumes \"f\\<bullet>(ns n) \\<noteq>\\<zero>\"\n  shows \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) = val_Zp (f\\<bullet>(ns n)) - val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) =\n    val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)", "using newton_seq_fact7 val_of_divide newton_seq_fact6 assms nonzero_memI\n        f_of_newton_seq_closed newton_seq_fact4 newton_seq_fact5"], ["proof (prove)\nusing this:\n  ns (Suc ?n) \\<ominus> ns ?n =\n  \\<ominus> local.divide (f \\<bullet> ns ?n) (f' \\<bullet> ns ?n)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> nonzero Zp;\n   val_Zp ?y \\<le> val_Zp ?x\\<rbrakk>\n  \\<Longrightarrow> val_Zp (local.divide ?x ?y) = val_Zp ?x - val_Zp ?y\n  f' \\<bullet> ns ?l \\<in> nonzero Zp\n  f \\<bullet> ns n \\<noteq> \\<zero>\n  \\<lbrakk>?a \\<in> carrier Zp; ?a \\<noteq> \\<zero>\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> nonzero Zp\n  f \\<bullet> ns ?m \\<in> carrier Zp\n  f \\<bullet> ns ?l \\<noteq> \\<zero> \\<Longrightarrow>\n  val_Zp (f' \\<bullet> ns ?l) \\<le> val_Zp (f \\<bullet> ns ?l)\n  local.divide (f \\<bullet> ns ?l) (f' \\<bullet> ns ?l) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) =\n    val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)", "by (metis val_Zp_of_minus)"], ["", "text\\<open>Assuming no element of the Newton sequence is a root of f, the Newton sequence is Cauchy.\\<close>"], ["", "lemma newton_seq_is_Zp_cauchy_0:\nassumes \"\\<And>k. f\\<bullet>(ns k) \\<noteq>\\<zero>\"\nshows \"is_Zp_cauchy ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy ns", "proof(rule is_Zp_cauchyI')"], ["proof (state)\ngoal (2 subgoals):\n 1. ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<forall>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "show P0: \"ns \\<in> closed_seqs Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>", "proof(rule closed_seqs_memI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. ns k \\<in> carrier Zp", "show \"\\<And>k. ns k \\<in> carrier Zp \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. ns k \\<in> carrier Zp", "by (simp add: newton_seq_closed)"], ["proof (state)\nthis:\n  ns ?k2 \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "show \"\\<forall>n. \\<exists>k. \\<forall>m. k \\<le> int m \\<longrightarrow> int n \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "show \"\\<exists>k. \\<forall>m. k \\<le> int m \\<longrightarrow> int n \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "proof(induction \"n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n 2. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n 2. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "have B0: \"\\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> ns n0 0 = ns n1 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> ns n0 0 = ns n1 0", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> ns n0 0 = ns n1 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> ns n0 0 = ns n1 0", "fix n0 n1::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> ns n0 0 = ns n1 0", "assume A: \"0 < n0\" \"0 < n1\""], ["proof (state)\nthis:\n  0 < n0\n  0 < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>0 < n0; 0 < n1\\<rbrakk> \\<Longrightarrow> ns n0 0 = ns n1 0", "show \"ns n0 0 = ns n1 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n0 0 = ns n1 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ns n0 0 = ns n1 0", "have 0: \"ns n0 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n0 \\<in> carrier Zp", "using P0"], ["proof (prove)\nusing this:\n  ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. ns n0 \\<in> carrier Zp", "by (simp add: newton_seq_closed)"], ["proof (state)\nthis:\n  ns n0 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns n0 0 = ns n1 0", "have 1: \"ns n1 \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n1 \\<in> carrier Zp", "using P0"], ["proof (prove)\nusing this:\n  ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n\ngoal (1 subgoal):\n 1. ns n1 \\<in> carrier Zp", "by (simp add: newton_seq_closed)"], ["proof (state)\nthis:\n  ns n1 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns n0 0 = ns n1 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n0 0 = ns n1 0", "using 0 1 Zp_defs(3) prime"], ["proof (prove)\nusing this:\n  ns n0 \\<in> carrier Zp\n  ns n1 \\<in> carrier Zp\n  carrier Zp = padic_set p\n  prime p\n\ngoal (1 subgoal):\n 1. ns n0 0 = ns n1 0", "by (metis p_res_ring_0' residue_closed)"], ["proof (state)\nthis:\n  ns n0 0 = ns n1 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns n0 0 = ns n1 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> ns n0 0 = ns n1 0\n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n 2. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "have \"\\<forall>m. 1 \\<le> int m \\<longrightarrow> int 0 \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m.\n       1 \\<le> int m \\<longrightarrow>\n       eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       1 \\<le> int m \\<longrightarrow>\n       eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       1 \\<le> int m \\<longrightarrow>\n       eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "show \"1 \\<le> int m \\<longrightarrow> int 0 \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> int m \\<longrightarrow>\n    eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 \\<le> int m \\<Longrightarrow>\n    eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "assume \"1 \\<le> int m \""], ["proof (state)\nthis:\n  1 \\<le> int m\n\ngoal (1 subgoal):\n 1. 1 \\<le> int m \\<Longrightarrow>\n    eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "then"], ["proof (chain)\npicking this:\n  1 \\<le> int m", "have C0:\"ns (Suc m) 0 = ns m 0\""], ["proof (prove)\nusing this:\n  1 \\<le> int m\n\ngoal (1 subgoal):\n 1. ns (Suc m) 0 = ns m 0", "using B0"], ["proof (prove)\nusing this:\n  1 \\<le> int m\n  \\<forall>n0 n1. 0 < n0 \\<and> 0 < n1 \\<longrightarrow> ns n0 0 = ns n1 0\n\ngoal (1 subgoal):\n 1. ns (Suc m) 0 = ns m 0", "by (metis int_one_le_iff_zero_less int_ops(1) less_Suc_eq_0_disj of_nat_less_iff)"], ["proof (state)\nthis:\n  ns (Suc m) 0 = ns m 0\n\ngoal (1 subgoal):\n 1. 1 \\<le> int m \\<Longrightarrow>\n    eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "then"], ["proof (chain)\npicking this:\n  ns (Suc m) 0 = ns m 0", "show \"int 0 \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\""], ["proof (prove)\nusing this:\n  ns (Suc m) 0 = ns m 0\n\ngoal (1 subgoal):\n 1. eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ns (Suc m) 0 = ns m 0 \\<Longrightarrow>\n    eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "have \"(newton_step (ns m)) \\<noteq>(ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "have A0: \"divide (f\\<bullet>(ns m)) (f'\\<bullet>(ns m)) \\<noteq>\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "have 0: \"(f\\<bullet>(ns m)) \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns m \\<noteq> \\<zero>", "using assms"], ["proof (prove)\nusing this:\n  f \\<bullet> ns ?k2 \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns m \\<noteq> \\<zero>", "by auto"], ["proof (state)\nthis:\n  f \\<bullet> ns m \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "have 1: \" (f'\\<bullet>(ns m)) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns m \\<in> carrier Zp", "by (simp add: UP_cring.to_fun_closed Zp_x_is_UP_cring f'_closed newton_seq_closed)"], ["proof (state)\nthis:\n  f' \\<bullet> ns m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "have 2:  \"(f'\\<bullet>(ns m)) \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns m \\<noteq> \\<zero>", "using newton_seq_fact6 not_nonzero_memI"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns ?l \\<in> nonzero Zp\n  ?a = \\<zero> \\<Longrightarrow> ?a \\<notin> nonzero Zp\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns m \\<noteq> \\<zero>", "by blast"], ["proof (state)\nthis:\n  f' \\<bullet> ns m \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "using 0 1 2"], ["proof (prove)\nusing this:\n  f \\<bullet> ns m \\<noteq> \\<zero>\n  f' \\<bullet> ns m \\<in> carrier Zp\n  f' \\<bullet> ns m \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>", "by (metis R.r_null divide_formula f_closed to_fun_closed newton_seq_closed newton_seq_fact4)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "have A2: \"local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<in> carrier Zp", "using newton_seq_fact5"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns ?l) (f' \\<bullet> ns ?l) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "have A3: \"ns m \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns m \\<in> carrier Zp", "by (simp add: newton_seq_closed)"], ["proof (state)\nthis:\n  ns m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "have A4: \"newton_step (ns m) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<in> carrier Zp", "by (metis newton_seq.simps(2) newton_seq_closed)"], ["proof (state)\nthis:\n  newton_step (ns m) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. newton_step (ns m) \\<noteq> ns m", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> newton_step (ns m) \\<noteq> ns m \\<Longrightarrow> False", "using A4 A3 A2 A0 newton_step_def[of \"(ns m)\"]"], ["proof (prove)\nusing this:\n  newton_step (ns m) \\<in> carrier Zp\n  ns m \\<in> carrier Zp\n  local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<in> carrier Zp\n  local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m) \\<noteq> \\<zero>\n  newton_step (ns m) =\n  ns m \\<ominus> local.divide (f \\<bullet> ns m) (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. \\<not> newton_step (ns m) \\<noteq> ns m \\<Longrightarrow> False", "by (simp add: a_minus_def)"], ["proof (state)\nthis:\n  newton_step (ns m) \\<noteq> ns m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  newton_step (ns m) \\<noteq> ns m\n\ngoal (1 subgoal):\n 1. ns (Suc m) 0 = ns m 0 \\<Longrightarrow>\n    eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "then"], ["proof (chain)\npicking this:\n  newton_step (ns m) \\<noteq> ns m", "show ?thesis"], ["proof (prove)\nusing this:\n  newton_step (ns m) \\<noteq> ns m\n\ngoal (1 subgoal):\n 1. eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "using C0"], ["proof (prove)\nusing this:\n  newton_step (ns m) \\<noteq> ns m\n  ns (Suc m) 0 = ns m 0\n\ngoal (1 subgoal):\n 1. eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "by (metis newton_seq.simps(2) newton_seq_closed val_Zp_dist_res_eq2)"], ["proof (state)\nthis:\n  eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> int m \\<longrightarrow>\n  eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m.\n     1 \\<le> int m \\<longrightarrow>\n     eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n 2. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "then"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     1 \\<le> int m \\<longrightarrow>\n     eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     1 \\<le> int m \\<longrightarrow>\n     eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "using val_Zp_def val_Zp_dist_def"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     1 \\<le> int m \\<longrightarrow>\n     eint (int 0) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "by (metis int_ops(1) newton_seq.simps(2) zero_eint_def)"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<forall>m.\n        k \\<le> int m \\<longrightarrow>\n        eint (int 0) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<forall>m.\n        k \\<le> int m \\<longrightarrow>\n        eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int n)\n             \\<le> val_Zp (ns (Suc m) \\<ominus> ns m) \\<Longrightarrow>\n       \\<exists>k.\n          \\<forall>m.\n             k \\<le> int m \\<longrightarrow>\n             eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "show \"\\<exists>k. \\<forall>m. k \\<le> int m \\<longrightarrow> int (Suc n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "obtain k0 where k0_def: \"k0 \\<ge>0 \\<and> (\\<forall>m. k0 \\<le> int m \\<longrightarrow> int n \\<le> val_Zp (ns (Suc m) \\<ominus> ns m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k0.\n        0 \\<le> k0 \\<and>\n        (\\<forall>m.\n            k0 \\<le> int m \\<longrightarrow>\n            eint (int n)\n            \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Suc.IH"], ["proof (prove)\nusing this:\n  \\<exists>k.\n     \\<forall>m.\n        k \\<le> int m \\<longrightarrow>\n        eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal (1 subgoal):\n 1. (\\<And>k0.\n        0 \\<le> k0 \\<and>\n        (\\<forall>m.\n            k0 \\<le> int m \\<longrightarrow>\n            eint (int n)\n            \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis int_nat_eq le0 nat_le_iff of_nat_0_eq_iff )"], ["proof (state)\nthis:\n  0 \\<le> k0 \\<and>\n  (\\<forall>m.\n      k0 \\<le> int m \\<longrightarrow>\n      eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m))\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "have I0: \"\\<And>l. val_Zp (ns (Suc l) \\<ominus> ns l) = val_Zp (f\\<bullet> (ns l)) - val_Zp (f'\\<bullet>(ns l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "have I00:\"(ns (Suc l) \\<ominus> ns l) = (\\<ominus> divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc l) \\<ominus> ns l =\n    \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ns (Suc l) \\<ominus> ns l =\n    \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)", "have \"local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp", "by (simp add: newton_seq_fact5)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns (Suc l) \\<ominus> ns l =\n    \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)", "then"], ["proof (chain)\npicking this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns (Suc l) \\<ominus> ns l =\n    \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)", "using newton_seq.simps(2)[of l] newton_seq_closed R.ring_simprules"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n  ns (Suc l) = newton_step (ns l)\n  ns ?m \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<in> carrier Zp\n  \\<zero> \\<in> carrier Zp\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<ominus> ?y \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<in> carrier Zp\n  \\<one> \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<oplus> ?z =\n                    ?x \\<oplus> (?y \\<oplus> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<oplus> ?x = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<oplus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y = ?y \\<oplus> ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<otimes> ?z =\n                    ?x \\<otimes> (?y \\<otimes> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<one> \\<otimes> ?x = ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<otimes> ?z =\n                    ?x \\<otimes> ?z \\<oplus> ?y \\<otimes> ?z\n  ?x \\<ominus> ?y = ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<zero> = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<ominus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (\\<ominus> ?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<oplus> (?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> (?x \\<oplus> ?y) =\n                    \\<ominus> ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> (\\<ominus> ?x) = ?x\n  \\<ominus> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (?y \\<oplus> ?z) =\n                    ?y \\<oplus> (?x \\<oplus> ?z)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?z \\<otimes> (?x \\<oplus> ?y) =\n                    ?z \\<otimes> ?x \\<oplus> ?z \\<otimes> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<otimes> ?x = \\<zero>\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<otimes> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<otimes> ?y = \\<ominus> (?x \\<otimes> ?y)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> \\<ominus> ?y = \\<ominus> (?x \\<otimes> ?y)\n\ngoal (1 subgoal):\n 1. ns (Suc l) \\<ominus> ns l =\n    \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)", "unfolding newton_step_def a_minus_def"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n  ns (Suc l) =\n  ns l \\<oplus>\n  \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)\n  ns ?m \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<in> carrier Zp\n  \\<zero> \\<in> carrier Zp\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> \\<ominus> ?y \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<in> carrier Zp\n  \\<one> \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y \\<oplus> ?z =\n                    ?x \\<oplus> (?y \\<oplus> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<oplus> ?x = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<oplus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y = ?y \\<oplus> ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> ?y \\<otimes> ?z =\n                    ?x \\<otimes> (?y \\<otimes> ?z)\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<one> \\<otimes> ?x = ?x\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<otimes> ?z =\n                    ?x \\<otimes> ?z \\<oplus> ?y \\<otimes> ?z\n  ?x \\<oplus> \\<ominus> ?y = ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<zero> = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<oplus> \\<ominus> ?x = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (\\<ominus> ?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<oplus> (?x \\<oplus> ?y) = ?y\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> (?x \\<oplus> ?y) =\n                    \\<ominus> ?x \\<oplus> \\<ominus> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> (\\<ominus> ?x) = ?x\n  \\<ominus> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> (?y \\<oplus> ?z) =\n                    ?y \\<oplus> (?x \\<oplus> ?z)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp;\n   ?z \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?z \\<otimes> (?x \\<oplus> ?y) =\n                    ?z \\<otimes> ?x \\<oplus> ?z \\<otimes> ?y\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<zero> \\<otimes> ?x = \\<zero>\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x \\<otimes> \\<zero> = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<otimes> ?y = \\<ominus> (?x \\<otimes> ?y)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes> \\<ominus> ?y = \\<ominus> (?x \\<otimes> ?y)\n\ngoal (1 subgoal):\n 1. ns (Suc l) \\<oplus> \\<ominus> ns l =\n    \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)", "by (metis add_comm)"], ["proof (state)\nthis:\n  ns (Suc l) \\<ominus> ns l =\n  \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns (Suc l) \\<ominus> ns l =\n  \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "have I01: \"val_Zp (ns (Suc l) \\<ominus> ns l) = val_Zp (divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "have I010: \"(divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l))) \\<in>carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp", "by (simp add: newton_seq_fact5)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "have I011: \"(divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l))) \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "have A: \"(f\\<bullet>(ns l)) \\<noteq>\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns l \\<noteq> \\<zero>", "by (simp add: assms)"], ["proof (state)\nthis:\n  f \\<bullet> ns l \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "have B: \" (f'\\<bullet>(ns l))  \\<in>carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<in> carrier Zp", "using nonzero_memE newton_seq_fact6"], ["proof (prove)\nusing this:\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<noteq> \\<zero>\n  f' \\<bullet> ns ?l \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<in> carrier Zp", "by auto"], ["proof (state)\nthis:\n  f' \\<bullet> ns l \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "then"], ["proof (chain)\npicking this:\n  f' \\<bullet> ns l \\<in> carrier Zp", "have C: \" (f'\\<bullet>(ns l))  \\<in>nonzero  Zp\""], ["proof (prove)\nusing this:\n  f' \\<bullet> ns l \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<in> nonzero Zp", "using  f'a_closed fa_closed fa_nonzero hensel_factor_id hensel_hypothesis_weakened\n                     newton_seq_fact1[of l]   not_nonzero_Zp val_Zp_def"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns l \\<in> carrier Zp\n  f' \\<bullet> a \\<in> carrier Zp\n  f \\<bullet> a \\<in> carrier Zp\n  f \\<bullet> a \\<noteq> \\<zero>\n  local.divide (f \\<bullet> a) (f' \\<bullet> a) \\<otimes> (f' \\<bullet> a) =\n  f \\<bullet> a\n  val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n  val_Zp (f' \\<bullet> ns l) = val_Zp (f' \\<bullet> a)\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<in> nonzero Zp", "by fastforce"], ["proof (state)\nthis:\n  f' \\<bullet> ns l \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "then"], ["proof (chain)\npicking this:\n  f' \\<bullet> ns l \\<in> nonzero Zp", "show ?thesis"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns l \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "using I010 A"], ["proof (prove)\nusing this:\n  f' \\<bullet> ns l \\<in> nonzero Zp\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n  f \\<bullet> ns l \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "by (metis B R.r_null divide_formula f_closed to_fun_closed newton_seq_closed newton_seq_fact4 nonzero_memE(2))"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "then"], ["proof (chain)\npicking this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>", "have \"val_Zp (divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l)))\n                    = val_Zp (\\<ominus> divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l)))\""], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n    val_Zp (\\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "using I010 not_nonzero_Zp val_Zp_of_minus"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<noteq> \\<zero>\n  local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l) \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n    val_Zp (\\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "by blast"], ["proof (state)\nthis:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "then"], ["proof (chain)\npicking this:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "using I00"], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (\\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n  ns (Suc l) \\<ominus> ns l =\n  \\<ominus> local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))", "by metis"], ["proof (state)\nthis:\n  val_Zp (ns (Suc l) \\<ominus> ns l) =\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (ns (Suc l) \\<ominus> ns l) =\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "have I02: \"val_Zp (f\\<bullet>(ns l)) \\<ge> val_Zp (f'\\<bullet>(ns l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "using assms  newton_seq_fact4"], ["proof (prove)\nusing this:\n  f \\<bullet> ns ?k2 \\<noteq> \\<zero>\n  f \\<bullet> ns ?l \\<noteq> \\<zero> \\<Longrightarrow>\n  val_Zp (f' \\<bullet> ns ?l) \\<le> val_Zp (f \\<bullet> ns ?l)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "have I03: \"(f\\<bullet>(ns l)) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns l \\<in> nonzero Zp", "by (meson UP_cring.to_fun_closed Zp_x_is_UP_cring assms f_closed newton_seq_closed not_nonzero_Zp)"], ["proof (state)\nthis:\n  f \\<bullet> ns l \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "have I04: \"f'\\<bullet>(ns l) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns l \\<in> nonzero Zp", "by (simp add: newton_seq_fact6)"], ["proof (state)\nthis:\n  f' \\<bullet> ns l \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "have I05 :\" val_Zp (divide (f\\<bullet>(ns l)) (f'\\<bullet>(ns l))) = val_Zp (f\\<bullet> (ns l)) - val_Zp (f'\\<bullet>(ns l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n    val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "using I02 I03 I04 I01 assms newton_seq_fact9"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns l) \\<le> val_Zp (f \\<bullet> ns l)\n  f \\<bullet> ns l \\<in> nonzero Zp\n  f' \\<bullet> ns l \\<in> nonzero Zp\n  val_Zp (ns (Suc l) \\<ominus> ns l) =\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n  f \\<bullet> ns ?k2 \\<noteq> \\<zero>\n  f \\<bullet> ns ?n \\<noteq> \\<zero> \\<Longrightarrow>\n  val_Zp (ns (Suc ?n) \\<ominus> ns ?n) =\n  val_Zp (f \\<bullet> ns ?n) - val_Zp (f' \\<bullet> ns ?n)\n\ngoal (1 subgoal):\n 1. val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n    val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "by auto"], ["proof (state)\nthis:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       val_Zp (ns (Suc l) \\<ominus> ns l) =\n       val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "then"], ["proof (chain)\npicking this:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "show \" val_Zp (ns (Suc l) \\<ominus> ns l) = val_Zp (f\\<bullet> (ns l)) - val_Zp (f'\\<bullet>(ns l))\""], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "using I01"], ["proof (prove)\nusing this:\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l)) =\n  val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)\n  val_Zp (ns (Suc l) \\<ominus> ns l) =\n  val_Zp (local.divide (f \\<bullet> ns l) (f' \\<bullet> ns l))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc l) \\<ominus> ns l) =\n    val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)", "by simp"], ["proof (state)\nthis:\n  val_Zp (ns (Suc l) \\<ominus> ns l) =\n  val_Zp (f \\<bullet> ns l) - val_Zp (f' \\<bullet> ns l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (ns (Suc ?l2) \\<ominus> ns ?l2) =\n  val_Zp (f \\<bullet> ns ?l2) - val_Zp (f' \\<bullet> ns ?l2)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "have \"\\<forall>m. int(Suc n) + k0 + 1 \\<le> int m \\<longrightarrow> int (Suc n) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m.\n       int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n       eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n       eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n       eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "show \"int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow> int (Suc n) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n    eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. int (Suc n) + k0 + 1 \\<le> int m \\<Longrightarrow>\n    eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "assume A: \"int (Suc n) + k0 + 1 \\<le> int m \""], ["proof (state)\nthis:\n  int (Suc n) + k0 + 1 \\<le> int m\n\ngoal (1 subgoal):\n 1. int (Suc n) + k0 + 1 \\<le> int m \\<Longrightarrow>\n    eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "show \" int (Suc n) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "have 0: \" val_Zp_dist (newton_step (ns m)) (ns m) =  val_Zp (f\\<bullet> (ns m)) - val_Zp (f'\\<bullet>(ns m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp_dist (newton_step (ns m)) (ns m) =\n    val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "using I0 val_Zp_dist_def"], ["proof (prove)\nusing this:\n  val_Zp (ns (Suc ?l2) \\<ominus> ns ?l2) =\n  val_Zp (f \\<bullet> ns ?l2) - val_Zp (f' \\<bullet> ns ?l2)\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. val_Zp_dist (newton_step (ns m)) (ns m) =\n    val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "by auto"], ["proof (state)\nthis:\n  val_Zp_dist (newton_step (ns m)) (ns m) =\n  val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "have 1: \"val_Zp (f\\<bullet> (ns m)) - val_Zp (f'\\<bullet>(ns m)) > int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "have \"val_Zp (f\\<bullet> (ns m)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^m)*t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n    \\<le> val_Zp (f \\<bullet> ns m)", "by (simp add: newton_seq_fact2)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n  \\<le> val_Zp (f \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n  \\<le> val_Zp (f \\<bullet> ns m)", "have 10:\"val_Zp (f\\<bullet> (ns m)) - val_Zp (f'\\<bullet>(ns m)) \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (2^m)*t -  val_Zp (f'\\<bullet>(ns m))\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n  \\<le> val_Zp (f \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t -\n    val_Zp (f' \\<bullet> ns m)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "by (simp add: eint_minus_ineq)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t -\n  val_Zp (f' \\<bullet> ns m)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "have \"2^m * t > m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int m) < eint (2 ^ m) * t", "apply(induction m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. eint (int 0) < eint (2 ^ 0) * t\n 2. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "using one_eint_def zero_eint_def"], ["proof (prove)\nusing this:\n  1 = eint 1\n  0 = eint 0\n\ngoal (2 subgoals):\n 1. eint (int 0) < eint (2 ^ 0) * t\n 2. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "assume IH : \"int m < 2 ^ m * t \""], ["proof (state)\nthis:\n  eint (int m) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "then"], ["proof (chain)\npicking this:\n  eint (int m) < eint (2 ^ m) * t", "have \"((2 ^ (Suc m)) * t) = 2* ((2 ^ m) * t)\""], ["proof (prove)\nusing this:\n  eint (int m) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (2 ^ Suc m) * t = eint 2 * (eint (2 ^ m) * t)", "by (metis mult.assoc power_Suc times_eint_simps(1))"], ["proof (state)\nthis:\n  eint (2 ^ Suc m) * t = eint 2 * (eint (2 ^ m) * t)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       eint (int m) < eint (2 ^ m) * t \\<Longrightarrow>\n       eint (int (Suc m)) < eint (2 ^ Suc m) * t", "then"], ["proof (chain)\npicking this:\n  eint (2 ^ Suc m) * t = eint 2 * (eint (2 ^ m) * t)", "show \"int (Suc m) < 2 ^ Suc m * t\""], ["proof (prove)\nusing this:\n  eint (2 ^ Suc m) * t = eint 2 * (eint (2 ^ m) * t)\n\ngoal (1 subgoal):\n 1. eint (int (Suc m)) < eint (2 ^ Suc m) * t", "using IH t_neq_infty"], ["proof (prove)\nusing this:\n  eint (2 ^ Suc m) * t = eint 2 * (eint (2 ^ m) * t)\n  eint (int m) < eint (2 ^ m) * t\n  t \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. eint (int (Suc m)) < eint (2 ^ Suc m) * t", "by force"], ["proof (state)\nthis:\n  eint (int (Suc m)) < eint (2 ^ Suc m) * t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int m) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  eint (int m) < eint (2 ^ m) * t", "have 100: \"2^m * t > int m\""], ["proof (prove)\nusing this:\n  eint (int m) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (int m) < eint (2 ^ m) * t", "by blast"], ["proof (state)\nthis:\n  eint (int m) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "have \"int m \\<ge>2 + (int n + k0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 + (int n + k0) \\<le> int m", "using A"], ["proof (prove)\nusing this:\n  int (Suc n) + k0 + 1 \\<le> int m\n\ngoal (1 subgoal):\n 1. 2 + (int n + k0) \\<le> int m", "by simp"], ["proof (state)\nthis:\n  2 + (int n + k0) \\<le> int m\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "hence 1000: \"2^m * t > 2 + (int n + k0)\""], ["proof (prove)\nusing this:\n  2 + (int n + k0) \\<le> int m\n\ngoal (1 subgoal):\n 1. eint (2 + (int n + k0)) < eint (2 ^ m) * t", "using 100"], ["proof (prove)\nusing this:\n  2 + (int n + k0) \\<le> int m\n  eint (int m) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (2 + (int n + k0)) < eint (2 ^ m) * t", "by (meson eint_ord_simps(2) less_le_trans linorder_not_less)"], ["proof (state)\nthis:\n  eint (2 + (int n + k0)) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "have \"2 + (int n + k0) > 1 + int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + int n < 2 + (int n + k0)", "using k0_def"], ["proof (prove)\nusing this:\n  0 \\<le> k0 \\<and>\n  (\\<forall>m.\n      k0 \\<le> int m \\<longrightarrow>\n      eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m))\n\ngoal (1 subgoal):\n 1. 1 + int n < 2 + (int n + k0)", "by linarith"], ["proof (state)\nthis:\n  1 + int n < 2 + (int n + k0)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  1 + int n < 2 + (int n + k0)", "have \"2^m * t > 1 + int n\""], ["proof (prove)\nusing this:\n  1 + int n < 2 + (int n + k0)\n\ngoal (1 subgoal):\n 1. eint (1 + int n) < eint (2 ^ m) * t", "using 1000  eint_ord_simps(2) k0_def less_le_trans linorder_not_less"], ["proof (prove)\nusing this:\n  1 + int n < 2 + (int n + k0)\n  eint (2 + (int n + k0)) < eint (2 ^ m) * t\n  (eint ?m < eint ?n) = (?m < ?n)\n  0 \\<le> k0 \\<and>\n  (\\<forall>m.\n      k0 \\<le> int m \\<longrightarrow>\n      eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m))\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. eint (1 + int n) < eint (2 ^ m) * t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 + int n < 2 + (int n + k0);\n     eint (2 + (int n + k0)) < eint (2 ^ m) * t;\n     \\<And>m n. (eint m < eint n) = (m < n);\n     0 \\<le> k0 \\<and>\n     (\\<forall>m.\n         k0 \\<le> int m \\<longrightarrow>\n         eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m));\n     \\<And>x y z.\n        \\<lbrakk>x < y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x < z;\n     \\<And>x y. (\\<not> x < y) = (y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> eint (1 + int n) < eint (2 ^ m) * t", "have \"eint (2 + (int n + k0)) < t * eint (int (2 ^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (2 + (int n + k0)) < t * eint (int (2 ^ m))", "by (metis \"1000\" mult.commute numeral_power_eq_of_nat_cancel_iff)"], ["proof (state)\nthis:\n  eint (2 + (int n + k0)) < t * eint (int (2 ^ m))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 + int n < 2 + (int n + k0);\n     eint (2 + (int n + k0)) < eint (2 ^ m) * t;\n     \\<And>m n. (eint m < eint n) = (m < n);\n     0 \\<le> k0 \\<and>\n     (\\<forall>m.\n         k0 \\<le> int m \\<longrightarrow>\n         eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m));\n     \\<And>x y z.\n        \\<lbrakk>x < y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x < z;\n     \\<And>x y. (\\<not> x < y) = (y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> eint (1 + int n) < eint (2 ^ m) * t", "then"], ["proof (chain)\npicking this:\n  eint (2 + (int n + k0)) < t * eint (int (2 ^ m))", "have \"eint (int (Suc n)) < t * eint (int (2 ^ m))\""], ["proof (prove)\nusing this:\n  eint (2 + (int n + k0)) < t * eint (int (2 ^ m))\n\ngoal (1 subgoal):\n 1. eint (int (Suc n)) < t * eint (int (2 ^ m))", "by (metis \\<open>1 + int n < 2 + (int n + k0)\\<close> eint_ord_simps(2) less_trans of_nat_Suc)"], ["proof (state)\nthis:\n  eint (int (Suc n)) < t * eint (int (2 ^ m))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 + int n < 2 + (int n + k0);\n     eint (2 + (int n + k0)) < eint (2 ^ m) * t;\n     \\<And>m n. (eint m < eint n) = (m < n);\n     0 \\<le> k0 \\<and>\n     (\\<forall>m.\n         k0 \\<le> int m \\<longrightarrow>\n         eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m));\n     \\<And>x y z.\n        \\<lbrakk>x < y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x < z;\n     \\<And>x y. (\\<not> x < y) = (y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> eint (1 + int n) < eint (2 ^ m) * t", "then"], ["proof (chain)\npicking this:\n  eint (int (Suc n)) < t * eint (int (2 ^ m))", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (int (Suc n)) < t * eint (int (2 ^ m))\n\ngoal (1 subgoal):\n 1. eint (1 + int n) < eint (2 ^ m) * t", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  eint (1 + int n) < eint (2 ^ m) * t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (1 + int n) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "hence \"2*val_Zp (f'\\<bullet>a) + eint (2 ^ m) * t \\<ge> 2*(val_Zp (f'\\<bullet>a)) + 1 + int n\""], ["proof (prove)\nusing this:\n  eint (1 + int n) < eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n)\n    \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t", "by (smt eSuc_eint eint_add_left_cancel_le iadd_Suc iadd_Suc_right order_less_le)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t", "have 11: \"val_Zp (f\\<bullet> (ns m)) - val_Zp (f'\\<bullet>(ns m)) \n                                \\<ge> 2*(val_Zp (f'\\<bullet>a)) + 1 + int n -  val_Zp (f'\\<bullet>(ns m))\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n) -\n    val_Zp (f' \\<bullet> ns m)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "using \"10\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n)\n  \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ m) * t -\n  val_Zp (f' \\<bullet> ns m)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n) -\n    val_Zp (f' \\<bullet> ns m)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "by (smt \\<open>eint 2 * val_Zp (f'\\<bullet>a) + eint (2 ^ m) * t \\<le> val_Zp (to_fun f (ns m))\\<close> \n                    f'a_not_infinite eint_minus_ineq hensel_axioms newton_seq_fact1 order_trans)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n) -\n  val_Zp (f' \\<bullet> ns m)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "have 12: \"val_Zp (f'\\<bullet>(ns m))  = val_Zp (f'\\<bullet>a) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns m) = val_Zp (f' \\<bullet> a)", "using nonzero_memE  newton_seq_fact1 newton_seq_fact6 val_Zp_def val_Zp_def"], ["proof (prove)\nusing this:\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<noteq> \\<zero>\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a)\n  f' \\<bullet> ns ?l \\<in> nonzero Zp\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns m) = val_Zp (f' \\<bullet> a)", "by auto"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns m) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> ns m) = val_Zp (f' \\<bullet> a)", "have 13: \"val_Zp (f\\<bullet> (ns m)) - val_Zp (f'\\<bullet>(ns m)) \n                                \\<ge> 2*(val_Zp (f'\\<bullet>a)) + (1 + int n) -  val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns m) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n    val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "using 11"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns m) = val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) + 1 + eint (int n) -\n  val_Zp (f' \\<bullet> ns m)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n    val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "by (smt eSuc_eint iadd_Suc iadd_Suc_right)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "have 14:\"val_Zp (f\\<bullet> (ns m)) - val_Zp (f'\\<bullet>(ns m)) \n                                \\<ge> 1 + int n +  val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (1 + int n) + val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "using eint_minus_comm[of \"2*(val_Zp (f'\\<bullet>a))\" \"1 + int n\" \"val_Zp ((f'\\<bullet>a))\"]"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (1 + int n) -\n  val_Zp (f' \\<bullet> a) =\n  eint 2 * val_Zp (f' \\<bullet> a) - val_Zp (f' \\<bullet> a) +\n  eint (1 + int n)\n\ngoal (1 subgoal):\n 1. eint (1 + int n) + val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "by (simp add: Groups.add_ac(2))"], ["proof (state)\nthis:\n  eint (1 + int n) + val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "then"], ["proof (chain)\npicking this:\n  eint (1 + int n) + val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (1 + int n) + val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "by (smt Suc_ile_eq add.right_neutral eint.distinct(2) f'a_nonneg_val ge_plus_pos_imp_gt order_less_le)"], ["proof (state)\nthis:\n  eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "then"], ["proof (chain)\npicking this:\n  eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (int n) < val_Zp (f \\<bullet> ns m) - val_Zp (f' \\<bullet> ns m)\n\ngoal (1 subgoal):\n 1. eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "by (smt \"0\" Suc_ile_eq of_nat_Suc)"], ["proof (state)\nthis:\n  eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n  eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m.\n     int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n     eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "then"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n     eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n     eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "using val_Zp_def val_Zp_dist_def"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     int (Suc n) + k0 + 1 \\<le> int m \\<longrightarrow>\n     eint (int (Suc n)) \\<le> val_Zp_dist (newton_step (ns m)) (ns m)\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<forall>m.\n          k \\<le> int m \\<longrightarrow>\n          eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)", "by (metis newton_seq.simps(2))"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<forall>m.\n        k \\<le> int m \\<longrightarrow>\n        eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<forall>m.\n        k \\<le> int m \\<longrightarrow>\n        eint (int (Suc n)) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<forall>m.\n        k \\<le> int m \\<longrightarrow>\n        eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<exists>k.\n        \\<forall>m.\n           k \\<le> int m \\<longrightarrow>\n           eint (int n) \\<le> val_Zp (ns (Suc m) \\<ominus> ns m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eventually_zero:\n\"f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow> f \\<bullet> ns (k + Suc m) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n    f \\<bullet> ns (k + Suc m) = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n    f \\<bullet> ns (k + Suc m) = \\<zero>", "assume A: \"f \\<bullet> ns (k + m) = \\<zero>\""], ["proof (state)\nthis:\n  f \\<bullet> ns (k + m) = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n    f \\<bullet> ns (k + Suc m) = \\<zero>", "have 0: \"ns (k + Suc m) = ns (k + m) \\<ominus> (divide (f \\<bullet> ns (k + m)) (f' \\<bullet> ns (k + m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (k + Suc m) =\n    ns (k +\n        m) \\<ominus> local.divide (f \\<bullet> ns (k + m))\n                      (f' \\<bullet> ns (k + m))", "by (simp add: newton_step_def)"], ["proof (state)\nthis:\n  ns (k + Suc m) =\n  ns (k +\n      m) \\<ominus> local.divide (f \\<bullet> ns (k + m))\n                    (f' \\<bullet> ns (k + m))\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n    f \\<bullet> ns (k + Suc m) = \\<zero>", "have 1: \"(divide (f \\<bullet> ns (k + m)) (f' \\<bullet> ns (k + m))) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns (k + m)) (f' \\<bullet> ns (k + m)) =\n    \\<zero>", "by (simp add: A divide_def)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns (k + m)) (f' \\<bullet> ns (k + m)) = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n    f \\<bullet> ns (k + Suc m) = \\<zero>", "show \"f \\<bullet> ns (k + Suc m) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + Suc m) = \\<zero>", "using A 0 1"], ["proof (prove)\nusing this:\n  f \\<bullet> ns (k + m) = \\<zero>\n  ns (k + Suc m) =\n  ns (k +\n      m) \\<ominus> local.divide (f \\<bullet> ns (k + m))\n                    (f' \\<bullet> ns (k + m))\n  local.divide (f \\<bullet> ns (k + m)) (f' \\<bullet> ns (k + m)) = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + Suc m) = \\<zero>", "by (simp add: a_minus_def newton_seq_closed)"], ["proof (state)\nthis:\n  f \\<bullet> ns (k + Suc m) = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The Newton Sequence is Cauchy:\\<close>"], ["", "lemma newton_seq_is_Zp_cauchy:\n\"is_Zp_cauchy ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy ns", "proof(cases \"\\<forall>k. f\\<bullet>(ns k) \\<noteq>\\<zero>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero> \\<Longrightarrow>\n    is_Zp_cauchy ns\n 2. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "case True"], ["proof (state)\nthis:\n  \\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>\n\ngoal (2 subgoals):\n 1. \\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero> \\<Longrightarrow>\n    is_Zp_cauchy ns\n 2. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "then"], ["proof (chain)\npicking this:\n  \\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy ns", "using newton_seq_is_Zp_cauchy_0"], ["proof (prove)\nusing this:\n  \\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>\n  (\\<And>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n  is_Zp_cauchy ns\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy ns", "by blast"], ["proof (state)\nthis:\n  is_Zp_cauchy ns\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "obtain k where k_def:\"f\\<bullet>(ns k) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        f \\<bullet> ns k = \\<zero> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using False"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        f \\<bullet> ns k = \\<zero> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> ns k = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "have 0: \"\\<And>m. (ns (m + k)) = (ns k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. ns (m + k) = ns k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. ns (m + k) = ns k", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. ns (m + k) = ns k", "show \"(ns (m + k)) = (ns k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (m + k) = ns k", "proof(induction m)"], ["proof (state)\ngoal (2 subgoals):\n 1. ns (0 + k) = ns k\n 2. \\<And>m. ns (m + k) = ns k \\<Longrightarrow> ns (Suc m + k) = ns k", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. ns (0 + k) = ns k\n 2. \\<And>m. ns (m + k) = ns k \\<Longrightarrow> ns (Suc m + k) = ns k", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (0 + k) = ns k", "by simp"], ["proof (state)\nthis:\n  ns (0 + k) = ns k\n\ngoal (1 subgoal):\n 1. \\<And>m. ns (m + k) = ns k \\<Longrightarrow> ns (Suc m + k) = ns k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. ns (m + k) = ns k \\<Longrightarrow> ns (Suc m + k) = ns k", "case (Suc m)"], ["proof (state)\nthis:\n  ns (m + k) = ns k\n\ngoal (1 subgoal):\n 1. \\<And>m. ns (m + k) = ns k \\<Longrightarrow> ns (Suc m + k) = ns k", "show \"(ns (Suc m + k)) = (ns k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc m + k) = ns k", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ns (Suc m + k) = ns k", "have \"f \\<bullet> ns (m + k) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns (m + k) = \\<zero>", "by (simp add: Suc.IH k_def)"], ["proof (state)\nthis:\n  f \\<bullet> ns (m + k) = \\<zero>\n\ngoal (1 subgoal):\n 1. ns (Suc m + k) = ns k", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> ns (m + k) = \\<zero>", "have \"divide ( f \\<bullet> ns (m + k)) (f' \\<bullet> ns (m + k)) = \\<zero>\""], ["proof (prove)\nusing this:\n  f \\<bullet> ns (m + k) = \\<zero>\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns (m + k)) (f' \\<bullet> ns (m + k)) =\n    \\<zero>", "by (simp add: divide_def)"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns (m + k)) (f' \\<bullet> ns (m + k)) = \\<zero>\n\ngoal (1 subgoal):\n 1. ns (Suc m + k) = ns k", "then"], ["proof (chain)\npicking this:\n  local.divide (f \\<bullet> ns (m + k)) (f' \\<bullet> ns (m + k)) = \\<zero>", "show ?thesis"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns (m + k)) (f' \\<bullet> ns (m + k)) = \\<zero>\n\ngoal (1 subgoal):\n 1. ns (Suc m + k) = ns k", "using newton_step_def"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns (m + k)) (f' \\<bullet> ns (m + k)) = \\<zero>\n  newton_step ?x =\n  ?x \\<ominus> local.divide (f \\<bullet> ?x) (f' \\<bullet> ?x)\n\ngoal (1 subgoal):\n 1. ns (Suc m + k) = ns k", "by (simp add: Suc.IH a_minus_def newton_seq_closed)"], ["proof (state)\nthis:\n  ns (Suc m + k) = ns k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns (Suc m + k) = ns k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns (m + k) = ns k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns (?m2 + k) = ns k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. f \\<bullet> ns k \\<noteq> \\<zero>) \\<Longrightarrow>\n    is_Zp_cauchy ns", "show \"is_Zp_cauchy ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy ns", "apply(rule is_Zp_cauchyI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "apply (simp add: closed_seqs_memI newton_seq_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "show \"\\<And>n.\\<And>n. \\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 na = ns n1 na", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 na = ns n1 na", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<exists>N.\n          \\<forall>n0 n1.\n             N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 na = ns n1 na", "show \"\\<exists>N. \\<forall>n0 n1. N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "have \"\\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> ns n0 n = ns n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> ns n0 n = ns n1 n", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "fix n0 n1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "assume A0: \"k < n0\""], ["proof (state)\nthis:\n  k < n0\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "assume A1: \"k < n1\""], ["proof (state)\nthis:\n  k < n1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "obtain m0 where m0_def: \"n0 = k + m0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m0. n0 = k + m0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A0 less_imp_add_positive"], ["proof (prove)\nusing this:\n  k < n0\n  ?i < ?j \\<Longrightarrow> \\<exists>k>0. ?i + k = ?j\n\ngoal (1 subgoal):\n 1. (\\<And>m0. n0 = k + m0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n0 = k + m0\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "obtain m1 where m1_def: \"n1 = k + m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m1. n1 = k + m1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A1 less_imp_add_positive"], ["proof (prove)\nusing this:\n  k < n1\n  ?i < ?j \\<Longrightarrow> \\<exists>k>0. ?i + k = ?j\n\ngoal (1 subgoal):\n 1. (\\<And>m1. n1 = k + m1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n1 = k + m1\n\ngoal (1 subgoal):\n 1. \\<And>n0 n1.\n       \\<lbrakk>k < n0; k < n1\\<rbrakk> \\<Longrightarrow> ns n0 n = ns n1 n", "show \"ns n0 n = ns n1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n0 n = ns n1 n", "using 0 m0_def m1_def"], ["proof (prove)\nusing this:\n  ns (?m2 + k) = ns k\n  n0 = k + m0\n  n1 = k + m1\n\ngoal (1 subgoal):\n 1. ns n0 n = ns n1 n", "by (metis add.commute)"], ["proof (state)\nthis:\n  ns n0 n = ns n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> ns n0 n = ns n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "then"], ["proof (chain)\npicking this:\n  \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> ns n0 n = ns n1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n0 n1. k < n0 \\<and> k < n1 \\<longrightarrow> ns n0 n = ns n1 n\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n0 n1.\n          N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 n = ns n1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n0 n1.\n        N < n0 \\<and> N < n1 \\<longrightarrow> ns n0 ?na2 = ns n1 ?na2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_Zp_cauchy ns\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>The Proof of Hensel's Lemma\\<close>"], ["", "lemma pre_hensel:\n\"val_Zp (a \\<ominus> (ns n)) >  val_Zp (f'\\<bullet>a)\"\n\"\\<exists>N. \\<forall>n. n> N \\<longrightarrow> (val_Zp (a \\<ominus> (ns n)) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\"\n\"val_Zp (f'\\<bullet>(ns n)) = val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n) &&&\n    \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a)) &&&\n    val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n)\n 2. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 3. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "show \"val_Zp (a \\<ominus> (ns n)) >  val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n)", "proof(induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns 0)\n 2. \\<And>n.\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n) \\<Longrightarrow>\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns 0)\n 2. \\<And>n.\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n) \\<Longrightarrow>\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns 0)", "by (simp add: val_Zp_def)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns 0)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n) \\<Longrightarrow>\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n) \\<Longrightarrow>\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n) \\<Longrightarrow>\n       val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "show \"val_Zp (a \\<ominus> (ns (Suc n))) > val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "have I0: \"val_Zp ((ns (Suc n)) \\<ominus> (ns n)) >  val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "proof(cases \"(ns (Suc n)) = (ns n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ns (Suc n) = ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)\n 2. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "case True"], ["proof (state)\nthis:\n  ns (Suc n) = ns n\n\ngoal (2 subgoals):\n 1. ns (Suc n) = ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)\n 2. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  ns (Suc n) = ns n", "show ?thesis"], ["proof (prove)\nusing this:\n  ns (Suc n) = ns n\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "by (simp add: newton_seq_closed val_Zp_def)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "case False"], ["proof (state)\nthis:\n  ns (Suc n) \\<noteq> ns n\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "have 00:\"(ns (Suc n)) \\<ominus> (ns n) = \\<ominus>divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc n) \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "using  newton_seq_fact7"], ["proof (prove)\nusing this:\n  ns (Suc ?n) \\<ominus> ns ?n =\n  \\<ominus> local.divide (f \\<bullet> ns ?n) (f' \\<bullet> ns ?n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<ominus> ns n =\n    \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  ns (Suc n) \\<ominus> ns n =\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  ns (Suc n) \\<ominus> ns n =\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)", "have 0: \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) = val_Zp (divide (f\\<bullet>(ns n)) (f'\\<bullet>(ns n)))\""], ["proof (prove)\nusing this:\n  ns (Suc n) \\<ominus> ns n =\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))", "using newton_seq_fact5 val_Zp_of_minus"], ["proof (prove)\nusing this:\n  ns (Suc n) \\<ominus> ns n =\n  \\<ominus> local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n)\n  local.divide (f \\<bullet> ns ?l) (f' \\<bullet> ns ?l) \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))", "by presburger"], ["proof (state)\nthis:\n  val_Zp (ns (Suc n) \\<ominus> ns n) =\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "have 1: \"(f\\<bullet>(ns n)) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns n \\<in> nonzero Zp", "by (metis False R.minus_zero R.r_right_minus_eq 00 divide_def f_closed to_fun_closed \n              newton_seq_closed not_nonzero_Zp)"], ["proof (state)\nthis:\n  f \\<bullet> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "have 2: \"f'\\<bullet>(ns n) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> ns n \\<in> nonzero Zp", "by (simp add: newton_seq_fact6)"], ["proof (state)\nthis:\n  f' \\<bullet> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "have \"val_Zp (f\\<bullet>(ns n))  \\<ge> val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "using nonzero_memE  \\<open>f \\<bullet> ns n \\<in> nonzero Zp\\<close> newton_seq_fact4"], ["proof (prove)\nusing this:\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<noteq> \\<zero>\n  f \\<bullet> ns n \\<in> nonzero Zp\n  f \\<bullet> ns ?l \\<noteq> \\<zero> \\<Longrightarrow>\n  val_Zp (f' \\<bullet> ns ?l) \\<le> val_Zp (f \\<bullet> ns ?l)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)", "have 3:\"val_Zp((ns (Suc n)) \\<ominus> (ns n)) = val_Zp (f\\<bullet>(ns n)) - val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) =\n    val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)", "using 0 1 2 newton_seq_fact9 nonzero_memE(2)"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns n) \\<le> val_Zp (f \\<bullet> ns n)\n  val_Zp (ns (Suc n) \\<ominus> ns n) =\n  val_Zp (local.divide (f \\<bullet> ns n) (f' \\<bullet> ns n))\n  f \\<bullet> ns n \\<in> nonzero Zp\n  f' \\<bullet> ns n \\<in> nonzero Zp\n  f \\<bullet> ns ?n \\<noteq> \\<zero> \\<Longrightarrow>\n  val_Zp (ns (Suc ?n) \\<ominus> ns ?n) =\n  val_Zp (f \\<bullet> ns ?n) - val_Zp (f' \\<bullet> ns ?n)\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) =\n    val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)", "by blast"], ["proof (state)\nthis:\n  val_Zp (ns (Suc n) \\<ominus> ns n) =\n  val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "have 4: \"val_Zp (f \\<bullet> ns n) \\<ge> (2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f \\<bullet> ns n)", "using newton_seq_fact2[of n]"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (f \\<bullet> ns n)", "by metis"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)", "have 5: \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) \\<ge> ((2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * t) - val_Zp (f'\\<bullet>(ns n))\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "using \"3\" eint_minus_ineq f'a_not_infinite newton_seq_fact1"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (f \\<bullet> ns n)\n  val_Zp (ns (Suc n) \\<ominus> ns n) =\n  val_Zp (f \\<bullet> ns n) - val_Zp (f' \\<bullet> ns n)\n  \\<lbrakk>?c \\<noteq> \\<infinity>; ?d \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?d - ?c \\<le> ?b - ?c\n  val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> ns n)\n    \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "by presburger"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "have 6: \"((ns (Suc n)) \\<ominus> (ns n)) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc n) \\<ominus> ns n \\<in> nonzero Zp", "using False not_eq_diff_nonzero newton_seq_closed"], ["proof (prove)\nusing this:\n  ns (Suc n) \\<noteq> ns n\n  \\<lbrakk>?a \\<noteq> ?b; ?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?a \\<ominus> ?b \\<in> nonzero Zp\n  ns ?m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<ominus> ns n \\<in> nonzero Zp", "by blast"], ["proof (state)\nthis:\n  ns (Suc n) \\<ominus> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  ns (Suc n) \\<ominus> ns n \\<in> nonzero Zp", "have \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) \\<ge> (2 * val_Zp (f'\\<bullet>a)) + 2 ^ n * t - val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  ns (Suc n) \\<ominus> ns n \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "using \"5\""], ["proof (prove)\nusing this:\n  ns (Suc n) \\<ominus> ns n \\<in> nonzero Zp\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> ns n)\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n    val_Zp (f' \\<bullet> a)\n    \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "by auto"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "have 7: \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) \\<ge> (val_Zp (f'\\<bullet>a)) + 2 ^ n * t\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t -\n  val_Zp (f' \\<bullet> a)\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n    \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "by (simp add: eint_minus_comm)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. ns (Suc n) \\<noteq> ns n \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "then"], ["proof (chain)\npicking this:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)", "show  \"val_Zp((ns (Suc n)) \\<ominus> (ns n)) > (val_Zp (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "using f'a_not_infinite ge_plus_pos_imp_gt t_times_pow_pos"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) + eint (2 ^ n) * t\n  \\<le> val_Zp (ns (Suc n) \\<ominus> ns n)\n  val_Zp (f' \\<bullet> a) \\<noteq> \\<infinity>\n  \\<lbrakk>?c \\<noteq> \\<infinity>; 0 < ?b; ?c + ?b \\<le> ?d\\<rbrakk>\n  \\<Longrightarrow> ?c < ?d\n  0 < eint (2 ^ ?n) * t\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "have \"val_Zp ((ns (Suc n)) \\<ominus> (ns n)) = val_Zp ((ns n) \\<ominus> (ns (Suc n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) = val_Zp (ns n \\<ominus> ns (Suc n))", "using  newton_seq_closed[of \"n\"]  newton_seq_closed[of \"Suc n\"]\n                 val_Zp_def val_Zp_dist_def val_Zp_dist_sym val_Zp_def"], ["proof (prove)\nusing this:\n  ns n \\<in> carrier Zp\n  ns (Suc n) \\<in> carrier Zp\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp_dist ?a ?b = val_Zp_dist ?b ?a\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc n) \\<ominus> ns n) = val_Zp (ns n \\<ominus> ns (Suc n))", "by auto"], ["proof (state)\nthis:\n  val_Zp (ns (Suc n) \\<ominus> ns n) = val_Zp (ns n \\<ominus> ns (Suc n))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "then"], ["proof (chain)\npicking this:\n  val_Zp (ns (Suc n) \\<ominus> ns n) = val_Zp (ns n \\<ominus> ns (Suc n))", "have I1: \"val_Zp ((ns n) \\<ominus> (ns (Suc n))) > val_Zp (f'\\<bullet>a)\""], ["proof (prove)\nusing this:\n  val_Zp (ns (Suc n) \\<ominus> ns n) = val_Zp (ns n \\<ominus> ns (Suc n))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns n \\<ominus> ns (Suc n))", "using I0"], ["proof (prove)\nusing this:\n  val_Zp (ns (Suc n) \\<ominus> ns n) = val_Zp (ns n \\<ominus> ns (Suc n))\n  val_Zp (f' \\<bullet> a) < val_Zp (ns (Suc n) \\<ominus> ns n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns n \\<ominus> ns (Suc n))", "by presburger"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (ns n \\<ominus> ns (Suc n))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "have I2: \" (a \\<ominus> (ns n)) \\<oplus> ((ns n) \\<ominus> (ns (Suc n))) = (a \\<ominus> (ns (Suc n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> ns n \\<oplus> (ns n \\<ominus> ns (Suc n)) =\n    a \\<ominus> ns (Suc n)", "by (metis R.plus_diff_simp add_comm local.a_closed newton_seq_closed)"], ["proof (state)\nthis:\n  a \\<ominus> ns n \\<oplus> (ns n \\<ominus> ns (Suc n)) =\n  a \\<ominus> ns (Suc n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "then"], ["proof (chain)\npicking this:\n  a \\<ominus> ns n \\<oplus> (ns n \\<ominus> ns (Suc n)) =\n  a \\<ominus> ns (Suc n)", "have \"val_Zp (a \\<ominus> (ns (Suc n))) \\<ge> min (val_Zp (a \\<ominus> ns n)) (val_Zp (ns n \\<ominus> ns (Suc n)))\""], ["proof (prove)\nusing this:\n  a \\<ominus> ns n \\<oplus> (ns n \\<ominus> ns (Suc n)) =\n  a \\<ominus> ns (Suc n)\n\ngoal (1 subgoal):\n 1. min (val_Zp (a \\<ominus> ns n)) (val_Zp (ns n \\<ominus> ns (Suc n)))\n    \\<le> val_Zp (a \\<ominus> ns (Suc n))", "by (metis R.minus_closed local.a_closed newton_seq_closed val_Zp_ultrametric)"], ["proof (state)\nthis:\n  min (val_Zp (a \\<ominus> ns n)) (val_Zp (ns n \\<ominus> ns (Suc n)))\n  \\<le> val_Zp (a \\<ominus> ns (Suc n))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  min (val_Zp (a \\<ominus> ns n)) (val_Zp (ns n \\<ominus> ns (Suc n)))\n  \\<le> val_Zp (a \\<ominus> ns (Suc n))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "using I1 Suc.IH eint_min_ineq"], ["proof (prove)\nusing this:\n  min (val_Zp (a \\<ominus> ns n)) (val_Zp (ns n \\<ominus> ns (Suc n)))\n  \\<le> val_Zp (a \\<ominus> ns (Suc n))\n  val_Zp (f' \\<bullet> a) < val_Zp (ns n \\<ominus> ns (Suc n))\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n)\n  \\<lbrakk>min ?c ?d \\<le> ?b; ?e < ?c; ?e < ?d\\<rbrakk>\n  \\<Longrightarrow> ?e < ?b\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns n)\n\ngoal (2 subgoals):\n 1. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "show \"val_Zp (f'\\<bullet>(ns n)) = val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "using newton_seq_fact1"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns n) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show \"\\<exists>N.\\<forall>n. n> N \\<longrightarrow> (val_Zp (a \\<ominus> (ns n)) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P: \"\\<And>m. m > 1 \\<Longrightarrow> (val_Zp (a \\<ominus> (ns m)) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       1 < m \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns m) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       1 < m \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns m) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "fix n::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       1 < m \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns m) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "assume AA: \"n >1\""], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       1 < m \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns m) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show \" (val_Zp (a \\<ominus> (ns n)) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof(cases \"(ns 1) = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ns 1 = a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "case True"], ["proof (state)\nthis:\n  ns 1 = a\n\ngoal (2 subgoals):\n 1. ns 1 = a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have T0: \"\\<And>k. \\<forall>n. n \\<le> k \\<longrightarrow>  ns n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. \\<forall>n\\<le>k. ns n = a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. \\<forall>n\\<le>k. ns n = a", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. \\<forall>n\\<le>k. ns n = a", "show \" \\<forall>n. n \\<le> k \\<longrightarrow>  ns n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<le>k. ns n = a", "proof(induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n\\<le>0. ns n = a\n 2. \\<And>k.\n       \\<forall>n\\<le>k. ns n = a \\<Longrightarrow>\n       \\<forall>n\\<le>Suc k. ns n = a", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>n\\<le>0. ns n = a\n 2. \\<And>k.\n       \\<forall>n\\<le>k. ns n = a \\<Longrightarrow>\n       \\<forall>n\\<le>Suc k. ns n = a", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<le>0. ns n = a", "by simp"], ["proof (state)\nthis:\n  \\<forall>n\\<le>0. ns n = a\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>n\\<le>k. ns n = a \\<Longrightarrow>\n       \\<forall>n\\<le>Suc k. ns n = a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>n\\<le>k. ns n = a \\<Longrightarrow>\n       \\<forall>n\\<le>Suc k. ns n = a", "case (Suc k)"], ["proof (state)\nthis:\n  \\<forall>n\\<le>k. ns n = a\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>n\\<le>k. ns n = a \\<Longrightarrow>\n       \\<forall>n\\<le>Suc k. ns n = a", "show \"\\<forall>n\\<le>Suc k. ns n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<le>Suc k. ns n = a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. n \\<le> Suc k \\<Longrightarrow> ns n = a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n \\<le> Suc k \\<Longrightarrow> ns n = a", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n \\<le> Suc k \\<Longrightarrow> ns n = a", "assume A: \"n \\<le>Suc k\""], ["proof (state)\nthis:\n  n \\<le> Suc k\n\ngoal (1 subgoal):\n 1. \\<And>n. n \\<le> Suc k \\<Longrightarrow> ns n = a", "show \"ns n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns n = a", "proof(cases \"n < Suc k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n < Suc k \\<Longrightarrow> ns n = a\n 2. \\<not> n < Suc k \\<Longrightarrow> ns n = a", "case True"], ["proof (state)\nthis:\n  n < Suc k\n\ngoal (2 subgoals):\n 1. n < Suc k \\<Longrightarrow> ns n = a\n 2. \\<not> n < Suc k \\<Longrightarrow> ns n = a", "then"], ["proof (chain)\npicking this:\n  n < Suc k", "show ?thesis"], ["proof (prove)\nusing this:\n  n < Suc k\n\ngoal (1 subgoal):\n 1. ns n = a", "using Suc.IH"], ["proof (prove)\nusing this:\n  n < Suc k\n  \\<forall>n\\<le>k. ns n = a\n\ngoal (1 subgoal):\n 1. ns n = a", "by auto"], ["proof (state)\nthis:\n  ns n = a\n\ngoal (1 subgoal):\n 1. \\<not> n < Suc k \\<Longrightarrow> ns n = a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < Suc k \\<Longrightarrow> ns n = a", "case False"], ["proof (state)\nthis:\n  \\<not> n < Suc k\n\ngoal (1 subgoal):\n 1. \\<not> n < Suc k \\<Longrightarrow> ns n = a", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n < Suc k\n\ngoal (1 subgoal):\n 1. ns n = a", "using A Suc.IH True"], ["proof (prove)\nusing this:\n  \\<not> n < Suc k\n  n \\<le> Suc k\n  \\<forall>n\\<le>k. ns n = a\n  ns 1 = a\n\ngoal (1 subgoal):\n 1. ns n = a", "by auto"], ["proof (state)\nthis:\n  ns n = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ns n = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<le>Suc k. ns n = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<le>k. ns n = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<le>?k2. ns n = a\n\ngoal (2 subgoals):\n 1. ns 1 = a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show \"val_Zp (a \\<ominus> ns n) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by (metis T0  Zp_def Zp_defs(3) f'a_closed f'a_nonzero fa_nonzero \n              hensel.fa_closed hensel_axioms hensel_hypothesis_weakened le_eq_less_or_eq \n              newton_seq_fact9 not_nonzero_Qp order_less_le val_of_divide)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns n) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "case False"], ["proof (state)\nthis:\n  ns 1 \\<noteq> a\n\ngoal (1 subgoal):\n 1. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have F0: \"(1::nat) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> n", "using AA"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 1 \\<le> n", "by simp"], ["proof (state)\nthis:\n  1 \\<le> n\n\ngoal (1 subgoal):\n 1. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \"(f\\<bullet>a) \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero>", "by simp"], ["proof (state)\nthis:\n  f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \"\\<And>k. val_Zp (a \\<ominus> ns (Suc k)) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show \" val_Zp (a \\<ominus> ns (Suc k)) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof(induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. val_Zp (a \\<ominus> ns (Suc 0)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. val_Zp (a \\<ominus> ns (Suc 0)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \"(a \\<ominus> ns (Suc 0)) = (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> ns (Suc 0) = local.divide (f \\<bullet> a) (f' \\<bullet> a)", "by (metis R.minus_minus Zp_def hensel.newton_seq_fact7 hensel_axioms \n                  local.a_closed minus_a_inv newton_seq.simps(1) newton_seq.simps(2) newton_seq_fact5 newton_step_closed)"], ["proof (state)\nthis:\n  a \\<ominus> ns (Suc 0) = local.divide (f \\<bullet> a) (f' \\<bullet> a)\n\ngoal (2 subgoals):\n 1. val_Zp (a \\<ominus> ns (Suc 0)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  a \\<ominus> ns (Suc 0) = local.divide (f \\<bullet> a) (f' \\<bullet> a)", "show ?case"], ["proof (prove)\nusing this:\n  a \\<ominus> ns (Suc 0) = local.divide (f \\<bullet> a) (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc 0)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by simp"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc 0)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "case (Suc k)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have I0: \"ns (Suc (Suc k)) = ns (Suc k) \\<ominus> (divide (f\\<bullet>(ns (Suc k))) (f'\\<bullet>(ns (Suc k))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc (Suc k)) =\n    ns (Suc k) \\<ominus> local.divide (f \\<bullet> ns (Suc k))\n                          (f' \\<bullet> ns (Suc k))", "by (simp add: newton_step_def)"], ["proof (state)\nthis:\n  ns (Suc (Suc k)) =\n  ns (Suc k) \\<ominus> local.divide (f \\<bullet> ns (Suc k))\n                        (f' \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have I1: \"val_Zp (f\\<bullet>(ns (Suc k))) \\<ge> val_Zp(f'\\<bullet>(ns (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns (Suc k)) \\<le> val_Zp (f \\<bullet> ns (Suc k))", "using newton_seq_fact3"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> ns ?l) \\<le> val_Zp (f \\<bullet> ns ?l)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> ns (Suc k)) \\<le> val_Zp (f \\<bullet> ns (Suc k))", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> ns (Suc k)) \\<le> val_Zp (f \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have I2: \"(divide (f\\<bullet>(ns (Suc k))) (f'\\<bullet>(ns (Suc k)))) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n    \\<in> carrier Zp", "using newton_seq_fact5"], ["proof (prove)\nusing this:\n  local.divide (f \\<bullet> ns ?l) (f' \\<bullet> ns ?l) \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n    \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n  \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have I3: \"ns (Suc (Suc k)) \\<ominus> ns (Suc k) = \\<ominus>(divide (f\\<bullet>(ns (Suc k))) (f'\\<bullet>(ns (Suc k))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns (Suc (Suc k)) \\<ominus> ns (Suc k) =\n    \\<ominus> local.divide (f \\<bullet> ns (Suc k))\n               (f' \\<bullet> ns (Suc k))", "using I0 I2 newton_seq_fact7"], ["proof (prove)\nusing this:\n  ns (Suc (Suc k)) =\n  ns (Suc k) \\<ominus> local.divide (f \\<bullet> ns (Suc k))\n                        (f' \\<bullet> ns (Suc k))\n  local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n  \\<in> carrier Zp\n  ns (Suc ?n) \\<ominus> ns ?n =\n  \\<ominus> local.divide (f \\<bullet> ns ?n) (f' \\<bullet> ns ?n)\n\ngoal (1 subgoal):\n 1. ns (Suc (Suc k)) \\<ominus> ns (Suc k) =\n    \\<ominus> local.divide (f \\<bullet> ns (Suc k))\n               (f' \\<bullet> ns (Suc k))", "by blast"], ["proof (state)\nthis:\n  ns (Suc (Suc k)) \\<ominus> ns (Suc k) =\n  \\<ominus> local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  ns (Suc (Suc k)) \\<ominus> ns (Suc k) =\n  \\<ominus> local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))", "have \"val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) = val_Zp (divide (f\\<bullet>(ns (Suc k))) (f'\\<bullet>(ns (Suc k))))\""], ["proof (prove)\nusing this:\n  ns (Suc (Suc k)) \\<ominus> ns (Suc k) =\n  \\<ominus> local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n    val_Zp (local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k)))", "using I2 val_Zp_of_minus"], ["proof (prove)\nusing this:\n  ns (Suc (Suc k)) \\<ominus> ns (Suc k) =\n  \\<ominus> local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n  local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k))\n  \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n    val_Zp (local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k)))", "by presburger"], ["proof (state)\nthis:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k)))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k)))", "have \"val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) = val_Zp (f\\<bullet>(ns (Suc k))) - val_Zp (f'\\<bullet>(ns (Suc k)))\""], ["proof (prove)\nusing this:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> ns (Suc k)) (f' \\<bullet> ns (Suc k)))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n    val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> ns (Suc k))", "by (metis I1 R.zero_closed Zp_def newton_seq_fact6 newton_seq_fact9 padic_integers.val_of_divide padic_integers_axioms)"], ["proof (state)\nthis:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> ns (Suc k))", "have I4: \"val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) = val_Zp (f\\<bullet>(ns (Suc k))) - val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n    val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> a)", "using newton_seq_fact1"], ["proof (prove)\nusing this:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> ns (Suc k))\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n    val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> a)", "by presburger"], ["proof (state)\nthis:\n  val_Zp (ns (Suc (Suc k)) \\<ominus> ns (Suc k)) =\n  val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have F3: \"val_Zp (a \\<ominus> ns (Suc k)) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "using Suc.IH"], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k)) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by blast"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have F4: \"a \\<ominus>  ns (Suc (Suc k)) = (a \\<ominus> ( ns (Suc k))) \\<oplus> (ns  (Suc k)) \\<ominus> ns (Suc (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> ns (Suc (Suc k)) =\n    a \\<ominus> ns (Suc k) \\<oplus> ns (Suc k) \\<ominus> ns (Suc (Suc k))", "by (metis R.ring_simprules(17) a_minus_def add_comm local.a_closed newton_seq_closed)"], ["proof (state)\nthis:\n  a \\<ominus> ns (Suc (Suc k)) =\n  a \\<ominus> ns (Suc k) \\<oplus> ns (Suc k) \\<ominus> ns (Suc (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have F5: \"val_Zp ((ns  (Suc k)) \\<ominus> ns (Suc (Suc k))) > val_Zp (a \\<ominus> ( ns (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k))\n    < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k))\n    < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))", "have F50:  \"val_Zp ((ns  (Suc k)) \\<ominus> ns (Suc (Suc k))) = val_Zp (f\\<bullet>(ns (Suc k))) - val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n    val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> a)", "by (metis I4 R.minus_closed minus_a_inv newton_seq_closed val_Zp_of_minus)"], ["proof (state)\nthis:\n  val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n  val_Zp (f \\<bullet> ns (Suc k)) - val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k))\n    < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))", "have F51: \"val_Zp (f\\<bullet>(ns (Suc k))) > val_Zp ((f\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "have F510: \"val_Zp (f\\<bullet>(ns (Suc k))) \\<ge>  2*val_Zp (f'\\<bullet>a) + 2^(Suc k)*t \""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ Suc k) * t\n    \\<le> val_Zp (f \\<bullet> ns (Suc k))", "using newton_seq_fact2"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ Suc k) * t\n    \\<le> val_Zp (f \\<bullet> ns (Suc k))", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ Suc k) * t\n  \\<le> val_Zp (f \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "hence F511: \"val_Zp (f\\<bullet>(ns (Suc k))) \\<ge>  2*val_Zp (f'\\<bullet>a) + 2*t \""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ Suc k) * t\n  \\<le> val_Zp (f \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n    \\<le> val_Zp (f \\<bullet> ns (Suc k))", "using eint_plus_times[of t \"2*val_Zp (f'\\<bullet>a)\" \"2^(Suc k)\" \"val_Zp (f\\<bullet>(ns (Suc k)))\" 2] t_pos"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ Suc k) * t\n  \\<le> val_Zp (f \\<bullet> ns (Suc k))\n  \\<lbrakk>0 \\<le> t;\n   eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ Suc k) * t\n   \\<le> val_Zp (f \\<bullet> ns (Suc k));\n   2 \\<le> 2 ^ Suc k\\<rbrakk>\n  \\<Longrightarrow> eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n                    \\<le> val_Zp (f \\<bullet> ns (Suc k))\n  0 < t\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n    \\<le> val_Zp (f \\<bullet> ns (Suc k))", "by (simp add: order_less_le)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n  \\<le> val_Zp (f \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "have F512: \"2*val_Zp (f'\\<bullet>a) + 2*t  = 2 *val_Zp (f\\<bullet>a) - 2* val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t =\n    eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)", "unfolding hensel_factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    eint 2 * (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)) =\n    eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)", "using eint_minus_distr[of \"val_Zp (f\\<bullet>a)\" \"2 * val_Zp (f'\\<bullet>a)\" 2] \n                        eint_minus_comm[of _ _ \"eint 2 * (eint 2 * val_Zp (f'\\<bullet>a))\"]"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) \\<noteq>\n  eint 2 * val_Zp (f' \\<bullet> a) \\<Longrightarrow>\n  eint 2 * (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)) =\n  eint 2 * val_Zp (f \\<bullet> a) -\n  eint 2 * (eint 2 * val_Zp (f' \\<bullet> a))\n  ?d + ?b - eint 2 * (eint 2 * val_Zp (f' \\<bullet> a)) =\n  ?d - eint 2 * (eint 2 * val_Zp (f' \\<bullet> a)) + ?b\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) +\n    eint 2 * (val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)) =\n    eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)", "by (smt eint_2_minus_1_mult eint_add_cancel_fact eint_minus_comm f'a_not_infinite hensel_hypothesis nat_mult_not_infty order_less_le)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t =\n  eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "hence \"2*val_Zp (f'\\<bullet>a) + 2*t  > val_Zp (f\\<bullet>a)\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t =\n  eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t", "using hensel_hypothesis"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t =\n  eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t", "by (smt add_diff_cancel_eint eint_add_cancel_fact eint_add_left_cancel_le \n                      eint_pos_int_times_gt f'a_not_infinite hensel_factor_def nat_mult_not_infty order_less_le t_neq_infty t_pos)"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) < eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) < eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "using F512"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) < eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t =\n  eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "using F511 less_le_trans"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) < eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t =\n  eint 2 * val_Zp (f \\<bullet> a) - eint 2 * val_Zp (f' \\<bullet> a)\n  eint 2 * val_Zp (f' \\<bullet> a) + eint 2 * t\n  \\<le> val_Zp (f \\<bullet> ns (Suc k))\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))", "by blast"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k))\n    < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) < val_Zp (f \\<bullet> ns (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc k))\n    < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))", "by (metis F3 F50 Zp_def divide_closed eint_add_cancel_fact eint_minus_ineq \n                    f'a_closed f'a_nonzero f'a_not_infinite fa_closed fa_nonzero hensel.newton_seq_fact7 \n                    hensel_axioms newton_seq.simps(1) newton_seq_fact9 order_less_le val_Zp_of_minus)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc k))\n  < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc k))\n  < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \"a \\<ominus> ns (Suc k) \\<oplus> (ns (Suc k) \\<ominus> ns (Suc (Suc k))) = a  \\<ominus> ns (Suc (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> ns (Suc k) \\<oplus>\n    (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n    a \\<ominus> ns (Suc (Suc k))", "by (metis F4 a_minus_def add_assoc)"], ["proof (state)\nthis:\n  a \\<ominus> ns (Suc k) \\<oplus> (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n  a \\<ominus> ns (Suc (Suc k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       val_Zp (a \\<ominus> ns (Suc k)) =\n       val_Zp\n        (local.divide (f \\<bullet> a) (f' \\<bullet> a)) \\<Longrightarrow>\n       val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n       val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  a \\<ominus> ns (Suc k) \\<oplus> (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n  a \\<ominus> ns (Suc (Suc k))", "show F6: \"val_Zp (a \\<ominus> ns (Suc (Suc k))) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\nusing this:\n  a \\<ominus> ns (Suc k) \\<oplus> (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n  a \\<ominus> ns (Suc (Suc k))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "using F5 F4 F3"], ["proof (prove)\nusing this:\n  a \\<ominus> ns (Suc k) \\<oplus> (ns (Suc k) \\<ominus> ns (Suc (Suc k))) =\n  a \\<ominus> ns (Suc (Suc k))\n  val_Zp (a \\<ominus> ns (Suc k))\n  < val_Zp (ns (Suc k) \\<ominus> ns (Suc (Suc k)))\n  a \\<ominus> ns (Suc (Suc k)) =\n  a \\<ominus> ns (Suc k) \\<oplus> ns (Suc k) \\<ominus> ns (Suc (Suc k))\n  val_Zp (a \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by (metis R.minus_closed local.a_closed newton_seq_closed order_less_le val_Zp_not_equal_ord_plus_minus val_Zp_ultrametric_eq'')"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc (Suc k))) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc k)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns (Suc ?k2)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. ns 1 \\<noteq> a \\<Longrightarrow>\n    val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> ns (Suc ?k2)) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns n) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by (metis AA less_imp_add_positive plus_1_eq_Suc)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns n) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns n) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < ?m2 \\<Longrightarrow>\n  val_Zp (a \\<ominus> ns ?m2) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 < ?m2 \\<Longrightarrow>\n  val_Zp (a \\<ominus> ns ?m2) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n>N.\n          val_Zp (a \\<ominus> ns n) =\n          val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by blast"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n>N.\n        val_Zp (a \\<ominus> ns n) =\n        val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n>N.\n        val_Zp (a \\<ominus> ns n) =\n        val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hensel_seq_comp_f:\n \"res_lim ((to_fun f) \\<circ> ns) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "have A: \"is_Zp_cauchy ((to_fun f) \\<circ> ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)", "using f_closed is_Zp_continuous_def newton_seq_is_Zp_cauchy polynomial_is_Zp_continuous"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  is_Zp_cauchy ns\n  ?f \\<in> carrier (UP Zp) \\<Longrightarrow>\n  is_Zp_continuous ((\\<bullet>) ?f)\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)", "by blast"], ["proof (state)\nthis:\n  is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)\n\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "have \"Zp_converges_to ((to_fun f) \\<circ> ns) \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to ((\\<bullet>) f \\<circ> ns) \\<zero>", "apply(rule Zp_converges_toI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<bullet>) f \\<circ> ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<zero> \\<in> carrier Zp\n 3. \\<And>n.\n       \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "using A is_Zp_cauchy_def"], ["proof (prove)\nusing this:\n  is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)\n  is_Zp_cauchy ?s =\n  (?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup> \\<and>\n   (\\<forall>n.\n       \\<exists>N.\n          \\<forall>m k.\n             N < m \\<and> N < k \\<longrightarrow>\n             eint n < val_Zp_dist (?s m) (?s k)))\n\ngoal (3 subgoals):\n 1. (\\<bullet>) f \\<circ> ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>\n 2. \\<zero> \\<in> carrier Zp\n 3. \\<And>n.\n       \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<zero> \\<in> carrier Zp\n 2. \\<And>n.\n       \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "show \" \\<exists>N. \\<forall>k>N. (((to_fun f) \\<circ> ns) k) n = \\<zero> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "have 0: \"\\<And>k. (k::nat)>3 \\<longrightarrow>  val_Zp (f\\<bullet>(ns k)) > k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       3 < k \\<longrightarrow> eint (int k) < val_Zp (f \\<bullet> ns k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       3 < k \\<Longrightarrow> eint (int k) < val_Zp (f \\<bullet> ns k)", "fix k::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       3 < k \\<Longrightarrow> eint (int k) < val_Zp (f \\<bullet> ns k)", "assume A: \"k >3\""], ["proof (state)\nthis:\n  3 < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       3 < k \\<Longrightarrow> eint (int k) < val_Zp (f \\<bullet> ns k)", "show \"val_Zp (f\\<bullet>(ns k)) > k \""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "have 0: \" val_Zp (f\\<bullet>(ns k)) \\<ge>  2*(val_Zp (f'\\<bullet>a)) + (2^k)*t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "using newton_seq_fact2"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ ?k) * t\n  \\<le> val_Zp (f \\<bullet> ns ?k)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n    \\<le> val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "have 1: \"2*(val_Zp (f'\\<bullet>a)) + (2^k)*t > k \""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "have \"(2^k)*t \\<ge> (2^k) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (2 ^ k) \\<le> eint (2 ^ k) * t", "apply(cases \"t = \\<infinity>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. t = \\<infinity> \\<Longrightarrow> eint (2 ^ k) \\<le> eint (2 ^ k) * t\n 2. t \\<noteq> \\<infinity> \\<Longrightarrow>\n    eint (2 ^ k) \\<le> eint (2 ^ k) * t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> \\<infinity> \\<Longrightarrow>\n    eint (2 ^ k) \\<le> eint (2 ^ k) * t", "using t_pos eint_mult_mono'"], ["proof (prove)\nusing this:\n  0 < t\n  \\<lbrakk>0 \\<le> ?c \\<and> ?c \\<noteq> \\<infinity>; ?n < ?k\\<rbrakk>\n  \\<Longrightarrow> ?n * ?c \\<le> ?k * ?c\n\ngoal (1 subgoal):\n 1. t \\<noteq> \\<infinity> \\<Longrightarrow>\n    eint (2 ^ k) \\<le> eint (2 ^ k) * t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> \\<infinity>; 0 < t;\n     \\<And>c n k.\n        \\<lbrakk>0 \\<le> c \\<and> c \\<noteq> \\<infinity>; n < k\\<rbrakk>\n        \\<Longrightarrow> n * c \\<le> k * c\\<rbrakk>\n    \\<Longrightarrow> eint (2 ^ k) \\<le> eint (2 ^ k) * t", "obtain ii :: \"eint \\<Rightarrow> int\" where\n                f1: \"\\<forall>e. (\\<infinity> \\<noteq> e \\<or> (\\<forall>i. eint i \\<noteq> e)) \\<and> (eint (ii e) = e \\<or> \\<infinity> = e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ii.\n        \\<forall>e.\n           (\\<infinity> \\<noteq> e \\<or>\n            (\\<forall>i. eint i \\<noteq> e)) \\<and>\n           (eint (ii e) = e \\<or> \\<infinity> = e) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis not_infinity_eq)"], ["proof (state)\nthis:\n  \\<forall>e.\n     (\\<infinity> \\<noteq> e \\<or> (\\<forall>i. eint i \\<noteq> e)) \\<and>\n     (eint (ii e) = e \\<or> \\<infinity> = e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> \\<infinity>; 0 < t;\n     \\<And>c n k.\n        \\<lbrakk>0 \\<le> c \\<and> c \\<noteq> \\<infinity>; n < k\\<rbrakk>\n        \\<Longrightarrow> n * c \\<le> k * c\\<rbrakk>\n    \\<Longrightarrow> eint (2 ^ k) \\<le> eint (2 ^ k) * t", "then"], ["proof (chain)\npicking this:\n  \\<forall>e.\n     (\\<infinity> \\<noteq> e \\<or> (\\<forall>i. eint i \\<noteq> e)) \\<and>\n     (eint (ii e) = e \\<or> \\<infinity> = e)", "have \"0 < ii t\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     (\\<infinity> \\<noteq> e \\<or> (\\<forall>i. eint i \\<noteq> e)) \\<and>\n     (eint (ii e) = e \\<or> \\<infinity> = e)\n\ngoal (1 subgoal):\n 1. 0 < ii t", "by (metis (no_types) eint_ord_simps(2) t_neq_infty t_pos zero_eint_def)"], ["proof (state)\nthis:\n  0 < ii t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> \\<infinity>; 0 < t;\n     \\<And>c n k.\n        \\<lbrakk>0 \\<le> c \\<and> c \\<noteq> \\<infinity>; n < k\\<rbrakk>\n        \\<Longrightarrow> n * c \\<le> k * c\\<rbrakk>\n    \\<Longrightarrow> eint (2 ^ k) \\<le> eint (2 ^ k) * t", "then"], ["proof (chain)\npicking this:\n  0 < ii t", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < ii t\n\ngoal (1 subgoal):\n 1. eint (2 ^ k) \\<le> eint (2 ^ k) * t", "using f1"], ["proof (prove)\nusing this:\n  0 < ii t\n  \\<forall>e.\n     (\\<infinity> \\<noteq> e \\<or> (\\<forall>i. eint i \\<noteq> e)) \\<and>\n     (eint (ii e) = e \\<or> \\<infinity> = e)\n\ngoal (1 subgoal):\n 1. eint (2 ^ k) \\<le> eint (2 ^ k) * t", "by (metis eint_pos_int_times_ge eint_mult_mono linorder_not_less \n                            mult.commute order_less_le t_neq_infty t_pos t_times_pow_pos)"], ["proof (state)\nthis:\n  eint (2 ^ k) \\<le> eint (2 ^ k) * t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (2 ^ k) \\<le> eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "hence \" 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t \\<ge> (2^k) \""], ["proof (prove)\nusing this:\n  eint (2 ^ k) \\<le> eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (2 ^ k) \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "by (smt Groups.add_ac(2) add.right_neutral eint_2_minus_1_mult eint_pos_times_is_pos\n                  eint_pow_int_is_pos f'a_nonneg_val ge_plus_pos_imp_gt idiff_0_right linorder_not_less \n                  nat_mult_not_infty order_less_le t_neq_infty)"], ["proof (state)\nthis:\n  eint (2 ^ k) \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "then"], ["proof (chain)\npicking this:\n  eint (2 ^ k) \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "have  \" 2*(val_Zp (f'\\<bullet>a)) + (2^k)*t > k\""], ["proof (prove)\nusing this:\n  eint (2 ^ k) \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "using A  of_nat_1 of_nat_add of_nat_less_two_power"], ["proof (prove)\nusing this:\n  eint (2 ^ k) \\<le> eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  3 < k\n  of_nat 1 = (1::?'a)\n  of_nat (?m + ?n) = of_nat ?m + of_nat ?n\n  of_nat ?n < (2::?'a) ^ ?n\n\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "by (smt eint_ord_simps(1) linorder_not_less order_trans)"], ["proof (state)\nthis:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "then"], ["proof (chain)\npicking this:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t", "by metis"], ["proof (state)\nthis:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "using 0 less_le_trans"], ["proof (prove)\nusing this:\n  eint (int k) < eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  eint 2 * val_Zp (f' \\<bullet> a) + eint (2 ^ k) * t\n  \\<le> val_Zp (f \\<bullet> ns k)\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  eint (int k) < val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint (int k) < val_Zp (f \\<bullet> ns k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  3 < ?k2 \\<longrightarrow> eint (int ?k2) < val_Zp (f \\<bullet> ns ?k2)\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "have 1: \"\\<And>k. (k::nat)>3 \\<longrightarrow>  (f\\<bullet>(ns k)) k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. 3 < k \\<longrightarrow> (f \\<bullet> ns k) k = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. 3 < k \\<Longrightarrow> (f \\<bullet> ns k) k = 0", "fix k::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. 3 < k \\<Longrightarrow> (f \\<bullet> ns k) k = 0", "assume B: \"3<k\""], ["proof (state)\nthis:\n  3 < k\n\ngoal (1 subgoal):\n 1. \\<And>k. 3 < k \\<Longrightarrow> (f \\<bullet> ns k) k = 0", "show \" (f\\<bullet>(ns k)) k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) k = 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) k = 0", "have B0: \" val_Zp (f\\<bullet>(ns k)) > k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "using 0 B"], ["proof (prove)\nusing this:\n  3 < ?k2 \\<longrightarrow> eint (int ?k2) < val_Zp (f \\<bullet> ns ?k2)\n  3 < k\n\ngoal (1 subgoal):\n 1. eint (int k) < val_Zp (f \\<bullet> ns k)", "by blast"], ["proof (state)\nthis:\n  eint (int k) < val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) k = 0", "then"], ["proof (chain)\npicking this:\n  eint (int k) < val_Zp (f \\<bullet> ns k)", "show ?thesis"], ["proof (prove)\nusing this:\n  eint (int k) < val_Zp (f \\<bullet> ns k)\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) k = 0", "by (simp add: f_of_newton_seq_closed zero_below_val_Zp)"], ["proof (state)\nthis:\n  (f \\<bullet> ns k) k = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f \\<bullet> ns k) k = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  3 < ?k2 \\<longrightarrow> (f \\<bullet> ns ?k2) ?k2 = 0\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "have \"\\<forall>k>(max 3 n). (((to_fun f) \\<circ> ns) k) n = \\<zero> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k>max 3 n. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "fix k::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "assume A: \"3< k\""], ["proof (state)\nthis:\n  3 < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "assume A': \"n < k\""], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "have A0: \"(f\\<bullet>(ns k)) k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) k = 0", "using 1[of k] A"], ["proof (prove)\nusing this:\n  3 < k \\<longrightarrow> (f \\<bullet> ns k) k = 0\n  3 < k\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) k = 0", "by auto"], ["proof (state)\nthis:\n  (f \\<bullet> ns k) k = 0\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "then"], ["proof (chain)\npicking this:\n  (f \\<bullet> ns k) k = 0", "have \"(f\\<bullet>(ns k)) n = 0\""], ["proof (prove)\nusing this:\n  (f \\<bullet> ns k) k = 0\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) n = 0", "using A A'"], ["proof (prove)\nusing this:\n  (f \\<bullet> ns k) k = 0\n  3 < k\n  n < k\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) n = 0", "using above_ord_nonzero[of \"(f\\<bullet>(ns k))\"]"], ["proof (prove)\nusing this:\n  (f \\<bullet> ns k) k = 0\n  3 < k\n  n < k\n  \\<lbrakk>f \\<bullet> ns k \\<in> carrier Zp;\n   f \\<bullet> ns k \\<noteq> \\<zero>;\n   ord_Zp (f \\<bullet> ns k) < int ?n\\<rbrakk>\n  \\<Longrightarrow> (f \\<bullet> ns k) ?n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) n = 0", "by (smt UP_cring.to_fun_closed Zp_x_is_UP_cring f_closed le_eq_less_or_eq \n              newton_seq_closed of_nat_mono residue_of_zero(2) zero_below_ord)"], ["proof (state)\nthis:\n  (f \\<bullet> ns k) n = 0\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>3 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> (f \\<bullet> ns k) n = \\<zero> n", "then"], ["proof (chain)\npicking this:\n  (f \\<bullet> ns k) n = 0", "show A1:  \"to_fun f (ns k) n = \\<zero> n\""], ["proof (prove)\nusing this:\n  (f \\<bullet> ns k) n = 0\n\ngoal (1 subgoal):\n 1. (f \\<bullet> ns k) n = \\<zero> n", "by (simp add: residue_of_zero(2))"], ["proof (state)\nthis:\n  (f \\<bullet> ns k) n = \\<zero> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k>max 3 n. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "then"], ["proof (chain)\npicking this:\n  \\<forall>k>max 3 n. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>k>max 3 n. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N. \\<forall>k>N. ((\\<bullet>) f \\<circ> ns) k n = \\<zero> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Zp_converges_to ((\\<bullet>) f \\<circ> ns) \\<zero>\n\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "then"], ["proof (chain)\npicking this:\n  Zp_converges_to ((\\<bullet>) f \\<circ> ns) \\<zero>", "show ?thesis"], ["proof (prove)\nusing this:\n  Zp_converges_to ((\\<bullet>) f \\<circ> ns) \\<zero>\n\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "by (metis Zp_converges_to_def unique_limit')"], ["proof (state)\nthis:\n  res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma full_hensels_lemma:\n  obtains \\<alpha> where\n       \"f\\<bullet>\\<alpha> = \\<zero>\" and \"\\<alpha> \\<in> carrier Zp\"\n       \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp (f'\\<bullet>a)\"\n       \"(val_Zp (a \\<ominus> \\<alpha>) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\"\n       \"val_Zp (f'\\<bullet>\\<alpha>) = val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n         val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n         val_Zp (a \\<ominus> \\<alpha>) =\n         val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n         val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"\\<exists>k. f\\<bullet>(ns k) =\\<zero>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  \\<exists>k. f \\<bullet> ns k = \\<zero>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain k where k_def: \"f\\<bullet>(ns k) =\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        f \\<bullet> ns k = \\<zero> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using True"], ["proof (prove)\nusing this:\n  \\<exists>k. f \\<bullet> ns k = \\<zero>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        f \\<bullet> ns k = \\<zero> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> ns k = \\<zero>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain N where N_def: \"\\<forall>n. n> N \\<longrightarrow> (val_Zp (a \\<ominus> (ns n)) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n>N.\n           val_Zp (a \\<ominus> ns n) =\n           val_Zp\n            (local.divide (f \\<bullet> a)\n              (f' \\<bullet> a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using pre_hensel(2)"], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>n>N.\n        val_Zp (a \\<ominus> ns n) =\n        val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>n>N.\n           val_Zp (a \\<ominus> ns n) =\n           val_Zp\n            (local.divide (f \\<bullet> a)\n              (f' \\<bullet> a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n>N.\n     val_Zp (a \\<ominus> ns n) =\n     val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have Z: \"\\<And>n. n \\<ge>k \\<Longrightarrow> f\\<bullet>(ns n) =\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. k \\<le> n \\<Longrightarrow> f \\<bullet> ns n = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. k \\<le> n \\<Longrightarrow> f \\<bullet> ns n = \\<zero>", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. k \\<le> n \\<Longrightarrow> f \\<bullet> ns n = \\<zero>", "assume A: \"n \\<ge>k\""], ["proof (state)\nthis:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n. k \\<le> n \\<Longrightarrow> f \\<bullet> ns n = \\<zero>", "obtain l where l_def:\"n = k + l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l. n = k + l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using A le_Suc_ex"], ["proof (prove)\nusing this:\n  k \\<le> n\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = k + l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  n = k + l\n\ngoal (1 subgoal):\n 1. \\<And>n. k \\<le> n \\<Longrightarrow> f \\<bullet> ns n = \\<zero>", "have \"\\<And>m. f\\<bullet>(ns (k+m)) =\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. f \\<bullet> ns (k + m) = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. f \\<bullet> ns (k + m) = \\<zero>", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. f \\<bullet> ns (k + m) = \\<zero>", "show \"f\\<bullet>(ns (k+m)) =\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> ns (k + m) = \\<zero>", "apply(induction m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f \\<bullet> ns (k + 0) = \\<zero>\n 2. \\<And>m.\n       f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n       f \\<bullet> ns (k + Suc m) = \\<zero>", "apply (simp add: k_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n       f \\<bullet> ns (k + Suc m) = \\<zero>", "using  eventually_zero"], ["proof (prove)\nusing this:\n  f \\<bullet> ns (?k + ?m) = \\<zero> \\<Longrightarrow>\n  f \\<bullet> ns (?k + Suc ?m) = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       f \\<bullet> ns (k + m) = \\<zero> \\<Longrightarrow>\n       f \\<bullet> ns (k + Suc m) = \\<zero>", "by simp"], ["proof (state)\nthis:\n  f \\<bullet> ns (k + m) = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<bullet> ns (k + ?m2) = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>n. k \\<le> n \\<Longrightarrow> f \\<bullet> ns n = \\<zero>", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> ns (k + ?m2) = \\<zero>", "show \"f\\<bullet>(ns n) =\\<zero>\""], ["proof (prove)\nusing this:\n  f \\<bullet> ns (k + ?m2) = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns n = \\<zero>", "by (simp add: l_def)"], ["proof (state)\nthis:\n  f \\<bullet> ns n = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k \\<le> ?n2 \\<Longrightarrow> f \\<bullet> ns ?n2 = \\<zero>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain M where M_def: \"M = N + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M. M = N + k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  M = N + k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  M = N + k", "have M_root: \"f\\<bullet>(ns M) =\\<zero>\""], ["proof (prove)\nusing this:\n  M = N + k\n\ngoal (1 subgoal):\n 1. f \\<bullet> ns M = \\<zero>", "by (simp add: Z)"], ["proof (state)\nthis:\n  f \\<bullet> ns M = \\<zero>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain \\<alpha> where alpha_def: \"\\<alpha>= ns M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> = ns M \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  \\<alpha> = ns M\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have T0: \"f\\<bullet>\\<alpha> = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> = \\<zero>", "using alpha_def M_root"], ["proof (prove)\nusing this:\n  \\<alpha> = ns M\n  f \\<bullet> ns M = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> = \\<zero>", "by auto"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> = \\<zero>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have T1:    \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "using alpha_def pre_hensel(1)"], ["proof (prove)\nusing this:\n  \\<alpha> = ns M\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns ?n)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have T2: \"(val_Zp (a \\<ominus> \\<alpha>) = val_Zp (divide (f\\<bullet>a) (f'\\<bullet>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by (metis M_def N_def alpha_def fa_nonzero k_def \n        less_add_same_cancel1 newton_seq.elims zero_less_Suc)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have T3:  \"val_Zp (f'\\<bullet>\\<alpha>) = val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "using alpha_def newton_seq_fact1"], ["proof (prove)\nusing this:\n  \\<alpha> = ns M\n  val_Zp (f' \\<bullet> ns ?k) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using T0 T1 T2 T3"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> = \\<zero>\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n  val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. thesis", "using that alpha_def newton_seq_closed"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> = \\<zero>\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n  val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\n  \\<lbrakk>f \\<bullet> ?\\<alpha>2 = \\<zero>; ?\\<alpha>2 \\<in> carrier Zp;\n   val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ?\\<alpha>2);\n   val_Zp (a \\<ominus> ?\\<alpha>2) =\n   val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n   val_Zp (f' \\<bullet> ?\\<alpha>2) = val_Zp (f' \\<bullet> a)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<alpha> = ns M\n  ns ?m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  \\<nexists>k. f \\<bullet> ns k = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<nexists>k. f \\<bullet> ns k = \\<zero>", "have Nz: \"\\<And>k. f\\<bullet>(ns k) \\<noteq>\\<zero>\""], ["proof (prove)\nusing this:\n  \\<nexists>k. f \\<bullet> ns k = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>k. f \\<bullet> ns k \\<noteq> \\<zero>", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> ns ?k2 \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have ns_cauchy: \"is_Zp_cauchy ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy ns", "by (simp add: newton_seq_is_Zp_cauchy)"], ["proof (state)\nthis:\n  is_Zp_cauchy ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have fns_cauchy: \"is_Zp_cauchy ((to_fun f) \\<circ> ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)", "using f_closed is_Zp_continuous_def ns_cauchy polynomial_is_Zp_continuous"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  is_Zp_continuous ?f =\n  (?f \\<in> carrier (function_ring (carrier Zp) Zp) \\<and>\n   (\\<forall>s.\n       is_Zp_cauchy s \\<longrightarrow> is_Zp_cauchy (?f \\<circ> s)))\n  is_Zp_cauchy ns\n  ?f \\<in> carrier (UP Zp) \\<Longrightarrow>\n  is_Zp_continuous ((\\<bullet>) ?f)\n\ngoal (1 subgoal):\n 1. is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)", "by blast"], ["proof (state)\nthis:\n  is_Zp_cauchy ((\\<bullet>) f \\<circ> ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have F0: \"res_lim ((to_fun f) \\<circ> ns) = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "using hensel_seq_comp_f"], ["proof (prove)\nusing this:\n  res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>\n\ngoal (1 subgoal):\n 1. res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>", "by auto"], ["proof (state)\nthis:\n  res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain \\<alpha> where alpha_def: \"\\<alpha> = res_lim ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> = res_lim ns \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  \\<alpha> = res_lim ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have F1: \"(f\\<bullet>\\<alpha>)= \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> = \\<zero>", "using F0 alpha_def alt_seq_limit\n      ns_cauchy polynomial_is_Zp_continuous res_lim_pushforward \n      res_lim_pushforward'"], ["proof (prove)\nusing this:\n  res_lim ((\\<bullet>) f \\<circ> ns) = \\<zero>\n  \\<alpha> = res_lim ns\n  is_Zp_cauchy ?s \\<Longrightarrow> res_lim (alt_seq ?s) = res_lim ?s\n  is_Zp_cauchy ns\n  ?f \\<in> carrier (UP Zp) \\<Longrightarrow>\n  is_Zp_continuous ((\\<bullet>) ?f)\n  \\<lbrakk>is_Zp_continuous ?f; is_Zp_cauchy ?s; ?t = alt_seq ?s\\<rbrakk>\n  \\<Longrightarrow> res_lim (?f \\<circ> ?t) = ?f (res_lim ?t)\n  \\<lbrakk>is_Zp_continuous ?f; is_Zp_cauchy ?s; ?t = alt_seq ?s\\<rbrakk>\n  \\<Longrightarrow> res_lim (?f \\<circ> ?s) = res_lim (?f \\<circ> ?t)\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> = \\<zero>", "by auto"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have F2: \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp (f'\\<bullet>a) \\<and>  val_Zp (a \\<ominus> \\<alpha>) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have 0: \"Zp_converges_to ns \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zp_converges_to ns \\<alpha>", "by (simp add: alpha_def is_Zp_cauchy_imp_has_limit ns_cauchy)"], ["proof (state)\nthis:\n  Zp_converges_to ns \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \"val_Zp (a \\<ominus> \\<alpha>) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) < \\<infinity>", "using \"0\" F1 R.r_right_minus_eq Zp_converges_to_def Zp_def hensel.fa_nonzero hensel_axioms local.a_closed val_Zp_def"], ["proof (prove)\nusing this:\n  Zp_converges_to ns \\<alpha>\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?a \\<ominus> ?b = \\<zero>) = (?a = ?b)\n  Zp_converges_to ?s ?a =\n  ((?a \\<in> carrier Zp \\<and>\n    ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (?s m \\<ominus> ?a)))\n  Zp \\<equiv> padic_int p\n  hensel ?p ?f ?a \\<Longrightarrow>\n  UP_cring.to_fun (padic_int ?p) ?f ?a \\<noteq>\n  \\<zero>\\<^bsub>padic_int ?p\\<^esub>\n  hensel p f a\n  a \\<in> carrier Zp\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> \\<alpha>) < \\<infinity>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "hence \"1 + max (eint 2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a)) < \\<infinity>\""], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> \\<alpha>) < \\<infinity>\n\ngoal (1 subgoal):\n 1. 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n    < \\<infinity>", "by (metis \"0\" R.minus_closed Zp_converges_to_def eint.distinct(2) eint_ord_simps(4) \n          f'a_not_infinite infinity_ne_i1 local.a_closed max_def minus_a_inv \n          sum_infinity_imp_summand_infinity val_Zp_of_minus)"], ["proof (state)\nthis:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < \\<infinity>", "obtain l where l_def: \"eint l = 1 + max (eint 2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a))\""], ["proof (prove)\nusing this:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        eint l =\n        1 +\n        max (eint 2 + val_Zp (f' \\<bullet> a))\n         (val_Zp (\\<alpha> \\<ominus> a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "obtain N where N_def: \"(\\<forall>m>N. 1 + max (2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a)) < val_Zp_dist (ns m) \\<alpha>)\""], ["proof (prove)\nusing this:\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m>N.\n           1 +\n           max (eint 2 + val_Zp (f' \\<bullet> a))\n            (val_Zp (\\<alpha> \\<ominus> a))\n           < val_Zp_dist (ns m) \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 0 l_def Zp_converges_to_def[of ns \\<alpha>]"], ["proof (prove)\nusing this:\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  Zp_converges_to ns \\<alpha>\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  Zp_converges_to ns \\<alpha> =\n  ((\\<alpha> \\<in> carrier Zp \\<and>\n    ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (ns m \\<ominus> \\<alpha>)))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m>N.\n           1 +\n           max (eint 2 + val_Zp (f' \\<bullet> a))\n            (val_Zp (\\<alpha> \\<ominus> a))\n           < val_Zp_dist (ns m) \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  Zp_converges_to ns \\<alpha>\n  eint l =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  Zp_converges_to ns \\<alpha> =\n  ((\\<alpha> \\<in> carrier Zp \\<and>\n    ns \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (ns m \\<ominus> \\<alpha>)))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>m>N.\n           1 +\n           max (eint 2 + val_Zp (f' \\<bullet> a))\n            (val_Zp (\\<alpha> \\<ominus> a))\n           < val_Zp (ns m \\<ominus> \\<alpha>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<forall>m>N.\n     1 +\n     max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n     < val_Zp_dist (ns m) \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "obtain N' where N'_def: \"\\<forall>n>N'. val_Zp (a \\<ominus> ns n) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N'.\n        \\<forall>n>N'.\n           val_Zp (a \\<ominus> ns n) =\n           val_Zp\n            (local.divide (f \\<bullet> a)\n              (f' \\<bullet> a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using pre_hensel(2)"], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>n>N.\n        val_Zp (a \\<ominus> ns n) =\n        val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. (\\<And>N'.\n        \\<forall>n>N'.\n           val_Zp (a \\<ominus> ns n) =\n           val_Zp\n            (local.divide (f \\<bullet> a)\n              (f' \\<bullet> a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n>N'.\n     val_Zp (a \\<ominus> ns n) =\n     val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "obtain K where K_def: \"K = Suc (max N N')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>K. K = Suc (max N N') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  K = Suc (max N N')\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  K = Suc (max N N')", "have F21: \"(1+ (max (2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a)))) < val_Zp_dist (ns K) \\<alpha>\""], ["proof (prove)\nusing this:\n  K = Suc (max N N')\n\ngoal (1 subgoal):\n 1. 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n    < val_Zp_dist (ns K) \\<alpha>", "by (metis N_def lessI linorder_not_less max_def order_trans)"], ["proof (state)\nthis:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < val_Zp_dist (ns K) \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have F22: \"a \\<noteq> ns K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> ns K", "by (smt False K_def N'_def Zp_def cring_def eint.distinct(2) hensel_factor_id lessI \n          less_le_trans linorder_not_less max_def mult_comm mult_zero_l newton_seq_closed \n          order_less_le padic_int_is_cring padic_integers.prime padic_integers_axioms ring.r_right_minus_eq \n          val_Zp_def)"], ["proof (state)\nthis:\n  a \\<noteq> ns K\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof(cases \"ns K = \\<alpha>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ns K = \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. ns K \\<noteq> \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "case True"], ["proof (state)\nthis:\n  ns K = \\<alpha>\n\ngoal (2 subgoals):\n 1. ns K = \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n 2. ns K \\<noteq> \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  ns K = \\<alpha>", "show ?thesis"], ["proof (prove)\nusing this:\n  ns K = \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "using pre_hensel F1 False"], ["proof (prove)\nusing this:\n  ns K = \\<alpha>\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns ?n)\n  \\<exists>N.\n     \\<forall>n>N.\n        val_Zp (a \\<ominus> ns n) =\n        val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n  val_Zp (f' \\<bullet> ns ?n) = val_Zp (f' \\<bullet> a)\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<nexists>k. f \\<bullet> ns k = \\<zero>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. ns K \\<noteq> \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ns K \\<noteq> \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "case False"], ["proof (state)\nthis:\n  ns K \\<noteq> \\<alpha>\n\ngoal (1 subgoal):\n 1. ns K \\<noteq> \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "assume \"ns K \\<noteq> \\<alpha>\""], ["proof (state)\nthis:\n  ns K \\<noteq> \\<alpha>\n\ngoal (1 subgoal):\n 1. ns K \\<noteq> \\<alpha> \\<Longrightarrow>\n    val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P0: \" (a \\<ominus> \\<alpha>) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> \\<alpha> \\<in> nonzero Zp", "by (metis (mono_tags, hide_lams) F1 not_eq_diff_nonzero \n              \\<open>Zp_converges_to ns \\<alpha>\\<close> a_closed Zp_converges_to_def fa_nonzero)"], ["proof (state)\nthis:\n  a \\<ominus> \\<alpha> \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P1: \"(\\<alpha> \\<ominus> (ns K)) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<ominus> ns K \\<in> nonzero Zp", "using False not_eq_diff_nonzero \\<open>Zp_converges_to ns \\<alpha>\\<close> \n            Zp_converges_to_def newton_seq_closed"], ["proof (prove)\nusing this:\n  ns K \\<noteq> \\<alpha>\n  \\<lbrakk>?a \\<noteq> ?b; ?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?a \\<ominus> ?b \\<in> nonzero Zp\n  Zp_converges_to ns \\<alpha>\n  Zp_converges_to ?s ?a =\n  ((?a \\<in> carrier Zp \\<and>\n    ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (?s m \\<ominus> ?a)))\n  ns ?m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<ominus> ns K \\<in> nonzero Zp", "by (metis (mono_tags, hide_lams))"], ["proof (state)\nthis:\n  \\<alpha> \\<ominus> ns K \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P2: \"a \\<ominus> (ns K) \\<in> nonzero Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> ns K \\<in> nonzero Zp", "using F22 not_eq_diff_nonzero \n                a_closed newton_seq_closed"], ["proof (prove)\nusing this:\n  a \\<noteq> ns K\n  \\<lbrakk>?a \\<noteq> ?b; ?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?a \\<ominus> ?b \\<in> nonzero Zp\n  a \\<in> carrier Zp\n  ns ?m \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a \\<ominus> ns K \\<in> nonzero Zp", "by blast"], ["proof (state)\nthis:\n  a \\<ominus> ns K \\<in> nonzero Zp\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P3: \"(a \\<ominus> \\<alpha>) = a \\<ominus> (ns K) \\<oplus> ((ns K) \\<ominus> \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<ominus> \\<alpha> =\n    a \\<ominus> ns K \\<oplus> (ns K \\<ominus> \\<alpha>)", "by (metis R.plus_diff_simp \\<open>Zp_converges_to ns \\<alpha>\\<close> add_comm Zp_converges_to_def local.a_closed newton_seq_closed)"], ["proof (state)\nthis:\n  a \\<ominus> \\<alpha> = a \\<ominus> ns K \\<oplus> (ns K \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P4: \"val_Zp (a \\<ominus> \\<alpha>) \\<ge> min (val_Zp (a \\<ominus> (ns K))) (val_Zp ((ns K) \\<ominus> \\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (val_Zp (a \\<ominus> ns K)) (val_Zp (ns K \\<ominus> \\<alpha>))\n    \\<le> val_Zp (a \\<ominus> \\<alpha>)", "using \"0\" P3 Zp_converges_to_def newton_seq_closed val_Zp_ultrametric"], ["proof (prove)\nusing this:\n  Zp_converges_to ns \\<alpha>\n  a \\<ominus> \\<alpha> = a \\<ominus> ns K \\<oplus> (ns K \\<ominus> \\<alpha>)\n  Zp_converges_to ?s ?a =\n  ((?a \\<in> carrier Zp \\<and>\n    ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (?s m \\<ominus> ?a)))\n  ns ?m \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> min (val_Zp ?x) (val_Zp ?y)\n                    \\<le> val_Zp (?x \\<oplus> ?y)\n\ngoal (1 subgoal):\n 1. min (val_Zp (a \\<ominus> ns K)) (val_Zp (ns K \\<ominus> \\<alpha>))\n    \\<le> val_Zp (a \\<ominus> \\<alpha>)", "by auto"], ["proof (state)\nthis:\n  min (val_Zp (a \\<ominus> ns K)) (val_Zp (ns K \\<ominus> \\<alpha>))\n  \\<le> val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P5: \"val_Zp (a \\<ominus> (ns K)) >  val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns K)", "using pre_hensel(1)[of \"K\"]"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns K)", "by metis"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \"1 + max (eint 2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a)) > val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "have \"1 + max (eint 2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a)) > (eint 2 + val_Zp (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 + val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 2 + val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "obtain ii :: int where\n              f1: \"eint ii = 1 + max (eint 2 + val_Zp (f'\\<bullet>a)) (val_Zp (\\<alpha> \\<ominus> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ii.\n        eint ii =\n        1 +\n        max (eint 2 + val_Zp (f' \\<bullet> a))\n         (val_Zp (\\<alpha> \\<ominus> a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson l_def)"], ["proof (state)\nthis:\n  eint ii =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. eint 2 + val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "then"], ["proof (chain)\npicking this:\n  eint ii =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "have \"1 + (eint 2 + val_Zp (f'\\<bullet>a)) \\<le> eint ii\""], ["proof (prove)\nusing this:\n  eint ii =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. 1 + (eint 2 + val_Zp (f' \\<bullet> a)) \\<le> eint ii", "by simp"], ["proof (state)\nthis:\n  1 + (eint 2 + val_Zp (f' \\<bullet> a)) \\<le> eint ii\n\ngoal (1 subgoal):\n 1. eint 2 + val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "then"], ["proof (chain)\npicking this:\n  1 + (eint 2 + val_Zp (f' \\<bullet> a)) \\<le> eint ii", "show ?thesis"], ["proof (prove)\nusing this:\n  1 + (eint 2 + val_Zp (f' \\<bullet> a)) \\<le> eint ii\n\ngoal (1 subgoal):\n 1. eint 2 + val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "using f1"], ["proof (prove)\nusing this:\n  1 + (eint 2 + val_Zp (f' \\<bullet> a)) \\<le> eint ii\n  eint ii =\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. eint 2 + val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "by (metis Groups.add_ac(2) iless_Suc_eq linorder_not_less)"], ["proof (state)\nthis:\n  eint 2 + val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 2 + val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  eint 2 + val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a)\n    < 1 +\n      max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))", "by (smt Groups.add_ac(2) eint_pow_int_is_pos f'a_not_infinite ge_plus_pos_imp_gt order_less_le)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "hence P6: \"val_Zp ((ns K) \\<ominus> \\<alpha>) >  val_Zp (f'\\<bullet>a)\""], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns K \\<ominus> \\<alpha>)", "using F21"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < val_Zp_dist (ns K) \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns K \\<ominus> \\<alpha>)", "unfolding val_Zp_dist_def"], ["proof (prove)\nusing this:\n  val_Zp (f' \\<bullet> a)\n  < 1 +\n    max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < val_Zp (ns K \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (ns K \\<ominus> \\<alpha>)", "by auto"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (ns K \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P7: \"val_Zp (a \\<ominus> \\<alpha>) >  val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "using P4 P5 P6 eint_min_ineq"], ["proof (prove)\nusing this:\n  min (val_Zp (a \\<ominus> ns K)) (val_Zp (ns K \\<ominus> \\<alpha>))\n  \\<le> val_Zp (a \\<ominus> \\<alpha>)\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ns K)\n  val_Zp (f' \\<bullet> a) < val_Zp (ns K \\<ominus> \\<alpha>)\n  \\<lbrakk>min ?c ?d \\<le> ?b; ?e < ?c; ?e < ?d\\<rbrakk>\n  \\<Longrightarrow> ?e < ?b\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P8:  \"val_Zp (a \\<ominus> \\<alpha>) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have \" 1 + max (2 + val_Zp (f'\\<bullet>a)) (val_Zp_dist \\<alpha> a) \\<le> val_Zp_dist (ns K) \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n    \\<le> val_Zp_dist (ns K) \\<alpha>", "using False F21"], ["proof (prove)\nusing this:\n  ns K \\<noteq> \\<alpha>\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp (\\<alpha> \\<ominus> a))\n  < val_Zp_dist (ns K) \\<alpha>\n\ngoal (1 subgoal):\n 1. 1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n    \\<le> val_Zp_dist (ns K) \\<alpha>", "by (simp add: val_Zp_dist_def)"], ["proof (state)\nthis:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  \\<le> val_Zp_dist (ns K) \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  \\<le> val_Zp_dist (ns K) \\<alpha>", "have \"val_Zp(\\<alpha> \\<ominus> (ns K)) >   max (2 + val_Zp (f'\\<bullet>a)) (val_Zp_dist \\<alpha> a)\""], ["proof (prove)\nusing this:\n  1 + max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  \\<le> val_Zp_dist (ns K) \\<alpha>\n\ngoal (1 subgoal):\n 1. max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n    < val_Zp (\\<alpha> \\<ominus> ns K)", "by (metis \"0\" Groups.add_ac(2) P1 Zp_converges_to_def eSuc_mono iless_Suc_eq l_def \n                minus_a_inv newton_seq_closed nonzero_closed val_Zp_dist_def val_Zp_of_minus)"], ["proof (state)\nthis:\n  max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  < val_Zp (\\<alpha> \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  < val_Zp (\\<alpha> \\<ominus> ns K)", "have \"val_Zp(\\<alpha> \\<ominus> (ns K)) > val_Zp (a \\<ominus> \\<alpha>) \""], ["proof (prove)\nusing this:\n  max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  < val_Zp (\\<alpha> \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)", "using \\<open>Zp_converges_to ns \\<alpha>\\<close> Zp_converges_to_def val_Zp_dist_def val_Zp_dist_sym"], ["proof (prove)\nusing this:\n  max (eint 2 + val_Zp (f' \\<bullet> a)) (val_Zp_dist \\<alpha> a)\n  < val_Zp (\\<alpha> \\<ominus> ns K)\n  Zp_converges_to ns \\<alpha>\n  Zp_converges_to ?s ?a =\n  ((?a \\<in> carrier Zp \\<and>\n    ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (?s m \\<ominus> ?a)))\n  val_Zp_dist ?a ?b \\<equiv> val_Zp (?a \\<ominus> ?b)\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp_dist ?a ?b = val_Zp_dist ?b ?a\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)", "by auto"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)", "have P80: \"val_Zp (a \\<ominus> \\<alpha>) = val_Zp (a \\<ominus> (ns K))\""], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) = val_Zp (a \\<ominus> ns K)", "using P0 P1 Zp_def val_Zp_ultrametric_eq[of \"\\<alpha> \\<ominus> ns K\" \"a \\<ominus> \\<alpha>\"] 0 R.plus_diff_simp \n              Zp_converges_to_def local.a_closed newton_seq_closed nonzero_closed"], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)\n  a \\<ominus> \\<alpha> \\<in> nonzero Zp\n  \\<alpha> \\<ominus> ns K \\<in> nonzero Zp\n  Zp \\<equiv> padic_int p\n  \\<lbrakk>\\<alpha> \\<ominus> ns K \\<in> carrier Zp;\n   a \\<ominus> \\<alpha> \\<in> carrier Zp;\n   val_Zp (a \\<ominus> \\<alpha>) < val_Zp (\\<alpha> \\<ominus> ns K)\\<rbrakk>\n  \\<Longrightarrow> val_Zp\n                     (\\<alpha> \\<ominus> ns K \\<oplus>\n                      (a \\<ominus> \\<alpha>)) =\n                    val_Zp (a \\<ominus> \\<alpha>)\n  Zp_converges_to ns \\<alpha>\n  \\<lbrakk>?a \\<in> carrier Zp; ?b \\<in> carrier Zp; ?c \\<in> carrier Zp;\n   ?X = ?a \\<ominus> ?b; ?Y = ?c \\<ominus> ?a\\<rbrakk>\n  \\<Longrightarrow> ?X \\<oplus> ?Y = ?c \\<ominus> ?b\n  Zp_converges_to ?s ?a =\n  ((?a \\<in> carrier Zp \\<and>\n    ?s \\<in> carrier Zp\\<^bsup>\\<omega>\\<^esup>) \\<and>\n   (\\<forall>n.\n       \\<exists>k. \\<forall>m>k. eint n < val_Zp (?s m \\<ominus> ?a)))\n  a \\<in> carrier Zp\n  ns ?m \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) = val_Zp (a \\<ominus> ns K)", "by auto"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> \\<alpha>) = val_Zp (a \\<ominus> ns K)\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "have P81: \"val_Zp (a \\<ominus> ns K) = val_Zp (local.divide (f\\<bullet>a) (f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns K) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "using K_def N'_def"], ["proof (prove)\nusing this:\n  K = Suc (max N N')\n  \\<forall>n>N'.\n     val_Zp (a \\<ominus> ns n) =\n     val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> ns K) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by (metis (no_types, lifting) lessI linorder_not_less max_def order_less_le order_trans)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> ns K) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "then"], ["proof (chain)\npicking this:\n  val_Zp (a \\<ominus> ns K) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> ns K) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by (simp add: P80)"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "using P7"], ["proof (prove)\nusing this:\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (a \\<ominus> \\<alpha>) =\n    val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))", "by blast"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "have F3: \"val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f'\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "have F31: \" (f' \\<bullet> \\<alpha>) = res_lim ((to_fun f') \\<circ> ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<bullet> \\<alpha> = res_lim ((\\<bullet>) f' \\<circ> ns)", "using alpha_def alt_seq_limit ns_cauchy polynomial_is_Zp_continuous res_lim_pushforward\n          res_lim_pushforward' f'_closed"], ["proof (prove)\nusing this:\n  \\<alpha> = res_lim ns\n  is_Zp_cauchy ?s \\<Longrightarrow> res_lim (alt_seq ?s) = res_lim ?s\n  is_Zp_cauchy ns\n  ?f \\<in> carrier (UP Zp) \\<Longrightarrow>\n  is_Zp_continuous ((\\<bullet>) ?f)\n  \\<lbrakk>is_Zp_continuous ?f; is_Zp_cauchy ?s; ?t = alt_seq ?s\\<rbrakk>\n  \\<Longrightarrow> res_lim (?f \\<circ> ?t) = ?f (res_lim ?t)\n  \\<lbrakk>is_Zp_continuous ?f; is_Zp_cauchy ?s; ?t = alt_seq ?s\\<rbrakk>\n  \\<Longrightarrow> res_lim (?f \\<circ> ?s) = res_lim (?f \\<circ> ?t)\n  f' \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. f' \\<bullet> \\<alpha> = res_lim ((\\<bullet>) f' \\<circ> ns)", "by auto"], ["proof (state)\nthis:\n  f' \\<bullet> \\<alpha> = res_lim ((\\<bullet>) f' \\<circ> ns)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "obtain N where N_def: \"val_Zp (f'\\<bullet>\\<alpha> \\<ominus> f'\\<bullet>(ns N)) > val_Zp ((f'\\<bullet>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        val_Zp (f' \\<bullet> a)\n        < val_Zp\n           (f' \\<bullet>\n            \\<alpha> \\<ominus> f' \\<bullet> ns N) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (smt F2 False R.minus_closed Suc_ile_eq Zp_def alpha_def f'_closed f'a_nonzero \n          local.a_closed minus_a_inv newton_seq.simps(1) newton_seq_is_Zp_cauchy_0 order_trans\n          padic_integers.poly_diff_val padic_integers_axioms res_lim_in_Zp val_Zp_def val_Zp_of_minus)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> a)\n  < val_Zp (f' \\<bullet> \\<alpha> \\<ominus> f' \\<bullet> ns N)\n\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)", "by (metis False N_def alpha_def equal_val_Zp f'_closed newton_seq_closed newton_seq_is_Zp_cauchy_0 newton_seq_fact1 res_lim_in_Zp to_fun_closed)"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<alpha>.\n                \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n                 \\<alpha> \\<in> carrier Zp;\n                 val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n                 val_Zp (a \\<ominus> \\<alpha>) =\n                 val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n                 val_Zp (f' \\<bullet> \\<alpha>) =\n                 val_Zp (f' \\<bullet> a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>k. f \\<bullet> ns k = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using F1 F2 F3 that alpha_def ns_cauchy res_lim_in_Zp"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> = \\<zero>\n  val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a))\n  val_Zp (f' \\<bullet> \\<alpha>) = val_Zp (f' \\<bullet> a)\n  \\<lbrakk>f \\<bullet> ?\\<alpha>2 = \\<zero>; ?\\<alpha>2 \\<in> carrier Zp;\n   val_Zp (f' \\<bullet> a) < val_Zp (a \\<ominus> ?\\<alpha>2);\n   val_Zp (a \\<ominus> ?\\<alpha>2) =\n   val_Zp (local.divide (f \\<bullet> a) (f' \\<bullet> a));\n   val_Zp (f' \\<bullet> ?\\<alpha>2) = val_Zp (f' \\<bullet> a)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<alpha> = res_lim ns\n  is_Zp_cauchy ns\n  is_Zp_cauchy ?s \\<Longrightarrow> res_lim ?s \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "section\\<open>Removing Hensel's Lemma from the Hensel Locale\\<close>"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "context padic_integers\nbegin"], ["", "lemma hensels_lemma:\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"(pderiv f)\\<bullet>a \\<noteq> \\<zero>\"\n  assumes \"f\\<bullet>a \\<noteq>\\<zero>\"\n  assumes \"val_Zp (f\\<bullet>a) > 2* val_Zp ((pderiv f)\\<bullet>a)\"\n  obtains \\<alpha> where\n       \"f\\<bullet>\\<alpha> = \\<zero>\" and \"\\<alpha> \\<in> carrier Zp\" \n       \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\"\n       \"val_Zp (a \\<ominus> \\<alpha>) = val_Zp (divide (f\\<bullet>a) ((pderiv f)\\<bullet>a))\"\n       \"val_Zp ((pderiv f)\\<bullet>\\<alpha>) = val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n         val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n         val_Zp (a \\<ominus> \\<alpha>) =\n         val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n         val_Zp (pderiv f \\<bullet> \\<alpha>) =\n         val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n         val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n         val_Zp (a \\<ominus> \\<alpha>) =\n         val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n         val_Zp (pderiv f \\<bullet> \\<alpha>) =\n         val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"hensel p f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hensel p f a", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> a \\<noteq> \\<zero>\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. hensel p f a", "by (simp add: Zp_def hensel.intro hensel_axioms.intro padic_integers_axioms)"], ["proof (state)\nthis:\n  hensel p f a\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n         val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n         val_Zp (a \\<ominus> \\<alpha>) =\n         val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n         val_Zp (pderiv f \\<bullet> \\<alpha>) =\n         val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  hensel p f a", "show ?thesis"], ["proof (prove)\nusing this:\n  hensel p f a\n\ngoal (1 subgoal):\n 1. thesis", "using hensel.full_hensels_lemma  Zp_def that"], ["proof (prove)\nusing this:\n  hensel p f a\n  \\<lbrakk>hensel ?p ?f ?a;\n   \\<And>\\<alpha>.\n      \\<lbrakk>UP_cring.to_fun (padic_int ?p) ?f \\<alpha> =\n               \\<zero>\\<^bsub>padic_int ?p\\<^esub>;\n       \\<alpha> \\<in> carrier (padic_int ?p);\n       padic_integers.val_Zp ?p\n        (UP_cring.to_fun (padic_int ?p) (UP_cring.pderiv (padic_int ?p) ?f)\n          ?a)\n       < padic_integers.val_Zp ?p\n          (?a \\<ominus>\\<^bsub>padic_int ?p\\<^esub> \\<alpha>);\n       padic_integers.val_Zp ?p\n        (?a \\<ominus>\\<^bsub>padic_int ?p\\<^esub> \\<alpha>) =\n       padic_integers.val_Zp ?p\n        (padic_integers.divide ?p (UP_cring.to_fun (padic_int ?p) ?f ?a)\n          (UP_cring.to_fun (padic_int ?p)\n            (UP_cring.pderiv (padic_int ?p) ?f) ?a));\n       padic_integers.val_Zp ?p\n        (UP_cring.to_fun (padic_int ?p) (UP_cring.pderiv (padic_int ?p) ?f)\n          \\<alpha>) =\n       padic_integers.val_Zp ?p\n        (UP_cring.to_fun (padic_int ?p) (UP_cring.pderiv (padic_int ?p) ?f)\n          ?a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  Zp \\<equiv> padic_int p\n  \\<lbrakk>f \\<bullet> ?\\<alpha>2 = \\<zero>; ?\\<alpha>2 \\<in> carrier Zp;\n   val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> ?\\<alpha>2);\n   val_Zp (a \\<ominus> ?\\<alpha>2) =\n   val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n   val_Zp (pderiv f \\<bullet> ?\\<alpha>2) =\n   val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Uniqueness of the root found in Hensel's lemma \\<close>"], ["", "lemma hensels_lemma_unique_root:\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"(pderiv f)\\<bullet>a \\<noteq> \\<zero>\"\n  assumes \"f\\<bullet>a \\<noteq>\\<zero>\"\n  assumes \"(val_Zp (f\\<bullet>a) > 2* val_Zp ((pderiv f)\\<bullet>a))\"\n  assumes \"f\\<bullet>\\<alpha> = \\<zero>\" \n  assumes \"\\<alpha> \\<in> carrier Zp\" \n  assumes \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\"\n  assumes \"f\\<bullet>\\<beta> = \\<zero>\" \n  assumes \"\\<beta> \\<in> carrier Zp\" \n  assumes \"val_Zp (a \\<ominus> \\<beta>) > val_Zp ((pderiv f)\\<bullet>a)\"\n  assumes \"val_Zp ((pderiv f)\\<bullet>\\<alpha>) = val_Zp ((pderiv f)\\<bullet>a)\"\n  shows \"\\<alpha> = \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "have \"\\<alpha> \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> a", "using assms(4) assms(6)"], ["proof (prove)\nusing this:\n  f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> \\<alpha> = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> a", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "have \"\\<beta> \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> a", "using assms(4) assms(9)"], ["proof (prove)\nusing this:\n  f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> \\<beta> = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> a", "by auto"], ["proof (state)\nthis:\n  \\<beta> \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "have 0: \"val_Zp (\\<beta> \\<ominus> \\<alpha>) >  val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)", "have \"\\<beta> \\<ominus> \\<alpha> = \\<ominus> ((a \\<ominus> \\<beta>) \\<ominus> (a \\<ominus> \\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<ominus> \\<alpha> =\n    \\<ominus> (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))", "by (metis R.minus_eq R.plus_diff_simp assms(10) assms(2) assms(7) minus_a_inv)"], ["proof (state)\nthis:\n  \\<beta> \\<ominus> \\<alpha> =\n  \\<ominus> (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)", "hence \"val_Zp (\\<beta> \\<ominus> \\<alpha>) = val_Zp ((a \\<ominus> \\<beta>) \\<ominus> (a \\<ominus> \\<alpha>))\""], ["proof (prove)\nusing this:\n  \\<beta> \\<ominus> \\<alpha> =\n  \\<ominus> (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n\ngoal (1 subgoal):\n 1. val_Zp (\\<beta> \\<ominus> \\<alpha>) =\n    val_Zp (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))", "using R.minus_closed assms(10) assms(2) assms(7) val_Zp_of_minus"], ["proof (prove)\nusing this:\n  \\<beta> \\<ominus> \\<alpha> =\n  \\<ominus> (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?x \\<ominus> ?y \\<in> carrier Zp\n  \\<beta> \\<in> carrier Zp\n  a \\<in> carrier Zp\n  \\<alpha> \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (\\<beta> \\<ominus> \\<alpha>) =\n    val_Zp (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))", "by presburger"], ["proof (state)\nthis:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) =\n  val_Zp (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) =\n  val_Zp (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)", "using val_Zp_ultrametric_diff[of \"a \\<ominus> \\<beta>\" \"a \\<ominus> \\<alpha>\"]"], ["proof (prove)\nusing this:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) =\n  val_Zp (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n  \\<lbrakk>a \\<ominus> \\<beta> \\<in> carrier Zp;\n   a \\<ominus> \\<alpha> \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> min (val_Zp (a \\<ominus> \\<beta>))\n                     (val_Zp (a \\<ominus> \\<alpha>))\n                    \\<le> val_Zp\n                           (a \\<ominus> \\<beta> \\<ominus> (a \\<ominus> \\<alpha>))\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)", "by (smt R.minus_closed assms(10) assms(11) assms(2) assms(7) assms(8) min.absorb2 min_less_iff_conj)"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "obtain h where h_def: \"h = \\<beta> \\<ominus> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        h = \\<beta> \\<ominus> \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  h = \\<beta> \\<ominus> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "then"], ["proof (chain)\npicking this:\n  h = \\<beta> \\<ominus> \\<alpha>", "have h_fact: \"h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h\""], ["proof (prove)\nusing this:\n  h = \\<beta> \\<ominus> \\<alpha>\n\ngoal (1 subgoal):\n 1. h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h", "by (metis R.l_neg R.minus_closed R.minus_eq R.r_zero add_assoc add_comm assms(10) assms(7))"], ["proof (state)\nthis:\n  h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "then"], ["proof (chain)\npicking this:\n  h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h", "have 1: \"f\\<bullet>(\\<alpha> \\<oplus> h) = \\<zero>\""], ["proof (prove)\nusing this:\n  h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h\n\ngoal (1 subgoal):\n 1. f \\<bullet> (\\<alpha> \\<oplus> h) = \\<zero>", "using assms"], ["proof (prove)\nusing this:\n  h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> a \\<noteq> \\<zero>\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n  f \\<bullet> \\<beta> = \\<zero>\n  \\<beta> \\<in> carrier Zp\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<beta>)\n  val_Zp (pderiv f \\<bullet> \\<alpha>) = val_Zp (pderiv f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. f \\<bullet> (\\<alpha> \\<oplus> h) = \\<zero>", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> (\\<alpha> \\<oplus> h) = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "obtain c where c_def: \"c \\<in> carrier Zp \\<and> f\\<bullet>(\\<alpha> \\<oplus> h) = (f \\<bullet> \\<alpha>) \\<oplus> (deriv f \\<alpha>)\\<otimes>h \\<oplus> c \\<otimes>(h[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> carrier Zp \\<and>\n        f \\<bullet> (\\<alpha> \\<oplus> h) =\n        f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n        c \\<otimes> h [^] 2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using taylor_deg_1_eval'[of  f \\<alpha> h _ \"f \\<bullet> \\<alpha>\" \"deriv f \\<alpha>\" ]"], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<in> carrier (UP Zp); \\<alpha> \\<in> carrier Zp;\n   h \\<in> carrier Zp; ?c = shift 2 (taylor \\<alpha> f) \\<bullet> h;\n   f \\<bullet> \\<alpha> = f \\<bullet> \\<alpha>;\n   deriv f \\<alpha> = deriv f \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> f \\<bullet> (\\<alpha> \\<oplus> h) =\n                    f \\<bullet> \\<alpha> \\<oplus>\n                    deriv f \\<alpha> \\<otimes> h \\<oplus>\n                    ?c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> carrier Zp \\<and>\n        f \\<bullet> (\\<alpha> \\<oplus> h) =\n        f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n        c \\<otimes> h [^] 2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson taylor_closed assms(1) assms(7) to_fun_closed h_fact shift_closed)"], ["proof (state)\nthis:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (\\<alpha> \\<oplus> h) =\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "then"], ["proof (chain)\npicking this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (\\<alpha> \\<oplus> h) =\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2", "have  \"(f \\<bullet> \\<alpha>) \\<oplus> (deriv f \\<alpha>)\\<otimes>h \\<oplus> c \\<otimes>(h[^](2::nat)) = \\<zero>\""], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (\\<alpha> \\<oplus> h) =\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n    c \\<otimes> h [^] 2 =\n    \\<zero>", "by (simp add: \"1\")"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2 =\n  \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2 =\n  \\<zero>", "have 2:  \"(deriv f \\<alpha>)\\<otimes>h \\<oplus> c \\<otimes>(h[^](2::nat)) = \\<zero>\""], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2 =\n  \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>", "by (simp add: assms(1) assms(6) assms(7) deriv_closed h_fact)"], ["proof (state)\nthis:\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "have 3: \"((deriv f \\<alpha>) \\<oplus> c \\<otimes>h)\\<otimes>h = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "have \"((deriv f \\<alpha>) \\<oplus> c \\<otimes>h)\\<otimes>h = ((deriv f \\<alpha>)\\<otimes>h \\<oplus> (c \\<otimes>h)\\<otimes>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h", "by (simp add: R.r_distr UP_cring.deriv_closed Zp_x_is_UP_cring assms(1) assms(7) c_def h_fact mult_comm)"], ["proof (state)\nthis:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "then"], ["proof (chain)\npicking this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h", "have \"((deriv f \\<alpha>) \\<oplus> c \\<otimes>h)\\<otimes>h = (deriv f \\<alpha>)\\<otimes>h \\<oplus> (c \\<otimes>(h\\<otimes>h))\""], ["proof (prove)\nusing this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "then"], ["proof (chain)\npicking this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)", "have \"((deriv f \\<alpha>) \\<oplus> c \\<otimes>h)\\<otimes>h = (deriv f \\<alpha>)\\<otimes>h \\<oplus> (c \\<otimes>(h[^](2::nat)))\""], ["proof (prove)\nusing this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "using nat_pow_def[of Zp h \"2\"]"], ["proof (prove)\nusing this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)\n  h [^] 2 = rec_nat \\<one> (\\<lambda>u b. b \\<otimes> h) 2\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "by (simp add: h_fact)"], ["proof (state)\nthis:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "then"], ["proof (chain)\npicking this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "show ?thesis"], ["proof (prove)\nusing this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "using 2"], ["proof (prove)\nusing this:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n\ngoal (1 subgoal):\n 1. (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "by simp"], ["proof (state)\nthis:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "have \"h = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = \\<zero>", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "assume \"h \\<noteq> \\<zero>\""], ["proof (state)\nthis:\n  h \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  h \\<noteq> \\<zero>", "have \"(deriv f \\<alpha>) \\<oplus> c \\<otimes>h = \\<zero>\""], ["proof (prove)\nusing this:\n  h \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f \\<alpha> \\<oplus> c \\<otimes> h = \\<zero>", "using 2 3"], ["proof (prove)\nusing this:\n  h \\<noteq> \\<zero>\n  deriv f \\<alpha> \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n  (deriv f \\<alpha> \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f \\<alpha> \\<oplus> c \\<otimes> h = \\<zero>", "by (meson R.m_closed assms(1) assms(7) c_def deriv_closed h_fact local.integral sum_closed)"], ["proof (state)\nthis:\n  deriv f \\<alpha> \\<oplus> c \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  deriv f \\<alpha> \\<oplus> c \\<otimes> h = \\<zero>", "have \"(deriv f \\<alpha>) = \\<ominus> c \\<otimes>h\""], ["proof (prove)\nusing this:\n  deriv f \\<alpha> \\<oplus> c \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f \\<alpha> = \\<ominus> c \\<otimes> h", "by (simp add: R.l_minus R.sum_zero_eq_neg UP_cring.deriv_closed Zp_x_is_UP_cring assms(1) assms(7) c_def h_fact)"], ["proof (state)\nthis:\n  deriv f \\<alpha> = \\<ominus> c \\<otimes> h\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  deriv f \\<alpha> = \\<ominus> c \\<otimes> h", "have \"val_Zp (deriv f \\<alpha>) = val_Zp (c \\<otimes> h)\""], ["proof (prove)\nusing this:\n  deriv f \\<alpha> = \\<ominus> c \\<otimes> h\n\ngoal (1 subgoal):\n 1. val_Zp (deriv f \\<alpha>) = val_Zp (c \\<otimes> h)", "by (meson R.m_closed \\<open>deriv f \\<alpha> \\<oplus> c \\<otimes> h = \\<zero>\\<close> assms(1) assms(7) c_def deriv_closed h_fact val_Zp_not_equal_imp_notequal(3))"], ["proof (state)\nthis:\n  val_Zp (deriv f \\<alpha>) = val_Zp (c \\<otimes> h)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp (deriv f \\<alpha>) = val_Zp (c \\<otimes> h)", "have P: \"val_Zp (deriv f \\<alpha>) = val_Zp h + val_Zp c\""], ["proof (prove)\nusing this:\n  val_Zp (deriv f \\<alpha>) = val_Zp (c \\<otimes> h)\n\ngoal (1 subgoal):\n 1. val_Zp (deriv f \\<alpha>) = val_Zp h + val_Zp c", "using val_Zp_mult c_def h_fact"], ["proof (prove)\nusing this:\n  val_Zp (deriv f \\<alpha>) = val_Zp (c \\<otimes> h)\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp (?x \\<otimes> ?y) = val_Zp ?x + val_Zp ?y\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (\\<alpha> \\<oplus> h) =\n  f \\<bullet> \\<alpha> \\<oplus> deriv f \\<alpha> \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2\n  h \\<in> carrier Zp \\<and> \\<beta> = \\<alpha> \\<oplus> h\n\ngoal (1 subgoal):\n 1. val_Zp (deriv f \\<alpha>) = val_Zp h + val_Zp c", "by force"], ["proof (state)\nthis:\n  val_Zp (deriv f \\<alpha>) = val_Zp h + val_Zp c\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "hence \"val_Zp (deriv f \\<alpha>) \\<ge> val_Zp h \""], ["proof (prove)\nusing this:\n  val_Zp (deriv f \\<alpha>) = val_Zp h + val_Zp c\n\ngoal (1 subgoal):\n 1. val_Zp h \\<le> val_Zp (deriv f \\<alpha>)", "using val_pos[of c]"], ["proof (prove)\nusing this:\n  val_Zp (deriv f \\<alpha>) = val_Zp h + val_Zp c\n  c \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp c\n\ngoal (1 subgoal):\n 1. val_Zp h \\<le> val_Zp (deriv f \\<alpha>)", "by (simp add: c_def)"], ["proof (state)\nthis:\n  val_Zp h \\<le> val_Zp (deriv f \\<alpha>)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp h \\<le> val_Zp (deriv f \\<alpha>)", "have \"val_Zp (deriv f \\<alpha>) \\<ge> val_Zp (\\<beta> \\<ominus> \\<alpha>) \""], ["proof (prove)\nusing this:\n  val_Zp h \\<le> val_Zp (deriv f \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (\\<beta> \\<ominus> \\<alpha>) \\<le> val_Zp (deriv f \\<alpha>)", "using h_def"], ["proof (prove)\nusing this:\n  val_Zp h \\<le> val_Zp (deriv f \\<alpha>)\n  h = \\<beta> \\<ominus> \\<alpha>\n\ngoal (1 subgoal):\n 1. val_Zp (\\<beta> \\<ominus> \\<alpha>) \\<le> val_Zp (deriv f \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) \\<le> val_Zp (deriv f \\<alpha>)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) \\<le> val_Zp (deriv f \\<alpha>)", "have \"val_Zp (deriv f \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\nusing this:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) \\<le> val_Zp (deriv f \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)", "using \"0\""], ["proof (prove)\nusing this:\n  val_Zp (\\<beta> \\<ominus> \\<alpha>) \\<le> val_Zp (deriv f \\<alpha>)\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (\\<beta> \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)", "by auto"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)", "show False"], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)\n\ngoal (1 subgoal):\n 1. False", "using pderiv_eval_deriv[of f \\<alpha>]"], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)\n  \\<lbrakk>f \\<in> carrier (UP Zp); \\<alpha> \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> deriv f \\<alpha> = pderiv f \\<bullet> \\<alpha>\n\ngoal (1 subgoal):\n 1. False", "using assms(1) assms(12) assms(7)"], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f \\<alpha>)\n  \\<lbrakk>f \\<in> carrier (UP Zp); \\<alpha> \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> deriv f \\<alpha> = pderiv f \\<bullet> \\<alpha>\n  f \\<in> carrier (UP Zp)\n  val_Zp (pderiv f \\<bullet> \\<alpha>) = val_Zp (pderiv f \\<bullet> a)\n  \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "then"], ["proof (chain)\npicking this:\n  h = \\<zero>", "show \"\\<alpha> = \\<beta>\""], ["proof (prove)\nusing this:\n  h = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "using assms(10) assms(7) h_def"], ["proof (prove)\nusing this:\n  h = \\<zero>\n  \\<beta> \\<in> carrier Zp\n  \\<alpha> \\<in> carrier Zp\n  h = \\<beta> \\<ominus> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<beta>", "by auto"], ["proof (state)\nthis:\n  \\<alpha> = \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hensels_lemma':\n  assumes \"f \\<in> carrier Zp_x\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"val_Zp (f\\<bullet>a) > 2*val_Zp ((pderiv f)\\<bullet>a)\"\n  shows \"\\<exists>!\\<alpha> \\<in> carrier Zp. f\\<bullet>\\<alpha> = \\<zero> \\<and> val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "proof(cases \"f\\<bullet>a = \\<zero>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<bullet> a = \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n 2. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "case True"], ["proof (state)\nthis:\n  f \\<bullet> a = \\<zero>\n\ngoal (2 subgoals):\n 1. f \\<bullet> a = \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n 2. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "have T0: \"pderiv f \\<bullet> a \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a \\<noteq> \\<zero>", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> pderiv f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "using assms(3)"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<not> pderiv f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "unfolding val_Zp_def"], ["proof (prove)\nusing this:\n  eint 2 *\n  (if pderiv f \\<bullet> a = \\<zero> then \\<infinity>\n   else eint (padic_val p (pderiv f \\<bullet> a)))\n  < (if f \\<bullet> a = \\<zero> then \\<infinity>\n     else eint (padic_val p (f \\<bullet> a)))\n\ngoal (1 subgoal):\n 1. \\<not> pderiv f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (2 subgoals):\n 1. f \\<bullet> a = \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n 2. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "then"], ["proof (chain)\npicking this:\n  pderiv f \\<bullet> a \\<noteq> \\<zero>", "have T1: \"a \\<in> carrier Zp \\<and> f\\<bullet>a = \\<zero> \\<and> val_Zp (a \\<ominus> a) > val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\nusing this:\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp \\<and>\n    f \\<bullet> a = \\<zero> \\<and>\n    val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> a)", "using assms True"], ["proof (prove)\nusing this:\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n  f \\<bullet> a = \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp \\<and>\n    f \\<bullet> a = \\<zero> \\<and>\n    val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> a)", "by(simp add: val_Zp_def)"], ["proof (state)\nthis:\n  a \\<in> carrier Zp \\<and>\n  f \\<bullet> a = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> a)\n\ngoal (2 subgoals):\n 1. f \\<bullet> a = \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n 2. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "have T2: \"\\<And>b. b \\<in> carrier Zp \\<and> f\\<bullet>b = \\<zero> \\<and> val_Zp (a \\<ominus> b) > val_Zp ((pderiv f)\\<bullet>a) \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "assume A: \"b \\<in> carrier Zp \\<and> f\\<bullet>b = \\<zero> \\<and> val_Zp (a \\<ominus> b) > val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (state)\nthis:\n  b \\<in> carrier Zp \\<and>\n  f \\<bullet> b = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> b)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "obtain h where h_def: \"h = b \\<ominus> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h. h = b \\<ominus> a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  h = b \\<ominus> a\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "then"], ["proof (chain)\npicking this:\n  h = b \\<ominus> a", "have h_fact: \"h \\<in> carrier Zp \\<and> b = a \\<oplus> h\""], ["proof (prove)\nusing this:\n  h = b \\<ominus> a\n\ngoal (1 subgoal):\n 1. h \\<in> carrier Zp \\<and> b = a \\<oplus> h", "by (metis A R.l_neg R.minus_closed R.minus_eq R.r_zero add_assoc add_comm assms(2))"], ["proof (state)\nthis:\n  h \\<in> carrier Zp \\<and> b = a \\<oplus> h\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "then"], ["proof (chain)\npicking this:\n  h \\<in> carrier Zp \\<and> b = a \\<oplus> h", "have 1: \"f\\<bullet>(a \\<oplus> h) = \\<zero>\""], ["proof (prove)\nusing this:\n  h \\<in> carrier Zp \\<and> b = a \\<oplus> h\n\ngoal (1 subgoal):\n 1. f \\<bullet> (a \\<oplus> h) = \\<zero>", "using assms A"], ["proof (prove)\nusing this:\n  h \\<in> carrier Zp \\<and> b = a \\<oplus> h\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n  b \\<in> carrier Zp \\<and>\n  f \\<bullet> b = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> b)\n\ngoal (1 subgoal):\n 1. f \\<bullet> (a \\<oplus> h) = \\<zero>", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> (a \\<oplus> h) = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "obtain c where c_def: \"c \\<in> carrier Zp \\<and> f\\<bullet>(a \\<oplus> h) = (f \\<bullet> a) \\<oplus> (deriv f a)\\<otimes>h \\<oplus> c \\<otimes>(h[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> carrier Zp \\<and>\n        f \\<bullet> (a \\<oplus> h) =\n        f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n        c \\<otimes> h [^] 2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using taylor_deg_1_eval'[of  f a h _ \"f \\<bullet> a\" \"deriv f a\" ]"], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<in> carrier (UP Zp); a \\<in> carrier Zp; h \\<in> carrier Zp;\n   ?c = shift 2 (taylor a f) \\<bullet> h; f \\<bullet> a = f \\<bullet> a;\n   deriv f a = deriv f a\\<rbrakk>\n  \\<Longrightarrow> f \\<bullet> (a \\<oplus> h) =\n                    f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n                    ?c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> carrier Zp \\<and>\n        f \\<bullet> (a \\<oplus> h) =\n        f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n        c \\<otimes> h [^] 2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson taylor_closed assms(1) assms(2) to_fun_closed h_fact shift_closed)"], ["proof (state)\nthis:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (a \\<oplus> h) =\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "then"], ["proof (chain)\npicking this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (a \\<oplus> h) =\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "have  \"(f \\<bullet> a) \\<oplus> (deriv f a)\\<otimes>h \\<oplus> c \\<otimes>(h[^](2::nat)) = \\<zero>\""], ["proof (prove)\nusing this:\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (a \\<oplus> h) =\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n    c \\<otimes> h [^] 2 =\n    \\<zero>", "by (simp add: \"1\")"], ["proof (state)\nthis:\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2 =\n  \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2 =\n  \\<zero>", "have 2:  \"(deriv f a)\\<otimes>h \\<oplus> c \\<otimes>(h[^](2::nat)) = \\<zero>\""], ["proof (prove)\nusing this:\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus>\n  c \\<otimes> h [^] 2 =\n  \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>", "by (simp add: True assms(1) assms(2) deriv_closed h_fact)"], ["proof (state)\nthis:\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "hence 3: \"((deriv f a) \\<oplus> c \\<otimes>h)\\<otimes>h = \\<zero>\""], ["proof (prove)\nusing this:\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 =\n    \\<zero> \\<Longrightarrow>\n    (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "have \"((deriv f a) \\<oplus> c \\<otimes>h)\\<otimes>h = ((deriv f a)\\<otimes>h \\<oplus> (c \\<otimes>h)\\<otimes>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f a \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h", "by (simp add: R.l_distr assms(1) assms(2) c_def deriv_closed h_fact)"], ["proof (state)\nthis:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h\n\ngoal (1 subgoal):\n 1. deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 =\n    \\<zero> \\<Longrightarrow>\n    (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "then"], ["proof (chain)\npicking this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h", "have \"((deriv f a) \\<oplus> c \\<otimes>h)\\<otimes>h = (deriv f a)\\<otimes>h \\<oplus> (c \\<otimes>(h\\<otimes>h))\""], ["proof (prove)\nusing this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h \\<otimes> h\n\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f a \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)\n\ngoal (1 subgoal):\n 1. deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 =\n    \\<zero> \\<Longrightarrow>\n    (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "then"], ["proof (chain)\npicking this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)", "have \"((deriv f a) \\<oplus> c \\<otimes>h)\\<otimes>h = (deriv f a)\\<otimes>h \\<oplus> (c \\<otimes>(h[^](2::nat)))\""], ["proof (prove)\nusing this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)\n\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "using nat_pow_def[of Zp h \"2\"]"], ["proof (prove)\nusing this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> (h \\<otimes> h)\n  h [^] 2 = rec_nat \\<one> (\\<lambda>u b. b \\<otimes> h) 2\n\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n    deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "by (simp add: h_fact)"], ["proof (state)\nthis:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 =\n    \\<zero> \\<Longrightarrow>\n    (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "then"], ["proof (chain)\npicking this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2", "show ?thesis"], ["proof (prove)\nusing this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "using 2"], ["proof (prove)\nusing this:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h =\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n\ngoal (1 subgoal):\n 1. (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>", "by simp"], ["proof (state)\nthis:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "have \"h = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = \\<zero>", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "assume \"h \\<noteq> \\<zero>\""], ["proof (state)\nthis:\n  h \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  h \\<noteq> \\<zero>", "have \"(deriv f a) \\<oplus> c \\<otimes>h = \\<zero>\""], ["proof (prove)\nusing this:\n  h \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f a \\<oplus> c \\<otimes> h = \\<zero>", "using 2 3"], ["proof (prove)\nusing this:\n  h \\<noteq> \\<zero>\n  deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2 = \\<zero>\n  (deriv f a \\<oplus> c \\<otimes> h) \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f a \\<oplus> c \\<otimes> h = \\<zero>", "by (meson R.m_closed UP_cring.deriv_closed Zp_x_is_UP_cring assms(1) assms(2) c_def h_fact local.integral sum_closed)"], ["proof (state)\nthis:\n  deriv f a \\<oplus> c \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  deriv f a \\<oplus> c \\<otimes> h = \\<zero>", "have \"(deriv f a) = \\<ominus> c \\<otimes>h\""], ["proof (prove)\nusing this:\n  deriv f a \\<oplus> c \\<otimes> h = \\<zero>\n\ngoal (1 subgoal):\n 1. deriv f a = \\<ominus> c \\<otimes> h", "using R.l_minus R.minus_equality assms(1) assms(2) c_def deriv_closed h_fact"], ["proof (prove)\nusing this:\n  deriv f a \\<oplus> c \\<otimes> h = \\<zero>\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x \\<otimes> ?y = \\<ominus> (?x \\<otimes> ?y)\n  \\<lbrakk>?y \\<oplus> ?x = \\<zero>; ?x \\<in> carrier Zp;\n   ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> ?x = ?y\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (a \\<oplus> h) =\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n  \\<lbrakk>?f \\<in> carrier (UP Zp); ?a \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> deriv ?f ?a \\<in> carrier Zp\n  h \\<in> carrier Zp \\<and> b = a \\<oplus> h\n\ngoal (1 subgoal):\n 1. deriv f a = \\<ominus> c \\<otimes> h", "by auto"], ["proof (state)\nthis:\n  deriv f a = \\<ominus> c \\<otimes> h\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  deriv f a = \\<ominus> c \\<otimes> h", "have \"val_Zp (deriv f a) = val_Zp (c \\<otimes> h)\""], ["proof (prove)\nusing this:\n  deriv f a = \\<ominus> c \\<otimes> h\n\ngoal (1 subgoal):\n 1. val_Zp (deriv f a) = val_Zp (c \\<otimes> h)", "by (meson R.m_closed \\<open>deriv f a \\<oplus> c \\<otimes> h = \\<zero>\\<close> assms(1) assms(2) c_def deriv_closed h_fact val_Zp_not_equal_imp_notequal(3))"], ["proof (state)\nthis:\n  val_Zp (deriv f a) = val_Zp (c \\<otimes> h)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp (deriv f a) = val_Zp (c \\<otimes> h)", "have P: \"val_Zp (deriv f a) = val_Zp h +  val_Zp c\""], ["proof (prove)\nusing this:\n  val_Zp (deriv f a) = val_Zp (c \\<otimes> h)\n\ngoal (1 subgoal):\n 1. val_Zp (deriv f a) = val_Zp h + val_Zp c", "by (simp add: c_def h_fact val_Zp_mult)"], ["proof (state)\nthis:\n  val_Zp (deriv f a) = val_Zp h + val_Zp c\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "have \"val_Zp (deriv f a) \\<ge> val_Zp h \""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp h \\<le> val_Zp (deriv f a)", "using P val_pos[of c] c_def"], ["proof (prove)\nusing this:\n  val_Zp (deriv f a) = val_Zp h + val_Zp c\n  c \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp c\n  c \\<in> carrier Zp \\<and>\n  f \\<bullet> (a \\<oplus> h) =\n  f \\<bullet> a \\<oplus> deriv f a \\<otimes> h \\<oplus> c \\<otimes> h [^] 2\n\ngoal (1 subgoal):\n 1. val_Zp h \\<le> val_Zp (deriv f a)", "by simp"], ["proof (state)\nthis:\n  val_Zp h \\<le> val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp h \\<le> val_Zp (deriv f a)", "have \"val_Zp (deriv f a) \\<ge> val_Zp (b \\<ominus> a) \""], ["proof (prove)\nusing this:\n  val_Zp h \\<le> val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. val_Zp (b \\<ominus> a) \\<le> val_Zp (deriv f a)", "using h_def"], ["proof (prove)\nusing this:\n  val_Zp h \\<le> val_Zp (deriv f a)\n  h = b \\<ominus> a\n\ngoal (1 subgoal):\n 1. val_Zp (b \\<ominus> a) \\<le> val_Zp (deriv f a)", "by blast"], ["proof (state)\nthis:\n  val_Zp (b \\<ominus> a) \\<le> val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp (b \\<ominus> a) \\<le> val_Zp (deriv f a)", "have \"val_Zp (deriv f a) > val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\nusing this:\n  val_Zp (b \\<ominus> a) \\<le> val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f a)", "by (metis (no_types, lifting) A assms(2) h_def h_fact minus_a_inv not_less order_trans val_Zp_of_minus)"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f a)", "have P0:\"val_Zp (deriv f a) > val_Zp (deriv f a)\""], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. val_Zp (deriv f a) < val_Zp (deriv f a)", "by (metis UP_cring.pderiv_eval_deriv Zp_x_is_UP_cring assms(1) assms(2))"], ["proof (state)\nthis:\n  val_Zp (deriv f a) < val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> \\<zero> \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  val_Zp (deriv f a) < val_Zp (deriv f a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier Zp \\<and>\n       f \\<bullet> b = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a)\n       < val_Zp (a \\<ominus> b) \\<Longrightarrow>\n       a = b", "then"], ["proof (chain)\npicking this:\n  h = \\<zero>", "show \"a = b\""], ["proof (prove)\nusing this:\n  h = \\<zero>\n\ngoal (1 subgoal):\n 1. a = b", "by (simp add: assms(2) h_fact)"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?b2 \\<in> carrier Zp \\<and>\n  f \\<bullet> ?b2 = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> ?b2) \\<Longrightarrow>\n  a = ?b2\n\ngoal (2 subgoals):\n 1. f \\<bullet> a = \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n 2. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "using T1 T2"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp \\<and>\n  f \\<bullet> a = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> a)\n  ?b2 \\<in> carrier Zp \\<and>\n  f \\<bullet> ?b2 = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> ?b2) \\<Longrightarrow>\n  a = ?b2\n\ngoal (1 subgoal):\n 1. \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>!\\<alpha>.\n     \\<alpha> \\<in> carrier Zp \\<and>\n     f \\<bullet> \\<alpha> = \\<zero> \\<and>\n     val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "case False"], ["proof (state)\nthis:\n  f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "have F0: \"pderiv f \\<bullet> a \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a \\<noteq> \\<zero>", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> pderiv f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "using assms(3)"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<not> pderiv f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "unfolding val_Zp_def"], ["proof (prove)\nusing this:\n  eint 2 *\n  (if pderiv f \\<bullet> a = \\<zero> then \\<infinity>\n   else eint (padic_val p (pderiv f \\<bullet> a)))\n  < (if f \\<bullet> a = \\<zero> then \\<infinity>\n     else eint (padic_val p (f \\<bullet> a)))\n\ngoal (1 subgoal):\n 1. \\<not> pderiv f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "obtain \\<alpha> where alpha_def:\n       \"f\\<bullet>\\<alpha> = \\<zero>\"  \"\\<alpha> \\<in> carrier Zp\" \n       \"val_Zp (a \\<ominus> \\<alpha>) > val_Zp ((pderiv f)\\<bullet>a)\"\n       \"(val_Zp (a \\<ominus> \\<alpha>) = val_Zp (divide (f\\<bullet>a) ((pderiv f)\\<bullet>a)))\"\n       \"val_Zp ((pderiv f)\\<bullet>\\<alpha>) = val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n         val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n         val_Zp (a \\<ominus> \\<alpha>) =\n         val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n         val_Zp (pderiv f \\<bullet> \\<alpha>) =\n         val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms hensels_lemma F0 False"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n  \\<lbrakk>?f \\<in> carrier (UP Zp); ?a \\<in> carrier Zp;\n   pderiv ?f \\<bullet> ?a \\<noteq> \\<zero>;\n   ?f \\<bullet> ?a \\<noteq> \\<zero>;\n   eint 2 * val_Zp (pderiv ?f \\<bullet> ?a) < val_Zp (?f \\<bullet> ?a);\n   \\<And>\\<alpha>.\n      \\<lbrakk>?f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n       val_Zp (pderiv ?f \\<bullet> ?a) < val_Zp (?a \\<ominus> \\<alpha>);\n       val_Zp (?a \\<ominus> \\<alpha>) =\n       val_Zp (local.divide (?f \\<bullet> ?a) (pderiv ?f \\<bullet> ?a));\n       val_Zp (pderiv ?f \\<bullet> \\<alpha>) =\n       val_Zp (pderiv ?f \\<bullet> ?a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n         val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n         val_Zp (a \\<ominus> \\<alpha>) =\n         val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n         val_Zp (pderiv f \\<bullet> \\<alpha>) =\n         val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a))\n  val_Zp (pderiv f \\<bullet> \\<alpha>) = val_Zp (pderiv f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "have 0: \"\\<And>x. x \\<in> carrier Zp \\<and> f \\<bullet> x = \\<zero> \\<and> val_Zp (a \\<ominus> x) > val_Zp (pderiv f \\<bullet> a) \\<and> val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> x) \\<Longrightarrow> x= \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> carrier Zp \\<and>\n       f \\<bullet> x = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> x) \\<and>\n       val_Zp (pderiv f \\<bullet> a) \\<noteq>\n       val_Zp (a \\<ominus> x) \\<Longrightarrow>\n       x = \\<alpha>", "using alpha_def assms hensels_lemma_unique_root[of f a \\<alpha>] F0 False"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a))\n  val_Zp (pderiv f \\<bullet> \\<alpha>) = val_Zp (pderiv f \\<bullet> a)\n  f \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n  \\<lbrakk>f \\<in> carrier (UP Zp); a \\<in> carrier Zp;\n   pderiv f \\<bullet> a \\<noteq> \\<zero>; f \\<bullet> a \\<noteq> \\<zero>;\n   eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a);\n   f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n   val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n   f \\<bullet> ?\\<beta> = \\<zero>; ?\\<beta> \\<in> carrier Zp;\n   val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> ?\\<beta>);\n   val_Zp (pderiv f \\<bullet> \\<alpha>) =\n   val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> = ?\\<beta>\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> carrier Zp \\<and>\n       f \\<bullet> x = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> x) \\<and>\n       val_Zp (pderiv f \\<bullet> a) \\<noteq>\n       val_Zp (a \\<ominus> x) \\<Longrightarrow>\n       x = \\<alpha>", "by blast"], ["proof (state)\nthis:\n  ?x2 \\<in> carrier Zp \\<and>\n  f \\<bullet> ?x2 = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> ?x2) \\<and>\n  val_Zp (pderiv f \\<bullet> a) \\<noteq>\n  val_Zp (a \\<ominus> ?x2) \\<Longrightarrow>\n  ?x2 = \\<alpha>\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "have 1: \"\\<alpha> \\<in> carrier Zp \\<and> f \\<bullet> \\<alpha> = \\<zero> \\<and> val_Zp (a \\<ominus> \\<alpha>) > val_Zp (pderiv f \\<bullet> a) \\<and> val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<in> carrier Zp \\<and>\n    f \\<bullet> \\<alpha> = \\<zero> \\<and>\n    val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> \\<alpha>)", "using alpha_def order_less_le"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n  val_Zp (a \\<ominus> \\<alpha>) =\n  val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a))\n  val_Zp (pderiv f \\<bullet> \\<alpha>) = val_Zp (pderiv f \\<bullet> a)\n  (?x < ?y) = (?x \\<le> ?y \\<and> ?x \\<noteq> ?y)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in> carrier Zp \\<and>\n    f \\<bullet> \\<alpha> = \\<zero> \\<and>\n    val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n    val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  \\<alpha> \\<in> carrier Zp \\<and>\n  f \\<bullet> \\<alpha> = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero> \\<Longrightarrow>\n    \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> carrier Zp \\<and>\n  f \\<bullet> \\<alpha> = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "using 0"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> carrier Zp \\<and>\n  f \\<bullet> \\<alpha> = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>) \\<and>\n  val_Zp (pderiv f \\<bullet> a) \\<noteq> val_Zp (a \\<ominus> \\<alpha>)\n  ?x2 \\<in> carrier Zp \\<and>\n  f \\<bullet> ?x2 = \\<zero> \\<and>\n  val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> ?x2) \\<and>\n  val_Zp (pderiv f \\<bullet> a) \\<noteq>\n  val_Zp (a \\<ominus> ?x2) \\<Longrightarrow>\n  ?x2 = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>!\\<alpha>.\n       \\<alpha> \\<in> carrier Zp \\<and>\n       f \\<bullet> \\<alpha> = \\<zero> \\<and>\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)", "by (metis (no_types, hide_lams) R.minus_closed alpha_def(1-3) assms(2) equal_val_Zp val_Zp_ultrametric_eq')"], ["proof (state)\nthis:\n  \\<exists>!\\<alpha>.\n     \\<alpha> \\<in> carrier Zp \\<and>\n     f \\<bullet> \\<alpha> = \\<zero> \\<and>\n     val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "section\\<open>Some Applications of Hensel's Lemma to Root Finding for Polynomials over $\\mathbb{Z}_p$\\<close>"], ["", "(**************************************************************************************************)\n(**************************************************************************************************)"], ["", "lemma Zp_square_root_criterion:\n  assumes \"p \\<noteq> 2\"\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"b \\<in> carrier Zp\"\n  assumes \"val_Zp b \\<ge> val_Zp a\"\n  assumes \"a \\<noteq> \\<zero>\"\n  assumes \"b \\<noteq> \\<zero>\"\n  shows \"\\<exists>y \\<in> carrier Zp. a[^](2::nat) \\<oplus> \\<p>\\<otimes>b[^](2::nat) = (y [^]\\<^bsub>Zp\\<^esub> (2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "have bounds: \"val_Zp a < \\<infinity>\" \"val_Zp a \\<ge> 0\" \"val_Zp b < \\<infinity>\" \"val_Zp b \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (val_Zp a < \\<infinity> &&& 0 \\<le> val_Zp a) &&&\n    val_Zp b < \\<infinity> &&& 0 \\<le> val_Zp b", "using assms(2) assms(3) assms(6) assms(5) val_Zp_def val_pos[of b]  val_pos[of a]"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  b \\<noteq> \\<zero>\n  a \\<noteq> \\<zero>\n  val_Zp =\n  (\\<lambda>x. if x = \\<zero> then \\<infinity> else eint (padic_val p x))\n  b \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp b\n  a \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp a\n\ngoal (1 subgoal):\n 1. (val_Zp a < \\<infinity> &&& 0 \\<le> val_Zp a) &&&\n    val_Zp b < \\<infinity> &&& 0 \\<le> val_Zp b", "by auto"], ["proof (state)\nthis:\n  val_Zp a < \\<infinity>\n  0 \\<le> val_Zp a\n  val_Zp b < \\<infinity>\n  0 \\<le> val_Zp b\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "obtain f where f_def: \"f = monom Zp_x \\<one> 2  \\<oplus>\\<^bsub>Zp_x\\<^esub> to_polynomial Zp (\\<ominus> (a[^](2::nat)\\<oplus> \\<p>\\<otimes>b[^](2::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f =\n        monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n        to_polynomial Zp\n         (\\<ominus> (a [^] 2 \\<oplus>\n                     [p] \\<cdot> \\<one> \\<otimes>\n                     b [^] 2)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2))\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "have \"\\<exists> \\<alpha>. f\\<bullet>\\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 0: \"f \\<in> carrier Zp_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "using f_def"], ["proof (prove)\nusing this:\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2))\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "by (simp add: X_closed assms(2) assms(3) to_poly_closed)"], ["proof (state)\nthis:\n  f \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 1: \"(pderiv f)\\<bullet>a = [(2::nat)] \\<cdot> \\<one> \\<otimes> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "have \"pderiv f = pderiv (monom Zp_x \\<one> 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "using assms f_def pderiv_add[of \"monom Zp_x \\<one> 2\"] to_poly_closed R.nat_pow_closed \n              pderiv_deg_0"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp a \\<le> val_Zp b\n  a \\<noteq> \\<zero>\n  b \\<noteq> \\<zero>\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2))\n  \\<lbrakk>monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp);\n   ?q \\<in> carrier (UP Zp)\\<rbrakk>\n  \\<Longrightarrow> pderiv\n                     (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                      ?q) =\n                    pderiv\n                     (monom (UP Zp) \\<one> 2) \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                    pderiv ?q\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  to_polynomial Zp ?a \\<in> carrier (UP Zp)\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x [^] ?n \\<in> carrier Zp\n  \\<lbrakk>?f \\<in> carrier (UP Zp); deg Zp ?f = 0\\<rbrakk>\n  \\<Longrightarrow> pderiv ?f = \\<zero>\\<^bsub>UP Zp\\<^esub>\n\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "unfolding to_polynomial_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp a \\<le> val_Zp b\n  a \\<noteq> \\<zero>\n  b \\<noteq> \\<zero>\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp)\n   (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) 0\n  \\<lbrakk>monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp);\n   ?q \\<in> carrier (UP Zp)\\<rbrakk>\n  \\<Longrightarrow> pderiv\n                     (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                      ?q) =\n                    pderiv\n                     (monom (UP Zp) \\<one> 2) \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                    pderiv ?q\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) ?a 0 \\<in> carrier (UP Zp)\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x [^] ?n \\<in> carrier Zp\n  \\<lbrakk>?f \\<in> carrier (UP Zp); deg Zp ?f = 0\\<rbrakk>\n  \\<Longrightarrow> pderiv ?f = \\<zero>\\<^bsub>UP Zp\\<^esub>\n\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "using P.nat_pow_closed P.r_zero R.add.inv_closed X_closed Zp_int_inc_closed deg_const monom_term_car pderiv_closed sum_closed"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp a \\<le> val_Zp b\n  a \\<noteq> \\<zero>\n  b \\<noteq> \\<zero>\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp)\n   (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) 0\n  \\<lbrakk>monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp);\n   ?q \\<in> carrier (UP Zp)\\<rbrakk>\n  \\<Longrightarrow> pderiv\n                     (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                      ?q) =\n                    pderiv\n                     (monom (UP Zp) \\<one> 2) \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                    pderiv ?q\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) ?a 0 \\<in> carrier (UP Zp)\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x [^] ?n \\<in> carrier Zp\n  \\<lbrakk>?f \\<in> carrier (UP Zp); deg Zp ?f = 0\\<rbrakk>\n  \\<Longrightarrow> pderiv ?f = \\<zero>\\<^bsub>UP Zp\\<^esub>\n  ?x \\<in> carrier (UP Zp) \\<Longrightarrow>\n  ?x [^]\\<^bsub>UP Zp\\<^esub> ?n \\<in> carrier (UP Zp)\n  ?x \\<in> carrier (UP Zp) \\<Longrightarrow>\n  ?x \\<oplus>\\<^bsub>UP Zp\\<^esub> \\<zero>\\<^bsub>UP Zp\\<^esub> = ?x\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  X_poly Zp \\<in> carrier (UP Zp)\n  [?n] \\<cdot> \\<one> \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> deg Zp (monom (UP Zp) ?a 0) = 0\n  \\<lbrakk>?c \\<in> carrier Zp; ?x \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?c \\<otimes> ?x [^] ?n \\<in> carrier Zp\n  ?p \\<in> carrier (UP Zp) \\<Longrightarrow> pderiv ?p \\<in> carrier (UP Zp)\n  \\<lbrakk>?f \\<in> carrier Zp; ?g \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?f \\<oplus> ?g \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "by (metis (no_types, lifting) R.one_closed monom_closed)"], ["proof (state)\nthis:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "then"], ["proof (chain)\npicking this:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "have 20: \"pderiv f = monom (Zp_x) ([(2::nat) ] \\<cdot> \\<one>) (1::nat)\""], ["proof (prove)\nusing this:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)\n\ngoal (1 subgoal):\n 1. pderiv f = monom (UP Zp) ([2] \\<cdot> \\<one>) 1", "using pderiv_monom[of \\<one> 2]"], ["proof (prove)\nusing this:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)\n  \\<one> \\<in> carrier Zp \\<Longrightarrow>\n  pderiv (monom (UP Zp) \\<one> 2) =\n  monom (UP Zp) ([2] \\<cdot> \\<one>) (2 - 1)\n\ngoal (1 subgoal):\n 1. pderiv f = monom (UP Zp) ([2] \\<cdot> \\<one>) 1", "by simp"], ["proof (state)\nthis:\n  pderiv f = monom (UP Zp) ([2] \\<cdot> \\<one>) 1\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "have 21: \"[(2::nat)] \\<cdot> \\<one> \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [2] \\<cdot> \\<one> \\<noteq> \\<zero>", "using Zp_char_0'[of 2]"], ["proof (prove)\nusing this:\n  0 < 2 \\<Longrightarrow> [2] \\<cdot> \\<one> \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. [2] \\<cdot> \\<one> \\<noteq> \\<zero>", "by simp"], ["proof (state)\nthis:\n  [2] \\<cdot> \\<one> \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "have 22: \"(pderiv f)\\<bullet>a = [(2::nat)] \\<cdot> \\<one> \\<otimes> (a[^]((1::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a [^] 1", "using 20"], ["proof (prove)\nusing this:\n  pderiv f = monom (UP Zp) ([2] \\<cdot> \\<one>) 1\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a [^] 1", "by (simp add: Zp_nat_inc_closed assms(2) to_fun_monom)"], ["proof (state)\nthis:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a [^] 1\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "then"], ["proof (chain)\npicking this:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a [^] 1", "show ?thesis"], ["proof (prove)\nusing this:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a [^] 1\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "using assms(2)"], ["proof (prove)\nusing this:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a [^] 1\n  a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a", "by (simp add: cring.cring_simprules(12))"], ["proof (state)\nthis:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 2: \"(pderiv f)\\<bullet>a \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a \\<noteq> \\<zero>", "using 1 assms"], ["proof (prove)\nusing this:\n  pderiv f \\<bullet> a = [2] \\<cdot> \\<one> \\<otimes> a\n  p \\<noteq> 2\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp a \\<le> val_Zp b\n  a \\<noteq> \\<zero>\n  b \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> a \\<noteq> \\<zero>", "by (metis Zp_char_0' Zp_nat_inc_closed local.integral zero_less_numeral)"], ["proof (state)\nthis:\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 3: \"f\\<bullet>a = \\<ominus> (\\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 3: \"f\\<bullet>a =\n    monom (UP Zp) \\<one> 2 \\<bullet> a \\<oplus>\n    to_polynomial Zp (\\<ominus> (a [^] (2::nat) \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] (2::nat)))\\<bullet>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    monom (UP Zp) \\<one> 2 \\<bullet> a \\<oplus>\n    to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus>\n                 [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n    a", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n     to_polynomial Zp\n      (\\<ominus> (a [^] 2 \\<oplus>\n                  [p] \\<cdot> \\<one> \\<otimes> b [^] 2))) \\<bullet>\n    a =\n    monom (UP Zp) \\<one> 2 \\<bullet> a \\<oplus>\n    to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus>\n                 [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n    a", "apply(rule to_fun_plus)"], ["proof (prove)\ngoal (3 subgoals):\n 1. to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2))\n    \\<in> carrier (UP Zp)\n 2. monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp)\n 3. a \\<in> carrier Zp", "apply (simp add: assms(2) assms(3) to_poly_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp)\n 2. a \\<in> carrier Zp", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp", "by (simp add: assms(2))"], ["proof (state)\nthis:\n  f \\<bullet> a =\n  monom (UP Zp) \\<one> 2 \\<bullet> a \\<oplus>\n  to_polynomial Zp\n   (\\<ominus> (a [^] 2 \\<oplus>\n               [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n  a\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 30: \"f\\<bullet>a = a[^](2::nat)  \\<ominus> (a[^](2::nat) \\<oplus> \\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^]\n    2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "unfolding 3"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (UP Zp) \\<one> 2 \\<bullet> a \\<oplus>\n    to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus>\n                 [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n    a =\n    a [^]\n    2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "by (simp add: R.minus_eq assms(2) assms(3) to_fun_monic_monom to_fun_to_poly)"], ["proof (state)\nthis:\n  f \\<bullet> a =\n  a [^] 2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 31: \"f\\<bullet>a = a[^](2::nat)  \\<ominus> a[^](2::nat) \\<ominus> (\\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "have 310: \"a[^](2::nat) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] 2 \\<in> carrier Zp", "using assms(2) pow_closed"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> ?a [^] ?n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a [^] 2 \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  a [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "have 311: \"\\<p>\\<otimes>(b[^](2::nat)) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp", "by (simp add: assms(3) monom_term_car)"], ["proof (state)\nthis:\n  [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "have   \"\\<ominus> (a [^] (2::nat)\\<oplus>(\\<p> \\<otimes> b [^] (2::nat))) = \\<ominus> (a [^] (2::nat)) \\<oplus> \\<ominus> (\\<p> \\<otimes> (b [^] (2::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2) =\n    \\<ominus> (a [^] 2) \\<oplus>\n    \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "using 310 311 R.minus_add"], ["proof (prove)\nusing this:\n  a [^] 2 \\<in> carrier Zp\n  [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp\n  \\<lbrakk>?x \\<in> carrier Zp; ?y \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> \\<ominus> (?x \\<oplus> ?y) =\n                    \\<ominus> ?x \\<oplus> \\<ominus> ?y\n\ngoal (1 subgoal):\n 1. \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2) =\n    \\<ominus> (a [^] 2) \\<oplus>\n    \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "by blast"], ["proof (state)\nthis:\n  \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2) =\n  \\<ominus> (a [^] 2) \\<oplus>\n  \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "then"], ["proof (chain)\npicking this:\n  \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2) =\n  \\<ominus> (a [^] 2) \\<oplus>\n  \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2) =\n  \\<ominus> (a [^] 2) \\<oplus>\n  \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "by (simp add: \"30\" R.minus_eq add_assoc)"], ["proof (state)\nthis:\n  f \\<bullet> a =\n  a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<bullet> a =\n  a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 32: \"f\\<bullet>a = (a[^](2::nat)  \\<ominus> a[^](2::nat)) \\<ominus> (\\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "using 31"], ["proof (prove)\nusing this:\n  f \\<bullet> a =\n  a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "unfolding a_minus_def"], ["proof (prove)\nusing this:\n  f \\<bullet> a =\n  a [^] 2 \\<oplus> \\<ominus> (a [^] 2) \\<oplus>\n  \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. f \\<bullet> a =\n    a [^] 2 \\<oplus> \\<ominus> (a [^] 2) \\<oplus>\n    \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> a =\n  a [^] 2 \\<ominus> a [^] 2 \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 33: \"\\<p>\\<otimes>b[^](2::nat) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp", "by (simp add: Zp_nat_inc_closed assms(3) monom_term_car)"], ["proof (state)\nthis:\n  [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 34: \"a[^](2::nat) \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] 2 \\<in> carrier Zp", "using assms(2) pow_closed"], ["proof (prove)\nusing this:\n  a \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> ?a [^] ?n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a [^] 2 \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  a [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "then"], ["proof (chain)\npicking this:\n  a [^] 2 \\<in> carrier Zp", "have 34: \"(a[^](2::nat)  \\<ominus> a[^](2::nat)) = \\<zero> \""], ["proof (prove)\nusing this:\n  a [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. a [^] 2 \\<ominus> a [^] 2 = \\<zero>", "by simp"], ["proof (state)\nthis:\n  a [^] 2 \\<ominus> a [^] 2 = \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 35: \"f\\<bullet>a = \\<zero> \\<ominus> (\\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<zero> \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "by (simp add: \"32\" \"34\")"], ["proof (state)\nthis:\n  f \\<bullet> a = \\<zero> \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> a = \\<zero> \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<bullet> a = \\<zero> \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "using 33"], ["proof (prove)\nusing this:\n  f \\<bullet> a = \\<zero> \\<ominus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2\n  [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "unfolding a_minus_def"], ["proof (prove)\nusing this:\n  f \\<bullet> a =\n  \\<zero> \\<oplus> \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n  [p] \\<cdot> \\<one> \\<otimes> b [^] 2 \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "by (simp add: cring.cring_simprules(3))"], ["proof (state)\nthis:\n  f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 4: \"f\\<bullet>a \\<noteq>\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero>", "using 3 assms"], ["proof (prove)\nusing this:\n  f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n  p \\<noteq> 2\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp a \\<le> val_Zp b\n  a \\<noteq> \\<zero>\n  b \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. f \\<bullet> a \\<noteq> \\<zero>", "by (metis R.add.inv_eq_1_iff R.m_closed R.nat_pow_closed Zp.integral Zp_int_inc_closed\n          mult_zero_r nonzero_pow_nonzero p_natpow_prod_Suc(1) p_pow_nonzero(2))"], ["proof (state)\nthis:\n  f \\<bullet> a \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 5: \"val_Zp (f\\<bullet>a) = 1 + 2*val_Zp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "have \"val_Zp (f\\<bullet>a) = val_Zp (\\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "using 3 Zp_int_inc_closed assms(3) monom_term_car val_Zp_of_minus"], ["proof (prove)\nusing this:\n  f \\<bullet> a = \\<ominus> ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n  [?n] \\<cdot> \\<one> \\<in> carrier Zp\n  b \\<in> carrier Zp\n  \\<lbrakk>?c \\<in> carrier Zp; ?x \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?c \\<otimes> ?x [^] ?n \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "by presburger"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "then"], ["proof (chain)\npicking this:\n  val_Zp (f \\<bullet> a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have \"val_Zp (\\<p>\\<otimes>b[^](2::nat)) = 1 + val_Zp (b[^](2::nat))\""], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2) = 1 + val_Zp (b [^] 2)", "by (simp add: assms(3) val_Zp_mult val_Zp_p)"], ["proof (state)\nthis:\n  val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2) = 1 + val_Zp (b [^] 2)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "then"], ["proof (chain)\npicking this:\n  val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2) = 1 + val_Zp (b [^] 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2) = 1 + val_Zp (b [^] 2)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "using assms(3) assms(6)"], ["proof (prove)\nusing this:\n  val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2) = 1 + val_Zp (b [^] 2)\n  b \\<in> carrier Zp\n  b \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "using Zp_def \\<open>val_Zp (to_fun f a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\\<close> not_nonzero_Zp\n          padic_integers_axioms val_Zp_pow'"], ["proof (prove)\nusing this:\n  val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2) = 1 + val_Zp (b [^] 2)\n  b \\<in> carrier Zp\n  b \\<noteq> \\<zero>\n  Zp \\<equiv> padic_int p\n  val_Zp (f \\<bullet> a) = val_Zp ([p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n  \\<lbrakk>?x \\<in> carrier Zp; ?x \\<notin> nonzero Zp\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<zero>\n  padic_integers p\n  ?x \\<in> nonzero Zp \\<Longrightarrow>\n  val_Zp (?x [^] ?n) = eint (int ?n) * val_Zp ?x\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b", "by fastforce"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "have 6: \"val_Zp ((pderiv f)\\<bullet>a) = val_Zp a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) = val_Zp a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) = val_Zp a", "have 60: \"val_Zp ([(2::nat)] \\<cdot> \\<one> \\<otimes> a) = val_Zp ([(2::nat)] \\<cdot> \\<one>) + val_Zp a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp ([2] \\<cdot> \\<one> \\<otimes> a) =\n    val_Zp ([2] \\<cdot> \\<one>) + val_Zp a", "by (simp add: Zp_char_0' assms(2) assms(5) val_Zp_mult ord_of_nonzero(2) ord_pos)"], ["proof (state)\nthis:\n  val_Zp ([2] \\<cdot> \\<one> \\<otimes> a) =\n  val_Zp ([2] \\<cdot> \\<one>) + val_Zp a\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) = val_Zp a", "have \"val_Zp ([(2::nat)] \\<cdot> \\<one>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp ([2] \\<cdot> \\<one>) = 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_Zp ([2] \\<cdot> \\<one>) = 0", "have \"(2::nat) < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int 2 < p", "using prime assms prime_ge_2_int"], ["proof (prove)\nusing this:\n  prime p\n  p \\<noteq> 2\n  a \\<in> carrier Zp\n  b \\<in> carrier Zp\n  val_Zp a \\<le> val_Zp b\n  a \\<noteq> \\<zero>\n  b \\<noteq> \\<zero>\n  prime ?p \\<Longrightarrow> 2 \\<le> ?p\n\ngoal (1 subgoal):\n 1. int 2 < p", "by auto"], ["proof (state)\nthis:\n  int 2 < p\n\ngoal (1 subgoal):\n 1. val_Zp ([2] \\<cdot> \\<one>) = 0", "then"], ["proof (chain)\npicking this:\n  int 2 < p", "have \"(2::nat) mod p = (2::nat)\""], ["proof (prove)\nusing this:\n  int 2 < p\n\ngoal (1 subgoal):\n 1. int 2 mod p = int 2", "by simp"], ["proof (state)\nthis:\n  int 2 mod p = int 2\n\ngoal (1 subgoal):\n 1. val_Zp ([2] \\<cdot> \\<one>) = 0", "then"], ["proof (chain)\npicking this:\n  int 2 mod p = int 2", "show ?thesis"], ["proof (prove)\nusing this:\n  int 2 mod p = int 2\n\ngoal (1 subgoal):\n 1. val_Zp ([2] \\<cdot> \\<one>) = 0", "by (simp add: val_Zp_p_nat_unit)"], ["proof (state)\nthis:\n  val_Zp ([2] \\<cdot> \\<one>) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp ([2] \\<cdot> \\<one>) = 0\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) = val_Zp a", "then"], ["proof (chain)\npicking this:\n  val_Zp ([2] \\<cdot> \\<one>) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  val_Zp ([2] \\<cdot> \\<one>) = 0\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> a) = val_Zp a", "by (simp add: \"1\" \"60\")"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> a) = val_Zp a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> a) = val_Zp a\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "then"], ["proof (chain)\npicking this:\n  val_Zp (pderiv f \\<bullet> a) = val_Zp a", "have 7: \"val_Zp (f\\<bullet>a) > 2* val_Zp ((pderiv f)\\<bullet>a)\""], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> a) = val_Zp a\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)", "using bounds 5 assms(4)"], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> a) = val_Zp a\n  val_Zp a < \\<infinity>\n  0 \\<le> val_Zp a\n  val_Zp b < \\<infinity>\n  0 \\<le> val_Zp b\n  val_Zp (f \\<bullet> a) = 1 + eint 2 * val_Zp b\n  val_Zp a \\<le> val_Zp b\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)", "by (simp add: assms(5) assms(6) one_eint_def val_Zp_def)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "obtain \\<alpha> where\n       A0: \"f\\<bullet>\\<alpha> = \\<zero>\"  \"\\<alpha> \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n         \\<alpha> \\<in> carrier Zp\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hensels_lemma[of f a] \"0\" \"2\" \"4\" \"7\" assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<in> carrier (UP Zp); a \\<in> carrier Zp;\n   pderiv f \\<bullet> a \\<noteq> \\<zero>; f \\<bullet> a \\<noteq> \\<zero>;\n   eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a);\n   \\<And>\\<alpha>.\n      \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n       val_Zp (pderiv f \\<bullet> a) < val_Zp (a \\<ominus> \\<alpha>);\n       val_Zp (a \\<ominus> \\<alpha>) =\n       val_Zp (local.divide (f \\<bullet> a) (pderiv f \\<bullet> a));\n       val_Zp (pderiv f \\<bullet> \\<alpha>) =\n       val_Zp (pderiv f \\<bullet> a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  f \\<in> carrier (UP Zp)\n  pderiv f \\<bullet> a \\<noteq> \\<zero>\n  f \\<bullet> a \\<noteq> \\<zero>\n  eint 2 * val_Zp (pderiv f \\<bullet> a) < val_Zp (f \\<bullet> a)\n  a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n         \\<alpha> \\<in> carrier Zp\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "using A0"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>.\n     f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>.\n     f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha>.\n     f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp", "obtain \\<alpha> where \\<alpha>_def: \"f\\<bullet>\\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha>.\n     f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        f \\<bullet> \\<alpha> = \\<zero> \\<and>\n        \\<alpha> \\<in> carrier Zp \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> = \\<zero> \\<and> \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "have \"f\\<bullet>\\<alpha> = \\<alpha> [^](2::nat)  \\<ominus> (a[^](2::nat)\\<oplus> \\<p>\\<otimes>b[^](2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> =\n    \\<alpha> [^]\n    2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> =\n    \\<alpha> [^]\n    2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "have 0: \"f\\<bullet>\\<alpha> =\n    monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> \\<oplus>\n    to_polynomial Zp (\\<ominus> (a [^] (2::nat) \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] (2::nat)))\\<bullet>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> =\n    monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> \\<oplus>\n    to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus>\n                 [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n    \\<alpha>", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n     to_polynomial Zp\n      (\\<ominus> (a [^] 2 \\<oplus>\n                  [p] \\<cdot> \\<one> \\<otimes> b [^] 2))) \\<bullet>\n    \\<alpha> =\n    monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> \\<oplus>\n    to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus>\n                 [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n    \\<alpha>", "apply(rule to_fun_plus)"], ["proof (prove)\ngoal (3 subgoals):\n 1. to_polynomial Zp\n     (\\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2))\n    \\<in> carrier (UP Zp)\n 2. monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp)\n 3. \\<alpha> \\<in> carrier Zp", "apply (simp add: assms(2) assms(3) to_poly_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp)\n 2. \\<alpha> \\<in> carrier Zp", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<in> carrier Zp", "by (simp add: \\<alpha>_def)"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> =\n  monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> \\<oplus>\n  to_polynomial Zp\n   (\\<ominus> (a [^] 2 \\<oplus>\n               [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n  \\<alpha>\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> =\n    \\<alpha> [^]\n    2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> =\n  monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> \\<oplus>\n  to_polynomial Zp\n   (\\<ominus> (a [^] 2 \\<oplus>\n               [p] \\<cdot> \\<one> \\<otimes> b [^] 2)) \\<bullet>\n  \\<alpha>\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<alpha> =\n    \\<alpha> [^]\n    2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "by (simp add: R.minus_eq \\<alpha>_def assms(2) assms(3) to_fun_monic_monom to_fun_to_poly)"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> =\n  \\<alpha> [^]\n  2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> =\n  \\<alpha> [^]\n  2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> \\<alpha> =\n  \\<alpha> [^]\n  2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<alpha> =\n  \\<alpha> [^]\n  2 \\<ominus> (a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2", "by (metis R.r_right_minus_eq Zp_int_inc_closed \\<alpha>_def assms(2) assms(3) monom_term_car pow_closed sum_closed)"], ["proof (state)\nthis:\n  \\<exists>y\\<in>carrier Zp.\n     a [^] 2 \\<oplus> [p] \\<cdot> \\<one> \\<otimes> b [^] 2 = y [^] 2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Zp_semialg_eq:\n  assumes \"a \\<in> nonzero Zp\"\n  shows \"\\<exists>y \\<in> carrier Zp. \\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat)) = (y [^] (2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "obtain f where f_def: \"f = monom Zp_x \\<one> 2 \\<oplus>\\<^bsub>Zp_x\\<^esub> to_poly (\\<ominus> (\\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f =\n        monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n        to_polynomial Zp\n         (\\<ominus> (\\<one> \\<oplus>\n                     [p] \\<cdot> \\<one> [^] 3 \\<otimes>\n                     a [^] 4)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4))\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have a_car: \"a \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier Zp", "by (simp add: nonzero_memE assms)"], ["proof (state)\nthis:\n  a \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have \"f \\<in> carrier Zp_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "using f_def"], ["proof (prove)\nusing this:\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4))\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "by (simp add: a_car to_poly_closed)"], ["proof (state)\nthis:\n  f \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "hence 0:\"f\\<bullet>\\<one> = \\<one> \\<ominus> (\\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat)))\""], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> =\n    \\<one> \\<ominus> (\\<one> \\<oplus>\n                      [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)", "using f_def"], ["proof (prove)\nusing this:\n  f \\<in> carrier (UP Zp)\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4))\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> =\n    \\<one> \\<ominus> (\\<one> \\<oplus>\n                      [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)", "by (simp add: R.minus_eq assms nat_pow_nonzero nonzero_mult_in_car p_pow_nonzero' to_fun_monom_plus to_fun_to_poly to_poly_closed)"], ["proof (state)\nthis:\n  f \\<bullet> \\<one> =\n  \\<one> \\<ominus> (\\<one> \\<oplus>\n                    [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> \\<one> =\n  \\<one> \\<ominus> (\\<one> \\<oplus>\n                    [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)", "have 1: \"f\\<bullet>\\<one> = \\<ominus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat))\""], ["proof (prove)\nusing this:\n  f \\<bullet> \\<one> =\n  \\<one> \\<ominus> (\\<one> \\<oplus>\n                    [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> =\n    \\<ominus> ([p] \\<cdot> \\<one> [^] 3) \\<otimes> a [^] 4", "unfolding a_minus_def"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<one> =\n  \\<one> \\<oplus>\n  \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> =\n    \\<ominus> ([p] \\<cdot> \\<one> [^] 3) \\<otimes> a [^] 4", "by (smt R.add.inv_closed R.l_minus R.minus_add R.minus_minus R.nat_pow_closed R.one_closed R.r_neg1 a_car monom_term_car p_pow_nonzero(1))"], ["proof (state)\nthis:\n  f \\<bullet> \\<one> =\n  \\<ominus> ([p] \\<cdot> \\<one> [^] 3) \\<otimes> a [^] 4\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  f \\<bullet> \\<one> =\n  \\<ominus> ([p] \\<cdot> \\<one> [^] 3) \\<otimes> a [^] 4", "have \"val_Zp (f\\<bullet>\\<one>) = 3 + val_Zp (a [^] (4::nat))\""], ["proof (prove)\nusing this:\n  f \\<bullet> \\<one> =\n  \\<ominus> ([p] \\<cdot> \\<one> [^] 3) \\<otimes> a [^] 4\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> \\<one>) = eint 3 + val_Zp (a [^] 4)", "using  assms val_Zp_mult[of \"\\<p> [^] (3::nat)\" \"(a [^] (4::nat))\" ] \n      val_Zp_p_pow p_pow_nonzero[of \"3::nat\"] val_Zp_of_minus"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<one> =\n  \\<ominus> ([p] \\<cdot> \\<one> [^] 3) \\<otimes> a [^] 4\n  a \\<in> nonzero Zp\n  \\<lbrakk>[p] \\<cdot> \\<one> [^] 3 \\<in> carrier Zp;\n   a [^] 4 \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> val_Zp ([p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4) =\n                    val_Zp ([p] \\<cdot> \\<one> [^] 3) + val_Zp (a [^] 4)\n  val_Zp ([p] \\<cdot> \\<one> [^] ?n) = eint (int ?n)\n  [p] \\<cdot> \\<one> [^] 3 \\<in> carrier Zp\n  [p] \\<cdot> \\<one> [^] 3 \\<noteq> \\<zero>\n  ?a \\<in> carrier Zp \\<Longrightarrow> val_Zp ?a = val_Zp (\\<ominus> ?a)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> \\<one>) = eint 3 + val_Zp (a [^] 4)", "by (metis R.l_minus R.nat_pow_closed a_car monom_term_car of_nat_numeral)"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + val_Zp (a [^] 4)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + val_Zp (a [^] 4)", "have 2: \"val_Zp (f\\<bullet>\\<one>) = 3 + 4* val_Zp a\""], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + val_Zp (a [^] 4)\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> \\<one>) = eint 3 + eint 4 * val_Zp a", "using assms val_Zp_pow'"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + val_Zp (a [^] 4)\n  a \\<in> nonzero Zp\n  ?x \\<in> nonzero Zp \\<Longrightarrow>\n  val_Zp (?x [^] ?n) = eint (int ?n) * val_Zp ?x\n\ngoal (1 subgoal):\n 1. val_Zp (f \\<bullet> \\<one>) = eint 3 + eint 4 * val_Zp a", "by auto"], ["proof (state)\nthis:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + eint 4 * val_Zp a\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have \"pderiv f = pderiv (monom Zp_x \\<one> 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "using assms f_def pderiv_add[of \"monom Zp_x \\<one> 2\"] to_poly_closed R.nat_pow_closed  pderiv_deg_0"], ["proof (prove)\nusing this:\n  a \\<in> nonzero Zp\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4))\n  \\<lbrakk>monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp);\n   ?q \\<in> carrier (UP Zp)\\<rbrakk>\n  \\<Longrightarrow> pderiv\n                     (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                      ?q) =\n                    pderiv\n                     (monom (UP Zp) \\<one> 2) \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                    pderiv ?q\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  to_polynomial Zp ?a \\<in> carrier (UP Zp)\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x [^] ?n \\<in> carrier Zp\n  \\<lbrakk>?f \\<in> carrier (UP Zp); deg Zp ?f = 0\\<rbrakk>\n  \\<Longrightarrow> pderiv ?f = \\<zero>\\<^bsub>UP Zp\\<^esub>\n\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "unfolding to_polynomial_def"], ["proof (prove)\nusing this:\n  a \\<in> nonzero Zp\n  f =\n  monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp)\n   (\\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4))\n   0\n  \\<lbrakk>monom (UP Zp) \\<one> 2 \\<in> carrier (UP Zp);\n   ?q \\<in> carrier (UP Zp)\\<rbrakk>\n  \\<Longrightarrow> pderiv\n                     (monom (UP Zp) \\<one> 2 \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                      ?q) =\n                    pderiv\n                     (monom (UP Zp) \\<one> 2) \\<oplus>\\<^bsub>UP Zp\\<^esub>\n                    pderiv ?q\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) ?a 0 \\<in> carrier (UP Zp)\n  ?x \\<in> carrier Zp \\<Longrightarrow> ?x [^] ?n \\<in> carrier Zp\n  \\<lbrakk>?f \\<in> carrier (UP Zp); deg Zp ?f = 0\\<rbrakk>\n  \\<Longrightarrow> pderiv ?f = \\<zero>\\<^bsub>UP Zp\\<^esub>\n\ngoal (1 subgoal):\n 1. pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "by (metis (no_types, lifting) P.r_zero R.add.inv_closed R.add.m_closed R.one_closed \n        UP_zero_closed a_car deg_const deg_nzero_nzero monom_closed monom_term_car p_pow_nonzero(1))"], ["proof (state)\nthis:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)", "have 3: \"pderiv f = [(2::nat)] \\<cdot> \\<one> \\<odot>\\<^bsub>Zp_x\\<^esub> X \""], ["proof (prove)\nusing this:\n  pderiv f = pderiv (monom (UP Zp) \\<one> 2)\n\ngoal (1 subgoal):\n 1. pderiv f = [2] \\<cdot> \\<one> \\<odot>\\<^bsub>UP Zp\\<^esub> X_poly Zp", "by (metis P.nat_pow_eone R.one_closed Suc_1 X_closed diff_Suc_1 monom_rep_X_pow pderiv_monom')"], ["proof (state)\nthis:\n  pderiv f = [2] \\<cdot> \\<one> \\<odot>\\<^bsub>UP Zp\\<^esub> X_poly Zp\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "hence 4: \"val_Zp ((pderiv f)\\<bullet>\\<one>) = val_Zp ([(2::nat)] \\<cdot> \\<one> )\""], ["proof (prove)\nusing this:\n  pderiv f = [2] \\<cdot> \\<one> \\<odot>\\<^bsub>UP Zp\\<^esub> X_poly Zp\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> \\<one>) = val_Zp ([2] \\<cdot> \\<one>)", "by (metis R.add.nat_pow_eone R.nat_inc_prod R.nat_inc_prod' R.nat_pow_one R.one_closed \n        Zp_nat_inc_closed \\<open>pderiv f = pderiv (monom Zp_x \\<one> 2)\\<close> pderiv_monom to_fun_monom)"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> \\<one>) = val_Zp ([2] \\<cdot> \\<one>)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have \"(2::int) = (int (2::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 = int 2", "by simp"], ["proof (state)\nthis:\n  2 = int 2\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  2 = int 2", "have 5: \"[(2::nat)] \\<cdot> \\<one> = ([(int (2::nat))] \\<cdot> \\<one> )\""], ["proof (prove)\nusing this:\n  2 = int 2\n\ngoal (1 subgoal):\n 1. [2] \\<cdot> \\<one> = [int 2] \\<cdot> \\<one>", "using add_pow_def int_pow_int"], ["proof (prove)\nusing this:\n  2 = int 2\n  [?k] \\<cdot>\\<^bsub>?R\\<^esub> ?a = ?a [^]\\<^bsub>add_monoid ?R\\<^esub> ?k\n  ?x [^]\\<^bsub>?G\\<^esub> int ?n = ?x [^]\\<^bsub>?G\\<^esub> ?n\n\ngoal (1 subgoal):\n 1. [2] \\<cdot> \\<one> = [int 2] \\<cdot> \\<one>", "by metis"], ["proof (state)\nthis:\n  [2] \\<cdot> \\<one> = [int 2] \\<cdot> \\<one>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have 6: \"val_Zp ((pderiv f)\\<bullet>\\<one>) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "apply(cases \"p = 2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1\n 2. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "using \"4\" \"5\" val_Zp_p"], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> \\<one>) = val_Zp ([2] \\<cdot> \\<one>)\n  [2] \\<cdot> \\<one> = [int 2] \\<cdot> \\<one>\n  val_Zp ([p] \\<cdot> \\<one>) = 1\n\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1\n 2. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "assume \"p \\<noteq> 2\""], ["proof (state)\nthis:\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> 2", "have 60: \"coprime 2 p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. coprime 2 p", "using prime prime_int_numeral_eq primes_coprime two_is_prime_nat"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  prime p\n  prime (numeral ?m) = prime (numeral ?m)\n  \\<lbrakk>prime ?p; prime ?q; ?p \\<noteq> ?q\\<rbrakk>\n  \\<Longrightarrow> coprime ?p ?q\n  prime 2\n\ngoal (1 subgoal):\n 1. coprime 2 p", "by blast"], ["proof (state)\nthis:\n  coprime 2 p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "have 61: \"2 < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < p", "using 60 prime"], ["proof (prove)\nusing this:\n  coprime 2 p\n  prime p\n\ngoal (1 subgoal):\n 1. 2 < p", "by (smt \\<open>p \\<noteq> 2\\<close> prime_gt_1_int)"], ["proof (state)\nthis:\n  2 < p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow>\n    val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "then"], ["proof (chain)\npicking this:\n  2 < p", "show ?thesis"], ["proof (prove)\nusing this:\n  2 < p\n\ngoal (1 subgoal):\n 1. val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1", "by (smt \"4\" \"5\" \\<open>2 = int 2\\<close> mod_pos_pos_trivial nonzero_closed p_nonzero val_Zp_p val_Zp_p_int_unit val_pos)"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have 7: \"val_Zp (f\\<bullet>\\<one>) \\<ge> 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)", "have \"eint 4 * val_Zp a \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> eint 4 * val_Zp a", "using 2 val_pos[of a]"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + eint 4 * val_Zp a\n  a \\<in> carrier Zp \\<Longrightarrow> 0 \\<le> val_Zp a\n\ngoal (1 subgoal):\n 1. 0 \\<le> eint 4 * val_Zp a", "by (metis R.nat_pow_closed a_car assms of_nat_numeral val_Zp_pow' val_pos)"], ["proof (state)\nthis:\n  0 \\<le> eint 4 * val_Zp a\n\ngoal (1 subgoal):\n 1. eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> eint 4 * val_Zp a\n\ngoal (1 subgoal):\n 1. eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)", "using \"2\""], ["proof (prove)\nusing this:\n  0 \\<le> eint 4 * val_Zp a\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + eint 4 * val_Zp a\n\ngoal (1 subgoal):\n 1. eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)", "by auto"], ["proof (state)\nthis:\n  eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have \"2*val_Zp ((pderiv f)\\<bullet>\\<one>) \\<le> 2*1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) \\<le> eint 2 * 1", "using 6 one_eint_def eint_mult_mono'"], ["proof (prove)\nusing this:\n  val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1\n  1 = eint 1\n  \\<lbrakk>0 \\<le> ?c \\<and> ?c \\<noteq> \\<infinity>; ?n < ?k\\<rbrakk>\n  \\<Longrightarrow> ?n * ?c \\<le> ?k * ?c\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) \\<le> eint 2 * 1", "by (smt \\<open>2 = int 2\\<close> eint.distinct(2) eint_ile eint_ord_simps(1) eint_ord_simps(2) mult.commute \n        ord_Zp_p ord_Zp_p_pow ord_Zp_pow p_nonzero p_pow_nonzero(1) times_eint_simps(1) val_Zp_p val_Zp_pow' val_pos)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) \\<le> eint 2 * 1\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "hence 8: \"2 * val_Zp ((pderiv f)\\<bullet> \\<one>) < val_Zp (f\\<bullet>\\<one>)\""], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) \\<le> eint 2 * 1\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> \\<one>)\n    < val_Zp (f \\<bullet> \\<one>)", "using 7 le_less_trans[of \"2 * val_Zp ((pderiv f)\\<bullet> \\<one>)\" \"2::eint\" 3] \n            less_le_trans[of \"2 * val_Zp ((pderiv f)\\<bullet> \\<one>)\" 3 \"val_Zp (f\\<bullet>\\<one>)\"] one_eint_def"], ["proof (prove)\nusing this:\n  eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) \\<le> eint 2 * 1\n  eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)\n  \\<lbrakk>eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) \\<le> eint 2;\n   eint 2 < eint 3\\<rbrakk>\n  \\<Longrightarrow> eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) < eint 3\n  \\<lbrakk>eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) < eint 3;\n   eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)\\<rbrakk>\n  \\<Longrightarrow> eint 2 * val_Zp (pderiv f \\<bullet> \\<one>)\n                    < val_Zp (f \\<bullet> \\<one>)\n  1 = eint 1\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> \\<one>)\n    < val_Zp (f \\<bullet> \\<one>)", "by auto"], ["proof (state)\nthis:\n  eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) < val_Zp (f \\<bullet> \\<one>)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "obtain \\<alpha> where  \\<alpha>_def: \"f\\<bullet>\\<alpha> = \\<zero>\" and  \\<alpha>_def' :\"\\<alpha> \\<in> carrier Zp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n         \\<alpha> \\<in> carrier Zp\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2 6 7 hensels_lemma' 8 \\<open>f \\<in> carrier Zp_x\\<close>"], ["proof (prove)\nusing this:\n  val_Zp (f \\<bullet> \\<one>) = eint 3 + eint 4 * val_Zp a\n  val_Zp (pderiv f \\<bullet> \\<one>) \\<le> 1\n  eint 3 \\<le> val_Zp (f \\<bullet> \\<one>)\n  \\<lbrakk>?f \\<in> carrier (UP Zp); ?a \\<in> carrier Zp;\n   eint 2 * val_Zp (pderiv ?f \\<bullet> ?a)\n   < val_Zp (?f \\<bullet> ?a)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!\\<alpha>.\n                       \\<alpha> \\<in> carrier Zp \\<and>\n                       ?f \\<bullet> \\<alpha> = \\<zero> \\<and>\n                       val_Zp (pderiv ?f \\<bullet> ?a)\n                       < val_Zp (?a \\<ominus> \\<alpha>)\n  eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) < val_Zp (f \\<bullet> \\<one>)\n  f \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>;\n         \\<alpha> \\<in> carrier Zp\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have 0: \"(monom Zp_x \\<one> 2) \\<bullet> \\<alpha> = \\<alpha> [^] (2::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> = \\<alpha> [^] 2", "by (simp add: \\<alpha>_def' to_fun_monic_monom)"], ["proof (state)\nthis:\n  monom (UP Zp) \\<one> 2 \\<bullet> \\<alpha> = \\<alpha> [^] 2\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "have 1: \"to_poly (\\<ominus> (\\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat)))) \\<bullet> \\<alpha> =\\<ominus>( \\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_polynomial Zp\n     (\\<ominus> (\\<one> \\<oplus>\n                 [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)) \\<bullet>\n    \\<alpha> =\n    \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)", "by (simp add: \\<alpha>_def' a_car to_fun_to_poly)"], ["proof (state)\nthis:\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus>\n               [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)) \\<bullet>\n  \\<alpha> =\n  \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus>\n               [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)) \\<bullet>\n  \\<alpha> =\n  \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)", "have \"\\<alpha> [^] (2::nat) \\<ominus> (\\<one> \\<oplus> (\\<p> [^] (3::nat))\\<otimes> (a [^] (4::nat))) = \\<zero>\""], ["proof (prove)\nusing this:\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus>\n               [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)) \\<bullet>\n  \\<alpha> =\n  \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)\n\ngoal (1 subgoal):\n 1. \\<alpha> [^]\n    2 \\<ominus> (\\<one> \\<oplus>\n                 [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4) =\n    \\<zero>", "using \\<alpha>_def \\<alpha>_def'"], ["proof (prove)\nusing this:\n  to_polynomial Zp\n   (\\<ominus> (\\<one> \\<oplus>\n               [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)) \\<bullet>\n  \\<alpha> =\n  \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4)\n  f \\<bullet> \\<alpha> = \\<zero>\n  \\<alpha> \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<alpha> [^]\n    2 \\<ominus> (\\<one> \\<oplus>\n                 [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4) =\n    \\<zero>", "by (simp add: R.minus_eq a_car f_def to_fun_monom_plus to_poly_closed)"], ["proof (state)\nthis:\n  \\<alpha> [^]\n  2 \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4) =\n  \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "then"], ["proof (chain)\npicking this:\n  \\<alpha> [^]\n  2 \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4) =\n  \\<zero>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> [^]\n  2 \\<ominus> (\\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4) =\n  \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>carrier Zp.\n       \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2", "by (metis R.add.m_closed R.nat_pow_closed R.one_closed R.r_right_minus_eq \\<alpha>_def' a_car monom_term_car p_pow_nonzero(1))"], ["proof (state)\nthis:\n  \\<exists>y\\<in>carrier Zp.\n     \\<one> \\<oplus> [p] \\<cdot> \\<one> [^] 3 \\<otimes> a [^] 4 = y [^] 2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Zp_nth_root_lemma:\n  assumes \"a \\<in> carrier Zp\"\n  assumes \"a \\<noteq> \\<one>\"\n  assumes \"n > 1\"\n  assumes \"val_Zp (\\<one> \\<ominus> a) > 2*val_Zp ([(n::nat)]\\<cdot> \\<one>)\"\n  shows \"\\<exists> b \\<in> carrier Zp. b[^]n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "obtain f where f_def: \"f = monom Zp_x \\<one> n \\<oplus>\\<^bsub>Zp_x\\<^esub> monom Zp_x (\\<ominus>a) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f =\n        monom (UP Zp) \\<one> n \\<oplus>\\<^bsub>UP Zp\\<^esub>\n        monom (UP Zp) (\\<ominus> a) 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  f =\n  monom (UP Zp) \\<one> n \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp) (\\<ominus> a) 0\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have \"f \\<in> carrier Zp_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "using f_def monom_closed assms"], ["proof (prove)\nusing this:\n  f =\n  monom (UP Zp) \\<one> n \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp) (\\<ominus> a) 0\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) ?a ?n \\<in> carrier (UP Zp)\n  a \\<in> carrier Zp\n  a \\<noteq> \\<one>\n  1 < n\n  eint 2 * val_Zp ([n] \\<cdot> \\<one>) < val_Zp (\\<one> \\<ominus> a)\n\ngoal (1 subgoal):\n 1. f \\<in> carrier (UP Zp)", "by simp"], ["proof (state)\nthis:\n  f \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have 0: \"pderiv f = monom Zp_x ([n]\\<cdot> \\<one>) (n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f = monom (UP Zp) ([n] \\<cdot> \\<one>) (n - 1)", "by (simp add: assms(1) f_def pderiv_add pderiv_monom)"], ["proof (state)\nthis:\n  pderiv f = monom (UP Zp) ([n] \\<cdot> \\<one>) (n - 1)\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have 1: \"f \\<bullet> \\<one> = \\<one> \\<ominus> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> = \\<one> \\<ominus> a", "using f_def"], ["proof (prove)\nusing this:\n  f =\n  monom (UP Zp) \\<one> n \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp) (\\<ominus> a) 0\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> = \\<one> \\<ominus> a", "by (metis R.add.inv_closed R.minus_eq R.nat_pow_one R.one_closed assms(1) to_fun_const to_fun_monom to_fun_monom_plus monom_closed)"], ["proof (state)\nthis:\n  f \\<bullet> \\<one> = \\<one> \\<ominus> a\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have 2: \"(pderiv f) \\<bullet> \\<one> = ([n]\\<cdot> \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> \\<one> = [n] \\<cdot> \\<one>", "using 0 to_fun_monom assms"], ["proof (prove)\nusing this:\n  pderiv f = monom (UP Zp) ([n] \\<cdot> \\<one>) (n - 1)\n  \\<lbrakk>?c \\<in> carrier Zp; ?x \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> monom (UP Zp) ?c ?n \\<bullet> ?x =\n                    ?c \\<otimes> ?x [^] ?n\n  a \\<in> carrier Zp\n  a \\<noteq> \\<one>\n  1 < n\n  eint 2 * val_Zp ([n] \\<cdot> \\<one>) < val_Zp (\\<one> \\<ominus> a)\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> \\<one> = [n] \\<cdot> \\<one>", "by simp"], ["proof (state)\nthis:\n  pderiv f \\<bullet> \\<one> = [n] \\<cdot> \\<one>\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have 3: \"val_Zp (f \\<bullet> \\<one>) > 2* val_Zp ((pderiv f) \\<bullet> \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> \\<one>)\n    < val_Zp (f \\<bullet> \\<one>)", "using 1 2 assms"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<one> = \\<one> \\<ominus> a\n  pderiv f \\<bullet> \\<one> = [n] \\<cdot> \\<one>\n  a \\<in> carrier Zp\n  a \\<noteq> \\<one>\n  1 < n\n  eint 2 * val_Zp ([n] \\<cdot> \\<one>) < val_Zp (\\<one> \\<ominus> a)\n\ngoal (1 subgoal):\n 1. eint 2 * val_Zp (pderiv f \\<bullet> \\<one>)\n    < val_Zp (f \\<bullet> \\<one>)", "by (simp add: val_Zp_def)"], ["proof (state)\nthis:\n  eint 2 * val_Zp (pderiv f \\<bullet> \\<one>) < val_Zp (f \\<bullet> \\<one>)\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have 4: \"f \\<bullet> \\<one> \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> \\<noteq> \\<zero>", "using 1 assms(1) assms(2)"], ["proof (prove)\nusing this:\n  f \\<bullet> \\<one> = \\<one> \\<ominus> a\n  a \\<in> carrier Zp\n  a \\<noteq> \\<one>\n\ngoal (1 subgoal):\n 1. f \\<bullet> \\<one> \\<noteq> \\<zero>", "by auto"], ["proof (state)\nthis:\n  f \\<bullet> \\<one> \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "have 5: \"(pderiv f) \\<bullet> \\<one> \\<noteq> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> \\<one> \\<noteq> \\<zero>", "using \"2\" Zp_char_0' assms(3)"], ["proof (prove)\nusing this:\n  pderiv f \\<bullet> \\<one> = [n] \\<cdot> \\<one>\n  0 < ?n \\<Longrightarrow> [?n] \\<cdot> \\<one> \\<noteq> \\<zero>\n  1 < n\n\ngoal (1 subgoal):\n 1. pderiv f \\<bullet> \\<one> \\<noteq> \\<zero>", "by auto"], ["proof (state)\nthis:\n  pderiv f \\<bullet> \\<one> \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "obtain \\<beta> where beta_def: \"\\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<beta> \\<in> carrier Zp \\<and>\n        f \\<bullet> \\<beta> = \\<zero> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using hensels_lemma[of f \\<one>]"], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<in> carrier (UP Zp); \\<one> \\<in> carrier Zp;\n   pderiv f \\<bullet> \\<one> \\<noteq> \\<zero>;\n   f \\<bullet> \\<one> \\<noteq> \\<zero>;\n   eint 2 * val_Zp (pderiv f \\<bullet> \\<one>)\n   < val_Zp (f \\<bullet> \\<one>);\n   \\<And>\\<alpha>.\n      \\<lbrakk>f \\<bullet> \\<alpha> = \\<zero>; \\<alpha> \\<in> carrier Zp;\n       val_Zp (pderiv f \\<bullet> \\<one>)\n       < val_Zp (\\<one> \\<ominus> \\<alpha>);\n       val_Zp (\\<one> \\<ominus> \\<alpha>) =\n       val_Zp\n        (local.divide (f \\<bullet> \\<one>) (pderiv f \\<bullet> \\<one>));\n       val_Zp (pderiv f \\<bullet> \\<alpha>) =\n       val_Zp (pderiv f \\<bullet> \\<one>)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<beta> \\<in> carrier Zp \\<and>\n        f \\<bullet> \\<beta> = \\<zero> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis \"3\" \"5\" R.one_closed \\<open>f \\<in> carrier Zp_x\\<close>)"], ["proof (state)\nthis:\n  \\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>", "have \"(\\<beta> [^] n) \\<ominus> a = \\<zero>\""], ["proof (prove)\nusing this:\n  \\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<beta> [^] n \\<ominus> a = \\<zero>", "using f_def R.add.inv_closed  assms(1) to_fun_const[of \"\\<ominus> a\"] to_fun_monic_monom[of \\<beta> n] to_fun_plus monom_closed"], ["proof (prove)\nusing this:\n  \\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>\n  f =\n  monom (UP Zp) \\<one> n \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp) (\\<ominus> a) 0\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  a \\<in> carrier Zp\n  \\<lbrakk>\\<ominus> a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> monom (UP Zp) (\\<ominus> a) 0 \\<bullet> ?b = \\<ominus> a\n  \\<beta> \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) \\<one> n \\<bullet> \\<beta> = \\<beta> [^] n\n  \\<lbrakk>?g \\<in> carrier (UP Zp); ?f \\<in> carrier (UP Zp);\n   ?x \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?f \\<oplus>\\<^bsub>UP Zp\\<^esub> ?g) \\<bullet> ?x =\n                    ?f \\<bullet> ?x \\<oplus> ?g \\<bullet> ?x\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) ?a ?n \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. \\<beta> [^] n \\<ominus> a = \\<zero>", "unfolding a_minus_def"], ["proof (prove)\nusing this:\n  \\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>\n  f =\n  monom (UP Zp) \\<one> n \\<oplus>\\<^bsub>UP Zp\\<^esub>\n  monom (UP Zp) (\\<ominus> a) 0\n  ?x \\<in> carrier Zp \\<Longrightarrow> \\<ominus> ?x \\<in> carrier Zp\n  a \\<in> carrier Zp\n  \\<lbrakk>\\<ominus> a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> monom (UP Zp) (\\<ominus> a) 0 \\<bullet> ?b = \\<ominus> a\n  \\<beta> \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) \\<one> n \\<bullet> \\<beta> = \\<beta> [^] n\n  \\<lbrakk>?g \\<in> carrier (UP Zp); ?f \\<in> carrier (UP Zp);\n   ?x \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> (?f \\<oplus>\\<^bsub>UP Zp\\<^esub> ?g) \\<bullet> ?x =\n                    ?f \\<bullet> ?x \\<oplus> ?g \\<bullet> ?x\n  ?a \\<in> carrier Zp \\<Longrightarrow>\n  monom (UP Zp) ?a ?n \\<in> carrier (UP Zp)\n\ngoal (1 subgoal):\n 1. \\<beta> [^] n \\<oplus> \\<ominus> a = \\<zero>", "by (simp add: beta_def)"], ["proof (state)\nthis:\n  \\<beta> [^] n \\<ominus> a = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "then"], ["proof (chain)\npicking this:\n  \\<beta> [^] n \\<ominus> a = \\<zero>", "have \"\\<beta> \\<in> carrier Zp \\<and> \\<beta> [^] n = a\""], ["proof (prove)\nusing this:\n  \\<beta> [^] n \\<ominus> a = \\<zero>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<in> carrier Zp \\<and> \\<beta> [^] n = a", "using beta_def nonzero_memE  not_eq_diff_nonzero assms(1) pow_closed"], ["proof (prove)\nusing this:\n  \\<beta> [^] n \\<ominus> a = \\<zero>\n  \\<beta> \\<in> carrier Zp \\<and> f \\<bullet> \\<beta> = \\<zero>\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<in> carrier Zp\n  ?a \\<in> nonzero Zp \\<Longrightarrow> ?a \\<noteq> \\<zero>\n  \\<lbrakk>?a \\<noteq> ?b; ?a \\<in> carrier Zp; ?b \\<in> carrier Zp\\<rbrakk>\n  \\<Longrightarrow> ?a \\<ominus> ?b \\<in> nonzero Zp\n  a \\<in> carrier Zp\n  ?a \\<in> carrier Zp \\<Longrightarrow> ?a [^] ?n \\<in> carrier Zp\n\ngoal (1 subgoal):\n 1. \\<beta> \\<in> carrier Zp \\<and> \\<beta> [^] n = a", "by blast"], ["proof (state)\nthis:\n  \\<beta> \\<in> carrier Zp \\<and> \\<beta> [^] n = a\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<in> carrier Zp \\<and> \\<beta> [^] n = a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<beta> \\<in> carrier Zp \\<and> \\<beta> [^] n = a\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>carrier Zp. b [^] n = a", "by blast"], ["proof (state)\nthis:\n  \\<exists>b\\<in>carrier Zp. b [^] n = a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}