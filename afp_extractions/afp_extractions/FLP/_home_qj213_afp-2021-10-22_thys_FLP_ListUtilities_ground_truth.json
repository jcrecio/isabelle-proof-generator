{"file_name": "/home/qj213/afp-2021-10-22/thys/FLP/ListUtilities.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/FLP", "problem_names": ["lemma PrefixListHasTail:\nfixes \n  l1 :: \"'a list\" and\n  l2 :: \"'a list\"\nassumes\n  \"prefixList l1 l2\"\nshows\n  \"\\<exists> l . l2 = l1 @ l \\<and> l \\<noteq> []\"", "lemma PrefixListMonotonicity:\nfixes \n  l1 :: \"'a list\" and\n  l2 :: \"'a list\"\nassumes\n  \"prefixList l1 l2\"\nshows\n  \"length l1 < length l2\"", "lemma TailIsPrefixList : \nfixes \n  l1 :: \"'a list\" and\n  tail :: \"'a list\"\nassumes \"tail \\<noteq> []\"\nshows \"prefixList l1 (l1 @ tail)\"", "lemma PrefixListTransitive:\nfixes \n  l1 :: \"'a list\" and\n  l2 :: \"'a list\" and\n  l3 :: \"'a list\"\nassumes\n  \"prefixList l1 l2\"\n  \"prefixList l2 l3\"\nshows\n  \"prefixList l1 l3\"", "lemma NatPredicateTippingPoint:\nfixes \n  n2 Pr\nassumes\n  Min:     \"0 < n2\" and\n  Pr0:     \"Pr 0\" and\n  NotPrN2: \"\\<not>Pr n2\"\nshows\n  \"\\<exists>n<n2. Pr n \\<and> \\<not>Pr (Suc n)\"", "lemma MinPredicate:\nfixes \n  P::\"nat \\<Rightarrow> bool\"\nassumes\n  \"\\<exists> n . P n\"\nshows \n  \"(\\<exists> n0 . (P n0) \\<and> (\\<forall> n' . (P n') \\<longrightarrow> (n' \\<ge> n0)))\"", "lemma MinPredicate2:\nfixes\n  P::\"nat \\<Rightarrow> bool\"\nassumes\n \"\\<exists> n . P n\"\nshows\n  \"\\<exists> n0 . (P n0) \\<and> (n0 = 0 \\<or> \\<not> P (n0 - 1))\"", "lemma PredicatePairFunction: \nfixes\n  P::\"'a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> 'd \\<Rightarrow> bool\"\nassumes\n  A1: \"\\<forall>x1 x2 . \\<exists>y1 y2 . (P x1 x2 y1 y2)\"\nshows \n  \"\\<exists>f . \\<forall>x1 x2 . \\<exists>y1 y2 .\n    (f x1 x2) = (y1, y2) \n    \\<and> (P x1 x2 (fst (f x1 x2)) (snd (f x1 x2)))\"", "lemma PredicatePairFunctions2: \nfixes\n  P::\"'a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> 'd \\<Rightarrow> bool\"\nassumes\n  A1: \"\\<forall>x1 x2 . \\<exists>y1 y2 . (P x1 x2 y1 y2)\"\nobtains f1 f2  where\n  \"\\<forall>x1 x2 . \\<exists>y1 y2 .\n    (f1 x1 x2) = y1 \\<and> (f2 x1 x2) = y2 \n    \\<and> (P x1 x2 (f1 x1 x2) (f2 x1 x2))\"", "lemma PredicatePairFunctions2Inv: \nfixes\n  P::\"'a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> 'd \\<Rightarrow> bool\"\nassumes\n  A1: \"\\<forall>x1 x2 . \\<exists>y1 y2 . (P x1 x2 y1 y2)\"\nobtains f1 f2  where\n  \"\\<forall>x1 x2 . (P x1 x2 (f1 x1 x2) (f2 x1 x2))\"", "lemma SmallerMultipleStepsWithLimit:\nfixes\n  k A limit\nassumes\n  \"\\<forall> n \\<ge> limit . (A (Suc n)) < (A n)\"\nshows\n  \"\\<forall> n \\<ge> limit . (A (n + k)) \\<le> (A n) - k\"", "lemma PrefixSameOnLow:\nfixes\n  l1 l2\nassumes\n  \"prefixList l1 l2\"\nshows\n  \"\\<forall> index < length l1 . l1 ! index = l2 ! index\"", "lemma KeepProperty:\nfixes\n  P Q low\nassumes\n  \"\\<forall> i \\<ge> low . P i \\<longrightarrow> (P (Suc i) \\<and> Q i)\" \"P low\"\nshows\n  \"\\<forall> i \\<ge> low . Q i\"", "lemma ListLenDrop: \nfixes\n  i la lb\nassumes\n  \"i < length lb\"\n  \"i \\<ge> la\"\nshows\n  \"lb ! i \\<in> set (drop la lb)\"", "lemma DropToShift:\nfixes\n  l i list\nassumes\n  \"l + i < length list\"\nshows\n  \"(drop l list) ! i = list ! (l + i)\"", "lemma SetToIndex:\nfixes\n  a and liste::\"'a list\"\nassumes\n  AssumpSetToIndex: \"a \\<in> set liste\"\nshows\n  \"\\<exists> index < length liste . a = liste ! index\"", "lemma DropToIndex:\nfixes\n  a::\"'a\" and l liste \nassumes\n  AssumpDropToIndex: \"a \\<in> set (drop l liste)\"\nshows\n  \"\\<exists> i \\<ge> l . i < length liste \\<and> a = liste ! i\""], "translations": [["", "lemma PrefixListHasTail:\nfixes \n  l1 :: \"'a list\" and\n  l2 :: \"'a list\"\nassumes\n  \"prefixList l1 l2\"\nshows\n  \"\\<exists> l . l2 = l1 @ l \\<and> l \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. l2 = l1 @ l \\<and> l \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  prefixList l1 l2\n\ngoal (1 subgoal):\n 1. \\<exists>l. l2 = l1 @ l \\<and> l \\<noteq> []", "by (induct rule: prefixList.induct, auto)"], ["", "lemma PrefixListMonotonicity:\nfixes \n  l1 :: \"'a list\" and\n  l2 :: \"'a list\"\nassumes\n  \"prefixList l1 l2\"\nshows\n  \"length l1 < length l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length l1 < length l2", "using assms"], ["proof (prove)\nusing this:\n  prefixList l1 l2\n\ngoal (1 subgoal):\n 1. length l1 < length l2", "by (induct rule: prefixList.induct, auto)"], ["", "lemma TailIsPrefixList : \nfixes \n  l1 :: \"'a list\" and\n  tail :: \"'a list\"\nassumes \"tail \\<noteq> []\"\nshows \"prefixList l1 (l1 @ tail)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixList l1 (l1 @ tail)", "using assms"], ["proof (prove)\nusing this:\n  tail \\<noteq> []\n\ngoal (1 subgoal):\n 1. prefixList l1 (l1 @ tail)", "proof (induct l1, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. tail \\<noteq> [] \\<Longrightarrow> prefixList [] tail\n 2. \\<And>a l1.\n       \\<lbrakk>prefixList l1 (l1 @ tail); tail \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> prefixList (a # l1) (a # l1 @ tail)", "have \"\\<exists> x xs . tail = x # xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x xs. tail = x # xs", "using assms"], ["proof (prove)\nusing this:\n  tail \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>x xs. tail = x # xs", "by (metis neq_Nil_conv)"], ["proof (state)\nthis:\n  \\<exists>x xs. tail = x # xs\n\ngoal (2 subgoals):\n 1. tail \\<noteq> [] \\<Longrightarrow> prefixList [] tail\n 2. \\<And>a l1.\n       \\<lbrakk>prefixList l1 (l1 @ tail); tail \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> prefixList (a # l1) (a # l1 @ tail)", "thus \"prefixList [] tail\""], ["proof (prove)\nusing this:\n  \\<exists>x xs. tail = x # xs\n\ngoal (1 subgoal):\n 1. prefixList [] tail", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>x xs. tail = x # xs\n  tail \\<noteq> []\n\ngoal (1 subgoal):\n 1. prefixList [] tail", "by (metis prefixList.intros(1))"], ["proof (state)\nthis:\n  prefixList [] tail\n\ngoal (1 subgoal):\n 1. \\<And>a l1.\n       \\<lbrakk>prefixList l1 (l1 @ tail); tail \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> prefixList (a # l1) (a # l1 @ tail)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l1.\n       \\<lbrakk>prefixList l1 (l1 @ tail); tail \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> prefixList (a # l1) (a # l1 @ tail)", "fix a l1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l1.\n       \\<lbrakk>prefixList l1 (l1 @ tail); tail \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> prefixList (a # l1) (a # l1 @ tail)", "assume \"prefixList l1 (l1 @ tail)\""], ["proof (state)\nthis:\n  prefixList l1 (l1 @ tail)\n\ngoal (1 subgoal):\n 1. \\<And>a l1.\n       \\<lbrakk>prefixList l1 (l1 @ tail); tail \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> prefixList (a # l1) (a # l1 @ tail)", "thus \"prefixList (a # l1) (a # l1 @ tail)\""], ["proof (prove)\nusing this:\n  prefixList l1 (l1 @ tail)\n\ngoal (1 subgoal):\n 1. prefixList (a # l1) (a # l1 @ tail)", "by (metis prefixList.intros(2))"], ["proof (state)\nthis:\n  prefixList (a # l1) (a # l1 @ tail)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PrefixListTransitive:\nfixes \n  l1 :: \"'a list\" and\n  l2 :: \"'a list\" and\n  l3 :: \"'a list\"\nassumes\n  \"prefixList l1 l2\"\n  \"prefixList l2 l3\"\nshows\n  \"prefixList l1 l3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixList l1 l3", "using assms"], ["proof (prove)\nusing this:\n  prefixList l1 l2\n  prefixList l2 l3\n\ngoal (1 subgoal):\n 1. prefixList l1 l3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "from assms(1)"], ["proof (chain)\npicking this:\n  prefixList l1 l2", "have \"\\<exists> l12 . l2 = l1 @ l12 \\<and> l12 \\<noteq> []\""], ["proof (prove)\nusing this:\n  prefixList l1 l2\n\ngoal (1 subgoal):\n 1. \\<exists>l12. l2 = l1 @ l12 \\<and> l12 \\<noteq> []", "using PrefixListHasTail"], ["proof (prove)\nusing this:\n  prefixList l1 l2\n  prefixList ?l1.0 ?l2.0 \\<Longrightarrow>\n  \\<exists>l. ?l2.0 = ?l1.0 @ l \\<and> l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>l12. l2 = l1 @ l12 \\<and> l12 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  \\<exists>l12. l2 = l1 @ l12 \\<and> l12 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "then"], ["proof (chain)\npicking this:\n  \\<exists>l12. l2 = l1 @ l12 \\<and> l12 \\<noteq> []", "obtain l12 where Extend1: \"l2 = l1 @ l12 \\<and> l12 \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<exists>l12. l2 = l1 @ l12 \\<and> l12 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>l12.\n        l2 = l1 @ l12 \\<and> l12 \\<noteq> [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l2 = l1 @ l12 \\<and> l12 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "from assms(2)"], ["proof (chain)\npicking this:\n  prefixList l2 l3", "have Extend2: \"\\<exists> l23 . l3 = l2 @ l23 \\<and> l23 \\<noteq> []\""], ["proof (prove)\nusing this:\n  prefixList l2 l3\n\ngoal (1 subgoal):\n 1. \\<exists>l23. l3 = l2 @ l23 \\<and> l23 \\<noteq> []", "using PrefixListHasTail"], ["proof (prove)\nusing this:\n  prefixList l2 l3\n  prefixList ?l1.0 ?l2.0 \\<Longrightarrow>\n  \\<exists>l. ?l2.0 = ?l1.0 @ l \\<and> l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>l23. l3 = l2 @ l23 \\<and> l23 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  \\<exists>l23. l3 = l2 @ l23 \\<and> l23 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "then"], ["proof (chain)\npicking this:\n  \\<exists>l23. l3 = l2 @ l23 \\<and> l23 \\<noteq> []", "obtain l23 where Extend2: \"l3 = l2 @ l23 \\<and> l23 \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<exists>l23. l3 = l2 @ l23 \\<and> l23 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>l23.\n        l3 = l2 @ l23 \\<and> l23 \\<noteq> [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l3 = l2 @ l23 \\<and> l23 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "have \"l3 = l1 @ (l12 @ l23) \\<and> (l12 @ l23) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l3 = l1 @ l12 @ l23 \\<and> l12 @ l23 \\<noteq> []", "using Extend1 Extend2"], ["proof (prove)\nusing this:\n  l2 = l1 @ l12 \\<and> l12 \\<noteq> []\n  l3 = l2 @ l23 \\<and> l23 \\<noteq> []\n\ngoal (1 subgoal):\n 1. l3 = l1 @ l12 @ l23 \\<and> l12 @ l23 \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  l3 = l1 @ l12 @ l23 \\<and> l12 @ l23 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "hence \"\\<exists> l . l3 = l1 @ l \\<and> l \\<noteq> []\""], ["proof (prove)\nusing this:\n  l3 = l1 @ l12 @ l23 \\<and> l12 @ l23 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>l. l3 = l1 @ l \\<and> l \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. l3 = l1 @ l \\<and> l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefixList l1 l2; prefixList l2 l3\\<rbrakk>\n    \\<Longrightarrow> prefixList l1 l3", "thus \"prefixList l1 l3\""], ["proof (prove)\nusing this:\n  \\<exists>l. l3 = l1 @ l \\<and> l \\<noteq> []\n\ngoal (1 subgoal):\n 1. prefixList l1 l3", "using TailIsPrefixList"], ["proof (prove)\nusing this:\n  \\<exists>l. l3 = l1 @ l \\<and> l \\<noteq> []\n  ?tail \\<noteq> [] \\<Longrightarrow> prefixList ?l1.0 (?l1.0 @ ?tail)\n\ngoal (1 subgoal):\n 1. prefixList l1 l3", "by auto"], ["proof (state)\nthis:\n  prefixList l1 l3\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lemmas for lists and nat predicates\\<close>"], ["", "lemma NatPredicateTippingPoint:\nfixes \n  n2 Pr\nassumes\n  Min:     \"0 < n2\" and\n  Pr0:     \"Pr 0\" and\n  NotPrN2: \"\\<not>Pr n2\"\nshows\n  \"\\<exists>n<n2. Pr n \\<and> \\<not>Pr (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)", "proof (rule classical, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       Pr n \\<longrightarrow>\n       n < n2 \\<longrightarrow> Pr (Suc n) \\<Longrightarrow>\n    \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)", "assume Asm: \"\\<forall>n. Pr n \\<longrightarrow> n < n2 \\<longrightarrow> Pr (Suc n)\""], ["proof (state)\nthis:\n  \\<forall>n. Pr n \\<longrightarrow> n < n2 \\<longrightarrow> Pr (Suc n)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       Pr n \\<longrightarrow>\n       n < n2 \\<longrightarrow> Pr (Suc n) \\<Longrightarrow>\n    \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)", "have \"\\<And>n. n < n2 \\<Longrightarrow> Pr n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. n < n2 \\<Longrightarrow> Pr n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n < n2 \\<Longrightarrow> Pr n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n < n2 \\<Longrightarrow> Pr n", "show \"n < n2 \\<Longrightarrow> Pr n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < n2 \\<Longrightarrow> Pr n", "by (induct n, auto simp add: Pr0 Asm)"], ["proof (state)\nthis:\n  n < n2 \\<Longrightarrow> Pr n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n < n2 \\<Longrightarrow> Pr ?n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       Pr n \\<longrightarrow>\n       n < n2 \\<longrightarrow> Pr (Suc n) \\<Longrightarrow>\n    \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)", "hence False"], ["proof (prove)\nusing this:\n  ?n < n2 \\<Longrightarrow> Pr ?n\n\ngoal (1 subgoal):\n 1. False", "using Asm[rule_format, of \"n2 - 1\"] Min NotPrN2"], ["proof (prove)\nusing this:\n  ?n < n2 \\<Longrightarrow> Pr ?n\n  \\<lbrakk>Pr (n2 - 1); n2 - 1 < n2\\<rbrakk>\n  \\<Longrightarrow> Pr (Suc (n2 - 1))\n  0 < n2\n  \\<not> Pr n2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       Pr n \\<longrightarrow>\n       n < n2 \\<longrightarrow> Pr (Suc n) \\<Longrightarrow>\n    \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)", "by auto"], ["proof (state)\nthis:\n  \\<exists>n<n2. Pr n \\<and> \\<not> Pr (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MinPredicate:\nfixes \n  P::\"nat \\<Rightarrow> bool\"\nassumes\n  \"\\<exists> n . P n\"\nshows \n  \"(\\<exists> n0 . (P n0) \\<and> (\\<forall> n' . (P n') \\<longrightarrow> (n' \\<ge> n0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n0.\n       P n0 \\<and> (\\<forall>n'. P n' \\<longrightarrow> n0 \\<le> n')", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>n. P n\n\ngoal (1 subgoal):\n 1. \\<exists>n0.\n       P n0 \\<and> (\\<forall>n'. P n' \\<longrightarrow> n0 \\<le> n')", "by (metis LeastI2_wellorder Suc_n_not_le_n)"], ["", "text \\<open>\n  The lemma \\isb{MinPredicate2} describes one case of \\isb{MinPredicate}\n  where the aforementioned smallest element is zero.\n\\<close>"], ["", "lemma MinPredicate2:\nfixes\n  P::\"nat \\<Rightarrow> bool\"\nassumes\n \"\\<exists> n . P n\"\nshows\n  \"\\<exists> n0 . (P n0) \\<and> (n0 = 0 \\<or> \\<not> P (n0 - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n0. P n0 \\<and> (n0 = 0 \\<or> \\<not> P (n0 - 1))", "using assms MinPredicate"], ["proof (prove)\nusing this:\n  \\<exists>n. P n\n  \\<exists>n. ?P n \\<Longrightarrow>\n  \\<exists>n0.\n     ?P n0 \\<and> (\\<forall>n'. ?P n' \\<longrightarrow> n0 \\<le> n')\n\ngoal (1 subgoal):\n 1. \\<exists>n0. P n0 \\<and> (n0 = 0 \\<or> \\<not> P (n0 - 1))", "by (metis add_diff_cancel_right' diff_is_0_eq diff_mult_distrib mult_eq_if)"], ["", "text \\<open>\n  \\isb{PredicatePairFunction} allows to obtain functions mapping two arguments\n  to pairs from 4-ary predicates which are left-total on their first\n  two arguments.\n\\<close>"], ["", "lemma PredicatePairFunction: \nfixes\n  P::\"'a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> 'd \\<Rightarrow> bool\"\nassumes\n  A1: \"\\<forall>x1 x2 . \\<exists>y1 y2 . (P x1 x2 y1 y2)\"\nshows \n  \"\\<exists>f . \\<forall>x1 x2 . \\<exists>y1 y2 .\n    (f x1 x2) = (y1, y2) \n    \\<and> (P x1 x2 (fst (f x1 x2)) (snd (f x1 x2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "define P' where \"P' x y = P (fst x) (snd x) (fst y) (snd y)\" for x y"], ["proof (state)\nthis:\n  P' ?x ?y = P (fst ?x) (snd ?x) (fst ?y) (snd ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "hence \"\\<forall>x. \\<exists>y. P' x  y\""], ["proof (prove)\nusing this:\n  P' ?x ?y = P (fst ?x) (snd ?x) (fst ?y) (snd ?y)\n\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>y. P' x y", "using A1"], ["proof (prove)\nusing this:\n  P' ?x ?y = P (fst ?x) (snd ?x) (fst ?y) (snd ?y)\n  \\<forall>x1 x2. \\<exists>y1 y2. P x1 x2 y1 y2\n\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>y. P' x y", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. \\<exists>y. P' x y\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "hence \"\\<exists>f. \\<forall>x. P' x (f x)\""], ["proof (prove)\nusing this:\n  \\<forall>x. \\<exists>y. P' x y\n\ngoal (1 subgoal):\n 1. \\<exists>f. \\<forall>x. P' x (f x)", "by metis"], ["proof (state)\nthis:\n  \\<exists>f. \\<forall>x. P' x (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "then"], ["proof (chain)\npicking this:\n  \\<exists>f. \\<forall>x. P' x (f x)", "obtain f where \"\\<forall>x. P' x (f x)\""], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>x. P' x (f x)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>x. P' x (f x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>x. P' x (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>x. P' x (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "define f' where \"f' x1 x2 = f (x1, x2)\" for x1 x2"], ["proof (state)\nthis:\n  f' ?x1.0 ?x2.0 = f (?x1.0, ?x2.0)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x. P' x (f x)\n  f' ?x1.0 ?x2.0 = f (?x1.0, ?x2.0)", "have \"\\<forall>x. P' x (f' (fst x) (snd x))\""], ["proof (prove)\nusing this:\n  \\<forall>x. P' x (f x)\n  f' ?x1.0 ?x2.0 = f (?x1.0, ?x2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>x. P' x (f' (fst x) (snd x))", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. P' x (f' (fst x) (snd x))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "hence \"\\<exists>f'. \\<forall>x. P' x (f' (fst x) (snd x))\""], ["proof (prove)\nusing this:\n  \\<forall>x. P' x (f' (fst x) (snd x))\n\ngoal (1 subgoal):\n 1. \\<exists>f'. \\<forall>x. P' x (f' (fst x) (snd x))", "by blast"], ["proof (state)\nthis:\n  \\<exists>f'. \\<forall>x. P' x (f' (fst x) (snd x))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>f'. \\<forall>x. P' x (f' (fst x) (snd x))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "using P'_def"], ["proof (prove)\nusing this:\n  \\<exists>f'. \\<forall>x. P' x (f' (fst x) (snd x))\n  P' ?x ?y = P (fst ?x) (snd ?x) (fst ?y) (snd ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x1 x2.\n          \\<exists>y1 y2.\n             f x1 x2 = (y1, y2) \\<and>\n             P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))", "by auto"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<forall>x1 x2.\n        \\<exists>y1 y2.\n           f x1 x2 = (y1, y2) \\<and> P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PredicatePairFunctions2: \nfixes\n  P::\"'a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> 'd \\<Rightarrow> bool\"\nassumes\n  A1: \"\\<forall>x1 x2 . \\<exists>y1 y2 . (P x1 x2 y1 y2)\"\nobtains f1 f2  where\n  \"\\<forall>x1 x2 . \\<exists>y1 y2 .\n    (f1 x1 x2) = y1 \\<and> (f2 x1 x2) = y2 \n    \\<and> (P x1 x2 (f1 x1 x2) (f2 x1 x2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<forall>x1 x2.\n           \\<exists>y1 y2.\n              f1 x1 x2 = y1 \\<and>\n              f2 x1 x2 = y2 \\<and>\n              P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof (cases thesis, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f1 f2.\n                \\<forall>x1 x2.\n                   P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n                False;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume ass: \"\\<And>f1 f2. \\<forall>x1 x2. P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow> False\""], ["proof (state)\nthis:\n  \\<forall>x1 x2. P x1 x2 (?f1.0 x1 x2) (?f2.0 x1 x2) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f1 f2.\n                \\<forall>x1 x2.\n                   P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n                False;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "obtain f where F: \"\\<forall>x1 x2. \\<exists>y1 y2. f x1 x2 = (y1, y2) \\<and> P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>x1 x2.\n           \\<exists>y1 y2.\n              f x1 x2 = (y1, y2) \\<and>\n              P x1 x2 (fst (f x1 x2)) (snd (f x1 x2)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using PredicatePairFunction[OF A1]"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>x1 x2.\n        \\<exists>y1 y2.\n           f x1 x2 = (y1, y2) \\<and> P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>x1 x2.\n           \\<exists>y1 y2.\n              f x1 x2 = (y1, y2) \\<and>\n              P x1 x2 (fst (f x1 x2)) (snd (f x1 x2)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>x1 x2.\n     \\<exists>y1 y2.\n        f x1 x2 = (y1, y2) \\<and> P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f1 f2.\n                \\<forall>x1 x2.\n                   P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n                False;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "define f1 where \"f1 x1 x2 = fst (f x1 x2)\" for x1 x2"], ["proof (state)\nthis:\n  f1 ?x1.0 ?x2.0 = fst (f ?x1.0 ?x2.0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f1 f2.\n                \\<forall>x1 x2.\n                   P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n                False;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "define f2 where \"f2 x1 x2 = snd (f x1 x2)\" for x1 x2"], ["proof (state)\nthis:\n  f2 ?x1.0 ?x2.0 = snd (f ?x1.0 ?x2.0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f1 f2.\n                \\<forall>x1 x2.\n                   P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n                False;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using ass[of f1 f2] F"], ["proof (prove)\nusing this:\n  \\<forall>x1 x2. P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow> False\n  \\<forall>x1 x2.\n     \\<exists>y1 y2.\n        f x1 x2 = (y1, y2) \\<and> P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))\n\ngoal (1 subgoal):\n 1. False", "unfolding f1_def f2_def"], ["proof (prove)\nusing this:\n  \\<forall>x1 x2. P x1 x2 (fst (f x1 x2)) (snd (f x1 x2)) \\<Longrightarrow>\n  False\n  \\<forall>x1 x2.\n     \\<exists>y1 y2.\n        f x1 x2 = (y1, y2) \\<and> P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PredicatePairFunctions2Inv: \nfixes\n  P::\"'a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> 'd \\<Rightarrow> bool\"\nassumes\n  A1: \"\\<forall>x1 x2 . \\<exists>y1 y2 . (P x1 x2 y1 y2)\"\nobtains f1 f2  where\n  \"\\<forall>x1 x2 . (P x1 x2 (f1 x1 x2) (f2 x1 x2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<forall>x1 x2. P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using PredicatePairFunctions2[OF A1]"], ["proof (prove)\nusing this:\n  (\\<And>f1 f2.\n      \\<forall>x1 x2.\n         \\<exists>y1 y2.\n            f1 x1 x2 = y1 \\<and>\n            f2 x1 x2 = y2 \\<and>\n            P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<forall>x1 x2. P x1 x2 (f1 x1 x2) (f2 x1 x2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma SmallerMultipleStepsWithLimit:\nfixes\n  k A limit\nassumes\n  \"\\<forall> n \\<ge> limit . (A (Suc n)) < (A n)\"\nshows\n  \"\\<forall> n \\<ge> limit . (A (n + k)) \\<le> (A n) - k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k", "proof(induct k,auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k;\n        limit \\<le> n\\<rbrakk>\n       \\<Longrightarrow> A (Suc (n + k)) \\<le> A n - Suc k", "fix n k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k;\n        limit \\<le> n\\<rbrakk>\n       \\<Longrightarrow> A (Suc (n + k)) \\<le> A n - Suc k", "assume IH: \"\\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k\" \"limit \\<le> n\""], ["proof (state)\nthis:\n  \\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k\n  limit \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k;\n        limit \\<le> n\\<rbrakk>\n       \\<Longrightarrow> A (Suc (n + k)) \\<le> A n - Suc k", "hence \"A (Suc (n + k)) < A (n + k)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k\n  limit \\<le> n\n\ngoal (1 subgoal):\n 1. A (Suc (n + k)) < A (n + k)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k\n  limit \\<le> n\n  \\<forall>n\\<ge>limit. A (Suc n) < A n\n\ngoal (1 subgoal):\n 1. A (Suc (n + k)) < A (n + k)", "by simp"], ["proof (state)\nthis:\n  A (Suc (n + k)) < A (n + k)\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k;\n        limit \\<le> n\\<rbrakk>\n       \\<Longrightarrow> A (Suc (n + k)) \\<le> A n - Suc k", "hence \"A (Suc (n + k)) < A n - k\""], ["proof (prove)\nusing this:\n  A (Suc (n + k)) < A (n + k)\n\ngoal (1 subgoal):\n 1. A (Suc (n + k)) < A n - k", "using IH"], ["proof (prove)\nusing this:\n  A (Suc (n + k)) < A (n + k)\n  \\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k\n  limit \\<le> n\n\ngoal (1 subgoal):\n 1. A (Suc (n + k)) < A n - k", "by auto"], ["proof (state)\nthis:\n  A (Suc (n + k)) < A n - k\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<forall>n\\<ge>limit. A (n + k) \\<le> A n - k;\n        limit \\<le> n\\<rbrakk>\n       \\<Longrightarrow> A (Suc (n + k)) \\<le> A n - Suc k", "thus \"A (Suc (n + k)) \\<le> A n - Suc k\""], ["proof (prove)\nusing this:\n  A (Suc (n + k)) < A n - k\n\ngoal (1 subgoal):\n 1. A (Suc (n + k)) \\<le> A n - Suc k", "by (metis Suc_lessI add_Suc_right add_diff_cancel_left' \n       less_diff_conv less_or_eq_imp_le add.commute)"], ["proof (state)\nthis:\n  A (Suc (n + k)) \\<le> A n - Suc k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PrefixSameOnLow:\nfixes\n  l1 l2\nassumes\n  \"prefixList l1 l2\"\nshows\n  \"\\<forall> index < length l1 . l1 ! index = l2 ! index\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>index<length l1. l1 ! index = l2 ! index", "using assms"], ["proof (prove)\nusing this:\n  prefixList l1 l2\n\ngoal (1 subgoal):\n 1. \\<forall>index<length l1. l1 ! index = l2 ! index", "proof(induct rule: prefixList.induct, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xb x index.\n       \\<lbrakk>prefixList xa xb;\n        \\<forall>index<length xa. xa ! index = xb ! index; prefixList l1 l2;\n        index < Suc (length xa)\\<rbrakk>\n       \\<Longrightarrow> (x # xa) ! index = (x # xb) ! index", "fix xa xb ::\"'a list\" and x index"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xb x index.\n       \\<lbrakk>prefixList xa xb;\n        \\<forall>index<length xa. xa ! index = xb ! index; prefixList l1 l2;\n        index < Suc (length xa)\\<rbrakk>\n       \\<Longrightarrow> (x # xa) ! index = (x # xb) ! index", "assume AssumpProof: \"prefixList xa xb\" \n        \"\\<forall>index < length xa. xa ! index = xb ! index\"\n        \"prefixList l1 l2\" \"index < Suc (length xa)\""], ["proof (state)\nthis:\n  prefixList xa xb\n  \\<forall>index<length xa. xa ! index = xb ! index\n  prefixList l1 l2\n  index < Suc (length xa)\n\ngoal (1 subgoal):\n 1. \\<And>xa xb x index.\n       \\<lbrakk>prefixList xa xb;\n        \\<forall>index<length xa. xa ! index = xb ! index; prefixList l1 l2;\n        index < Suc (length xa)\\<rbrakk>\n       \\<Longrightarrow> (x # xa) ! index = (x # xb) ! index", "show \"(x # xa) ! index = (x # xb) ! index\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xa) ! index = (x # xb) ! index", "using AssumpProof"], ["proof (prove)\nusing this:\n  prefixList xa xb\n  \\<forall>index<length xa. xa ! index = xb ! index\n  prefixList l1 l2\n  index < Suc (length xa)\n\ngoal (1 subgoal):\n 1. (x # xa) ! index = (x # xb) ! index", "proof(cases \"index = 0\", auto)"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x # xa) ! index = (x # xb) ! index\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma KeepProperty:\nfixes\n  P Q low\nassumes\n  \"\\<forall> i \\<ge> low . P i \\<longrightarrow> (P (Suc i) \\<and> Q i)\" \"P low\"\nshows\n  \"\\<forall> i \\<ge> low . Q i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>low. Q i", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i) \\<and> Q i\n  P low\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>low. Q i", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i\\<ge>low.\n                   P i \\<longrightarrow> P (Suc i) \\<and> Q i;\n        P low; low \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Q i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i\\<ge>low.\n                   P i \\<longrightarrow> P (Suc i) \\<and> Q i;\n        P low; low \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Q i", "assume Assump:\n    \"\\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i) \\<and> Q i\"\n    \"P low\"\n    \"low \\<le> i\""], ["proof (state)\nthis:\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i) \\<and> Q i\n  P low\n  low \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i\\<ge>low.\n                   P i \\<longrightarrow> P (Suc i) \\<and> Q i;\n        P low; low \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Q i", "hence \"\\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i)\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i) \\<and> Q i\n  P low\n  low \\<le> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i)", "by blast"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i\\<ge>low.\n                   P i \\<longrightarrow> P (Suc i) \\<and> Q i;\n        P low; low \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Q i", "hence \"\\<forall> i \\<ge> low . P i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>low. P i", "using Assump(2)"], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i)\n  P low\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>low. P i", "by (metis dec_induct)"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>low. P i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i\\<ge>low.\n                   P i \\<longrightarrow> P (Suc i) \\<and> Q i;\n        P low; low \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Q i", "hence \"P i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>low. P i\n\ngoal (1 subgoal):\n 1. P i", "using Assump(3)"], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>low. P i\n  low \\<le> i\n\ngoal (1 subgoal):\n 1. P i", "by blast"], ["proof (state)\nthis:\n  P i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i\\<ge>low.\n                   P i \\<longrightarrow> P (Suc i) \\<and> Q i;\n        P low; low \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Q i", "thus \"Q i\""], ["proof (prove)\nusing this:\n  P i\n\ngoal (1 subgoal):\n 1. Q i", "using Assump"], ["proof (prove)\nusing this:\n  P i\n  \\<forall>i\\<ge>low. P i \\<longrightarrow> P (Suc i) \\<and> Q i\n  P low\n  low \\<le> i\n\ngoal (1 subgoal):\n 1. Q i", "by blast"], ["proof (state)\nthis:\n  Q i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ListLenDrop: \nfixes\n  i la lb\nassumes\n  \"i < length lb\"\n  \"i \\<ge> la\"\nshows\n  \"lb ! i \\<in> set (drop la lb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lb ! i \\<in> set (drop la lb)", "using assms"], ["proof (prove)\nusing this:\n  i < length lb\n  la \\<le> i\n\ngoal (1 subgoal):\n 1. lb ! i \\<in> set (drop la lb)", "by (metis Cons_nth_drop_Suc in_set_member member_rec(1) \n       set_drop_subset_set_drop rev_subsetD)"], ["", "lemma DropToShift:\nfixes\n  l i list\nassumes\n  \"l + i < length list\"\nshows\n  \"(drop l list) ! i = list ! (l + i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop l list ! i = list ! (l + i)", "using assms"], ["proof (prove)\nusing this:\n  l + i < length list\n\ngoal (1 subgoal):\n 1. drop l list ! i = list ! (l + i)", "by (induct l, auto)"], ["", "lemma SetToIndex:\nfixes\n  a and liste::\"'a list\"\nassumes\n  AssumpSetToIndex: \"a \\<in> set liste\"\nshows\n  \"\\<exists> index < length liste . a = liste ! index\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>index<length liste. a = liste ! index", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>index<length liste. a = liste ! index", "have LenInduct:\n    \"\\<And>xs. \\<forall>ys. length ys < length xs \\<longrightarrow> a \\<in> set ys \n          \\<longrightarrow> (\\<exists>index<length ys. a = ys ! index) \n          \\<Longrightarrow> a \\<in> set xs \\<longrightarrow> (\\<exists>index<length xs. a = xs ! index)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          a \\<in> set ys \\<longrightarrow>\n          (\\<exists>index<length ys. a = ys ! index) \\<Longrightarrow>\n       a \\<in> set xs \\<longrightarrow>\n       (\\<exists>index<length xs. a = xs ! index)", "proof(auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "assume AssumpLengthInduction: \n      \"\\<forall>ys. length ys < length xs \\<longrightarrow> a \\<in> set ys \n      \\<longrightarrow> (\\<exists>index<length ys. a = ys ! index)\" \"a \\<in> set xs\""], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     a \\<in> set ys \\<longrightarrow>\n     (\\<exists>index<length ys. a = ys ! index)\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "have \"\\<exists> x xs' . xs = x#xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x xs'. xs = x # xs'", "using AssumpLengthInduction(2)"], ["proof (prove)\nusing this:\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<exists>x xs'. xs = x # xs'", "by (metis ListMem.cases ListMem_iff)"], ["proof (state)\nthis:\n  \\<exists>x xs'. xs = x # xs'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "then"], ["proof (chain)\npicking this:\n  \\<exists>x xs'. xs = x # xs'", "obtain x xs' where XSSplit: \"xs = x#xs'\""], ["proof (prove)\nusing this:\n  \\<exists>x xs'. xs = x # xs'\n\ngoal (1 subgoal):\n 1. (\\<And>x xs'. xs = x # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs = x # xs'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "hence \"a \\<in> insert x (set xs')\""], ["proof (prove)\nusing this:\n  xs = x # xs'\n\ngoal (1 subgoal):\n 1. a \\<in> insert x (set xs')", "using set_simps AssumpLengthInduction"], ["proof (prove)\nusing this:\n  xs = x # xs'\n  set [] = {}\n  set (?x21.0 # ?x22.0) = insert ?x21.0 (set ?x22.0)\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     a \\<in> set ys \\<longrightarrow>\n     (\\<exists>index<length ys. a = ys ! index)\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. a \\<in> insert x (set xs')", "by simp"], ["proof (state)\nthis:\n  a \\<in> insert x (set xs')\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "hence \"a = x \\<or> a \\<in> set xs'\""], ["proof (prove)\nusing this:\n  a \\<in> insert x (set xs')\n\ngoal (1 subgoal):\n 1. a = x \\<or> a \\<in> set xs'", "by simp"], ["proof (state)\nthis:\n  a = x \\<or> a \\<in> set xs'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   a \\<in> set ys \\<longrightarrow>\n                   (\\<exists>index<length ys. a = ys ! index);\n        a \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "thus \"\\<exists>index<length xs. a = xs ! index\""], ["proof (prove)\nusing this:\n  a = x \\<or> a \\<in> set xs'\n\ngoal (1 subgoal):\n 1. \\<exists>index<length xs. a = xs ! index", "proof(cases \"a = x\",auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. a = x \\<Longrightarrow> \\<exists>index<length xs. x = xs ! index\n 2. \\<lbrakk>a \\<in> set xs'; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "show \"\\<exists>index<length xs. x = xs ! index\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>index<length xs. x = xs ! index", "using XSSplit"], ["proof (prove)\nusing this:\n  xs = x # xs'\n\ngoal (1 subgoal):\n 1. \\<exists>index<length xs. x = xs ! index", "by auto"], ["proof (state)\nthis:\n  \\<exists>index<length xs. x = xs ! index\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set xs'; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set xs'; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "assume AssumpCases: \"a \\<in> set xs'\" \"a \\<noteq> x\""], ["proof (state)\nthis:\n  a \\<in> set xs'\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set xs'; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "have \"length xs' < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs' < length xs", "using XSSplit"], ["proof (prove)\nusing this:\n  xs = x # xs'\n\ngoal (1 subgoal):\n 1. length xs' < length xs", "by simp"], ["proof (state)\nthis:\n  length xs' < length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set xs'; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "hence \"\\<exists>index<length xs'. a = xs' ! index\""], ["proof (prove)\nusing this:\n  length xs' < length xs\n\ngoal (1 subgoal):\n 1. \\<exists>index<length xs'. a = xs' ! index", "using AssumpLengthInduction(1) AssumpCases(1)"], ["proof (prove)\nusing this:\n  length xs' < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     a \\<in> set ys \\<longrightarrow>\n     (\\<exists>index<length ys. a = ys ! index)\n  a \\<in> set xs'\n\ngoal (1 subgoal):\n 1. \\<exists>index<length xs'. a = xs' ! index", "by simp"], ["proof (state)\nthis:\n  \\<exists>index<length xs'. a = xs' ! index\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set xs'; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>index<length xs. a = xs ! index", "thus \"\\<exists>index<length xs. a = xs ! index\""], ["proof (prove)\nusing this:\n  \\<exists>index<length xs'. a = xs' ! index\n\ngoal (1 subgoal):\n 1. \\<exists>index<length xs. a = xs ! index", "using XSSplit"], ["proof (prove)\nusing this:\n  \\<exists>index<length xs'. a = xs' ! index\n  xs = x # xs'\n\ngoal (1 subgoal):\n 1. \\<exists>index<length xs. a = xs ! index", "by auto"], ["proof (state)\nthis:\n  \\<exists>index<length xs. a = xs ! index\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>index<length xs. a = xs ! index\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length ?xs \\<longrightarrow>\n     a \\<in> set ys \\<longrightarrow>\n     (\\<exists>index<length ys. a = ys ! index) \\<Longrightarrow>\n  a \\<in> set ?xs \\<longrightarrow>\n  (\\<exists>index<length ?xs. a = ?xs ! index)\n\ngoal (1 subgoal):\n 1. \\<exists>index<length liste. a = liste ! index", "thus \"\\<exists> index < length liste . a = liste ! index\""], ["proof (prove)\nusing this:\n  \\<forall>ys.\n     length ys < length ?xs \\<longrightarrow>\n     a \\<in> set ys \\<longrightarrow>\n     (\\<exists>index<length ys. a = ys ! index) \\<Longrightarrow>\n  a \\<in> set ?xs \\<longrightarrow>\n  (\\<exists>index<length ?xs. a = ?xs ! index)\n\ngoal (1 subgoal):\n 1. \\<exists>index<length liste. a = liste ! index", "using length_induct[of \n      \"\\<lambda>l. a \\<in> set l \\<longrightarrow> (\\<exists> index < length l . a = l ! index)\" \"liste\"] \n    AssumpSetToIndex"], ["proof (prove)\nusing this:\n  \\<forall>ys.\n     length ys < length ?xs \\<longrightarrow>\n     a \\<in> set ys \\<longrightarrow>\n     (\\<exists>index<length ys. a = ys ! index) \\<Longrightarrow>\n  a \\<in> set ?xs \\<longrightarrow>\n  (\\<exists>index<length ?xs. a = ?xs ! index)\n  (\\<And>xs.\n      \\<forall>ys.\n         length ys < length xs \\<longrightarrow>\n         a \\<in> set ys \\<longrightarrow>\n         (\\<exists>index<length ys. a = ys ! index) \\<Longrightarrow>\n      a \\<in> set xs \\<longrightarrow>\n      (\\<exists>index<length xs. a = xs ! index)) \\<Longrightarrow>\n  a \\<in> set liste \\<longrightarrow>\n  (\\<exists>index<length liste. a = liste ! index)\n  a \\<in> set liste\n\ngoal (1 subgoal):\n 1. \\<exists>index<length liste. a = liste ! index", "by blast"], ["proof (state)\nthis:\n  \\<exists>index<length liste. a = liste ! index\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DropToIndex:\nfixes\n  a::\"'a\" and l liste \nassumes\n  AssumpDropToIndex: \"a \\<in> set (drop l liste)\"\nshows\n  \"\\<exists> i \\<ge> l . i < length liste \\<and> a = liste ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "have \"\\<exists> index < length (drop l liste) . a = (drop l liste) ! index\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>index<length (drop l liste). a = drop l liste ! index", "using AssumpDropToIndex SetToIndex[of \"a\" \"drop l liste\"]"], ["proof (prove)\nusing this:\n  a \\<in> set (drop l liste)\n  a \\<in> set (drop l liste) \\<Longrightarrow>\n  \\<exists>index<length (drop l liste). a = drop l liste ! index\n\ngoal (1 subgoal):\n 1. \\<exists>index<length (drop l liste). a = drop l liste ! index", "by blast"], ["proof (state)\nthis:\n  \\<exists>index<length (drop l liste). a = drop l liste ! index\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "then"], ["proof (chain)\npicking this:\n  \\<exists>index<length (drop l liste). a = drop l liste ! index", "obtain index where Index: \"index < length (drop l liste)\" \n    \"a = (drop l liste) ! index\""], ["proof (prove)\nusing this:\n  \\<exists>index<length (drop l liste). a = drop l liste ! index\n\ngoal (1 subgoal):\n 1. (\\<And>index.\n        \\<lbrakk>index < length (drop l liste);\n         a = drop l liste ! index\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  index < length (drop l liste)\n  a = drop l liste ! index\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "have \"l + index < length liste\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l + index < length liste", "using Index(1)"], ["proof (prove)\nusing this:\n  index < length (drop l liste)\n\ngoal (1 subgoal):\n 1. l + index < length liste", "by (metis length_drop less_diff_conv add.commute)"], ["proof (state)\nthis:\n  l + index < length liste\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "hence \"a = liste ! (l + index)\""], ["proof (prove)\nusing this:\n  l + index < length liste\n\ngoal (1 subgoal):\n 1. a = liste ! (l + index)", "using DropToShift[of \"l\" \"index\"] Index(2)"], ["proof (prove)\nusing this:\n  l + index < length liste\n  l + index < length ?list \\<Longrightarrow>\n  drop l ?list ! index = ?list ! (l + index)\n  a = drop l liste ! index\n\ngoal (1 subgoal):\n 1. a = liste ! (l + index)", "by blast"], ["proof (state)\nthis:\n  a = liste ! (l + index)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "thus \"\\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i\""], ["proof (prove)\nusing this:\n  a = liste ! (l + index)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i", "by (metis \\<open>l + index < length liste\\<close> le_add1)"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>l. i < length liste \\<and> a = liste ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}