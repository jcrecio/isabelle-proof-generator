{"file_name": "/home/qj213/afp-2021-10-22/thys/Saturation_Framework_Extensions/FO_Ordered_Resolution_Prover_Revisited.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Saturation_Framework_Extensions", "problem_names": ["lemmas old_infer_from_def = Inference_System.infer_from_def", "lemma set_zip_replicate_right[simp]:\n  \"set (zip xs (replicate (length xs) y)) = (\\<lambda>x. (x, y)) ` set xs\"", "lemma G_Inf_have_prems: \"\\<iota> \\<in> G_Inf M \\<Longrightarrow> prems_of \\<iota> \\<noteq> []\"", "lemma G_Inf_reductive: \"\\<iota> \\<in> G_Inf M \\<Longrightarrow> concl_of \\<iota> < main_prem_of \\<iota>\"", "lemmas \\<G>_F_def = grounding_of_cls_def", "lemmas \\<G>_Fset_def = grounding_of_clss_def", "lemma F_Inf_have_prems: \"\\<iota> \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota> \\<noteq> []\"", "lemma F_entails_\\<G>_iff: \"N1 \\<TTurnstile>\\<G>e N2 \\<longleftrightarrow> \\<Union> (\\<G>_F ` N1) \\<TTurnstile>e \\<Union> (\\<G>_F ` N2)\"", "lemma true_Union_grounding_of_cls_iff:\n  \"I \\<TTurnstile>s (\\<Union>C \\<in> N. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<longleftrightarrow> (\\<forall>\\<sigma>. is_ground_subst \\<sigma> \\<longrightarrow> I \\<TTurnstile>s N \\<cdot>cs \\<sigma>)\"", "lemma G_Inf_overapprox_F_Inf: \"\\<iota>\\<^sub>0 \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow> \\<exists>\\<iota> \\<in> F.Inf_from M. \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\"", "lemma irrefl_L_Prec: \"\\<not> l \\<sqsubset>l l\"", "lemma trans_L_Prec: \"l1 \\<sqsubset>l l2 \\<Longrightarrow> l2 \\<sqsubset>l l3 \\<Longrightarrow> l1 \\<sqsubset>l l3\"", "lemma wf_L_Prec: \"wfP (\\<sqsubset>l)\"", "lemma FL_Red_F_eq:\n  \"FL.Red_F N =\n   {C. \\<forall>D \\<in> \\<G>_F (fst C). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or> (\\<exists>E \\<in> N. E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}\"", "lemma mem_FL_Red_F_because_G_Red_F:\n  \"(\\<forall>D \\<in> \\<G>_F (fst Cl). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N))) \\<Longrightarrow> Cl \\<in> FL.Red_F N\"", "lemma mem_FL_Red_F_because_Prec_FL:\n  \"(\\<forall>D \\<in> \\<G>_F (fst Cl). \\<exists>El \\<in> N. El \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst El)) \\<Longrightarrow> Cl \\<in> FL.Red_F N\"", "lemma image_hd_lclss_of_state[simp]: \"fst ` lclss_of_state St = clss_of_state St\"", "lemma insert_lclss_of_state[simp]:\n  \"insert (C, New) (lclss_of_state (N, P, Q)) = lclss_of_state (N \\<union> {C}, P, Q)\"\n  \"insert (C, Processed) (lclss_of_state (N, P, Q)) = lclss_of_state (N, P \\<union> {C}, Q)\"\n  \"insert (C, Old) (lclss_of_state (N, P, Q)) = lclss_of_state (N, P, Q \\<union> {C})\"", "lemma union_lclss_of_state[simp]:\n  \"lclss_of_state (N1, P1, Q1) \\<union> lclss_of_state (N2, P2, Q2) =\n   lclss_of_state (N1 \\<union> N2, P1 \\<union> P2, Q1 \\<union> Q2)\"", "lemma mem_lclss_of_state[simp]:\n  \"(C, New) \\<in> lclss_of_state (N, P, Q) \\<longleftrightarrow> C \\<in> N\"\n  \"(C, Processed) \\<in> lclss_of_state (N, P, Q) \\<longleftrightarrow> C \\<in> P\"\n  \"(C, Old) \\<in> lclss_of_state (N, P, Q) \\<longleftrightarrow> C \\<in> Q\"", "lemma lclss_Liminf_commute:\n  \"Liminf_llist (lmap lclss_of_state Sts) = lclss_of_state (Liminf_state Sts)\"", "lemma GC_tautology_step:\n  assumes tauto: \"Neg A \\<in># C\" \"Pos A \\<in># C\"\n  shows \"lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC lclss_of_state (N, P, Q)\"", "lemma GC_subsumption_step:\n  assumes\n    d_in: \"Dl \\<in> N\" and\n    d_sub_c: \"strictly_subsumes (fst Dl) (fst Cl) \\<or> subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\"\n  shows \"N \\<union> {Cl} \\<leadsto>GC N\"", "lemma GC_reduction_step:\n  assumes\n    young: \"snd Dl \\<noteq> Old\" and\n    d_sub_c: \"fst Dl \\<subset># fst Cl\"\n  shows \"N \\<union> {Cl} \\<leadsto>GC N \\<union> {Dl}\"", "lemma GC_processing_step: \"N \\<union> {(C, New)} \\<leadsto>GC N \\<union> {(C, Processed)}\"", "lemma old_inferences_between_eq_new_inferences_between:\n  \"old_concl_of ` inference_system.inferences_between (ord_FO_\\<Gamma> S) N C =\n   concl_of ` F.Inf_between N {C}\" (is \"?rp = ?f\")", "lemma GC_inference_step:\n  assumes\n    young: \"l \\<noteq> Old\" and\n    no_active: \"FL.active_subset M = {}\" and\n    m_sup: \"fst ` M \\<supseteq> old_concl_of ` inference_system.inferences_between (ord_FO_\\<Gamma> S)\n      (fst ` FL.active_subset N) C\"\n  shows \"N \\<union> {(C, l)} \\<leadsto>GC N \\<union> {(C, Old)} \\<union> M\"", "lemma RP_step_imp_GC_step: \"St \\<leadsto>RP St' \\<Longrightarrow> lclss_of_state St \\<leadsto>GC lclss_of_state St'\"", "lemma RP_derivation_imp_GC_derivation: \"chain (\\<leadsto>RP) Sts \\<Longrightarrow> chain (\\<leadsto>GC) (lmap lclss_of_state Sts)\"", "lemma RP_step_imp_derive_step: \"St \\<leadsto>RP St' \\<Longrightarrow> lclss_of_state St \\<rhd>L lclss_of_state St'\"", "lemma RP_derivation_imp_derive_derivation:\n  \"chain (\\<leadsto>RP) Sts \\<Longrightarrow> chain (\\<rhd>L) (lmap lclss_of_state Sts)\"", "theorem RP_sound_new_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    bot_in: \"{#} \\<in> clss_of_state (Liminf_state Sts)\"\n  shows \"clss_of_state (lhd Sts) \\<TTurnstile>\\<G>e {{#}}\"", "theorem RP_saturated_if_fair_new_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    init: \"FL.active_subset (lclss_of_state (lhd Sts)) = {}\" and\n    final: \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\"\n  shows \"FL.saturated (Liminf_llist (lmap lclss_of_state Sts))\"", "lemma old_fair_imp_new_fair:\n  assumes\n    nnul: \"\\<not> lnull Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\"\n  shows\n    \"FL.active_subset (lclss_of_state (lhd Sts)) = {}\" and\n    \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\"", "lemma old_redundant_infer_iff:\n  \"src.redundant_infer N \\<gamma> \\<longleftrightarrow>\n   (\\<exists>DD. DD \\<subseteq> N \\<and> DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e {old_concl_of \\<gamma>}\n      \\<and> (\\<forall>D \\<in> DD. D < old_main_prem_of \\<gamma>))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma new_redundant_infer_imp_old_redundant_infer:\n  \"G.redundant_infer N \\<iota> \\<Longrightarrow> src.redundant_infer N (old_infer_of \\<iota>)\"", "lemma saturated_imp_saturated_RP:\n  assumes\n    satur: \"FL.saturated (Liminf_llist (lmap lclss_of_state Sts))\" and\n    no_passive: \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\"\n  shows \"src.saturated_upto Sts (grounding_of_state (Liminf_state Sts))\"", "theorem RP_sound_old_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    bot_in: \"{#} \\<in> clss_of_state (Liminf_state Sts)\"\n  shows \"\\<not> satisfiable (grounding_of_state (lhd Sts))\"", "theorem RP_saturated_if_fair_old_statement_altered:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\"\n  shows \"src.saturated_upto Sts (grounding_of_state (Liminf_state Sts))\""], "translations": [["", "lemmas old_infer_from_def = Inference_System.infer_from_def"], ["", "subsection \\<open>Library\\<close>"], ["", "lemma set_zip_replicate_right[simp]:\n  \"set (zip xs (replicate (length xs) y)) = (\\<lambda>x. (x, y)) ` set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (zip xs (replicate (length xs) y)) = (\\<lambda>x. (x, y)) ` set xs", "by (induct xs) auto"], ["", "subsection \\<open>Ground Layer\\<close>"], ["", "context FO_resolution_prover\nbegin"], ["", "no_notation RP (infix \"\\<leadsto>\" 50)"], ["", "notation RP (infix \"\\<leadsto>RP\" 50)"], ["", "interpretation gr: ground_resolution_with_selection \"S_M S M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_resolution_with_selection (S_M S M)", "using selection_axioms"], ["proof (prove)\nusing this:\n  selection S\n\ngoal (1 subgoal):\n 1. ground_resolution_with_selection (S_M S M)", "by unfold_locales (fact S_M_selects_subseteq S_M_selects_neg_lits)+"], ["", "definition G_Inf :: \"'a clause set \\<Rightarrow> 'a clause inference set\" where\n  \"G_Inf M = {Infer (CAs @ [DA]) E |CAs DA AAs As E. gr.ord_resolve M CAs DA AAs As E}\""], ["", "lemma G_Inf_have_prems: \"\\<iota> \\<in> G_Inf M \\<Longrightarrow> prems_of \\<iota> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> G_Inf M \\<Longrightarrow> prems_of \\<iota> \\<noteq> []", "unfolding G_Inf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              gr.ord_resolve M CAs DA AAs As E} \\<Longrightarrow>\n    prems_of \\<iota> \\<noteq> []", "by auto"], ["", "lemma G_Inf_reductive: \"\\<iota> \\<in> G_Inf M \\<Longrightarrow> concl_of \\<iota> < main_prem_of \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n    concl_of \\<iota> < main_prem_of \\<iota>", "unfolding G_Inf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              gr.ord_resolve M CAs DA AAs As E} \\<Longrightarrow>\n    concl_of \\<iota> < main_prem_of \\<iota>", "by (auto dest: gr.ord_resolve_reductive)"], ["", "interpretation G: sound_inference_system \"G_Inf M\" \"{{#}}\" \"(\\<TTurnstile>e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Soundness.sound_inference_system (G_Inf M) {{#}} (\\<TTurnstile>e)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "fix \\<iota>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "assume i_in: \"\\<iota> \\<in> G_Inf M\""], ["proof (state)\nthis:\n  \\<iota> \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "moreover"], ["proof (state)\nthis:\n  \\<iota> \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "{"], ["proof (state)\nthis:\n  \\<iota> \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "fix I"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "assume I_ent_prems: \"I \\<TTurnstile>s set (prems_of \\<iota>)\""], ["proof (state)\nthis:\n  I \\<TTurnstile>s set (prems_of \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "obtain CAs AAs As where\n      the_inf: \"gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As (concl_of \\<iota>)\" and\n      CAs: \"CAs = side_prems_of \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As.\n        \\<lbrakk>gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As\n                  (concl_of \\<iota>);\n         CAs = side_prems_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using i_in"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As.\n        \\<lbrakk>gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As\n                  (concl_of \\<iota>);\n         CAs = side_prems_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G_Inf_def"], ["proof (prove)\nusing this:\n  \\<iota>\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As E.\n            uu_ = Infer (CAs @ [DA]) E \\<and>\n            gr.ord_resolve M CAs DA AAs As E}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As.\n        \\<lbrakk>gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As\n                  (concl_of \\<iota>);\n         CAs = side_prems_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As (concl_of \\<iota>)\n  CAs = side_prems_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "then"], ["proof (chain)\npicking this:\n  gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As (concl_of \\<iota>)\n  CAs = side_prems_of \\<iota>", "have \"I \\<TTurnstile> concl_of \\<iota>\""], ["proof (prove)\nusing this:\n  gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As (concl_of \\<iota>)\n  CAs = side_prems_of \\<iota>\n\ngoal (1 subgoal):\n 1. I \\<TTurnstile> concl_of \\<iota>", "using gr.ord_resolve_sound[of M CAs \"main_prem_of \\<iota>\" AAs As \"concl_of \\<iota>\" I]"], ["proof (prove)\nusing this:\n  gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As (concl_of \\<iota>)\n  CAs = side_prems_of \\<iota>\n  \\<lbrakk>gr.ord_resolve M CAs (main_prem_of \\<iota>) AAs As\n            (concl_of \\<iota>);\n   I \\<TTurnstile>m mset CAs; I \\<TTurnstile> main_prem_of \\<iota>\\<rbrakk>\n  \\<Longrightarrow> I \\<TTurnstile> concl_of \\<iota>\n\ngoal (1 subgoal):\n 1. I \\<TTurnstile> concl_of \\<iota>", "by (metis I_ent_prems G_Inf_have_prems i_in insert_is_Un set_mset_mset set_prems_of\n          true_clss_insert true_clss_set_mset)"], ["proof (state)\nthis:\n  I \\<TTurnstile> concl_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "}"], ["proof (state)\nthis:\n  ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<Longrightarrow>\n  ?I2 \\<TTurnstile> concl_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> G_Inf M \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> G_Inf M\n  ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<Longrightarrow>\n  ?I2 \\<TTurnstile> concl_of \\<iota>", "show \"set (inference.prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> G_Inf M\n  ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<Longrightarrow>\n  ?I2 \\<TTurnstile> concl_of \\<iota>\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}", "by simp"], ["proof (state)\nthis:\n  set (prems_of \\<iota>) \\<TTurnstile>e {concl_of \\<iota>}\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation G: clausal_counterex_reducing_inference_system \"G_Inf M\" \"gr.INTERP M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clausal_counterex_reducing_inference_system (G_Inf M) (gr.INTERP M)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "fix N D"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "assume\n    \"{#} \\<notin> N\" and\n    \"D \\<in> N\" and\n    \"\\<not> gr.INTERP M N \\<TTurnstile> D\" and\n    \"\\<And>C. C \\<in> N \\<Longrightarrow> \\<not> gr.INTERP M N \\<TTurnstile> C \\<Longrightarrow> D \\<le> C\""], ["proof (state)\nthis:\n  {#} \\<notin> N\n  D \\<in> N\n  \\<not> gr.INTERP M N \\<TTurnstile> D\n  \\<lbrakk>?C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> D \\<le> ?C\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "then"], ["proof (chain)\npicking this:\n  {#} \\<notin> N\n  D \\<in> N\n  \\<not> gr.INTERP M N \\<TTurnstile> D\n  \\<lbrakk>?C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> D \\<le> ?C", "obtain CAs AAs As E where\n    cas_in: \"set CAs \\<subseteq> N\" and\n    n_mod_cas: \"gr.INTERP M N \\<TTurnstile>m mset CAs\" and\n    ca_prod: \"\\<And>CA. CA \\<in> set CAs \\<Longrightarrow> gr.production M N CA \\<noteq> {}\" and\n    e_res: \"gr.ord_resolve M CAs D AAs As E\" and\n    n_nmod_e: \"\\<not> gr.INTERP M N \\<TTurnstile> E\" and\n    e_lt_d: \"E < D\""], ["proof (prove)\nusing this:\n  {#} \\<notin> N\n  D \\<in> N\n  \\<not> gr.INTERP M N \\<TTurnstile> D\n  \\<lbrakk>?C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> D \\<le> ?C\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N;\n         gr.INTERP M N \\<TTurnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow>\n            gr.production M N CA \\<noteq> {};\n         gr.ord_resolve M CAs D AAs As E;\n         \\<not> gr.INTERP M N \\<TTurnstile> E; E < D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gr.ord_resolve_counterex_reducing"], ["proof (prove)\nusing this:\n  {#} \\<notin> N\n  D \\<in> N\n  \\<not> gr.INTERP M N \\<TTurnstile> D\n  \\<lbrakk>?C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> D \\<le> ?C\n  \\<lbrakk>{#} \\<notin> ?N; ?DA \\<in> ?N;\n   \\<not> gr.INTERP ?M ?N \\<TTurnstile> ?DA;\n   \\<And>C.\n      \\<lbrakk>C \\<in> ?N; \\<not> gr.INTERP ?M ?N \\<TTurnstile> C\\<rbrakk>\n      \\<Longrightarrow> ?DA \\<le> C;\n   \\<And>CAs AAs As E.\n      \\<lbrakk>set CAs \\<subseteq> ?N;\n       gr.INTERP ?M ?N \\<TTurnstile>m mset CAs;\n       \\<And>CA.\n          CA \\<in> set CAs \\<Longrightarrow>\n          gr.production ?M ?N CA \\<noteq> {};\n       gr.ord_resolve ?M CAs ?DA AAs As E;\n       \\<not> gr.INTERP ?M ?N \\<TTurnstile> E; E < ?DA\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N;\n         gr.INTERP M N \\<TTurnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow>\n            gr.production M N CA \\<noteq> {};\n         gr.ord_resolve M CAs D AAs As E;\n         \\<not> gr.INTERP M N \\<TTurnstile> E; E < D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set CAs \\<subseteq> N\n  gr.INTERP M N \\<TTurnstile>m mset CAs\n  ?CA \\<in> set CAs \\<Longrightarrow> gr.production M N ?CA \\<noteq> {}\n  gr.ord_resolve M CAs D AAs As E\n  \\<not> gr.INTERP M N \\<TTurnstile> E\n  E < D\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "define \\<iota> where\n    \"\\<iota> = Infer (CAs @ [D]) E\""], ["proof (state)\nthis:\n  \\<iota> = Infer (CAs @ [D]) E\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"\\<iota> \\<in> G_Inf M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> G_Inf M", "unfolding \\<iota>_def G_Inf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (CAs @ [D]) E\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              gr.ord_resolve M CAs DA AAs As E}", "using e_res"], ["proof (prove)\nusing this:\n  gr.ord_resolve M CAs D AAs As E\n\ngoal (1 subgoal):\n 1. Infer (CAs @ [D]) E\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              gr.ord_resolve M CAs DA AAs As E}", "by auto"], ["proof (state)\nthis:\n  \\<iota> \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "moreover"], ["proof (state)\nthis:\n  \\<iota> \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"prems_of \\<iota> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prems_of \\<iota> \\<noteq> []", "unfolding \\<iota>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prems_of (Infer (CAs @ [D]) E) \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  prems_of \\<iota> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "moreover"], ["proof (state)\nthis:\n  prems_of \\<iota> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"main_prem_of \\<iota> = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. main_prem_of \\<iota> = D", "unfolding \\<iota>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. main_prem_of (Infer (CAs @ [D]) E) = D", "by simp"], ["proof (state)\nthis:\n  main_prem_of \\<iota> = D\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "moreover"], ["proof (state)\nthis:\n  main_prem_of \\<iota> = D\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"set (side_prems_of \\<iota>) \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (side_prems_of \\<iota>) \\<subseteq> N", "unfolding \\<iota>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (side_prems_of (Infer (CAs @ [D]) E)) \\<subseteq> N", "using cas_in"], ["proof (prove)\nusing this:\n  set CAs \\<subseteq> N\n\ngoal (1 subgoal):\n 1. set (side_prems_of (Infer (CAs @ [D]) E)) \\<subseteq> N", "by simp"], ["proof (state)\nthis:\n  set (side_prems_of \\<iota>) \\<subseteq> N\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "moreover"], ["proof (state)\nthis:\n  set (side_prems_of \\<iota>) \\<subseteq> N\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>)", "unfolding \\<iota>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gr.INTERP M N \\<TTurnstile>s set (side_prems_of (Infer (CAs @ [D]) E))", "using n_mod_cas ca_prod"], ["proof (prove)\nusing this:\n  gr.INTERP M N \\<TTurnstile>m mset CAs\n  ?CA \\<in> set CAs \\<Longrightarrow> gr.production M N ?CA \\<noteq> {}\n\ngoal (1 subgoal):\n 1. gr.INTERP M N \\<TTurnstile>s set (side_prems_of (Infer (CAs @ [D]) E))", "by (simp add: gr.productive_imp_INTERP true_clss_def)"], ["proof (state)\nthis:\n  gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "moreover"], ["proof (state)\nthis:\n  gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"\\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota>", "unfolding \\<iota>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gr.INTERP M N \\<TTurnstile> concl_of (Infer (CAs @ [D]) E)", "using n_nmod_e"], ["proof (prove)\nusing this:\n  \\<not> gr.INTERP M N \\<TTurnstile> E\n\ngoal (1 subgoal):\n 1. \\<not> gr.INTERP M N \\<TTurnstile> concl_of (Infer (CAs @ [D]) E)", "by simp"], ["proof (state)\nthis:\n  \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "moreover"], ["proof (state)\nthis:\n  \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "have \"concl_of \\<iota> < D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concl_of \\<iota> < D", "unfolding \\<iota>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. concl_of (Infer (CAs @ [D]) E) < D", "using e_lt_d"], ["proof (prove)\nusing this:\n  E < D\n\ngoal (1 subgoal):\n 1. concl_of (Infer (CAs @ [D]) E) < D", "by simp"], ["proof (state)\nthis:\n  concl_of \\<iota> < D\n\ngoal (1 subgoal):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N;\n        \\<not> gr.INTERP M N \\<TTurnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> gr.INTERP M N \\<TTurnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<iota>\\<in>G_Inf M.\n                            prems_of \\<iota> \\<noteq> [] \\<and>\n                            main_prem_of \\<iota> = D \\<and>\n                            set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n                            gr.INTERP M N \\<TTurnstile>s\n                            set (side_prems_of \\<iota>) \\<and>\n                            \\<not> gr.INTERP M N \\<TTurnstile>\n                                   concl_of \\<iota> \\<and>\n                            concl_of \\<iota> < D", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> G_Inf M\n  prems_of \\<iota> \\<noteq> []\n  main_prem_of \\<iota> = D\n  set (side_prems_of \\<iota>) \\<subseteq> N\n  gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>)\n  \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota>\n  concl_of \\<iota> < D", "show \"\\<exists>\\<iota> \\<in> G_Inf M. prems_of \\<iota> \\<noteq> [] \\<and> main_prem_of \\<iota> = D \\<and> set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n    gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>) \\<and> \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota> \\<and> concl_of \\<iota> < D\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> G_Inf M\n  prems_of \\<iota> \\<noteq> []\n  main_prem_of \\<iota> = D\n  set (side_prems_of \\<iota>) \\<subseteq> N\n  gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>)\n  \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota>\n  concl_of \\<iota> < D\n\ngoal (1 subgoal):\n 1. \\<exists>\\<iota>\\<in>G_Inf M.\n       prems_of \\<iota> \\<noteq> [] \\<and>\n       main_prem_of \\<iota> = D \\<and>\n       set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n       gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>) \\<and>\n       \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota> \\<and>\n       concl_of \\<iota> < D", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<iota>\\<in>G_Inf M.\n     prems_of \\<iota> \\<noteq> [] \\<and>\n     main_prem_of \\<iota> = D \\<and>\n     set (side_prems_of \\<iota>) \\<subseteq> N \\<and>\n     gr.INTERP M N \\<TTurnstile>s set (side_prems_of \\<iota>) \\<and>\n     \\<not> gr.INTERP M N \\<TTurnstile> concl_of \\<iota> \\<and>\n     concl_of \\<iota> < D\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation G: clausal_counterex_reducing_calculus_with_standard_redundancy \"G_Inf M\"\n  \"gr.INTERP M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clausal_counterex_reducing_calculus_with_standard_redundancy (G_Inf M)\n     (gr.INTERP M)", "by (unfold_locales, fact G_Inf_have_prems, fact G_Inf_reductive)"], ["", "interpretation G: statically_complete_calculus \"{{#}}\" \"G_Inf M\" \"(\\<TTurnstile>e)\" \"G.Red_I M\" G.Red_F"], ["proof (prove)\ngoal (1 subgoal):\n 1. statically_complete_calculus {{#}} (G_Inf M) (\\<TTurnstile>e)\n     (G.Red_I M) G.Red_F", "by unfold_locales (use G.clausal_saturated_complete in blast)"], ["", "subsection \\<open>First-Order Layer\\<close>"], ["", "abbreviation \\<G>_F :: \\<open>'a clause \\<Rightarrow> 'a clause set\\<close> where\n  \\<open>\\<G>_F \\<equiv> grounding_of_cls\\<close>"], ["", "abbreviation \\<G>_Fset :: \\<open>'a clause set \\<Rightarrow> 'a clause set\\<close> where\n  \\<open>\\<G>_Fset \\<equiv> grounding_of_clss\\<close>"], ["", "lemmas \\<G>_F_def = grounding_of_cls_def"], ["", "lemmas \\<G>_Fset_def = grounding_of_clss_def"], ["", "definition \\<G>_I :: \\<open>'a clause set \\<Rightarrow> 'a clause inference \\<Rightarrow> 'a clause inference set\\<close> where\n  \\<open>\\<G>_I M \\<iota> = {Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s) (concl_of \\<iota> \\<cdot> \\<rho>) |\\<rho> \\<rho>s.\n     is_ground_subst_list \\<rho>s \\<and> is_ground_subst \\<rho>\n     \\<and> Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s) (concl_of \\<iota> \\<cdot> \\<rho>) \\<in> G_Inf M}\\<close>"], ["", "abbreviation\n  \\<G>_I_opt :: \\<open>'a clause set \\<Rightarrow> 'a clause inference \\<Rightarrow> 'a clause inference set option\\<close>\nwhere\n  \\<open>\\<G>_I_opt M \\<iota> \\<equiv> Some (\\<G>_I M \\<iota>)\\<close>"], ["", "definition F_Inf :: \"'a clause inference set\" where\n  \"F_Inf = {Infer (CAs @ [DA]) E | CAs DA AAs As \\<sigma> E. ord_resolve_rename S CAs DA AAs As \\<sigma> E}\""], ["", "lemma F_Inf_have_prems: \"\\<iota> \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota> \\<noteq> []", "unfolding F_Inf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As \\<sigma> E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              ord_resolve_rename S CAs DA AAs As \\<sigma>\n               E} \\<Longrightarrow>\n    prems_of \\<iota> \\<noteq> []", "by force"], ["", "interpretation F: lifting_intersection F_Inf \"{{#}}\" UNIV G_Inf \"\\<lambda>N. (\\<TTurnstile>e)\" G.Red_I \"\\<lambda>N. G.Red_F\"\n  \"{{#}}\" \"\\<lambda>N. \\<G>_F\" \\<G>_I_opt \"\\<lambda>D C C'. False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lifting_intersection F_Inf {{#}} UNIV G_Inf\n     (\\<lambda>N. (\\<TTurnstile>e)) G.Red_I (\\<lambda>N. G.Red_F) {{#}}\n     (\\<lambda>N. \\<G>_F) \\<G>_I_opt (\\<lambda>D C C'. False)", "proof (unfold_locales; (intro ballI)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. UNIV \\<noteq> {}\n 2. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       consequence_relation {{#}} (\\<TTurnstile>e)\n 3. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf q)\n        (G.Red_I q) G.Red_F \\<G>_F (\\<G>_I_opt q) (\\<lambda>D C C'. False)", "show \"UNIV \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV \\<noteq> {}", "by (rule UNIV_not_empty)"], ["proof (state)\nthis:\n  UNIV \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       consequence_relation {{#}} (\\<TTurnstile>e)\n 2. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf q)\n        (G.Red_I q) G.Red_F \\<G>_F (\\<G>_I_opt q) (\\<lambda>D C C'. False)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       consequence_relation {{#}} (\\<TTurnstile>e)\n 2. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf q)\n        (G.Red_I q) G.Red_F \\<G>_F (\\<G>_I_opt q) (\\<lambda>D C C'. False)", "show \"consequence_relation {{#}} (\\<TTurnstile>e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consequence_relation {{#}} (\\<TTurnstile>e)", "by (fact consequence_relation_axioms)"], ["proof (state)\nthis:\n  consequence_relation {{#}} (\\<TTurnstile>e)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf q)\n        (G.Red_I q) G.Red_F \\<G>_F (\\<G>_I_opt q) (\\<lambda>D C C'. False)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> UNIV \\<Longrightarrow>\n       tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf q)\n        (G.Red_I q) G.Red_F \\<G>_F (\\<G>_I_opt q) (\\<lambda>D C C'. False)", "show \"\\<And>M. tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf M) (G.Red_I M) G.Red_F \\<G>_F (\\<G>_I_opt M)\n    (\\<lambda>D C C'. False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf M)\n        (G.Red_I M) G.Red_F \\<G>_F (\\<G>_I_opt M) (\\<lambda>D C C'. False)", "proof"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>M. {{#}} \\<noteq> {}\n 2. \\<And>M B. B \\<in> {{#}} \\<Longrightarrow> \\<G>_F B \\<noteq> {}\n 3. \\<And>M B. B \\<in> {{#}} \\<Longrightarrow> \\<G>_F B \\<subseteq> {{#}}\n 4. \\<And>M C.\n       \\<G>_F C \\<inter> {{#}} \\<noteq> {} \\<longrightarrow> C \\<in> {{#}}\n 5. \\<And>M \\<iota>.\n       \\<lbrakk>\\<iota> \\<in> F_Inf;\n        \\<G>_I_opt M \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_opt M \\<iota>)\n                         \\<subseteq> G.Red_I M (\\<G>_F (concl_of \\<iota>))\n 6. \\<And>M g. po_on (\\<lambda>C C'. False) UNIV\n 7. \\<And>M g. wfp_on (\\<lambda>C C'. False) UNIV", "fix M \\<iota>"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>M. {{#}} \\<noteq> {}\n 2. \\<And>M B. B \\<in> {{#}} \\<Longrightarrow> \\<G>_F B \\<noteq> {}\n 3. \\<And>M B. B \\<in> {{#}} \\<Longrightarrow> \\<G>_F B \\<subseteq> {{#}}\n 4. \\<And>M C.\n       \\<G>_F C \\<inter> {{#}} \\<noteq> {} \\<longrightarrow> C \\<in> {{#}}\n 5. \\<And>M \\<iota>.\n       \\<lbrakk>\\<iota> \\<in> F_Inf;\n        \\<G>_I_opt M \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_opt M \\<iota>)\n                         \\<subseteq> G.Red_I M (\\<G>_F (concl_of \\<iota>))\n 6. \\<And>M g. po_on (\\<lambda>C C'. False) UNIV\n 7. \\<And>M g. wfp_on (\\<lambda>C C'. False) UNIV", "show \"the (\\<G>_I_opt M \\<iota>) \\<subseteq> G.Red_I M (\\<G>_F (concl_of \\<iota>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (\\<G>_I_opt M \\<iota>)\n    \\<subseteq> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "unfolding option.sel"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>_I M \\<iota> \\<subseteq> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<G>_I M \\<iota> \\<Longrightarrow>\n       x \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "fix \\<iota>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<G>_I M \\<iota> \\<Longrightarrow>\n       x \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "assume \"\\<iota>' \\<in> \\<G>_I M \\<iota>\""], ["proof (state)\nthis:\n  \\<iota>' \\<in> \\<G>_I M \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<G>_I M \\<iota> \\<Longrightarrow>\n       x \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "then"], ["proof (chain)\npicking this:\n  \\<iota>' \\<in> \\<G>_I M \\<iota>", "obtain \\<rho> \\<rho>s where\n        \\<iota>': \"\\<iota>' = Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s) (concl_of \\<iota> \\<cdot> \\<rho>)\" and\n        \\<rho>_gr: \"is_ground_subst \\<rho>\" and\n        \\<rho>_infer: \"Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s) (concl_of \\<iota> \\<cdot> \\<rho>) \\<in> G_Inf M\""], ["proof (prove)\nusing this:\n  \\<iota>' \\<in> \\<G>_I M \\<iota>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>s \\<rho>.\n        \\<lbrakk>\\<iota>' =\n                 Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n                  (concl_of \\<iota> \\<cdot> \\<rho>);\n         is_ground_subst \\<rho>;\n         Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n          (concl_of \\<iota> \\<cdot> \\<rho>)\n         \\<in> G_Inf M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<G>_I_def"], ["proof (prove)\nusing this:\n  \\<iota>'\n  \\<in> {Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n          (concl_of \\<iota> \\<cdot> \\<rho>) |\n         \\<rho> \\<rho>s.\n         is_ground_subst_list \\<rho>s \\<and>\n         is_ground_subst \\<rho> \\<and>\n         Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n          (concl_of \\<iota> \\<cdot> \\<rho>)\n         \\<in> G_Inf M}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>s \\<rho>.\n        \\<lbrakk>\\<iota>' =\n                 Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n                  (concl_of \\<iota> \\<cdot> \\<rho>);\n         is_ground_subst \\<rho>;\n         Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n          (concl_of \\<iota> \\<cdot> \\<rho>)\n         \\<in> G_Inf M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<iota>' =\n  Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n   (concl_of \\<iota> \\<cdot> \\<rho>)\n  is_ground_subst \\<rho>\n  Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n   (concl_of \\<iota> \\<cdot> \\<rho>)\n  \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<G>_I M \\<iota> \\<Longrightarrow>\n       x \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "show \"\\<iota>' \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))", "unfolding G.Red_I_def G.redundant_infer_def mem_Collect_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' \\<in> G_Inf M \\<and>\n    (\\<exists>DD\\<subseteq>\\<G>_F (concl_of \\<iota>).\n        DD \\<union> set (side_prems_of \\<iota>') \\<TTurnstile>e\n        {concl_of \\<iota>'} \\<and>\n        (\\<forall>D\\<in>DD. D < main_prem_of \\<iota>'))", "using \\<iota>' \\<rho>_gr \\<rho>_infer"], ["proof (prove)\nusing this:\n  \\<iota>' =\n  Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n   (concl_of \\<iota> \\<cdot> \\<rho>)\n  is_ground_subst \\<rho>\n  Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n   (concl_of \\<iota> \\<cdot> \\<rho>)\n  \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<iota>' \\<in> G_Inf M \\<and>\n    (\\<exists>DD\\<subseteq>\\<G>_F (concl_of \\<iota>).\n        DD \\<union> set (side_prems_of \\<iota>') \\<TTurnstile>e\n        {concl_of \\<iota>'} \\<and>\n        (\\<forall>D\\<in>DD. D < main_prem_of \\<iota>'))", "by (metis inference.sel(2) G_Inf_reductive empty_iff ground_subst_ground_cls\n            grounding_of_cls_ground insert_iff subst_cls_eq_grounding_of_cls_subset_eq\n            true_clss_union)"], ["proof (state)\nthis:\n  \\<iota>' \\<in> G.Red_I M (\\<G>_F (concl_of \\<iota>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the (\\<G>_I_opt M \\<iota>)\n  \\<subseteq> G.Red_I M (\\<G>_F (concl_of \\<iota>))\n\ngoal (6 subgoals):\n 1. \\<And>M. {{#}} \\<noteq> {}\n 2. \\<And>M B. B \\<in> {{#}} \\<Longrightarrow> \\<G>_F B \\<noteq> {}\n 3. \\<And>M B. B \\<in> {{#}} \\<Longrightarrow> \\<G>_F B \\<subseteq> {{#}}\n 4. \\<And>M C.\n       \\<G>_F C \\<inter> {{#}} \\<noteq> {} \\<longrightarrow> C \\<in> {{#}}\n 5. \\<And>M g. po_on (\\<lambda>C C'. False) UNIV\n 6. \\<And>M g. wfp_on (\\<lambda>C C'. False) UNIV", "qed (auto simp: \\<G>_F_def ex_ground_subst)"], ["proof (state)\nthis:\n  tiebreaker_lifting {{#}} F_Inf {{#}} (\\<TTurnstile>e) (G_Inf ?M)\n   (G.Red_I ?M) G.Red_F \\<G>_F (\\<G>_I_opt ?M) (\\<lambda>D C C'. False)\n\ngoal:\nNo subgoals!", "qed"], ["", "notation F.entails_\\<G> (infix \"\\<TTurnstile>\\<G>e\" 50)"], ["", "lemma F_entails_\\<G>_iff: \"N1 \\<TTurnstile>\\<G>e N2 \\<longleftrightarrow> \\<Union> (\\<G>_F ` N1) \\<TTurnstile>e \\<Union> (\\<G>_F ` N2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N1 \\<TTurnstile>\\<G>e N2) =\n    (\\<Union> (\\<G>_F ` N1) \\<TTurnstile>e \\<Union> (\\<G>_F ` N2))", "unfolding F.entails_\\<G>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>q\\<in>UNIV.\n        \\<Union> (\\<G>_F ` N1) \\<TTurnstile>e \\<Union> (\\<G>_F ` N2)) =\n    (\\<Union> (\\<G>_F ` N1) \\<TTurnstile>e \\<Union> (\\<G>_F ` N2))", "by simp"], ["", "lemma true_Union_grounding_of_cls_iff:\n  \"I \\<TTurnstile>s (\\<Union>C \\<in> N. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<longleftrightarrow> (\\<forall>\\<sigma>. is_ground_subst \\<sigma> \\<longrightarrow> I \\<TTurnstile>s N \\<cdot>cs \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<TTurnstile>s\n     (\\<Union>C\\<in>N.\n         {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})) =\n    (\\<forall>\\<sigma>.\n        is_ground_subst \\<sigma> \\<longrightarrow>\n        I \\<TTurnstile>s N \\<cdot>cs \\<sigma>)", "unfolding true_clss_def subst_clss_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball\n     (\\<Union>C\\<in>N.\n         {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n     ((\\<TTurnstile>) I) =\n    (\\<forall>\\<sigma>.\n        is_ground_subst \\<sigma> \\<longrightarrow>\n        Ball ((\\<lambda>A. A \\<cdot> \\<sigma>) ` N) ((\\<TTurnstile>) I))", "by blast"], ["", "interpretation F: sound_inference_system F_Inf \"{{#}}\" \"(\\<TTurnstile>\\<G>e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Soundness.sound_inference_system F_Inf {{#}} (\\<TTurnstile>\\<G>e)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "fix \\<iota>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "assume i_in: \"\\<iota> \\<in> F_Inf\""], ["proof (state)\nthis:\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "moreover"], ["proof (state)\nthis:\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "{"], ["proof (state)\nthis:\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "fix I \\<eta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "assume\n      I_entails_prems: \"\\<forall>\\<sigma>. is_ground_subst \\<sigma> \\<longrightarrow> I \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>\" and\n      \\<eta>_gr: \"is_ground_subst \\<eta>\""], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     is_ground_subst \\<sigma> \\<longrightarrow>\n     I \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>\n  is_ground_subst \\<eta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "obtain CAs AAs As \\<sigma> where\n      the_inf: \"ord_resolve_rename S CAs (main_prem_of \\<iota>) AAs As \\<sigma> (concl_of \\<iota>)\" and\n      CAs: \"CAs = side_prems_of \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs (main_prem_of \\<iota>) AAs As\n                  \\<sigma> (concl_of \\<iota>);\n         CAs = side_prems_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using i_in"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs (main_prem_of \\<iota>) AAs As\n                  \\<sigma> (concl_of \\<iota>);\n         CAs = side_prems_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding F_Inf_def"], ["proof (prove)\nusing this:\n  \\<iota>\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As \\<sigma> E.\n            uu_ = Infer (CAs @ [DA]) E \\<and>\n            ord_resolve_rename S CAs DA AAs As \\<sigma> E}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs (main_prem_of \\<iota>) AAs As\n                  \\<sigma> (concl_of \\<iota>);\n         CAs = side_prems_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ord_resolve_rename S CAs (main_prem_of \\<iota>) AAs As \\<sigma>\n   (concl_of \\<iota>)\n  CAs = side_prems_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "have prems: \"mset (prems_of \\<iota>) = mset (side_prems_of \\<iota>) + {#main_prem_of \\<iota>#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (prems_of \\<iota>) =\n    mset (side_prems_of \\<iota>) + {#main_prem_of \\<iota>#}", "by (metis (no_types) F_Inf_have_prems[OF i_in] add.right_neutral append_Cons append_Nil2\n          append_butlast_last_id mset.simps(2) mset_rev mset_single_iff_right rev_append\n          rev_is_Nil_conv union_mset_add_mset_right)"], ["proof (state)\nthis:\n  mset (prems_of \\<iota>) =\n  mset (side_prems_of \\<iota>) + {#main_prem_of \\<iota>#}\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "have \"I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>", "using ord_resolve_rename_sound[OF the_inf, of I \\<eta>, OF _ \\<eta>_gr]"], ["proof (prove)\nusing this:\n  (\\<And>\\<sigma>.\n      is_ground_subst \\<sigma> \\<Longrightarrow>\n      I \\<TTurnstile>m\n      (mset CAs + {#main_prem_of \\<iota>#}) \\<cdot>cm\n      \\<sigma>) \\<Longrightarrow>\n  I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>\n\ngoal (1 subgoal):\n 1. I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>", "unfolding CAs prems[symmetric]"], ["proof (prove)\nusing this:\n  (\\<And>\\<sigma>.\n      is_ground_subst \\<sigma> \\<Longrightarrow>\n      I \\<TTurnstile>m\n      mset (prems_of \\<iota>) \\<cdot>cm \\<sigma>) \\<Longrightarrow>\n  I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>\n\ngoal (1 subgoal):\n 1. I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>", "using I_entails_prems"], ["proof (prove)\nusing this:\n  (\\<And>\\<sigma>.\n      is_ground_subst \\<sigma> \\<Longrightarrow>\n      I \\<TTurnstile>m\n      mset (prems_of \\<iota>) \\<cdot>cm \\<sigma>) \\<Longrightarrow>\n  I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>\n  \\<forall>\\<sigma>.\n     is_ground_subst \\<sigma> \\<longrightarrow>\n     I \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>\n\ngoal (1 subgoal):\n 1. I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>", "by (metis set_mset_mset set_mset_subst_cls_mset_subst_clss true_clss_set_mset)"], ["proof (state)\nthis:\n  I \\<TTurnstile> concl_of \\<iota> \\<cdot> \\<eta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>\\<sigma>.\n              is_ground_subst \\<sigma> \\<longrightarrow>\n              ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>;\n   is_ground_subst ?\\<eta>2\\<rbrakk>\n  \\<Longrightarrow> ?I2 \\<TTurnstile> concl_of \\<iota> \\<cdot> ?\\<eta>2\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<iota> \\<in> F_Inf \\<Longrightarrow>\n       set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> F_Inf\n  \\<lbrakk>\\<forall>\\<sigma>.\n              is_ground_subst \\<sigma> \\<longrightarrow>\n              ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>;\n   is_ground_subst ?\\<eta>2\\<rbrakk>\n  \\<Longrightarrow> ?I2 \\<TTurnstile> concl_of \\<iota> \\<cdot> ?\\<eta>2", "show \"set (inference.prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> F_Inf\n  \\<lbrakk>\\<forall>\\<sigma>.\n              is_ground_subst \\<sigma> \\<longrightarrow>\n              ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>;\n   is_ground_subst ?\\<eta>2\\<rbrakk>\n  \\<Longrightarrow> ?I2 \\<TTurnstile> concl_of \\<iota> \\<cdot> ?\\<eta>2\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}", "unfolding F.entails_\\<G>_def \\<G>_F_def true_Union_grounding_of_cls_iff"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> F_Inf\n  \\<lbrakk>\\<forall>\\<sigma>.\n              is_ground_subst \\<sigma> \\<longrightarrow>\n              ?I2 \\<TTurnstile>s set (prems_of \\<iota>) \\<cdot>cs \\<sigma>;\n   is_ground_subst ?\\<eta>2\\<rbrakk>\n  \\<Longrightarrow> ?I2 \\<TTurnstile> concl_of \\<iota> \\<cdot> ?\\<eta>2\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>UNIV.\n       \\<forall>I.\n          (\\<forall>\\<sigma>.\n              is_ground_subst \\<sigma> \\<longrightarrow>\n              I \\<TTurnstile>s\n              set (prems_of \\<iota>) \\<cdot>cs \\<sigma>) \\<longrightarrow>\n          (\\<forall>\\<sigma>.\n              is_ground_subst \\<sigma> \\<longrightarrow>\n              I \\<TTurnstile>s {concl_of \\<iota>} \\<cdot>cs \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  set (prems_of \\<iota>) \\<TTurnstile>\\<G>e {concl_of \\<iota>}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_Inf_overapprox_F_Inf: \"\\<iota>\\<^sub>0 \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow> \\<exists>\\<iota> \\<in> F.Inf_from M. \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "assume \\<iota>\\<^sub>0_in: \"\\<iota>\\<^sub>0 \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M))\""], ["proof (state)\nthis:\n  \\<iota>\\<^sub>0 \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M))\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have prems_\\<iota>\\<^sub>0_in: \"set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)", "using \\<iota>\\<^sub>0_in"], ["proof (prove)\nusing this:\n  \\<iota>\\<^sub>0 \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M))\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)", "unfolding G.Inf_from_def"], ["proof (prove)\nusing this:\n  \\<iota>\\<^sub>0\n  \\<in> {\\<iota> \\<in> G_Inf M.\n         set (prems_of \\<iota>) \\<subseteq> \\<Union> (\\<G>_F ` M)}\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)", "by simp"], ["proof (state)\nthis:\n  set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "note \\<iota>\\<^sub>0_G_Inf = G.Inf_if_Inf_from[OF \\<iota>\\<^sub>0_in]"], ["proof (state)\nthis:\n  \\<iota>\\<^sub>0 \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "then"], ["proof (chain)\npicking this:\n  \\<iota>\\<^sub>0 \\<in> G_Inf M", "obtain CAs DA AAs As E where\n    gr_res: \\<open>gr.ord_resolve M CAs DA AAs As E\\<close> and\n    \\<iota>\\<^sub>0_is: \\<open>\\<iota>\\<^sub>0 = Infer (CAs @ [DA]) E\\<close>"], ["proof (prove)\nusing this:\n  \\<iota>\\<^sub>0 \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As E.\n        \\<lbrakk>gr.ord_resolve M CAs DA AAs As E;\n         \\<iota>\\<^sub>0 = Infer (CAs @ [DA]) E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G_Inf_def"], ["proof (prove)\nusing this:\n  \\<iota>\\<^sub>0\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As E.\n            uu_ = Infer (CAs @ [DA]) E \\<and>\n            gr.ord_resolve M CAs DA AAs As E}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As E.\n        \\<lbrakk>gr.ord_resolve M CAs DA AAs As E;\n         \\<iota>\\<^sub>0 = Infer (CAs @ [DA]) E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gr.ord_resolve M CAs DA AAs As E\n  \\<iota>\\<^sub>0 = Infer (CAs @ [DA]) E\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have CAs_in: \\<open>set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)", "by (simp add: \\<iota>\\<^sub>0_is subsetI)"], ["proof (state)\nthis:\n  set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "then"], ["proof (chain)\npicking this:\n  set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)", "have ground_CAs: \\<open>is_ground_cls_list CAs\\<close>"], ["proof (prove)\nusing this:\n  set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)\n\ngoal (1 subgoal):\n 1. is_ground_cls_list CAs", "using prems_\\<iota>\\<^sub>0_in union_grounding_of_cls_ground is_ground_cls_list_def is_ground_clss_def"], ["proof (prove)\nusing this:\n  set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)\n  set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)\n  is_ground_clss (\\<Union> (\\<G>_F ` ?N))\n  is_ground_cls_list ?CC = Ball (set ?CC) is_ground_cls\n  is_ground_clss ?CC = Ball ?CC is_ground_cls\n\ngoal (1 subgoal):\n 1. is_ground_cls_list CAs", "by auto"], ["proof (state)\nthis:\n  is_ground_cls_list CAs\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have DA_in: \\<open>DA \\<in> set (prems_of \\<iota>\\<^sub>0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. DA \\<in> set (prems_of \\<iota>\\<^sub>0)", "using \\<iota>\\<^sub>0_is"], ["proof (prove)\nusing this:\n  \\<iota>\\<^sub>0 = Infer (CAs @ [DA]) E\n\ngoal (1 subgoal):\n 1. DA \\<in> set (prems_of \\<iota>\\<^sub>0)", "by simp"], ["proof (state)\nthis:\n  DA \\<in> set (prems_of \\<iota>\\<^sub>0)\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "then"], ["proof (chain)\npicking this:\n  DA \\<in> set (prems_of \\<iota>\\<^sub>0)", "have ground_DA: \\<open>is_ground_cls DA\\<close>"], ["proof (prove)\nusing this:\n  DA \\<in> set (prems_of \\<iota>\\<^sub>0)\n\ngoal (1 subgoal):\n 1. is_ground_cls DA", "using prems_\\<iota>\\<^sub>0_in union_grounding_of_cls_ground is_ground_clss_def"], ["proof (prove)\nusing this:\n  DA \\<in> set (prems_of \\<iota>\\<^sub>0)\n  set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)\n  is_ground_clss (\\<Union> (\\<G>_F ` ?N))\n  is_ground_clss ?CC = Ball ?CC is_ground_cls\n\ngoal (1 subgoal):\n 1. is_ground_cls DA", "by auto"], ["proof (state)\nthis:\n  is_ground_cls DA\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "obtain \\<sigma> where\n    grounded_res: \\<open>ord_resolve (S_M S M) CAs DA AAs As \\<sigma> E\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        ord_resolve (S_M S M) CAs DA AAs As \\<sigma> E \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ground_ord_resolve_imp_ord_resolve[OF ground_DA ground_CAs\n        gr.ground_resolution_with_selection_axioms gr_res]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. ord_resolve (S_M S M) CAs DA AAs As \\<sigma> E\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        ord_resolve (S_M S M) CAs DA AAs As \\<sigma> E \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ord_resolve (S_M S M) CAs DA AAs As \\<sigma> E\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have prems_ground: \\<open>{DA} \\<union> set CAs \\<subseteq> \\<G>_Fset M\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {DA} \\<union> set CAs \\<subseteq> \\<G>_Fset M", "using prems_\\<iota>\\<^sub>0_in CAs_in DA_in"], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)\n  set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)\n  DA \\<in> set (prems_of \\<iota>\\<^sub>0)\n\ngoal (1 subgoal):\n 1. {DA} \\<union> set CAs \\<subseteq> \\<G>_Fset M", "unfolding \\<G>_Fset_def"], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>\\<^sub>0) \\<subseteq> \\<Union> (\\<G>_F ` M)\n  set CAs \\<subseteq> set (prems_of \\<iota>\\<^sub>0)\n  DA \\<in> set (prems_of \\<iota>\\<^sub>0)\n\ngoal (1 subgoal):\n 1. {DA} \\<union> set CAs \\<subseteq> \\<Union> (\\<G>_F ` M)", "by fast"], ["proof (state)\nthis:\n  {DA} \\<union> set CAs \\<subseteq> \\<G>_Fset M\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "obtain \\<eta>s \\<eta> \\<eta>2 CAs0 DA0 AAs0 As0 E0 \\<tau> where\n    ground_n: \"is_ground_subst \\<eta>\" and\n    ground_ns: \"is_ground_subst_list \\<eta>s\" and\n    ground_n2: \"is_ground_subst \\<eta>2\" and\n    ngr_res: \"ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0\" and\n    CAs0_is: \"CAs0 \\<cdot>\\<cdot>cl \\<eta>s = CAs\" and\n    DA0_is: \"DA0 \\<cdot> \\<eta> = DA\" and\n    E0_is: \"E0 \\<cdot> \\<eta>2 = E\"  and\n    prems_in: \"{DA0} \\<union> set CAs0 \\<subseteq> M\" and\n    len_CAs0: \"length CAs0 = length CAs\" and\n    len_ns: \"length \\<eta>s = length CAs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<eta> \\<eta>s \\<eta>2 CAs0 DA0 AAs0 As0 \\<tau> E0.\n        \\<lbrakk>is_ground_subst \\<eta>; is_ground_subst_list \\<eta>s;\n         is_ground_subst \\<eta>2;\n         ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0;\n         CAs0 \\<cdot>\\<cdot>cl \\<eta>s = CAs; DA0 \\<cdot> \\<eta> = DA;\n         E0 \\<cdot> \\<eta>2 = E; {DA0} \\<union> set CAs0 \\<subseteq> M;\n         length CAs0 = length CAs; length \\<eta>s = length CAs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ord_resolve_rename_lifting[OF _ grounded_res selection_axioms prems_ground] sel_stable"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>\\<rho> C.\n              is_renaming \\<rho> \\<Longrightarrow>\n              S (C \\<cdot> \\<rho>) = S C \\<cdot> \\<rho>;\n   \\<And>\\<eta>s \\<eta> \\<eta>2 CAs0 DA0 AAs0 As0 E0 \\<tau>.\n      \\<lbrakk>is_ground_subst \\<eta>; is_ground_subst_list \\<eta>s;\n       is_ground_subst \\<eta>2;\n       ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0;\n       CAs0 \\<cdot>\\<cdot>cl \\<eta>s = CAs; DA0 \\<cdot> \\<eta> = DA;\n       E0 \\<cdot> \\<eta>2 = E; {DA0} \\<union> set CAs0 \\<subseteq> M;\n       length CAs0 = length CAs; length \\<eta>s = length CAs\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_renaming ?\\<rho> \\<Longrightarrow>\n  S (?C \\<cdot> ?\\<rho>) = S ?C \\<cdot> ?\\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<eta> \\<eta>s \\<eta>2 CAs0 DA0 AAs0 As0 \\<tau> E0.\n        \\<lbrakk>is_ground_subst \\<eta>; is_ground_subst_list \\<eta>s;\n         is_ground_subst \\<eta>2;\n         ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0;\n         CAs0 \\<cdot>\\<cdot>cl \\<eta>s = CAs; DA0 \\<cdot> \\<eta> = DA;\n         E0 \\<cdot> \\<eta>2 = E; {DA0} \\<union> set CAs0 \\<subseteq> M;\n         length CAs0 = length CAs; length \\<eta>s = length CAs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by smt"], ["proof (state)\nthis:\n  is_ground_subst \\<eta>\n  is_ground_subst_list \\<eta>s\n  is_ground_subst \\<eta>2\n  ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0\n  CAs0 \\<cdot>\\<cdot>cl \\<eta>s = CAs\n  DA0 \\<cdot> \\<eta> = DA\n  E0 \\<cdot> \\<eta>2 = E\n  {DA0} \\<union> set CAs0 \\<subseteq> M\n  length CAs0 = length CAs\n  length \\<eta>s = length CAs\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have \"length CAs0 = length \\<eta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length CAs0 = length \\<eta>s", "using len_CAs0 len_ns"], ["proof (prove)\nusing this:\n  length CAs0 = length CAs\n  length \\<eta>s = length CAs\n\ngoal (1 subgoal):\n 1. length CAs0 = length \\<eta>s", "by simp"], ["proof (state)\nthis:\n  length CAs0 = length \\<eta>s\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "then"], ["proof (chain)\npicking this:\n  length CAs0 = length \\<eta>s", "have \\<iota>\\<^sub>0_is': \"\\<iota>\\<^sub>0 = Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl (\\<eta>s @ [\\<eta>])) (E0 \\<cdot> \\<eta>2)\""], ["proof (prove)\nusing this:\n  length CAs0 = length \\<eta>s\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0 =\n    Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl (\\<eta>s @ [\\<eta>]))\n     (E0 \\<cdot> \\<eta>2)", "unfolding \\<iota>\\<^sub>0_is"], ["proof (prove)\nusing this:\n  length CAs0 = length \\<eta>s\n\ngoal (1 subgoal):\n 1. Infer (CAs @ [DA]) E =\n    Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl (\\<eta>s @ [\\<eta>]))\n     (E0 \\<cdot> \\<eta>2)", "by (auto simp: CAs0_is[symmetric] DA0_is[symmetric] E0_is[symmetric])"], ["proof (state)\nthis:\n  \\<iota>\\<^sub>0 =\n  Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl (\\<eta>s @ [\\<eta>]))\n   (E0 \\<cdot> \\<eta>2)\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "define \\<iota> :: \"'a clause inference\" where\n    \"\\<iota> = Infer (CAs0 @ [DA0]) E0\""], ["proof (state)\nthis:\n  \\<iota> = Infer (CAs0 @ [DA0]) E0\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have i_F_Inf: \\<open>\\<iota> \\<in> F_Inf\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> F_Inf", "unfolding \\<iota>_def F_Inf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (CAs0 @ [DA0]) E0\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As \\<sigma> E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              ord_resolve_rename S CAs DA AAs As \\<sigma> E}", "using ngr_res"], ["proof (prove)\nusing this:\n  ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0\n\ngoal (1 subgoal):\n 1. Infer (CAs0 @ [DA0]) E0\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As \\<sigma> E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              ord_resolve_rename S CAs DA AAs As \\<sigma> E}", "by auto"], ["proof (state)\nthis:\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have \"\\<exists>\\<rho> \\<rho>s. \\<iota>\\<^sub>0 = Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>) \\<and> is_ground_subst_list \\<rho>s\n    \\<and> is_ground_subst \\<rho> \\<and> Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>) \\<in> G_Inf M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<rho> \\<rho>s.\n       \\<iota>\\<^sub>0 =\n       Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s)\n        (E0 \\<cdot> \\<rho>) \\<and>\n       is_ground_subst_list \\<rho>s \\<and>\n       is_ground_subst \\<rho> \\<and>\n       Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>)\n       \\<in> G_Inf M", "by (rule exI[of _ \\<eta>2], rule exI[of _ \"\\<eta>s @ [\\<eta>]\"], use ground_ns in\n        \\<open>auto intro: ground_n ground_n2 \\<iota>\\<^sub>0_G_Inf[unfolded \\<iota>\\<^sub>0_is']\n           simp: \\<iota>\\<^sub>0_is' is_ground_subst_list_def\\<close>)"], ["proof (state)\nthis:\n  \\<exists>\\<rho> \\<rho>s.\n     \\<iota>\\<^sub>0 =\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s)\n      (E0 \\<cdot> \\<rho>) \\<and>\n     is_ground_subst_list \\<rho>s \\<and>\n     is_ground_subst \\<rho> \\<and>\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>)\n     \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<rho> \\<rho>s.\n     \\<iota>\\<^sub>0 =\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s)\n      (E0 \\<cdot> \\<rho>) \\<and>\n     is_ground_subst_list \\<rho>s \\<and>\n     is_ground_subst \\<rho> \\<and>\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>)\n     \\<in> G_Inf M", "have \\<open>\\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<rho> \\<rho>s.\n     \\<iota>\\<^sub>0 =\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s)\n      (E0 \\<cdot> \\<rho>) \\<and>\n     is_ground_subst_list \\<rho>s \\<and>\n     is_ground_subst \\<rho> \\<and>\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>)\n     \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "unfolding \\<G>_I_def \\<iota>_def CAs0_is[symmetric] DA0_is[symmetric] E0_is[symmetric]"], ["proof (prove)\nusing this:\n  \\<exists>\\<rho> \\<rho>s.\n     \\<iota>\\<^sub>0 =\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s)\n      (E0 \\<cdot> \\<rho>) \\<and>\n     is_ground_subst_list \\<rho>s \\<and>\n     is_ground_subst \\<rho> \\<and>\n     Infer ((CAs0 @ [DA0]) \\<cdot>\\<cdot>cl \\<rho>s) (E0 \\<cdot> \\<rho>)\n     \\<in> G_Inf M\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> {Infer\n            (prems_of (Infer (CAs0 @ [DA0]) E0) \\<cdot>\\<cdot>cl \\<rho>s)\n            (concl_of (Infer (CAs0 @ [DA0]) E0) \\<cdot> \\<rho>) |\n           \\<rho> \\<rho>s.\n           is_ground_subst_list \\<rho>s \\<and>\n           is_ground_subst \\<rho> \\<and>\n           Infer\n            (prems_of (Infer (CAs0 @ [DA0]) E0) \\<cdot>\\<cdot>cl \\<rho>s)\n            (concl_of (Infer (CAs0 @ [DA0]) E0) \\<cdot> \\<rho>)\n           \\<in> G_Inf M}", "by simp"], ["proof (state)\nthis:\n  \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "moreover"], ["proof (state)\nthis:\n  \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "have \\<open>\\<iota> \\<in> F.Inf_from M\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> F.Inf_from M", "using prems_in i_F_Inf"], ["proof (prove)\nusing this:\n  {DA0} \\<union> set CAs0 \\<subseteq> M\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> F.Inf_from M", "unfolding F.Inf_from_def \\<iota>_def"], ["proof (prove)\nusing this:\n  {DA0} \\<union> set CAs0 \\<subseteq> M\n  Infer (CAs0 @ [DA0]) E0 \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. Infer (CAs0 @ [DA0]) E0\n    \\<in> {\\<iota> \\<in> F_Inf. set (prems_of \\<iota>) \\<subseteq> M}", "by simp"], ["proof (state)\nthis:\n  \\<iota> \\<in> F.Inf_from M\n\ngoal (1 subgoal):\n 1. \\<iota>\\<^sub>0\n    \\<in> G.Inf_from M (\\<Union> (\\<G>_F ` M)) \\<Longrightarrow>\n    \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\n  \\<iota> \\<in> F.Inf_from M", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\n  \\<iota> \\<in> F.Inf_from M\n\ngoal (1 subgoal):\n 1. \\<exists>\\<iota>\\<in>F.Inf_from M.\n       \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<iota>\\<in>F.Inf_from M. \\<iota>\\<^sub>0 \\<in> \\<G>_I M \\<iota>\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation F: statically_complete_calculus \"{{#}}\" F_Inf \"(\\<TTurnstile>\\<G>e)\" F.Red_I_\\<G> F.Red_F_\\<G>_empty"], ["proof (prove)\ngoal (1 subgoal):\n 1. statically_complete_calculus {{#}} F_Inf (\\<TTurnstile>\\<G>e)\n     F.Red_I_\\<G> F.Red_F_\\<G>_empty", "proof (rule F.stat_ref_comp_to_non_ground_fam_inter; clarsimp; (intro exI)?)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       statically_complete_calculus {{#}} (G_Inf q) (\\<TTurnstile>e)\n        (G.Red_I q) G.Red_F\n 2. \\<And>N.\n       F.empty_ord.saturated N \\<Longrightarrow>\n       F.ground.Inf_from_q (?q19 N) (\\<Union> (\\<G>_F ` N))\n       \\<subseteq> {\\<iota>.\n                    \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                       \\<iota> \\<in> \\<G>_I (?q19 N) \\<iota>'} \\<union>\n                   G.Red_I (?q19 N) (\\<Union> (\\<G>_F ` N))", "show \"\\<And>M. statically_complete_calculus {{#}} (G_Inf M) (\\<TTurnstile>e) (G.Red_I M) G.Red_F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       statically_complete_calculus {{#}} (G_Inf M) (\\<TTurnstile>e)\n        (G.Red_I M) G.Red_F", "by (fact G.statically_complete_calculus_axioms)"], ["proof (state)\nthis:\n  statically_complete_calculus {{#}} (G_Inf ?M) (\\<TTurnstile>e)\n   (G.Red_I ?M) G.Red_F\n\ngoal (1 subgoal):\n 1. \\<And>N.\n       F.empty_ord.saturated N \\<Longrightarrow>\n       F.ground.Inf_from_q (?q19 N) (\\<Union> (\\<G>_F ` N))\n       \\<subseteq> {\\<iota>.\n                    \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                       \\<iota> \\<in> \\<G>_I (?q19 N) \\<iota>'} \\<union>\n                   G.Red_I (?q19 N) (\\<Union> (\\<G>_F ` N))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N.\n       F.empty_ord.saturated N \\<Longrightarrow>\n       F.ground.Inf_from_q (?q19 N) (\\<Union> (\\<G>_F ` N))\n       \\<subseteq> {\\<iota>.\n                    \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                       \\<iota> \\<in> \\<G>_I (?q19 N) \\<iota>'} \\<union>\n                   G.Red_I (?q19 N) (\\<Union> (\\<G>_F ` N))", "fix N"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N.\n       F.empty_ord.saturated N \\<Longrightarrow>\n       F.ground.Inf_from_q (?q19 N) (\\<Union> (\\<G>_F ` N))\n       \\<subseteq> {\\<iota>.\n                    \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                       \\<iota> \\<in> \\<G>_I (?q19 N) \\<iota>'} \\<union>\n                   G.Red_I (?q19 N) (\\<Union> (\\<G>_F ` N))", "assume \"F.saturated N\""], ["proof (state)\nthis:\n  F.empty_ord.saturated N\n\ngoal (1 subgoal):\n 1. \\<And>N.\n       F.empty_ord.saturated N \\<Longrightarrow>\n       F.ground.Inf_from_q (?q19 N) (\\<Union> (\\<G>_F ` N))\n       \\<subseteq> {\\<iota>.\n                    \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                       \\<iota> \\<in> \\<G>_I (?q19 N) \\<iota>'} \\<union>\n                   G.Red_I (?q19 N) (\\<Union> (\\<G>_F ` N))", "show \"F.ground.Inf_from_q N (\\<Union> (\\<G>_F ` N)) \\<subseteq> {\\<iota>. \\<exists>\\<iota>' \\<in> F.Inf_from N. \\<iota> \\<in> \\<G>_I N \\<iota>'}\n    \\<union> G.Red_I N (\\<Union> (\\<G>_F ` N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F.ground.Inf_from_q N (\\<Union> (\\<G>_F ` N))\n    \\<subseteq> {\\<iota>.\n                 \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                    \\<iota> \\<in> \\<G>_I N \\<iota>'} \\<union>\n                G.Red_I N (\\<Union> (\\<G>_F ` N))", "using G_Inf_overapprox_F_Inf"], ["proof (prove)\nusing this:\n  ?\\<iota>\\<^sub>0\n  \\<in> G.Inf_from ?M (\\<Union> (\\<G>_F ` ?M)) \\<Longrightarrow>\n  \\<exists>\\<iota>\\<in>F.Inf_from ?M.\n     ?\\<iota>\\<^sub>0 \\<in> \\<G>_I ?M \\<iota>\n\ngoal (1 subgoal):\n 1. F.ground.Inf_from_q N (\\<Union> (\\<G>_F ` N))\n    \\<subseteq> {\\<iota>.\n                 \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                    \\<iota> \\<in> \\<G>_I N \\<iota>'} \\<union>\n                G.Red_I N (\\<Union> (\\<G>_F ` N))", "unfolding F.ground.Inf_from_q_def \\<G>_I_def"], ["proof (prove)\nusing this:\n  ?\\<iota>\\<^sub>0\n  \\<in> G.Inf_from ?M (\\<Union> (\\<G>_F ` ?M)) \\<Longrightarrow>\n  \\<exists>\\<iota>\\<in>F.Inf_from ?M.\n     ?\\<iota>\\<^sub>0\n     \\<in> {Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n             (concl_of \\<iota> \\<cdot> \\<rho>) |\n            \\<rho> \\<rho>s.\n            is_ground_subst_list \\<rho>s \\<and>\n            is_ground_subst \\<rho> \\<and>\n            Infer (prems_of \\<iota> \\<cdot>\\<cdot>cl \\<rho>s)\n             (concl_of \\<iota> \\<cdot> \\<rho>)\n            \\<in> G_Inf ?M}\n\ngoal (1 subgoal):\n 1. G.Inf_from N (\\<Union> (\\<G>_F ` N))\n    \\<subseteq> {\\<iota>.\n                 \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                    \\<iota>\n                    \\<in> {Infer\n                            (prems_of \\<iota>' \\<cdot>\\<cdot>cl \\<rho>s)\n                            (concl_of \\<iota>' \\<cdot> \\<rho>) |\n                           \\<rho> \\<rho>s.\n                           is_ground_subst_list \\<rho>s \\<and>\n                           is_ground_subst \\<rho> \\<and>\n                           Infer\n                            (prems_of \\<iota>' \\<cdot>\\<cdot>cl \\<rho>s)\n                            (concl_of \\<iota>' \\<cdot> \\<rho>)\n                           \\<in> G_Inf N}} \\<union>\n                G.Red_I N (\\<Union> (\\<G>_F ` N))", "by fastforce"], ["proof (state)\nthis:\n  F.ground.Inf_from_q N (\\<Union> (\\<G>_F ` N))\n  \\<subseteq> {\\<iota>.\n               \\<exists>\\<iota>'\\<in>F.Inf_from N.\n                  \\<iota> \\<in> \\<G>_I N \\<iota>'} \\<union>\n              G.Red_I N (\\<Union> (\\<G>_F ` N))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Labeled First-Order or Given Clause Layer\\<close>"], ["", "datatype label = New | Processed | Old"], ["", "definition FL_Infer_of :: \"'a clause inference \\<Rightarrow> ('a clause \\<times> label) inference set\" where\n  \"FL_Infer_of \\<iota> = {Infer Cls (D, New) |Cls D. \\<iota> = Infer (map fst Cls) D}\""], ["", "definition FL_Inf :: \"('a clause \\<times> label) inference set\" where\n  \"FL_Inf = (\\<Union>\\<iota> \\<in> F_Inf. FL_Infer_of \\<iota>)\""], ["", "abbreviation F_Equiv :: \"'a clause \\<Rightarrow> 'a clause \\<Rightarrow> bool\" (infix \"\\<doteq>\" 50) where\n  \"C \\<doteq> D \\<equiv> generalizes C D \\<and> generalizes D C\""], ["", "abbreviation F_Prec :: \"'a clause \\<Rightarrow> 'a clause \\<Rightarrow> bool\" (infix \"\\<prec>\\<cdot>\" 50) where\n  \"C \\<prec>\\<cdot> D \\<equiv> strictly_generalizes C D\""], ["", "fun L_Prec :: \"label \\<Rightarrow> label \\<Rightarrow> bool\" (infix \"\\<sqsubset>l\" 50) where\n  \"Old \\<sqsubset>l l \\<longleftrightarrow> l \\<noteq> Old\"\n| \"Processed \\<sqsubset>l l \\<longleftrightarrow> l = New\"\n| \"New \\<sqsubset>l l \\<longleftrightarrow> False\""], ["", "lemma irrefl_L_Prec: \"\\<not> l \\<sqsubset>l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> l \\<sqsubset>l l", "by (cases l) auto"], ["", "lemma trans_L_Prec: \"l1 \\<sqsubset>l l2 \\<Longrightarrow> l2 \\<sqsubset>l l3 \\<Longrightarrow> l1 \\<sqsubset>l l3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l1 \\<sqsubset>l l2; l2 \\<sqsubset>l l3\\<rbrakk>\n    \\<Longrightarrow> l1 \\<sqsubset>l l3", "by (cases l1; cases l2; cases l3) auto"], ["", "lemma wf_L_Prec: \"wfP (\\<sqsubset>l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<sqsubset>l)", "by (metis L_Prec.elims(2) L_Prec.simps(3) not_accp_down wfP_accp_iff)"], ["", "interpretation FL: given_clause \"{{#}}\" F_Inf \"{{#}}\" UNIV \"\\<lambda>N. (\\<TTurnstile>e)\" G_Inf G.Red_I\n  \"\\<lambda>N. G.Red_F\" \"\\<lambda>N. \\<G>_F\" \\<G>_I_opt FL_Inf \"(\\<doteq>)\" \"(\\<prec>\\<cdot>)\" \"(\\<sqsubset>l)\" Old"], ["proof (prove)\ngoal (1 subgoal):\n 1. given_clause {{#}} F_Inf {{#}} UNIV (\\<lambda>N. (\\<TTurnstile>e)) G_Inf\n     G.Red_I (\\<lambda>N. G.Red_F) (\\<lambda>N. \\<G>_F) \\<G>_I_opt FL_Inf\n     (\\<doteq>) (\\<prec>\\<cdot>) (\\<sqsubset>l) Old", "proof (unfold_locales; (intro ballI)?)"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. equivp (\\<doteq>)\n 4. po_on (\\<prec>\\<cdot>) UNIV\n 5. wfp_on (\\<prec>\\<cdot>) UNIV\n 6. po_on (\\<sqsubset>l) UNIV\n 7. wfp_on (\\<sqsubset>l) UNIV\n 8. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 9. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 10. \\<And>q C2 C1.\n        \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n        \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\nA total of 14 subgoals...", "show \"equivp (\\<doteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<doteq>)", "unfolding equivp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. (x \\<doteq> y) = ((\\<doteq>) x = (\\<doteq>) y)", "by (meson generalizes_refl generalizes_trans)"], ["proof (state)\nthis:\n  equivp (\\<doteq>)\n\ngoal (13 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. po_on (\\<prec>\\<cdot>) UNIV\n 4. wfp_on (\\<prec>\\<cdot>) UNIV\n 5. po_on (\\<sqsubset>l) UNIV\n 6. wfp_on (\\<sqsubset>l) UNIV\n 7. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 8. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 9. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 10. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. po_on (\\<prec>\\<cdot>) UNIV\n 4. wfp_on (\\<prec>\\<cdot>) UNIV\n 5. po_on (\\<sqsubset>l) UNIV\n 6. wfp_on (\\<sqsubset>l) UNIV\n 7. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 8. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 9. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 10. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\nA total of 13 subgoals...", "show \"po_on (\\<prec>\\<cdot>) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. po_on (\\<prec>\\<cdot>) UNIV", "unfolding po_on_def irreflp_on_def transp_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>UNIV. \\<not> a \\<prec>\\<cdot> a) \\<and>\n    (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV.\n              x \\<prec>\\<cdot> y \\<and> y \\<prec>\\<cdot> z \\<longrightarrow>\n              x \\<prec>\\<cdot> z)", "using strictly_generalizes_irrefl strictly_generalizes_trans"], ["proof (prove)\nusing this:\n  \\<not> ?C \\<prec>\\<cdot> ?C\n  \\<lbrakk>?C \\<prec>\\<cdot> ?D; ?D \\<prec>\\<cdot> ?E\\<rbrakk>\n  \\<Longrightarrow> ?C \\<prec>\\<cdot> ?E\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>UNIV. \\<not> a \\<prec>\\<cdot> a) \\<and>\n    (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV.\n              x \\<prec>\\<cdot> y \\<and> y \\<prec>\\<cdot> z \\<longrightarrow>\n              x \\<prec>\\<cdot> z)", "by auto"], ["proof (state)\nthis:\n  po_on (\\<prec>\\<cdot>) UNIV\n\ngoal (12 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. wfp_on (\\<prec>\\<cdot>) UNIV\n 4. po_on (\\<sqsubset>l) UNIV\n 5. wfp_on (\\<sqsubset>l) UNIV\n 6. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 7. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 8. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 9. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 10. \\<exists>l2. Old \\<sqsubset>l l2\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. wfp_on (\\<prec>\\<cdot>) UNIV\n 4. po_on (\\<sqsubset>l) UNIV\n 5. wfp_on (\\<sqsubset>l) UNIV\n 6. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 7. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 8. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 9. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 10. \\<exists>l2. Old \\<sqsubset>l l2\nA total of 12 subgoals...", "show \"wfp_on (\\<prec>\\<cdot>) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfp_on (\\<prec>\\<cdot>) UNIV", "unfolding wfp_on_UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<prec>\\<cdot>)", "by (metis wf_strictly_generalizes)"], ["proof (state)\nthis:\n  wfp_on (\\<prec>\\<cdot>) UNIV\n\ngoal (11 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. po_on (\\<sqsubset>l) UNIV\n 4. wfp_on (\\<sqsubset>l) UNIV\n 5. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 6. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 7. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 8. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 9. \\<exists>l2. Old \\<sqsubset>l l2\n 10. \\<And>\\<iota>.\n        \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n        snd (concl_of \\<iota>) \\<noteq> Old\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. po_on (\\<sqsubset>l) UNIV\n 4. wfp_on (\\<sqsubset>l) UNIV\n 5. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 6. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 7. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 8. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 9. \\<exists>l2. Old \\<sqsubset>l l2\n 10. \\<And>\\<iota>.\n        \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n        snd (concl_of \\<iota>) \\<noteq> Old\nA total of 11 subgoals...", "show \"po_on (\\<sqsubset>l) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. po_on (\\<sqsubset>l) UNIV", "unfolding po_on_def irreflp_on_def transp_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>UNIV. \\<not> a \\<sqsubset>l a) \\<and>\n    (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV.\n              x \\<sqsubset>l y \\<and> y \\<sqsubset>l z \\<longrightarrow>\n              x \\<sqsubset>l z)", "using irrefl_L_Prec trans_L_Prec"], ["proof (prove)\nusing this:\n  \\<not> ?l \\<sqsubset>l ?l\n  \\<lbrakk>?l1.0 \\<sqsubset>l ?l2.0; ?l2.0 \\<sqsubset>l ?l3.0\\<rbrakk>\n  \\<Longrightarrow> ?l1.0 \\<sqsubset>l ?l3.0\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>UNIV. \\<not> a \\<sqsubset>l a) \\<and>\n    (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV.\n              x \\<sqsubset>l y \\<and> y \\<sqsubset>l z \\<longrightarrow>\n              x \\<sqsubset>l z)", "by blast"], ["proof (state)\nthis:\n  po_on (\\<sqsubset>l) UNIV\n\ngoal (10 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. wfp_on (\\<sqsubset>l) UNIV\n 4. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 5. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 6. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 7. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 8. \\<exists>l2. Old \\<sqsubset>l l2\n 9. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 10. \\<And>\\<iota>F.\n        \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. wfp_on (\\<sqsubset>l) UNIV\n 4. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 5. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 6. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 7. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 8. \\<exists>l2. Old \\<sqsubset>l l2\n 9. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 10. \\<And>\\<iota>F.\n        \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "show \"wfp_on (\\<sqsubset>l) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfp_on (\\<sqsubset>l) UNIV", "unfolding wfp_on_UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<sqsubset>l)", "by (rule wf_L_Prec)"], ["proof (state)\nthis:\n  wfp_on (\\<sqsubset>l) UNIV\n\ngoal (9 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 4. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 6. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 7. \\<exists>l2. Old \\<sqsubset>l l2\n 8. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 9. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 4. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 6. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 7. \\<exists>l2. Old \\<sqsubset>l l2\n 8. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 9. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "fix C1 D1 C2 D2"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 4. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 6. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 7. \\<exists>l2. Old \\<sqsubset>l l2\n 8. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 9. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "assume\n    \"C1 \\<doteq> D1\"\n    \"C2 \\<doteq> D2\"\n    \"C1 \\<prec>\\<cdot> C2\""], ["proof (state)\nthis:\n  C1 \\<doteq> D1\n  C2 \\<doteq> D2\n  C1 \\<prec>\\<cdot> C2\n\ngoal (9 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>C1 D1 C2 D2.\n       \\<lbrakk>C1 \\<doteq> D1; C2 \\<doteq> D2;\n        C1 \\<prec>\\<cdot> C2\\<rbrakk>\n       \\<Longrightarrow> D1 \\<prec>\\<cdot> D2\n 4. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 6. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 7. \\<exists>l2. Old \\<sqsubset>l l2\n 8. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 9. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  C1 \\<doteq> D1\n  C2 \\<doteq> D2\n  C1 \\<prec>\\<cdot> C2", "show \"D1 \\<prec>\\<cdot> D2\""], ["proof (prove)\nusing this:\n  C1 \\<doteq> D1\n  C2 \\<doteq> D2\n  C1 \\<prec>\\<cdot> C2\n\ngoal (1 subgoal):\n 1. D1 \\<prec>\\<cdot> D2", "by (smt antisym size_mset_mono size_subst strictly_generalizes_def generalizes_def\n        generalizes_trans)"], ["proof (state)\nthis:\n  D1 \\<prec>\\<cdot> D2\n\ngoal (8 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 6. \\<exists>l2. Old \\<sqsubset>l l2\n 7. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 8. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 6. \\<exists>l2. Old \\<sqsubset>l l2\n 7. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 8. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "fix N C1 C2"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 6. \\<exists>l2. Old \\<sqsubset>l l2\n 7. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 8. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "assume \"C1 \\<doteq> C2\""], ["proof (state)\nthis:\n  C1 \\<doteq> C2\n\ngoal (8 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C1 C2.\n       \\<lbrakk>q \\<in> UNIV; C1 \\<doteq> C2\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 5. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 6. \\<exists>l2. Old \\<sqsubset>l l2\n 7. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 8. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  C1 \\<doteq> C2", "show \"\\<G>_F C1 \\<subseteq> \\<G>_F C2\""], ["proof (prove)\nusing this:\n  C1 \\<doteq> C2\n\ngoal (1 subgoal):\n 1. \\<G>_F C1 \\<subseteq> \\<G>_F C2", "unfolding generalizes_def \\<G>_F_def"], ["proof (prove)\nusing this:\n  (\\<exists>\\<sigma>. C1 \\<cdot> \\<sigma> = C2) \\<and>\n  (\\<exists>\\<sigma>. C2 \\<cdot> \\<sigma> = C1)\n\ngoal (1 subgoal):\n 1. {C1 \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n    \\<subseteq> {C2 \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}", "by clarsimp (metis is_ground_comp_subst subst_cls_comp_subst)"], ["proof (state)\nthis:\n  \\<G>_F C1 \\<subseteq> \\<G>_F C2\n\ngoal (7 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 5. \\<exists>l2. Old \\<sqsubset>l l2\n 6. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 7. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 5. \\<exists>l2. Old \\<sqsubset>l l2\n 6. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 7. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "fix N C2 C1"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 5. \\<exists>l2. Old \\<sqsubset>l l2\n 6. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 7. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "assume \"C2 \\<prec>\\<cdot> C1\""], ["proof (state)\nthis:\n  C2 \\<prec>\\<cdot> C1\n\ngoal (7 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>q C2 C1.\n       \\<lbrakk>q \\<in> UNIV; C2 \\<prec>\\<cdot> C1\\<rbrakk>\n       \\<Longrightarrow> \\<G>_F C1 \\<subseteq> \\<G>_F C2\n 4. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 5. \\<exists>l2. Old \\<sqsubset>l l2\n 6. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 7. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  C2 \\<prec>\\<cdot> C1", "show \"\\<G>_F C1 \\<subseteq> \\<G>_F C2\""], ["proof (prove)\nusing this:\n  C2 \\<prec>\\<cdot> C1\n\ngoal (1 subgoal):\n 1. \\<G>_F C1 \\<subseteq> \\<G>_F C2", "unfolding strictly_generalizes_def generalizes_def \\<G>_F_def"], ["proof (prove)\nusing this:\n  (\\<exists>\\<sigma>. C2 \\<cdot> \\<sigma> = C1) \\<and>\n  (\\<nexists>\\<sigma>. C1 \\<cdot> \\<sigma> = C2)\n\ngoal (1 subgoal):\n 1. {C1 \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n    \\<subseteq> {C2 \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}", "by clarsimp (metis is_ground_comp_subst subst_cls_comp_subst)"], ["proof (state)\nthis:\n  \\<G>_F C1 \\<subseteq> \\<G>_F C2\n\ngoal (6 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 4. \\<exists>l2. Old \\<sqsubset>l l2\n 5. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 6. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 4. \\<exists>l2. Old \\<sqsubset>l l2\n 5. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 6. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "show \"\\<exists>l. L_Prec Old l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. Old \\<sqsubset>l l", "using L_Prec.simps(1)"], ["proof (prove)\nusing this:\n  (Old \\<sqsubset>l ?l) = (?l \\<noteq> Old)\n\ngoal (1 subgoal):\n 1. \\<exists>l. Old \\<sqsubset>l l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. Old \\<sqsubset>l l\n\ngoal (5 subgoals):\n 1. \\<And>\\<iota>\\<^sub>F Ll.\n       \\<lbrakk>\\<iota>\\<^sub>F \\<in> F_Inf;\n        length Ll = length (prems_of \\<iota>\\<^sub>F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L0.\n                            Infer (zip (prems_of \\<iota>\\<^sub>F) Ll)\n                             (concl_of \\<iota>\\<^sub>F, L0)\n                            \\<in> FL_Inf\n 2. \\<And>\\<iota>\\<^sub>F\\<^sub>L.\n       \\<iota>\\<^sub>F\\<^sub>L \\<in> FL_Inf \\<Longrightarrow>\n       Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n        (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\n       \\<in> F_Inf\n 3. \\<And>l2. l2 \\<noteq> Old \\<Longrightarrow> Old \\<sqsubset>l l2\n 4. \\<And>\\<iota>.\n       \\<iota> \\<in> FL_Inf \\<Longrightarrow>\n       snd (concl_of \\<iota>) \\<noteq> Old\n 5. \\<And>\\<iota>F.\n       \\<iota>F \\<in> F_Inf \\<Longrightarrow> prems_of \\<iota>F \\<noteq> []", "qed (auto simp: FL_Inf_def FL_Infer_of_def F_Inf_have_prems)"], ["", "notation FL.Prec_FL (infix \"\\<sqsubset>\" 50)"], ["", "notation FL.entails_\\<G>_L (infix \"\\<TTurnstile>\\<G>Le\" 50)"], ["", "notation FL.derive (infix \"\\<rhd>L\" 50)"], ["", "notation FL.step (infix \"\\<leadsto>GC\" 50)"], ["", "lemma FL_Red_F_eq:\n  \"FL.Red_F N =\n   {C. \\<forall>D \\<in> \\<G>_F (fst C). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or> (\\<exists>E \\<in> N. E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.Red_F_\\<G> N =\n    {C. \\<forall>D\\<in>\\<G>_F (fst C).\n           D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n           (\\<exists>E\\<in>N.\n               E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "unfolding FL.Red_F_def FL.Red_F_\\<G>_q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Inter>q.\n        {C. \\<forall>D\\<in>\\<G>_F (fst C).\n               D \\<in> G.Red_F (\\<Union>CL\\<in>N. \\<G>_F (fst CL)) \\<or>\n               (\\<exists>E\\<in>N.\n                   E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}) =\n    {C. \\<forall>D\\<in>\\<G>_F (fst C).\n           D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n           (\\<exists>E\\<in>N.\n               E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "by auto"], ["", "lemma mem_FL_Red_F_because_G_Red_F:\n  \"(\\<forall>D \\<in> \\<G>_F (fst Cl). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N))) \\<Longrightarrow> Cl \\<in> FL.Red_F N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> N", "unfolding FL_Red_F_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "by auto"], ["", "lemma mem_FL_Red_F_because_Prec_FL:\n  \"(\\<forall>D \\<in> \\<G>_F (fst Cl). \\<exists>El \\<in> N. El \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst El)) \\<Longrightarrow> Cl \\<in> FL.Red_F N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       \\<exists>El\\<in>N.\n          El \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst El) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> N", "unfolding FL_Red_F_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       \\<exists>El\\<in>N.\n          El \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst El) \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "by auto"], ["", "subsection \\<open>Resolution Prover Layer\\<close>"], ["", "interpretation sq: selection \"S_Q Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. selection (S_Q Sts)", "unfolding S_Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. selection (S_M S (Q_of_state (Liminf_state Sts)))", "using S_M_selects_subseteq S_M_selects_neg_lits selection_axioms"], ["proof (prove)\nusing this:\n  selection ?S \\<Longrightarrow> S_M ?S ?M ?C \\<subseteq># ?C\n  \\<lbrakk>selection ?S; ?L \\<in># S_M ?S ?M ?C\\<rbrakk>\n  \\<Longrightarrow> is_neg ?L\n  selection S\n\ngoal (1 subgoal):\n 1. selection (S_M S (Q_of_state (Liminf_state Sts)))", "by unfold_locales auto"], ["", "interpretation gd: ground_resolution_with_selection \"S_Q Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_resolution_with_selection (S_Q Sts)", "by unfold_locales"], ["", "interpretation src: standard_redundancy_criterion_counterex_reducing \"gd.ord_\\<Gamma> Sts\"\n  \"ground_resolution_with_selection.INTERP (S_Q Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_redundancy_criterion_counterex_reducing (gd.ord_\\<Gamma> Sts)\n     (gd.INTERP Sts)", "by unfold_locales"], ["", "definition lclss_of_state :: \"'a state \\<Rightarrow> ('a clause \\<times> label) set\" where\n  \"lclss_of_state St =\n   (\\<lambda>C. (C, New)) ` N_of_state St \\<union> (\\<lambda>C. (C, Processed)) ` P_of_state St\n   \\<union> (\\<lambda>C. (C, Old)) ` Q_of_state St\""], ["", "lemma image_hd_lclss_of_state[simp]: \"fst ` lclss_of_state St = clss_of_state St\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` lclss_of_state St =\n    N_of_state St \\<union> P_of_state St \\<union> Q_of_state St", "unfolding lclss_of_state_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst `\n    ((\\<lambda>C. (C, New)) ` N_of_state St \\<union>\n     (\\<lambda>C. (C, Processed)) ` P_of_state St \\<union>\n     (\\<lambda>C. (C, Old)) ` Q_of_state St) =\n    N_of_state St \\<union> P_of_state St \\<union> Q_of_state St", "by (auto simp: image_Un image_comp)"], ["", "lemma insert_lclss_of_state[simp]:\n  \"insert (C, New) (lclss_of_state (N, P, Q)) = lclss_of_state (N \\<union> {C}, P, Q)\"\n  \"insert (C, Processed) (lclss_of_state (N, P, Q)) = lclss_of_state (N, P \\<union> {C}, Q)\"\n  \"insert (C, Old) (lclss_of_state (N, P, Q)) = lclss_of_state (N, P, Q \\<union> {C})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (C, New) (lclss_of_state (N, P, Q)) =\n    lclss_of_state (N \\<union> {C}, P, Q) &&&\n    insert (C, Processed) (lclss_of_state (N, P, Q)) =\n    lclss_of_state (N, P \\<union> {C}, Q) &&&\n    insert (C, Old) (lclss_of_state (N, P, Q)) =\n    lclss_of_state (N, P, Q \\<union> {C})", "unfolding lclss_of_state_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (C, New)\n     ({y. \\<exists>x\\<in>N_of_state (N, P, Q). y = (x, New)} \\<union>\n      {y. \\<exists>x\\<in>P_of_state (N, P, Q). y = (x, Processed)} \\<union>\n      {y. \\<exists>x\\<in>Q_of_state (N, P, Q). y = (x, Old)}) =\n    {y. \\<exists>x\\<in>N_of_state (N \\<union> {C}, P, Q).\n           y = (x, New)} \\<union>\n    {y. \\<exists>x\\<in>P_of_state (N \\<union> {C}, P, Q).\n           y = (x, Processed)} \\<union>\n    {y. \\<exists>x\\<in>Q_of_state (N \\<union> {C}, P, Q). y = (x, Old)} &&&\n    insert (C, Processed)\n     ({y. \\<exists>x\\<in>N_of_state (N, P, Q). y = (x, New)} \\<union>\n      {y. \\<exists>x\\<in>P_of_state (N, P, Q). y = (x, Processed)} \\<union>\n      {y. \\<exists>x\\<in>Q_of_state (N, P, Q). y = (x, Old)}) =\n    {y. \\<exists>x\\<in>N_of_state (N, P \\<union> {C}, Q).\n           y = (x, New)} \\<union>\n    {y. \\<exists>x\\<in>P_of_state (N, P \\<union> {C}, Q).\n           y = (x, Processed)} \\<union>\n    {y. \\<exists>x\\<in>Q_of_state (N, P \\<union> {C}, Q). y = (x, Old)} &&&\n    insert (C, Old)\n     ({y. \\<exists>x\\<in>N_of_state (N, P, Q). y = (x, New)} \\<union>\n      {y. \\<exists>x\\<in>P_of_state (N, P, Q). y = (x, Processed)} \\<union>\n      {y. \\<exists>x\\<in>Q_of_state (N, P, Q). y = (x, Old)}) =\n    {y. \\<exists>x\\<in>N_of_state (N, P, Q \\<union> {C}).\n           y = (x, New)} \\<union>\n    {y. \\<exists>x\\<in>P_of_state (N, P, Q \\<union> {C}).\n           y = (x, Processed)} \\<union>\n    {y. \\<exists>x\\<in>Q_of_state (N, P, Q \\<union> {C}). y = (x, Old)}", "by auto"], ["", "lemma union_lclss_of_state[simp]:\n  \"lclss_of_state (N1, P1, Q1) \\<union> lclss_of_state (N2, P2, Q2) =\n   lclss_of_state (N1 \\<union> N2, P1 \\<union> P2, Q1 \\<union> Q2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N1, P1, Q1) \\<union> lclss_of_state (N2, P2, Q2) =\n    lclss_of_state (N1 \\<union> N2, P1 \\<union> P2, Q1 \\<union> Q2)", "unfolding lclss_of_state_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>C. (C, New)) ` N_of_state (N1, P1, Q1) \\<union>\n    (\\<lambda>C. (C, Processed)) ` P_of_state (N1, P1, Q1) \\<union>\n    (\\<lambda>C. (C, Old)) ` Q_of_state (N1, P1, Q1) \\<union>\n    ((\\<lambda>C. (C, New)) ` N_of_state (N2, P2, Q2) \\<union>\n     (\\<lambda>C. (C, Processed)) ` P_of_state (N2, P2, Q2) \\<union>\n     (\\<lambda>C. (C, Old)) ` Q_of_state (N2, P2, Q2)) =\n    (\\<lambda>C. (C, New)) `\n    N_of_state (N1 \\<union> N2, P1 \\<union> P2, Q1 \\<union> Q2) \\<union>\n    (\\<lambda>C. (C, Processed)) `\n    P_of_state (N1 \\<union> N2, P1 \\<union> P2, Q1 \\<union> Q2) \\<union>\n    (\\<lambda>C. (C, Old)) `\n    Q_of_state (N1 \\<union> N2, P1 \\<union> P2, Q1 \\<union> Q2)", "by auto"], ["", "lemma mem_lclss_of_state[simp]:\n  \"(C, New) \\<in> lclss_of_state (N, P, Q) \\<longleftrightarrow> C \\<in> N\"\n  \"(C, Processed) \\<in> lclss_of_state (N, P, Q) \\<longleftrightarrow> C \\<in> P\"\n  \"(C, Old) \\<in> lclss_of_state (N, P, Q) \\<longleftrightarrow> C \\<in> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((C, New) \\<in> lclss_of_state (N, P, Q)) = (C \\<in> N) &&&\n    ((C, Processed) \\<in> lclss_of_state (N, P, Q)) = (C \\<in> P) &&&\n    ((C, Old) \\<in> lclss_of_state (N, P, Q)) = (C \\<in> Q)", "unfolding lclss_of_state_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((C, New)\n     \\<in> {y. \\<exists>x\\<in>N_of_state (N, P, Q). y = (x, New)} \\<union>\n           {y. \\<exists>x\\<in>P_of_state (N, P, Q).\n                  y = (x, Processed)} \\<union>\n           {y. \\<exists>x\\<in>Q_of_state (N, P, Q). y = (x, Old)}) =\n    (C \\<in> N) &&&\n    ((C, Processed)\n     \\<in> {y. \\<exists>x\\<in>N_of_state (N, P, Q). y = (x, New)} \\<union>\n           {y. \\<exists>x\\<in>P_of_state (N, P, Q).\n                  y = (x, Processed)} \\<union>\n           {y. \\<exists>x\\<in>Q_of_state (N, P, Q). y = (x, Old)}) =\n    (C \\<in> P) &&&\n    ((C, Old)\n     \\<in> {y. \\<exists>x\\<in>N_of_state (N, P, Q). y = (x, New)} \\<union>\n           {y. \\<exists>x\\<in>P_of_state (N, P, Q).\n                  y = (x, Processed)} \\<union>\n           {y. \\<exists>x\\<in>Q_of_state (N, P, Q). y = (x, Old)}) =\n    (C \\<in> Q)", "by auto"], ["", "lemma lclss_Liminf_commute:\n  \"Liminf_llist (lmap lclss_of_state Sts) = lclss_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    lclss_of_state (Liminf_state Sts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    lclss_of_state (Liminf_state Sts)", "have \\<open>Liminf_llist (lmap lclss_of_state Sts) =\n    (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Processed)) ` Liminf_llist (lmap P_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Processed)) `\n    Liminf_llist (lmap P_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)", "unfolding lclss_of_state_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           (\\<lambda>C. (C, New)) ` N_of_state St \\<union>\n           (\\<lambda>C. (C, Processed)) ` P_of_state St \\<union>\n           (\\<lambda>C. (C, Old)) ` Q_of_state St)\n       Sts) =\n    (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Processed)) `\n    Liminf_llist (lmap P_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)", "using Liminf_llist_lmap_union Liminf_llist_lmap_image"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>lset ?xs.\n     \\<forall>Y\\<in>lset ?xs. ?g x \\<inter> ?h Y = {} \\<Longrightarrow>\n  Liminf_llist (lmap (\\<lambda>x. ?g x \\<union> ?h x) ?xs) =\n  Liminf_llist (lmap ?g ?xs) \\<union> Liminf_llist (lmap ?h ?xs)\n  inj_on ?f (Sup_llist (lmap ?g ?xs)) \\<Longrightarrow>\n  Liminf_llist (lmap (\\<lambda>x. ?f ` ?g x) ?xs) =\n  ?f ` Liminf_llist (lmap ?g ?xs)\n\ngoal (1 subgoal):\n 1. Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           (\\<lambda>C. (C, New)) ` N_of_state St \\<union>\n           (\\<lambda>C. (C, Processed)) ` P_of_state St \\<union>\n           (\\<lambda>C. (C, Old)) ` Q_of_state St)\n       Sts) =\n    (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Processed)) `\n    Liminf_llist (lmap P_of_state Sts) \\<union>\n    (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)", "by (smt Pair_inject Un_iff disjoint_iff_not_equal imageE inj_onI label.simps(1,3,5)\n        llist.map_cong)"], ["proof (state)\nthis:\n  Liminf_llist (lmap lclss_of_state Sts) =\n  (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Processed)) ` Liminf_llist (lmap P_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    lclss_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  Liminf_llist (lmap lclss_of_state Sts) =\n  (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Processed)) ` Liminf_llist (lmap P_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)", "show ?thesis"], ["proof (prove)\nusing this:\n  Liminf_llist (lmap lclss_of_state Sts) =\n  (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Processed)) ` Liminf_llist (lmap P_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    lclss_of_state (Liminf_state Sts)", "unfolding lclss_of_state_def Liminf_state_def"], ["proof (prove)\nusing this:\n  Liminf_llist\n   (lmap\n     (\\<lambda>St.\n         (\\<lambda>C. (C, New)) ` N_of_state St \\<union>\n         (\\<lambda>C. (C, Processed)) ` P_of_state St \\<union>\n         (\\<lambda>C. (C, Old)) ` Q_of_state St)\n     Sts) =\n  (\\<lambda>C. (C, New)) ` Liminf_llist (lmap N_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Processed)) ` Liminf_llist (lmap P_of_state Sts) \\<union>\n  (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           (\\<lambda>C. (C, New)) ` N_of_state St \\<union>\n           (\\<lambda>C. (C, Processed)) ` P_of_state St \\<union>\n           (\\<lambda>C. (C, Old)) ` Q_of_state St)\n       Sts) =\n    (\\<lambda>C. (C, New)) `\n    N_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) \\<union>\n    (\\<lambda>C. (C, Processed)) `\n    P_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) \\<union>\n    (\\<lambda>C. (C, Old)) `\n    Q_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts))", "by auto"], ["proof (state)\nthis:\n  Liminf_llist (lmap lclss_of_state Sts) = lclss_of_state (Liminf_state Sts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GC_tautology_step:\n  assumes tauto: \"Neg A \\<in># C\" \"Pos A \\<in># C\"\n  shows \"lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC lclss_of_state (N, P, Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "have c\\<theta>_red: \"C\\<theta> \\<in> G.Red_F (\\<Union>D \\<in> N'. \\<G>_F (fst D))\" if in_g: \"C\\<theta> \\<in> \\<G>_F C\"\n    for N' :: \"('a clause \\<times> label) set\" and C\\<theta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))", "obtain \\<theta> where\n      \"C\\<theta> = C \\<cdot> \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<theta>.\n        C\\<theta> = C \\<cdot> \\<theta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using in_g"], ["proof (prove)\nusing this:\n  C\\<theta> \\<in> \\<G>_F C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<theta>.\n        C\\<theta> = C \\<cdot> \\<theta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<G>_F_def"], ["proof (prove)\nusing this:\n  C\\<theta> \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<theta>.\n        C\\<theta> = C \\<cdot> \\<theta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C\\<theta> = C \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))", "then"], ["proof (chain)\npicking this:\n  C\\<theta> = C \\<cdot> \\<theta>", "have \"Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\" and \"Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\""], ["proof (prove)\nusing this:\n  C\\<theta> = C \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta> &&&\n    Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>", "using tauto Neg_Melem_subst_atm_subst_cls Pos_Melem_subst_atm_subst_cls"], ["proof (prove)\nusing this:\n  C\\<theta> = C \\<cdot> \\<theta>\n  Neg A \\<in># C\n  Pos A \\<in># C\n  Neg ?A \\<in># ?C \\<Longrightarrow>\n  Neg (?A \\<cdot>a ?\\<sigma>) \\<in># ?C \\<cdot> ?\\<sigma>\n  Pos ?A \\<in># ?C \\<Longrightarrow>\n  Pos (?A \\<cdot>a ?\\<sigma>) \\<in># ?C \\<cdot> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta> &&&\n    Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>", "by auto"], ["proof (state)\nthis:\n  Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n  Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n\ngoal (1 subgoal):\n 1. C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))", "then"], ["proof (chain)\npicking this:\n  Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n  Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>", "have \"{} \\<TTurnstile>e {C\\<theta>}\""], ["proof (prove)\nusing this:\n  Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n  Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n\ngoal (1 subgoal):\n 1. {} \\<TTurnstile>e {C\\<theta>}", "unfolding true_clss_def true_cls_def true_lit_def if_distrib_fun"], ["proof (prove)\nusing this:\n  Neg (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n  Pos (A \\<cdot>a \\<theta>) \\<in># C\\<theta>\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>C\\<in>{}.\n           \\<exists>L\\<in>#C.\n              if is_pos L then atm_of L \\<in> I\n              else atm_of L \\<notin> I) \\<longrightarrow>\n       (\\<forall>C\\<in>{C\\<theta>}.\n           \\<exists>L\\<in>#C.\n              if is_pos L then atm_of L \\<in> I else atm_of L \\<notin> I)", "by (metis literal.disc literal.sel singletonD)"], ["proof (state)\nthis:\n  {} \\<TTurnstile>e {C\\<theta>}\n\ngoal (1 subgoal):\n 1. C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))", "then"], ["proof (chain)\npicking this:\n  {} \\<TTurnstile>e {C\\<theta>}", "show ?thesis"], ["proof (prove)\nusing this:\n  {} \\<TTurnstile>e {C\\<theta>}\n\ngoal (1 subgoal):\n 1. C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))", "unfolding G.Red_F_def"], ["proof (prove)\nusing this:\n  {} \\<TTurnstile>e {C\\<theta>}\n\ngoal (1 subgoal):\n 1. C\\<theta>\n    \\<in> {C. \\<exists>DD\\<subseteq>\\<Union>D\\<in>N'. \\<G>_F (fst D).\n                 DD \\<TTurnstile>e {C} \\<and> (\\<forall>D\\<in>DD. D < C)}", "by auto"], ["proof (state)\nthis:\n  C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>N'. \\<G>_F (fst D))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?C\\<theta> \\<in> \\<G>_F C \\<Longrightarrow>\n  ?C\\<theta> \\<in> G.Red_F (\\<Union>D\\<in>?N'. \\<G>_F (fst D))\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "proof (rule FL.step.process[of _ \"lclss_of_state (N, P, Q)\" \"{(C, New)}\" _ \"{}\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. lclss_of_state (N \\<union> {C}, P, Q) =\n    lclss_of_state (N, P, Q) \\<union> {(C, New)}\n 2. lclss_of_state (N, P, Q) = lclss_of_state (N, P, Q) \\<union> {}\n 3. {(C, New)}\n    \\<subseteq> FL.Red_F_\\<G> (lclss_of_state (N, P, Q) \\<union> {})\n 4. FL.active_subset {} = {}", "show \\<open>{(C, New)} \\<subseteq> FL.Red_F_\\<G> (lclss_of_state (N, P, Q) \\<union> {})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(C, New)}\n    \\<subseteq> FL.Red_F_\\<G> (lclss_of_state (N, P, Q) \\<union> {})", "using mem_FL_Red_F_because_G_Red_F c\\<theta>_red[of _ \"lclss_of_state (N, P, Q)\"]"], ["proof (prove)\nusing this:\n  \\<forall>D\\<in>\\<G>_F (fst ?Cl).\n     D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` ?N)) \\<Longrightarrow>\n  ?Cl \\<in> FL.Red_F_\\<G> ?N\n  ?C\\<theta> \\<in> \\<G>_F C \\<Longrightarrow>\n  ?C\\<theta>\n  \\<in> G.Red_F (\\<Union>D\\<in>lclss_of_state (N, P, Q). \\<G>_F (fst D))\n\ngoal (1 subgoal):\n 1. {(C, New)}\n    \\<subseteq> FL.Red_F_\\<G> (lclss_of_state (N, P, Q) \\<union> {})", "unfolding lclss_of_state_def"], ["proof (prove)\nusing this:\n  \\<forall>D\\<in>\\<G>_F (fst ?Cl).\n     D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` ?N)) \\<Longrightarrow>\n  ?Cl \\<in> FL.Red_F_\\<G> ?N\n  ?C\\<theta> \\<in> \\<G>_F C \\<Longrightarrow>\n  ?C\\<theta>\n  \\<in> G.Red_F\n         (\\<Union>D\\<in>(\\<lambda>C. (C, New)) `\n                        N_of_state (N, P, Q) \\<union>\n                        (\\<lambda>C. (C, Processed)) `\n                        P_of_state (N, P, Q) \\<union>\n                        (\\<lambda>C. (C, Old)) ` Q_of_state (N, P, Q).\n             \\<G>_F (fst D))\n\ngoal (1 subgoal):\n 1. {(C, New)}\n    \\<subseteq> FL.Red_F_\\<G>\n                 ((\\<lambda>C. (C, New)) ` N_of_state (N, P, Q) \\<union>\n                  (\\<lambda>C. (C, Processed)) `\n                  P_of_state (N, P, Q) \\<union>\n                  (\\<lambda>C. (C, Old)) ` Q_of_state (N, P, Q) \\<union>\n                  {})", "by auto"], ["proof (state)\nthis:\n  {(C, New)}\n  \\<subseteq> FL.Red_F_\\<G> (lclss_of_state (N, P, Q) \\<union> {})\n\ngoal (3 subgoals):\n 1. lclss_of_state (N \\<union> {C}, P, Q) =\n    lclss_of_state (N, P, Q) \\<union> {(C, New)}\n 2. lclss_of_state (N, P, Q) = lclss_of_state (N, P, Q) \\<union> {}\n 3. FL.active_subset {} = {}", "qed (auto simp: lclss_of_state_def FL.active_subset_def)"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GC_subsumption_step:\n  assumes\n    d_in: \"Dl \\<in> N\" and\n    d_sub_c: \"strictly_subsumes (fst Dl) (fst Cl) \\<or> subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\"\n  shows \"N \\<union> {Cl} \\<leadsto>GC N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<union> {Cl} \\<leadsto>GC N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. N \\<union> {Cl} \\<leadsto>GC N", "have d_sub'_c: \"Cl \\<in> FL.Red_F {Dl} \\<or> Dl \\<sqsubset> Cl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "proof (cases \"size (fst Dl) = size (fst Cl)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. size (fst Dl) = size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n 2. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "case True"], ["proof (state)\nthis:\n  size (fst Dl) = size (fst Cl)\n\ngoal (2 subgoals):\n 1. size (fst Dl) = size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n 2. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "assume sizes_eq: \\<open>size (fst Dl) = size (fst Cl)\\<close>"], ["proof (state)\nthis:\n  size (fst Dl) = size (fst Cl)\n\ngoal (2 subgoals):\n 1. size (fst Dl) = size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n 2. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "have \\<open>size (fst Dl) = size (fst Cl) \\<Longrightarrow>\n        strictly_subsumes (fst Dl) (fst Cl) \\<or> subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl \\<Longrightarrow>\n        Dl \\<sqsubset> Cl\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size (fst Dl) = size (fst Cl);\n     strictly_subsumes (fst Dl) (fst Cl) \\<or>\n     subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n    \\<Longrightarrow> Dl \\<sqsubset> Cl", "unfolding FL.Prec_FL_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size (fst Dl) = size (fst Cl);\n     strictly_subsumes (fst Dl) (fst Cl) \\<or>\n     subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n    \\<Longrightarrow> fst Dl \\<prec>\\<cdot> fst Cl \\<or>\n                      fst Dl \\<doteq> fst Cl \\<and>\n                      snd Dl \\<sqsubset>l snd Cl", "unfolding generalizes_def strictly_generalizes_def strictly_subsumes_def subsumes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size (fst Dl) = size (fst Cl);\n     (\\<exists>\\<sigma>. fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl) \\<and>\n     (\\<nexists>\\<sigma>. fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl) \\<or>\n     (\\<exists>\\<sigma>. fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl) \\<and>\n     snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>\\<sigma>.\n                          fst Dl \\<cdot> \\<sigma> = fst Cl) \\<and>\n                      (\\<nexists>\\<sigma>.\n                          fst Cl \\<cdot> \\<sigma> = fst Dl) \\<or>\n                      ((\\<exists>\\<sigma>.\n                           fst Dl \\<cdot> \\<sigma> = fst Cl) \\<and>\n                       (\\<exists>\\<sigma>.\n                           fst Cl \\<cdot> \\<sigma> = fst Dl)) \\<and>\n                      snd Dl \\<sqsubset>l snd Cl", "by (metis size_subst subset_mset.order_refl subseteq_mset_size_eql)"], ["proof (state)\nthis:\n  \\<lbrakk>size (fst Dl) = size (fst Cl);\n   strictly_subsumes (fst Dl) (fst Cl) \\<or>\n   subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n  \\<Longrightarrow> Dl \\<sqsubset> Cl\n\ngoal (2 subgoals):\n 1. size (fst Dl) = size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n 2. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>size (fst Dl) = size (fst Cl);\n   strictly_subsumes (fst Dl) (fst Cl) \\<or>\n   subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n  \\<Longrightarrow> Dl \\<sqsubset> Cl", "have \"Dl \\<sqsubset> Cl\""], ["proof (prove)\nusing this:\n  \\<lbrakk>size (fst Dl) = size (fst Cl);\n   strictly_subsumes (fst Dl) (fst Cl) \\<or>\n   subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n  \\<Longrightarrow> Dl \\<sqsubset> Cl\n\ngoal (1 subgoal):\n 1. Dl \\<sqsubset> Cl", "using sizes_eq d_sub_c"], ["proof (prove)\nusing this:\n  \\<lbrakk>size (fst Dl) = size (fst Cl);\n   strictly_subsumes (fst Dl) (fst Cl) \\<or>\n   subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\\<rbrakk>\n  \\<Longrightarrow> Dl \\<sqsubset> Cl\n  size (fst Dl) = size (fst Cl)\n  strictly_subsumes (fst Dl) (fst Cl) \\<or>\n  subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\n\ngoal (1 subgoal):\n 1. Dl \\<sqsubset> Cl", "by auto"], ["proof (state)\nthis:\n  Dl \\<sqsubset> Cl\n\ngoal (2 subgoals):\n 1. size (fst Dl) = size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n 2. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "then"], ["proof (chain)\npicking this:\n  Dl \\<sqsubset> Cl", "show ?thesis"], ["proof (prove)\nusing this:\n  Dl \\<sqsubset> Cl\n\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "by (rule disjI2)"], ["proof (state)\nthis:\n  Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n\ngoal (1 subgoal):\n 1. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "case False"], ["proof (state)\nthis:\n  size (fst Dl) \\<noteq> size (fst Cl)\n\ngoal (1 subgoal):\n 1. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "then"], ["proof (chain)\npicking this:\n  size (fst Dl) \\<noteq> size (fst Cl)", "have d_ssub_c: \"strictly_subsumes (fst Dl) (fst Cl)\""], ["proof (prove)\nusing this:\n  size (fst Dl) \\<noteq> size (fst Cl)\n\ngoal (1 subgoal):\n 1. strictly_subsumes (fst Dl) (fst Cl)", "using d_sub_c"], ["proof (prove)\nusing this:\n  size (fst Dl) \\<noteq> size (fst Cl)\n  strictly_subsumes (fst Dl) (fst Cl) \\<or>\n  subsumes (fst Dl) (fst Cl) \\<and> snd Dl \\<sqsubset>l snd Cl\n\ngoal (1 subgoal):\n 1. strictly_subsumes (fst Dl) (fst Cl)", "unfolding strictly_subsumes_def subsumes_def"], ["proof (prove)\nusing this:\n  size (fst Dl) \\<noteq> size (fst Cl)\n  (\\<exists>\\<sigma>. fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl) \\<and>\n  (\\<nexists>\\<sigma>. fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl) \\<or>\n  (\\<exists>\\<sigma>. fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl) \\<and>\n  snd Dl \\<sqsubset>l snd Cl\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<sigma>. fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl) \\<and>\n    (\\<nexists>\\<sigma>. fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl)", "by (metis size_subst strict_subset_subst_strictly_subsumes strictly_subsumes_antisym\n          subset_mset.antisym_conv2)"], ["proof (state)\nthis:\n  strictly_subsumes (fst Dl) (fst Cl)\n\ngoal (1 subgoal):\n 1. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "have \"Cl \\<in> FL.Red_F {Dl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> {Dl}", "proof (rule mem_FL_Red_F_because_G_Red_F)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))", "show \\<open>\\<forall>D \\<in> \\<G>_F (fst Cl). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))", "using d_ssub_c"], ["proof (prove)\nusing this:\n  strictly_subsumes (fst Dl) (fst Cl)\n\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))", "unfolding G.Red_F_def strictly_subsumes_def subsumes_def \\<G>_F_def"], ["proof (prove)\nusing this:\n  (\\<exists>\\<sigma>. fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl) \\<and>\n  (\\<nexists>\\<sigma>. fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl)\n\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>{fst Cl \\<cdot> \\<sigma> |\\<sigma>.\n                    is_ground_subst \\<sigma>}.\n       D \\<in> {C. \\<exists>DD\\<subseteq>\\<Union>C\\<in>fst ` {Dl}.\n      {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}.\n                      DD \\<TTurnstile>e {C} \\<and>\n                      (\\<forall>D\\<in>DD. D < C)}", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "fix \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "assume\n          fst_not_in: \\<open>\\<forall>\\<sigma>. \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl\\<close> and\n          fst_in: \\<open>fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl\\<close> and\n          gr_sig: \\<open>is_ground_subst \\<sigma>'\\<close>"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>. \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl\n  fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl\n  is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "have \\<open>{fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}\n    \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>}", "using gr_sig"], ["proof (prove)\nusing this:\n  is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}\n    \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>}", "by (metis (mono_tags, lifting) is_ground_comp_subst mem_Collect_eq singletonD subsetI\n              subst_cls_comp_subst)"], ["proof (state)\nthis:\n  {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "moreover"], ["proof (state)\nthis:\n  {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "have \\<open>\\<forall>I. I \\<TTurnstile>s {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow> I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<TTurnstile>s\n       {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow>\n       I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'", "using fst_in"], ["proof (prove)\nusing this:\n  fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<TTurnstile>s\n       {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow>\n       I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'", "by (meson subst_cls_mono_mset true_clss_insert true_clss_subclause)"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<TTurnstile>s\n     {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "moreover"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<TTurnstile>s\n     {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "have \\<open>\\<forall>D \\<in> {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}. D < fst Cl \\<cdot> \\<sigma>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>{fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}.\n       D < fst Cl \\<cdot> \\<sigma>'", "using fst_not_in fst_in gr_sig"], ["proof (prove)\nusing this:\n  \\<forall>\\<sigma>. \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl\n  fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl\n  is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>{fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}.\n       D < fst Cl \\<cdot> \\<sigma>'", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'\n                         < fst Cl \\<cdot> \\<sigma>'", "show \\<open>\\<forall>\\<sigma>. \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl \\<Longrightarrow> fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl \\<Longrightarrow> is_ground_subst \\<sigma>' \\<Longrightarrow>\n            fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>' < fst Cl \\<cdot> \\<sigma>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n     fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n     is_ground_subst \\<sigma>'\\<rbrakk>\n    \\<Longrightarrow> fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'\n                      < fst Cl \\<cdot> \\<sigma>'", "by (metis False size_subst subset_imp_less_mset subset_mset.le_less subst_subset_mono)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>\\<sigma>.\n              \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n   fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n   is_ground_subst \\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'\n                    < fst Cl \\<cdot> \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>D\\<in>{fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}.\n     D < fst Cl \\<cdot> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   \\<not> fst Cl \\<cdot> \\<sigma> \\<subseteq># fst Dl;\n        fst Dl \\<cdot> \\<sigma> \\<subseteq># fst Cl;\n        is_ground_subst \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>') \\<and>\n                            (\\<forall>D\\<in>DD.\n                                D < fst Cl \\<cdot> \\<sigma>')", "ultimately"], ["proof (chain)\npicking this:\n  {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n  \\<forall>I.\n     I \\<TTurnstile>s\n     {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'\n  \\<forall>D\\<in>{fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}.\n     D < fst Cl \\<cdot> \\<sigma>'", "show \\<open>\\<exists>DD \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}.\n           (\\<forall>I. I \\<TTurnstile>s DD \\<longrightarrow> I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>') \\<and> (\\<forall>D \\<in> DD. D < fst Cl \\<cdot> \\<sigma>')\\<close>"], ["proof (prove)\nusing this:\n  {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n  \\<forall>I.\n     I \\<TTurnstile>s\n     {fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'} \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>'\n  \\<forall>D\\<in>{fst Dl \\<cdot> \\<sigma> \\<cdot> \\<sigma>'}.\n     D < fst Cl \\<cdot> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                           is_ground_subst \\<sigma>}.\n       (\\<forall>I.\n           I \\<TTurnstile>s DD \\<longrightarrow>\n           I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>') \\<and>\n       (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>')", "by blast"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                         is_ground_subst \\<sigma>}.\n     (\\<forall>I.\n         I \\<TTurnstile>s DD \\<longrightarrow>\n         I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>') \\<and>\n     (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>D\\<in>\\<G>_F (fst Cl).\n     D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}\n\ngoal (1 subgoal):\n 1. size (fst Dl) \\<noteq> size (fst Cl) \\<Longrightarrow>\n    Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "then"], ["proof (chain)\npicking this:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}", "show ?thesis"], ["proof (prove)\nusing this:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}\n\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl", "by (rule disjI1)"], ["proof (state)\nthis:\n  Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n\ngoal (1 subgoal):\n 1. N \\<union> {Cl} \\<leadsto>GC N", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<union> {Cl} \\<leadsto>GC N", "proof (rule FL.step.process[of _ N \"{Cl}\" _ \"{}\"], simp+)"], ["proof (state)\ngoal (2 subgoals):\n 1. Cl \\<in> FL.Red_F_\\<G> N\n 2. FL.active_subset {} = {}", "show \\<open>Cl \\<in> FL.Red_F_\\<G> N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> N", "using d_sub'_c"], ["proof (prove)\nusing this:\n  Cl \\<in> FL.Red_F_\\<G> {Dl} \\<or> Dl \\<sqsubset> Cl\n\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> N", "unfolding FL_Red_F_eq"], ["proof (prove)\nusing this:\n  Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                  D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                  (\\<exists>E\\<in>{Dl}.\n                      E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))} \\<or>\n  Dl \\<sqsubset> Cl\n\ngoal (1 subgoal):\n 1. Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                    (\\<exists>E\\<in>{Dl}.\n                        E \\<sqsubset> C \\<and>\n                        D \\<in> \\<G>_F (fst E))} \\<or>\n    Dl \\<sqsubset> Cl \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "have \\<open>\\<And>D. D \\<in> \\<G>_F (fst Cl) \\<Longrightarrow> \\<forall>E \\<in> N. E \\<sqsubset> Cl \\<longrightarrow> D \\<notin> \\<G>_F (fst E) \\<Longrightarrow>\n        \\<forall>D \\<in> \\<G>_F (fst Cl). D \\<in> G.Red_F (\\<G>_F (fst Dl)) \\<or> Dl \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst Dl) \\<Longrightarrow>\n        D \\<in> G.Red_F (\\<Union>a \\<in> N. \\<G>_F (fst a))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D.\n       \\<lbrakk>D \\<in> \\<G>_F (fst Cl);\n        \\<forall>E\\<in>N.\n           E \\<sqsubset> Cl \\<longrightarrow> D \\<notin> \\<G>_F (fst E);\n        \\<forall>D\\<in>\\<G>_F (fst Cl).\n           D \\<in> G.Red_F (\\<G>_F (fst Dl)) \\<or>\n           Dl \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst Dl)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))", "by (metis (no_types, lifting) G.Red_F_of_subset SUP_upper d_in subset_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   \\<forall>D\\<in>\\<G>_F (fst Cl).\n      D \\<in> G.Red_F (\\<G>_F (fst Dl)) \\<or>\n      Dl \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst Dl)\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))\n\ngoal (1 subgoal):\n 1. Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                    (\\<exists>E\\<in>{Dl}.\n                        E \\<sqsubset> C \\<and>\n                        D \\<in> \\<G>_F (fst E))} \\<or>\n    Dl \\<sqsubset> Cl \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   \\<forall>D\\<in>\\<G>_F (fst Cl).\n      D \\<in> G.Red_F (\\<G>_F (fst Dl)) \\<or>\n      Dl \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst Dl)\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))\n\ngoal (1 subgoal):\n 1. Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                    (\\<exists>E\\<in>{Dl}.\n                        E \\<sqsubset> C \\<and>\n                        D \\<in> \\<G>_F (fst E))} \\<or>\n    Dl \\<sqsubset> Cl \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "have \\<open>\\<And>D. D \\<in> \\<G>_F (fst Cl) \\<Longrightarrow> \\<forall>E \\<in> N. E \\<sqsubset> Cl \\<longrightarrow> D \\<notin> \\<G>_F (fst E) \\<Longrightarrow> Dl \\<sqsubset> Cl \\<Longrightarrow>\n        D \\<in> G.Red_F (\\<Union>a \\<in> N. \\<G>_F (fst a))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D.\n       \\<lbrakk>D \\<in> \\<G>_F (fst Cl);\n        \\<forall>E\\<in>N.\n           E \\<sqsubset> Cl \\<longrightarrow> D \\<notin> \\<G>_F (fst E);\n        Dl \\<sqsubset> Cl\\<rbrakk>\n       \\<Longrightarrow> D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))", "by (smt FL.Prec_FL_def FL.equiv_F_grounding FL.prec_F_grounding UNIV_witness d_in in_mono)"], ["proof (state)\nthis:\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   Dl \\<sqsubset> Cl\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))\n\ngoal (1 subgoal):\n 1. Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                    (\\<exists>E\\<in>{Dl}.\n                        E \\<sqsubset> C \\<and>\n                        D \\<in> \\<G>_F (fst E))} \\<or>\n    Dl \\<sqsubset> Cl \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   \\<forall>D\\<in>\\<G>_F (fst Cl).\n      D \\<in> G.Red_F (\\<G>_F (fst Dl)) \\<or>\n      Dl \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst Dl)\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   Dl \\<sqsubset> Cl\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))", "show \\<open>Cl \\<in> {C. \\<forall>D \\<in> \\<G>_F (fst C). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n        (\\<exists>E \\<in> {Dl}. E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))} \\<or> Dl \\<sqsubset> Cl \\<Longrightarrow>\n        Cl \\<in> {C. \\<forall>D \\<in> \\<G>_F (fst C). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n        (\\<exists>E \\<in> N. E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   \\<forall>D\\<in>\\<G>_F (fst Cl).\n      D \\<in> G.Red_F (\\<G>_F (fst Dl)) \\<or>\n      Dl \\<sqsubset> Cl \\<and> D \\<in> \\<G>_F (fst Dl)\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))\n  \\<lbrakk>?D \\<in> \\<G>_F (fst Cl);\n   \\<forall>E\\<in>N.\n      E \\<sqsubset> Cl \\<longrightarrow> ?D \\<notin> \\<G>_F (fst E);\n   Dl \\<sqsubset> Cl\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> G.Red_F (\\<Union>a\\<in>N. \\<G>_F (fst a))\n\ngoal (1 subgoal):\n 1. Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                    (\\<exists>E\\<in>{Dl}.\n                        E \\<sqsubset> C \\<and>\n                        D \\<in> \\<G>_F (fst E))} \\<or>\n    Dl \\<sqsubset> Cl \\<Longrightarrow>\n    Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                    D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                    (\\<exists>E\\<in>N.\n                        E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}", "by auto"], ["proof (state)\nthis:\n  Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                  D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl})) \\<or>\n                  (\\<exists>E\\<in>{Dl}.\n                      E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))} \\<or>\n  Dl \\<sqsubset> Cl \\<Longrightarrow>\n  Cl \\<in> {C. \\<forall>D\\<in>\\<G>_F (fst C).\n                  D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` N)) \\<or>\n                  (\\<exists>E\\<in>N.\n                      E \\<sqsubset> C \\<and> D \\<in> \\<G>_F (fst E))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cl \\<in> FL.Red_F_\\<G> N\n\ngoal (1 subgoal):\n 1. FL.active_subset {} = {}", "qed (simp add: FL.active_subset_def)"], ["proof (state)\nthis:\n  N \\<union> {Cl} \\<leadsto>GC N\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GC_reduction_step:\n  assumes\n    young: \"snd Dl \\<noteq> Old\" and\n    d_sub_c: \"fst Dl \\<subset># fst Cl\"\n  shows \"N \\<union> {Cl} \\<leadsto>GC N \\<union> {Dl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<union> {Cl} \\<leadsto>GC N \\<union> {Dl}", "proof (rule FL.step.process[of _ N \"{Cl}\" _ \"{Dl}\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. N \\<union> {Cl} = N \\<union> {Cl}\n 2. N \\<union> {Dl} = N \\<union> {Dl}\n 3. {Cl} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {Dl})\n 4. FL.active_subset {Dl} = {}", "have \"Cl \\<in> FL.Red_F {Dl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cl \\<in> FL.Red_F_\\<G> {Dl}", "proof (rule mem_FL_Red_F_because_G_Red_F)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))", "show \\<open>\\<forall>D \\<in> \\<G>_F (fst Cl). D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))", "using d_sub_c"], ["proof (prove)\nusing this:\n  fst Dl \\<subset># fst Cl\n\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>\\<G>_F (fst Cl).\n       D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))", "unfolding G.Red_F_def strictly_subsumes_def subsumes_def \\<G>_F_def"], ["proof (prove)\nusing this:\n  fst Dl \\<subset># fst Cl\n\ngoal (1 subgoal):\n 1. \\<forall>D\\<in>{fst Cl \\<cdot> \\<sigma> |\\<sigma>.\n                    is_ground_subst \\<sigma>}.\n       D \\<in> {C. \\<exists>DD\\<subseteq>\\<Union>C\\<in>fst ` {Dl}.\n      {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}.\n                      DD \\<TTurnstile>e {C} \\<and>\n                      (\\<forall>D\\<in>DD. D < C)}", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "fix \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "assume \\<open>is_ground_subst \\<sigma>\\<close>"], ["proof (state)\nthis:\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  is_ground_subst \\<sigma>", "have \\<open>{fst Dl \\<cdot> \\<sigma>} \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\\<close>"], ["proof (prove)\nusing this:\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. {fst Dl \\<cdot> \\<sigma>}\n    \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>}", "by blast"], ["proof (state)\nthis:\n  {fst Dl \\<cdot> \\<sigma>}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  {fst Dl \\<cdot> \\<sigma>}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "have \\<open>fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>", "using subst_subset_mono[OF d_sub_c, of \\<sigma>]"], ["proof (prove)\nusing this:\n  fst Dl \\<cdot> \\<sigma> \\<subset># fst Cl \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>", "by (simp add: subset_imp_less_mset)"], ["proof (state)\nthis:\n  fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "have \\<open>\\<forall>I. I \\<TTurnstile> fst Dl \\<cdot> \\<sigma> \\<longrightarrow> I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<TTurnstile> fst Dl \\<cdot> \\<sigma> \\<longrightarrow>\n       I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>", "using subst_subset_mono[OF d_sub_c] true_clss_subclause"], ["proof (prove)\nusing this:\n  fst Dl \\<cdot> ?\\<sigma> \\<subset># fst Cl \\<cdot> ?\\<sigma>\n  \\<lbrakk>?C \\<subseteq># ?D; ?I \\<TTurnstile>s {?C}\\<rbrakk>\n  \\<Longrightarrow> ?I \\<TTurnstile>s {?D}\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<TTurnstile> fst Dl \\<cdot> \\<sigma> \\<longrightarrow>\n       I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>", "by fast"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<TTurnstile> fst Dl \\<cdot> \\<sigma> \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>fst Dl \\<subseteq># fst Cl;\n        \\<not> fst Cl \\<subseteq># fst Dl; is_ground_subst \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\n          \\<sigma>. is_ground_subst \\<sigma>}.\n                            (\\<forall>I.\n                                I \\<TTurnstile>s DD \\<longrightarrow>\n                                I \\<TTurnstile>\n                                fst Cl \\<cdot> \\<sigma>) \\<and>\n                            (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "ultimately"], ["proof (chain)\npicking this:\n  {fst Dl \\<cdot> \\<sigma>}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n  fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>\n  \\<forall>I.\n     I \\<TTurnstile> fst Dl \\<cdot> \\<sigma> \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>", "show \\<open>\\<exists>DD \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}. (\\<forall>I. I \\<TTurnstile>s DD \\<longrightarrow> I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>)\n        \\<and> (\\<forall>D \\<in> DD. D < fst Cl \\<cdot> \\<sigma>)\\<close>"], ["proof (prove)\nusing this:\n  {fst Dl \\<cdot> \\<sigma>}\n  \\<subseteq> {fst Dl \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n  fst Dl \\<cdot> \\<sigma> < fst Cl \\<cdot> \\<sigma>\n  \\<forall>I.\n     I \\<TTurnstile> fst Dl \\<cdot> \\<sigma> \\<longrightarrow>\n     I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                           is_ground_subst \\<sigma>}.\n       (\\<forall>I.\n           I \\<TTurnstile>s DD \\<longrightarrow>\n           I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>) \\<and>\n       (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>{fst Dl \\<cdot> \\<sigma> |\\<sigma>.\n                         is_ground_subst \\<sigma>}.\n     (\\<forall>I.\n         I \\<TTurnstile>s DD \\<longrightarrow>\n         I \\<TTurnstile> fst Cl \\<cdot> \\<sigma>) \\<and>\n     (\\<forall>D\\<in>DD. D < fst Cl \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>D\\<in>\\<G>_F (fst Cl).\n     D \\<in> G.Red_F (\\<Union> (\\<G>_F ` fst ` {Dl}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}\n\ngoal (4 subgoals):\n 1. N \\<union> {Cl} = N \\<union> {Cl}\n 2. N \\<union> {Dl} = N \\<union> {Dl}\n 3. {Cl} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {Dl})\n 4. FL.active_subset {Dl} = {}", "then"], ["proof (chain)\npicking this:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}", "show \"{Cl} \\<subseteq> FL.Red_F (N \\<union> {Dl})\""], ["proof (prove)\nusing this:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}\n\ngoal (1 subgoal):\n 1. {Cl} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {Dl})", "using FL.Red_F_of_subset"], ["proof (prove)\nusing this:\n  Cl \\<in> FL.Red_F_\\<G> {Dl}\n  ?N \\<subseteq> ?N' \\<Longrightarrow>\n  FL.Red_F_\\<G> ?N \\<subseteq> FL.Red_F_\\<G> ?N'\n\ngoal (1 subgoal):\n 1. {Cl} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {Dl})", "by blast"], ["proof (state)\nthis:\n  {Cl} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {Dl})\n\ngoal (3 subgoals):\n 1. N \\<union> {Cl} = N \\<union> {Cl}\n 2. N \\<union> {Dl} = N \\<union> {Dl}\n 3. FL.active_subset {Dl} = {}", "qed (auto simp: FL.active_subset_def young)"], ["", "lemma GC_processing_step: \"N \\<union> {(C, New)} \\<leadsto>GC N \\<union> {(C, Processed)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<union> {(C, New)} \\<leadsto>GC N \\<union> {(C, Processed)}", "proof (rule FL.step.process[of _ N \"{(C, New)}\" _ \"{(C, Processed)}\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. N \\<union> {(C, New)} = N \\<union> {(C, New)}\n 2. N \\<union> {(C, Processed)} = N \\<union> {(C, Processed)}\n 3. {(C, New)} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {(C, Processed)})\n 4. FL.active_subset {(C, Processed)} = {}", "have \"(C, New) \\<in> FL.Red_F {(C, Processed)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C, New) \\<in> FL.Red_F_\\<G> {(C, Processed)}", "by (rule mem_FL_Red_F_because_Prec_FL) (simp add: FL.Prec_FL_def generalizes_refl)"], ["proof (state)\nthis:\n  (C, New) \\<in> FL.Red_F_\\<G> {(C, Processed)}\n\ngoal (4 subgoals):\n 1. N \\<union> {(C, New)} = N \\<union> {(C, New)}\n 2. N \\<union> {(C, Processed)} = N \\<union> {(C, Processed)}\n 3. {(C, New)} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {(C, Processed)})\n 4. FL.active_subset {(C, Processed)} = {}", "then"], ["proof (chain)\npicking this:\n  (C, New) \\<in> FL.Red_F_\\<G> {(C, Processed)}", "show \"{(C, New)} \\<subseteq> FL.Red_F (N \\<union> {(C, Processed)})\""], ["proof (prove)\nusing this:\n  (C, New) \\<in> FL.Red_F_\\<G> {(C, Processed)}\n\ngoal (1 subgoal):\n 1. {(C, New)} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {(C, Processed)})", "using FL.Red_F_of_subset"], ["proof (prove)\nusing this:\n  (C, New) \\<in> FL.Red_F_\\<G> {(C, Processed)}\n  ?N \\<subseteq> ?N' \\<Longrightarrow>\n  FL.Red_F_\\<G> ?N \\<subseteq> FL.Red_F_\\<G> ?N'\n\ngoal (1 subgoal):\n 1. {(C, New)} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {(C, Processed)})", "by blast"], ["proof (state)\nthis:\n  {(C, New)} \\<subseteq> FL.Red_F_\\<G> (N \\<union> {(C, Processed)})\n\ngoal (3 subgoals):\n 1. N \\<union> {(C, New)} = N \\<union> {(C, New)}\n 2. N \\<union> {(C, Processed)} = N \\<union> {(C, Processed)}\n 3. FL.active_subset {(C, Processed)} = {}", "qed (auto simp: FL.active_subset_def)"], ["", "lemma old_inferences_between_eq_new_inferences_between:\n  \"old_concl_of ` inference_system.inferences_between (ord_FO_\\<Gamma> S) N C =\n   concl_of ` F.Inf_between N {C}\" (is \"?rp = ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. old_concls_of\n     (inference_system.inferences_between (ord_FO_\\<Gamma> S) N C) =\n    concl_of ` F.Inf_between N {C}", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C) \\<Longrightarrow>\n       x \\<in> concl_of ` F.Inf_between N {C}\n 2. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "fix E"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C) \\<Longrightarrow>\n       x \\<in> concl_of ` F.Inf_between N {C}\n 2. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "assume e_in: \"E \\<in> old_concl_of ` inference_system.inferences_between (ord_FO_\\<Gamma> S) N C\""], ["proof (state)\nthis:\n  E \\<in> old_concls_of\n           (inference_system.inferences_between (ord_FO_\\<Gamma> S) N C)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C) \\<Longrightarrow>\n       x \\<in> concl_of ` F.Inf_between N {C}\n 2. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "obtain CAs DA AAs As \\<sigma> where\n    e_res: \"ord_resolve_rename S CAs DA AAs As \\<sigma> E\" and\n    cd_sub: \"set CAs \\<union> {DA} \\<subseteq> N \\<union> {C}\" and\n    c_in: \"C \\<in> set CAs \\<union> {DA}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs DA AAs As \\<sigma> E;\n         set CAs \\<union> {DA} \\<subseteq> N \\<union> {C};\n         C \\<in> set CAs \\<union> {DA}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_in"], ["proof (prove)\nusing this:\n  E \\<in> old_concls_of\n           (inference_system.inferences_between (ord_FO_\\<Gamma> S) N C)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs DA AAs As \\<sigma> E;\n         set CAs \\<union> {DA} \\<subseteq> N \\<union> {C};\n         C \\<in> set CAs \\<union> {DA}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding inference_system.inferences_between_def infer_from_def ord_FO_\\<Gamma>_def"], ["proof (prove)\nusing this:\n  E \\<in> old_concls_of\n           {\\<gamma>\n            \\<in> {uu_.\n                   \\<exists>CAs DA AAs As \\<sigma> E.\n                      uu_ = old_Infer (mset CAs) DA E \\<and>\n                      ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n            set_mset\n             (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n            \\<subseteq> N \\<union> {C} \\<and>\n            C \\<in># old_side_prems_of \\<gamma> +\n                     {#old_main_prem_of \\<gamma>#}}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs DA AAs As \\<sigma> E;\n         set CAs \\<union> {DA} \\<subseteq> N \\<union> {C};\n         C \\<in> set CAs \\<union> {DA}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ord_resolve_rename S CAs DA AAs As \\<sigma> E\n  set CAs \\<union> {DA} \\<subseteq> N \\<union> {C}\n  C \\<in> set CAs \\<union> {DA}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C) \\<Longrightarrow>\n       x \\<in> concl_of ` F.Inf_between N {C}\n 2. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "show \"E \\<in> concl_of ` F.Inf_between N {C}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> concl_of ` F.Inf_between N {C}", "unfolding F.Inf_between_alt F.Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> concl_of `\n            {\\<iota> \\<in> F_Inf.\n             \\<iota>\n             \\<in> {\\<iota> \\<in> F_Inf.\n                    set (prems_of \\<iota>)\n                    \\<subseteq> N \\<union> {C}} \\<and>\n             set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. E \\<in> concl_of `\n            {\\<iota> \\<in> F_Inf.\n             \\<iota>\n             \\<in> {\\<iota> \\<in> F_Inf.\n                    set (prems_of \\<iota>)\n                    \\<subseteq> N \\<union> {C}} \\<and>\n             set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}", "have \\<open>Infer (CAs @ [DA]) E \\<in> F_Inf \\<and> set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> insert C N \\<and>\n      C \\<in> set (prems_of (Infer (CAs @ [DA]) E)) \\<and> E = concl_of (Infer (CAs @ [DA]) E)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (CAs @ [DA]) E \\<in> F_Inf \\<and>\n    set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> insert C N \\<and>\n    C \\<in> set (prems_of (Infer (CAs @ [DA]) E)) \\<and>\n    E = concl_of (Infer (CAs @ [DA]) E)", "using e_res cd_sub c_in F_Inf_def"], ["proof (prove)\nusing this:\n  ord_resolve_rename S CAs DA AAs As \\<sigma> E\n  set CAs \\<union> {DA} \\<subseteq> N \\<union> {C}\n  C \\<in> set CAs \\<union> {DA}\n  F_Inf =\n  {uu_.\n   \\<exists>CAs DA AAs As \\<sigma> E.\n      uu_ = Infer (CAs @ [DA]) E \\<and>\n      ord_resolve_rename S CAs DA AAs As \\<sigma> E}\n\ngoal (1 subgoal):\n 1. Infer (CAs @ [DA]) E \\<in> F_Inf \\<and>\n    set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> insert C N \\<and>\n    C \\<in> set (prems_of (Infer (CAs @ [DA]) E)) \\<and>\n    E = concl_of (Infer (CAs @ [DA]) E)", "by auto"], ["proof (state)\nthis:\n  Infer (CAs @ [DA]) E \\<in> F_Inf \\<and>\n  set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> insert C N \\<and>\n  C \\<in> set (prems_of (Infer (CAs @ [DA]) E)) \\<and>\n  E = concl_of (Infer (CAs @ [DA]) E)\n\ngoal (1 subgoal):\n 1. E \\<in> concl_of `\n            {\\<iota> \\<in> F_Inf.\n             \\<iota>\n             \\<in> {\\<iota> \\<in> F_Inf.\n                    set (prems_of \\<iota>)\n                    \\<subseteq> N \\<union> {C}} \\<and>\n             set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}", "then"], ["proof (chain)\npicking this:\n  Infer (CAs @ [DA]) E \\<in> F_Inf \\<and>\n  set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> insert C N \\<and>\n  C \\<in> set (prems_of (Infer (CAs @ [DA]) E)) \\<and>\n  E = concl_of (Infer (CAs @ [DA]) E)", "show \\<open>E \\<in> concl_of ` {\\<iota> \\<in> F_Inf. \\<iota> \\<in> {\\<iota> \\<in> F_Inf. set (prems_of \\<iota>) \\<subseteq> N \\<union> {C}} \\<and>\n      set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}\\<close>"], ["proof (prove)\nusing this:\n  Infer (CAs @ [DA]) E \\<in> F_Inf \\<and>\n  set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> insert C N \\<and>\n  C \\<in> set (prems_of (Infer (CAs @ [DA]) E)) \\<and>\n  E = concl_of (Infer (CAs @ [DA]) E)\n\ngoal (1 subgoal):\n 1. E \\<in> concl_of `\n            {\\<iota> \\<in> F_Inf.\n             \\<iota>\n             \\<in> {\\<iota> \\<in> F_Inf.\n                    set (prems_of \\<iota>)\n                    \\<subseteq> N \\<union> {C}} \\<and>\n             set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}", "by (smt Un_insert_right boolean_algebra_cancel.sup0 disjoint_insert mem_Collect_eq image_def)"], ["proof (state)\nthis:\n  E \\<in> concl_of `\n          {\\<iota> \\<in> F_Inf.\n           \\<iota>\n           \\<in> {\\<iota> \\<in> F_Inf.\n                  set (prems_of \\<iota>) \\<subseteq> N \\<union> {C}} \\<and>\n           set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E \\<in> concl_of ` F.Inf_between N {C}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "assume e_in: \"E \\<in> concl_of ` F.Inf_between N {C}\""], ["proof (state)\nthis:\n  E \\<in> concl_of ` F.Inf_between N {C}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "obtain CAs DA AAs As \\<sigma> where\n    e_res: \"ord_resolve_rename S CAs DA AAs As \\<sigma> E\" and\n    cd_sub: \"set CAs \\<union> {DA} \\<subseteq> N \\<union> {C}\" and\n    c_in: \"C \\<in> set CAs \\<union> {DA}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs DA AAs As \\<sigma> E;\n         set CAs \\<union> {DA} \\<subseteq> N \\<union> {C};\n         C \\<in> set CAs \\<union> {DA}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_in"], ["proof (prove)\nusing this:\n  E \\<in> concl_of ` F.Inf_between N {C}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs DA AAs As \\<sigma> E;\n         set CAs \\<union> {DA} \\<subseteq> N \\<union> {C};\n         C \\<in> set CAs \\<union> {DA}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding F.Inf_between_alt F.Inf_from_def F_Inf_def inference_system.Inf_between_alt\n      inference_system.Inf_from_def"], ["proof (prove)\nusing this:\n  E \\<in> concl_of `\n          {\\<iota>\n           \\<in> {uu_.\n                  \\<exists>CAs DA AAs As \\<sigma> E.\n                     uu_ = Infer (CAs @ [DA]) E \\<and>\n                     ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n           \\<iota>\n           \\<in> {\\<iota>\n                  \\<in> {uu_.\n                         \\<exists>CAs DA AAs As \\<sigma> E.\n                            uu_ = Infer (CAs @ [DA]) E \\<and>\n                            ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n                  set (prems_of \\<iota>) \\<subseteq> N \\<union> {C}} \\<and>\n           set (prems_of \\<iota>) \\<inter> {C} \\<noteq> {}}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs DA AAs As \\<sigma>.\n        \\<lbrakk>ord_resolve_rename S CAs DA AAs As \\<sigma> E;\n         set CAs \\<union> {DA} \\<subseteq> N \\<union> {C};\n         C \\<in> set CAs \\<union> {DA}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: image_def Bex_def)"], ["proof (state)\nthis:\n  ord_resolve_rename S CAs DA AAs As \\<sigma> E\n  set CAs \\<union> {DA} \\<subseteq> N \\<union> {C}\n  C \\<in> set CAs \\<union> {DA}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> concl_of ` F.Inf_between N {C} \\<Longrightarrow>\n       x \\<in> old_concls_of\n                (inference_system.inferences_between (ord_FO_\\<Gamma> S) N\n                  C)", "show \"E \\<in> old_concl_of ` inference_system.inferences_between (ord_FO_\\<Gamma> S) N C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> old_concls_of\n             (inference_system.inferences_between (ord_FO_\\<Gamma> S) N C)", "unfolding inference_system.inferences_between_def infer_from_def ord_FO_\\<Gamma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> old_concls_of\n             {\\<gamma>\n              \\<in> {uu_.\n                     \\<exists>CAs DA AAs As \\<sigma> E.\n                        uu_ = old_Infer (mset CAs) DA E \\<and>\n                        ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n              set_mset\n               (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n              \\<subseteq> N \\<union> {C} \\<and>\n              C \\<in># old_side_prems_of \\<gamma> +\n                       {#old_main_prem_of \\<gamma>#}}", "using e_res cd_sub c_in"], ["proof (prove)\nusing this:\n  ord_resolve_rename S CAs DA AAs As \\<sigma> E\n  set CAs \\<union> {DA} \\<subseteq> N \\<union> {C}\n  C \\<in> set CAs \\<union> {DA}\n\ngoal (1 subgoal):\n 1. E \\<in> old_concls_of\n             {\\<gamma>\n              \\<in> {uu_.\n                     \\<exists>CAs DA AAs As \\<sigma> E.\n                        uu_ = old_Infer (mset CAs) DA E \\<and>\n                        ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n              set_mset\n               (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n              \\<subseteq> N \\<union> {C} \\<and>\n              C \\<in># old_side_prems_of \\<gamma> +\n                       {#old_main_prem_of \\<gamma>#}}", "by (clarsimp simp: image_def Bex_def, rule_tac x = \"old_Infer (mset CAs) DA E\" in exI, auto)"], ["proof (state)\nthis:\n  E \\<in> old_concls_of\n           (inference_system.inferences_between (ord_FO_\\<Gamma> S) N C)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GC_inference_step:\n  assumes\n    young: \"l \\<noteq> Old\" and\n    no_active: \"FL.active_subset M = {}\" and\n    m_sup: \"fst ` M \\<supseteq> old_concl_of ` inference_system.inferences_between (ord_FO_\\<Gamma> S)\n      (fst ` FL.active_subset N) C\"\n  shows \"N \\<union> {(C, l)} \\<leadsto>GC N \\<union> {(C, Old)} \\<union> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<union> {(C, l)} \\<leadsto>GC N \\<union> {(C, Old)} \\<union> M", "proof (rule FL.step.infer[of _ N C l _ M])"], ["proof (state)\ngoal (5 subgoals):\n 1. N \\<union> {(C, l)} = N \\<union> {(C, l)}\n 2. N \\<union> {(C, Old)} \\<union> M = N \\<union> {(C, Old)} \\<union> M\n 3. l \\<noteq> Old\n 4. FL.active_subset M = {}\n 5. F.Inf_between (fst ` FL.active_subset N) {C}\n    \\<subseteq> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "have m_sup': \"fst ` M \\<supseteq> concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n    \\<subseteq> fst ` M", "using m_sup"], ["proof (prove)\nusing this:\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n     (fst ` FL.active_subset N) C)\n  \\<subseteq> fst ` M\n\ngoal (1 subgoal):\n 1. concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n    \\<subseteq> fst ` M", "unfolding old_inferences_between_eq_new_inferences_between"], ["proof (prove)\nusing this:\n  concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n  \\<subseteq> fst ` M\n\ngoal (1 subgoal):\n 1. concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n    \\<subseteq> fst ` M", "."], ["proof (state)\nthis:\n  concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n  \\<subseteq> fst ` M\n\ngoal (5 subgoals):\n 1. N \\<union> {(C, l)} = N \\<union> {(C, l)}\n 2. N \\<union> {(C, Old)} \\<union> M = N \\<union> {(C, Old)} \\<union> M\n 3. l \\<noteq> Old\n 4. FL.active_subset M = {}\n 5. F.Inf_between (fst ` FL.active_subset N) {C}\n    \\<subseteq> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "show \"F.Inf_between (fst ` FL.active_subset N) {C} \\<subseteq> F.Red_I (fst ` (N \\<union> {(C, Old)} \\<union> M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F.Inf_between (fst ` FL.active_subset N) {C}\n    \\<subseteq> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F.Inf_between (fst ` FL.active_subset N)\n                {C} \\<Longrightarrow>\n       x \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "fix \\<iota>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F.Inf_between (fst ` FL.active_subset N)\n                {C} \\<Longrightarrow>\n       x \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "assume \\<iota>_in_if2: \"\\<iota> \\<in> F.Inf_between (fst ` FL.active_subset N) {C}\""], ["proof (state)\nthis:\n  \\<iota> \\<in> F.Inf_between (fst ` FL.active_subset N) {C}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F.Inf_between (fst ` FL.active_subset N)\n                {C} \\<Longrightarrow>\n       x \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "note \\<iota>_in = F.Inf_if_Inf_between[OF \\<iota>_in_if2]"], ["proof (state)\nthis:\n  \\<iota> \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F.Inf_between (fst ` FL.active_subset N)\n                {C} \\<Longrightarrow>\n       x \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "have \"concl_of \\<iota> \\<in> fst ` M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concl_of \\<iota> \\<in> fst ` M", "using m_sup' \\<iota>_in_if2 m_sup'"], ["proof (prove)\nusing this:\n  concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n  \\<subseteq> fst ` M\n  \\<iota> \\<in> F.Inf_between (fst ` FL.active_subset N) {C}\n  concl_of ` F.Inf_between (fst ` FL.active_subset N) {C}\n  \\<subseteq> fst ` M\n\ngoal (1 subgoal):\n 1. concl_of \\<iota> \\<in> fst ` M", "by (auto simp: image_def Collect_mono_iff F.Inf_between_alt)"], ["proof (state)\nthis:\n  concl_of \\<iota> \\<in> fst ` M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F.Inf_between (fst ` FL.active_subset N)\n                {C} \\<Longrightarrow>\n       x \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "then"], ["proof (chain)\npicking this:\n  concl_of \\<iota> \\<in> fst ` M", "have \"concl_of \\<iota> \\<in> fst ` (N \\<union> {(C, Old)} \\<union> M)\""], ["proof (prove)\nusing this:\n  concl_of \\<iota> \\<in> fst ` M\n\ngoal (1 subgoal):\n 1. concl_of \\<iota> \\<in> fst ` (N \\<union> {(C, Old)} \\<union> M)", "by auto"], ["proof (state)\nthis:\n  concl_of \\<iota> \\<in> fst ` (N \\<union> {(C, Old)} \\<union> M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F.Inf_between (fst ` FL.active_subset N)\n                {C} \\<Longrightarrow>\n       x \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "then"], ["proof (chain)\npicking this:\n  concl_of \\<iota> \\<in> fst ` (N \\<union> {(C, Old)} \\<union> M)", "show \"\\<iota> \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))\""], ["proof (prove)\nusing this:\n  concl_of \\<iota> \\<in> fst ` (N \\<union> {(C, Old)} \\<union> M)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))", "by (rule F.Red_I_of_Inf_to_N[OF \\<iota>_in])"], ["proof (state)\nthis:\n  \\<iota> \\<in> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F.Inf_between (fst ` FL.active_subset N) {C}\n  \\<subseteq> F.Red_I_\\<G> (fst ` (N \\<union> {(C, Old)} \\<union> M))\n\ngoal (4 subgoals):\n 1. N \\<union> {(C, l)} = N \\<union> {(C, l)}\n 2. N \\<union> {(C, Old)} \\<union> M = N \\<union> {(C, Old)} \\<union> M\n 3. l \\<noteq> Old\n 4. FL.active_subset M = {}", "qed (use young no_active in auto)"], ["", "lemma RP_step_imp_GC_step: \"St \\<leadsto>RP St' \\<Longrightarrow> lclss_of_state St \\<leadsto>GC lclss_of_state St'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. St \\<leadsto>RP St' \\<Longrightarrow>\n    lclss_of_state St \\<leadsto>GC lclss_of_state St'", "proof (induction rule: RP.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 8. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 9. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (tautology_deletion A C N P Q)"], ["proof (state)\nthis:\n  Neg A \\<in># C\n  Pos A \\<in># C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 8. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 9. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "then"], ["proof (chain)\npicking this:\n  Neg A \\<in># C\n  Pos A \\<in># C", "show ?case"], ["proof (prove)\nusing this:\n  Neg A \\<in># C\n  Pos A \\<in># C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "by (rule GC_tautology_step)"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 8. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 8. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (forward_subsumption D P Q C N)"], ["proof (state)\nthis:\n  D \\<in> P \\<union> Q\n  subsumes D C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 8. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "note d_in = this(1) and d_sub_c = this(2)"], ["proof (state)\nthis:\n  D \\<in> P \\<union> Q\n  subsumes D C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 8. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "proof (cases \"D \\<in> P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. D \\<in> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)\n 2. D \\<notin> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "case True"], ["proof (state)\nthis:\n  D \\<in> P\n\ngoal (2 subgoals):\n 1. D \\<in> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)\n 2. D \\<notin> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "then"], ["proof (chain)\npicking this:\n  D \\<in> P", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> P\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "using GC_subsumption_step[of \"(D, Processed)\" \"lclss_of_state (N, P, Q)\" \"(C, New)\"] d_sub_c"], ["proof (prove)\nusing this:\n  D \\<in> P\n  \\<lbrakk>(D, Processed) \\<in> lclss_of_state (N, P, Q);\n   strictly_subsumes (fst (D, Processed)) (fst (C, New)) \\<or>\n   subsumes (fst (D, Processed)) (fst (C, New)) \\<and>\n   snd (D, Processed) \\<sqsubset>l snd (C, New)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C, New)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q)\n  subsumes D C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal (1 subgoal):\n 1. D \\<notin> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<notin> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "case False"], ["proof (state)\nthis:\n  D \\<notin> P\n\ngoal (1 subgoal):\n 1. D \\<notin> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "then"], ["proof (chain)\npicking this:\n  D \\<notin> P", "have \"D \\<in> Q\""], ["proof (prove)\nusing this:\n  D \\<notin> P\n\ngoal (1 subgoal):\n 1. D \\<in> Q", "using d_in"], ["proof (prove)\nusing this:\n  D \\<notin> P\n  D \\<in> P \\<union> Q\n\ngoal (1 subgoal):\n 1. D \\<in> Q", "by simp"], ["proof (state)\nthis:\n  D \\<in> Q\n\ngoal (1 subgoal):\n 1. D \\<notin> P \\<Longrightarrow>\n    lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "then"], ["proof (chain)\npicking this:\n  D \\<in> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> Q\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "using GC_subsumption_step[of \"(D, Old)\" \"lclss_of_state (N, P, Q)\" \"(C, New)\"] d_sub_c"], ["proof (prove)\nusing this:\n  D \\<in> Q\n  \\<lbrakk>(D, Old) \\<in> lclss_of_state (N, P, Q);\n   strictly_subsumes (fst (D, Old)) (fst (C, New)) \\<or>\n   subsumes (fst (D, Old)) (fst (C, New)) \\<and>\n   snd (D, Old) \\<sqsubset>l snd (C, New)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C, New)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q)\n  subsumes D C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (backward_subsumption_P D N C P Q)"], ["proof (state)\nthis:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "note d_in = this(1) and d_ssub_c = this(2)"], ["proof (state)\nthis:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 7. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "then"], ["proof (chain)\npicking this:\n  D \\<in> N\n  strictly_subsumes D C", "show ?case"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "using GC_subsumption_step[of \"(D, New)\" \"lclss_of_state (N, P, Q)\" \"(C, Processed)\"] d_ssub_c"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n  \\<lbrakk>(D, New) \\<in> lclss_of_state (N, P, Q);\n   strictly_subsumes (fst (D, New)) (fst (C, Processed)) \\<or>\n   subsumes (fst (D, New)) (fst (C, Processed)) \\<and>\n   snd (D, New) \\<sqsubset>l snd (C, Processed)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C, Processed)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q)\n  strictly_subsumes D C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N, P \\<union> {C}, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (backward_subsumption_Q D N C P Q)"], ["proof (state)\nthis:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "note d_in = this(1) and d_ssub_c = this(2)"], ["proof (state)\nthis:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n                         lclss_of_state (N, P, Q)\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 6. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "then"], ["proof (chain)\npicking this:\n  D \\<in> N\n  strictly_subsumes D C", "show ?case"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "using GC_subsumption_step[of \"(D, New)\" \"lclss_of_state (N, P, Q)\" \"(C, Old)\"] d_ssub_c"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n  \\<lbrakk>(D, New) \\<in> lclss_of_state (N, P, Q);\n   strictly_subsumes (fst (D, New)) (fst (C, Old)) \\<or>\n   subsumes (fst (D, New)) (fst (C, Old)) \\<and>\n   snd (D, New) \\<sqsubset>l snd (C, Old)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C, Old)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q)\n  strictly_subsumes D C\n\ngoal (1 subgoal):\n 1. lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n    lclss_of_state (N, P, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N, P, Q \\<union> {C}) \\<leadsto>GC\n  lclss_of_state (N, P, Q)\n\ngoal (5 subgoals):\n 1. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (forward_reduction D L' P Q L \\<sigma> C N)"], ["proof (state)\nthis:\n  D + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (5 subgoals):\n 1. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n                         lclss_of_state (N \\<union> {C}, P, Q)\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 5. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n    lclss_of_state (N \\<union> {C}, P, Q)", "using GC_reduction_step[of \"(C, New)\" \"(C + {#L#}, New)\" \"lclss_of_state (N, P, Q)\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (C, New) \\<noteq> Old;\n   fst (C, New) \\<subset># fst (C + {#L#}, New)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C + {#L#}, New)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q) \\<union> {(C, New)}\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n    lclss_of_state (N \\<union> {C}, P, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C + {#L#}}, P, Q) \\<leadsto>GC\n  lclss_of_state (N \\<union> {C}, P, Q)\n\ngoal (4 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (backward_reduction_P D L' N L \\<sigma> C P Q)"], ["proof (state)\nthis:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (4 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 4. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n    lclss_of_state (N, P \\<union> {C}, Q)", "using GC_reduction_step[of \"(C, Processed)\" \"(C + {#L#}, Processed)\" \"lclss_of_state (N, P, Q)\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (C, Processed) \\<noteq> Old;\n   fst (C, Processed) \\<subset># fst (C + {#L#}, Processed)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C + {#L#}, Processed)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q) \\<union> {(C, Processed)}\n\ngoal (1 subgoal):\n 1. lclss_of_state (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n    lclss_of_state (N, P \\<union> {C}, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N, P \\<union> {C + {#L#}}, Q) \\<leadsto>GC\n  lclss_of_state (N, P \\<union> {C}, Q)\n\ngoal (3 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (backward_reduction_Q D L' N L \\<sigma> C P Q)"], ["proof (state)\nthis:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (3 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> lclss_of_state\n                          (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n                         lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 3. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n    lclss_of_state (N, P \\<union> {C}, Q)", "using GC_reduction_step[of \"(C, Processed)\" \"(C + {#L#}, Old)\" \"lclss_of_state (N, P, Q)\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (C, Processed) \\<noteq> Old;\n   fst (C, Processed) \\<subset># fst (C + {#L#}, Old)\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state (N, P, Q) \\<union>\n                    {(C + {#L#}, Old)} \\<leadsto>GC\n                    lclss_of_state (N, P, Q) \\<union> {(C, Processed)}\n\ngoal (1 subgoal):\n 1. lclss_of_state (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n    lclss_of_state (N, P \\<union> {C}, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N, P, Q \\<union> {C + {#L#}}) \\<leadsto>GC\n  lclss_of_state (N, P \\<union> {C}, Q)\n\ngoal (2 subgoals):\n 1. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (clause_processing N C P Q)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>N C P Q.\n       lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n       lclss_of_state (N, P \\<union> {C}, Q)\n 2. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P \\<union> {C}, Q)", "using GC_processing_step[of \"lclss_of_state (N, P, Q)\" C]"], ["proof (prove)\nusing this:\n  lclss_of_state (N, P, Q) \\<union> {(C, New)} \\<leadsto>GC\n  lclss_of_state (N, P, Q) \\<union> {(C, Processed)}\n\ngoal (1 subgoal):\n 1. lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n    lclss_of_state (N, P \\<union> {C}, Q)", "by auto"], ["proof (state)\nthis:\n  lclss_of_state (N \\<union> {C}, P, Q) \\<leadsto>GC\n  lclss_of_state (N, P \\<union> {C}, Q)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "case (inference_computation N Q C P)"], ["proof (state)\nthis:\n  N =\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q C)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "note n = this(1)"], ["proof (state)\nthis:\n  N =\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q C)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       old_concls_of\n        (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q\n          C) \\<Longrightarrow>\n       lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n       lclss_of_state (N, P, Q \\<union> {C})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "have \\<open>FL.active_subset (lclss_of_state (N, {}, {})) = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.active_subset (lclss_of_state (N, {}, {})) = {}", "unfolding n"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.active_subset\n     (lclss_of_state\n       (old_concls_of\n         (inference_system.inferences_between (ord_FO_\\<Gamma> S) Q C),\n        {}, {})) =\n    {}", "by (auto simp: FL.active_subset_def)"], ["proof (state)\nthis:\n  FL.active_subset (lclss_of_state (N, {}, {})) = {}\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "moreover"], ["proof (state)\nthis:\n  FL.active_subset (lclss_of_state (N, {}, {})) = {}\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "have \\<open>old_concls_of (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n      (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C) \\<subseteq> N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. old_concls_of\n     (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n       (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C)\n    \\<subseteq> N", "unfolding n inference_system.inferences_between_def image_def mem_Collect_eq\n        lclss_of_state_def infer_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{\\<gamma> \\<in> ord_FO_\\<Gamma> S.\n                        set_mset\n                         (old_side_prems_of \\<gamma> +\n                          {#old_main_prem_of \\<gamma>#})\n                        \\<subseteq> {y. \\<exists>x\n           \\<in>FL.active_subset\n                 ({y. \\<exists>x\\<in>N_of_state ({}, P, Q).\n                         y = (x, New)} \\<union>\n                  {y. \\<exists>x\\<in>P_of_state ({}, P, Q).\n                         y = (x, Processed)} \\<union>\n                  {y. \\<exists>x\\<in>Q_of_state ({}, P, Q). y = (x, Old)}).\n     y = fst x} \\<union>\n                                    {C} \\<and>\n                        C \\<in># old_side_prems_of \\<gamma> +\n                                 {#old_main_prem_of \\<gamma>#}}.\n           y = old_concl_of x}\n    \\<subseteq> {y. \\<exists>x\\<in>{\\<gamma> \\<in> ord_FO_\\<Gamma> S.\n                                    set_mset\n                                     (old_side_prems_of \\<gamma> +\n{#old_main_prem_of \\<gamma>#})\n                                    \\<subseteq> Q \\<union> {C} \\<and>\n                                    C \\<in># old_side_prems_of \\<gamma> +\n       {#old_main_prem_of \\<gamma>#}}.\n                       y = old_concl_of x}", "by (auto simp: FL.active_subset_def)"], ["proof (state)\nthis:\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n     (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C)\n  \\<subseteq> N\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "ultimately"], ["proof (chain)\npicking this:\n  FL.active_subset (lclss_of_state (N, {}, {})) = {}\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n     (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C)\n  \\<subseteq> N", "have \\<open>lclss_of_state ({}, insert C P, Q) \\<leadsto>GC lclss_of_state (N, P, insert C Q)\\<close>"], ["proof (prove)\nusing this:\n  FL.active_subset (lclss_of_state (N, {}, {})) = {}\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n     (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C)\n  \\<subseteq> N\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, insert C P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, insert C Q)", "using GC_inference_step[of Processed \"lclss_of_state (N, {}, {})\"\n        \"lclss_of_state ({}, P, Q)\" C, simplified]"], ["proof (prove)\nusing this:\n  FL.active_subset (lclss_of_state (N, {}, {})) = {}\n  old_concls_of\n   (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n     (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C)\n  \\<subseteq> N\n  \\<lbrakk>FL.active_subset (lclss_of_state (N, {}, {})) = {};\n   old_concls_of\n    (inference_system.inferences_between (ord_FO_\\<Gamma> S)\n      (fst ` FL.active_subset (lclss_of_state ({}, P, Q))) C)\n   \\<subseteq> N\\<rbrakk>\n  \\<Longrightarrow> lclss_of_state ({}, insert C P, Q) \\<leadsto>GC\n                    lclss_of_state (N, P, insert C Q)\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, insert C P, Q) \\<leadsto>GC\n    lclss_of_state (N, P, insert C Q)", "by blast"], ["proof (state)\nthis:\n  lclss_of_state ({}, insert C P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, insert C Q)\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "then"], ["proof (chain)\npicking this:\n  lclss_of_state ({}, insert C P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, insert C Q)", "show ?case"], ["proof (prove)\nusing this:\n  lclss_of_state ({}, insert C P, Q) \\<leadsto>GC\n  lclss_of_state (N, P, insert C Q)\n\ngoal (1 subgoal):\n 1. lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n    lclss_of_state (N, P, Q \\<union> {C})", "by (auto simp: FL.active_subset_def)"], ["proof (state)\nthis:\n  lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q \\<union> {C})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lclss_of_state ({}, P \\<union> {C}, Q) \\<leadsto>GC\n  lclss_of_state (N, P, Q \\<union> {C})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma RP_derivation_imp_GC_derivation: \"chain (\\<leadsto>RP) Sts \\<Longrightarrow> chain (\\<leadsto>GC) (lmap lclss_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<leadsto>RP) Sts \\<Longrightarrow>\n    chain (\\<leadsto>GC) (lmap lclss_of_state Sts)", "using chain_lmap RP_step_imp_GC_step"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x y. ?R x y \\<longrightarrow> ?R' (?f x) (?f y);\n   chain ?R ?xs\\<rbrakk>\n  \\<Longrightarrow> chain ?R' (lmap ?f ?xs)\n  ?St \\<leadsto>RP ?St' \\<Longrightarrow>\n  lclss_of_state ?St \\<leadsto>GC lclss_of_state ?St'\n\ngoal (1 subgoal):\n 1. chain (\\<leadsto>RP) Sts \\<Longrightarrow>\n    chain (\\<leadsto>GC) (lmap lclss_of_state Sts)", "by blast"], ["", "lemma RP_step_imp_derive_step: \"St \\<leadsto>RP St' \\<Longrightarrow> lclss_of_state St \\<rhd>L lclss_of_state St'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. St \\<leadsto>RP St' \\<Longrightarrow>\n    lclss_of_state St \\<rhd>L lclss_of_state St'", "by (rule FL.one_step_equiv) (rule RP_step_imp_GC_step)"], ["", "lemma RP_derivation_imp_derive_derivation:\n  \"chain (\\<leadsto>RP) Sts \\<Longrightarrow> chain (\\<rhd>L) (lmap lclss_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<leadsto>RP) Sts \\<Longrightarrow>\n    chain (\\<rhd>L) (lmap lclss_of_state Sts)", "using chain_lmap RP_step_imp_derive_step"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x y. ?R x y \\<longrightarrow> ?R' (?f x) (?f y);\n   chain ?R ?xs\\<rbrakk>\n  \\<Longrightarrow> chain ?R' (lmap ?f ?xs)\n  ?St \\<leadsto>RP ?St' \\<Longrightarrow>\n  lclss_of_state ?St \\<rhd>L lclss_of_state ?St'\n\ngoal (1 subgoal):\n 1. chain (\\<leadsto>RP) Sts \\<Longrightarrow>\n    chain (\\<rhd>L) (lmap lclss_of_state Sts)", "by blast"], ["", "theorem RP_sound_new_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    bot_in: \"{#} \\<in> clss_of_state (Liminf_state Sts)\"\n  shows \"clss_of_state (lhd Sts) \\<TTurnstile>\\<G>e {{#}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "have \"clss_of_state (Liminf_state Sts) \\<TTurnstile>\\<G>e {{#}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) \\<union>\n    P_of_state (Liminf_state Sts) \\<union>\n    Q_of_state (Liminf_state Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "using F.subset_entailed bot_in"], ["proof (prove)\nusing this:\n  ?N2.0 \\<subseteq> ?N1.0 \\<Longrightarrow> ?N1.0 \\<TTurnstile>\\<G>e ?N2.0\n  {#}\n  \\<in> N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) \\<union>\n    P_of_state (Liminf_state Sts) \\<union>\n    Q_of_state (Liminf_state Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "by auto"], ["proof (state)\nthis:\n  N_of_state (Liminf_state Sts) \\<union>\n  P_of_state (Liminf_state Sts) \\<union>\n  Q_of_state (Liminf_state Sts) \\<TTurnstile>\\<G>e\n  {{#}}\n\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "then"], ["proof (chain)\npicking this:\n  N_of_state (Liminf_state Sts) \\<union>\n  P_of_state (Liminf_state Sts) \\<union>\n  Q_of_state (Liminf_state Sts) \\<TTurnstile>\\<G>e\n  {{#}}", "have \"fst ` Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}\""], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts) \\<union>\n  P_of_state (Liminf_state Sts) \\<union>\n  Q_of_state (Liminf_state Sts) \\<TTurnstile>\\<G>e\n  {{#}}\n\ngoal (1 subgoal):\n 1. fst ` Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}", "by (metis image_hd_lclss_of_state lclss_Liminf_commute)"], ["proof (state)\nthis:\n  fst ` Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}\n\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "then"], ["proof (chain)\npicking this:\n  fst ` Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}", "have \"Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>Le FL.Bot_FL\""], ["proof (prove)\nusing this:\n  fst ` Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV)", "using FL.labeled_entailment_lifting"], ["proof (prove)\nusing this:\n  fst ` Liminf_llist (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}\n  FL.entails_\\<G> ?NL1.0 ?NL2.0 =\n  (fst ` ?NL1.0 \\<TTurnstile>\\<G>e fst ` ?NL2.0)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV)", "by simp"], ["proof (state)\nthis:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "then"], ["proof (chain)\npicking this:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)", "have \"lhd (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>Le FL.Bot_FL\""], ["proof (prove)\nusing this:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV) \\<Longrightarrow>\n    FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "assume \\<open>FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)\\<close>"], ["proof (state)\nthis:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV) \\<Longrightarrow>\n    FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "moreover"], ["proof (state)\nthis:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV) \\<Longrightarrow>\n    FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "have \\<open>chain (\\<rhd>L) (lmap lclss_of_state Sts)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<rhd>L) (lmap lclss_of_state Sts)", "using deriv RP_derivation_imp_derive_derivation"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>RP) Sts\n  chain (\\<leadsto>RP) ?Sts \\<Longrightarrow>\n  chain (\\<rhd>L) (lmap lclss_of_state ?Sts)\n\ngoal (1 subgoal):\n 1. chain (\\<rhd>L) (lmap lclss_of_state Sts)", "by simp"], ["proof (state)\nthis:\n  chain (\\<rhd>L) (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV) \\<Longrightarrow>\n    FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "moreover"], ["proof (state)\nthis:\n  chain (\\<rhd>L) (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV) \\<Longrightarrow>\n    FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "have \\<open>chain FL.entails_\\<G> (lmap lclss_of_state Sts)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. chain FL.entails_\\<G> (lmap lclss_of_state Sts)", "by (smt F_entails_\\<G>_iff FL.labeled_entailment_lifting RP_model chain_lmap deriv \\<G>_Fset_def\n        image_hd_lclss_of_state)"], ["proof (state)\nthis:\n  chain FL.entails_\\<G> (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n     ({{#}} \\<times> UNIV) \\<Longrightarrow>\n    FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "ultimately"], ["proof (chain)\npicking this:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n  chain (\\<rhd>L) (lmap lclss_of_state Sts)\n  chain FL.entails_\\<G> (lmap lclss_of_state Sts)", "show \\<open>FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)\\<close>"], ["proof (prove)\nusing this:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n  chain (\\<rhd>L) (lmap lclss_of_state Sts)\n  chain FL.entails_\\<G> (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "using FL.unsat_limit_iff"], ["proof (prove)\nusing this:\n  FL.entails_\\<G> (Liminf_llist (lmap lclss_of_state Sts))\n   ({{#}} \\<times> UNIV)\n  chain (\\<rhd>L) (lmap lclss_of_state Sts)\n  chain FL.entails_\\<G> (lmap lclss_of_state Sts)\n  \\<lbrakk>chain (\\<rhd>L) ?Ns; chain FL.entails_\\<G> ?Ns\\<rbrakk>\n  \\<Longrightarrow> FL.entails_\\<G> (Liminf_llist ?Ns)\n                     ({{#}} \\<times> UNIV) =\n                    FL.entails_\\<G> (lhd ?Ns) ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "by blast"], ["proof (state)\nthis:\n  FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "then"], ["proof (chain)\npicking this:\n  FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)", "have \"lclss_of_state (lhd Sts) \\<TTurnstile>\\<G>Le FL.Bot_FL\""], ["proof (prove)\nusing this:\n  FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (lclss_of_state (lhd Sts)) ({{#}} \\<times> UNIV)", "using chain_not_lnull deriv"], ["proof (prove)\nusing this:\n  FL.entails_\\<G> (lhd (lmap lclss_of_state Sts)) ({{#}} \\<times> UNIV)\n  chain ?R ?xs \\<Longrightarrow> \\<not> lnull ?xs\n  chain (\\<leadsto>RP) Sts\n\ngoal (1 subgoal):\n 1. FL.entails_\\<G> (lclss_of_state (lhd Sts)) ({{#}} \\<times> UNIV)", "by fastforce"], ["proof (state)\nthis:\n  FL.entails_\\<G> (lclss_of_state (lhd Sts)) ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "then"], ["proof (chain)\npicking this:\n  FL.entails_\\<G> (lclss_of_state (lhd Sts)) ({{#}} \\<times> UNIV)", "show ?thesis"], ["proof (prove)\nusing this:\n  FL.entails_\\<G> (lclss_of_state (lhd Sts)) ({{#}} \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n    {{#}}", "unfolding FL.entails_\\<G>_L_def F.entails_\\<G>_def lclss_of_state_def"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>UNIV.\n     (\\<Union>CL\\<in>(\\<lambda>C. (C, New)) ` N_of_state (lhd Sts) \\<union>\n                     (\\<lambda>C. (C, Processed)) `\n                     P_of_state (lhd Sts) \\<union>\n                     (\\<lambda>C. (C, Old)) ` Q_of_state (lhd Sts).\n         \\<G>_F (fst CL)) \\<TTurnstile>e\n     (\\<Union>CL\\<in>{{#}} \\<times> UNIV. \\<G>_F (fst CL))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>UNIV.\n       \\<Union>\n        (\\<G>_F `\n         (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n          Q_of_state (lhd Sts))) \\<TTurnstile>e\n       \\<Union> (\\<G>_F ` {{#}})", "by auto"], ["proof (state)\nthis:\n  N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n  Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n  {{#}}\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem RP_saturated_if_fair_new_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    init: \"FL.active_subset (lclss_of_state (lhd Sts)) = {}\" and\n    final: \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\"\n  shows \"FL.saturated (Liminf_llist (lmap lclss_of_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))", "note nnil = chain_not_lnull[OF deriv]"], ["proof (state)\nthis:\n  \\<not> lnull Sts\n\ngoal (1 subgoal):\n 1. FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))", "have gc_deriv: \"chain (\\<leadsto>GC) (lmap lclss_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<leadsto>GC) (lmap lclss_of_state Sts)", "by (rule RP_derivation_imp_GC_derivation[OF deriv])"], ["proof (state)\nthis:\n  chain (\\<leadsto>GC) (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))", "using nnil init final\n      FL.fair_implies_Liminf_saturated[OF FL.gc_to_red[OF gc_deriv] FL.gc_fair[OF gc_deriv]]"], ["proof (prove)\nusing this:\n  \\<not> lnull Sts\n  FL.active_subset (lclss_of_state (lhd Sts)) = {}\n  FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\n  \\<lbrakk>FL.active_subset (lhd (lmap lclss_of_state Sts)) = {};\n   FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\\<rbrakk>\n  \\<Longrightarrow> FL.empty_ord.saturated\n                     (Liminf_llist (lmap lclss_of_state Sts))\n\ngoal (1 subgoal):\n 1. FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))", "by simp"], ["proof (state)\nthis:\n  FL.empty_ord.saturated (Liminf_llist (lmap lclss_of_state Sts))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary RP_complete_if_fair_new_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    init: \"FL.active_subset (lclss_of_state (lhd Sts)) = {}\" and\n    final: \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\" and\n    unsat: \"grounding_of_state (lhd Sts) \\<TTurnstile>e {{#}}\"\n  shows \"{#} \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "note nnil = chain_not_lnull[OF deriv]"], ["proof (state)\nthis:\n  \\<not> lnull Sts\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "note len = chain_length_pos[OF deriv]"], ["proof (state)\nthis:\n  0 < llength Sts\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "have gc_deriv: \"chain (\\<leadsto>GC) (lmap lclss_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<leadsto>GC) (lmap lclss_of_state Sts)", "by (rule RP_derivation_imp_GC_derivation[OF deriv])"], ["proof (state)\nthis:\n  chain (\\<leadsto>GC) (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "have hd_lcls: \"fst ` lhd (lmap lclss_of_state Sts) = lhd (lmap clss_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` lhd (lmap lclss_of_state Sts) =\n    lhd (lmap\n          (\\<lambda>St.\n              N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n          Sts)", "using len zero_enat_def"], ["proof (prove)\nusing this:\n  0 < llength Sts\n  0 = enat 0\n\ngoal (1 subgoal):\n 1. fst ` lhd (lmap lclss_of_state Sts) =\n    lhd (lmap\n          (\\<lambda>St.\n              N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n          Sts)", "by auto"], ["proof (state)\nthis:\n  fst ` lhd (lmap lclss_of_state Sts) =\n  lhd (lmap\n        (\\<lambda>St.\n            N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n        Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "have hd_unsat: \"fst ` lhd (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` lhd (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}", "unfolding hd_lcls F_entails_\\<G>_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (\\<G>_F `\n      lhd (lmap\n            (\\<lambda>St.\n                N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n            Sts)) \\<TTurnstile>e\n    \\<Union> (\\<G>_F ` {{#}})", "unfolding true_clss_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       Ball\n        (\\<Union>\n          (\\<G>_F `\n           lhd (lmap\n                 (\\<lambda>St.\n                     N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St)\n                 Sts)))\n        ((\\<TTurnstile>) I) \\<longrightarrow>\n       Ball (\\<Union> (\\<G>_F ` {{#}})) ((\\<TTurnstile>) I)", "using unsat"], ["proof (prove)\nusing this:\n  \\<G>_Fset\n   (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts)) \\<TTurnstile>e\n  {{#}}\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       Ball\n        (\\<Union>\n          (\\<G>_F `\n           lhd (lmap\n                 (\\<lambda>St.\n                     N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St)\n                 Sts)))\n        ((\\<TTurnstile>) I) \\<longrightarrow>\n       Ball (\\<Union> (\\<G>_F ` {{#}})) ((\\<TTurnstile>) I)", "unfolding \\<G>_Fset_def"], ["proof (prove)\nusing this:\n  \\<Union>\n   (\\<G>_F `\n    (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n     Q_of_state (lhd Sts))) \\<TTurnstile>e\n  {{#}}\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       Ball\n        (\\<Union>\n          (\\<G>_F `\n           lhd (lmap\n                 (\\<lambda>St.\n                     N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St)\n                 Sts)))\n        ((\\<TTurnstile>) I) \\<longrightarrow>\n       Ball (\\<Union> (\\<G>_F ` {{#}})) ((\\<TTurnstile>) I)", "by (metis (no_types, lifting) chain_length_pos gc_deriv gr.ex_min_counterex i0_less\n        llength_eq_0 llength_lmap llength_lmap llist.map_sel(1) true_cls_empty true_clss_singleton)"], ["proof (state)\nthis:\n  fst ` lhd (lmap lclss_of_state Sts) \\<TTurnstile>\\<G>e {{#}}\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "have \"\\<exists>BL \\<in> {{#}} \\<times> UNIV. BL \\<in> Liminf_llist (lmap lclss_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>BL\\<in>{{#}} \\<times> UNIV.\n       BL \\<in> Liminf_llist (lmap lclss_of_state Sts)", "by (rule FL.gc_complete_Liminf[OF gc_deriv,of \"{#}\"])\n      (use final hd_unsat in \\<open>auto simp: init nnil\\<close>)"], ["proof (state)\nthis:\n  \\<exists>BL\\<in>{{#}} \\<times> UNIV.\n     BL \\<in> Liminf_llist (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  \\<exists>BL\\<in>{{#}} \\<times> UNIV.\n     BL \\<in> Liminf_llist (lmap lclss_of_state Sts)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>BL\\<in>{{#}} \\<times> UNIV.\n     BL \\<in> Liminf_llist (lmap lclss_of_state Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "unfolding Liminf_state_def lclss_Liminf_commute"], ["proof (prove)\nusing this:\n  \\<exists>BL\\<in>{{#}} \\<times> UNIV.\n     BL \\<in> lclss_of_state\n               (Liminf_llist (lmap N_of_state Sts),\n                Liminf_llist (lmap P_of_state Sts),\n                Liminf_llist (lmap Q_of_state Sts))\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Q_of_state\n           (Liminf_llist (lmap N_of_state Sts),\n            Liminf_llist (lmap P_of_state Sts),\n            Liminf_llist (lmap Q_of_state Sts))", "using final[unfolded FL.passive_subset_def] Liminf_state_def lclss_Liminf_commute"], ["proof (prove)\nusing this:\n  \\<exists>BL\\<in>{{#}} \\<times> UNIV.\n     BL \\<in> lclss_of_state\n               (Liminf_llist (lmap N_of_state Sts),\n                Liminf_llist (lmap P_of_state Sts),\n                Liminf_llist (lmap Q_of_state Sts))\n  {CL \\<in> Liminf_llist (lmap lclss_of_state Sts). snd CL \\<noteq> Old} =\n  {}\n  Liminf_state ?Sts =\n  (Liminf_llist (lmap N_of_state ?Sts), Liminf_llist (lmap P_of_state ?Sts),\n   Liminf_llist (lmap Q_of_state ?Sts))\n  Liminf_llist (lmap lclss_of_state ?Sts) =\n  lclss_of_state (Liminf_state ?Sts)\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Q_of_state\n           (Liminf_llist (lmap N_of_state Sts),\n            Liminf_llist (lmap P_of_state Sts),\n            Liminf_llist (lmap Q_of_state Sts))", "by fastforce"], ["proof (state)\nthis:\n  {#} \\<in> Q_of_state (Liminf_state Sts)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Alternative Derivation of Previous \\textsf{RP} Results\\<close>"], ["", "lemma old_fair_imp_new_fair:\n  assumes\n    nnul: \"\\<not> lnull Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\"\n  shows\n    \"FL.active_subset (lclss_of_state (lhd Sts)) = {}\" and\n    \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.active_subset (lclss_of_state (lhd Sts)) = {} &&&\n    FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. FL.active_subset (lclss_of_state (lhd Sts)) = {}\n 2. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "show \"FL.active_subset (lclss_of_state (lhd Sts)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.active_subset (lclss_of_state (lhd Sts)) = {}", "using nnul empty_Q0"], ["proof (prove)\nusing this:\n  \\<not> lnull Sts\n  Q_of_state (lhd Sts) = {}\n\ngoal (1 subgoal):\n 1. FL.active_subset (lclss_of_state (lhd Sts)) = {}", "unfolding FL.active_subset_def"], ["proof (prove)\nusing this:\n  \\<not> lnull Sts\n  Q_of_state (lhd Sts) = {}\n\ngoal (1 subgoal):\n 1. {CL \\<in> lclss_of_state (lhd Sts). snd CL = Old} = {}", "by (cases Sts) auto"], ["proof (state)\nthis:\n  FL.active_subset (lclss_of_state (lhd Sts)) = {}\n\ngoal (1 subgoal):\n 1. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "show \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "using fair"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "unfolding fair_state_seq_def FL.passive_subset_def lclss_Liminf_commute lclss_of_state_def"], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts) = {} \\<and>\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. {CL \\<in> (\\<lambda>C. (C, New)) `\n              N_of_state (Liminf_state Sts) \\<union>\n              (\\<lambda>C. (C, Processed)) `\n              P_of_state (Liminf_state Sts) \\<union>\n              (\\<lambda>C. (C, Old)) ` Q_of_state (Liminf_state Sts).\n     snd CL \\<noteq> Old} =\n    {}", "by auto"], ["proof (state)\nthis:\n  FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma old_redundant_infer_iff:\n  \"src.redundant_infer N \\<gamma> \\<longleftrightarrow>\n   (\\<exists>DD. DD \\<subseteq> N \\<and> DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e {old_concl_of \\<gamma>}\n      \\<and> (\\<forall>D \\<in> DD. D < old_main_prem_of \\<gamma>))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. src.redundant_infer N \\<gamma> =\n    (\\<exists>DD\\<subseteq>N.\n        DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n        {old_concl_of \\<gamma>} \\<and>\n        (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. src.redundant_infer N \\<gamma> \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)\n 2. \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>) \\<Longrightarrow>\n    src.redundant_infer N \\<gamma>", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>N.\n     DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n     {old_concl_of \\<gamma>} \\<and>\n     (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)\n\ngoal (2 subgoals):\n 1. src.redundant_infer N \\<gamma> \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)\n 2. \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>) \\<Longrightarrow>\n    src.redundant_infer N \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>DD\\<subseteq>N.\n     DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n     {old_concl_of \\<gamma>} \\<and>\n     (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)", "obtain DD0 where\n    \"DD0 \\<subseteq> N\" and\n    \"DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e {old_concl_of \\<gamma>}\" and\n    \"\\<forall>D \\<in> DD0. D < old_main_prem_of \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<exists>DD\\<subseteq>N.\n     DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n     {old_concl_of \\<gamma>} \\<and>\n     (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>DD0.\n        \\<lbrakk>DD0 \\<subseteq> N;\n         DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n         {old_concl_of \\<gamma>};\n         \\<forall>D\\<in>DD0. D < old_main_prem_of \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  DD0 \\<subseteq> N\n  DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n  {old_concl_of \\<gamma>}\n  \\<forall>D\\<in>DD0. D < old_main_prem_of \\<gamma>\n\ngoal (2 subgoals):\n 1. src.redundant_infer N \\<gamma> \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)\n 2. \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>) \\<Longrightarrow>\n    src.redundant_infer N \\<gamma>", "then"], ["proof (chain)\npicking this:\n  DD0 \\<subseteq> N\n  DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n  {old_concl_of \\<gamma>}\n  \\<forall>D\\<in>DD0. D < old_main_prem_of \\<gamma>", "obtain DD where\n    fin_dd: \"finite DD\" and\n    dd_in: \"DD \\<subseteq> N\" and\n    dd_un: \"DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e {old_concl_of \\<gamma>}\" and\n    all_dd: \"\\<forall>D \\<in> DD. D < old_main_prem_of \\<gamma>\""], ["proof (prove)\nusing this:\n  DD0 \\<subseteq> N\n  DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n  {old_concl_of \\<gamma>}\n  \\<forall>D\\<in>DD0. D < old_main_prem_of \\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>DD.\n        \\<lbrakk>finite DD; DD \\<subseteq> N;\n         DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n         {old_concl_of \\<gamma>};\n         \\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using entails_concl_compact_union[of \"{old_concl_of \\<gamma>}\" DD0 \"set_mset (old_side_prems_of \\<gamma>)\"]"], ["proof (prove)\nusing this:\n  DD0 \\<subseteq> N\n  DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n  {old_concl_of \\<gamma>}\n  \\<forall>D\\<in>DD0. D < old_main_prem_of \\<gamma>\n  \\<lbrakk>finite {old_concl_of \\<gamma>};\n   DD0 \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n   {old_concl_of \\<gamma>}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>CC'\\<subseteq>DD0.\n                       finite CC' \\<and>\n                       CC' \\<union>\n                       set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n                       {old_concl_of \\<gamma>}\n\ngoal (1 subgoal):\n 1. (\\<And>DD.\n        \\<lbrakk>finite DD; DD \\<subseteq> N;\n         DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n         {old_concl_of \\<gamma>};\n         \\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  finite DD\n  DD \\<subseteq> N\n  DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n  {old_concl_of \\<gamma>}\n  \\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>\n\ngoal (2 subgoals):\n 1. src.redundant_infer N \\<gamma> \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)\n 2. \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>) \\<Longrightarrow>\n    src.redundant_infer N \\<gamma>", "show ?lhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. src.redundant_infer N \\<gamma>", "unfolding src.redundant_infer_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>DD.\n       set_mset DD \\<subseteq> N \\<and>\n       (\\<forall>I.\n           I \\<TTurnstile>m\n           DD + old_side_prems_of \\<gamma> \\<longrightarrow>\n           I \\<TTurnstile> old_concl_of \\<gamma>) \\<and>\n       (\\<forall>D.\n           D \\<in># DD \\<longrightarrow> D < old_main_prem_of \\<gamma>)", "using fin_dd dd_in dd_un all_dd"], ["proof (prove)\nusing this:\n  finite DD\n  DD \\<subseteq> N\n  DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n  {old_concl_of \\<gamma>}\n  \\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>DD.\n       set_mset DD \\<subseteq> N \\<and>\n       (\\<forall>I.\n           I \\<TTurnstile>m\n           DD + old_side_prems_of \\<gamma> \\<longrightarrow>\n           I \\<TTurnstile> old_concl_of \\<gamma>) \\<and>\n       (\\<forall>D.\n           D \\<in># DD \\<longrightarrow> D < old_main_prem_of \\<gamma>)", "by simp (metis finite_set_mset_mset_set true_clss_set_mset)"], ["proof (state)\nthis:\n  src.redundant_infer N \\<gamma>\n\ngoal (1 subgoal):\n 1. src.redundant_infer N \\<gamma> \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N.\n       DD \\<union> set_mset (old_side_prems_of \\<gamma>) \\<TTurnstile>e\n       {old_concl_of \\<gamma>} \\<and>\n       (\\<forall>D\\<in>DD. D < old_main_prem_of \\<gamma>)", "qed (auto simp: src.redundant_infer_def)"], ["", "definition old_infer_of :: \"'a clause inference \\<Rightarrow> 'a old_inference\" where\n  \"old_infer_of \\<iota> = old_Infer (mset (side_prems_of \\<iota>)) (main_prem_of \\<iota>) (concl_of \\<iota>)\""], ["", "lemma new_redundant_infer_imp_old_redundant_infer:\n  \"G.redundant_infer N \\<iota> \\<Longrightarrow> src.redundant_infer N (old_infer_of \\<iota>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.redundant_infer N \\<iota> \\<Longrightarrow>\n    src.redundant_infer N (old_infer_of \\<iota>)", "unfolding old_redundant_infer_iff G.redundant_infer_def old_infer_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N.\n       DD \\<union> set (side_prems_of \\<iota>) \\<TTurnstile>e\n       {concl_of \\<iota>} \\<and>\n       (\\<forall>D\\<in>DD. D < main_prem_of \\<iota>) \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N.\n       DD \\<union>\n       set_mset\n        (old_side_prems_of\n          (old_Infer (mset (side_prems_of \\<iota>)) (main_prem_of \\<iota>)\n            (concl_of \\<iota>))) \\<TTurnstile>e\n       {old_concl_of\n         (old_Infer (mset (side_prems_of \\<iota>)) (main_prem_of \\<iota>)\n           (concl_of \\<iota>))} \\<and>\n       (\\<forall>D\\<in>DD.\n           D < old_main_prem_of\n                (old_Infer (mset (side_prems_of \\<iota>))\n                  (main_prem_of \\<iota>) (concl_of \\<iota>)))", "by simp"], ["", "lemma saturated_imp_saturated_RP:\n  assumes\n    satur: \"FL.saturated (Liminf_llist (lmap lclss_of_state Sts))\" and\n    no_passive: \"FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\"\n  shows \"src.saturated_upto Sts (grounding_of_state (Liminf_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "define Q where\n    \"Q = Liminf_llist (lmap Q_of_state Sts)\""], ["proof (state)\nthis:\n  Q = Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "define Ql where\n    \"Ql = (\\<lambda>C. (C, Old)) ` Q\""], ["proof (state)\nthis:\n  Ql = (\\<lambda>C. (C, Old)) ` Q\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "define G where\n    \"G = \\<Union> (\\<G>_F ` Q)\""], ["proof (state)\nthis:\n  G = \\<Union> (\\<G>_F ` Q)\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "have n_empty: \"N_of_state (Liminf_state Sts) = {}\" and\n    p_empty: \"P_of_state (Liminf_state Sts) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) = {} &&&\n    P_of_state (Liminf_state Sts) = {}", "using no_passive[unfolded FL.passive_subset_def] Liminf_state_def lclss_Liminf_commute"], ["proof (prove)\nusing this:\n  {CL \\<in> Liminf_llist (lmap lclss_of_state Sts). snd CL \\<noteq> Old} =\n  {}\n  Liminf_state ?Sts =\n  (Liminf_llist (lmap N_of_state ?Sts), Liminf_llist (lmap P_of_state ?Sts),\n   Liminf_llist (lmap Q_of_state ?Sts))\n  Liminf_llist (lmap lclss_of_state ?Sts) =\n  lclss_of_state (Liminf_state ?Sts)\n\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) = {} &&&\n    P_of_state (Liminf_state Sts) = {}", "by fastforce+"], ["proof (state)\nthis:\n  N_of_state (Liminf_state Sts) = {}\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "then"], ["proof (chain)\npicking this:\n  N_of_state (Liminf_state Sts) = {}\n  P_of_state (Liminf_state Sts) = {}", "have limuls_eq: \"Liminf_llist (lmap lclss_of_state Sts) = Ql\""], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts) = {}\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) = Ql", "unfolding Ql_def Q_def"], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts) = {}\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)", "using Liminf_state_def lclss_Liminf_commute lclss_of_state_def"], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts) = {}\n  P_of_state (Liminf_state Sts) = {}\n  Liminf_state ?Sts =\n  (Liminf_llist (lmap N_of_state ?Sts), Liminf_llist (lmap P_of_state ?Sts),\n   Liminf_llist (lmap Q_of_state ?Sts))\n  Liminf_llist (lmap lclss_of_state ?Sts) =\n  lclss_of_state (Liminf_state ?Sts)\n  lclss_of_state ?St =\n  (\\<lambda>C. (C, New)) ` N_of_state ?St \\<union>\n  (\\<lambda>C. (C, Processed)) ` P_of_state ?St \\<union>\n  (\\<lambda>C. (C, Old)) ` Q_of_state ?St\n\ngoal (1 subgoal):\n 1. Liminf_llist (lmap lclss_of_state Sts) =\n    (\\<lambda>C. (C, Old)) ` Liminf_llist (lmap Q_of_state Sts)", "by auto"], ["proof (state)\nthis:\n  Liminf_llist (lmap lclss_of_state Sts) = Ql\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "have clst_eq: \"clss_of_state (Liminf_state Sts) = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) \\<union>\n    P_of_state (Liminf_state Sts) \\<union>\n    Q_of_state (Liminf_state Sts) =\n    Q", "unfolding n_empty p_empty Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<union> {} \\<union> Q_of_state (Liminf_state Sts) =\n    Liminf_llist (lmap Q_of_state Sts)", "by (auto simp: Liminf_state_def)"], ["proof (state)\nthis:\n  N_of_state (Liminf_state Sts) \\<union>\n  P_of_state (Liminf_state Sts) \\<union>\n  Q_of_state (Liminf_state Sts) =\n  Q\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "have gflimuls_eq: \"(\\<Union>Cl \\<in> Ql. \\<G>_F (fst Cl)) = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>Cl\\<in>Ql. \\<G>_F (fst Cl)) = G", "unfolding Ql_def G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>Cl\\<in>(\\<lambda>C. (C, Old)) ` Q. \\<G>_F (fst Cl)) =\n    \\<Union> (\\<G>_F ` Q)", "by auto"], ["proof (state)\nthis:\n  (\\<Union>Cl\\<in>Ql. \\<G>_F (fst Cl)) = G\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "have \"gd.inferences_from Sts G \\<subseteq> src.Ri Sts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd.inferences_from Sts G \\<subseteq> src.Ri Sts G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "fix \\<gamma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "assume \\<gamma>_inf: \"\\<gamma> \\<in> gd.inferences_from Sts G\""], ["proof (state)\nthis:\n  \\<gamma> \\<in> gd.inferences_from Sts G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "obtain \\<iota> where\n      \\<iota>_inff: \"\\<iota> \\<in> G.Inf_from Q G\" and\n      \\<gamma>: \"\\<gamma> = old_infer_of \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        \\<lbrakk>\\<iota> \\<in> G.Inf_from Q G;\n         \\<gamma> = old_infer_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<gamma>_inf"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> gd.inferences_from Sts G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        \\<lbrakk>\\<iota> \\<in> G.Inf_from Q G;\n         \\<gamma> = old_infer_of \\<iota>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding gd.inferences_from_def old_infer_from_def G.Inf_from_def old_infer_of_def"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> {\\<gamma> \\<in> gd.ord_\\<Gamma> Sts.\n         set_mset\n          (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n         \\<subseteq> G}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        \\<lbrakk>\\<iota>\n                 \\<in> {\\<iota> \\<in> G_Inf Q.\n                        set (prems_of \\<iota>) \\<subseteq> G};\n         \\<gamma> =\n         old_Infer (mset (side_prems_of \\<iota>)) (main_prem_of \\<iota>)\n          (concl_of \\<iota>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (atomize_elim, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "assume\n        g_is: \\<open>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts\\<close> and\n        prems_in: \\<open>set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#}) \\<subseteq> G\\<close>"], ["proof (state)\nthis:\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts\n  set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n  \\<subseteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "obtain CAs DA AAs As E where main_in: \\<open>DA \\<in> G\\<close> and side_in: \\<open>set CAs \\<subseteq> G\\<close> and\n        g_is2: \\<open>\\<gamma> = old_Infer (mset CAs) DA E\\<close> and\n        ord_res: \\<open>gd.ord_resolve Sts CAs DA AAs As E\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>DA CAs E AAs As.\n        \\<lbrakk>DA \\<in> G; set CAs \\<subseteq> G;\n         \\<gamma> = old_Infer (mset CAs) DA E;\n         gd.ord_resolve Sts CAs DA AAs As E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using g_is prems_in"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts\n  set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n  \\<subseteq> G\n\ngoal (1 subgoal):\n 1. (\\<And>DA CAs E AAs As.\n        \\<lbrakk>DA \\<in> G; set CAs \\<subseteq> G;\n         \\<gamma> = old_Infer (mset CAs) DA E;\n         gd.ord_resolve Sts CAs DA AAs As E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding gd.ord_\\<Gamma>_def"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As E.\n            uu_ = old_Infer (mset CAs) DA E \\<and>\n            gd.ord_resolve Sts CAs DA AAs As E}\n  set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n  \\<subseteq> G\n\ngoal (1 subgoal):\n 1. (\\<And>DA CAs E AAs As.\n        \\<lbrakk>DA \\<in> G; set CAs \\<subseteq> G;\n         \\<gamma> = old_Infer (mset CAs) DA E;\n         gd.ord_resolve Sts CAs DA AAs As E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DA \\<in> G\n  set CAs \\<subseteq> G\n  \\<gamma> = old_Infer (mset CAs) DA E\n  gd.ord_resolve Sts CAs DA AAs As E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "define \\<iota>_\\<gamma> where \"\\<iota>_\\<gamma> = Infer (CAs @ [DA]) E\""], ["proof (state)\nthis:\n  \\<iota>_\\<gamma> = Infer (CAs @ [DA]) E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "then"], ["proof (chain)\npicking this:\n  \\<iota>_\\<gamma> = Infer (CAs @ [DA]) E", "have \\<open>\\<iota>_\\<gamma> \\<in> G_Inf Q\\<close>"], ["proof (prove)\nusing this:\n  \\<iota>_\\<gamma> = Infer (CAs @ [DA]) E\n\ngoal (1 subgoal):\n 1. \\<iota>_\\<gamma> \\<in> G_Inf Q", "using Q_of_state.simps g_is g_is2 ord_res Liminf_state_def S_Q_def"], ["proof (prove)\nusing this:\n  \\<iota>_\\<gamma> = Infer (CAs @ [DA]) E\n  Q_of_state (?N, ?P, ?Q) = ?Q\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts\n  \\<gamma> = old_Infer (mset CAs) DA E\n  gd.ord_resolve Sts CAs DA AAs As E\n  Liminf_state ?Sts =\n  (Liminf_llist (lmap N_of_state ?Sts), Liminf_llist (lmap P_of_state ?Sts),\n   Liminf_llist (lmap Q_of_state ?Sts))\n  S_Q ?Sts = S_M S (Q_of_state (Liminf_state ?Sts))\n\ngoal (1 subgoal):\n 1. \\<iota>_\\<gamma> \\<in> G_Inf Q", "unfolding gd.ord_\\<Gamma>_def G_Inf_def Q_def"], ["proof (prove)\nusing this:\n  \\<iota>_\\<gamma> = Infer (CAs @ [DA]) E\n  Q_of_state (?N, ?P, ?Q) = ?Q\n  \\<gamma>\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As E.\n            uu_ = old_Infer (mset CAs) DA E \\<and>\n            gd.ord_resolve Sts CAs DA AAs As E}\n  \\<gamma> = old_Infer (mset CAs) DA E\n  gd.ord_resolve Sts CAs DA AAs As E\n  Liminf_state ?Sts =\n  (Liminf_llist (lmap N_of_state ?Sts), Liminf_llist (lmap P_of_state ?Sts),\n   Liminf_llist (lmap Q_of_state ?Sts))\n  S_Q ?Sts = S_M S (Q_of_state (Liminf_state ?Sts))\n\ngoal (1 subgoal):\n 1. \\<iota>_\\<gamma>\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As E.\n              uu_ = Infer (CAs @ [DA]) E \\<and>\n              gr.ord_resolve (Liminf_llist (lmap Q_of_state Sts)) CAs DA AAs\n               As E}", "by auto"], ["proof (state)\nthis:\n  \\<iota>_\\<gamma> \\<in> G_Inf Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "moreover"], ["proof (state)\nthis:\n  \\<iota>_\\<gamma> \\<in> G_Inf Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "have \\<open>set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G", "using g_is2 prems_in"], ["proof (prove)\nusing this:\n  \\<gamma> = old_Infer (mset CAs) DA E\n  set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n  \\<subseteq> G\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G", "unfolding \\<iota>_\\<gamma>_def"], ["proof (prove)\nusing this:\n  \\<gamma> = old_Infer (mset CAs) DA E\n  set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n  \\<subseteq> G\n\ngoal (1 subgoal):\n 1. set (prems_of (Infer (CAs @ [DA]) E)) \\<subseteq> G", "by simp"], ["proof (state)\nthis:\n  set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "moreover"], ["proof (state)\nthis:\n  set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "have \\<open>\\<gamma> = old_Infer (mset (side_prems_of \\<iota>_\\<gamma>)) (main_prem_of \\<iota>_\\<gamma>) (concl_of \\<iota>_\\<gamma>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> =\n    old_Infer (mset (side_prems_of \\<iota>_\\<gamma>))\n     (main_prem_of \\<iota>_\\<gamma>) (concl_of \\<iota>_\\<gamma>)", "using g_is2"], ["proof (prove)\nusing this:\n  \\<gamma> = old_Infer (mset CAs) DA E\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    old_Infer (mset (side_prems_of \\<iota>_\\<gamma>))\n     (main_prem_of \\<iota>_\\<gamma>) (concl_of \\<iota>_\\<gamma>)", "unfolding \\<iota>_\\<gamma>_def"], ["proof (prove)\nusing this:\n  \\<gamma> = old_Infer (mset CAs) DA E\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    old_Infer (mset (side_prems_of (Infer (CAs @ [DA]) E)))\n     (main_prem_of (Infer (CAs @ [DA]) E)) (concl_of (Infer (CAs @ [DA]) E))", "by simp"], ["proof (state)\nthis:\n  \\<gamma> =\n  old_Infer (mset (side_prems_of \\<iota>_\\<gamma>))\n   (main_prem_of \\<iota>_\\<gamma>) (concl_of \\<iota>_\\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G;\n     \\<gamma> \\<in> gd.ord_\\<Gamma> Sts;\n     set_mset (old_side_prems_of \\<gamma> + {#old_main_prem_of \\<gamma>#})\n     \\<subseteq> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<iota>.\n                         \\<iota>\n                         \\<in> {\\<iota> \\<in> G_Inf Q.\n                                set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n                         \\<gamma> =\n                         old_Infer (mset (side_prems_of \\<iota>))\n                          (main_prem_of \\<iota>) (concl_of \\<iota>)", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota>_\\<gamma> \\<in> G_Inf Q\n  set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G\n  \\<gamma> =\n  old_Infer (mset (side_prems_of \\<iota>_\\<gamma>))\n   (main_prem_of \\<iota>_\\<gamma>) (concl_of \\<iota>_\\<gamma>)", "show\n        \\<open>\\<exists>\\<iota>. \\<iota> \\<in> {\\<iota> \\<in> G_Inf Q. set (prems_of \\<iota>) \\<subseteq> G} \\<and> \\<gamma> = old_Infer (mset (side_prems_of \\<iota>))\n         (main_prem_of \\<iota>) (concl_of \\<iota>)\\<close>"], ["proof (prove)\nusing this:\n  \\<iota>_\\<gamma> \\<in> G_Inf Q\n  set (prems_of \\<iota>_\\<gamma>) \\<subseteq> G\n  \\<gamma> =\n  old_Infer (mset (side_prems_of \\<iota>_\\<gamma>))\n   (main_prem_of \\<iota>_\\<gamma>) (concl_of \\<iota>_\\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<iota>.\n       \\<iota>\n       \\<in> {\\<iota> \\<in> G_Inf Q.\n              set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n       \\<gamma> =\n       old_Infer (mset (side_prems_of \\<iota>)) (main_prem_of \\<iota>)\n        (concl_of \\<iota>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<iota>.\n     \\<iota>\n     \\<in> {\\<iota> \\<in> G_Inf Q.\n            set (prems_of \\<iota>) \\<subseteq> G} \\<and>\n     \\<gamma> =\n     old_Infer (mset (side_prems_of \\<iota>)) (main_prem_of \\<iota>)\n      (concl_of \\<iota>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<iota> \\<in> G.Inf_from Q G\n  \\<gamma> = old_infer_of \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "obtain \\<iota>' where\n      \\<iota>'_inff: \"\\<iota>' \\<in> F.Inf_from Q\" and\n      \\<iota>_in_\\<iota>': \"\\<iota> \\<in> \\<G>_I Q \\<iota>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        \\<lbrakk>\\<iota>' \\<in> F.Inf_from Q;\n         \\<iota> \\<in> \\<G>_I Q \\<iota>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G_Inf_overapprox_F_Inf \\<iota>_inff"], ["proof (prove)\nusing this:\n  ?\\<iota>\\<^sub>0\n  \\<in> G.Inf_from ?M (\\<Union> (\\<G>_F ` ?M)) \\<Longrightarrow>\n  \\<exists>\\<iota>\\<in>F.Inf_from ?M.\n     ?\\<iota>\\<^sub>0 \\<in> \\<G>_I ?M \\<iota>\n  \\<iota> \\<in> G.Inf_from Q G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        \\<lbrakk>\\<iota>' \\<in> F.Inf_from Q;\n         \\<iota> \\<in> \\<G>_I Q \\<iota>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G_def"], ["proof (prove)\nusing this:\n  ?\\<iota>\\<^sub>0\n  \\<in> G.Inf_from ?M (\\<Union> (\\<G>_F ` ?M)) \\<Longrightarrow>\n  \\<exists>\\<iota>\\<in>F.Inf_from ?M.\n     ?\\<iota>\\<^sub>0 \\<in> \\<G>_I ?M \\<iota>\n  \\<iota> \\<in> G.Inf_from Q (\\<Union> (\\<G>_F ` Q))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        \\<lbrakk>\\<iota>' \\<in> F.Inf_from Q;\n         \\<iota> \\<in> \\<G>_I Q \\<iota>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<iota>' \\<in> F.Inf_from Q\n  \\<iota> \\<in> \\<G>_I Q \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "note \\<iota>'_inf = F.Inf_if_Inf_from[OF \\<iota>'_inff]"], ["proof (state)\nthis:\n  \\<iota>' \\<in> F_Inf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "let ?olds = \"replicate (length (prems_of \\<iota>')) Old\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "obtain \\<iota>'' and l0 where\n      \\<iota>'': \"\\<iota>'' = Infer (zip (prems_of \\<iota>') ?olds) (concl_of \\<iota>', l0)\" and\n      \\<iota>''_inf: \"\\<iota>'' \\<in> FL_Inf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'' l0.\n        \\<lbrakk>\\<iota>'' =\n                 Infer\n                  (zip (prems_of \\<iota>')\n                    (replicate (length (prems_of \\<iota>')) Old))\n                  (concl_of \\<iota>', l0);\n         \\<iota>'' \\<in> FL_Inf\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using FL.Inf_F_to_Inf_FL[OF \\<iota>'_inf, of ?olds, simplified]"], ["proof (prove)\nusing this:\n  \\<exists>L0.\n     Infer\n      (zip (prems_of \\<iota>') (replicate (length (prems_of \\<iota>')) Old))\n      (concl_of \\<iota>', L0)\n     \\<in> FL_Inf\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'' l0.\n        \\<lbrakk>\\<iota>'' =\n                 Infer\n                  (zip (prems_of \\<iota>')\n                    (replicate (length (prems_of \\<iota>')) Old))\n                  (concl_of \\<iota>', l0);\n         \\<iota>'' \\<in> FL_Inf\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<iota>'' =\n  Infer\n   (zip (prems_of \\<iota>') (replicate (length (prems_of \\<iota>')) Old))\n   (concl_of \\<iota>', l0)\n  \\<iota>'' \\<in> FL_Inf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "have \"set (prems_of \\<iota>'') \\<subseteq> Ql\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>'') \\<subseteq> Ql", "using \\<iota>'_inff[unfolded F.Inf_from_def, simplified]"], ["proof (prove)\nusing this:\n  \\<iota>' \\<in> F_Inf \\<and> set (prems_of \\<iota>') \\<subseteq> Q\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>'') \\<subseteq> Ql", "unfolding \\<iota>'' Ql_def"], ["proof (prove)\nusing this:\n  \\<iota>' \\<in> F_Inf \\<and> set (prems_of \\<iota>') \\<subseteq> Q\n\ngoal (1 subgoal):\n 1. set (prems_of\n          (Infer\n            (zip (prems_of \\<iota>')\n              (replicate (length (prems_of \\<iota>')) Old))\n            (concl_of \\<iota>', l0)))\n    \\<subseteq> (\\<lambda>C. (C, Old)) ` Q", "by auto"], ["proof (state)\nthis:\n  set (prems_of \\<iota>'') \\<subseteq> Ql\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "then"], ["proof (chain)\npicking this:\n  set (prems_of \\<iota>'') \\<subseteq> Ql", "have \"\\<iota>'' \\<in> FL.Inf_from Ql\""], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>'') \\<subseteq> Ql\n\ngoal (1 subgoal):\n 1. \\<iota>'' \\<in> FL.Inf_from Ql", "unfolding FL.Inf_from_def"], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>'') \\<subseteq> Ql\n\ngoal (1 subgoal):\n 1. \\<iota>''\n    \\<in> {\\<iota> \\<in> FL_Inf. set (prems_of \\<iota>) \\<subseteq> Ql}", "using \\<iota>''_inf"], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>'') \\<subseteq> Ql\n  \\<iota>'' \\<in> FL_Inf\n\ngoal (1 subgoal):\n 1. \\<iota>''\n    \\<in> {\\<iota> \\<in> FL_Inf. set (prems_of \\<iota>) \\<subseteq> Ql}", "by simp"], ["proof (state)\nthis:\n  \\<iota>'' \\<in> FL.Inf_from Ql\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "moreover"], ["proof (state)\nthis:\n  \\<iota>'' \\<in> FL.Inf_from Ql\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "have \"\\<iota>' = FL.to_F \\<iota>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' = FL.to_F \\<iota>''", "unfolding \\<iota>''"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' =\n    FL.to_F\n     (Infer\n       (zip (prems_of \\<iota>')\n         (replicate (length (prems_of \\<iota>')) Old))\n       (concl_of \\<iota>', l0))", "unfolding FL.to_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' =\n    Infer\n     (map fst\n       (prems_of\n         (Infer\n           (zip (prems_of \\<iota>')\n             (replicate (length (prems_of \\<iota>')) Old))\n           (concl_of \\<iota>', l0))))\n     (fst (concl_of\n            (Infer\n              (zip (prems_of \\<iota>')\n                (replicate (length (prems_of \\<iota>')) Old))\n              (concl_of \\<iota>', l0))))", "by simp"], ["proof (state)\nthis:\n  \\<iota>' = FL.to_F \\<iota>''\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota>'' \\<in> FL.Inf_from Ql\n  \\<iota>' = FL.to_F \\<iota>''", "have \"\\<iota> \\<in> G.Red_I Q G\""], ["proof (prove)\nusing this:\n  \\<iota>'' \\<in> FL.Inf_from Ql\n  \\<iota>' = FL.to_F \\<iota>''\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> G.Red_I Q G", "using \\<iota>_in_\\<iota>'\n        FL.sat_inf_imp_ground_red_fam_inter[OF satur, unfolded limuls_eq gflimuls_eq, simplified]"], ["proof (prove)\nusing this:\n  \\<iota>'' \\<in> FL.Inf_from Ql\n  \\<iota>' = FL.to_F \\<iota>''\n  \\<iota> \\<in> \\<G>_I Q \\<iota>'\n  \\<lbrakk>?\\<iota>' \\<in> FL.Inf_from Ql;\n   ?\\<iota> \\<in> \\<G>_I ?q (FL.to_F ?\\<iota>')\\<rbrakk>\n  \\<Longrightarrow> ?\\<iota> \\<in> G.Red_I ?q G\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> G.Red_I Q G", "by blast"], ["proof (state)\nthis:\n  \\<iota> \\<in> G.Red_I Q G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "then"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> G.Red_I Q G", "have \"G.redundant_infer G \\<iota>\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> G.Red_I Q G\n\ngoal (1 subgoal):\n 1. G.redundant_infer G \\<iota>", "unfolding G.Red_I_def"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> {\\<iota> \\<in> G_Inf Q. G.redundant_infer G \\<iota>}\n\ngoal (1 subgoal):\n 1. G.redundant_infer G \\<iota>", "by auto"], ["proof (state)\nthis:\n  G.redundant_infer G \\<iota>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "then"], ["proof (chain)\npicking this:\n  G.redundant_infer G \\<iota>", "have \\<gamma>_red: \"src.redundant_infer G \\<gamma>\""], ["proof (prove)\nusing this:\n  G.redundant_infer G \\<iota>\n\ngoal (1 subgoal):\n 1. src.redundant_infer G \\<gamma>", "unfolding \\<gamma>"], ["proof (prove)\nusing this:\n  G.redundant_infer G \\<iota>\n\ngoal (1 subgoal):\n 1. src.redundant_infer G (old_infer_of \\<iota>)", "by (rule new_redundant_infer_imp_old_redundant_infer)"], ["proof (state)\nthis:\n  src.redundant_infer G \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "moreover"], ["proof (state)\nthis:\n  src.redundant_infer G \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "have \"\\<gamma> \\<in> gd.ord_\\<Gamma> Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> gd.ord_\\<Gamma> Sts", "using \\<gamma>_inf gd.inferences_from_def"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> gd.inferences_from Sts G\n  gd.inferences_from ?Sts ?CC =\n  {\\<gamma> \\<in> gd.ord_\\<Gamma> ?Sts. old_infer_from ?CC \\<gamma>}\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> gd.ord_\\<Gamma> Sts", "by blast"], ["proof (state)\nthis:\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> gd.inferences_from Sts G \\<Longrightarrow>\n       x \\<in> src.Ri Sts G", "ultimately"], ["proof (chain)\npicking this:\n  src.redundant_infer G \\<gamma>\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts", "show \"\\<gamma> \\<in> src.Ri Sts G\""], ["proof (prove)\nusing this:\n  src.redundant_infer G \\<gamma>\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> src.Ri Sts G", "unfolding src.Ri_def"], ["proof (prove)\nusing this:\n  src.redundant_infer G \\<gamma>\n  \\<gamma> \\<in> gd.ord_\\<Gamma> Sts\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> {\\<gamma> \\<in> gd.ord_\\<Gamma> Sts.\n           src.redundant_infer G \\<gamma>}", "by auto"], ["proof (state)\nthis:\n  \\<gamma> \\<in> src.Ri Sts G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gd.inferences_from Sts G \\<subseteq> src.Ri Sts G\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "then"], ["proof (chain)\npicking this:\n  gd.inferences_from Sts G \\<subseteq> src.Ri Sts G", "show ?thesis"], ["proof (prove)\nusing this:\n  gd.inferences_from Sts G \\<subseteq> src.Ri Sts G\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "unfolding G_def clst_eq src.saturated_upto_def"], ["proof (prove)\nusing this:\n  gd.inferences_from Sts (\\<Union> (\\<G>_F ` Q))\n  \\<subseteq> src.Ri Sts (\\<Union> (\\<G>_F ` Q))\n\ngoal (1 subgoal):\n 1. gd.inferences_from Sts (\\<G>_Fset Q - src.Rf (\\<G>_Fset Q))\n    \\<subseteq> src.Ri Sts (\\<G>_Fset Q)", "by clarsimp (smt Diff_subset gd.inferences_from_mono subset_eq \\<G>_Fset_def)"], ["proof (state)\nthis:\n  src.saturated_upto Sts\n   (\\<G>_Fset\n     (N_of_state (Liminf_state Sts) \\<union>\n      P_of_state (Liminf_state Sts) \\<union>\n      Q_of_state (Liminf_state Sts)))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem RP_sound_old_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    bot_in: \"{#} \\<in> clss_of_state (Liminf_state Sts)\"\n  shows \"\\<not> satisfiable (grounding_of_state (lhd Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (\\<G>_Fset\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "using RP_sound_new_statement[OF deriv bot_in]"], ["proof (prove)\nusing this:\n  N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n  Q_of_state (lhd Sts) \\<TTurnstile>\\<G>e\n  {{#}}\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (\\<G>_Fset\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "unfolding F_entails_\\<G>_iff \\<G>_Fset_def"], ["proof (prove)\nusing this:\n  \\<Union>\n   (\\<G>_F `\n    (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n     Q_of_state (lhd Sts))) \\<TTurnstile>e\n  \\<Union> (\\<G>_F ` {{#}})\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (\\<Union>\n              (\\<G>_F `\n               (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n                Q_of_state (lhd Sts))))", "by simp"], ["", "text \\<open>The theorem below is stated differently than the original theorem in \\textsf{RP}:\nThe grounding of the limit might be a strict subset of the limit of the groundings. Because\nsaturation is neither monotone nor antimonotone, the two results are incomparable. See also\n@{thm [source] grounding_of_state_Liminf_state_subseteq}.\\<close>"], ["", "theorem RP_saturated_if_fair_old_statement_altered:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\"\n  shows \"src.saturated_upto Sts (grounding_of_state (Liminf_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "note fair' = old_fair_imp_new_fair[OF chain_not_lnull[OF deriv] fair empty_Q0]"], ["proof (state)\nthis:\n  FL.active_subset (lclss_of_state (lhd Sts)) = {}\n  FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\n\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. src.saturated_upto Sts\n     (\\<G>_Fset\n       (N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)))", "by (rule saturated_imp_saturated_RP[OF _ fair'(2)], rule RP_saturated_if_fair_new_statement)\n      (rule deriv fair')+"], ["proof (state)\nthis:\n  src.saturated_upto Sts\n   (\\<G>_Fset\n     (N_of_state (Liminf_state Sts) \\<union>\n      P_of_state (Liminf_state Sts) \\<union>\n      Q_of_state (Liminf_state Sts)))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary RP_complete_if_fair_old_statement:\n  assumes\n    deriv: \"chain (\\<leadsto>RP) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\" and\n    unsat: \"\\<not> satisfiable (grounding_of_state (lhd Sts))\"\n  shows \"{#} \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "proof (rule RP_complete_if_fair_new_statement)"], ["proof (state)\ngoal (4 subgoals):\n 1. chain (\\<leadsto>RP) Sts\n 2. FL.active_subset (lclss_of_state (lhd Sts)) = {}\n 3. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}\n 4. \\<G>_Fset\n     (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n      Q_of_state (lhd Sts)) \\<TTurnstile>e\n    {{#}}", "show \\<open>\\<G>_Fset (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union> Q_of_state (lhd Sts)) \\<TTurnstile>e {{#}}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>_Fset\n     (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n      Q_of_state (lhd Sts)) \\<TTurnstile>e\n    {{#}}", "using unsat"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (\\<G>_Fset\n            (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n             Q_of_state (lhd Sts)))\n\ngoal (1 subgoal):\n 1. \\<G>_Fset\n     (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n      Q_of_state (lhd Sts)) \\<TTurnstile>e\n    {{#}}", "unfolding F_entails_\\<G>_iff"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (\\<G>_Fset\n            (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n             Q_of_state (lhd Sts)))\n\ngoal (1 subgoal):\n 1. \\<G>_Fset\n     (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n      Q_of_state (lhd Sts)) \\<TTurnstile>e\n    {{#}}", "by auto"], ["proof (state)\nthis:\n  \\<G>_Fset\n   (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n    Q_of_state (lhd Sts)) \\<TTurnstile>e\n  {{#}}\n\ngoal (3 subgoals):\n 1. chain (\\<leadsto>RP) Sts\n 2. FL.active_subset (lclss_of_state (lhd Sts)) = {}\n 3. FL.passive_subset (Liminf_llist (lmap lclss_of_state Sts)) = {}", "qed (rule deriv old_fair_imp_new_fair[OF chain_not_lnull[OF deriv] fair empty_Q0])+"], ["", "end"], ["", "end"]]}