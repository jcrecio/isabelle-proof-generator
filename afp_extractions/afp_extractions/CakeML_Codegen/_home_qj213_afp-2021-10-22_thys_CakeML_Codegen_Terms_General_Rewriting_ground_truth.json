{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen/Terms/General_Rewriting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen", "problem_names": ["lemma rt_fun:\n  \"R\\<^sup>*\\<^sup>* t t' \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t u) (app t' u)\"", "lemma rt_arg:\n  \"R\\<^sup>*\\<^sup>* u u' \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t u) (app t u')\"", "lemma rt_comb:\n  \"R\\<^sup>*\\<^sup>* t\\<^sub>1 u\\<^sub>1 \\<Longrightarrow> R\\<^sup>*\\<^sup>* t\\<^sub>2 u\\<^sub>2 \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t\\<^sub>1 t\\<^sub>2) (app u\\<^sub>1 u\\<^sub>2)\"", "lemma rt_list_comb:\n  assumes \"list_all2 R\\<^sup>*\\<^sup>* ts us\" \"R\\<^sup>*\\<^sup>* t u\"\n  shows \"R\\<^sup>*\\<^sup>* (list_comb t ts) (list_comb u us)\""], "translations": [["", "lemma rt_fun:\n  \"R\\<^sup>*\\<^sup>* t t' \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t u) (app t' u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>*\\<^sup>* t t' \\<Longrightarrow>\n    R\\<^sup>*\\<^sup>* (app t u) (app t' u)", "by (induct rule: rtranclp.induct) (auto intro: rtranclp.rtrancl_into_rtrancl R_fun)"], ["", "lemma rt_arg:\n  \"R\\<^sup>*\\<^sup>* u u' \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t u) (app t u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>*\\<^sup>* u u' \\<Longrightarrow>\n    R\\<^sup>*\\<^sup>* (app t u) (app t u')", "by (induct rule: rtranclp.induct) (auto intro: rtranclp.rtrancl_into_rtrancl R_arg)"], ["", "lemma rt_comb:\n  \"R\\<^sup>*\\<^sup>* t\\<^sub>1 u\\<^sub>1 \\<Longrightarrow> R\\<^sup>*\\<^sup>* t\\<^sub>2 u\\<^sub>2 \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t\\<^sub>1 t\\<^sub>2) (app u\\<^sub>1 u\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R\\<^sup>*\\<^sup>* t\\<^sub>1 u\\<^sub>1;\n     R\\<^sup>*\\<^sup>* t\\<^sub>2 u\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> R\\<^sup>*\\<^sup>* (app t\\<^sub>1 t\\<^sub>2)\n                       (app u\\<^sub>1 u\\<^sub>2)", "by (metis rt_fun rt_arg rtranclp_trans)"], ["", "lemma rt_list_comb:\n  assumes \"list_all2 R\\<^sup>*\\<^sup>* ts us\" \"R\\<^sup>*\\<^sup>* t u\"\n  shows \"R\\<^sup>*\\<^sup>* (list_comb t ts) (list_comb u us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>*\\<^sup>* (list_comb t ts) (list_comb u us)", "using assms"], ["proof (prove)\nusing this:\n  list_all2 R\\<^sup>*\\<^sup>* ts us\n  R\\<^sup>*\\<^sup>* t u\n\ngoal (1 subgoal):\n 1. R\\<^sup>*\\<^sup>* (list_comb t ts) (list_comb u us)", "by (induction ts us arbitrary: t u rule: list.rel_induct) (auto intro: rt_comb)"], ["", "end"], ["", "end"]]}