{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen/Terms/Term_as_Value.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen", "problem_names": ["lemma value_distinct:\n  \"Sabs cs \\<noteq> name $$ ts\" (is ?P)\n  \"name $$ ts \\<noteq> Sabs cs\" (is ?Q)", "lemma svar_value[simp]: \"\\<not> is_value (Svar name)\"", "lemma value_cases:\n  obtains (comb) name vs where \"list_all is_value vs\" \"t = name $$ vs\" \"name |\\<in>| C\"\n        | (abs) cs where \"t = Sabs cs\"\n        | (nonvalue) \"\\<not> is_value t\"", "lemmas smatch'_induct = smatch'.induct[case_names var constr]", "lemma smatch_list_comb_is_value:\n  assumes \"is_value t\"\n  shows \"match (name $$ ps) t = (case strip_comb t of\n    (Sconst name', vs) \\<Rightarrow>\n      (if name = name' \\<and> length ps = length vs then\n        map_option (foldl (++\\<^sub>f) fmempty) (those (map2 match ps vs))\n      else\n        None)\n  | _ \\<Rightarrow> None)\"", "lemma smatch_smatch'_eq:\n  assumes \"linear pat\" \"is_value t\"\n  shows \"match pat t = smatch' (mk_pat pat) t\""], "translations": [["", "lemma value_distinct:\n  \"Sabs cs \\<noteq> name $$ ts\" (is ?P)\n  \"name $$ ts \\<noteq> Sabs cs\" (is ?Q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sabs cs \\<noteq> name $$ ts &&& name $$ ts \\<noteq> Sabs cs", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. Sabs cs \\<noteq> name $$ ts\n 2. name $$ ts \\<noteq> Sabs cs", "show ?P"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sabs cs \\<noteq> name $$ ts", "apply (rule list_comb_cases'[where f = \"const name\" and xs = ts])"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_app (name $$ ts) \\<Longrightarrow> Sabs cs \\<noteq> name $$ ts\n 2. \\<lbrakk>name $$ ts = const name; ts = []\\<rbrakk>\n    \\<Longrightarrow> Sabs cs \\<noteq> name $$ ts", "apply (auto simp: const_sterm_def is_app_def elim: unapp_sterm.elims)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sabs cs \\<noteq> name $$ ts\n\ngoal (1 subgoal):\n 1. name $$ ts \\<noteq> Sabs cs", "thus ?Q"], ["proof (prove)\nusing this:\n  Sabs cs \\<noteq> name $$ ts\n\ngoal (1 subgoal):\n 1. name $$ ts \\<noteq> Sabs cs", "by simp"], ["proof (state)\nthis:\n  name $$ ts \\<noteq> Sabs cs\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation value_env :: \"(name, sterm) fmap \\<Rightarrow> bool\" where\n\"value_env \\<equiv> fmpred (\\<lambda>_. is_value)\""], ["", "lemma svar_value[simp]: \"\\<not> is_value (Svar name)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_value (Svar name)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. is_value (Svar name) \\<Longrightarrow> False", "assume \"is_value (Svar name)\""], ["proof (state)\nthis:\n  is_value (Svar name)\n\ngoal (1 subgoal):\n 1. is_value (Svar name) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  is_value (Svar name)\n\ngoal (1 subgoal):\n 1. False", "apply (cases rule: is_value.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>Svar name = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fold free_sterm_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>free name = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma value_cases:\n  obtains (comb) name vs where \"list_all is_value vs\" \"t = name $$ vs\" \"name |\\<in>| C\"\n        | (abs) cs where \"t = Sabs cs\"\n        | (nonvalue) \"\\<not> is_value t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>vs name.\n                \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                 name |\\<in>| C\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n     \\<not> is_value t \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (cases t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Svar x2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x3.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sabs x3\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Svar"], ["proof (state)\nthis:\n  t = Svar x2_\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Svar x2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x3.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sabs x3\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  t = Svar x2_\n\ngoal (1 subgoal):\n 1. thesis", "using nonvalue"], ["proof (prove)\nusing this:\n  t = Svar x2_\n  \\<not> is_value t \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x3.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sabs x3\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x3.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sabs x3\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Sabs"], ["proof (state)\nthis:\n  t = Sabs x3_\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x3.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sabs x3\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  t = Sabs x3_\n\ngoal (1 subgoal):\n 1. thesis", "using abs"], ["proof (prove)\nusing this:\n  t = Sabs x3_\n  t = Sabs ?cs \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto intro: is_value.abs)"], ["proof (state)\nthis:\n  thesis\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Sconst name)"], ["proof (state)\nthis:\n  t = Sconst name\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"list_all is_value []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all is_value []", "by simp"], ["proof (state)\nthis:\n  list_all is_value []\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"t = name $$ []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = name $$ []", "unfolding Sconst"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sconst name = name $$ []", "by (simp add: const_sterm_def)"], ["proof (state)\nthis:\n  t = name $$ []\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis; t = Sconst x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using comb is_value.cases abs nonvalue"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all is_value ?vs; t = ?name $$ ?vs; ?name |\\<in>| C\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>is_value ?a; \\<And>cs. ?a = Sabs cs \\<Longrightarrow> ?P;\n   \\<And>vs name.\n      \\<lbrakk>?a = name $$ vs; list_all is_value vs;\n       name |\\<in>| C\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  t = Sabs ?cs \\<Longrightarrow> thesis\n  \\<not> is_value t \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Sapp"], ["proof (state)\nthis:\n  t = x41_ $\\<^sub>s x42_\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42.\n       \\<lbrakk>\\<And>vs name.\n                   \\<lbrakk>list_all is_value vs; t = name $$ vs;\n                    name |\\<in>| C\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>cs. t = Sabs cs \\<Longrightarrow> thesis;\n        \\<not> is_value t \\<Longrightarrow> thesis;\n        t = x41 $\\<^sub>s x42\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"is_value t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_value t \\<Longrightarrow> thesis\n 2. \\<not> is_value t \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  \\<not> is_value t\n\ngoal (2 subgoals):\n 1. is_value t \\<Longrightarrow> thesis\n 2. \\<not> is_value t \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  \\<not> is_value t\n\ngoal (1 subgoal):\n 1. thesis", "using nonvalue"], ["proof (prove)\nusing this:\n  \\<not> is_value t\n  \\<not> is_value t \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. is_value t \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_value t \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  is_value t\n\ngoal (1 subgoal):\n 1. is_value t \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  is_value t", "obtain name vs where \"list_all is_value vs\" \"t = name $$ vs\" \"name |\\<in>| C\""], ["proof (prove)\nusing this:\n  is_value t\n\ngoal (1 subgoal):\n 1. (\\<And>vs name.\n        \\<lbrakk>list_all is_value vs; t = name $$ vs;\n         name |\\<in>| C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Sapp"], ["proof (prove)\nusing this:\n  is_value (x41_ $\\<^sub>s x42_)\n\ngoal (1 subgoal):\n 1. (\\<And>vs name.\n        \\<lbrakk>list_all is_value vs; x41_ $\\<^sub>s x42_ = name $$ vs;\n         name |\\<in>| C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  list_all is_value vs\n  t = name $$ vs\n  name |\\<in>| C\n\ngoal (1 subgoal):\n 1. is_value t \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  list_all is_value vs\n  t = name $$ vs\n  name |\\<in>| C\n\ngoal (1 subgoal):\n 1. thesis", "using comb"], ["proof (prove)\nusing this:\n  list_all is_value vs\n  t = name $$ vs\n  name |\\<in>| C\n  \\<lbrakk>list_all is_value ?vs; t = ?name $$ ?vs; ?name |\\<in>| C\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "fun smatch' :: \"pat \\<Rightarrow> sterm \\<Rightarrow> (name, sterm) fmap option\" where\n\"smatch' (Patvar name) t = Some (fmap_of_list [(name, t)])\" |\n\"smatch' (Patconstr name ps) t =\n  (case strip_comb t of\n    (Sconst name', vs) \\<Rightarrow>\n      (if name = name' \\<and> length ps = length vs then\n        map_option (foldl (++\\<^sub>f) fmempty) (those (map2 smatch' ps vs))\n      else\n        None)\n  | _ \\<Rightarrow> None)\""], ["", "lemmas smatch'_induct = smatch'.induct[case_names var constr]"], ["", "context constructors begin"], ["", "context begin"], ["", "private"], ["", "lemma smatch_list_comb_is_value:\n  assumes \"is_value t\"\n  shows \"match (name $$ ps) t = (case strip_comb t of\n    (Sconst name', vs) \\<Rightarrow>\n      (if name = name' \\<and> length ps = length vs then\n        map_option (foldl (++\\<^sub>f) fmempty) (those (map2 match ps vs))\n      else\n        None)\n  | _ \\<Rightarrow> None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match (name $$ ps) t =\n    (case strip_comb t of\n     (Sconst name', vs) \\<Rightarrow>\n       if name = name' \\<and> length ps = length vs\n       then map_option (foldl (++\\<^sub>f) fmempty)\n             (those (Term_Utils.map2 match ps vs))\n       else None\n     | (Svar x, vs) \\<Rightarrow> Map.empty x\n     | (Sabs x, vs) \\<Rightarrow> Map.empty x\n     | (sterm1 $\\<^sub>s x, vs) \\<Rightarrow> Map.empty x)", "using assms"], ["proof (prove)\nusing this:\n  is_value t\n\ngoal (1 subgoal):\n 1. match (name $$ ps) t =\n    (case strip_comb t of\n     (Sconst name', vs) \\<Rightarrow>\n       if name = name' \\<and> length ps = length vs\n       then map_option (foldl (++\\<^sub>f) fmempty)\n             (those (Term_Utils.map2 match ps vs))\n       else None\n     | (Svar x, vs) \\<Rightarrow> Map.empty x\n     | (Sabs x, vs) \\<Rightarrow> Map.empty x\n     | (sterm1 $\\<^sub>s x, vs) \\<Rightarrow> Map.empty x)", "apply cases"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cs.\n       t = Sabs cs \\<Longrightarrow>\n       match (name $$ ps) t =\n       (case strip_comb t of\n        (Sconst name', vs) \\<Rightarrow>\n          if name = name' \\<and> length ps = length vs\n          then map_option (foldl (++\\<^sub>f) fmempty)\n                (those (Term_Utils.map2 match ps vs))\n          else None\n        | (Svar x, vs) \\<Rightarrow> Map.empty x\n        | (Sabs x, vs) \\<Rightarrow> Map.empty x\n        | (sterm1 $\\<^sub>s x, vs) \\<Rightarrow> Map.empty x)\n 2. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ ps) t =\n                         (case strip_comb t of\n                          (Sconst name', vs) \\<Rightarrow>\n                            if name = name' \\<and> length ps = length vs\n                            then map_option (foldl (++\\<^sub>f) fmempty)\n                                  (those (Term_Utils.map2 match ps vs))\n                            else None\n                          | (Svar x, vs) \\<Rightarrow> Map.empty x\n                          | (Sabs x, vs) \\<Rightarrow> Map.empty x\n                          | (sterm1 $\\<^sub>s x, vs) \\<Rightarrow>\n                              Map.empty x)", "apply (auto simp: strip_list_comb split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ ps) (namea $$ vs) =\n                         (case const namea of\n                          Sconst name' \\<Rightarrow>\n                            if name = name' \\<and> length ps = length vs\n                            then map_option (foldl (++\\<^sub>f) fmempty)\n                                  (those (Term_Utils.map2 match ps vs))\n                            else None\n                          | Svar x \\<Rightarrow> Map.empty x\n                          | Sabs x \\<Rightarrow> Map.empty x\n                          | sterm1 $\\<^sub>s x \\<Rightarrow> Map.empty x)", "apply (subst (2) const_sterm_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ ps) (namea $$ vs) =\n                         (case Sconst namea of\n                          Sconst name' \\<Rightarrow>\n                            if name = name' \\<and> length ps = length vs\n                            then map_option (foldl (++\\<^sub>f) fmempty)\n                                  (those (Term_Utils.map2 match ps vs))\n                            else None\n                          | Svar x \\<Rightarrow> Map.empty x\n                          | Sabs x \\<Rightarrow> Map.empty x\n                          | sterm1 $\\<^sub>s x \\<Rightarrow> Map.empty x)", "apply (auto simp: matchs_alt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma smatch_smatch'_eq:\n  assumes \"linear pat\" \"is_value t\"\n  shows \"match pat t = smatch' (mk_pat pat) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match pat t = smatch' (mk_pat pat) t", "using assms"], ["proof (prove)\nusing this:\n  linear pat\n  is_value t\n\ngoal (1 subgoal):\n 1. match pat t = smatch' (mk_pat pat) t", "proof (induction pat arbitrary: t rule: linear_pat_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       is_value t \\<Longrightarrow>\n       match (Free s) t = smatch' (mk_pat (Free s)) t\n 2. \\<And>name args t.\n       \\<lbrakk>linears args;\n        \\<And>arg t.\n           \\<lbrakk>arg \\<in> set args; is_value t\\<rbrakk>\n           \\<Longrightarrow> match arg t = smatch' (mk_pat arg) t;\n        is_value t\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "case (comb name args)"], ["proof (state)\nthis:\n  linears args\n  \\<lbrakk>?arg \\<in> set args; is_value ?t\\<rbrakk>\n  \\<Longrightarrow> match ?arg ?t = smatch' (mk_pat ?arg) ?t\n  is_value t\n\ngoal (2 subgoals):\n 1. \\<And>s t.\n       is_value t \\<Longrightarrow>\n       match (Free s) t = smatch' (mk_pat (Free s)) t\n 2. \\<And>name args t.\n       \\<lbrakk>linears args;\n        \\<And>arg t.\n           \\<lbrakk>arg \\<in> set args; is_value t\\<rbrakk>\n           \\<Longrightarrow> match arg t = smatch' (mk_pat arg) t;\n        is_value t\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. match (name $$ args) t = smatch' (mk_pat (name $$ args)) t", "using \\<open>is_value t\\<close>"], ["proof (prove)\nusing this:\n  is_value t\n\ngoal (1 subgoal):\n 1. match (name $$ args) t = smatch' (mk_pat (name $$ args)) t", "proof (cases rule: is_value.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>cs.\n       t = Sabs cs \\<Longrightarrow>\n       match (name $$ args) t = smatch' (mk_pat (name $$ args)) t\n 2. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "case (abs cs)"], ["proof (state)\nthis:\n  t = Sabs cs\n\ngoal (2 subgoals):\n 1. \\<And>cs.\n       t = Sabs cs \\<Longrightarrow>\n       match (name $$ args) t = smatch' (mk_pat (name $$ args)) t\n 2. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Sabs cs\n\ngoal (1 subgoal):\n 1. match (name $$ args) t = smatch' (mk_pat (name $$ args)) t", "by (force simp: strip_list_comb_const)"], ["proof (state)\nthis:\n  match (name $$ args) t = smatch' (mk_pat (name $$ args)) t\n\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "case (constr args' name')"], ["proof (state)\nthis:\n  t = name' $$ args'\n  list_all is_value args'\n  name' |\\<in>| C\n\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "have \"map2 match args args' = map2 smatch' (map mk_pat args) args'\" if \"length args = length args'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Term_Utils.map2 match args args' =\n    Term_Utils.map2 smatch' (map mk_pat args) args'", "using that constr(2) comb(2)"], ["proof (prove)\nusing this:\n  length args = length args'\n  list_all is_value args'\n  \\<lbrakk>?arg \\<in> set args; is_value ?t\\<rbrakk>\n  \\<Longrightarrow> match ?arg ?t = smatch' (mk_pat ?arg) ?t\n\ngoal (1 subgoal):\n 1. Term_Utils.map2 match args args' =\n    Term_Utils.map2 smatch' (map mk_pat args) args'", "by (induct args args' rule: list_induct2) auto"], ["proof (state)\nthis:\n  length args = length args' \\<Longrightarrow>\n  Term_Utils.map2 match args args' =\n  Term_Utils.map2 smatch' (map mk_pat args) args'\n\ngoal (1 subgoal):\n 1. \\<And>vs namea.\n       \\<lbrakk>t = namea $$ vs; list_all is_value vs;\n        namea |\\<in>| C\\<rbrakk>\n       \\<Longrightarrow> match (name $$ args) t =\n                         smatch' (mk_pat (name $$ args)) t", "thus ?thesis"], ["proof (prove)\nusing this:\n  length args = length args' \\<Longrightarrow>\n  Term_Utils.map2 match args args' =\n  Term_Utils.map2 smatch' (map mk_pat args) args'\n\ngoal (1 subgoal):\n 1. match (name $$ args) t = smatch' (mk_pat (name $$ args)) t", "using constr"], ["proof (prove)\nusing this:\n  length args = length args' \\<Longrightarrow>\n  Term_Utils.map2 match args args' =\n  Term_Utils.map2 smatch' (map mk_pat args) args'\n  t = name' $$ args'\n  list_all is_value args'\n  name' |\\<in>| C\n\ngoal (1 subgoal):\n 1. match (name $$ args) t = smatch' (mk_pat (name $$ args)) t", "apply (auto\n                simp: smatch_list_comb_is_value strip_list_comb map_option_case strip_list_comb_const\n                intro: is_value.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length args = length args' \\<Longrightarrow>\n             Term_Utils.map2 match args args' =\n             Term_Utils.map2 smatch' (map mk_pat args) args';\n     t = name' $$ args'; list_all is_value args'; name' |\\<in>| C\\<rbrakk>\n    \\<Longrightarrow> match (name $$ args) (name' $$ args') =\n                      (case const name' of\n                       Sconst name' \\<Rightarrow>\n                         if name = name' \\<and>\n                            length (map mk_pat args) = length args'\n                         then map_option (foldl (++\\<^sub>f) fmempty)\n                               (those\n                                 (Term_Utils.map2 smatch' (map mk_pat args)\n                                   args'))\n                         else None\n                       | Svar x \\<Rightarrow> Map.empty x\n                       | Sabs x \\<Rightarrow> Map.empty x\n                       | sterm1 $\\<^sub>s x \\<Rightarrow> Map.empty x)", "apply (subst (2) const_sterm_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length args = length args' \\<Longrightarrow>\n             Term_Utils.map2 match args args' =\n             Term_Utils.map2 smatch' (map mk_pat args) args';\n     t = name' $$ args'; list_all is_value args'; name' |\\<in>| C\\<rbrakk>\n    \\<Longrightarrow> match (name $$ args) (name' $$ args') =\n                      (case Sconst name' of\n                       Sconst name' \\<Rightarrow>\n                         if name = name' \\<and>\n                            length (map mk_pat args) = length args'\n                         then map_option (foldl (++\\<^sub>f) fmempty)\n                               (those\n                                 (Term_Utils.map2 smatch' (map mk_pat args)\n                                   args'))\n                         else None\n                       | Svar x \\<Rightarrow> Map.empty x\n                       | Sabs x \\<Rightarrow> Map.empty x\n                       | sterm1 $\\<^sub>s x \\<Rightarrow> Map.empty x)", "apply (auto simp: matchs_alt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  match (name $$ args) t = smatch' (mk_pat (name $$ args)) t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  match (name $$ args) t = smatch' (mk_pat (name $$ args)) t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       is_value t \\<Longrightarrow>\n       match (Free s) t = smatch' (mk_pat (Free s)) t", "qed simp"], ["", "end"], ["", "end"], ["", "end"]]}