{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen/Test/Test_Embed_Simple.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen", "problem_names": ["lemma \"\\<langle>\\<lambda>y x. map x y\\<rangle> = \\<Lambda> \\<Lambda> (Const (Name ''List_list_map'') $ Bound 0 $ Bound 1)\""], "translations": [["", "lemma \"\\<langle>\\<lambda>y x. map x y\\<rangle> = \\<Lambda> \\<Lambda> (Const (Name ''List_list_map'') $ Bound 0 $ Bound 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Lambda> \\<Lambda> (Const (Name ''List_list_map'') $ Bound 0 $\n                         Bound 1) =\n    \\<Lambda> \\<Lambda> (Const (Name ''List_list_map'') $ Bound 0 $ Bound 1)", ".."], ["", "definition id where \"id x \\<equiv> x\""], ["", "embed id' is id"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "print_theorems"], ["", "fun app where\n\"app [] xs = xs\" |\n\"app (y # ys) xs = y # app ys xs\""], ["", "embed app' is app"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "print_theorems"], ["", "declassify \"(@)\""], ["", "embed app'' is List_append"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "thm app''"], ["", "fun rev where\n\"rev ys [] = ys\" |\n\"rev ys (x # xs) = rev (x # ys) xs\""], ["", "embed rev' is rev"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "print_theorems"], ["", "declassify butlast"], ["", "print_theorems"], ["", "(* FIXME butlast' uses guarded recursion with if ... doesn't work just yet\nembed butlast' is List_butlast .*)"], ["", "datatype foo = A | B | C"], ["", "derive evaluate foo"], ["", "datatype 'a bippy = X 'a 'a | Y 'a 'a"], ["", "derive evaluate bippy"], ["", "fun bip where\n\"bip (X a b) = a\" |\n\"bip (Y c d) = c\""], ["", "embed bip' is bip"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "print_theorems"], ["", "fun mapp where\n\"mapp [] = (\\<lambda>_. [])\" |\n\"mapp (x # xs) = (\\<lambda>f. f x # mapp xs f)\""], ["", "definition map_suc where \"map_suc xs = mapp xs Suc\""], ["", "embed mapp' is map_suc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "thm mapp'"], ["", "fun odd and even :: \"nat \\<Rightarrow> bool\" where\n\"odd 0 \\<longleftrightarrow> id False\" |\n\"odd (Suc n) \\<longleftrightarrow> id (even n)\" |\n\"even 0 \\<longleftrightarrow> id (id True)\" |\n\"even (Suc n) \\<longleftrightarrow> odd n\""], ["", "embed odd_even is id odd even"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "thm odd_even"], ["", "end"]]}