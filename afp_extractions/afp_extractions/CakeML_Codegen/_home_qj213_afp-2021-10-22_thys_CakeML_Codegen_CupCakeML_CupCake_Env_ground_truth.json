{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen/CupCakeML/CupCake_Env.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen", "problem_names": ["lemma v_of_empty_sem_env[simp]: \"sem_env.v empty_sem_env = nsEmpty\"", "lemma c_of_empty_sem_env[simp]: \"c empty_sem_env = static_cenv\"", "lemma is_cupcake_all_envE:\n  assumes \"is_cupcake_all_env env\"\n  obtains v c where \"env = \\<lparr> sem_env.v = Bind v [], sem_env.c = c \\<rparr>\" \"c = static_cenv\" \"list_all (is_cupcake_value \\<circ> snd) v\"", "lemma is_cupcake_nsE:\n  assumes \"is_cupcake_ns ns\"\n  obtains v where \"ns = Bind v []\" \"list_all (is_cupcake_value \\<circ> snd) v\"", "lemma is_cupcake_all_envD:\n  assumes \"is_cupcake_all_env env\"\n  shows \"is_cupcake_ns (sem_env.v env)\" \"cupcake_c_ns (c env)\"", "lemma is_cupcake_all_envI:\n  assumes \"is_cupcake_ns (sem_env.v env)\" \"sem_env.c env = static_cenv\"\n  shows \"is_cupcake_all_env env\""], "translations": [["", "lemma v_of_empty_sem_env[simp]: \"sem_env.v empty_sem_env = nsEmpty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sem_env.v empty_sem_env = nsEmpty", "unfolding empty_sem_env_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sem_env.v (make_sem_env nsEmpty static_cenv) = nsEmpty", "by simp"], ["", "lemma c_of_empty_sem_env[simp]: \"c empty_sem_env = static_cenv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c empty_sem_env = static_cenv", "unfolding empty_sem_env_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. c (make_sem_env nsEmpty static_cenv) = static_cenv", "by simp"], ["", "fun is_cupcake_value :: \"SemanticPrimitives.v \\<Rightarrow> bool\"\nand is_cupcake_all_env :: \"all_env \\<Rightarrow> bool\" where\n\"is_cupcake_value (Conv (Some (_, TypeId (Short _))) vs) \\<longleftrightarrow> list_all is_cupcake_value vs\" |\n\"is_cupcake_value (Closure env _ e) \\<longleftrightarrow> is_cupcake_exp e \\<and> is_cupcake_all_env env\" |\n\"is_cupcake_value (Recclosure env es _) \\<longleftrightarrow> list_all (\\<lambda>(_, _, e). is_cupcake_exp e) es \\<and> is_cupcake_all_env env\" |\n\"is_cupcake_value _ \\<longleftrightarrow> False\" |\n\"is_cupcake_all_env \\<lparr> sem_env.v = Bind v0 [], sem_env.c = c0 \\<rparr> \\<longleftrightarrow> c0 = static_cenv \\<and> list_all (is_cupcake_value \\<circ> snd) v0\" |\n\"is_cupcake_all_env _ \\<longleftrightarrow> False\""], ["", "lemma is_cupcake_all_envE:\n  assumes \"is_cupcake_all_env env\"\n  obtains v c where \"env = \\<lparr> sem_env.v = Bind v [], sem_env.c = c \\<rparr>\" \"c = static_cenv\" \"list_all (is_cupcake_value \\<circ> snd) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v c.\n        \\<lbrakk>env = make_sem_env (Bind v []) c; c = static_cenv;\n         list_all (is_cupcake_value \\<circ> snd) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_cupcake_all_env env\n\ngoal (1 subgoal):\n 1. (\\<And>v c.\n        \\<lbrakk>env = make_sem_env (Bind v []) c; c = static_cenv;\n         list_all (is_cupcake_value \\<circ> snd) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: is_cupcake_all_env.elims)"], ["", "fun is_cupcake_ns :: \"v_ns \\<Rightarrow> bool\" where\n\"is_cupcake_ns (Bind v0 []) \\<longleftrightarrow> list_all (is_cupcake_value \\<circ> snd) v0\" |\n\"is_cupcake_ns _ \\<longleftrightarrow> False\""], ["", "lemma is_cupcake_nsE:\n  assumes \"is_cupcake_ns ns\"\n  obtains v where \"ns = Bind v []\" \"list_all (is_cupcake_value \\<circ> snd) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>ns = Bind v [];\n         list_all (is_cupcake_value \\<circ> snd) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_cupcake_ns ns\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>ns = Bind v [];\n         list_all (is_cupcake_value \\<circ> snd) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_cupcake_ns.elims)"], ["", "lemma is_cupcake_all_envD:\n  assumes \"is_cupcake_all_env env\"\n  shows \"is_cupcake_ns (sem_env.v env)\" \"cupcake_c_ns (c env)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_cupcake_ns (sem_env.v env) &&& cupcake_c_ns (c env)", "using assms static_cenv"], ["proof (prove)\nusing this:\n  is_cupcake_all_env env\n  cupcake_c_ns static_cenv\n\ngoal (1 subgoal):\n 1. is_cupcake_ns (sem_env.v env) &&& cupcake_c_ns (c env)", "by (auto elim!: is_cupcake_all_envE)"], ["", "lemma is_cupcake_all_envI:\n  assumes \"is_cupcake_ns (sem_env.v env)\" \"sem_env.c env = static_cenv\"\n  shows \"is_cupcake_all_env env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_cupcake_all_env env", "using assms static_cenv"], ["proof (prove)\nusing this:\n  is_cupcake_ns (sem_env.v env)\n  c env = static_cenv\n  cupcake_c_ns static_cenv\n\ngoal (1 subgoal):\n 1. is_cupcake_all_env env", "apply (cases env)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>is_cupcake_ns (sem_env.v env); c env = static_cenv;\n        cupcake_c_ns static_cenv; env = make_sem_env x1 x2\\<rbrakk>\n       \\<Longrightarrow> is_cupcake_all_env env", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>is_cupcake_ns x1; x2 = static_cenv;\n        cupcake_c_ns static_cenv; env = make_sem_env x1 static_cenv\\<rbrakk>\n       \\<Longrightarrow> is_cupcake_all_env (make_sem_env x1 static_cenv)", "subgoal for v c"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_cupcake_ns v; c = static_cenv; cupcake_c_ns static_cenv;\n     env = make_sem_env v static_cenv\\<rbrakk>\n    \\<Longrightarrow> is_cupcake_all_env (make_sem_env v static_cenv)", "apply (cases v)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>is_cupcake_ns v; c = static_cenv; cupcake_c_ns static_cenv;\n        env = make_sem_env v static_cenv; v = Bind x1 x2\\<rbrakk>\n       \\<Longrightarrow> is_cupcake_all_env (make_sem_env v static_cenv)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>is_cupcake_ns (Bind x1 x2); c = static_cenv;\n        cupcake_c_ns static_cenv;\n        env = make_sem_env (Bind x1 x2) static_cenv; v = Bind x1 x2\\<rbrakk>\n       \\<Longrightarrow> is_cupcake_all_env\n                          (make_sem_env (Bind x1 x2) static_cenv)", "subgoal for x1 x2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_cupcake_ns (Bind x1 x2); c = static_cenv;\n     cupcake_c_ns static_cenv; env = make_sem_env (Bind x1 x2) static_cenv;\n     v = Bind x1 x2\\<rbrakk>\n    \\<Longrightarrow> is_cupcake_all_env\n                       (make_sem_env (Bind x1 x2) static_cenv)", "by (cases x2) auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}