{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen/Rewriting/Big_Step_Value.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen", "problem_names": ["lemma map: \"is_map (set rs)\"", "lemma (in vrules) veval_wellformed:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"wellformed t\" \"wellformed_venv \\<Gamma>\"\n  shows \"vwellformed v\"", "lemma (in vrules) veval_closed:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"closed_except t (fmdom \\<Gamma>)\" \"closed_venv \\<Gamma>\"\n  assumes \"wellformed t\" \"wellformed_venv \\<Gamma>\"\n  shows \"vclosed v\"", "lemma (in vrules) veval_constructor_value:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"vconstructor_value_env \\<Gamma>\"\n  shows \"vconstructor_value v\"", "lemma (in vrules) veval_welldefined:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\" \"welldefined t\"\n  shows \"vwelldefined v\"", "lemma value_to_sterm_srules: \"srules C_info rs'\"", "lemma veval_correct0:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"wellformed t\" \"wellformed_venv \\<Gamma>\"\n  assumes \"closed_except t (fmdom \\<Gamma>)\" \"closed_venv \\<Gamma>\"\n  assumes \"vconstructor_value_env \\<Gamma>\"\n  shows \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v\"", "lemma veval_correct:\n  assumes \"rs, fmempty \\<turnstile>\\<^sub>v t \\<down> v\" \"wellformed t\" \"closed t\"\n  shows \"rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v\""], "translations": [["", "lemma map: \"is_map (set rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map (set rs)", "using distinct"], ["proof (prove)\nusing this:\n  distinct (map fst rs)\n\ngoal (1 subgoal):\n 1. is_map (set rs)", "by (rule distinct_is_map)"], ["", "end"], ["", "abbreviation value_to_sterm_rules :: \"vrule list \\<Rightarrow> srule list\" where\n\"value_to_sterm_rules \\<equiv> map (map_prod id value_to_sterm)\""], ["", "inductive (in special_constants)\n  veval :: \"(name \\<times> value) list \\<Rightarrow> (name, value) fmap \\<Rightarrow> sterm \\<Rightarrow> value \\<Rightarrow> bool\"  (\"_, _/ \\<turnstile>\\<^sub>v/ _ \\<down>/ _\" [50,0,50] 50) for rs where\nconst: \"(name, rhs) \\<in> set rs \\<Longrightarrow> rs, \\<Gamma> \\<turnstile>\\<^sub>v Sconst name \\<down> rhs\" |\nvar: \"fmlookup \\<Gamma> name = Some val \\<Longrightarrow> rs, \\<Gamma> \\<turnstile>\\<^sub>v Svar name \\<down> val\" |\nabs: \"rs, \\<Gamma> \\<turnstile>\\<^sub>v Sabs cs \\<down> Vabs cs \\<Gamma>\" |\ncomb: \"\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>' \\<Longrightarrow> rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u' \\<Longrightarrow>\n  vfind_match cs u' = Some (env, _, rhs) \\<Longrightarrow>\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val \\<Longrightarrow>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t $\\<^sub>s u \\<down> val\" |\nrec_comb: \"\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>' \\<Longrightarrow>\n  fmlookup css name = Some cs \\<Longrightarrow>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u' \\<Longrightarrow>\n  vfind_match cs u' = Some (env, _, rhs) \\<Longrightarrow>\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val \\<Longrightarrow>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t $\\<^sub>s u \\<down> val\" |\nconstr: \"\n  name |\\<in>| C \\<Longrightarrow>\n  list_all2 (veval rs \\<Gamma>) ts us \\<Longrightarrow>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v name $$ ts \\<down> Vconstr name us\""], ["", "lemma (in vrules) veval_wellformed:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"wellformed t\" \"wellformed_venv \\<Gamma>\"\n  shows \"vwellformed v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed v", "using assms"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  pre_strong_term_class.wellformed t\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. vwellformed v", "proof induction"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "case const"], ["proof (state)\nthis:\n  (name_, rhs_) \\<in> set rs\n  pre_strong_term_class.wellformed (Sconst name_)\n  wellformed_venv \\<Gamma>_\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  pre_strong_term_class.wellformed (Sconst name_)\n  wellformed_venv \\<Gamma>_\n\ngoal (1 subgoal):\n 1. vwellformed rhs_", "using all_rules"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  pre_strong_term_class.wellformed (Sconst name_)\n  wellformed_venv \\<Gamma>_\n  list_all vrule rs\n\ngoal (1 subgoal):\n 1. vwellformed rhs_", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  vwellformed rhs_\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "case comb"], ["proof (state)\nthis:\n  rs, \\<Gamma>_ \\<turnstile>\\<^sub>v t_ \\<down> Vabs cs_ \\<Gamma>'_\n  rs, \\<Gamma>_ \\<turnstile>\\<^sub>v u_ \\<down> u'_\n  vfind_match cs_ u'_ = Some (env_, uu_, rhs_)\n  rs, \\<Gamma>'_ ++\\<^sub>f env_ \\<turnstile>\\<^sub>v rhs_ \\<down> val_\n  \\<lbrakk>pre_strong_term_class.wellformed t_;\n   wellformed_venv \\<Gamma>_\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vabs cs_ \\<Gamma>'_)\n  \\<lbrakk>pre_strong_term_class.wellformed u_;\n   wellformed_venv \\<Gamma>_\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'_\n  \\<lbrakk>pre_strong_term_class.wellformed rhs_;\n   wellformed_venv (\\<Gamma>'_ ++\\<^sub>f env_)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val_\n  pre_strong_term_class.wellformed (t_ $\\<^sub>s u_)\n  wellformed_venv \\<Gamma>_\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed val_", "apply (rule comb)"], ["proof (prove)\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs_\n 2. wellformed_venv (\\<Gamma>'_ ++\\<^sub>f env_)", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma>_ \\<turnstile>\\<^sub>v t_ \\<down> Vabs cs_ \\<Gamma>'_\n  rs, \\<Gamma>_ \\<turnstile>\\<^sub>v u_ \\<down> u'_\n  vfind_match cs_ u'_ = Some (env_, uu_, rhs_)\n  rs, \\<Gamma>'_ ++\\<^sub>f env_ \\<turnstile>\\<^sub>v rhs_ \\<down> val_\n  \\<lbrakk>pre_strong_term_class.wellformed t_;\n   wellformed_venv \\<Gamma>_\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vabs cs_ \\<Gamma>'_)\n  \\<lbrakk>pre_strong_term_class.wellformed u_;\n   wellformed_venv \\<Gamma>_\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'_\n  \\<lbrakk>pre_strong_term_class.wellformed rhs_;\n   wellformed_venv (\\<Gamma>'_ ++\\<^sub>f env_)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val_\n  pre_strong_term_class.wellformed (t_ $\\<^sub>s u_)\n  wellformed_venv \\<Gamma>_\n\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs_\n 2. wellformed_venv (\\<Gamma>'_ ++\\<^sub>f env_)", "by (auto simp: list_all_iff dest: vfind_match_elem intro: vwellformed.vmatch_env)"], ["proof (state)\nthis:\n  vwellformed val_\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "case (rec_comb \\<Gamma> t css name \\<Gamma>' cs u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "hence \"(pat, rhs) \\<in> set cs\" \"vmatch (mk_pat pat) u' = Some env\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& vmatch (mk_pat pat) u' = Some env", "by (metis vfind_match_elem)+"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vwellformed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vwellformed val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed val", "proof (rule rec_comb)"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed t\n\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"vwellformed (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed (Vrecabs css name \\<Gamma>')", "by (rule rec_comb) fact+"], ["proof (state)\nthis:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "thus \"wellformed rhs\""], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "using rec_comb \\<open>(pat, rhs) \\<in> set cs\\<close>"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  (pat, rhs) \\<in> set cs\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed rhs\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed_venv \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv \\<Gamma>'", "using \\<open>vwellformed (Vrecabs css name \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. wellformed_venv \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  wellformed_venv \\<Gamma>'\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "moreover"], ["proof (state)\nthis:\n  wellformed_venv \\<Gamma>'\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed_venv env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv env", "using rec_comb \\<open>vmatch (mk_pat pat) u' = Some env\\<close>"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u;\n   wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vwellformed u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vwellformed val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. wellformed_venv env", "by (auto intro: vwellformed.vmatch_env)"], ["proof (state)\nthis:\n  wellformed_venv env\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "ultimately"], ["proof (chain)\npicking this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv env", "show \"wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv env\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "by blast"], ["proof (state)\nthis:\n  wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwellformed val\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "case (constr name \\<Gamma> ts us)"], ["proof (state)\nthis:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n   ts us\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "have \"list_all vwellformed us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all vwellformed us", "using \\<open>list_all2 _ _ _\\<close> \\<open>wellformed (list_comb _ _)\\<close>"], ["proof (prove)\nusing this:\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n   ts us\n  pre_strong_term_class.wellformed (name $$ ts)\n\ngoal (1 subgoal):\n 1. list_all vwellformed us", "proof (induction ts us rule: list.rel_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed (name $$ []) \\<Longrightarrow>\n    list_all vwellformed []\n 2. \\<And>a21 a22 b21 b22.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v a21 \\<down> b21 \\<and>\n                (pre_strong_term_class.wellformed a21 \\<longrightarrow>\n                 wellformed_venv \\<Gamma> \\<longrightarrow>\n                 vwellformed b21);\n        pre_strong_term_class.wellformed (name $$ a22) \\<Longrightarrow>\n        list_all vwellformed b22;\n        pre_strong_term_class.wellformed (name $$ (a21 # a22))\\<rbrakk>\n       \\<Longrightarrow> list_all vwellformed (b21 # b22)", "case (Cons v vs u us)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed u)\n  pre_strong_term_class.wellformed (name $$ vs) \\<Longrightarrow>\n  list_all vwellformed us\n  pre_strong_term_class.wellformed (name $$ (v # vs))\n\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed (name $$ []) \\<Longrightarrow>\n    list_all vwellformed []\n 2. \\<And>a21 a22 b21 b22.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v a21 \\<down> b21 \\<and>\n                (pre_strong_term_class.wellformed a21 \\<longrightarrow>\n                 wellformed_venv \\<Gamma> \\<longrightarrow>\n                 vwellformed b21);\n        pre_strong_term_class.wellformed (name $$ a22) \\<Longrightarrow>\n        list_all vwellformed b22;\n        pre_strong_term_class.wellformed (name $$ (a21 # a22))\\<rbrakk>\n       \\<Longrightarrow> list_all vwellformed (b21 # b22)", "with constr"], ["proof (chain)\npicking this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n   ts us__\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed u)\n  pre_strong_term_class.wellformed (name $$ vs) \\<Longrightarrow>\n  list_all vwellformed us\n  pre_strong_term_class.wellformed (name $$ (v # vs))", "show ?case"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n   ts us__\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed u)\n  pre_strong_term_class.wellformed (name $$ vs) \\<Longrightarrow>\n  list_all vwellformed us\n  pre_strong_term_class.wellformed (name $$ (v # vs))\n\ngoal (1 subgoal):\n 1. list_all vwellformed (u # us)", "unfolding wellformed.list_comb"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n   ts us__\n  pre_strong_term_class.wellformed (const name) \\<and>\n  list_all pre_strong_term_class.wellformed ts\n  wellformed_venv \\<Gamma>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed u)\n  pre_strong_term_class.wellformed (const name) \\<and>\n  list_all pre_strong_term_class.wellformed vs \\<Longrightarrow>\n  list_all vwellformed us\n  pre_strong_term_class.wellformed (const name) \\<and>\n  list_all pre_strong_term_class.wellformed (v # vs)\n\ngoal (1 subgoal):\n 1. list_all vwellformed (u # us)", "by auto"], ["proof (state)\nthis:\n  list_all vwellformed (u # us)\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed (name $$ []) \\<Longrightarrow>\n    list_all vwellformed []", "qed simp"], ["proof (state)\nthis:\n  list_all vwellformed us\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vwellformed x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  list_all vwellformed us\n\ngoal (1 subgoal):\n 1. vwellformed (Vconstr name us)", "by (simp add: list_all_iff)"], ["proof (state)\nthis:\n  vwellformed (Vconstr name us)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vwellformed (Vabs cs \\<Gamma>)", "qed auto"], ["", "lemma (in vrules) veval_closed:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"closed_except t (fmdom \\<Gamma>)\" \"closed_venv \\<Gamma>\"\n  assumes \"wellformed t\" \"wellformed_venv \\<Gamma>\"\n  shows \"vclosed v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed v", "using assms"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  closed_except t (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed t\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. vclosed v", "proof induction"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "case (const name rhs \\<Gamma>)"], ["proof (state)\nthis:\n  (name, rhs) \\<in> set rs\n  closed_except (Sconst name) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (Sconst name)\n  wellformed_venv \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "hence \"(name, rhs) \\<in> set rs\""], ["proof (prove)\nusing this:\n  (name, rhs) \\<in> set rs\n  closed_except (Sconst name) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (Sconst name)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. (name, rhs) \\<in> set rs", "by (auto dest: map_of_SomeD)"], ["proof (state)\nthis:\n  (name, rhs) \\<in> set rs\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  (name, rhs) \\<in> set rs\n\ngoal (1 subgoal):\n 1. vclosed rhs", "using const all_rules"], ["proof (prove)\nusing this:\n  (name, rhs) \\<in> set rs\n  (name, rhs) \\<in> set rs\n  closed_except (Sconst name) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (Sconst name)\n  wellformed_venv \\<Gamma>\n  list_all vrule rs\n\ngoal (1 subgoal):\n 1. vclosed rhs", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  vclosed rhs\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "case (comb \\<Gamma> t cs \\<Gamma>' u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "hence pat: \"(pat, rhs) \\<in> set cs\" \"vmatch (mk_pat pat) u' = Some env\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& vmatch (mk_pat pat) u' = Some env", "by (metis vfind_match_elem)+"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed val", "proof (rule comb)"], ["proof (state)\ngoal (4 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f env)\n 3. pre_strong_term_class.wellformed rhs\n 4. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"vclosed u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed u'", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. vclosed u'", "by (auto simp: Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  vclosed u'\n\ngoal (4 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f env)\n 3. pre_strong_term_class.wellformed rhs\n 4. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"closed_venv env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv env", "by (rule vclosed.vmatch_env) fact+"], ["proof (state)\nthis:\n  closed_venv env\n\ngoal (4 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f env)\n 3. pre_strong_term_class.wellformed rhs\n 4. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "thus \"closed_venv (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  closed_venv env\n\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f env)", "using comb"], ["proof (prove)\nusing this:\n  closed_venv env\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f env)", "by (auto simp: Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  closed_venv (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed t\n\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"vwellformed (Vabs cs \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed (Vabs cs \\<Gamma>')", "by (rule veval_wellformed) fact+"], ["proof (state)\nthis:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "thus \"wellformed rhs\""], ["proof (prove)\nusing this:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "using pat"], ["proof (prove)\nusing this:\n  vwellformed (Vabs cs \\<Gamma>')\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed rhs\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed_venv \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv \\<Gamma>'", "using \\<open>vwellformed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. wellformed_venv \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  wellformed_venv \\<Gamma>'\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "moreover"], ["proof (state)\nthis:\n  wellformed_venv \\<Gamma>'\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed_venv env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv env", "using comb pat"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. wellformed_venv env", "by (auto intro: vwellformed.vmatch_env veval_wellformed)"], ["proof (state)\nthis:\n  wellformed_venv env\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "ultimately"], ["proof (chain)\npicking this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv env", "show \"wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv env\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "by blast"], ["proof (state)\nthis:\n  wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "have \"vclosed (Vabs cs \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed (Vabs cs \\<Gamma>')", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. vclosed (Vabs cs \\<Gamma>')", "by (auto simp: Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "hence \"closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\""], ["proof (prove)\nusing this:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "using pat"], ["proof (prove)\nusing this:\n  vclosed (Vabs cs \\<Gamma>')\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "moreover"], ["proof (state)\nthis:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "have \"fmdom env = frees pat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom env = frees pat", "using \\<open>vwellformed (Vabs cs \\<Gamma>')\\<close> pat"], ["proof (prove)\nusing this:\n  vwellformed (Vabs cs \\<Gamma>')\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. fmdom env = frees pat", "by (auto simp: vmatch_dom mk_pat_frees list_all_iff)"], ["proof (state)\nthis:\n  fmdom env = frees pat\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "ultimately"], ["proof (chain)\npicking this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  fmdom env = frees pat", "show \"closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\""], ["proof (prove)\nusing this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  fmdom env = frees pat\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "using \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  fmdom env = frees pat\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "by simp"], ["proof (state)\nthis:\n  closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vclosed val\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "case (rec_comb \\<Gamma> t css name \\<Gamma>' cs u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "hence pat: \"(pat, rhs) \\<in> set cs\" \"vmatch (mk_pat pat) u' = Some env\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& vmatch (mk_pat pat) u' = Some env", "by (metis vfind_match_elem)+"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n         pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> vclosed u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> vclosed val;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed val", "proof (rule rec_comb)"], ["proof (state)\ngoal (4 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f env)\n 3. pre_strong_term_class.wellformed rhs\n 4. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"vclosed u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed u'", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. vclosed u'", "by (auto simp: Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  vclosed u'\n\ngoal (4 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f env)\n 3. pre_strong_term_class.wellformed rhs\n 4. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"closed_venv env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv env", "by (rule vclosed.vmatch_env) fact+"], ["proof (state)\nthis:\n  closed_venv env\n\ngoal (4 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f env)\n 3. pre_strong_term_class.wellformed rhs\n 4. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "thus \"closed_venv (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  closed_venv env\n\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f env)", "using rec_comb"], ["proof (prove)\nusing this:\n  closed_venv env\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f env)", "by (auto simp: Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  closed_venv (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed t\n\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"vwellformed (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed (Vrecabs css name \\<Gamma>')", "by (rule veval_wellformed) fact+"], ["proof (state)\nthis:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (3 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. pre_strong_term_class.wellformed rhs\n 3. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "thus \"wellformed rhs\""], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "using pat rec_comb"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed rhs\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed_venv \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv \\<Gamma>'", "using \\<open>vwellformed (Vrecabs css name \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. wellformed_venv \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  wellformed_venv \\<Gamma>'\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "moreover"], ["proof (state)\nthis:\n  wellformed_venv \\<Gamma>'\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "have \"wellformed_venv env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv env", "using rec_comb pat"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. wellformed_venv env", "by (auto intro: vwellformed.vmatch_env veval_wellformed)"], ["proof (state)\nthis:\n  wellformed_venv env\n\ngoal (2 subgoals):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "ultimately"], ["proof (chain)\npicking this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv env", "show \"wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv env\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f env)", "by blast"], ["proof (state)\nthis:\n  wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "have \"wellformed_clauses cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_clauses cs", "using \\<open>vwellformed (Vrecabs css name \\<Gamma>')\\<close> \\<open>fmlookup css name = Some cs\\<close>"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n  fmlookup css name = Some cs\n\ngoal (1 subgoal):\n 1. wellformed_clauses cs", "by auto"], ["proof (state)\nthis:\n  wellformed_clauses cs\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "have \"vclosed (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed (Vrecabs css name \\<Gamma>')", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n\ngoal (1 subgoal):\n 1. vclosed (Vrecabs css name \\<Gamma>')", "by (auto simp: Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  vclosed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "hence \"closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\""], ["proof (prove)\nusing this:\n  vclosed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "using rec_comb pat"], ["proof (prove)\nusing this:\n  vclosed (Vrecabs css name \\<Gamma>')\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> vclosed u'\n  \\<lbrakk>closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n   closed_venv (\\<Gamma>' ++\\<^sub>f env);\n   pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n  \\<Longrightarrow> vclosed val\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "moreover"], ["proof (state)\nthis:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "have \"fmdom env = frees pat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom env = frees pat", "using \\<open>wellformed_clauses cs\\<close> pat"], ["proof (prove)\nusing this:\n  wellformed_clauses cs\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. fmdom env = frees pat", "by (auto simp: list_all_iff vmatch_dom mk_pat_frees)"], ["proof (state)\nthis:\n  fmdom env = frees pat\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "ultimately"], ["proof (chain)\npicking this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  fmdom env = frees pat", "show \"closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\""], ["proof (prove)\nusing this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  fmdom env = frees pat\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "using \\<open>vclosed (Vrecabs css name \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  fmdom env = frees pat\n  vclosed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))", "by simp"], ["proof (state)\nthis:\n  closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vclosed val\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "case (constr name \\<Gamma> ts us)"], ["proof (state)\nthis:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n   ts us\n  closed_except (name $$ ts) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "have \"list_all vclosed us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all vclosed us", "using \\<open>list_all2 _ _ _\\<close> \\<open>closed_except (_ $$ _) _\\<close> \\<open>wellformed (name $$ ts)\\<close>"], ["proof (prove)\nusing this:\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n   ts us\n  closed_except (name $$ ts) (fmdom \\<Gamma>)\n  pre_strong_term_class.wellformed (name $$ ts)\n\ngoal (1 subgoal):\n 1. list_all vclosed us", "proof (induction ts us rule: list.rel_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>closed_except (name $$ []) (fmdom \\<Gamma>);\n     pre_strong_term_class.wellformed (name $$ [])\\<rbrakk>\n    \\<Longrightarrow> list_all vclosed []\n 2. \\<And>a21 a22 b21 b22.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v a21 \\<down> b21 \\<and>\n                (closed_except a21 (fmdom \\<Gamma>) \\<longrightarrow>\n                 closed_venv \\<Gamma> \\<longrightarrow>\n                 pre_strong_term_class.wellformed a21 \\<longrightarrow>\n                 wellformed_venv \\<Gamma> \\<longrightarrow> vclosed b21);\n        \\<lbrakk>closed_except (name $$ a22) (fmdom \\<Gamma>);\n         pre_strong_term_class.wellformed (name $$ a22)\\<rbrakk>\n        \\<Longrightarrow> list_all vclosed b22;\n        closed_except (name $$ (a21 # a22)) (fmdom \\<Gamma>);\n        pre_strong_term_class.wellformed (name $$ (a21 # a22))\\<rbrakk>\n       \\<Longrightarrow> list_all vclosed (b21 # b22)", "case (Cons v vs u us)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (closed_except v (fmdom \\<Gamma>) \\<longrightarrow>\n   closed_venv \\<Gamma> \\<longrightarrow>\n   pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vclosed u)\n  \\<lbrakk>closed_except (name $$ vs) (fmdom \\<Gamma>);\n   pre_strong_term_class.wellformed (name $$ vs)\\<rbrakk>\n  \\<Longrightarrow> list_all vclosed us\n  closed_except (name $$ (v # vs)) (fmdom \\<Gamma>)\n  pre_strong_term_class.wellformed (name $$ (v # vs))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>closed_except (name $$ []) (fmdom \\<Gamma>);\n     pre_strong_term_class.wellformed (name $$ [])\\<rbrakk>\n    \\<Longrightarrow> list_all vclosed []\n 2. \\<And>a21 a22 b21 b22.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v a21 \\<down> b21 \\<and>\n                (closed_except a21 (fmdom \\<Gamma>) \\<longrightarrow>\n                 closed_venv \\<Gamma> \\<longrightarrow>\n                 pre_strong_term_class.wellformed a21 \\<longrightarrow>\n                 wellformed_venv \\<Gamma> \\<longrightarrow> vclosed b21);\n        \\<lbrakk>closed_except (name $$ a22) (fmdom \\<Gamma>);\n         pre_strong_term_class.wellformed (name $$ a22)\\<rbrakk>\n        \\<Longrightarrow> list_all vclosed b22;\n        closed_except (name $$ (a21 # a22)) (fmdom \\<Gamma>);\n        pre_strong_term_class.wellformed (name $$ (a21 # a22))\\<rbrakk>\n       \\<Longrightarrow> list_all vclosed (b21 # b22)", "with constr"], ["proof (chain)\npicking this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n   ts us__\n  closed_except (name $$ ts) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (closed_except v (fmdom \\<Gamma>) \\<longrightarrow>\n   closed_venv \\<Gamma> \\<longrightarrow>\n   pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vclosed u)\n  \\<lbrakk>closed_except (name $$ vs) (fmdom \\<Gamma>);\n   pre_strong_term_class.wellformed (name $$ vs)\\<rbrakk>\n  \\<Longrightarrow> list_all vclosed us\n  closed_except (name $$ (v # vs)) (fmdom \\<Gamma>)\n  pre_strong_term_class.wellformed (name $$ (v # vs))", "show ?case"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n   ts us__\n  closed_except (name $$ ts) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (closed_except v (fmdom \\<Gamma>) \\<longrightarrow>\n   closed_venv \\<Gamma> \\<longrightarrow>\n   pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vclosed u)\n  \\<lbrakk>closed_except (name $$ vs) (fmdom \\<Gamma>);\n   pre_strong_term_class.wellformed (name $$ vs)\\<rbrakk>\n  \\<Longrightarrow> list_all vclosed us\n  closed_except (name $$ (v # vs)) (fmdom \\<Gamma>)\n  pre_strong_term_class.wellformed (name $$ (v # vs))\n\ngoal (1 subgoal):\n 1. list_all vclosed (u # us)", "unfolding closed.list_comb wellformed.list_comb"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n   ts us__\n  closed_except (const name) (fmdom \\<Gamma>) \\<and>\n  list_all (\\<lambda>t. closed_except t (fmdom \\<Gamma>)) ts\n  closed_venv \\<Gamma>\n  pre_strong_term_class.wellformed (const name) \\<and>\n  list_all pre_strong_term_class.wellformed ts\n  wellformed_venv \\<Gamma>\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (closed_except v (fmdom \\<Gamma>) \\<longrightarrow>\n   closed_venv \\<Gamma> \\<longrightarrow>\n   pre_strong_term_class.wellformed v \\<longrightarrow>\n   wellformed_venv \\<Gamma> \\<longrightarrow> vclosed u)\n  \\<lbrakk>closed_except (const name) (fmdom \\<Gamma>) \\<and>\n           list_all (\\<lambda>t. closed_except t (fmdom \\<Gamma>)) vs;\n   pre_strong_term_class.wellformed (const name) \\<and>\n   list_all pre_strong_term_class.wellformed vs\\<rbrakk>\n  \\<Longrightarrow> list_all vclosed us\n  closed_except (const name) (fmdom \\<Gamma>) \\<and>\n  list_all (\\<lambda>t. closed_except t (fmdom \\<Gamma>)) (v # vs)\n  pre_strong_term_class.wellformed (const name) \\<and>\n  list_all pre_strong_term_class.wellformed (v # vs)\n\ngoal (1 subgoal):\n 1. list_all vclosed (u # us)", "by (auto simp: list_all_iff Sterm.closed_except_simps)"], ["proof (state)\nthis:\n  list_all vclosed (u # us)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>closed_except (name $$ []) (fmdom \\<Gamma>);\n     pre_strong_term_class.wellformed (name $$ [])\\<rbrakk>\n    \\<Longrightarrow> list_all vclosed []", "qed simp"], ["proof (state)\nthis:\n  list_all vclosed us\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow> vclosed x2))\n         ts us;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  list_all vclosed us\n\ngoal (1 subgoal):\n 1. vclosed (Vconstr name us)", "by (simp add: list_all_iff)"], ["proof (state)\nthis:\n  vclosed (Vconstr name us)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vclosed (Vabs cs \\<Gamma>)", "qed (auto simp: Sterm.closed_except_simps)"], ["", "lemma (in vrules) veval_constructor_value:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"vconstructor_value_env \\<Gamma>\"\n  shows \"vconstructor_value v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value v", "using assms"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vconstructor_value v", "proof induction"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "case (comb \\<Gamma> t cs \\<Gamma>' u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vabs cs \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "hence \"(pat, rhs) \\<in> set cs\" \"vmatch (mk_pat pat) u' = Some env\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vabs cs \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& vmatch (mk_pat pat) u' = Some env", "by (metis vfind_match_elem)+"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "hence \"vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)", "using comb"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vabs cs \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)", "by (auto intro: vconstructor_value.vmatch_env)"], ["proof (state)\nthis:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (1 subgoal):\n 1. vconstructor_value val", "using comb"], ["proof (prove)\nusing this:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vabs cs \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vconstructor_value val", "by auto"], ["proof (state)\nthis:\n  vconstructor_value val\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "case (constr name \\<Gamma> ts us)"], ["proof (state)\nthis:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        vconstructor_value x2))\n   ts us\n  vconstructor_value_env \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "hence \"list_all vconstructor_value us\""], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        vconstructor_value x2))\n   ts us\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. list_all vconstructor_value us", "by (auto elim: list_all2_rightE)"], ["proof (state)\nthis:\n  list_all vconstructor_value us\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              vconstructor_value x2))\n         ts us;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value (Vconstr name us)", "with constr"], ["proof (chain)\npicking this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        vconstructor_value x2))\n   ts us\n  vconstructor_value_env \\<Gamma>\n  list_all vconstructor_value us", "show ?case"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        vconstructor_value x2))\n   ts us\n  vconstructor_value_env \\<Gamma>\n  list_all vconstructor_value us\n\ngoal (1 subgoal):\n 1. vconstructor_value (Vconstr name us)", "by simp"], ["proof (state)\nthis:\n  vconstructor_value (Vconstr name us)\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "case const"], ["proof (state)\nthis:\n  (name_, rhs_) \\<in> set rs\n  vconstructor_value_env \\<Gamma>_\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 3. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "thus ?case"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  vconstructor_value_env \\<Gamma>_\n\ngoal (1 subgoal):\n 1. vconstructor_value rhs_", "using vconstructor_value_rs"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  vconstructor_value_env \\<Gamma>_\n  vconstructor_value_rs rs\n\ngoal (1 subgoal):\n 1. vconstructor_value rhs_", "by (auto simp: list_all_iff vconstructor_value_rs_def)"], ["proof (state)\nthis:\n  vconstructor_value rhs_\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 2. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 2. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "case (rec_comb \\<Gamma> t css name \\<Gamma>' cs u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vrecabs css name \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 2. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "hence \"(pat, rhs) \\<in> set cs\" \"vmatch (mk_pat pat) u' = Some env\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vrecabs css name \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& vmatch (mk_pat pat) u' = Some env", "by (metis vfind_match_elem)+"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 2. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "hence \"vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)", "using rec_comb"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vmatch (mk_pat pat) u' = Some env\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vrecabs css name \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)", "by (auto intro: vconstructor_value.vmatch_env)"], ["proof (state)\nthis:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 2. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n        vconstructor_value u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n        vconstructor_value val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val", "thus ?case"], ["proof (prove)\nusing this:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (1 subgoal):\n 1. vconstructor_value val", "using rec_comb"], ["proof (prove)\nusing this:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n  vconstructor_value (Vrecabs css name \\<Gamma>')\n  vconstructor_value_env \\<Gamma> \\<Longrightarrow> vconstructor_value u'\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env) \\<Longrightarrow>\n  vconstructor_value val\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vconstructor_value val", "by auto"], ["proof (state)\nthis:\n  vconstructor_value val\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value val\n 2. \\<And>\\<Gamma> cs.\n       vconstructor_value_env \\<Gamma> \\<Longrightarrow>\n       vconstructor_value (Vabs cs \\<Gamma>)", "qed (auto simp: list_all_iff vconstructor_value_rs_def)"], ["", "lemma (in vrules) veval_welldefined:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\" \"welldefined t\"\n  shows \"vwelldefined v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwelldefined v", "using assms"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts t |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined v", "proof induction"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sconst name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "case const"], ["proof (state)\nthis:\n  (name_, rhs_) \\<in> set rs\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  consts (Sconst name_) |\\<subseteq>| all_consts\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sconst name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  consts (Sconst name_) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined rhs_", "using vwelldefined_rs assms"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  consts (Sconst name_) |\\<subseteq>| all_consts\n  list_all (\\<lambda>(uu_, y). vwelldefined y) rs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts t |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined rhs_", "unfolding list_all_iff"], ["proof (prove)\nusing this:\n  (name_, rhs_) \\<in> set rs\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  consts (Sconst name_) |\\<subseteq>| all_consts\n  \\<forall>(uu_, y)\\<in>set rs. vwelldefined y\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts t |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined rhs_", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  vwelldefined rhs_\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "case (comb \\<Gamma> t cs \\<Gamma>' u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "hence \"vwelldefined (Vabs cs \\<Gamma>')\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined (Vabs cs \\<Gamma>')", "by auto"], ["proof (state)\nthis:\n  vwelldefined (Vabs cs \\<Gamma>')\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 5. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwelldefined val", "proof (rule comb)"], ["proof (state)\ngoal (2 subgoals):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n 2. consts rhs |\\<subseteq>| all_consts", "have \"fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'", "using \\<open>vwelldefined (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vwelldefined (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\n\ngoal (2 subgoals):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n 2. consts rhs |\\<subseteq>| all_consts", "moreover"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\n\ngoal (2 subgoals):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n 2. consts rhs |\\<subseteq>| all_consts", "have \"fmpred (\\<lambda>_. vwelldefined) env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) env", "apply (rule vwelldefined.vmatch_env)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vmatch ?pat ?v = Some env\n 2. vwelldefined ?v", "apply (rule vfind_match_elem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vfind_match ?cs3 ?v = Some (env, ?pat3, ?rhs3)\n 2. vwelldefined ?v", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (2 subgoals):\n 1. vfind_match ?cs3 ?v = Some (env, ?pat3, ?rhs3)\n 2. vwelldefined ?v", "by auto"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) env\n\ngoal (2 subgoals):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n 2. consts rhs |\\<subseteq>| all_consts", "ultimately"], ["proof (chain)\npicking this:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\n  fmpred (\\<lambda>_. vwelldefined) env", "show \"fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\nusing this:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\n  fmpred (\\<lambda>_. vwelldefined) env\n\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)", "by auto"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "have \"(pat, rhs) \\<in> set cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs", "by (metis vfind_match_elem)"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "thus \"welldefined rhs\""], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "using \\<open>vwelldefined (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vwelldefined (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  consts rhs |\\<subseteq>| all_consts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwelldefined val\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "case (rec_comb \\<Gamma> t css name \\<Gamma>' cs u u' env pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "have \"(pat, rhs) \\<in> set cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs", "by (rule vfind_match_elem) fact"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts t |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n         consts u |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>fmpred (\\<lambda>_. vwelldefined)\n                  (\\<Gamma>' ++\\<^sub>f env);\n         consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n        \\<Longrightarrow> vwelldefined val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 4. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwelldefined val", "proof (rule rec_comb)"], ["proof (state)\ngoal (2 subgoals):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n 2. consts rhs |\\<subseteq>| all_consts", "show \"fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\n 2. fmpred (\\<lambda>_. vwelldefined) env", "show \"fmpred (\\<lambda>_. vwelldefined) env\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) env", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) env", "by (auto dest: vfind_match_elem intro: vwelldefined.vmatch_env)"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) env\n\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'", "show \"fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env)\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "have \"vwelldefined (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwelldefined (Vrecabs css name \\<Gamma>')", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined (Vrecabs css name \\<Gamma>')", "by auto"], ["proof (state)\nthis:\n  vwelldefined (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "thus \"welldefined rhs\""], ["proof (prove)\nusing this:\n  vwelldefined (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. consts rhs |\\<subseteq>| all_consts", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpred (\\<lambda>_. vwelldefined) \\<Gamma>' \\<and>\n    fmpred\n     (\\<lambda>_.\n         list_all (\\<lambda>(uu_, t). consts t |\\<subseteq>| all_consts))\n     css \\<and>\n    name |\\<in>| fmdom css \\<and>\n    fmdom css |\\<subseteq>| fst |`| fset_of_list rs \\<Longrightarrow>\n    consts rhs |\\<subseteq>| all_consts", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>';\n     fmpred\n      (\\<lambda>_.\n          list_all (\\<lambda>(uu_, t). consts t |\\<subseteq>| all_consts))\n      css;\n     name |\\<in>| fmdom css;\n     fmdom css |\\<subseteq>| fst |`| fset_of_list rs\\<rbrakk>\n    \\<Longrightarrow> consts rhs |\\<subseteq>| all_consts", "apply (drule fmpredD[where m = css])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>';\n     name |\\<in>| fmdom css;\n     fmdom css |\\<subseteq>| fst |`| fset_of_list rs\\<rbrakk>\n    \\<Longrightarrow> fmlookup css ?x4 = Some ?y4\n 2. \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>';\n     name |\\<in>| fmdom css;\n     fmdom css |\\<subseteq>| fst |`| fset_of_list rs;\n     list_all (\\<lambda>(uu_, t). consts t |\\<subseteq>| all_consts)\n      ?y4\\<rbrakk>\n    \\<Longrightarrow> consts rhs |\\<subseteq>| all_consts", "using \\<open>(pat, rhs) \\<in> set cs\\<close> rec_comb"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (env, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts t |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n   consts u |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined u'\n  \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) (\\<Gamma>' ++\\<^sub>f env);\n   consts rhs |\\<subseteq>| all_consts\\<rbrakk>\n  \\<Longrightarrow> vwelldefined val\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (t $\\<^sub>s u) |\\<subseteq>| all_consts\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>';\n     name |\\<in>| fmdom css;\n     fmdom css |\\<subseteq>| fst |`| fset_of_list rs\\<rbrakk>\n    \\<Longrightarrow> fmlookup css ?x4 = Some ?y4\n 2. \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>';\n     name |\\<in>| fmdom css;\n     fmdom css |\\<subseteq>| fst |`| fset_of_list rs;\n     list_all (\\<lambda>(uu_, t). consts t |\\<subseteq>| all_consts)\n      ?y4\\<rbrakk>\n    \\<Longrightarrow> consts rhs |\\<subseteq>| all_consts", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  consts rhs |\\<subseteq>| all_consts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwelldefined val\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "case (constr name \\<Gamma> ts us)"], ["proof (state)\nthis:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (name $$ ts) |\\<subseteq>| all_consts\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "have \"list_all vwelldefined us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all vwelldefined us", "using \\<open>list_all2 _ _ _\\<close> \\<open>welldefined (_ $$ _)\\<close>"], ["proof (prove)\nusing this:\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us\n  consts (name $$ ts) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. list_all vwelldefined us", "proof (induction ts us rule: list.rel_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. consts (name $$ []) |\\<subseteq>| all_consts \\<Longrightarrow>\n    list_all vwelldefined []\n 2. \\<And>a21 a22 b21 b22.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v a21 \\<down> b21 \\<and>\n                (fmpred (\\<lambda>_. vwelldefined)\n                  \\<Gamma> \\<longrightarrow>\n                 consts a21 |\\<subseteq>| all_consts \\<longrightarrow>\n                 vwelldefined b21);\n        consts (name $$ a22) |\\<subseteq>| all_consts \\<Longrightarrow>\n        list_all vwelldefined b22;\n        consts (name $$ (a21 # a22)) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> list_all vwelldefined (b21 # b22)", "case (Cons v vs u us)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n   consts v |\\<subseteq>| all_consts \\<longrightarrow> vwelldefined u)\n  consts (name $$ vs) |\\<subseteq>| all_consts \\<Longrightarrow>\n  list_all vwelldefined us\n  consts (name $$ (v # vs)) |\\<subseteq>| all_consts\n\ngoal (2 subgoals):\n 1. consts (name $$ []) |\\<subseteq>| all_consts \\<Longrightarrow>\n    list_all vwelldefined []\n 2. \\<And>a21 a22 b21 b22.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v a21 \\<down> b21 \\<and>\n                (fmpred (\\<lambda>_. vwelldefined)\n                  \\<Gamma> \\<longrightarrow>\n                 consts a21 |\\<subseteq>| all_consts \\<longrightarrow>\n                 vwelldefined b21);\n        consts (name $$ a22) |\\<subseteq>| all_consts \\<Longrightarrow>\n        list_all vwelldefined b22;\n        consts (name $$ (a21 # a22)) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> list_all vwelldefined (b21 # b22)", "with constr"], ["proof (chain)\npicking this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us__\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (name $$ ts) |\\<subseteq>| all_consts\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n   consts v |\\<subseteq>| all_consts \\<longrightarrow> vwelldefined u)\n  consts (name $$ vs) |\\<subseteq>| all_consts \\<Longrightarrow>\n  list_all vwelldefined us\n  consts (name $$ (v # vs)) |\\<subseteq>| all_consts", "show ?case"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us__\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (name $$ ts) |\\<subseteq>| all_consts\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n   consts v |\\<subseteq>| all_consts \\<longrightarrow> vwelldefined u)\n  consts (name $$ vs) |\\<subseteq>| all_consts \\<Longrightarrow>\n  list_all vwelldefined us\n  consts (name $$ (v # vs)) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. list_all vwelldefined (u # us)", "unfolding welldefined.list_comb"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us__\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (const name) |\\<subseteq>| all_consts \\<and>\n  list_all (\\<lambda>t. consts t |\\<subseteq>| all_consts) ts\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v v \\<down> u \\<and>\n  (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n   consts v |\\<subseteq>| all_consts \\<longrightarrow> vwelldefined u)\n  consts (const name) |\\<subseteq>| all_consts \\<and>\n  list_all (\\<lambda>t. consts t |\\<subseteq>| all_consts)\n   vs \\<Longrightarrow>\n  list_all vwelldefined us\n  consts (const name) |\\<subseteq>| all_consts \\<and>\n  list_all (\\<lambda>t. consts t |\\<subseteq>| all_consts) (v # vs)\n\ngoal (1 subgoal):\n 1. list_all vwelldefined (u # us)", "by auto"], ["proof (state)\nthis:\n  list_all vwelldefined (u # us)\n\ngoal (1 subgoal):\n 1. consts (name $$ []) |\\<subseteq>| all_consts \\<Longrightarrow>\n    list_all vwelldefined []", "qed simp"], ["proof (state)\nthis:\n  list_all vwelldefined us\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)\n 3. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n              consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n              vwelldefined x2))\n         ts us;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (name $$ ts) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vconstr name us)", "with constr"], ["proof (chain)\npicking this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (name $$ ts) |\\<subseteq>| all_consts\n  list_all vwelldefined us", "show ?case"], ["proof (prove)\nusing this:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (fmpred (\\<lambda>_. vwelldefined) \\<Gamma> \\<longrightarrow>\n        consts x1 |\\<subseteq>| all_consts \\<longrightarrow>\n        vwelldefined x2))\n   ts us\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>\n  consts (name $$ ts) |\\<subseteq>| all_consts\n  list_all vwelldefined us\n\ngoal (1 subgoal):\n 1. vwelldefined (Vconstr name us)", "by (simp add: list_all_iff all_consts_def)"], ["proof (state)\nthis:\n  vwelldefined (Vconstr name us)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)", "case abs"], ["proof (state)\nthis:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  consts (Sabs cs_) |\\<subseteq>| all_consts\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Sabs cs) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined (Vabs cs \\<Gamma>)", "thus ?case"], ["proof (prove)\nusing this:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  consts (Sabs cs_) |\\<subseteq>| all_consts\n\ngoal (1 subgoal):\n 1. vwelldefined (Vabs cs_ \\<Gamma>_)", "unfolding welldefined_sabs"], ["proof (prove)\nusing this:\n  fmpred (\\<lambda>_. vwelldefined) \\<Gamma>_\n  list_all (\\<lambda>(uu_, t). consts t |\\<subseteq>| all_consts) cs_\n\ngoal (1 subgoal):\n 1. vwelldefined (Vabs cs_ \\<Gamma>_)", "by auto"], ["proof (state)\nthis:\n  vwelldefined (Vabs cs_ \\<Gamma>_)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        fmpred (\\<lambda>_. vwelldefined) \\<Gamma>;\n        consts (Svar name) |\\<subseteq>| all_consts\\<rbrakk>\n       \\<Longrightarrow> vwelldefined val", "qed auto"], ["", "subsubsection \\<open>Correctness wrt @{const constructors.seval}\\<close>"], ["", "context vrules begin"], ["", "definition rs' :: \"srule list\" where\n\"rs' = value_to_sterm_rules rs\""], ["", "lemma value_to_sterm_srules: \"srules C_info rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. srules C_info rs'", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. fdisjnt (fst |`| fset_of_list rs') C\n 2. distinct all_constructors\n 3. list_all srule rs'\n 4. distinct (map fst rs')\n 5. list_all\n     (\\<lambda>(uu_, rhs).\n         \\<not> pre_constants.shadows_consts C_info\n                 (fst |`| fset_of_list rs') rhs)\n     rs'\n 6. list_all\n     (\\<lambda>(uu_, rhs).\n         consts rhs |\\<subseteq>|\n         pre_constants.all_consts C_info (fst |`| fset_of_list rs'))\n     rs'", "show \"distinct (map fst rs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst rs')", "unfolding rs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst (value_to_sterm_rules rs))", "using distinct"], ["proof (prove)\nusing this:\n  distinct (map fst rs)\n\ngoal (1 subgoal):\n 1. distinct (map fst (value_to_sterm_rules rs))", "by auto"], ["proof (state)\nthis:\n  distinct (map fst rs')\n\ngoal (5 subgoals):\n 1. fdisjnt (fst |`| fset_of_list rs') C\n 2. distinct all_constructors\n 3. list_all srule rs'\n 4. list_all\n     (\\<lambda>(uu_, rhs).\n         \\<not> pre_constants.shadows_consts C_info\n                 (fst |`| fset_of_list rs') rhs)\n     rs'\n 5. list_all\n     (\\<lambda>(uu_, rhs).\n         consts rhs |\\<subseteq>|\n         pre_constants.all_consts C_info (fst |`| fset_of_list rs'))\n     rs'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. fdisjnt (fst |`| fset_of_list rs') C\n 2. distinct all_constructors\n 3. list_all srule rs'\n 4. list_all\n     (\\<lambda>(uu_, rhs).\n         \\<not> pre_constants.shadows_consts C_info\n                 (fst |`| fset_of_list rs') rhs)\n     rs'\n 5. list_all\n     (\\<lambda>(uu_, rhs).\n         consts rhs |\\<subseteq>|\n         pre_constants.all_consts C_info (fst |`| fset_of_list rs'))\n     rs'", "show \"list_all srule rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all srule rs'", "unfolding rs'_def list.pred_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (srule \\<circ> map_prod id value_to_sterm) rs", "apply (rule list.pred_mono_strong[OF all_rules])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> set rs; vrule z\\<rbrakk>\n       \\<Longrightarrow> (srule \\<circ> map_prod id value_to_sterm) z", "apply (auto intro: vclosed.value_to_sterm vwellformed.value_to_sterm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n        \\<not> is_Vconstr b\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (value_to_sterm b)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n        \\<not> is_Vconstr b\\<rbrakk>\n       \\<Longrightarrow> closed (value_to_sterm b)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n        \\<not> is_Vconstr b\\<rbrakk>\n       \\<Longrightarrow> is_abs (value_to_sterm b)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, b_) \\<in> set rs; vwellformed b_; vclosed b_;\n     \\<not> is_Vconstr b_\\<rbrakk>\n    \\<Longrightarrow> pre_strong_term_class.wellformed (value_to_sterm b_)", "by (auto intro: vwellformed.value_to_sterm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n        \\<not> is_Vconstr b\\<rbrakk>\n       \\<Longrightarrow> closed (value_to_sterm b)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n        \\<not> is_Vconstr b\\<rbrakk>\n       \\<Longrightarrow> is_abs (value_to_sterm b)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, b_) \\<in> set rs; vwellformed b_; vclosed b_;\n     \\<not> is_Vconstr b_\\<rbrakk>\n    \\<Longrightarrow> closed (value_to_sterm b_)", "by (auto intro: vclosed.value_to_sterm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n        \\<not> is_Vconstr b\\<rbrakk>\n       \\<Longrightarrow> is_abs (value_to_sterm b)", "subgoal for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> set rs; vwellformed b; vclosed b;\n     \\<not> is_Vconstr b\\<rbrakk>\n    \\<Longrightarrow> is_abs (value_to_sterm b)", "by (cases b) (auto simp: is_abs_def term_cases_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  list_all srule rs'\n\ngoal (4 subgoals):\n 1. fdisjnt (fst |`| fset_of_list rs') C\n 2. distinct all_constructors\n 3. list_all\n     (\\<lambda>(uu_, rhs).\n         \\<not> pre_constants.shadows_consts C_info\n                 (fst |`| fset_of_list rs') rhs)\n     rs'\n 4. list_all\n     (\\<lambda>(uu_, rhs).\n         consts rhs |\\<subseteq>|\n         pre_constants.all_consts C_info (fst |`| fset_of_list rs'))\n     rs'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. fdisjnt (fst |`| fset_of_list rs') C\n 2. distinct all_constructors\n 3. list_all\n     (\\<lambda>(uu_, rhs).\n         \\<not> pre_constants.shadows_consts C_info\n                 (fst |`| fset_of_list rs') rhs)\n     rs'\n 4. list_all\n     (\\<lambda>(uu_, rhs).\n         consts rhs |\\<subseteq>|\n         pre_constants.all_consts C_info (fst |`| fset_of_list rs'))\n     rs'", "show \"fdisjnt (fst |`| fset_of_list rs') C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fdisjnt (fst |`| fset_of_list rs') C", "using vconstructor_value_rs"], ["proof (prove)\nusing this:\n  vconstructor_value_rs rs\n\ngoal (1 subgoal):\n 1. fdisjnt (fst |`| fset_of_list rs') C", "unfolding rs'_def vconstructor_value_rs_def"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, y). vconstructor_value y) rs \\<and>\n  fdisjnt (fset_of_list (map fst rs)) C\n\ngoal (1 subgoal):\n 1. fdisjnt (fst |`| fset_of_list (value_to_sterm_rules rs)) C", "by auto"], ["proof (state)\nthis:\n  fdisjnt (fst |`| fset_of_list rs') C\n\ngoal (3 subgoals):\n 1. distinct all_constructors\n 2. list_all\n     (\\<lambda>(uu_, rhs).\n         \\<not> pre_constants.shadows_consts C_info\n                 (fst |`| fset_of_list rs') rhs)\n     rs'\n 3. list_all\n     (\\<lambda>(uu_, rhs).\n         consts rhs |\\<subseteq>|\n         pre_constants.all_consts C_info (fst |`| fset_of_list rs'))\n     rs'", "interpret c: constants _ \"fst |`| fset_of_list rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constants C_info (fst |`| fset_of_list rs')", "by standard (fact | fact distinct_ctr)+"], ["proof (state)\ngoal (3 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). \\<not> c.shadows_consts rhs) rs'\n 3. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "have all_consts: \"c.all_consts = all_consts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c.all_consts = all_consts", "unfolding c.all_consts_def all_consts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst |`| fset_of_list rs' |\\<union>| C =\n    fst |`| fset_of_list rs |\\<union>| C", "by (simp add: rs'_def)"], ["proof (state)\nthis:\n  c.all_consts = all_consts\n\ngoal (3 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). \\<not> c.shadows_consts rhs) rs'\n 3. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "have shadows_consts: \"c.shadows_consts rhs = shadows_consts rhs\" for rhs :: sterm"], ["proof (prove)\ngoal (1 subgoal):\n 1. c.shadows_consts rhs = shadows_consts rhs", "by (induction rhs; fastforce simp: all_consts list_ex_iff)"], ["proof (state)\nthis:\n  c.shadows_consts ?rhs4 = shadows_consts ?rhs4\n\ngoal (3 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). \\<not> c.shadows_consts rhs) rs'\n 3. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "have \"list_all (\\<lambda>(_, rhs). \\<not> shadows_consts rhs) rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). \\<not> shadows_consts rhs) rs'", "unfolding rs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). \\<not> shadows_consts rhs)\n     (value_to_sterm_rules rs)", "unfolding list.pred_map map_prod_def id_def case_prod_twice list_all_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(uu_, rhs)\n             \\<in>set (map (\\<lambda>(x, y). (x, value_to_sterm y)) rs).\n       \\<not> shadows_consts rhs", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs;\n        shadows_consts (value_to_sterm b)\\<rbrakk>\n       \\<Longrightarrow> False", "unfolding comp_def all_consts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs;\n        shadows_consts (value_to_sterm b)\\<rbrakk>\n       \\<Longrightarrow> False", "using not_shadows"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, y). not_shadows_vconsts y) rs\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs;\n        shadows_consts (value_to_sterm b)\\<rbrakk>\n       \\<Longrightarrow> False", "by (fastforce simp: list_all_iff dest: not_shadows_vconsts.value_to_sterm)"], ["proof (state)\nthis:\n  list_all (\\<lambda>(uu_, rhs). \\<not> shadows_consts rhs) rs'\n\ngoal (3 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). \\<not> c.shadows_consts rhs) rs'\n 3. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "thus \"list_all (\\<lambda>(_, rhs). \\<not> c.shadows_consts rhs) rs'\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, rhs). \\<not> shadows_consts rhs) rs'\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). \\<not> c.shadows_consts rhs) rs'", "unfolding shadows_consts"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, rhs). \\<not> shadows_consts rhs) rs'\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). \\<not> shadows_consts rhs) rs'", "."], ["proof (state)\nthis:\n  list_all (\\<lambda>(uu_, rhs). \\<not> c.shadows_consts rhs) rs'\n\ngoal (2 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "have \"list_all (\\<lambda>(_, rhs). welldefined rhs) rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'", "unfolding rs'_def list.pred_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all\n     ((\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) \\<circ>\n      map_prod id value_to_sterm)\n     rs", "apply (rule list.pred_mono_strong[OF vwelldefined_rs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> set rs;\n        case z of (uu_, x) \\<Rightarrow> vwelldefined x\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(uu_, rhs).\n                              consts rhs |\\<subseteq>| all_consts) \\<circ>\n                          map_prod id value_to_sterm)\n                          z", "subgoal for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<in> set rs;\n     case z of (uu_, x) \\<Rightarrow> vwelldefined x\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>(uu_, rhs).\n                           consts rhs |\\<subseteq>| all_consts) \\<circ>\n                       map_prod id value_to_sterm)\n                       z", "apply (cases z; hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs;\n        case (a, b) of (uu_, x) \\<Rightarrow> vwelldefined x\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(uu_, rhs).\n                              consts rhs |\\<subseteq>| all_consts) \\<circ>\n                          map_prod id value_to_sterm)\n                          (a, b)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set rs; vwelldefined b\\<rbrakk>\n       \\<Longrightarrow> consts (value_to_sterm b) |\\<subseteq>| all_consts", "apply (erule vwelldefined.value_to_sterm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n\ngoal (2 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "moreover"], ["proof (state)\nthis:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n\ngoal (2 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "have \"map fst rs = map fst rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst rs = map fst rs'", "unfolding rs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst rs = map fst (value_to_sterm_rules rs)", "by simp"], ["proof (state)\nthis:\n  map fst rs = map fst rs'\n\ngoal (2 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "ultimately"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n  map fst rs = map fst rs'", "have \"list_all (\\<lambda>(_, rhs). welldefined rhs) rs'\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n  map fst rs = map fst rs'\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'", "by simp"], ["proof (state)\nthis:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n\ngoal (2 subgoals):\n 1. distinct all_constructors\n 2. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "thus \"list_all (\\<lambda>(_, rhs). c.welldefined rhs) rs'\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts)\n     rs'", "unfolding all_consts"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| all_consts) rs'", "."], ["proof (state)\nthis:\n  list_all (\\<lambda>(uu_, rhs). consts rhs |\\<subseteq>| c.all_consts) rs'\n\ngoal (1 subgoal):\n 1. distinct all_constructors", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct all_constructors", "show \"distinct all_constructors\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct all_constructors", "by (fact distinct_ctr)"], ["proof (state)\nthis:\n  distinct all_constructors\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text (in special_constants) \\<open>\n  When we evaluate @{typ sterm}s using @{const veval}, the result is a @{typ value} which possibly\n  contains a closure (constructor @{const Vabs}). Such a closure is essentially a case-lambda (like\n  @{const Sabs}), but with an additionally captured environment of type\n  @{typ [source] \"string \\<rightharpoonup> value\"} (which is usually called \\<open>\\<Gamma>'\\<close>). The contained case-lambda might\n  not be closed.\n\n  The proof idea is that we can always substitute with \\<open>\\<Gamma>'\\<close> and obtain a regular @{typ sterm} value.\n  The only interesting part of the proof is the case when a case-lambda gets applied to a value,\n  because in that process, a hidden environment is \\<^emph>\\<open>unveiled\\<close>. That environment may not bear any\n  relation to the active environment \\<open>\\<Gamma>\\<close> at all. But pattern matching and substitution proceeds only\n  with that hidden environment.\n\\<close>"], ["", "context vrules begin"], ["", "context begin"], ["", "private"], ["", "lemma veval_correct0:\n  assumes \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\" \"wellformed t\" \"wellformed_venv \\<Gamma>\"\n  assumes \"closed_except t (fmdom \\<Gamma>)\" \"closed_venv \\<Gamma>\"\n  assumes \"vconstructor_value_env \\<Gamma>\"\n  shows \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm v", "using assms"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> v\n  pre_strong_term_class.wellformed t\n  wellformed_venv \\<Gamma>\n  closed_except t (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm v", "proof induction"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow>\n              closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n              x1 \\<down> value_to_sterm x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s name $$ ts \\<down>\n                         value_to_sterm (Vconstr name us)", "case (constr name \\<Gamma> ts us)"], ["proof (state)\nthis:\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow>\n        closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s x1 \\<down>\n        value_to_sterm x2))\n   ts us\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n  closed_except (name $$ ts) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow>\n              closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n              x1 \\<down> value_to_sterm x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s name $$ ts \\<down>\n                         value_to_sterm (Vconstr name us)", "have \"list_all2 (seval rs' (fmmap value_to_sterm \\<Gamma>)) ts (map value_to_sterm us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (seval rs' (fmmap value_to_sterm \\<Gamma>)) ts\n     (map value_to_sterm us)", "unfolding list_all2_map2"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2\n     (\\<lambda>x y. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n         x \\<down> value_to_sterm y)\n     ts us", "proof (rule list.rel_mono_strong[OF \\<open>list_all2 _ _ _\\<close>], elim conjE impE)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed z\n 2. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> wellformed_venv \\<Gamma>\n 3. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_except z (fmdom \\<Gamma>)\n 4. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_venv \\<Gamma>\n 5. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value_env \\<Gamma>\n 6. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb;\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s z \\<down>\n        value_to_sterm yb\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s z \\<down> value_to_sterm yb", "fix t u"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed z\n 2. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> wellformed_venv \\<Gamma>\n 3. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_except z (fmdom \\<Gamma>)\n 4. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_venv \\<Gamma>\n 5. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value_env \\<Gamma>\n 6. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb;\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s z \\<down>\n        value_to_sterm yb\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s z \\<down> value_to_sterm yb", "assume \"t \\<in> set ts\" \"u \\<in> set us\""], ["proof (state)\nthis:\n  t \\<in> set ts\n  u \\<in> set us\n\ngoal (6 subgoals):\n 1. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed z\n 2. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> wellformed_venv \\<Gamma>\n 3. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_except z (fmdom \\<Gamma>)\n 4. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_venv \\<Gamma>\n 5. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value_env \\<Gamma>\n 6. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb;\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s z \\<down>\n        value_to_sterm yb\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s z \\<down> value_to_sterm yb", "assume \"rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> u\""], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> u\n\ngoal (6 subgoals):\n 1. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed z\n 2. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> wellformed_venv \\<Gamma>\n 3. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_except z (fmdom \\<Gamma>)\n 4. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_venv \\<Gamma>\n 5. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value_env \\<Gamma>\n 6. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb;\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s z \\<down>\n        value_to_sterm yb\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s z \\<down> value_to_sterm yb", "show \"wellformed t\"  \"closed_except t (fmdom \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t &&& closed_except t (fmdom \\<Gamma>)", "using \\<open>t \\<in> set ts\\<close> constr"], ["proof (prove)\nusing this:\n  t \\<in> set ts\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow>\n        closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s x1 \\<down>\n        value_to_sterm x2))\n   ts us\n  pre_strong_term_class.wellformed (name $$ ts)\n  wellformed_venv \\<Gamma>\n  closed_except (name $$ ts) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t &&& closed_except t (fmdom \\<Gamma>)", "unfolding wellformed.list_comb closed.list_comb list_all_iff"], ["proof (prove)\nusing this:\n  t \\<in> set ts\n  name |\\<in>| C\n  list_all2\n   (\\<lambda>x1 x2.\n       rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n       (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n        wellformed_venv \\<Gamma> \\<longrightarrow>\n        closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n        closed_venv \\<Gamma> \\<longrightarrow>\n        vconstructor_value_env \\<Gamma> \\<longrightarrow>\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s x1 \\<down>\n        value_to_sterm x2))\n   ts us\n  pre_strong_term_class.wellformed (const name) \\<and>\n  Ball (set ts) pre_strong_term_class.wellformed\n  wellformed_venv \\<Gamma>\n  closed_except (const name) (fmdom \\<Gamma>) \\<and>\n  (\\<forall>t\\<in>set ts. closed_except t (fmdom \\<Gamma>))\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t &&& closed_except t (fmdom \\<Gamma>)", "by auto"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed t\n  closed_except t (fmdom \\<Gamma>)\n\ngoal (4 subgoals):\n 1. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> wellformed_venv \\<Gamma>\n 2. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> closed_venv \\<Gamma>\n 3. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb\\<rbrakk>\n       \\<Longrightarrow> vconstructor_value_env \\<Gamma>\n 4. \\<And>z yb.\n       \\<lbrakk>z \\<in> set ts; yb \\<in> set us;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v z \\<down> yb;\n        rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s z \\<down>\n        value_to_sterm yb\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s z \\<down> value_to_sterm yb", "qed (rule constr | assumption)+"], ["proof (state)\nthis:\n  list_all2 (seval rs' (fmmap value_to_sterm \\<Gamma>)) ts\n   (map value_to_sterm us)\n\ngoal (6 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 6. \\<And>name \\<Gamma> ts us.\n       \\<lbrakk>name |\\<in>| C;\n        list_all2\n         (\\<lambda>x1 x2.\n             rs, \\<Gamma> \\<turnstile>\\<^sub>v x1 \\<down> x2 \\<and>\n             (pre_strong_term_class.wellformed x1 \\<longrightarrow>\n              wellformed_venv \\<Gamma> \\<longrightarrow>\n              closed_except x1 (fmdom \\<Gamma>) \\<longrightarrow>\n              closed_venv \\<Gamma> \\<longrightarrow>\n              vconstructor_value_env \\<Gamma> \\<longrightarrow>\n              rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n              x1 \\<down> value_to_sterm x2))\n         ts us;\n        pre_strong_term_class.wellformed (name $$ ts);\n        wellformed_venv \\<Gamma>;\n        closed_except (name $$ ts) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s name $$ ts \\<down>\n                         value_to_sterm (Vconstr name us)", "thus ?case"], ["proof (prove)\nusing this:\n  list_all2 (seval rs' (fmmap value_to_sterm \\<Gamma>)) ts\n   (map value_to_sterm us)\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n    name $$ ts \\<down> value_to_sterm (Vconstr name us)", "using \\<open>name |\\<in>| C\\<close>"], ["proof (prove)\nusing this:\n  list_all2 (seval rs' (fmmap value_to_sterm \\<Gamma>)) ts\n   (map value_to_sterm us)\n  name |\\<in>| C\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n    name $$ ts \\<down> value_to_sterm (Vconstr name us)", "by (auto intro: seval.constr)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s name $$ ts \\<down>\n  value_to_sterm (Vconstr name us)\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "case (comb \\<Gamma> t cs \\<Gamma>' u u' venv pat rhs val)\n\n  \\<comment> \\<open>We first need to establish a ton of boring side-conditions.\\<close>"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"vmatch (mk_pat pat) u' = Some venv\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vmatch (mk_pat pat) u' = Some venv", "by (auto dest: vfind_match_elem)"], ["proof (state)\nthis:\n  vmatch (mk_pat pat) u' = Some venv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed t\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vwellformed (Vabs cs \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed (Vabs cs \\<Gamma>')", "by (rule veval_wellformed) fact+"], ["proof (state)\nthis:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence\n    \"list_all (linear \\<circ> fst) cs\"\n    \"wellformed_venv \\<Gamma>'\""], ["proof (prove)\nusing this:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. list_all (linear \\<circ> fst) cs &&& wellformed_venv \\<Gamma>'", "by (auto simp: list_all_iff split_beta)"], ["proof (state)\nthis:\n  list_all (linear \\<circ> fst) cs\n  wellformed_venv \\<Gamma>'\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"rel_option match_related (vfind_match cs u') (find_match cs (value_to_sterm u'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_option match_related (vfind_match cs u')\n     (find_match cs (value_to_sterm u'))", "apply (rule find_match_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_all (linear \\<circ> fst) cs\n 2. vconstructor_value u'", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value u'", "apply (rule veval_constructor_value)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rs, ?\\<Gamma>4 \\<turnstile>\\<^sub>v ?t4 \\<down> u'\n 2. vconstructor_value_env ?\\<Gamma>4", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "then"], ["proof (chain)\npicking this:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))", "obtain senv\n    where \"find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\"\n      and \"env_eq venv senv\""], ["proof (prove)\nusing this:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))\n\ngoal (1 subgoal):\n 1. (\\<And>senv.\n        \\<lbrakk>find_match cs (value_to_sterm u') = Some (senv, pat, rhs);\n         env_eq venv senv\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>vfind_match _ _ = _\\<close>"], ["proof (prove)\nusing this:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))\n  vfind_match cs u' = Some (venv, pat, rhs)\n\ngoal (1 subgoal):\n 1. (\\<And>senv.\n        \\<lbrakk>find_match cs (value_to_sterm u') = Some (senv, pat, rhs);\n         env_eq venv senv\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\n  env_eq venv senv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"(pat, rhs) \\<in> set cs\" \"match pat (value_to_sterm u') = Some senv\""], ["proof (prove)\nusing this:\n  find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\n  env_eq venv senv\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& match pat (value_to_sterm u') = Some senv", "by (auto dest: find_match_elem)"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  match pat (value_to_sterm u') = Some senv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"fmdom senv = frees pat\""], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  match pat (value_to_sterm u') = Some senv\n\ngoal (1 subgoal):\n 1. fmdom senv = frees pat", "by (simp add: match_dom)"], ["proof (state)\nthis:\n  fmdom senv = frees pat\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "moreover"], ["proof (state)\nthis:\n  fmdom senv = frees pat\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"senv = fmmap value_to_sterm venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senv = fmmap value_to_sterm venv", "using \\<open>env_eq venv senv\\<close>"], ["proof (prove)\nusing this:\n  env_eq venv senv\n\ngoal (1 subgoal):\n 1. senv = fmmap value_to_sterm venv", "by (rule env_eq_eq)"], ["proof (state)\nthis:\n  senv = fmmap value_to_sterm venv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "ultimately"], ["proof (chain)\npicking this:\n  fmdom senv = frees pat\n  senv = fmmap value_to_sterm venv", "have \"fmdom venv = frees pat\""], ["proof (prove)\nusing this:\n  fmdom senv = frees pat\n  senv = fmmap value_to_sterm venv\n\ngoal (1 subgoal):\n 1. fmdom venv = frees pat", "by simp"], ["proof (state)\nthis:\n  fmdom venv = frees pat\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_except t (fmdom \\<Gamma>)\" \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_except t (fmdom \\<Gamma>) &&& pre_strong_term_class.wellformed t", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. closed_except t (fmdom \\<Gamma>) &&& pre_strong_term_class.wellformed t", "by (simp add: closed_except_def)+"], ["proof (state)\nthis:\n  closed_except t (fmdom \\<Gamma>)\n  pre_strong_term_class.wellformed t\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vclosed (Vabs cs \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed (Vabs cs \\<Gamma>')", "by (rule veval_closed) fact+"], ["proof (state)\nthis:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vconstructor_value (Vabs cs \\<Gamma>')\" \"vconstructor_value u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value (Vabs cs \\<Gamma>') &&& vconstructor_value u'", "by (rule veval_constructor_value; fact)+"], ["proof (state)\nthis:\n  vconstructor_value (Vabs cs \\<Gamma>')\n  vconstructor_value u'\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"vconstructor_value_env \\<Gamma>'\""], ["proof (prove)\nusing this:\n  vconstructor_value (Vabs cs \\<Gamma>')\n  vconstructor_value u'\n\ngoal (1 subgoal):\n 1. vconstructor_value_env \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  vconstructor_value_env \\<Gamma>'\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vconstructor_value_env venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value_env venv", "by (rule vconstructor_value.vmatch_env) fact+"], ["proof (state)\nthis:\n  vconstructor_value_env venv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"wellformed u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed u", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed u", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed u\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vwellformed u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed u'", "by (rule veval_wellformed) fact+"], ["proof (state)\nthis:\n  vwellformed u'\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"wellformed_venv venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv venv", "by (rule vwellformed.vmatch_env) fact+"], ["proof (state)\nthis:\n  wellformed_venv venv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_except u (fmdom \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_except u (fmdom \\<Gamma>)", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. closed_except u (fmdom \\<Gamma>)", "by (simp add: closed_except_def)"], ["proof (state)\nthis:\n  closed_except u (fmdom \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vclosed u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed u'", "by (rule veval_closed) fact+"], ["proof (state)\nthis:\n  vclosed u'\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_venv venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv venv", "by (rule vclosed.vmatch_env) fact+"], ["proof (state)\nthis:\n  closed_venv venv\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_venv \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv \\<Gamma>'", "using \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_venv \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  closed_venv \\<Gamma>'\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "let ?subst = \"\\<lambda>pat t. subst t (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "txt \\<open>\n    \\<^enum> We know the following (induction hypothesis):\n      @{term \"rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\"}\n\n    \\<^enum> ... first, we can deduce using @{thm [source] ssubst_eval} that this is equivalent to\n      substituting \\<open>rhs\\<close> first:\n      @{term \"rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\"}\n\n    \\<^enum> ... second, we can replace the hidden environment \\<open>\\<Gamma>'\\<close> by the active environment \\<open>\\<Gamma>\\<close>\n      using @{thm [source] seval_agree_eq} because it does not contain useful information at this\n      point:\n      @{term \"rs', fmmap value_to_sterm (\\<Gamma> ++\\<^sub>f venv) \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\"}\n\n    \\<^enum> ... finally we can apply a step in the original semantics and arrive at the conclusion:\n      @{term \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down> value_to_sterm val\"}\n  \\<close>"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n    \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "proof (rule ssubst_eval)"], ["proof (state)\ngoal (4 subgoals):\n 1. rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n 2. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 4. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "show \"rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val", "proof (rule comb)"], ["proof (state)\ngoal (5 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n 4. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 5. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "have \"linear pat\" \"closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear pat &&& closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "using \\<open>(pat, rhs) \\<in> set cs\\<close> \\<open>vwellformed (Vabs cs \\<Gamma>')\\<close> \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vwellformed (Vabs cs \\<Gamma>')\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. linear pat &&& closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  linear pat\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (5 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n 4. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 5. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "hence \"closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)\""], ["proof (prove)\nusing this:\n  linear pat\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)", "using \\<open>vmatch (mk_pat pat) u' = Some venv\\<close>"], ["proof (prove)\nusing this:\n  linear pat\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  vmatch (mk_pat pat) u' = Some venv\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)", "by (auto simp: mk_pat_frees vmatch_dom)"], ["proof (state)\nthis:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)\n\ngoal (5 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n 4. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 5. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "thus \"closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\""], ["proof (prove)\nusing this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))", "by simp"], ["proof (state)\nthis:\n  closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n\ngoal (4 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 4. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 4. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "show \"wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)", "using \\<open>wellformed_venv \\<Gamma>'\\<close> \\<open>wellformed_venv venv\\<close>"], ["proof (prove)\nusing this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv venv\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)", "by blast"], ["proof (state)\nthis:\n  wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (3 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "show \"closed_venv (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f venv)", "using \\<open>closed_venv \\<Gamma>'\\<close> \\<open>closed_venv venv\\<close>"], ["proof (prove)\nusing this:\n  closed_venv \\<Gamma>'\n  closed_venv venv\n\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f venv)", "by blast"], ["proof (state)\nthis:\n  closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "show \"vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "using \\<open>vconstructor_value_env \\<Gamma>'\\<close> \\<open>vconstructor_value_env venv\\<close>"], ["proof (prove)\nusing this:\n  vconstructor_value_env \\<Gamma>'\n  vconstructor_value_env venv\n\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "by blast"], ["proof (state)\nthis:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "show \"wellformed rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "using \\<open>(pat, rhs) \\<in> set cs\\<close> \\<open>vwellformed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "by (fastforce simp: list_all_iff)"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed rhs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s\n  rhs \\<down> value_to_sterm val\n\ngoal (3 subgoals):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 2. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 3. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 2. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 3. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "have \"fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f \\<Gamma>' ++\\<^sub>f venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n    \\<Gamma>' ++\\<^sub>f venv", "including fmap.lifting fset.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n    \\<Gamma>' ++\\<^sub>f venv", "by transfer'\n           (auto simp: map_drop_set_def map_filter_def map_le_def map_add_def split: if_splits)"], ["proof (state)\nthis:\n  fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n  \\<Gamma>' ++\\<^sub>f venv\n\ngoal (3 subgoals):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 2. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 3. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "thus \"fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\nusing this:\n  fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n  \\<Gamma>' ++\\<^sub>f venv\n\ngoal (1 subgoal):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)", "unfolding \\<open>fmdom venv = frees pat\\<close>"], ["proof (prove)\nusing this:\n  fmdrop_fset (frees pat) \\<Gamma>' \\<subseteq>\\<^sub>f\n  \\<Gamma>' ++\\<^sub>f venv\n\ngoal (1 subgoal):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)", "by (metis fmdrop_fset_fmmap fmmap_subset)"], ["proof (state)\nthis:\n  fmdrop_fset (frees pat)\n   (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n  fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (2 subgoals):\n 1. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 2. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 2. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "show \"closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. closed_env (fmmap value_to_sterm \\<Gamma>')\n 2. closed_env (fmmap value_to_sterm venv)", "apply (rule vclosed.value_to_sterm_env, fact)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n\ngoal (1 subgoal):\n 1. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "show \"value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. value_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. value_env (fmmap value_to_sterm \\<Gamma>')\n 2. value_env (fmmap value_to_sterm venv)", "apply (rule vconstructor_value.value_to_sterm_env, fact)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (5 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t cs \\<Gamma>' u u' env uu_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vabs cs \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vabs cs \\<Gamma>');\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uu_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val\n 5. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n    t $\\<^sub>s u \\<down> value_to_sterm val", "proof (rule seval.comb)"], ["proof (state)\ngoal (4 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs ?cs\n 2. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 3. find_match ?cs ?u' = Some (?env, ?uu, ?rhs)\n 4. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "have \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm (Vabs cs \\<Gamma>')", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm (Vabs cs \\<Gamma>')", "by (auto simp: closed_except_def)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm (Vabs cs \\<Gamma>')\n\ngoal (4 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs ?cs\n 2. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 3. find_match ?cs ?u' = Some (?env, ?uu, ?rhs)\n 4. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "thus \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down> Sabs (map (\\<lambda>(pat, t). (pat, ?subst pat t)) cs)\""], ["proof (prove)\nusing this:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)", "by simp"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  Sabs\n   (map (\\<lambda>(pat, t).\n            (pat,\n             subst t\n              (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n     cs)\n\ngoal (3 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 2. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     ?u' =\n    Some (?env, ?uu, ?rhs)\n 3. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 2. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     ?u' =\n    Some (?env, ?uu, ?rhs)\n 3. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "show \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down>\n    value_to_sterm u'", "using comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vabs cs \\<Gamma>'\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vabs cs \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down>\n    value_to_sterm u'", "by (simp add: closed_except_def)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down>\n  value_to_sterm u'\n\ngoal (2 subgoals):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some (?env, ?uu, ?rhs)\n 2. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some (?env, ?uu, ?rhs)\n 2. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "show \"rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "proof (rule seval_agree_eq)"], ["proof (state)\ngoal (6 subgoals):\n 1. rs', ?\\<Gamma> \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val\n 2. fmrestrict_fset ?S ?\\<Gamma> =\n    fmrestrict_fset ?S (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n 3. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     ?S\n 4. ?S |\\<subseteq>| fmdom ?\\<Gamma>\n 5. closed_srules rs'\n 6. closed_env ?\\<Gamma>", "show \"rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv\n    \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "using \\<open>rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\\<close>"], ["proof (prove)\nusing this:\n  rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv\n    \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "by simp"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv\n  \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (5 subgoals):\n 1. fmrestrict_fset ?S\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset ?S (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n 2. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     ?S\n 3. ?S |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 4. closed_srules rs'\n 5. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. fmrestrict_fset ?S\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset ?S (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n 2. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     ?S\n 3. ?S |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 4. closed_srules rs'\n 5. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "show \"fmrestrict_fset (frees pat) (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n                fmrestrict_fset (frees pat) (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)", "unfolding \\<open>senv = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst \\<open>fmdom venv = frees pat\\<close>[symmetric])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmdom_map[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (fmdom (fmmap ?f venv))\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmadd_restrict_right_dom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmap value_to_sterm venv =\n    fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmdom_map[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmap value_to_sterm venv =\n    fmrestrict_fset (fmdom (fmmap ?f1 venv))\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmadd_restrict_right_dom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmap value_to_sterm venv = fmmap value_to_sterm venv", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fmrestrict_fset (frees pat)\n   (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n  fmrestrict_fset (frees pat)\n   (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n\ngoal (4 subgoals):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)\n 2. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 3. closed_srules rs'\n 4. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)\n 2. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 3. closed_srules rs'\n 4. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "have \"closed (value_to_sterm (Vabs cs \\<Gamma>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (value_to_sterm (Vabs cs \\<Gamma>'))", "using \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed (value_to_sterm (Vabs cs \\<Gamma>'))", "by (rule vclosed.value_to_sterm)"], ["proof (state)\nthis:\n  closed (value_to_sterm (Vabs cs \\<Gamma>'))\n\ngoal (4 subgoals):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)\n 2. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 3. closed_srules rs'\n 4. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "thus \"closed_except (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))) (frees pat)\""], ["proof (prove)\nusing this:\n  closed (value_to_sterm (Vabs cs \\<Gamma>'))\n\ngoal (1 subgoal):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)", "using \\<open>(pat, rhs) \\<in> set cs\\<close>"], ["proof (prove)\nusing this:\n  closed (value_to_sterm (Vabs cs \\<Gamma>'))\n  (pat, rhs) \\<in> set cs\n\ngoal (1 subgoal):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)", "by (auto simp: Sterm.closed_except_simps list_all_iff)"], ["proof (state)\nthis:\n  closed_except\n   (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n   (frees pat)\n\ngoal (3 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'\n 3. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'\n 3. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "show \"closed_env (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "using \\<open>closed_venv \\<Gamma>'\\<close> \\<open>closed_venv venv\\<close>"], ["proof (prove)\nusing this:\n  closed_venv \\<Gamma>'\n  closed_venv venv\n\ngoal (1 subgoal):\n 1. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "by (auto intro: vclosed.value_to_sterm_env)"], ["proof (state)\nthis:\n  closed_env\n   (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n\ngoal (2 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'", "show \"frees pat |\\<subseteq>| fmdom (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "using \\<open>fmdom venv = frees pat\\<close>"], ["proof (prove)\nusing this:\n  fmdom venv = frees pat\n\ngoal (1 subgoal):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "by fastforce"], ["proof (state)\nthis:\n  frees pat |\\<subseteq>|\n  fmdom\n   (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n\ngoal (1 subgoal):\n 1. closed_srules rs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. closed_srules rs'", "show \"closed_srules rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_srules rs'", "using all_rules"], ["proof (prove)\nusing this:\n  list_all vrule rs\n\ngoal (1 subgoal):\n 1. closed_srules rs'", "unfolding rs'_def list_all_iff"], ["proof (prove)\nusing this:\n  Ball (set rs) vrule\n\ngoal (1 subgoal):\n 1. Ball (set (value_to_sterm_rules rs)) (closed \\<circ> snd)", "by (fastforce intro: vclosed.value_to_sterm)"], ["proof (state)\nthis:\n  closed_srules rs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, ?uu,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, ?uu,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "show \"find_match (map (\\<lambda>(pat, t). (pat, ?subst pat t)) cs) (value_to_sterm u') = Some (senv, pat, ?subst pat rhs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, pat,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "using \\<open>find_match _ _ = _\\<close>"], ["proof (prove)\nusing this:\n  find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\n\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, pat,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "by (auto simp: find_match_map)"], ["proof (state)\nthis:\n  find_match\n   (map (\\<lambda>(pat, t).\n            (pat,\n             subst t\n              (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n     cs)\n   (value_to_sterm u') =\n  Some\n   (senv, pat,\n    subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n  t $\\<^sub>s u \\<down> value_to_sterm val\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "next\n  \\<comment> \\<open>Basically a verbatim copy from the \\<open>comb\\<close> case\\<close>"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "case (rec_comb \\<Gamma> t css name \\<Gamma>' cs u u' venv pat rhs val)"], ["proof (state)\nthis:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"vmatch (mk_pat pat) u' = Some venv\""], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vmatch (mk_pat pat) u' = Some venv", "by (auto dest: vfind_match_elem)"], ["proof (state)\nthis:\n  vmatch (mk_pat pat) u' = Some venv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"cs = the (fmlookup css name)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs = the (fmlookup css name)", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. cs = the (fmlookup css name)", "by simp"], ["proof (state)\nthis:\n  cs = the (fmlookup css name)\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed t\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vwellformed (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed (Vrecabs css name \\<Gamma>')", "by (rule veval_wellformed) fact+"], ["proof (state)\nthis:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"vwellformed (Vabs cs \\<Gamma>')\" \\<comment> \\<open>convenient hack: @{term cs} is not really part of a @{term Vabs}\\<close>"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. vwellformed (Vabs cs \\<Gamma>')", "using rec_comb"], ["proof (prove)\nusing this:\n  vwellformed (Vrecabs css name \\<Gamma>')\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vwellformed (Vabs cs \\<Gamma>')", "by auto"], ["proof (state)\nthis:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence\n    \"list_all (linear \\<circ> fst) cs\"\n    \"wellformed_venv \\<Gamma>'\""], ["proof (prove)\nusing this:\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. list_all (linear \\<circ> fst) cs &&& wellformed_venv \\<Gamma>'", "by (auto simp: list_all_iff split_beta)"], ["proof (state)\nthis:\n  list_all (linear \\<circ> fst) cs\n  wellformed_venv \\<Gamma>'\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"rel_option match_related (vfind_match cs u') (find_match cs (value_to_sterm u'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_option match_related (vfind_match cs u')\n     (find_match cs (value_to_sterm u'))", "apply (rule find_match_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_all (linear \\<circ> fst) cs\n 2. vconstructor_value u'", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value u'", "apply (rule veval_constructor_value)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rs, ?\\<Gamma>4 \\<turnstile>\\<^sub>v ?t4 \\<down> u'\n 2. vconstructor_value_env ?\\<Gamma>4", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "then"], ["proof (chain)\npicking this:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))", "obtain senv\n    where \"find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\"\n      and \"env_eq venv senv\""], ["proof (prove)\nusing this:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))\n\ngoal (1 subgoal):\n 1. (\\<And>senv.\n        \\<lbrakk>find_match cs (value_to_sterm u') = Some (senv, pat, rhs);\n         env_eq venv senv\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>vfind_match _ _ = _\\<close>"], ["proof (prove)\nusing this:\n  rel_option match_related (vfind_match cs u')\n   (find_match cs (value_to_sterm u'))\n  vfind_match cs u' = Some (venv, pat, rhs)\n\ngoal (1 subgoal):\n 1. (\\<And>senv.\n        \\<lbrakk>find_match cs (value_to_sterm u') = Some (senv, pat, rhs);\n         env_eq venv senv\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\n  env_eq venv senv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"(pat, rhs) \\<in> set cs\" \"match pat (value_to_sterm u') = Some senv\""], ["proof (prove)\nusing this:\n  find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\n  env_eq venv senv\n\ngoal (1 subgoal):\n 1. (pat, rhs) \\<in> set cs &&& match pat (value_to_sterm u') = Some senv", "by (auto dest: find_match_elem)"], ["proof (state)\nthis:\n  (pat, rhs) \\<in> set cs\n  match pat (value_to_sterm u') = Some senv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"fmdom senv = frees pat\""], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  match pat (value_to_sterm u') = Some senv\n\ngoal (1 subgoal):\n 1. fmdom senv = frees pat", "by (simp add: match_dom)"], ["proof (state)\nthis:\n  fmdom senv = frees pat\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "moreover"], ["proof (state)\nthis:\n  fmdom senv = frees pat\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"senv = fmmap value_to_sterm venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senv = fmmap value_to_sterm venv", "using \\<open>env_eq venv senv\\<close>"], ["proof (prove)\nusing this:\n  env_eq venv senv\n\ngoal (1 subgoal):\n 1. senv = fmmap value_to_sterm venv", "by (rule env_eq_eq)"], ["proof (state)\nthis:\n  senv = fmmap value_to_sterm venv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "ultimately"], ["proof (chain)\npicking this:\n  fmdom senv = frees pat\n  senv = fmmap value_to_sterm venv", "have \"fmdom venv = frees pat\""], ["proof (prove)\nusing this:\n  fmdom senv = frees pat\n  senv = fmmap value_to_sterm venv\n\ngoal (1 subgoal):\n 1. fmdom venv = frees pat", "by simp"], ["proof (state)\nthis:\n  fmdom venv = frees pat\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_except t (fmdom \\<Gamma>)\" \"wellformed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_except t (fmdom \\<Gamma>) &&& pre_strong_term_class.wellformed t", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. closed_except t (fmdom \\<Gamma>) &&& pre_strong_term_class.wellformed t", "by (simp add: closed_except_def)+"], ["proof (state)\nthis:\n  closed_except t (fmdom \\<Gamma>)\n  pre_strong_term_class.wellformed t\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vclosed (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed (Vrecabs css name \\<Gamma>')", "by (rule veval_closed) fact+"], ["proof (state)\nthis:\n  vclosed (Vrecabs css name \\<Gamma>')\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"vclosed (Vabs cs \\<Gamma>')\""], ["proof (prove)\nusing this:\n  vclosed (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. vclosed (Vabs cs \\<Gamma>')", "using rec_comb"], ["proof (prove)\nusing this:\n  vclosed (Vrecabs css name \\<Gamma>')\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. vclosed (Vabs cs \\<Gamma>')", "by auto"], ["proof (state)\nthis:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vconstructor_value u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value u'", "by (rule veval_constructor_value) fact+"], ["proof (state)\nthis:\n  vconstructor_value u'\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vconstructor_value (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value (Vrecabs css name \\<Gamma>')", "by (rule veval_constructor_value) fact+"], ["proof (state)\nthis:\n  vconstructor_value (Vrecabs css name \\<Gamma>')\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "hence \"vconstructor_value_env \\<Gamma>'\""], ["proof (prove)\nusing this:\n  vconstructor_value (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. vconstructor_value_env \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  vconstructor_value_env \\<Gamma>'\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vconstructor_value_env venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value_env venv", "by (rule vconstructor_value.vmatch_env) fact+"], ["proof (state)\nthis:\n  vconstructor_value_env venv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"wellformed u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed u", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed u", "by simp"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed u\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vwellformed u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwellformed u'", "by (rule veval_wellformed) fact+"], ["proof (state)\nthis:\n  vwellformed u'\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"wellformed_venv venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv venv", "by (rule vwellformed.vmatch_env) fact+"], ["proof (state)\nthis:\n  wellformed_venv venv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_except u (fmdom \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_except u (fmdom \\<Gamma>)", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. closed_except u (fmdom \\<Gamma>)", "by (simp add: closed_except_def)"], ["proof (state)\nthis:\n  closed_except u (fmdom \\<Gamma>)\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"vclosed u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vclosed u'", "by (rule veval_closed) fact+"], ["proof (state)\nthis:\n  vclosed u'\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_venv venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv venv", "by (rule vclosed.vmatch_env) fact+"], ["proof (state)\nthis:\n  closed_venv venv\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"closed_venv \\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv \\<Gamma>'", "using \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed_venv \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  closed_venv \\<Gamma>'\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "let ?subst = \"\\<lambda>pat t. subst t (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "have \"rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n    \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "proof (rule ssubst_eval)"], ["proof (state)\ngoal (4 subgoals):\n 1. rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n 2. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 4. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "show \"rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val", "proof (rule rec_comb)"], ["proof (state)\ngoal (5 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n 4. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 5. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "have \"linear pat\" \"closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear pat &&& closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "using \\<open>(pat, rhs) \\<in> set cs\\<close> \\<open>vwellformed (Vabs cs \\<Gamma>')\\<close> \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vwellformed (Vabs cs \\<Gamma>')\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. linear pat &&& closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  linear pat\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (5 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n 4. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 5. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "hence \"closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)\""], ["proof (prove)\nusing this:\n  linear pat\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)", "using \\<open>vmatch (mk_pat pat) u' = Some venv\\<close>"], ["proof (prove)\nusing this:\n  linear pat\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| frees pat)\n  vmatch (mk_pat pat) u' = Some venv\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)", "by (auto simp: mk_pat_frees vmatch_dom)"], ["proof (state)\nthis:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)\n\ngoal (5 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n 4. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 5. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "thus \"closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\""], ["proof (prove)\nusing this:\n  closed_except rhs (fmdom \\<Gamma>' |\\<union>| fmdom venv)\n\ngoal (1 subgoal):\n 1. closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))", "by simp"], ["proof (state)\nthis:\n  closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv))\n\ngoal (4 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 4. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 4. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "show \"wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)", "using \\<open>wellformed_venv \\<Gamma>'\\<close> \\<open>wellformed_venv venv\\<close>"], ["proof (prove)\nusing this:\n  wellformed_venv \\<Gamma>'\n  wellformed_venv venv\n\ngoal (1 subgoal):\n 1. wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)", "by blast"], ["proof (state)\nthis:\n  wellformed_venv (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (3 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n 3. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "show \"closed_venv (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f venv)", "using \\<open>closed_venv \\<Gamma>'\\<close> \\<open>closed_venv venv\\<close>"], ["proof (prove)\nusing this:\n  closed_venv \\<Gamma>'\n  closed_venv venv\n\ngoal (1 subgoal):\n 1. closed_venv (\\<Gamma>' ++\\<^sub>f venv)", "by blast"], ["proof (state)\nthis:\n  closed_venv (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed rhs\n 2. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "show \"vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "using \\<open>vconstructor_value_env \\<Gamma>'\\<close> \\<open>vconstructor_value_env venv\\<close>"], ["proof (prove)\nusing this:\n  vconstructor_value_env \\<Gamma>'\n  vconstructor_value_env venv\n\ngoal (1 subgoal):\n 1. vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)", "by blast"], ["proof (state)\nthis:\n  vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "show \"wellformed rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "using \\<open>(pat, rhs) \\<in> set cs\\<close> \\<open>vwellformed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  (pat, rhs) \\<in> set cs\n  vwellformed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "by (fastforce simp: list_all_iff)"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed rhs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s\n  rhs \\<down> value_to_sterm val\n\ngoal (3 subgoals):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 2. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 3. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 2. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 3. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "have \"fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f \\<Gamma>' ++\\<^sub>f venv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n    \\<Gamma>' ++\\<^sub>f venv", "including fmap.lifting fset.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n    \\<Gamma>' ++\\<^sub>f venv", "by transfer'\n           (auto simp: map_drop_set_def map_filter_def map_le_def map_add_def split: if_splits)"], ["proof (state)\nthis:\n  fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n  \\<Gamma>' ++\\<^sub>f venv\n\ngoal (3 subgoals):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n 2. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 3. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "thus \"fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\""], ["proof (prove)\nusing this:\n  fmdrop_fset (fmdom venv) \\<Gamma>' \\<subseteq>\\<^sub>f\n  \\<Gamma>' ++\\<^sub>f venv\n\ngoal (1 subgoal):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)", "unfolding \\<open>fmdom venv = frees pat\\<close>"], ["proof (prove)\nusing this:\n  fmdrop_fset (frees pat) \\<Gamma>' \\<subseteq>\\<^sub>f\n  \\<Gamma>' ++\\<^sub>f venv\n\ngoal (1 subgoal):\n 1. fmdrop_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n    fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)", "by (metis fmdrop_fset_fmmap fmmap_subset)"], ["proof (state)\nthis:\n  fmdrop_fset (frees pat)\n   (fmmap value_to_sterm \\<Gamma>') \\<subseteq>\\<^sub>f\n  fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n\ngoal (2 subgoals):\n 1. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 2. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n 2. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "show \"closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. closed_env (fmmap value_to_sterm \\<Gamma>')\n 2. closed_env (fmmap value_to_sterm venv)", "apply (rule vclosed.value_to_sterm_env, fact)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  closed_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n\ngoal (1 subgoal):\n 1. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "show \"value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. value_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. value_env (fmmap value_to_sterm \\<Gamma>')\n 2. value_env (fmmap value_to_sterm venv)", "apply (rule vconstructor_value.value_to_sterm_env, fact)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  value_env (fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (4 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)\n 4. \\<And>\\<Gamma> t css name \\<Gamma>' cs u u' env uv_ rhs val.\n       \\<lbrakk>rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down>\n                Vrecabs css name \\<Gamma>';\n        \\<lbrakk>pre_strong_term_class.wellformed t;\n         wellformed_venv \\<Gamma>; closed_except t (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s t \\<down>\n                          value_to_sterm (Vrecabs css name \\<Gamma>');\n        fmlookup css name = Some cs;\n        rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u';\n        \\<lbrakk>pre_strong_term_class.wellformed u;\n         wellformed_venv \\<Gamma>; closed_except u (fmdom \\<Gamma>);\n         closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                          \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u';\n        vfind_match cs u' = Some (env, uv_, rhs);\n        rs, \\<Gamma>' ++\\<^sub>f env \\<turnstile>\\<^sub>v rhs \\<down> val;\n        \\<lbrakk>pre_strong_term_class.wellformed rhs;\n         wellformed_venv (\\<Gamma>' ++\\<^sub>f env);\n         closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f env));\n         closed_venv (\\<Gamma>' ++\\<^sub>f env);\n         vconstructor_value_env (\\<Gamma>' ++\\<^sub>f env)\\<rbrakk>\n        \\<Longrightarrow> rs', fmmap value_to_sterm\n                                (\\<Gamma>' ++\\<^sub>f env)\n                          \\<turnstile>\\<^sub>s rhs \\<down>\n                          value_to_sterm val;\n        pre_strong_term_class.wellformed (t $\\<^sub>s u);\n        wellformed_venv \\<Gamma>;\n        closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s t $\\<^sub>s u \\<down>\n                         value_to_sterm val", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n    t $\\<^sub>s u \\<down> value_to_sterm val", "proof (rule seval.comb)"], ["proof (state)\ngoal (4 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs ?cs\n 2. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 3. find_match ?cs ?u' = Some (?env, ?uu, ?rhs)\n 4. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "have \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm (Vrecabs css name \\<Gamma>')", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm (Vrecabs css name \\<Gamma>')", "by (auto simp: closed_except_def)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm (Vrecabs css name \\<Gamma>')\n\ngoal (4 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs ?cs\n 2. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 3. find_match ?cs ?u' = Some (?env, ?uu, ?rhs)\n 4. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "thus \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down> Sabs (map (\\<lambda>(pat, t). (pat, ?subst pat t)) cs)\""], ["proof (prove)\nusing this:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)", "unfolding \\<open>cs = _\\<close>"], ["proof (prove)\nusing this:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm (Vrecabs css name \\<Gamma>')\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n    Sabs\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       (the (fmlookup css name)))", "by simp"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s t \\<down>\n  Sabs\n   (map (\\<lambda>(pat, t).\n            (pat,\n             subst t\n              (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n     cs)\n\ngoal (3 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 2. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     ?u' =\n    Some (?env, ?uu, ?rhs)\n 3. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> ?u'\n 2. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     ?u' =\n    Some (?env, ?uu, ?rhs)\n 3. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "show \"rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down> value_to_sterm u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down>\n    value_to_sterm u'", "using rec_comb"], ["proof (prove)\nusing this:\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v t \\<down> Vrecabs css name \\<Gamma>'\n  fmlookup css name = Some cs\n  rs, \\<Gamma> \\<turnstile>\\<^sub>v u \\<down> u'\n  vfind_match cs u' = Some (venv, pat, rhs)\n  rs, \\<Gamma>' ++\\<^sub>f venv \\<turnstile>\\<^sub>v rhs \\<down> val\n  \\<lbrakk>pre_strong_term_class.wellformed t; wellformed_venv \\<Gamma>;\n   closed_except t (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    t \\<down> value_to_sterm (Vrecabs css name \\<Gamma>')\n  \\<lbrakk>pre_strong_term_class.wellformed u; wellformed_venv \\<Gamma>;\n   closed_except u (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n   vconstructor_value_env \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n                    u \\<down> value_to_sterm u'\n  \\<lbrakk>pre_strong_term_class.wellformed rhs;\n   wellformed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   closed_except rhs (fmdom (\\<Gamma>' ++\\<^sub>f venv));\n   closed_venv (\\<Gamma>' ++\\<^sub>f venv);\n   vconstructor_value_env (\\<Gamma>' ++\\<^sub>f venv)\\<rbrakk>\n  \\<Longrightarrow> rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv)\n                    \\<turnstile>\\<^sub>s rhs \\<down> value_to_sterm val\n  pre_strong_term_class.wellformed (t $\\<^sub>s u)\n  wellformed_venv \\<Gamma>\n  closed_except (t $\\<^sub>s u) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down>\n    value_to_sterm u'", "by (simp add: closed_except_def)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s u \\<down>\n  value_to_sterm u'\n\ngoal (2 subgoals):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some (?env, ?uu, ?rhs)\n 2. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some (?env, ?uu, ?rhs)\n 2. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f ?env \\<turnstile>\\<^sub>s\n    ?rhs \\<down> value_to_sterm val", "show \"rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "proof (rule seval_agree_eq)"], ["proof (state)\ngoal (6 subgoals):\n 1. rs', ?\\<Gamma> \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val\n 2. fmrestrict_fset ?S ?\\<Gamma> =\n    fmrestrict_fset ?S (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n 3. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     ?S\n 4. ?S |\\<subseteq>| fmdom ?\\<Gamma>\n 5. closed_srules rs'\n 6. closed_env ?\\<Gamma>", "show \"rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv\n    \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "using \\<open>rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s ?subst pat rhs \\<down> value_to_sterm val\\<close>"], ["proof (prove)\nusing this:\n  rs', fmmap value_to_sterm (\\<Gamma>' ++\\<^sub>f venv) \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv\n    \\<turnstile>\\<^sub>s\n    subst rhs\n     (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n    value_to_sterm val", "by simp"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv\n  \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (5 subgoals):\n 1. fmrestrict_fset ?S\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset ?S (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n 2. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     ?S\n 3. ?S |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 4. closed_srules rs'\n 5. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. fmrestrict_fset ?S\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset ?S (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n 2. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     ?S\n 3. ?S |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 4. closed_srules rs'\n 5. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "show \"fmrestrict_fset (frees pat) (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n                fmrestrict_fset (frees pat) (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)", "unfolding \\<open>senv = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (frees pat)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst \\<open>fmdom venv = frees pat\\<close>[symmetric])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmdom_map[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_fset (fmdom (fmmap ?f venv))\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n    fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmadd_restrict_right_dom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmap value_to_sterm venv =\n    fmrestrict_fset (fmdom venv)\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmdom_map[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmap value_to_sterm venv =\n    fmrestrict_fset (fmdom (fmmap ?f1 venv))\n     (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f fmmap value_to_sterm venv)", "apply (subst fmadd_restrict_right_dom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmmap value_to_sterm venv = fmmap value_to_sterm venv", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fmrestrict_fset (frees pat)\n   (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv) =\n  fmrestrict_fset (frees pat)\n   (fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv)\n\ngoal (4 subgoals):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)\n 2. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 3. closed_srules rs'\n 4. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)\n 2. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 3. closed_srules rs'\n 4. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "have \"closed (value_to_sterm (Vabs cs \\<Gamma>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (value_to_sterm (Vabs cs \\<Gamma>'))", "using \\<open>vclosed (Vabs cs \\<Gamma>')\\<close>"], ["proof (prove)\nusing this:\n  vclosed (Vabs cs \\<Gamma>')\n\ngoal (1 subgoal):\n 1. closed (value_to_sterm (Vabs cs \\<Gamma>'))", "by (rule vclosed.value_to_sterm)"], ["proof (state)\nthis:\n  closed (value_to_sterm (Vabs cs \\<Gamma>'))\n\ngoal (4 subgoals):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)\n 2. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 3. closed_srules rs'\n 4. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "thus \"closed_except (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))) (frees pat)\""], ["proof (prove)\nusing this:\n  closed (value_to_sterm (Vabs cs \\<Gamma>'))\n\ngoal (1 subgoal):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)", "using \\<open>(pat, rhs) \\<in> set cs\\<close>"], ["proof (prove)\nusing this:\n  closed (value_to_sterm (Vabs cs \\<Gamma>'))\n  (pat, rhs) \\<in> set cs\n\ngoal (1 subgoal):\n 1. closed_except\n     (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n     (frees pat)", "by (auto simp: Sterm.closed_except_simps list_all_iff)"], ["proof (state)\nthis:\n  closed_except\n   (subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n   (frees pat)\n\ngoal (3 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'\n 3. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'\n 3. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "show \"closed_env (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "using \\<open>closed_venv \\<Gamma>'\\<close> \\<open>closed_venv venv\\<close>"], ["proof (prove)\nusing this:\n  closed_venv \\<Gamma>'\n  closed_venv venv\n\ngoal (1 subgoal):\n 1. closed_env\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "by (auto intro: vclosed.value_to_sterm_env)"], ["proof (state)\nthis:\n  closed_env\n   (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n\ngoal (2 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n 2. closed_srules rs'", "show \"frees pat |\\<subseteq>| fmdom (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "using \\<open>fmdom venv = frees pat\\<close>"], ["proof (prove)\nusing this:\n  fmdom venv = frees pat\n\ngoal (1 subgoal):\n 1. frees pat |\\<subseteq>|\n    fmdom\n     (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)", "by fastforce"], ["proof (state)\nthis:\n  frees pat |\\<subseteq>|\n  fmdom\n   (fmmap value_to_sterm \\<Gamma>' ++\\<^sub>f fmmap value_to_sterm venv)\n\ngoal (1 subgoal):\n 1. closed_srules rs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. closed_srules rs'", "show \"closed_srules rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_srules rs'", "using all_rules"], ["proof (prove)\nusing this:\n  list_all vrule rs\n\ngoal (1 subgoal):\n 1. closed_srules rs'", "unfolding rs'_def list_all_iff"], ["proof (prove)\nusing this:\n  Ball (set rs) vrule\n\ngoal (1 subgoal):\n 1. Ball (set (value_to_sterm_rules rs)) (closed \\<circ> snd)", "by (fastforce intro: vclosed.value_to_sterm)"], ["proof (state)\nthis:\n  closed_srules rs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> ++\\<^sub>f senv \\<turnstile>\\<^sub>s\n  subst rhs\n   (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')) \\<down>\n  value_to_sterm val\n\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, ?uu,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, ?uu,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "show \"find_match (map (\\<lambda>(pat, t). (pat, ?subst pat t)) cs) (value_to_sterm u') = Some (senv, pat, ?subst pat rhs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, pat,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "using \\<open>find_match _ _ = _\\<close>"], ["proof (prove)\nusing this:\n  find_match cs (value_to_sterm u') = Some (senv, pat, rhs)\n\ngoal (1 subgoal):\n 1. find_match\n     (map (\\<lambda>(pat, t).\n              (pat,\n               subst t\n                (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n       cs)\n     (value_to_sterm u') =\n    Some\n     (senv, pat,\n      subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))", "by (auto simp: find_match_map)"], ["proof (state)\nthis:\n  find_match\n   (map (\\<lambda>(pat, t).\n            (pat,\n             subst t\n              (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>'))))\n     cs)\n   (value_to_sterm u') =\n  Some\n   (senv, pat,\n    subst rhs (fmdrop_fset (frees pat) (fmmap value_to_sterm \\<Gamma>')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n  t $\\<^sub>s u \\<down> value_to_sterm val\n\ngoal (3 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)", "case (const name rhs \\<Gamma>)"], ["proof (state)\nthis:\n  (name, rhs) \\<in> set rs\n  pre_strong_term_class.wellformed (Sconst name)\n  wellformed_venv \\<Gamma>\n  closed_except (Sconst name) (fmdom \\<Gamma>)\n  closed_venv \\<Gamma>\n  vconstructor_value_env \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>name rhs \\<Gamma>.\n       \\<lbrakk>(name, rhs) \\<in> set rs;\n        pre_strong_term_class.wellformed (Sconst name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Sconst name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sconst name \\<down>\n                         value_to_sterm rhs\n 2. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 3. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n    Sconst name \\<down> value_to_sterm rhs", "apply (rule seval.const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (name, value_to_sterm rhs) \\<in> set rs'", "unfolding rs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (name, value_to_sterm rhs) \\<in> set (value_to_sterm_rules rs)", "using \\<open>(name, rhs) \\<in> _\\<close>"], ["proof (prove)\nusing this:\n  (name, rhs) \\<in> set rs\n\ngoal (1 subgoal):\n 1. (name, value_to_sterm rhs) \\<in> set (value_to_sterm_rules rs)", "by force"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma> \\<turnstile>\\<^sub>s\n  Sconst name \\<down> value_to_sterm rhs\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)", "case abs"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed (Sabs cs_)\n  wellformed_venv \\<Gamma>_\n  closed_except (Sabs cs_) (fmdom \\<Gamma>_)\n  closed_venv \\<Gamma>_\n  vconstructor_value_env \\<Gamma>_\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val\n 2. \\<And>\\<Gamma> cs.\n       \\<lbrakk>pre_strong_term_class.wellformed (Sabs cs);\n        wellformed_venv \\<Gamma>; closed_except (Sabs cs) (fmdom \\<Gamma>);\n        closed_venv \\<Gamma>; vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Sabs cs \\<down>\n                         value_to_sterm (Vabs cs \\<Gamma>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm \\<Gamma>_ \\<turnstile>\\<^sub>s\n    Sabs cs_ \\<down> value_to_sterm (Vabs cs_ \\<Gamma>_)", "by (auto simp del: fmdrop_fset_fmmap intro: seval.abs)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm \\<Gamma>_ \\<turnstile>\\<^sub>s Sabs cs_ \\<down>\n  value_to_sterm (Vabs cs_ \\<Gamma>_)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> name val.\n       \\<lbrakk>fmlookup \\<Gamma> name = Some val;\n        pre_strong_term_class.wellformed (Svar name);\n        wellformed_venv \\<Gamma>;\n        closed_except (Svar name) (fmdom \\<Gamma>); closed_venv \\<Gamma>;\n        vconstructor_value_env \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> rs', fmmap value_to_sterm \\<Gamma>\n                         \\<turnstile>\\<^sub>s Svar name \\<down>\n                         value_to_sterm val", "qed (auto intro: seval.var seval.abs)"], ["", "lemma veval_correct:\n  assumes \"rs, fmempty \\<turnstile>\\<^sub>v t \\<down> v\" \"wellformed t\" \"closed t\"\n  shows \"rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v", "have \"rs', fmmap value_to_sterm fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm fmempty \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm v", "using assms"], ["proof (prove)\nusing this:\n  rs, fmempty \\<turnstile>\\<^sub>v t \\<down> v\n  pre_strong_term_class.wellformed t\n  closed t\n\ngoal (1 subgoal):\n 1. rs', fmmap value_to_sterm fmempty \\<turnstile>\\<^sub>s t \\<down>\n    value_to_sterm v", "by (auto intro: veval_correct0 simp del: fmmap_empty)"], ["proof (state)\nthis:\n  rs', fmmap value_to_sterm fmempty \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm v\n\ngoal (1 subgoal):\n 1. rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v", "thus ?thesis"], ["proof (prove)\nusing this:\n  rs', fmmap value_to_sterm fmempty \\<turnstile>\\<^sub>s t \\<down>\n  value_to_sterm v\n\ngoal (1 subgoal):\n 1. rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v", "by simp"], ["proof (state)\nthis:\n  rs', fmempty \\<turnstile>\\<^sub>s t \\<down> value_to_sterm v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "end"]]}