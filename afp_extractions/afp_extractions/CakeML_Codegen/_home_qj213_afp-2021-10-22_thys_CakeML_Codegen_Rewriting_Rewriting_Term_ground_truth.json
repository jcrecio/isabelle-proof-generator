{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen/Rewriting/Rewriting_Term.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML_Codegen", "problem_names": ["lemma rewrite_beta_alt: \"t [t']\\<^sub>\\<beta> = u \\<Longrightarrow> wellformed t' \\<Longrightarrow> rs \\<turnstile> (\\<Lambda> t $ t') \\<longrightarrow> u\"", "lemma ruleI[intro]:\n  assumes \"basic_rule (lhs, rhs)\"\n  assumes \"Term.wellformed rhs\"\n  shows \"rule (lhs, rhs)\"", "lemma split_rule_fst: \"fst (split_rule r) = head (fst r)\"", "lemma rewrite_wellformed:\n  assumes \"rs \\<turnstile> t \\<longrightarrow> t'\" \"wellformed t\"\n  shows \"wellformed t'\"", "lemma rewrite_rt_wellformed: \"rs \\<turnstile> t \\<longrightarrow>* t' \\<Longrightarrow> wellformed t \\<Longrightarrow> wellformed t'\"", "lemma rewrite_closed: \"rs \\<turnstile> t \\<longrightarrow> t' \\<Longrightarrow> closed t \\<Longrightarrow> closed t'\"", "lemma rewrite_rt_closed: \"rs \\<turnstile> t \\<longrightarrow>* t' \\<Longrightarrow> closed t \\<Longrightarrow> closed t'\""], "translations": [["", "lemma rewrite_beta_alt: \"t [t']\\<^sub>\\<beta> = u \\<Longrightarrow> wellformed t' \\<Longrightarrow> rs \\<turnstile> (\\<Lambda> t $ t') \\<longrightarrow> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t [t']\\<^sub>\\<beta> = u;\n     pre_strong_term_class.wellformed t'\\<rbrakk>\n    \\<Longrightarrow> rs \\<turnstile> \\<Lambda> t $ t' \\<longrightarrow> u", "by (metis rewrite.beta)"], ["", "subsection \\<open>Wellformedness\\<close>"], ["", "primrec rule :: \"rule \\<Rightarrow> bool\" where\n\"rule (lhs, rhs) \\<longleftrightarrow> basic_rule (lhs, rhs) \\<and> Term.wellformed rhs\""], ["", "lemma ruleI[intro]:\n  assumes \"basic_rule (lhs, rhs)\"\n  assumes \"Term.wellformed rhs\"\n  shows \"rule (lhs, rhs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rule (lhs, rhs)", "using assms"], ["proof (prove)\nusing this:\n  basic_rule (lhs, rhs)\n  Term.wellformed rhs\n\ngoal (1 subgoal):\n 1. rule (lhs, rhs)", "by simp"], ["", "lemma split_rule_fst: \"fst (split_rule r) = head (fst r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (split_rule r) = head (fst r)", "unfolding head_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (split_rule r) = const_name (fst (strip_comb (fst r)))", "by (smt prod.case_eq_if prod.collapse prod.inject split_rule.simps)"], ["", "locale rules = constants C_info \"heads_of rs\" for C_info and rs :: \"rule fset\" +\n  assumes all_rules: \"fBall rs rule\"\n  assumes arity: \"arity_compatibles rs\"\n  assumes fmap: \"is_fmap rs\"\n  assumes patterns: \"pattern_compatibles rs\"\n  assumes nonempty: \"rs \\<noteq> {||}\"\n  assumes not_shadows: \"fBall rs (\\<lambda>(lhs, _). \\<not> shadows_consts lhs)\"\n  assumes welldefined_rs: \"fBall rs (\\<lambda>(_, rhs). welldefined rhs)\"\nbegin"], ["", "lemma rewrite_wellformed:\n  assumes \"rs \\<turnstile> t \\<longrightarrow> t'\" \"wellformed t\"\n  shows \"wellformed t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t'", "using assms"], ["proof (prove)\nusing this:\n  rs \\<turnstile> t \\<longrightarrow> t'\n  pre_strong_term_class.wellformed t\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed t'", "proof (induction rule: rewrite.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        pre_strong_term_class.wellformed t\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed u\n 2. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "case (step r t u)"], ["proof (state)\nthis:\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  pre_strong_term_class.wellformed t\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        pre_strong_term_class.wellformed t\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed u\n 2. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "obtain lhs rhs where \"r = (lhs, rhs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lhs rhs.\n        r = (lhs, rhs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  r = (lhs, rhs)\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        pre_strong_term_class.wellformed t\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed u\n 2. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "hence \"wellformed rhs\""], ["proof (prove)\nusing this:\n  r = (lhs, rhs)\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "using all_rules step"], ["proof (prove)\nusing this:\n  r = (lhs, rhs)\n  fBall rs rule\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  pre_strong_term_class.wellformed t\n\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed rhs", "by force"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed rhs\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        pre_strong_term_class.wellformed t\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed u\n 2. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed u", "apply (rule wellformed.rewrite_step)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (?lhs, ?rhs) \\<turnstile> ?t \\<rightarrow> u\n 2. pre_strong_term_class.wellformed ?t\n 3. pre_strong_term_class.wellformed ?rhs", "apply (rule step(2)[unfolded \\<open>r = _\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. pre_strong_term_class.wellformed t\n 2. pre_strong_term_class.wellformed rhs", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed u\n\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "case (beta u t)"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed (\\<Lambda> u $ t)\n\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       pre_strong_term_class.wellformed (\\<Lambda> t $ t') \\<Longrightarrow>\n       pre_strong_term_class.wellformed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_strong_term_class.wellformed u [t]\\<^sub>\\<beta>", "unfolding wellformed_term_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Term.wellformed u [t]\\<^sub>\\<beta>", "apply (rule replace_bound_wellformed)"], ["proof (prove)\ngoal (3 subgoals):\n 1. Term.wellformed t\n 2. wellformed' (Suc 0) u\n 3. 0 \\<le> 0", "using beta"], ["proof (prove)\nusing this:\n  pre_strong_term_class.wellformed (\\<Lambda> u $ t)\n\ngoal (3 subgoals):\n 1. Term.wellformed t\n 2. wellformed' (Suc 0) u\n 3. 0 \\<le> 0", "by auto"], ["proof (state)\nthis:\n  pre_strong_term_class.wellformed u [t]\\<^sub>\\<beta>\n\ngoal (2 subgoals):\n 1. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        pre_strong_term_class.wellformed t \\<Longrightarrow>\n        pre_strong_term_class.wellformed t';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t' $ u)\n 2. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        pre_strong_term_class.wellformed u \\<Longrightarrow>\n        pre_strong_term_class.wellformed u';\n        pre_strong_term_class.wellformed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> pre_strong_term_class.wellformed (t $ u')", "qed auto"], ["", "lemma rewrite_rt_wellformed: \"rs \\<turnstile> t \\<longrightarrow>* t' \\<Longrightarrow> wellformed t \\<Longrightarrow> wellformed t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rs \\<turnstile> t \\<longrightarrow>* t';\n     pre_strong_term_class.wellformed t\\<rbrakk>\n    \\<Longrightarrow> pre_strong_term_class.wellformed t'", "by (induction rule: rtranclp.induct) (auto intro: rewrite_wellformed simp del: wellformed_term_def)"], ["", "lemma rewrite_closed: \"rs \\<turnstile> t \\<longrightarrow> t' \\<Longrightarrow> closed t \\<Longrightarrow> closed t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t'; closed t\\<rbrakk>\n    \\<Longrightarrow> closed t'", "proof (induction t t' rule: rewrite.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "case (step r t u)"], ["proof (state)\nthis:\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  closed t\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "obtain lhs rhs where \"r = (lhs, rhs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lhs rhs.\n        r = (lhs, rhs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  r = (lhs, rhs)\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "with step"], ["proof (chain)\npicking this:\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  closed t\n  r = (lhs, rhs)", "have \"rule (lhs, rhs)\""], ["proof (prove)\nusing this:\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  closed t\n  r = (lhs, rhs)\n\ngoal (1 subgoal):\n 1. rule (lhs, rhs)", "using all_rules"], ["proof (prove)\nusing this:\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  closed t\n  r = (lhs, rhs)\n  fBall rs rule\n\ngoal (1 subgoal):\n 1. rule (lhs, rhs)", "by blast"], ["proof (state)\nthis:\n  rule (lhs, rhs)\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "hence \"frees rhs |\\<subseteq>| frees lhs\""], ["proof (prove)\nusing this:\n  rule (lhs, rhs)\n\ngoal (1 subgoal):\n 1. frees rhs |\\<subseteq>| frees lhs", "by simp"], ["proof (state)\nthis:\n  frees rhs |\\<subseteq>| frees lhs\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "moreover"], ["proof (state)\nthis:\n  frees rhs |\\<subseteq>| frees lhs\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "have \"(lhs, rhs) \\<turnstile> t \\<rightarrow> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lhs, rhs) \\<turnstile> t \\<rightarrow> u", "using step"], ["proof (prove)\nusing this:\n  r |\\<in>| rs\n  r \\<turnstile> t \\<rightarrow> u\n  closed t\n\ngoal (1 subgoal):\n 1. (lhs, rhs) \\<turnstile> t \\<rightarrow> u", "unfolding \\<open>r = _\\<close>"], ["proof (prove)\nusing this:\n  (lhs, rhs) |\\<in>| rs\n  (lhs, rhs) \\<turnstile> t \\<rightarrow> u\n  closed t\n\ngoal (1 subgoal):\n 1. (lhs, rhs) \\<turnstile> t \\<rightarrow> u", "by simp"], ["proof (state)\nthis:\n  (lhs, rhs) \\<turnstile> t \\<rightarrow> u\n\ngoal (4 subgoals):\n 1. \\<And>r t u.\n       \\<lbrakk>r |\\<in>| rs; r \\<turnstile> t \\<rightarrow> u;\n        closed t\\<rbrakk>\n       \\<Longrightarrow> closed u\n 2. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 3. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 4. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed u", "apply (rule rewrite_step_closed)"], ["proof (prove)\ngoal (3 subgoals):\n 1. frees ?t\\<^sub>2 |\\<subseteq>| frees ?t\\<^sub>1\n 2. (?t\\<^sub>1, ?t\\<^sub>2) \\<turnstile> ?u \\<rightarrow> u\n 3. closed ?u", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  closed u\n\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "case (beta t t')"], ["proof (state)\nthis:\n  closed (\\<Lambda> t $ t')\n\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "have \"frees t [t']\\<^sub>\\<beta> |\\<subseteq>| frees t |\\<union>| frees t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frees t [t']\\<^sub>\\<beta> |\\<subseteq>| frees t |\\<union>| frees t'", "by (rule replace_bound_frees)"], ["proof (state)\nthis:\n  frees t [t']\\<^sub>\\<beta> |\\<subseteq>| frees t |\\<union>| frees t'\n\ngoal (3 subgoals):\n 1. \\<And>t t'.\n       closed (\\<Lambda> t $ t') \\<Longrightarrow>\n       closed t [t']\\<^sub>\\<beta>\n 2. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 3. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "with beta"], ["proof (chain)\npicking this:\n  closed (\\<Lambda> t $ t')\n  frees t [t']\\<^sub>\\<beta> |\\<subseteq>| frees t |\\<union>| frees t'", "show ?case"], ["proof (prove)\nusing this:\n  closed (\\<Lambda> t $ t')\n  frees t [t']\\<^sub>\\<beta> |\\<subseteq>| frees t |\\<union>| frees t'\n\ngoal (1 subgoal):\n 1. closed t [t']\\<^sub>\\<beta>", "unfolding closed_except_def"], ["proof (prove)\nusing this:\n  frees (\\<Lambda> t $ t') |\\<subseteq>| {||}\n  frees t [t']\\<^sub>\\<beta> |\\<subseteq>| frees t |\\<union>| frees t'\n\ngoal (1 subgoal):\n 1. frees t [t']\\<^sub>\\<beta> |\\<subseteq>| {||}", "by auto"], ["proof (state)\nthis:\n  closed t [t']\\<^sub>\\<beta>\n\ngoal (2 subgoals):\n 1. \\<And>t t' u.\n       \\<lbrakk>rs \\<turnstile> t \\<longrightarrow> t';\n        closed t \\<Longrightarrow> closed t'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t' $ u)\n 2. \\<And>u u' t.\n       \\<lbrakk>rs \\<turnstile> u \\<longrightarrow> u';\n        closed u \\<Longrightarrow> closed u'; closed (t $ u)\\<rbrakk>\n       \\<Longrightarrow> closed (t $ u')", "qed (auto simp: closed_except_def)"], ["", "lemma rewrite_rt_closed: \"rs \\<turnstile> t \\<longrightarrow>* t' \\<Longrightarrow> closed t \\<Longrightarrow> closed t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rs \\<turnstile> t \\<longrightarrow>* t'; closed t\\<rbrakk>\n    \\<Longrightarrow> closed t'", "by (induction rule: rtranclp.induct) (auto intro: rewrite_closed)"], ["", "end"], ["", "end"]]}