{"file_name": "/home/qj213/afp-2021-10-22/thys/Dependent_SIFUM_Refinement/CompositionalRefinement.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dependent_SIFUM_Refinement", "problem_names": ["lemma inj_card_le: \n  \"inj (f::'a \\<Rightarrow> 'b) \\<Longrightarrow> finite (UNIV::'b set) \\<Longrightarrow> card (UNIV::'a set) \\<le> card (UNIV::'b set)\"", "lemma low_mds_eq_from_conc_to_abs:\n  \"conc.low_mds_eq mds mem mem' \\<Longrightarrow> abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem) (mem\\<^sub>A_of mem')\"", "lemma preserves_modes_mem_mem\\<^sub>A_simp:\n  \"(\\<forall>x\\<^sub>A. (mem\\<^sub>A x\\<^sub>A) = (mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))) \\<Longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\"", "lemma preserves_modes_mem_mds\\<^sub>A_simp:\n  \"(\\<forall>m. var\\<^sub>C_of ` mds\\<^sub>A m = range (var\\<^sub>C_of) \\<inter> mds\\<^sub>C m) \\<Longrightarrow>\n      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\"", "lemma preserves_modes_mem_def2:\n  \"preserves_modes_mem \\<R> =\n  (\\<forall> c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C. (\\<langle> c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C)\"", "lemmas neval_induct = abs.neval.induct[consumes 1, case_names Zero Suc]", "lemma strong_low_bisim_neval':\n  \"abs.neval c\\<^sub>1 n c\\<^sub>n \\<Longrightarrow> (c\\<^sub>1,c\\<^sub>1') \\<in> \\<R>\\<^sub>A \\<Longrightarrow> snd (fst c\\<^sub>1) = snd (fst c\\<^sub>1') \\<Longrightarrow> abs.strong_low_bisim_mm \\<R>\\<^sub>A \\<Longrightarrow>\n  \\<exists>c\\<^sub>n'. abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and> (c\\<^sub>n,c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and> snd (fst c\\<^sub>n) = snd (fst (c\\<^sub>n'))\"", "lemma strong_low_bisim_neval:\n  \"abs.neval \\<langle>c\\<^sub>1,mds\\<^sub>1,mem\\<^sub>1\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>n,mds\\<^sub>n,mem\\<^sub>n\\<rangle>\\<^sub>A \\<Longrightarrow> (\\<langle>c\\<^sub>1,mds\\<^sub>1,mem\\<^sub>1\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>1',mds\\<^sub>1,mem\\<^sub>1'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow> abs.strong_low_bisim_mm \\<R>\\<^sub>A \\<Longrightarrow>\n  \\<exists>c\\<^sub>n' mem\\<^sub>n'. abs.neval \\<langle>c\\<^sub>1',mds\\<^sub>1,mem\\<^sub>1'\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>n',mds\\<^sub>n,mem\\<^sub>n'\\<rangle>\\<^sub>A \\<and> (\\<langle>c\\<^sub>n,mds\\<^sub>n,mem\\<^sub>n\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>n',mds\\<^sub>n,mem\\<^sub>n'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\"", "lemma in_\\<R>_dma':\n  assumes preserves: \"preserves_modes_mem \\<R>\"\n  assumes in_\\<R>: \"(\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>C,mds\\<^sub>C,mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  shows  \"dma\\<^sub>A mem\\<^sub>A x\\<^sub>A = dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\"", "lemma in_\\<R>_dma:\n  assumes preserves: \"preserves_modes_mem \\<R>\"\n  assumes in_\\<R>: \"(\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>C,mds\\<^sub>C,mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  shows  \"dma\\<^sub>A mem\\<^sub>A = (dma\\<^sub>C mem\\<^sub>C \\<circ> var\\<^sub>C_of)\"", "lemma not_less_eq_is_greater_Sec:\n  \"(\\<not> a \\<le> (b::Sec)) = (a > b)\"", "lemma doesnt_have_mode:\n  \"(x \\<notin> mds\\<^sub>A_of mds\\<^sub>C m) = (var\\<^sub>C_of x \\<notin> mds\\<^sub>C m)\"", "lemma new_vars_private_does_the_thing:\n  assumes nice: \"new_vars_private \\<R>\"\n  assumes in_\\<R>\\<^sub>1: \"(\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  assumes in_\\<R>\\<^sub>2: \"(\\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  assumes step\\<^sub>1\\<^sub>C: \"\\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C\"\n  assumes step\\<^sub>2\\<^sub>C: \"\\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C\"\n  assumes low_mds_eq\\<^sub>C: \"conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\"\n  assumes low_mds_eq\\<^sub>A': \"abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C') (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')\" \n  shows \"conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'\"", "lemma preserves_modes_memD:\n  \"\\<lbrakk>preserves_modes_mem \\<R>; (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\\<rbrakk> \\<Longrightarrow> mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and> mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\"", "lemma secure_refinement_def2:\n  \"secure_refinement \\<R>\\<^sub>A \\<R> P \\<equiv>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall> c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'. \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<exists> n c\\<^sub>1\\<^sub>A'. abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>A \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'. \n         (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n         (\\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n         (\\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> P \\<and>\n         abs.neval \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A  \\<longrightarrow>\n           (\\<exists> c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C \\<and>\n                   (\\<langle> c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> P)))))\"", "lemma extra_vars_are_not_control_vars:\n  \"x \\<notin> range var\\<^sub>C_of \\<Longrightarrow> x \\<notin> \\<C>\\<^sub>C\"", "lemma abs_low_mds_eq_dma\\<^sub>C_eq:\n  assumes \"abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)  (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)\"\n  shows \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\"", "lemma R\\<^sub>C_ofD:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes in_R: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\"\n  shows\n   \"(\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A) \\<and>\n    (mds\\<^sub>C' = mds\\<^sub>C) \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\"", "lemma R\\<^sub>C_ofI:\n   \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<Longrightarrow>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P \\<Longrightarrow>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\"", "lemma R\\<^sub>C_of_sym:\n  assumes \"sym \\<R>\\<^sub>A\"\n  assumes P_sym: \"sym P\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes mm: \n    \"\\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mds mem\\<^sub>2. (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n    abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\"\n  shows \"sym (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\"", "lemma R\\<^sub>C_of_simp:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  shows \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P =\n   ((\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A) \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P)\"", "lemma var_writable\\<^sub>A:\n  \"\\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x) \\<Longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\"", "lemma A\\<^sub>A_asm_mem:\n  assumes A\\<^sub>C_asm_mem: \"\\<forall>x. case A\\<^sub>C x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or> mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\"\n  shows \"case (A\\<^sub>A_of A\\<^sub>C) x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x \\<noteq> v \\<or> (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) x \\<noteq> v' \\<longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\"", "lemma dma\\<^sub>A_adaptation_eq:\n  \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x\\<^sub>A = dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) (var\\<^sub>C_of x\\<^sub>A)\"", "lemma A\\<^sub>A_asm_dma:\n  assumes A\\<^sub>C_asm_dma: \"\\<forall>x. dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) x \\<noteq> dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\"\n  shows \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 (A\\<^sub>A_of A\\<^sub>C)]) x\\<^sub>A \\<noteq> dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A \\<longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\"", "lemma var\\<^sub>C_of_in_\\<C>\\<^sub>C: \n  assumes \"x\\<^sub>A \\<in> \\<C>\\<^sub>A\"\n  shows \"var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C\"", "lemma doesnt_have_mode\\<^sub>C:\n  \"x \\<notin> mds\\<^sub>A_of mds\\<^sub>C m \\<Longrightarrow> var\\<^sub>C_of x \\<notin> mds\\<^sub>C m\"", "lemma has_mode\\<^sub>A: \"var\\<^sub>C_of x \\<in> mds\\<^sub>C m \\<Longrightarrow> x \\<in> mds\\<^sub>A_of mds\\<^sub>C m\"", "lemma A\\<^sub>A_sec:\n  assumes A\\<^sub>C_sec: \"\\<forall>x. dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) x = Low \\<and> (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x = mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\"\n  shows \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x = Low \\<and> (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n           (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] x = (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] x\"", "lemma apply_adaptation\\<^sub>A:\n  \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] = mem\\<^sub>A_of (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C])\"\n  \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] = mem\\<^sub>A_of (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C])\"", "lemma R\\<^sub>C_of_closed_glob_consistent:\n  assumes mm: \n    \"\\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mds mem\\<^sub>2. (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n    abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\"\n  assumes cgc: \"abs.closed_glob_consistent \\<R>\\<^sub>A\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  shows \"conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\"", "lemma R\\<^sub>C_of_local_preservation:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes bisim: \"abs.strong_low_bisim_mm \\<R>\\<^sub>A\"\n  assumes in_R\\<^sub>C_of: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\"\n  assumes step\\<^sub>1\\<^sub>C: \"\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\"\n  shows \"\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\"", "lemma R\\<^sub>C_of_strong_low_bisim_mm:\n  assumes abs: \"abs.strong_low_bisim_mm \\<R>\\<^sub>A\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes P_sym: \"sym P\"\n  shows \"conc.strong_low_bisim_mm (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\"", "lemma secure_refinement_simpler:\n  assumes rrs: \"secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\"\n  shows \"secure_refinement \\<R>\\<^sub>A \\<R> P\"", "lemma \\<I>simple_closed_glob_consistent:\n  \"conc.closed_glob_consistent \\<I>simple\"", "lemma secure_refinement_simple:\n  assumes srs: \"secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\"\n  shows \"secure_refinement_simpler \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\"", "lemma mode_acquire_refinement_helper:\n  \"mds\\<^sub>A_of (mds\\<^sub>C(SomeMode := insert (var\\<^sub>C_of x) (mds\\<^sub>C SomeMode))) =\n   (mds\\<^sub>A_of mds\\<^sub>C)(SomeMode := insert x (mds\\<^sub>A_of mds\\<^sub>C SomeMode))\"", "lemma mode_release_refinement_helper:\n  \"mds\\<^sub>A_of (mds\\<^sub>C(SomeMode := {y \\<in> mds\\<^sub>C SomeMode. y \\<noteq> (var\\<^sub>C_of x)})) =\n   (mds\\<^sub>A_of mds\\<^sub>C)(SomeMode := {y \\<in> (mds\\<^sub>A_of mds\\<^sub>C SomeMode). y \\<noteq> x})\"", "lemma secure_refinement_loc_reach:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes in_\\<R>:  \"(\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  assumes loc_reach\\<^sub>C: \"\\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<in> conc.loc_reach \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\"\n  shows \"\\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n      (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n      \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\"", "lemma preserves_local_guarantee_compliance_def2:\n  \"preserves_local_guarantee_compliance \\<R> \\<equiv>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C.\n      abs.respects_own_guarantees (c\\<^sub>A, mds\\<^sub>A) \\<and>\n      (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n        conc.respects_own_guarantees (c\\<^sub>C, mds\\<^sub>C)\"", "lemma locally_sound_mode_use_preservation:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes preserves_guarantee_compliance: \"preserves_local_guarantee_compliance \\<R>\"\n  shows \"preserves_locally_sound_mode_use \\<R>\"", "lemma [simp]:\n  \"gen_refine.new_vars_private \\<R>\"", "lemma [simp]:\n  \"gen_refine.mds\\<^sub>A_of x = x\"", "lemma [simp]:\n  \"gen_refine.mem\\<^sub>A_of x = x\"", "lemma [simp]:\n  \"preserves_modes_mem \\<R> \\<Longrightarrow>\n  gen_refine.closed_others \\<R> = closed_others \\<R>\"", "lemma [simp]:\n  \"gen_refine.preserves_modes_mem \\<R> = preserves_modes_mem \\<R>\"", "lemma preserves_modes_memD:\n  \"preserves_modes_mem \\<R> \\<Longrightarrow>\n(\\<langle> c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>C \\<and> mds\\<^sub>A = mds\\<^sub>C\"", "lemma [simp]:\n  \"gen_refine.secure_refinement \\<R>\\<^sub>A \\<R> P = secure_refinement \\<R>\\<^sub>A \\<R> P\"", "lemma R\\<^sub>C_of_strong_low_bisim_mm:\n  assumes abs: \"abs.strong_low_bisim_mm \\<R>\\<^sub>A\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes P_sym: \"sym P\"\n  shows \"conc.strong_low_bisim_mm (gen_refine.R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\"", "lemma use_secure_refinement_helper:\n  \"secure_refinement \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n   ((cm\\<^sub>A,mem\\<^sub>A),(cm\\<^sub>C,mem\\<^sub>C)) \\<in> \\<R> \\<Longrightarrow> (cm\\<^sub>C,mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>C',mem\\<^sub>C') \\<Longrightarrow>\n   (\\<exists>cm\\<^sub>A' mem\\<^sub>A' n. abs.neval (cm\\<^sub>A,mem\\<^sub>A) n (cm\\<^sub>A',mem\\<^sub>A') \\<and>\n                 ((cm\\<^sub>A',mem\\<^sub>A'), (cm\\<^sub>C',mem\\<^sub>C')) \\<in> \\<R>)\"", "lemma closed_othersD:\n  \"closed_others \\<R> \\<Longrightarrow>\n   (\\<langle>c\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n   (\\<And>x. mem\\<^sub>C' x \\<noteq> mem\\<^sub>C x \\<or> dma\\<^sub>C mem\\<^sub>C' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x \\<Longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x) \\<Longrightarrow>\n   (\\<langle>c\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\"", "lemma neval_modifies_helper:\n  assumes nevaln: \"neval lcn m lcn'\"\n  assumes lcn_def: \"lcn = (cms ! n, mem)\"\n  assumes lcn'_def: \"lcn' = (cmn', mem')\"\n  assumes len: \"n < length cms\"\n  assumes modified: \"mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\"\n  shows \"\\<exists>k cmn'' mem'' cmn''' mem'''. k < m \\<and> neval (cms ! n,mem) k (cmn'',mem'') \\<and>\n                           (cmn'',mem'') \\<leadsto> (cmn''', mem''') \\<and>\n                           (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\"", "lemma neval_sched_Nil [simp]:\n  \"(cms, mem) \\<rightarrow>\\<^bsub>[]\\<^esub> (cms, mem)\"", "lemma reachable_mode_states_refl:\n  \"map snd cms \\<in> reachable_mode_states (cms, mem)\"", "lemma neval_reachable_mode_states:\n  assumes neval: \"neval lc n lc'\"\n  assumes lc_def: \"lc = (cms ! k, mem)\" \n  assumes len: \"k < length cms\"\n  shows \"map snd (cms[k := (fst lc')]) \\<in> reachable_mode_states (cms, mem)\"", "lemma meval_sched_sound_mode_use:\n  \"sound_mode_use gc \\<Longrightarrow> meval_sched sched gc gc' \\<Longrightarrow> sound_mode_use gc'\"", "lemma neval_meval:\n  \"neval lcn k lcn' \\<Longrightarrow> n < length cms \\<Longrightarrow> lcn = (cms ! n,mem) \\<Longrightarrow> lcn' = (cmn', mem') \\<Longrightarrow>\n  meval_sched (replicate k n) (cms,mem) (cms[n := cmn'],mem')\"", "lemma meval_sched_app:\n  \"meval_sched as gc gc' \\<Longrightarrow> meval_sched bs gc' gc'' \\<Longrightarrow> meval_sched (as@bs) gc gc''\"", "lemma conc_respects_priv:\n  assumes xnin: \"x\\<^sub>C \\<notin> range var\\<^sub>C_of\"\n  assumes modified\\<^sub>C: \"mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or> dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq> dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\"\n  assumes eval\\<^sub>C: \"(cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>Cn', mem\\<^sub>C')\"\n  assumes in_\\<R>n: \"((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\"\n  assumes preserves: \"preserves_local_guarantee_compliance \\<R>n\"\n  assumes sound_mode_use\\<^sub>A: \"abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\"\n  assumes nlen: \"n < length cms\"\n  assumes len_eq: \"length cms\\<^sub>A = length cms\"\n  assumes len_eq': \"length cms\\<^sub>C = length cms\"\n  shows \"x\\<^sub>C \\<notin> (snd (cms\\<^sub>C ! n)) GuarNoWrite \\<and> x\\<^sub>C \\<notin> (snd (cms\\<^sub>C ! n)) GuarNoReadOrWrite\"", "lemma modified_variables_are_not_assumed_not_written:\n  fixes cms\\<^sub>A mem\\<^sub>A cms\\<^sub>C mem\\<^sub>C cm\\<^sub>Cn' mem\\<^sub>C' \\<R>n cm\\<^sub>An' mem\\<^sub>A' m\\<^sub>A \\<R>i\n  assumes sound_mode_use\\<^sub>A: \"abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\"\n  assumes pmmn: \"preserves_modes_mem \\<R>n\"\n  assumes in_\\<R>n: \"((cms\\<^sub>A ! n, mem\\<^sub>A), (cms\\<^sub>C ! n, mem\\<^sub>C)) \\<in> \\<R>n\"\n  assumes pmmi: \"preserves_modes_mem \\<R>i\"\n  assumes in_\\<R>i: \"((cms\\<^sub>A ! i, mem\\<^sub>A), (cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>i\"\n  assumes nlen: \"n < length cms\"\n  assumes len\\<^sub>A: \"length cms\\<^sub>A = length cms\"\n  assumes len\\<^sub>C: \"length cms\\<^sub>C = length cms\"\n  assumes priv_is_asm_priv: \"\\<And>i. i < length cms \\<Longrightarrow> priv_mem\\<^sub>C ! i \\<subseteq> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite\"\n  assumes priv_is_guar_priv: \"\\<And>i j. i < length cms \\<Longrightarrow> j < length cms \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> priv_mem\\<^sub>C ! i \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\"\n  assumes new_asms_only_for_priv: \"\\<And>i. i < length cms \\<Longrightarrow> \n                                           (snd (cms\\<^sub>C ! i) AsmNoReadOrWrite \\<union> snd (cms\\<^sub>C ! i) AsmNoWrite) \\<inter> (- range var\\<^sub>C_of) \\<subseteq> priv_mem\\<^sub>C ! i\"\n  assumes eval\\<^sub>Cn: \"(cms\\<^sub>C ! n,mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>Cn', mem\\<^sub>C')\"\n  assumes neval\\<^sub>An: \"abs.neval (cms\\<^sub>A ! n,mem\\<^sub>A) m\\<^sub>A (cm\\<^sub>An', mem\\<^sub>A')\"\n  assumes in_\\<R>n': \"((cm\\<^sub>An', mem\\<^sub>A'), (cm\\<^sub>Cn', mem\\<^sub>C')) \\<in> \\<R>n\"\n  assumes modified\\<^sub>C: \"mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or> dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq> dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\"\n  assumes neq: \"i \\<noteq> n\"\n  assumes ilen: \"i < length cms\"\n  assumes preserves: \"preserves_local_guarantee_compliance \\<R>n\"\n  shows \"\\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\"", "lemma ignores_old_vars_conj:\n  assumes Rdef: \"(\\<And>x. R x = (P x \\<and> Q x))\"\n  assumes iP: \"ignores_old_vars P\" \n  assumes iQ: \"ignores_old_vars Q\" \n  shows \"ignores_old_vars R\"", "lemma nth_map_eq': \n  \"length xs = length ys \\<Longrightarrow> map f xs = map g ys \\<Longrightarrow> i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)\"", "lemma nth_map_eq: \n  \"map f xs = map g ys \\<Longrightarrow> i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)\"", "lemma nth_in_Union_over_set: \n  \"i < length xs \\<Longrightarrow> xs ! i \\<subseteq> \\<Union>(set xs)\"", "lemma priv_are_new_vars: \n  \"x \\<in> priv_mem\\<^sub>C ! i \\<Longrightarrow> i < length cms \\<Longrightarrow> x \\<notin> range var\\<^sub>C_of\"", "lemma priv_is_asm_priv_ignores_old_vars:\n  \"ignores_old_vars priv_is_asm_priv\"", "lemma priv_is_guar_priv_ignores_old_vars:\n  \"ignores_old_vars priv_is_guar_priv\"", "lemma new_asms_only_for_priv_ignores_old_vars:\n  \"ignores_old_vars new_asms_only_for_priv\"", "lemma new_asms_NoReadOrWrite_only_ignores_old_vars:\n  \"ignores_old_vars new_asms_NoReadOrWrite_only\"", "lemma modes_respect_priv_ignores_old_vars:\n   \"ignores_old_vars modes_respect_priv\"", "lemma ignores_old_varsD:\n  \"ignores_old_vars P \\<Longrightarrow> length mdss = length mdss' \\<Longrightarrow> length mdss' = length cms \\<Longrightarrow>\n  (map (\\<lambda>x m. x m \\<inter> (- range var\\<^sub>C_of)) mdss) = (map (\\<lambda>x m. x m \\<inter> (- range var\\<^sub>C_of)) mdss') \\<Longrightarrow> \n  P mdss = P mdss'\"", "lemma new_privs_preserved':\n  \"\\<langle>c, mds, mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<Longrightarrow> (mds m \\<inter> (- range var\\<^sub>C_of)) = (mds' m \\<inter> (- range var\\<^sub>C_of))\"", "lemma map_nth_eq:\n  \"length xs = length ys \\<Longrightarrow> (\\<And>i. i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)) \\<Longrightarrow>\n  map f xs = map g ys\"", "lemma ignores_old_vars_conc_meval:\n  assumes ignores: \"ignores_old_vars P\"\n  assumes meval:  \"conc.meval_abv gc\\<^sub>C n gc\\<^sub>C'\"\n  assumes len_eq: \"length (fst gc\\<^sub>C) = length cms\"\n  shows \"P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))\"", "lemma ignores_old_vars_conc_meval_sched:\n  assumes ignores: \"ignores_old_vars P\"\n  assumes meval_sched:  \"conc.meval_sched sched gc\\<^sub>C gc\\<^sub>C'\"\n  assumes len_eq: \"length (fst gc\\<^sub>C) = length cms\"\n  shows \"P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))\"", "lemma meval_sched_modes_respect_priv:\n  \"conc.meval_sched sched gc\\<^sub>C gc\\<^sub>C' \\<Longrightarrow>   length (fst gc\\<^sub>C) = length cms \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C'))\"", "lemma meval_modes_respect_priv:\n  \"conc.meval_abv gc\\<^sub>C n gc\\<^sub>C' \\<Longrightarrow>   length (fst gc\\<^sub>C) = length cms \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C'))\"", "lemma traces_refinement:\n  \"\\<And>gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A. conc.meval_sched sched\\<^sub>C gc\\<^sub>C gc\\<^sub>C' \\<Longrightarrow>\n    length (fst gc\\<^sub>A) = length cms \\<Longrightarrow> length (fst gc\\<^sub>C) = length cms  \\<Longrightarrow>\n    (\\<And>i. i < length cms \\<Longrightarrow> ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)) \\<in> \\<R>_rel (cms ! i)) \\<Longrightarrow>\n    abs.sound_mode_use gc\\<^sub>A \\<Longrightarrow> modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n   \\<exists>sched\\<^sub>A gc\\<^sub>A'. abs.meval_sched sched\\<^sub>A gc\\<^sub>A gc\\<^sub>A' \\<and>\n          (\\<forall>i. i < length cms \\<longrightarrow> ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), (fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')) \\<in> \\<R>_rel (cms ! i)) \\<and>\n          abs.sound_mode_use gc\\<^sub>A'\"", "lemma restrict_modes_length [simp]:\n  \"length (restrict_modes mdss X) = length mdss\"", "lemma compatible_modes_by_case_distinction:\n  assumes compat_X: \"compatible_modes (restrict_modes mdss X)\"\n  assumes compat_compX: \"compatible_modes (restrict_modes mdss (-X ))\"\n  shows \"compatible_modes mdss\"", "lemma in_restrict_modesD:\n  \"i < length mdss \\<Longrightarrow> x \\<in> ((restrict_modes mdss X) ! i) m \\<Longrightarrow> x \\<in> X \\<and> x \\<in> (mdss ! i) m\"", "lemma in_restrict_modesI:\n  \"i < length mdss \\<Longrightarrow> x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! i) m \\<Longrightarrow> x \\<in> ((restrict_modes mdss X) ! i) m \"", "lemma meval_sched_length:\n  \"meval_sched sched gc gc' \\<Longrightarrow> length (fst gc') = length (fst gc)\"", "lemma compatible_modes_old_vars:\n  assumes compatible_modes\\<^sub>A: \"abs.compatible_modes (map snd cms\\<^sub>A)\" \n  assumes len\\<^sub>A: \"length cms\\<^sub>A = length cms\"\n  assumes len\\<^sub>C: \"length cms\\<^sub>C = length cms\"\n  assumes in_\\<R>: \"(\\<forall>i<length cms. ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C) \\<in> \\<R>_rel (cms ! i))\"\n  shows \"conc.compatible_modes (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of))\"", "lemma compatible_modes_new_vars:\n  \"length mdss = length cms \\<Longrightarrow> modes_respect_priv mdss \\<Longrightarrow> conc.compatible_modes (conc.restrict_modes mdss (- range var\\<^sub>C_of))\"", "lemma sound_mode_use_preservation:\n  \"\\<And>gc\\<^sub>C gc\\<^sub>A. \n    length (fst gc\\<^sub>A) = length cms \\<Longrightarrow> length (fst gc\\<^sub>C) = length cms  \\<Longrightarrow>\n    (\\<And>i. i < length cms \\<Longrightarrow> ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)) \\<in> \\<R>_rel (cms ! i)) \\<Longrightarrow>\n    abs.sound_mode_use gc\\<^sub>A \\<Longrightarrow> modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n    conc.sound_mode_use gc\\<^sub>C\"", "lemma refined_prog_secure:\n  assumes len\\<^sub>A [simp]: \"length cms\\<^sub>C = length cms\"\n  assumes len\\<^sub>C [simp]: \"length cms\\<^sub>A = length cms\"\n  assumes in_\\<R>: \"(\\<And>i mem\\<^sub>C. i < length cms \\<Longrightarrow>  ((cms\\<^sub>A ! i,mem\\<^sub>A_of mem\\<^sub>C),(cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n  assumes in_\\<R>\\<^sub>A: \"(\\<And>i mem\\<^sub>C mem\\<^sub>C'. \\<lbrakk>i < length cms; conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C), (cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C')) \\<in> \\<R>\\<^sub>A_rel (cms ! i))\"\n  assumes sound_mode_use\\<^sub>A: \"(\\<And> mem\\<^sub>A.  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A))\"\n  assumes modes_respect_priv: \"modes_respect_priv (map snd cms\\<^sub>C)\"\n  shows \"conc.prog_sifum_secure_cont cms\\<^sub>C\"", "lemma refined_prog_secure':\n  assumes len\\<^sub>A [simp]: \"length cms\\<^sub>C = length cms\"\n  assumes len\\<^sub>C [simp]: \"length cms\\<^sub>A = length cms\"\n  assumes in_\\<R>: \"(\\<And>i mem\\<^sub>C. i < length cms \\<Longrightarrow> ((cms\\<^sub>A ! i,mem\\<^sub>A_of mem\\<^sub>C),(cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n  assumes in_\\<R>\\<^sub>A: \"(\\<And>i mem\\<^sub>A mem\\<^sub>A'. \\<lbrakk>i < length cms;  abs.low_mds_eq (snd (cms\\<^sub>A ! i)) mem\\<^sub>A mem\\<^sub>A'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), (cms\\<^sub>A ! i, mem\\<^sub>A')) \\<in> \\<R>\\<^sub>A_rel (cms ! i))\"\n  assumes sound_mode_use\\<^sub>A: \"(\\<And> mem\\<^sub>A.  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A))\"\n  assumes modes_respect_priv: \"modes_respect_priv (map snd cms\\<^sub>C)\"\n  shows \"conc.prog_sifum_secure_cont cms\\<^sub>C\"", "lemma reachable_mems_refl:\n  \"mem \\<in> reachable_mems cms mem\"", "lemma reachable_mems_refinement:\n  assumes sys_nonempty: \"length cms > 0\"\n  assumes len\\<^sub>A [simp]: \"length cms\\<^sub>C = length cms\"\n  assumes len\\<^sub>C [simp]: \"length cms\\<^sub>A = length cms\"\n  assumes in_\\<R>: \"(\\<And>i mem\\<^sub>C. i < length cms \\<Longrightarrow> ((cms\\<^sub>A ! i,mem\\<^sub>A_of mem\\<^sub>C),(cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n  assumes sound_mode_use\\<^sub>A: \"(\\<And> mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A))\"\n  assumes modes_respect_priv: \"modes_respect_priv (map snd cms\\<^sub>C)\"\n  assumes reachable\\<^sub>C: \"mem\\<^sub>C' \\<in> conc.reachable_mems cms\\<^sub>C mem\\<^sub>C\"\n  shows \"mem\\<^sub>A_of mem\\<^sub>C' \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)\""], "translations": [["", "lemma inj_card_le: \n  \"inj (f::'a \\<Rightarrow> 'b) \\<Longrightarrow> finite (UNIV::'b set) \\<Longrightarrow> card (UNIV::'a set) \\<le> card (UNIV::'b set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj f; finite UNIV\\<rbrakk>\n    \\<Longrightarrow> card UNIV \\<le> card UNIV", "by (blast intro: card_inj_on_le)"], ["", "text \\<open>\n  We define a generic locale for capturing refinement between an abstract and a concrete\n  program. We then define and prove sufficient, conditions that preserve local security\n  from the abstract to the concrete program.\n\n  Below we define a second locale that is more restrictive than this one. Specifically, this\n  one allows the concrete program to have extra variables not present in the abstract one.\n  These variables might be used, for instance, to implement a runtime stack that was implicit\n  in the semantics of the abstract program; or as temporary storage for expression evaluation\n  that may (appear to be) atomic in the abstract semantics.\n\n  The simpler locale below forbids extra variables in the concrete program, making the\n  necessary conditions for preservation of local security simpler.\n\\<close>"], ["", "locale sifum_refinement = \n  abs: sifum_security dma\\<^sub>A \\<C>_vars\\<^sub>A \\<C>\\<^sub>A eval\\<^sub>A some_val +\n  conc: sifum_security dma\\<^sub>C \\<C>_vars\\<^sub>C \\<C>\\<^sub>C eval\\<^sub>C some_val\n  for dma\\<^sub>A :: \"('Var\\<^sub>A,'Val) Mem \\<Rightarrow> 'Var\\<^sub>A \\<Rightarrow> Sec\"\n  and dma\\<^sub>C :: \"('Var\\<^sub>C,'Val) Mem \\<Rightarrow> 'Var\\<^sub>C \\<Rightarrow> Sec\"\n  and \\<C>_vars\\<^sub>A :: \"'Var\\<^sub>A \\<Rightarrow> 'Var\\<^sub>A set\"\n  and \\<C>_vars\\<^sub>C :: \"'Var\\<^sub>C \\<Rightarrow> 'Var\\<^sub>C set\"\n  and \\<C>\\<^sub>A :: \"'Var\\<^sub>A set\"\n  and \\<C>\\<^sub>C :: \"'Var\\<^sub>C set\"\n  and eval\\<^sub>A :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val) LocalConf rel\"\n  and eval\\<^sub>C :: \"('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf rel\"\n  and some_val :: \"'Val\" +\n  fixes var\\<^sub>C_of :: \"'Var\\<^sub>A \\<Rightarrow> 'Var\\<^sub>C\"\n  assumes var\\<^sub>C_of_inj: \"inj var\\<^sub>C_of\" \n  assumes dma_consistent:\n    \"dma\\<^sub>A (\\<lambda>x\\<^sub>A. mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) x\\<^sub>A = dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\"\n  assumes \\<C>_vars_consistent:\n    \"(var\\<^sub>C_of ` \\<C>_vars\\<^sub>A x\\<^sub>A) = \\<C>_vars\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\"\n  (* we make the (reasonable IMHO) assumption that the only control variables\n     are user-declared and so that the compiler won't introduce new ones. *)\n  assumes control_vars_are_A_vars:\n    \"\\<C>\\<^sub>C = var\\<^sub>C_of ` \\<C>\\<^sub>A\""], ["", "section \"General Compositional Refinement\""], ["", "text \\<open>\n  The type of state relations between the abstract and compiled components.\n  The job of a certifying compiler will be to exhibit one of these for each\n  component it compiles. Below we'll define the conditions that such a\n  relation needs to satisfy to give compositional refinement.\n\\<close>"], ["", "type_synonym ('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation = \n   \"(('Com\\<^sub>A, 'Var\\<^sub>A, 'Val) LocalConf \\<times> ('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf) set\""], ["", "context sifum_refinement begin"], ["", "abbreviation \n  conf_abv\\<^sub>A :: \"'Com\\<^sub>A \\<Rightarrow> 'Var\\<^sub>A Mds \\<Rightarrow> ('Var\\<^sub>A, 'Val) Mem \\<Rightarrow> (_,_,_) LocalConf\"\n  (\"\\<langle>_, _, _\\<rangle>\\<^sub>A\" [0, 0, 0] 1000)\nwhere\n  \"\\<langle> c, mds, mem \\<rangle>\\<^sub>A \\<equiv> ((c, mds), mem)\""], ["", "abbreviation \n  conf_abv\\<^sub>C :: \"'Com\\<^sub>C \\<Rightarrow> 'Var\\<^sub>C Mds \\<Rightarrow> ('Var\\<^sub>C, 'Val) Mem \\<Rightarrow> (_,_,_) LocalConf\"\n  (\"\\<langle>_, _, _\\<rangle>\\<^sub>C\" [0, 0, 0] 1000)\nwhere\n  \"\\<langle> c, mds, mem \\<rangle>\\<^sub>C \\<equiv> ((c, mds), mem)\""], ["", "abbreviation \n  eval_abv\\<^sub>A :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val) LocalConf \\<Rightarrow> (_, _, _) LocalConf \\<Rightarrow> bool\"\n  (infixl \"\\<leadsto>\\<^sub>A\" 70)\n where\n  \"x \\<leadsto>\\<^sub>A y \\<equiv> (x, y) \\<in> eval\\<^sub>A\""], ["", "abbreviation \n  eval_abv\\<^sub>C :: \"('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf \\<Rightarrow> (_, _, _) LocalConf \\<Rightarrow> bool\"\n  (infixl \"\\<leadsto>\\<^sub>C\" 70)\nwhere\n  \"x \\<leadsto>\\<^sub>C y \\<equiv> (x, y) \\<in> eval\\<^sub>C\""], ["", "definition\n  preserves_modes_mem :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow> bool\"\nwhere\n  \"preserves_modes_mem \\<R> \\<equiv> \n  (\\<forall> c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C. (\\<langle> c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>x\\<^sub>A. (mem\\<^sub>A x\\<^sub>A) = (mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))) \\<and>\n      (\\<forall>m. var\\<^sub>C_of ` mds\\<^sub>A m = (range var\\<^sub>C_of) \\<inter> mds\\<^sub>C m))\""], ["", "definition\n  mem\\<^sub>A_of :: \"('Var\\<^sub>C, 'Val) Mem \\<Rightarrow> ('Var\\<^sub>A, 'Val) Mem\"\nwhere\n  \"mem\\<^sub>A_of mem\\<^sub>C \\<equiv>  (\\<lambda>x\\<^sub>A. (mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)))\""], ["", "definition\n  mds\\<^sub>A_of :: \"'Var\\<^sub>C Mds \\<Rightarrow> 'Var\\<^sub>A Mds\"\nwhere\n  \"mds\\<^sub>A_of mds\\<^sub>C \\<equiv> (\\<lambda> m. (inv var\\<^sub>C_of) ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m))\""], ["", "lemma low_mds_eq_from_conc_to_abs:\n  \"conc.low_mds_eq mds mem mem' \\<Longrightarrow> abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem) (mem\\<^sub>A_of mem')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.low_mds_eq mds mem mem' \\<Longrightarrow>\n    abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem)\n     (mem\\<^sub>A_of mem')", "apply(clarsimp simp: abs.low_mds_eq_def conc.low_mds_eq_def mem\\<^sub>A_of_def mds\\<^sub>A_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   dma\\<^sub>C mem x = Low \\<and>\n                   (x \\<in> \\<C>\\<^sub>C \\<or>\n                    x \\<notin> mds AsmNoReadOrWrite) \\<longrightarrow>\n                   mem x = mem' x;\n        dma\\<^sub>A (\\<lambda>x\\<^sub>A. mem (var\\<^sub>C_of x\\<^sub>A)) x =\n        Low;\n        x \\<in> \\<C>\\<^sub>A \\<or>\n        x \\<notin> inv var\\<^sub>C_of `\n                   (range var\\<^sub>C_of \\<inter>\n                    mds AsmNoReadOrWrite)\\<rbrakk>\n       \\<Longrightarrow> mem (var\\<^sub>C_of x) = mem' (var\\<^sub>C_of x)", "using var\\<^sub>C_of_inj"], ["proof (prove)\nusing this:\n  inj var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   dma\\<^sub>C mem x = Low \\<and>\n                   (x \\<in> \\<C>\\<^sub>C \\<or>\n                    x \\<notin> mds AsmNoReadOrWrite) \\<longrightarrow>\n                   mem x = mem' x;\n        dma\\<^sub>A (\\<lambda>x\\<^sub>A. mem (var\\<^sub>C_of x\\<^sub>A)) x =\n        Low;\n        x \\<in> \\<C>\\<^sub>A \\<or>\n        x \\<notin> inv var\\<^sub>C_of `\n                   (range var\\<^sub>C_of \\<inter>\n                    mds AsmNoReadOrWrite)\\<rbrakk>\n       \\<Longrightarrow> mem (var\\<^sub>C_of x) = mem' (var\\<^sub>C_of x)", "by (metis IntI control_vars_are_A_vars dma_consistent image_eqI inv_f_f rangeI)"], ["", "definition\n  var\\<^sub>A_of :: \"'Var\\<^sub>C \\<Rightarrow> 'Var\\<^sub>A\"\nwhere\n  \"var\\<^sub>A_of \\<equiv> inv var\\<^sub>C_of\""], ["", "lemma preserves_modes_mem_mem\\<^sub>A_simp:\n  \"(\\<forall>x\\<^sub>A. (mem\\<^sub>A x\\<^sub>A) = (mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))) \\<Longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<^sub>A.\n       mem\\<^sub>A x\\<^sub>A =\n       mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A) \\<Longrightarrow>\n    mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C", "unfolding mem\\<^sub>A_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<^sub>A.\n       mem\\<^sub>A x\\<^sub>A =\n       mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A) \\<Longrightarrow>\n    mem\\<^sub>A =\n    (\\<lambda>x\\<^sub>A. mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))", "by blast"], ["", "lemma preserves_modes_mem_mds\\<^sub>A_simp:\n  \"(\\<forall>m. var\\<^sub>C_of ` mds\\<^sub>A m = range (var\\<^sub>C_of) \\<inter> mds\\<^sub>C m) \\<Longrightarrow>\n      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n    mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C", "unfolding mds\\<^sub>A_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n    mds\\<^sub>A =\n    (\\<lambda>m.\n        inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<forall>m.\n          var\\<^sub>C_of ` mds\\<^sub>A m =\n          range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       mds\\<^sub>A m =\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)", "apply(drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       mds\\<^sub>A m =\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)", "apply(rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       mds\\<^sub>A m\n       \\<subseteq> inv var\\<^sub>C_of `\n                   (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n 2. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n       \\<subseteq> mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x.\n       \\<lbrakk>var\\<^sub>C_of ` mds\\<^sub>A m =\n                range var\\<^sub>C_of \\<inter> mds\\<^sub>C m;\n        x \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> x \\<in> inv var\\<^sub>C_of `\n                                 (range var\\<^sub>C_of \\<inter>\n                                  mds\\<^sub>C m)\n 2. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n       \\<subseteq> mds\\<^sub>A m", "apply(rename_tac x\\<^sub>A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>var\\<^sub>C_of ` mds\\<^sub>A m =\n                range var\\<^sub>C_of \\<inter> mds\\<^sub>C m;\n        x\\<^sub>A \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> inv var\\<^sub>C_of `\n                               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n 2. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n       \\<subseteq> mds\\<^sub>A m", "apply(drule equalityD1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of ` mds\\<^sub>A m\n        \\<subseteq> range var\\<^sub>C_of \\<inter> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> inv var\\<^sub>C_of `\n                               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n 2. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n       \\<subseteq> mds\\<^sub>A m", "apply(drule_tac c=\"var\\<^sub>C_of x\\<^sub>A\" in subsetD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m x\\<^sub>A.\n       x\\<^sub>A \\<in> mds\\<^sub>A m \\<Longrightarrow>\n       var\\<^sub>C_of x\\<^sub>A \\<in> var\\<^sub>C_of ` mds\\<^sub>A m\n 2. \\<And>m x\\<^sub>A.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x\\<^sub>A\n        \\<in> range var\\<^sub>C_of \\<inter> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> inv var\\<^sub>C_of `\n                               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n 3. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n       \\<subseteq> mds\\<^sub>A m", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x\\<^sub>A\n        \\<in> range var\\<^sub>C_of \\<inter> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> inv var\\<^sub>C_of `\n                               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n 2. \\<And>m.\n       var\\<^sub>C_of ` mds\\<^sub>A m =\n       range var\\<^sub>C_of \\<inter> mds\\<^sub>C m \\<Longrightarrow>\n       inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n       \\<subseteq> mds\\<^sub>A m", "unfolding image_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x\\<^sub>A\n        \\<in> {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n              mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> {y. \\<exists>x\n      \\<in>{y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n           mds\\<^sub>C m.\ny = inv var\\<^sub>C_of x}\n 2. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{y.\n   \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n  mds\\<^sub>C m.\n                            x\\<^sub>A = inv var\\<^sub>C_of x\n 2. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply(rule_tac x=\"var\\<^sub>C_of x\\<^sub>A\" in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A =\n                         inv var\\<^sub>C_of (var\\<^sub>C_of x\\<^sub>A)\n 2. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> {y. \\<exists>x.\ny = var\\<^sub>C_of x} \\<inter>\n                               mds\\<^sub>C m\n 3. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply(rule sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> inv var\\<^sub>C_of (var\\<^sub>C_of x\\<^sub>A) =\n                         x\\<^sub>A\n 2. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> {y. \\<exists>x.\ny = var\\<^sub>C_of x} \\<inter>\n                               mds\\<^sub>C m\n 3. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply(rule inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> {y. \\<exists>x.\ny = var\\<^sub>C_of x} \\<inter>\n                               mds\\<^sub>C m\n 2. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply(drule inj_onD[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> UNIV\n 2. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x \\<in> UNIV\n 3. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>x\\<^sub>A \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x \\<in> mds\\<^sub>C m; x\\<^sub>A = x\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> {y. \\<exists>x.\ny = var\\<^sub>C_of x} \\<inter>\n                               mds\\<^sub>C m\n 4. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply blast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       {y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n       {y. \\<exists>x\\<in>UNIV. y = var\\<^sub>C_of x} \\<inter>\n       mds\\<^sub>C m \\<Longrightarrow>\n       {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>UNIV.\n                                 y = var\\<^sub>C_of x} \\<inter>\n                          mds\\<^sub>C m.\n              y = inv var\\<^sub>C_of x}\n       \\<subseteq> mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m xb.\n       \\<lbrakk>{y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n                {y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                mds\\<^sub>C m;\n        var\\<^sub>C_of xb \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> inv var\\<^sub>C_of (var\\<^sub>C_of xb)\n                         \\<in> mds\\<^sub>A m", "apply(rename_tac x\\<^sub>A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>{y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n                {y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> inv var\\<^sub>C_of (var\\<^sub>C_of x\\<^sub>A)\n                         \\<in> mds\\<^sub>A m", "apply(simp add: inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>{y. \\<exists>x\\<in>mds\\<^sub>A m. y = var\\<^sub>C_of x} =\n                {y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply(drule equalityD2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m;\n        {y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter> mds\\<^sub>C m\n        \\<subseteq> {y. \\<exists>x\\<in>mds\\<^sub>A m.\n                           y = var\\<^sub>C_of x}\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply(drule_tac c=\"var\\<^sub>C_of x\\<^sub>A\" in subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m x\\<^sub>A.\n       var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m \\<Longrightarrow>\n       var\\<^sub>C_of x\\<^sub>A\n       \\<in> {y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter> mds\\<^sub>C m\n 2. \\<And>m x\\<^sub>A.\n       \\<lbrakk>var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A\n        \\<in> {y. \\<exists>x\\<in>mds\\<^sub>A m.\n                     y = var\\<^sub>C_of x}\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x\\<^sub>A.\n       \\<lbrakk>var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m;\n        var\\<^sub>C_of x\\<^sub>A\n        \\<in> {y. \\<exists>x\\<in>mds\\<^sub>A m.\n                     y = var\\<^sub>C_of x}\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>var\\<^sub>C_of x \\<in> mds\\<^sub>C m; x \\<in> mds\\<^sub>A m;\n        var\\<^sub>C_of x\\<^sub>A = var\\<^sub>C_of x\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply(drule inj_onD[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        x \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> UNIV\n 2. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n        x \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> x \\<in> UNIV\n 3. \\<And>m x\\<^sub>A x.\n       \\<lbrakk>var\\<^sub>C_of x \\<in> mds\\<^sub>C m; x \\<in> mds\\<^sub>A m;\n        x\\<^sub>A = x\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>\n  This version might be more useful. Not sure yet.\n\\<close>"], ["", "lemma preserves_modes_mem_def2:\n  \"preserves_modes_mem \\<R> =\n  (\\<forall> c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C. (\\<langle> c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R> =\n    (\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>C.\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n        mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C)", "unfolding preserves_modes_mem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>C.\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>x\\<^sub>A.\n            mem\\<^sub>A x\\<^sub>A =\n            mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n        (\\<forall>m.\n            var\\<^sub>C_of ` mds\\<^sub>A m =\n            range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)) =\n    (\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>C.\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n        mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C)", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       (\\<forall>x\\<^sub>A.\n           mem\\<^sub>A x\\<^sub>A =\n           mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n       (\\<forall>m.\n           var\\<^sub>C_of ` mds\\<^sub>A m =\n           range var\\<^sub>C_of \\<inter> mds\\<^sub>C m) \\<Longrightarrow>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n       mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\n 2. \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n       mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C \\<Longrightarrow>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       (\\<forall>x\\<^sub>A.\n           mem\\<^sub>A x\\<^sub>A =\n           mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n       (\\<forall>m.\n           var\\<^sub>C_of ` mds\\<^sub>A m =\n           range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)", "apply(blast dest: preserves_modes_mem_mem\\<^sub>A_simp preserves_modes_mem_mds\\<^sub>A_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n       mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C \\<Longrightarrow>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       (\\<forall>x\\<^sub>A.\n           mem\\<^sub>A x\\<^sub>A =\n           mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n       (\\<forall>m.\n           var\\<^sub>C_of ` mds\\<^sub>A m =\n           range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C x\\<^sub>A.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>A x\\<^sub>A =\n                         mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> range var\\<^sub>C_of\n 3. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\n 4. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(elim allE impE, assumption, elim conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C;\n        mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>A x\\<^sub>A =\n                         mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> range var\\<^sub>C_of\n 3. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\n 4. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(simp add: mem\\<^sub>A_of_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> range var\\<^sub>C_of\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\n 3. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        xa \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(rename_tac x\\<^sub>A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        x\\<^sub>A \\<in> mds\\<^sub>A m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(elim allE impE, assumption, elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        x\\<^sub>A \\<in> mds\\<^sub>A m;\n        mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C;\n        mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        x\\<^sub>A \\<in> mds\\<^sub>A_of mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(clarsimp simp: mds\\<^sub>A_of_def image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m xa.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  {y. \\<exists>x\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                     mds\\<^sub>C m.\n         y =\n         inv var\\<^sub>C_of x}, mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of\n                          (inv var\\<^sub>C_of (var\\<^sub>C_of xa))\n                         \\<in> mds\\<^sub>C m\n 2. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(simp add: inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m; xa \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m xa.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of xa \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of xa\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(rename_tac x\\<^sub>A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> var\\<^sub>C_of ` mds\\<^sub>A m", "apply(rule imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C\n                   mds\\<^sub>C mem\\<^sub>C.\n                   (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<longrightarrow>\n                   mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                   mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C;\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply(elim allE impE, assumption, elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m;\n        mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C;\n        mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A \\<in> mds\\<^sub>A m", "apply(clarsimp simp: mds\\<^sub>A_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  inv var\\<^sub>C_of `\n  (range var\\<^sub>C_of \\<inter>\n   mds\\<^sub>C m), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> inv var\\<^sub>C_of `\n                               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)", "apply(subst image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  inv var\\<^sub>C_of `\n  (range var\\<^sub>C_of \\<inter>\n   mds\\<^sub>C m), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A\n                         \\<in> {y. \\<exists>x\n      \\<in>range var\\<^sub>C_of \\<inter> mds\\<^sub>C m.\ny = inv var\\<^sub>C_of x}", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  inv var\\<^sub>C_of `\n  (range var\\<^sub>C_of \\<inter>\n   mds\\<^sub>C m), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>range var\\<^sub>C_of \\<inter>\n  mds\\<^sub>C m.\n                            x\\<^sub>A = inv var\\<^sub>C_of x", "apply(rule_tac x=\"var\\<^sub>C_of x\\<^sub>A\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  inv var\\<^sub>C_of `\n  (range var\\<^sub>C_of \\<inter>\n   mds\\<^sub>C m), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>A =\n                         inv var\\<^sub>C_of (var\\<^sub>C_of x\\<^sub>A)\n 2. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  inv var\\<^sub>C_of `\n  (range var\\<^sub>C_of \\<inter>\n   mds\\<^sub>C m), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> range var\\<^sub>C_of \\<inter> mds\\<^sub>C m", "apply(simp add: inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C m x\\<^sub>A.\n       \\<lbrakk>(\\<langle>c\\<^sub>A, \\<lambda>m.\n  inv var\\<^sub>C_of `\n  (range var\\<^sub>C_of \\<inter>\n   mds\\<^sub>C m), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        var\\<^sub>C_of x\\<^sub>A \\<in> mds\\<^sub>C m\\<rbrakk>\n       \\<Longrightarrow> var\\<^sub>C_of x\\<^sub>A\n                         \\<in> range var\\<^sub>C_of \\<inter> mds\\<^sub>C m", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  closed_others :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow> bool\"\nwhere\n  \"closed_others \\<R> \\<equiv> \n  (\\<forall> c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'. (\\<langle> c\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n   (\\<forall>x. mem\\<^sub>C x \\<noteq> mem\\<^sub>C' x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n   (\\<forall>x. dma\\<^sub>C mem\\<^sub>C x \\<noteq> dma\\<^sub>C mem\\<^sub>C' x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n         (\\<langle> c\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R>)\""], ["", "definition\n  stops\\<^sub>C :: \"('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf \\<Rightarrow> bool\"\nwhere\n  \"stops\\<^sub>C c \\<equiv> \\<forall>c'. \\<not> (c \\<leadsto>\\<^sub>C c')\""], ["", "lemmas neval_induct = abs.neval.induct[consumes 1, case_names Zero Suc]"], ["", "(* FIXME: move to Security.thy or similar *)"], ["", "lemma strong_low_bisim_neval':\n  \"abs.neval c\\<^sub>1 n c\\<^sub>n \\<Longrightarrow> (c\\<^sub>1,c\\<^sub>1') \\<in> \\<R>\\<^sub>A \\<Longrightarrow> snd (fst c\\<^sub>1) = snd (fst c\\<^sub>1') \\<Longrightarrow> abs.strong_low_bisim_mm \\<R>\\<^sub>A \\<Longrightarrow>\n  \\<exists>c\\<^sub>n'. abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and> (c\\<^sub>n,c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and> snd (fst c\\<^sub>n) = snd (fst (c\\<^sub>n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abs.neval c\\<^sub>1 n c\\<^sub>n;\n     (c\\<^sub>1, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n     snd (fst c\\<^sub>1) = snd (fst c\\<^sub>1');\n     abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                         abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                         (c\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                         snd (fst c\\<^sub>n) = snd (fst c\\<^sub>n')", "proof(induct  arbitrary: c\\<^sub>1' rule: neval_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y c\\<^sub>1'.\n       \\<lbrakk>x = y; (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' 0 c\\<^sub>n' \\<and>\n                            (y, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst y) = snd (fst c\\<^sub>n')\n 2. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "case (Zero c\\<^sub>1 c\\<^sub>n)"], ["proof (state)\nthis:\n  c\\<^sub>1 = c\\<^sub>n\n  (c\\<^sub>1, c\\<^sub>1') \\<in> \\<R>\\<^sub>A\n  snd (fst c\\<^sub>1) = snd (fst c\\<^sub>1')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (2 subgoals):\n 1. \\<And>x y c\\<^sub>1'.\n       \\<lbrakk>x = y; (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' 0 c\\<^sub>n' \\<and>\n                            (y, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst y) = snd (fst c\\<^sub>n')\n 2. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "hence \"abs.neval c\\<^sub>1' 0 c\\<^sub>1' \\<and> (c\\<^sub>n, c\\<^sub>1') \\<in> \\<R>\\<^sub>A \\<and> snd (fst c\\<^sub>n) = snd (fst c\\<^sub>1')\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 = c\\<^sub>n\n  (c\\<^sub>1, c\\<^sub>1') \\<in> \\<R>\\<^sub>A\n  snd (fst c\\<^sub>1) = snd (fst c\\<^sub>1')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.neval c\\<^sub>1' 0 c\\<^sub>1' \\<and>\n    (c\\<^sub>n, c\\<^sub>1') \\<in> \\<R>\\<^sub>A \\<and>\n    snd (fst c\\<^sub>n) = snd (fst c\\<^sub>1')", "by(blast intro: abs.neval.intros(1))"], ["proof (state)\nthis:\n  abs.neval c\\<^sub>1' 0 c\\<^sub>1' \\<and>\n  (c\\<^sub>n, c\\<^sub>1') \\<in> \\<R>\\<^sub>A \\<and>\n  snd (fst c\\<^sub>n) = snd (fst c\\<^sub>1')\n\ngoal (2 subgoals):\n 1. \\<And>x y c\\<^sub>1'.\n       \\<lbrakk>x = y; (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' 0 c\\<^sub>n' \\<and>\n                            (y, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst y) = snd (fst c\\<^sub>n')\n 2. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "thus ?case"], ["proof (prove)\nusing this:\n  abs.neval c\\<^sub>1' 0 c\\<^sub>1' \\<and>\n  (c\\<^sub>n, c\\<^sub>1') \\<in> \\<R>\\<^sub>A \\<and>\n  snd (fst c\\<^sub>n) = snd (fst c\\<^sub>1')\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>n''.\n       abs.neval c\\<^sub>1' 0 c\\<^sub>n'' \\<and>\n       (c\\<^sub>n, c\\<^sub>n'') \\<in> \\<R>\\<^sub>A \\<and>\n       snd (fst c\\<^sub>n) = snd (fst c\\<^sub>n'')", "by blast"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>n''.\n     abs.neval c\\<^sub>1' 0 c\\<^sub>n'' \\<and>\n     (c\\<^sub>n, c\\<^sub>n'') \\<in> \\<R>\\<^sub>A \\<and>\n     snd (fst c\\<^sub>n) = snd (fst c\\<^sub>n'')\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "case (Suc lc\\<^sub>0 lc\\<^sub>1 n lc\\<^sub>n lc\\<^sub>0')"], ["proof (state)\nthis:\n  lc\\<^sub>0 \\<leadsto>\\<^sub>A lc\\<^sub>1\n  abs.neval lc\\<^sub>1 n lc\\<^sub>n\n  \\<lbrakk>(lc\\<^sub>1, ?c\\<^sub>1'5) \\<in> \\<R>\\<^sub>A;\n   snd (fst lc\\<^sub>1) = snd (fst ?c\\<^sub>1'5);\n   abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                       abs.neval ?c\\<^sub>1'5 n c\\<^sub>n' \\<and>\n                       (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                       snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')\n  (lc\\<^sub>0, lc\\<^sub>0') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>0) = snd (fst lc\\<^sub>0')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "obtain c\\<^sub>0 mds\\<^sub>0 mem\\<^sub>0 \n  where [simp]: \"lc\\<^sub>0 = \\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>0 mds\\<^sub>0 mem\\<^sub>0.\n        lc\\<^sub>0 =\n        \\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (case_tac lc\\<^sub>0, auto)"], ["proof (state)\nthis:\n  lc\\<^sub>0 = \\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "obtain c\\<^sub>1 mds\\<^sub>1 mem\\<^sub>1 \n  where [simp]: \"lc\\<^sub>1 = \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1 mds\\<^sub>1 mem\\<^sub>1.\n        lc\\<^sub>1 =\n        \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (case_tac lc\\<^sub>1, auto)"], ["proof (state)\nthis:\n  lc\\<^sub>1 = \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "from \\<open>snd (fst lc\\<^sub>0) = snd (fst lc\\<^sub>0')\\<close>"], ["proof (chain)\npicking this:\n  snd (fst lc\\<^sub>0) = snd (fst lc\\<^sub>0')", "obtain c\\<^sub>0' mem\\<^sub>0'\n  where [simp]: \"lc\\<^sub>0' = \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A\""], ["proof (prove)\nusing this:\n  snd (fst lc\\<^sub>0) = snd (fst lc\\<^sub>0')\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>0' mem\\<^sub>0'.\n        lc\\<^sub>0' =\n        \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (case_tac lc\\<^sub>0', auto)"], ["proof (state)\nthis:\n  lc\\<^sub>0' =\n  \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "from \\<open>(lc\\<^sub>0, lc\\<^sub>0') \\<in> \\<R>\\<^sub>A\\<close>[simplified] \\<open>lc\\<^sub>0 \\<leadsto>\\<^sub>A lc\\<^sub>1\\<close>[simplified] \\<open>abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<close>"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  \\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A", "obtain c\\<^sub>1' mem\\<^sub>1' where a: \"\\<langle>c\\<^sub>0',mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A \\<langle>c\\<^sub>1',mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\" and \n          b: \"(\\<langle>c\\<^sub>1,mds\\<^sub>1,mem\\<^sub>1\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>1',mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  \\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1' mem\\<^sub>1'.\n        \\<lbrakk>\\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n                 \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding abs.strong_low_bisim_mm_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  \\<langle>c\\<^sub>0, mds\\<^sub>0, mem\\<^sub>0\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A\n  sym \\<R>\\<^sub>A \\<and>\n  abs.closed_glob_consistent \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n      (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A \\<longrightarrow>\n      abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n      (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n          \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<longrightarrow>\n          (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n              \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A)\n              \\<in> \\<R>\\<^sub>A)))\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1' mem\\<^sub>1'.\n        \\<lbrakk>\\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n                 \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "from this Suc.hyps Suc(6)"], ["proof (chain)\npicking this:\n  \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  lc\\<^sub>0 \\<leadsto>\\<^sub>A lc\\<^sub>1\n  abs.neval lc\\<^sub>1 n lc\\<^sub>n\n  \\<lbrakk>(lc\\<^sub>1, ?c\\<^sub>1'5) \\<in> \\<R>\\<^sub>A;\n   snd (fst lc\\<^sub>1) = snd (fst ?c\\<^sub>1'5);\n   abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                       abs.neval ?c\\<^sub>1'5 n c\\<^sub>n' \\<and>\n                       (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                       snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A", "obtain lc\\<^sub>S' where \"abs.neval \\<langle>c\\<^sub>1',mds\\<^sub>1,mem\\<^sub>1'\\<rangle>\\<^sub>A n lc\\<^sub>S'\" and \"(lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A\" and \"snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')\""], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  lc\\<^sub>0 \\<leadsto>\\<^sub>A lc\\<^sub>1\n  abs.neval lc\\<^sub>1 n lc\\<^sub>n\n  \\<lbrakk>(lc\\<^sub>1, ?c\\<^sub>1'5) \\<in> \\<R>\\<^sub>A;\n   snd (fst lc\\<^sub>1) = snd (fst ?c\\<^sub>1'5);\n   abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                       abs.neval ?c\\<^sub>1'5 n c\\<^sub>n' \\<and>\n                       (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                       snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>lc\\<^sub>S'.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n                  n lc\\<^sub>S';\n         (lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A;\n         snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  abs.neval \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n   n lc\\<^sub>S'\n  (lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')\n\ngoal (1 subgoal):\n 1. \\<And>x y n z c\\<^sub>1'.\n       \\<lbrakk>x \\<leadsto>\\<^sub>A y; abs.neval y n z;\n        \\<And>c\\<^sub>1'.\n           \\<lbrakk>(y, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n            snd (fst y) = snd (fst c\\<^sub>1');\n            abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                                abs.neval c\\<^sub>1' n c\\<^sub>n' \\<and>\n                                (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst z) = snd (fst c\\<^sub>n');\n        (x, c\\<^sub>1') \\<in> \\<R>\\<^sub>A;\n        snd (fst x) = snd (fst c\\<^sub>1');\n        abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                            abs.neval c\\<^sub>1' (Suc n) c\\<^sub>n' \\<and>\n                            (z, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                            snd (fst z) = snd (fst c\\<^sub>n')", "with Suc this a b"], ["proof (chain)\npicking this:\n  lc\\<^sub>0 \\<leadsto>\\<^sub>A lc\\<^sub>1\n  abs.neval lc\\<^sub>1 n lc\\<^sub>n\n  \\<lbrakk>(lc\\<^sub>1, ?c\\<^sub>1'5) \\<in> \\<R>\\<^sub>A;\n   snd (fst lc\\<^sub>1) = snd (fst ?c\\<^sub>1'5);\n   abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                       abs.neval ?c\\<^sub>1'5 n c\\<^sub>n' \\<and>\n                       (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                       snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')\n  (lc\\<^sub>0, lc\\<^sub>0') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>0) = snd (fst lc\\<^sub>0')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n  abs.neval \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n   n lc\\<^sub>S'\n  (lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')\n  \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  abs.neval \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n   n lc\\<^sub>S'\n  (lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')", "show ?case"], ["proof (prove)\nusing this:\n  lc\\<^sub>0 \\<leadsto>\\<^sub>A lc\\<^sub>1\n  abs.neval lc\\<^sub>1 n lc\\<^sub>n\n  \\<lbrakk>(lc\\<^sub>1, ?c\\<^sub>1'5) \\<in> \\<R>\\<^sub>A;\n   snd (fst lc\\<^sub>1) = snd (fst ?c\\<^sub>1'5);\n   abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>n'.\n                       abs.neval ?c\\<^sub>1'5 n c\\<^sub>n' \\<and>\n                       (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n                       snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')\n  (lc\\<^sub>0, lc\\<^sub>0') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>0) = snd (fst lc\\<^sub>0')\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n  abs.neval \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n   n lc\\<^sub>S'\n  (lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')\n  \\<langle>c\\<^sub>0', mds\\<^sub>0, mem\\<^sub>0'\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n  \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  abs.neval \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n   n lc\\<^sub>S'\n  (lc\\<^sub>n, lc\\<^sub>S') \\<in> \\<R>\\<^sub>A\n  snd (fst lc\\<^sub>n) = snd (fst lc\\<^sub>S')\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>n'.\n       abs.neval lc\\<^sub>0' (Suc n) c\\<^sub>n' \\<and>\n       (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n       snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')", "by(fastforce intro: abs.neval.intros(2))"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>n'.\n     abs.neval lc\\<^sub>0' (Suc n) c\\<^sub>n' \\<and>\n     (lc\\<^sub>n, c\\<^sub>n') \\<in> \\<R>\\<^sub>A \\<and>\n     snd (fst lc\\<^sub>n) = snd (fst c\\<^sub>n')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strong_low_bisim_neval:\n  \"abs.neval \\<langle>c\\<^sub>1,mds\\<^sub>1,mem\\<^sub>1\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>n,mds\\<^sub>n,mem\\<^sub>n\\<rangle>\\<^sub>A \\<Longrightarrow> (\\<langle>c\\<^sub>1,mds\\<^sub>1,mem\\<^sub>1\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>1',mds\\<^sub>1,mem\\<^sub>1'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow> abs.strong_low_bisim_mm \\<R>\\<^sub>A \\<Longrightarrow>\n  \\<exists>c\\<^sub>n' mem\\<^sub>n'. abs.neval \\<langle>c\\<^sub>1',mds\\<^sub>1,mem\\<^sub>1'\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>n',mds\\<^sub>n,mem\\<^sub>n'\\<rangle>\\<^sub>A \\<and> (\\<langle>c\\<^sub>n,mds\\<^sub>n,mem\\<^sub>n\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>n',mds\\<^sub>n,mem\\<^sub>n'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abs.neval\n              \\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A\n              n \\<langle>c\\<^sub>n, mds\\<^sub>n, mem\\<^sub>n\\<rangle>\\<^sub>A;\n     (\\<langle>c\\<^sub>1, mds\\<^sub>1, mem\\<^sub>1\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A;\n     abs.strong_low_bisim_mm \\<R>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>n' mem\\<^sub>n'.\n                         abs.neval\n                          \\<langle>c\\<^sub>1', mds\\<^sub>1, mem\\<^sub>1'\\<rangle>\\<^sub>A\n                          n \\<langle>c\\<^sub>n', mds\\<^sub>n, mem\\<^sub>n'\\<rangle>\\<^sub>A \\<and>\n                         (\\<langle>c\\<^sub>n, mds\\<^sub>n, mem\\<^sub>n\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>n', mds\\<^sub>n, mem\\<^sub>n'\\<rangle>\\<^sub>A)\n                         \\<in> \\<R>\\<^sub>A", "by(drule strong_low_bisim_neval', simp+)"], ["", "lemma in_\\<R>_dma':\n  assumes preserves: \"preserves_modes_mem \\<R>\"\n  assumes in_\\<R>: \"(\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>C,mds\\<^sub>C,mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  shows  \"dma\\<^sub>A mem\\<^sub>A x\\<^sub>A = dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "from assms"], ["proof (chain)\npicking this:\n  preserves_modes_mem \\<R>\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>", "have\n    mds\\<^sub>A_def: \"mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\" and  \n    mem\\<^sub>A_def: \"mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\""], ["proof (prove)\nusing this:\n  preserves_modes_mem \\<R>\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C &&&\n    mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C", "unfolding preserves_modes_mem_def2"], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>C.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n     mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C &&&\n    mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C", "by blast+"], ["proof (state)\nthis:\n  mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\n  mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "have \"dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C) x\\<^sub>A = dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C) x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "unfolding mem\\<^sub>A_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A (\\<lambda>x\\<^sub>A. mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))\n     x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "by(rule dma_consistent)"], ["proof (state)\nthis:\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C) x\\<^sub>A =\n  dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C) x\\<^sub>A =\n  dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "by(simp add: mem\\<^sub>A_def)"], ["proof (state)\nthis:\n  dma\\<^sub>A mem\\<^sub>A x\\<^sub>A =\n  dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_\\<R>_dma:\n  assumes preserves: \"preserves_modes_mem \\<R>\"\n  assumes in_\\<R>: \"(\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>C,mds\\<^sub>C,mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  shows  \"dma\\<^sub>A mem\\<^sub>A = (dma\\<^sub>C mem\\<^sub>C \\<circ> var\\<^sub>C_of)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A = dma\\<^sub>C mem\\<^sub>C \\<circ> var\\<^sub>C_of", "unfolding o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A =\n    (\\<lambda>x. dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x))", "using assms"], ["proof (prove)\nusing this:\n  preserves_modes_mem \\<R>\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A mem\\<^sub>A =\n    (\\<lambda>x. dma\\<^sub>C mem\\<^sub>C (var\\<^sub>C_of x))", "by(blast intro: in_\\<R>_dma')"], ["", "definition\n  new_vars_private ::  \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow> bool\"\nwhere\n  \"new_vars_private \\<R> \\<equiv>\n  (\\<forall> c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'. \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<forall>v\\<^sub>C. (mem\\<^sub>1\\<^sub>C' v\\<^sub>C \\<noteq> mem\\<^sub>1\\<^sub>C v\\<^sub>C \\<or> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' v\\<^sub>C < dma\\<^sub>C mem\\<^sub>1\\<^sub>C v\\<^sub>C) \\<and> v\\<^sub>C \\<notin> range var\\<^sub>C_of \\<longrightarrow> v\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<and>\n     (mds\\<^sub>C AsmNoReadOrWrite - (range var\\<^sub>C_of)) \\<subseteq> (mds\\<^sub>C' AsmNoReadOrWrite - (range var\\<^sub>C_of))))\""], ["", "lemma not_less_eq_is_greater_Sec:\n  \"(\\<not> a \\<le> (b::Sec)) = (a > b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> a \\<le> b) = (b < a)", "unfolding less_Sec_def less_eq_Sec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (a = b \\<or> a = Low)) = (b = Low \\<and> a = High)", "using Sec.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = High \\<Longrightarrow> ?P;\n   ?y = Low \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<not> (a = b \\<or> a = Low)) = (b = Low \\<and> a = High)", "by blast"], ["", "lemma doesnt_have_mode:\n  \"(x \\<notin> mds\\<^sub>A_of mds\\<^sub>C m) = (var\\<^sub>C_of x \\<notin> mds\\<^sub>C m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C m) =\n    (var\\<^sub>C_of x \\<notin> mds\\<^sub>C m)", "apply(clarsimp simp: mds\\<^sub>A_of_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                     mds\\<^sub>C m.\n        x \\<noteq> inv var\\<^sub>C_of xa) =\n    (var\\<^sub>C_of x \\<notin> mds\\<^sub>C m)", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                    mds\\<^sub>C m.\n       x \\<noteq> inv var\\<^sub>C_of xa \\<Longrightarrow>\n    var\\<^sub>C_of x \\<notin> mds\\<^sub>C m\n 2. var\\<^sub>C_of x \\<notin> mds\\<^sub>C m \\<Longrightarrow>\n    \\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                    mds\\<^sub>C m.\n       x \\<noteq> inv var\\<^sub>C_of xa", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                             mds\\<^sub>C m.\n                x \\<noteq> inv var\\<^sub>C_of xa;\n     var\\<^sub>C_of x \\<in> mds\\<^sub>C m\\<rbrakk>\n    \\<Longrightarrow> False\n 2. var\\<^sub>C_of x \\<notin> mds\\<^sub>C m \\<Longrightarrow>\n    \\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                    mds\\<^sub>C m.\n       x \\<noteq> inv var\\<^sub>C_of xa", "apply(drule_tac x=\"var\\<^sub>C_of x\" in bspec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. var\\<^sub>C_of x \\<in> mds\\<^sub>C m \\<Longrightarrow>\n    var\\<^sub>C_of x\n    \\<in> {y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter> mds\\<^sub>C m\n 2. \\<lbrakk>var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n     x \\<noteq> inv var\\<^sub>C_of (var\\<^sub>C_of x)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. var\\<^sub>C_of x \\<notin> mds\\<^sub>C m \\<Longrightarrow>\n    \\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                    mds\\<^sub>C m.\n       x \\<noteq> inv var\\<^sub>C_of xa", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>var\\<^sub>C_of x \\<in> mds\\<^sub>C m;\n     x \\<noteq> inv var\\<^sub>C_of (var\\<^sub>C_of x)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. var\\<^sub>C_of x \\<notin> mds\\<^sub>C m \\<Longrightarrow>\n    \\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                    mds\\<^sub>C m.\n       x \\<noteq> inv var\\<^sub>C_of xa", "apply(simp add: inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x \\<notin> mds\\<^sub>C m \\<Longrightarrow>\n    \\<forall>xa\\<in>{y. \\<exists>x. y = var\\<^sub>C_of x} \\<inter>\n                    mds\\<^sub>C m.\n       x \\<noteq> inv var\\<^sub>C_of xa", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>var\\<^sub>C_of (inv var\\<^sub>C_of (var\\<^sub>C_of xaa))\n                \\<notin> mds\\<^sub>C m;\n        var\\<^sub>C_of xaa \\<in> mds\\<^sub>C m;\n        x = inv var\\<^sub>C_of (var\\<^sub>C_of xaa)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add: inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_vars_private_does_the_thing:\n  assumes nice: \"new_vars_private \\<R>\"\n  assumes in_\\<R>\\<^sub>1: \"(\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  assumes in_\\<R>\\<^sub>2: \"(\\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  assumes step\\<^sub>1\\<^sub>C: \"\\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C\"\n  assumes step\\<^sub>2\\<^sub>C: \"\\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C\"\n  assumes low_mds_eq\\<^sub>C: \"conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\"\n  assumes low_mds_eq\\<^sub>A': \"abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C') (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')\" \n  shows \"conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'", "unfolding conc.low_mds_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low \\<and>\n       (x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite) \\<longrightarrow>\n       mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "let ?mem\\<^sub>1\\<^sub>A = \"mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "let ?mem\\<^sub>2\\<^sub>A = \"mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "let ?mem\\<^sub>1\\<^sub>A' = \"mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "let ?mem\\<^sub>2\\<^sub>A' = \"mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "let ?mds\\<^sub>A = \"mds\\<^sub>A_of mds\\<^sub>C\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "let ?mds\\<^sub>A' = \"mds\\<^sub>A_of mds\\<^sub>C'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "fix x\\<^sub>C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "assume is_Low\\<^sub>C': \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low\""], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "assume is_readable\\<^sub>C': \"x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or> x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\""], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x = Low;\n        x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1\\<^sub>C' x = mem\\<^sub>2\\<^sub>C' x", "show \"mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "proof(cases \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<ge> dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and> mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and> mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and> (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow> x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n    \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n    (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n     x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "assume easy: \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<ge> dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and> mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and> mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and> (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow> x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\""], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\n\ngoal (2 subgoals):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n    \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n    (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n     x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "with is_Low\\<^sub>C'"], ["proof (chain)\npicking this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)", "have is_Low\\<^sub>C: \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C = Low\""], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C = Low", "by (simp add: less_eq_Sec_def)"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C = Low\n\ngoal (2 subgoals):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n    \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n    (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n     x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from easy is_readable\\<^sub>C'"], ["proof (chain)\npicking this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "have is_readable\\<^sub>C: \"x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or> x\\<^sub>C \\<notin> mds\\<^sub>C AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n    x\\<^sub>C \\<notin> mds\\<^sub>C AsmNoReadOrWrite", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n    \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n    (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n     x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from is_Low\\<^sub>C is_readable\\<^sub>C low_mds_eq\\<^sub>C"], ["proof (chain)\npicking this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C = Low\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C AsmNoReadOrWrite\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C", "have \"mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C\""], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C = Low\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C AsmNoReadOrWrite\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C", "unfolding conc.low_mds_eq_def"], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C = Low\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C AsmNoReadOrWrite\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x = Low \\<and>\n     (x \\<in> \\<C>\\<^sub>C \\<or>\n      x \\<notin> mds\\<^sub>C AsmNoReadOrWrite) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C x = mem\\<^sub>2\\<^sub>C x\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C\n\ngoal (2 subgoals):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n    \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n    (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n     x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "with easy"], ["proof (chain)\npicking this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C", "show ?thesis"], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n  \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n  (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n   x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite)\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "by metis"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "assume a: \"\\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n       mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n       mem\\<^sub>2\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and> (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow> x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite))\""], ["proof (state)\nthis:\n  \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n          \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n          mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n          mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n          mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n          mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n          (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n           x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite))\n\ngoal (1 subgoal):\n 1. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "hence a_disj: \"(dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C > dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<or>\n       mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq> mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n       mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq> mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<or> (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<and> x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite))\""], ["proof (prove)\nusing this:\n  \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n          \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n          mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n          mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n          mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n          mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n          (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n           x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite))\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n    < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<or>\n    x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<and>\n    x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "using not_less_eq_is_greater_Sec"], ["proof (prove)\nusing this:\n  \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n          \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n          mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n          mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n          mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n          mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n          (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n           x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite))\n  (\\<not> ?a \\<le> ?b) = (?b < ?a)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n    < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n    mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<or>\n    x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<and>\n    x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "by blast"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<or>\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<and>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<not> (dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C\n            \\<le> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<and>\n            mem\\<^sub>1\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<and>\n            mem\\<^sub>2\\<^sub>C' x\\<^sub>C =\n            mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<and>\n            (x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n             x\\<^sub>C\n             \\<in> mds\\<^sub>C' AsmNoReadOrWrite)) \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "show \"mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "proof(cases \"x\\<^sub>C \\<in> range var\\<^sub>C_of\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "assume C_only_var: \"x\\<^sub>C \\<notin> range var\\<^sub>C_of\""], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "with in_\\<R>\\<^sub>1 step\\<^sub>1\\<^sub>C nice"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  new_vars_private \\<R>\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of", "have \"(mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq> mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or> dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C) \\<longrightarrow> x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  new_vars_private \\<R>\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n    dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n    < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n    x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite", "unfolding new_vars_private_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n     c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n         (\\<forall>v\\<^sub>C.\n             (mem\\<^sub>1\\<^sub>C' v\\<^sub>C \\<noteq>\n              mem\\<^sub>1\\<^sub>C v\\<^sub>C \\<or>\n              dma\\<^sub>C mem\\<^sub>1\\<^sub>C' v\\<^sub>C\n              < dma\\<^sub>C mem\\<^sub>1\\<^sub>C v\\<^sub>C) \\<and>\n             v\\<^sub>C \\<notin> range var\\<^sub>C_of \\<longrightarrow>\n             v\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<and>\n         mds\\<^sub>C AsmNoReadOrWrite - range var\\<^sub>C_of\n         \\<subseteq> mds\\<^sub>C' AsmNoReadOrWrite - range var\\<^sub>C_of)\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n    dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n    < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n    x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "moreover"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from C_only_var in_\\<R>\\<^sub>2 step\\<^sub>2\\<^sub>C nice"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  new_vars_private \\<R>", "have \"(mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq> mem\\<^sub>2\\<^sub>C x\\<^sub>C) \\<longrightarrow> x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  new_vars_private \\<R>\n\ngoal (1 subgoal):\n 1. mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n    x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite", "unfolding new_vars_private_def"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n     c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n         (\\<forall>v\\<^sub>C.\n             (mem\\<^sub>1\\<^sub>C' v\\<^sub>C \\<noteq>\n              mem\\<^sub>1\\<^sub>C v\\<^sub>C \\<or>\n              dma\\<^sub>C mem\\<^sub>1\\<^sub>C' v\\<^sub>C\n              < dma\\<^sub>C mem\\<^sub>1\\<^sub>C v\\<^sub>C) \\<and>\n             v\\<^sub>C \\<notin> range var\\<^sub>C_of \\<longrightarrow>\n             v\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<and>\n         mds\\<^sub>C AsmNoReadOrWrite - range var\\<^sub>C_of\n         \\<subseteq> mds\\<^sub>C' AsmNoReadOrWrite - range var\\<^sub>C_of)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n    mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n    x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "moreover"], ["proof (state)\nthis:\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from C_only_var in_\\<R>\\<^sub>1 step\\<^sub>1\\<^sub>C nice"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  new_vars_private \\<R>", "have \"x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow> x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  new_vars_private \\<R>\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n    x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite", "unfolding new_vars_private_def"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n     c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n         (\\<forall>v\\<^sub>C.\n             (mem\\<^sub>1\\<^sub>C' v\\<^sub>C \\<noteq>\n              mem\\<^sub>1\\<^sub>C v\\<^sub>C \\<or>\n              dma\\<^sub>C mem\\<^sub>1\\<^sub>C' v\\<^sub>C\n              < dma\\<^sub>C mem\\<^sub>1\\<^sub>C v\\<^sub>C) \\<and>\n             v\\<^sub>C \\<notin> range var\\<^sub>C_of \\<longrightarrow>\n             v\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<and>\n         mds\\<^sub>C AsmNoReadOrWrite - range var\\<^sub>C_of\n         \\<subseteq> mds\\<^sub>C' AsmNoReadOrWrite - range var\\<^sub>C_of)\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n    x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "moreover"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from C_only_var is_readable\\<^sub>C'"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "have \"x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "using control_vars_are_A_vars"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n  \\<C>\\<^sub>C = var\\<^sub>C_of ` \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "ultimately"], ["proof (chain)\npicking this:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "have False"], ["proof (prove)\nusing this:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. False", "using a_disj"], ["proof (prove)\nusing this:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<longrightarrow>\n  x\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C\n  < dma\\<^sub>C mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C \\<or>\n  mem\\<^sub>2\\<^sub>C' x\\<^sub>C \\<noteq>\n  mem\\<^sub>2\\<^sub>C x\\<^sub>C \\<or>\n  x\\<^sub>C \\<in> mds\\<^sub>C AsmNoReadOrWrite \\<and>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "assume in_val\\<^sub>C_of: \"x\\<^sub>C \\<in> range var\\<^sub>C_of\""], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from this"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<in> range var\\<^sub>C_of", "obtain x\\<^sub>A where x\\<^sub>C_def: \"x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. (\\<And>x\\<^sub>A.\n        x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from is_Low\\<^sub>C'"], ["proof (chain)\npicking this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low", "have is_Low\\<^sub>A': \"dma\\<^sub>A ?mem\\<^sub>1\\<^sub>A' x\\<^sub>A = Low\""], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x\\<^sub>A = Low", "using dma_consistent"], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' x\\<^sub>C = Low\n  dma\\<^sub>A (\\<lambda>x\\<^sub>A. ?mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x\\<^sub>A = Low", "unfolding mem\\<^sub>A_of_def x\\<^sub>C_def"], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C' (var\\<^sub>C_of x\\<^sub>A) = Low\n  dma\\<^sub>A (\\<lambda>x\\<^sub>A. ?mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     (\\<lambda>x\\<^sub>A. mem\\<^sub>1\\<^sub>C' (var\\<^sub>C_of x\\<^sub>A))\n     x\\<^sub>A =\n    Low", "by force"], ["proof (state)\nthis:\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x\\<^sub>A = Low\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "from is_readable\\<^sub>C'"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite", "have is_readable\\<^sub>A': \"x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or> x\\<^sub>A \\<notin> ?mds\\<^sub>A' AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or>\n    x\\<^sub>A \\<notin> mds\\<^sub>A_of mds\\<^sub>C' AsmNoReadOrWrite", "using control_vars_are_A_vars x\\<^sub>C_def doesnt_have_mode[symmetric] var\\<^sub>C_of_inj inj_image_mem_iff"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C \\<or>\n  x\\<^sub>C \\<notin> mds\\<^sub>C' AsmNoReadOrWrite\n  \\<C>\\<^sub>C = var\\<^sub>C_of ` \\<C>\\<^sub>A\n  x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\n  (var\\<^sub>C_of ?x \\<notin> ?mds\\<^sub>C ?m) =\n  (?x \\<notin> mds\\<^sub>A_of ?mds\\<^sub>C ?m)\n  inj var\\<^sub>C_of\n  inj ?f \\<Longrightarrow> (?f ?a \\<in> ?f ` ?A) = (?a \\<in> ?A)\n\ngoal (1 subgoal):\n 1. x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or>\n    x\\<^sub>A \\<notin> mds\\<^sub>A_of mds\\<^sub>C' AsmNoReadOrWrite", "by fast"], ["proof (state)\nthis:\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or>\n  x\\<^sub>A \\<notin> mds\\<^sub>A_of mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "with is_Low\\<^sub>A' low_mds_eq\\<^sub>A'"], ["proof (chain)\npicking this:\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x\\<^sub>A = Low\n  abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n   (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n   (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or>\n  x\\<^sub>A \\<notin> mds\\<^sub>A_of mds\\<^sub>C' AsmNoReadOrWrite", "have x\\<^sub>A_eq': \"?mem\\<^sub>1\\<^sub>A' x\\<^sub>A = ?mem\\<^sub>2\\<^sub>A' x\\<^sub>A\""], ["proof (prove)\nusing this:\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x\\<^sub>A = Low\n  abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n   (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n   (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or>\n  x\\<^sub>A \\<notin> mds\\<^sub>A_of mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' x\\<^sub>A =\n    mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C' x\\<^sub>A", "unfolding abs.low_mds_eq_def"], ["proof (prove)\nusing this:\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x\\<^sub>A = Low\n  \\<forall>x.\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C') x = Low \\<and>\n     (x \\<in> \\<C>\\<^sub>A \\<or>\n      x \\<notin> mds\\<^sub>A_of mds\\<^sub>C'\n                  AsmNoReadOrWrite) \\<longrightarrow>\n     mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' x =\n     mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C' x\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<or>\n  x\\<^sub>A \\<notin> mds\\<^sub>A_of mds\\<^sub>C' AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' x\\<^sub>A =\n    mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C' x\\<^sub>A", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' x\\<^sub>A =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C' x\\<^sub>A\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "thus ?thesis"], ["proof (prove)\nusing this:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' x\\<^sub>A =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C' x\\<^sub>A\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C", "by(simp add: mem\\<^sub>A_of_def x\\<^sub>C_def)"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C' x\\<^sub>C = mem\\<^sub>2\\<^sub>C' x\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Perhaps surprisingly, we don't necessarily \n  care whether the refinement preserves\n  termination or divergence behaviour from the source to the target program.\n  It can do whatever it likes, so long as it transforms two source programs\n  that are low bisimilar (i.e. perform the same low actions at the \n  same time), into two target ones that perform the same low actions at the\n  same time.\n\n  Having the concrete step correspond to zero abstract ones is like expanding\n  abstract code out (think e.g. of side-effect free expression evaluation).\n  Having the concrete step correspond to more than one abstract step is\n  like optimising out abstract code. But importantly, the optimisation needs\n  to look the same for abstract-bisimilar code.\n\n  Additionally, we allow the instantiation of this theory to supply\n  an arbitrary predicate that can be used to restrict our consideration to\n  pairs of concrete steps that correspond to each other in terms of progress.\n  This is particularly important for distinguishing between multiple concrete\n  steps derived from the expansion of a single abstract step.\n\\<close>"], ["", "definition\n  secure_refinement :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val) LocalConf rel \\<Rightarrow> ('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow> \n                          ('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf rel \\<Rightarrow> bool\"\nwhere\n  \"secure_refinement \\<R>\\<^sub>A \\<R> P \\<equiv>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall> c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'. \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<exists> n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'. abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'. \n         (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A \\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n         (\\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n         (\\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> P \\<and>\n         abs.neval \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A  \\<longrightarrow>\n           (\\<exists> c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C \\<and>\n                   (\\<langle> c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> P)))))\""], ["", "lemma preserves_modes_memD:\n  \"\\<lbrakk>preserves_modes_mem \\<R>; (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\\<rbrakk> \\<Longrightarrow> mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and> mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preserves_modes_mem \\<R>;\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C", "using preserves_modes_mem_def2"], ["proof (prove)\nusing this:\n  preserves_modes_mem ?\\<R> =\n  (\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n      mem\\<^sub>C.\n      (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> ?\\<R> \\<longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>preserves_modes_mem \\<R>;\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C \\<and>\n                      mds\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C", "by blast"], ["", "lemma secure_refinement_def2:\n  \"secure_refinement \\<R>\\<^sub>A \\<R> P \\<equiv>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall> c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'. \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<exists> n c\\<^sub>1\\<^sub>A'. abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>A \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'. \n         (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n         (\\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n         (\\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C, \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C) \\<in> P \\<and>\n         abs.neval \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A  \\<longrightarrow>\n           (\\<exists> c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C \\<and>\n                   (\\<langle> c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> P)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure_refinement \\<R>\\<^sub>A \\<R> P \\<equiv>\n    closed_others \\<R> \\<and>\n    preserves_modes_mem \\<R> \\<and>\n    new_vars_private \\<R> \\<and>\n    conc.closed_glob_consistent P \\<and>\n    (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P)))))", "apply(rule eq_reflection)"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure_refinement \\<R>\\<^sub>A \\<R> P =\n    (closed_others \\<R> \\<and>\n     preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n         mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>A_of\n                         mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                     mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P))))))", "unfolding secure_refinement_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (closed_others \\<R> \\<and>\n     preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n         c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                 mem\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                     c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                     c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P)))))) =\n    (closed_others \\<R> \\<and>\n     preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n         mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>A_of\n                         mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                     mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P))))))", "apply(rule conj_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. closed_others \\<R> = closed_others \\<R>\n 2. closed_others \\<R> \\<Longrightarrow>\n    (preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n         c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                 mem\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                     c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                     c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P)))))) =\n    (preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n         mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>A_of\n                         mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                     mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P))))))", "apply(fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_others \\<R> \\<Longrightarrow>\n    (preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n         c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                 mem\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                     c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                     c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P)))))) =\n    (preserves_modes_mem \\<R> \\<and>\n     new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n         mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>A_of\n                         mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                     mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n             mds\\<^sub>C, mem\\<^sub>A_of\n                           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P))))))", "apply(rule conj_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. closed_others \\<R> \\<Longrightarrow>\n    preserves_modes_mem \\<R> = preserves_modes_mem \\<R>\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>\\<rbrakk>\n    \\<Longrightarrow> (new_vars_private \\<R> \\<and>\n                       conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                           mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                           mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                   mem\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P)))))) =\n                      (new_vars_private \\<R> \\<and>\n                       conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C\n                           mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                   mds\\<^sub>C, mem\\<^sub>A_of\n                                 mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P))))))", "apply(fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>\\<rbrakk>\n    \\<Longrightarrow> (new_vars_private \\<R> \\<and>\n                       conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                           mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                           mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                   mem\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P)))))) =\n                      (new_vars_private \\<R> \\<and>\n                       conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C\n                           mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                   mds\\<^sub>C, mem\\<^sub>A_of\n                                 mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P))))))", "apply(rule conj_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>\\<rbrakk>\n    \\<Longrightarrow> new_vars_private \\<R> = new_vars_private \\<R>\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>\\<rbrakk>\n    \\<Longrightarrow> (conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                           mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                           mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                   mem\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P)))))) =\n                      (conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C\n                           mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                   mds\\<^sub>C, mem\\<^sub>A_of\n                                 mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P))))))", "apply(fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>\\<rbrakk>\n    \\<Longrightarrow> (conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                           mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                           mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                   mem\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P)))))) =\n                      (conc.closed_glob_consistent P \\<and>\n                       (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C\n                           mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n                           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                   mds\\<^sub>C, mem\\<^sub>A_of\n                                 mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<longrightarrow>\n                           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                               mem\\<^sub>1\\<^sub>C'.\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                                   abs.neval\n                                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                   \\<in> \\<R> \\<and>\n                                   (\\<forall>c\\<^sub>2\\<^sub>A\n c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n mem\\<^sub>2\\<^sub>A'.\n (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n \\<in> \\<R>\\<^sub>A \\<and>\n (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> \\<R> \\<and>\n (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n \\<in> P \\<and>\n abs.neval\n  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                               mds\\<^sub>C, mem\\<^sub>A_of\n       mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P))))))", "apply(rule conj_cong, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                          mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                          mem\\<^sub>1\\<^sub>C.\n                          (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                          \\<in> \\<R> \\<longrightarrow>\n                          (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                              mem\\<^sub>1\\<^sub>C'.\n                              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                              \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                              (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                  mem\\<^sub>1\\<^sub>A'.\n                                  abs.neval\n                                   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                  \\<in> \\<R> \\<and>\n                                  (\\<forall>c\\<^sub>2\\<^sub>A\nmem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\nmem\\<^sub>2\\<^sub>A'.\n(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n\\<in> \\<R>\\<^sub>A \\<and>\n(\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n\\<in> \\<R> \\<and>\n(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n\\<in> P \\<and>\nabs.neval\n \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n(\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P))))) =\n                      (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C\n                          mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n                          (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                  mds\\<^sub>C, mem\\<^sub>A_of\n                                mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                          \\<in> \\<R> \\<longrightarrow>\n                          (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                              mem\\<^sub>1\\<^sub>C'.\n                              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                              \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                              (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                                  abs.neval\n                                   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                          mds\\<^sub>C, mem\\<^sub>A_of\n  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                                   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                             mds\\<^sub>C', mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                                  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                                   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                  \\<in> \\<R> \\<and>\n                                  (\\<forall>c\\<^sub>2\\<^sub>A\nc\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\nmem\\<^sub>2\\<^sub>A'.\n(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                              mds\\<^sub>C, mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                              mds\\<^sub>C, mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n\\<in> \\<R>\\<^sub>A \\<and>\n(\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                              mds\\<^sub>C, mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n\\<in> \\<R> \\<and>\n(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n\\<in> P \\<and>\nabs.neval\n \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                              mds\\<^sub>C, mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n(\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P)))))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                mem\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                    c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C\n                         mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                 mds\\<^sub>C, mem\\<^sub>A_of\n                               mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                         mds\\<^sub>C, mem\\<^sub>A_of\n mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                          mds\\<^sub>C', mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                     c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                             mds\\<^sub>C, mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                             mds\\<^sub>C, mem\\<^sub>A_of\n     mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                             mds\\<^sub>C, mem\\<^sub>A_of\n     mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                             mds\\<^sub>C, mem\\<^sub>A_of\n     mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                         mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                         mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                 mem\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))", "apply(intro allI conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n       mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                       mds\\<^sub>C', mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                     mds\\<^sub>C', mem\\<^sub>A_of\n                                    mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                             mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                         mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                         mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                 mem\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))", "apply((drule spec)+,erule (1) impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n       mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n               abs.neval\n                \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                   c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                   mem\\<^sub>2\\<^sub>A'.\n                   (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                   \\<in> \\<R>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> P \\<and>\n                   abs.neval\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                   (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> P)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                       mds\\<^sub>C', mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                     mds\\<^sub>C', mem\\<^sub>A_of\n                                    mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                             mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                         mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                         mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                 mem\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))", "apply((drule spec)+,erule (1) impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n       mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n           abs.neval\n            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n   mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n               mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n               (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n               \\<in> \\<R>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> P \\<and>\n               abs.neval\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n               (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> P))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                       mds\\<^sub>C', mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                     mds\\<^sub>C', mem\\<^sub>A_of\n                                    mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                             mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                         mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                         mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                 mem\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))", "using preserves_modes_memD"], ["proof (prove)\nusing this:\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n       mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n           abs.neval\n            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n   mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n               mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n               (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n               \\<in> \\<R>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> P \\<and>\n               abs.neval\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n               (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> P))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                       mds\\<^sub>C', mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                     mds\\<^sub>C', mem\\<^sub>A_of\n                                    mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                             mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                         mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                         mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                 mem\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     new_vars_private \\<R>; conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n        mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n           mds\\<^sub>C', mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                    mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of\n                          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n            mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A\n                         mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n                         mem\\<^sub>1\\<^sub>C.\n                         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<longrightarrow>\n                         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C'\n                             mem\\<^sub>1\\<^sub>C'.\n                             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                                 mem\\<^sub>1\\<^sub>A'.\n                                 abs.neval\n                                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<forall>c\\<^sub>2\\<^sub>A\n                                     mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                                     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                     mem\\<^sub>2\\<^sub>A'.\n                                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                     \\<in> \\<R>\\<^sub>A \\<and>\n                                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> \\<R> \\<and>\n                                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                     \\<in> P \\<and>\n                                     abs.neval\n\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\nn \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                     (\\<exists>c\\<^sub>2\\<^sub>C'\n   mem\\<^sub>2\\<^sub>C'.\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n   \\<in> P))))", "apply(intro allI conjI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n           mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n   mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n              mds\\<^sub>C', mem\\<^sub>A_of\n                             mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                       mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                    mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply(frule (1) preserves_modes_memD, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n           mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n   mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n              mds\\<^sub>C', mem\\<^sub>A_of\n                             mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>A_of\n                           mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                       mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n               mds\\<^sub>C, mem\\<^sub>A_of\n                             mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                    mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply((drule spec)+,erule (1) impE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>n c\\<^sub>1\\<^sub>A'.\n               abs.neval\n                \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>A_of\n                         mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n        mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                   mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                   mem\\<^sub>2\\<^sub>A'.\n                   (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                   \\<in> \\<R>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> P \\<and>\n                   abs.neval\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n           mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n              mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                   (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> P)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply((drule spec)+,erule (1) impE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<exists>n c\\<^sub>1\\<^sub>A'.\n           abs.neval\n            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n   mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n      mds\\<^sub>C', mem\\<^sub>A_of\n                     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n    mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n               c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n               (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n               \\<in> \\<R>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> P \\<and>\n               abs.neval\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n               (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> P))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "using preserves_modes_memD"], ["proof (prove)\nusing this:\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<exists>n c\\<^sub>1\\<^sub>A'.\n           abs.neval\n            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n   mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n      mds\\<^sub>C', mem\\<^sub>A_of\n                     mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n    mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n               c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n               (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n               \\<in> \\<R>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> P \\<and>\n               abs.neval\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n       mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n          mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n               (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> P))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                    mds\\<^sub>C, mem\\<^sub>A_of\n                                  mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>A_of\nmem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                        mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma extra_vars_are_not_control_vars:\n  \"x \\<notin> range var\\<^sub>C_of \\<Longrightarrow> x \\<notin> \\<C>\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    x \\<notin> \\<C>\\<^sub>C", "proof(erule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> \\<C>\\<^sub>C \\<Longrightarrow> x \\<in> range var\\<^sub>C_of", "assume \"x \\<in> \\<C>\\<^sub>C\""], ["proof (state)\nthis:\n  x \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. x \\<in> \\<C>\\<^sub>C \\<Longrightarrow> x \\<in> range var\\<^sub>C_of", "from this"], ["proof (chain)\npicking this:\n  x \\<in> \\<C>\\<^sub>C", "obtain x\\<^sub>A where \"x = var\\<^sub>C_of x\\<^sub>A\""], ["proof (prove)\nusing this:\n  x \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>x\\<^sub>A.\n        x = var\\<^sub>C_of x\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using control_vars_are_A_vars"], ["proof (prove)\nusing this:\n  x \\<in> \\<C>\\<^sub>C\n  \\<C>\\<^sub>C = var\\<^sub>C_of ` \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>x\\<^sub>A.\n        x = var\\<^sub>C_of x\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = var\\<^sub>C_of x\\<^sub>A\n\ngoal (1 subgoal):\n 1. x \\<in> \\<C>\\<^sub>C \\<Longrightarrow> x \\<in> range var\\<^sub>C_of", "thus \"x \\<in> range var\\<^sub>C_of\""], ["proof (prove)\nusing this:\n  x = var\\<^sub>C_of x\\<^sub>A\n\ngoal (1 subgoal):\n 1. x \\<in> range var\\<^sub>C_of", "by blast"], ["proof (state)\nthis:\n  x \\<in> range var\\<^sub>C_of\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  R\\<^sub>C_of :: \n \"((('Com\\<^sub>A \\<times> (Mode \\<Rightarrow> 'Var\\<^sub>A set)) \\<times> ('Var\\<^sub>A \\<Rightarrow> 'Val)) \\<times>\n    ('Com\\<^sub>A \\<times> (Mode \\<Rightarrow> 'Var\\<^sub>A set)) \\<times> ('Var\\<^sub>A \\<Rightarrow> 'Val)) set \\<Rightarrow> \n  ('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow>\n  ((('Com\\<^sub>C \\<times> (Mode \\<Rightarrow> 'Var\\<^sub>C set)) \\<times> ('Var\\<^sub>C \\<Rightarrow> 'Val)) \\<times>\n    ('Com\\<^sub>C \\<times> (Mode \\<Rightarrow> 'Var\\<^sub>C set)) \\<times> ('Var\\<^sub>C \\<Rightarrow> 'Val)) set \\<Rightarrow>\n  ((('Com\\<^sub>C \\<times> (Mode \\<Rightarrow> 'Var\\<^sub>C set)) \\<times> ('Var\\<^sub>C \\<Rightarrow> 'Val)) \\<times>\n    ('Com\\<^sub>C \\<times> (Mode \\<Rightarrow> 'Var\\<^sub>C set)) \\<times> ('Var\\<^sub>C \\<Rightarrow> 'Val)) set\"\nwhere\n  \"R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<equiv> {(x,y). \\<exists>x\\<^sub>A y\\<^sub>A. (x\\<^sub>A,x) \\<in> \\<R> \\<and> (y\\<^sub>A,y) \\<in> \\<R> \\<and> (x\\<^sub>A,y\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n     snd (fst x) = snd (fst y) \\<comment> \\<open>TODO: annoying to have to say\\<close> \\<and>\n     conc.low_mds_eq (snd (fst x)) (snd x) (snd y) \\<and>\n     (x,y) \\<in> P}\""], ["", "lemma abs_low_mds_eq_dma\\<^sub>C_eq:\n  assumes \"abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)  (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)\"\n  shows \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C", "proof(rule conc.dma_\\<C>, rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<C>\\<^sub>C \\<Longrightarrow>\n       mem\\<^sub>1\\<^sub>C x = mem\\<^sub>2\\<^sub>C x", "fix x\\<^sub>C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<C>\\<^sub>C \\<Longrightarrow>\n       mem\\<^sub>1\\<^sub>C x = mem\\<^sub>2\\<^sub>C x", "assume \"x\\<^sub>C \\<in> \\<C>\\<^sub>C\""], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<C>\\<^sub>C \\<Longrightarrow>\n       mem\\<^sub>1\\<^sub>C x = mem\\<^sub>2\\<^sub>C x", "from this"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C", "obtain x\\<^sub>A where \"var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C\" and \"x\\<^sub>A \\<in> \\<C>\\<^sub>A\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>x\\<^sub>A.\n        \\<lbrakk>var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C;\n         x\\<^sub>A \\<in> \\<C>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using control_vars_are_A_vars"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> \\<C>\\<^sub>C\n  \\<C>\\<^sub>C = var\\<^sub>C_of ` \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>x\\<^sub>A.\n        \\<lbrakk>var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C;\n         x\\<^sub>A \\<in> \\<C>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<C>\\<^sub>C \\<Longrightarrow>\n       mem\\<^sub>1\\<^sub>C x = mem\\<^sub>2\\<^sub>C x", "from assms \\<open>x\\<^sub>A \\<in> \\<C>\\<^sub>A\\<close>"], ["proof (chain)\npicking this:\n  abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n   (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A", "have \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A = (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) x\\<^sub>A\""], ["proof (prove)\nusing this:\n  abs.low_mds_eq (mds\\<^sub>A_of mds) (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n   (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x\\<^sub>A =\n    mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\\<^sub>A", "unfolding abs.low_mds_eq_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x = Low \\<and>\n     (x \\<in> \\<C>\\<^sub>A \\<or>\n      x \\<notin> mds\\<^sub>A_of mds AsmNoReadOrWrite) \\<longrightarrow>\n     mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x =\n     mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x\\<^sub>A =\n    mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\\<^sub>A", "using abs.\\<C>_Low"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x = Low \\<and>\n     (x \\<in> \\<C>\\<^sub>A \\<or>\n      x \\<notin> mds\\<^sub>A_of mds AsmNoReadOrWrite) \\<longrightarrow>\n     mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x =\n     mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A\n  \\<forall>x\\<in>\\<C>\\<^sub>A. dma\\<^sub>A ?mem x = Low\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x\\<^sub>A =\n    mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\\<^sub>A", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x\\<^sub>A =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<C>\\<^sub>C \\<Longrightarrow>\n       mem\\<^sub>1\\<^sub>C x = mem\\<^sub>2\\<^sub>C x", "thus \"(mem\\<^sub>1\\<^sub>C x\\<^sub>C) = (mem\\<^sub>2\\<^sub>C x\\<^sub>C)\""], ["proof (prove)\nusing this:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x\\<^sub>A =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\\<^sub>A\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C", "using \\<open>var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C\\<close>"], ["proof (prove)\nusing this:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x\\<^sub>A =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x\\<^sub>A\n  var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C", "unfolding mem\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x\\<^sub>A) =\n  mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n  var\\<^sub>C_of x\\<^sub>A = x\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C x\\<^sub>C = mem\\<^sub>2\\<^sub>C x\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R\\<^sub>C_ofD:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes in_R: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\"\n  shows\n   \"(\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A) \\<and>\n    (mds\\<^sub>C' = mds\\<^sub>C) \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A) \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n     mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A) \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n     mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "have \\<R>_preserves_modes_mem: \"preserves_modes_mem \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "using rr"], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "by blast"], ["proof (state)\nthis:\n  preserves_modes_mem \\<R>\n\ngoal (1 subgoal):\n 1. (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A) \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n     mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "from in_R"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "obtain c\\<^sub>1\\<^sub>A mds\\<^sub>1\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A mds\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A where\n  in_\\<R>\\<^sub>1: \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n  in_\\<R>\\<^sub>2: \"(\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n  in_\\<R>\\<^sub>A: \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\" and\n  pred_holds: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\" and\n  mds_eq: \"mds\\<^sub>C = mds\\<^sub>C'\" and\n  mds_eq: \"conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>1\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>2\\<^sub>A mds\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A.\n        \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>;\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> P;\n         mds\\<^sub>C = mds\\<^sub>C';\n         conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n          mem\\<^sub>2\\<^sub>C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding R\\<^sub>C_of_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> {(x, y).\n         \\<exists>x\\<^sub>A y\\<^sub>A.\n            (x\\<^sub>A, x) \\<in> \\<R> \\<and>\n            (y\\<^sub>A, y) \\<in> \\<R> \\<and>\n            (x\\<^sub>A, y\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n            snd (fst x) = snd (fst y) \\<and>\n            conc.low_mds_eq (snd (fst x)) (snd x) (snd y) \\<and>\n            (x, y) \\<in> P}\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>1\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>2\\<^sub>A mds\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A.\n        \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>;\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> P;\n         mds\\<^sub>C = mds\\<^sub>C';\n         conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n          mem\\<^sub>2\\<^sub>C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force+"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  mds\\<^sub>C = mds\\<^sub>C'\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A) \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n     mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "from this \\<R>_preserves_modes_mem[simplified preserves_modes_mem_def2, rule_format, OF in_\\<R>\\<^sub>1] \\<R>_preserves_modes_mem[simplified preserves_modes_mem_def2, rule_format, OF in_\\<R>\\<^sub>2]"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  mds\\<^sub>C = mds\\<^sub>C'\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\n  mem\\<^sub>1\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<and>\n  mds\\<^sub>1\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\n  mem\\<^sub>2\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<and>\n  mds\\<^sub>2\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>1\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>2\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  mds\\<^sub>C = mds\\<^sub>C'\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\n  mem\\<^sub>1\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C \\<and>\n  mds\\<^sub>1\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C\n  mem\\<^sub>2\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C \\<and>\n  mds\\<^sub>2\\<^sub>A = mds\\<^sub>A_of mds\\<^sub>C'\n\ngoal (1 subgoal):\n 1. (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A) \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n     mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "by blast"], ["proof (state)\nthis:\n  (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<and>\n      (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<and>\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A) \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R\\<^sub>C_ofI:\n   \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<Longrightarrow>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P \\<Longrightarrow>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n     mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n             \\<in> \\<R>;\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>;\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A;\n     conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C;\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                      \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "unfolding R\\<^sub>C_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n     mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n             \\<in> \\<R>;\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>;\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A;\n     conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C;\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                      \\<in> {(x, y).\n                             \\<exists>x\\<^sub>A y\\<^sub>A.\n                                (x\\<^sub>A, x) \\<in> \\<R> \\<and>\n                                (y\\<^sub>A, y) \\<in> \\<R> \\<and>\n                                (x\\<^sub>A, y\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                snd (fst x) = snd (fst y) \\<and>\n                                conc.low_mds_eq (snd (fst x)) (snd x)\n                                 (snd y) \\<and>\n                                (x, y) \\<in> P}", "by fastforce"], ["", "lemma R\\<^sub>C_of_sym:\n  assumes \"sym \\<R>\\<^sub>A\"\n  assumes P_sym: \"sym P\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes mm: \n    \"\\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mds mem\\<^sub>2. (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n    abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\"\n  shows \"sym (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)", "proof(rule symI, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       (\\<langle>a, b, ba\\<rangle>\\<^sub>C,\n        \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       (\\<langle>aa, bb, bc\\<rangle>\\<^sub>C,\n        \\<langle>a, b, ba\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "fix c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C  c\\<^sub>2\\<^sub>C mds\\<^sub>C' mem\\<^sub>2\\<^sub>C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       (\\<langle>a, b, ba\\<rangle>\\<^sub>C,\n        \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       (\\<langle>aa, bb, bc\\<rangle>\\<^sub>C,\n        \\<langle>a, b, ba\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "assume in_R\\<^sub>C_of: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\""], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       (\\<langle>a, b, ba\\<rangle>\\<^sub>C,\n        \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       (\\<langle>aa, bb, bc\\<rangle>\\<^sub>C,\n        \\<langle>a, b, ba\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from in_R\\<^sub>C_of"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "obtain c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A where\n  junk:\n  \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n    (mds\\<^sub>C' = mds\\<^sub>C) \\<and> conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A \\<and>\n        mds\\<^sub>C' = mds\\<^sub>C \\<and>\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n         mem\\<^sub>2\\<^sub>C \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using rr R\\<^sub>C_ofD"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  \\<lbrakk>secure_refinement ?\\<R>\\<^sub>A ?\\<R> ?P;\n   (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C', ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> R\\<^sub>C_of ?\\<R>\\<^sub>A ?\\<R> ?P\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n                        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                ?mds\\<^sub>C, mem\\<^sub>A_of\n                               ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                         \\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                        \\<in> ?\\<R> \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                ?mds\\<^sub>C, mem\\<^sub>A_of\n                               ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                         \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                        \\<in> ?\\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                ?mds\\<^sub>C, mem\\<^sub>A_of\n                               ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                ?mds\\<^sub>C, mem\\<^sub>A_of\n                               ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                        \\<in> ?\\<R>\\<^sub>A) \\<and>\n                    ?mds\\<^sub>C' = ?mds\\<^sub>C \\<and>\n                    conc.low_mds_eq ?mds\\<^sub>C ?mem\\<^sub>1\\<^sub>C\n                     ?mem\\<^sub>2\\<^sub>C \\<and>\n                    (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C', ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n        \\<in> \\<R>\\<^sub>A \\<and>\n        mds\\<^sub>C' = mds\\<^sub>C \\<and>\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n         mem\\<^sub>2\\<^sub>C \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce+"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       (\\<langle>a, b, ba\\<rangle>\\<^sub>C,\n        \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       (\\<langle>aa, bb, bc\\<rangle>\\<^sub>C,\n        \\<langle>a, b, ba\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "hence dma_eq: \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C", "using abs_low_mds_eq_dma\\<^sub>C_eq[OF mm]"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  (\\<langle>?c\\<^sub>16, mds\\<^sub>A_of\n                          ?mds, mem\\<^sub>A_of\n                                 ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>?c\\<^sub>26, mds\\<^sub>A_of\n                          ?mds, mem\\<^sub>A_of\n                                 ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n  dma\\<^sub>C ?mem\\<^sub>1\\<^sub>C = dma\\<^sub>C ?mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       (\\<langle>a, b, ba\\<rangle>\\<^sub>C,\n        \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       (\\<langle>aa, bb, bc\\<rangle>\\<^sub>C,\n        \\<langle>a, b, ba\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "with junk"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C", "have junk':\n  \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n    (mds\\<^sub>C' = mds\\<^sub>C) \\<and>\n   conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C mem\\<^sub>1\\<^sub>C \\<and>\n   (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n     mem\\<^sub>1\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "using \\<open>sym \\<R>\\<^sub>A\\<close> P_sym"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n  sym \\<R>\\<^sub>A\n  sym P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n     mem\\<^sub>1\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "unfolding sym_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n  \\<forall>x y.\n     (x, y) \\<in> \\<R>\\<^sub>A \\<longrightarrow> (y, x) \\<in> \\<R>\\<^sub>A\n  \\<forall>x y. (x, y) \\<in> P \\<longrightarrow> (y, x) \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n     mem\\<^sub>1\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "using conc.low_mds_eq_sym"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n  \\<forall>x y.\n     (x, y) \\<in> \\<R>\\<^sub>A \\<longrightarrow> (y, x) \\<in> \\<R>\\<^sub>A\n  \\<forall>x y. (x, y) \\<in> P \\<longrightarrow> (y, x) \\<in> P\n  conc.low_mds_eq ?mds ?mem\\<^sub>1 ?mem\\<^sub>2 \\<Longrightarrow>\n  conc.low_mds_eq ?mds ?mem\\<^sub>2 ?mem\\<^sub>1\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A \\<and>\n    mds\\<^sub>C' = mds\\<^sub>C \\<and>\n    conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n     mem\\<^sub>1\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "by metis"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n   mem\\<^sub>1\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       (\\<langle>a, b, ba\\<rangle>\\<^sub>C,\n        \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       (\\<langle>aa, bb, bc\\<rangle>\\<^sub>C,\n        \\<langle>a, b, ba\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "thus \"(\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n   mem\\<^sub>1\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "using R\\<^sub>C_ofI"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A \\<and>\n  mds\\<^sub>C' = mds\\<^sub>C \\<and>\n  conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>2\\<^sub>C\n   mem\\<^sub>1\\<^sub>C \\<and>\n  (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<lbrakk>(\\<langle>?c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n    ?mds\\<^sub>C, mem\\<^sub>A_of ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n            \\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> ?\\<R>;\n   (\\<langle>?c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>;\n   (\\<langle>?c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n   \\<in> ?\\<R>\\<^sub>A;\n   conc.low_mds_eq ?mds\\<^sub>C ?mem\\<^sub>1\\<^sub>C ?mem\\<^sub>2\\<^sub>C;\n   (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> R\\<^sub>C_of ?\\<R>\\<^sub>A ?\\<R> ?P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "by auto"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C', mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R\\<^sub>C_of_simp:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  shows \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P =\n   ((\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A) \\<and>\n    conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P) =\n    ((\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A) \\<and>\n     conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n      mem\\<^sub>2\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P)", "using assms"], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. ((\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P) =\n    ((\\<exists>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A) \\<and>\n     conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n      mem\\<^sub>2\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P)", "by(blast dest: R\\<^sub>C_ofD intro: R\\<^sub>C_ofI)"], ["", "definition\n  A\\<^sub>A_of :: \"('Var\\<^sub>C,'Val) adaptation \\<Rightarrow> ('Var\\<^sub>A,'Val) adaptation\"\nwhere\n  \"A\\<^sub>A_of A \\<equiv> \\<lambda>x\\<^sub>A. case A (var\\<^sub>C_of x\\<^sub>A) of None \\<Rightarrow> None |\n                  Some (v,v') \\<Rightarrow> Some (v,v')\""], ["", "lemma var_writable\\<^sub>A:\n  \"\\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x) \\<Longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written mds\\<^sub>C\n            (var\\<^sub>C_of x) \\<Longrightarrow>\n    \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x", "apply(simp add: var_asm_not_written_def mds\\<^sub>A_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoWrite \\<and>\n    var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<Longrightarrow>\n    x \\<notin> inv var\\<^sub>C_of `\n               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C AsmNoWrite) \\<and>\n    x \\<notin> inv var\\<^sub>C_of `\n               (range var\\<^sub>C_of \\<inter> mds\\<^sub>C AsmNoReadOrWrite)", "apply(auto simp: inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma A\\<^sub>A_asm_mem:\n  assumes A\\<^sub>C_asm_mem: \"\\<forall>x. case A\\<^sub>C x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or> mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\"\n  shows \"case (A\\<^sub>A_of A\\<^sub>C) x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x \\<noteq> v \\<or> (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) x \\<noteq> v' \\<longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case A\\<^sub>A_of A\\<^sub>C x of None \\<Rightarrow> True\n    | Some (v, v') \\<Rightarrow>\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n        \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x", "apply(split option.splits, simp, intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "fix v v'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "assume A\\<^sub>A_not_None: \"A\\<^sub>A_of A\\<^sub>C x = Some (v, v')\""], ["proof (state)\nthis:\n  A\\<^sub>A_of A\\<^sub>C x = Some (v, v')\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "assume A\\<^sub>A_updates_x: \"mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = v \\<longrightarrow> mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v'\""], ["proof (state)\nthis:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = v \\<longrightarrow>\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "from A\\<^sub>A_not_None"], ["proof (chain)\npicking this:\n  A\\<^sub>A_of A\\<^sub>C x = Some (v, v')", "have\n      A\\<^sub>C_not_None: \"A\\<^sub>C (var\\<^sub>C_of x) = Some (v, v')\""], ["proof (prove)\nusing this:\n  A\\<^sub>A_of A\\<^sub>C x = Some (v, v')\n\ngoal (1 subgoal):\n 1. A\\<^sub>C (var\\<^sub>C_of x) = Some (v, v')", "unfolding A\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  (case A\\<^sub>C (var\\<^sub>C_of x) of None \\<Rightarrow> None\n   | Some (v, v') \\<Rightarrow> Some (v, v')) =\n  Some (v, v')\n\ngoal (1 subgoal):\n 1. A\\<^sub>C (var\\<^sub>C_of x) = Some (v, v')", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  A\\<^sub>C (var\\<^sub>C_of x) = Some (v, v')\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "from A\\<^sub>A_updates_x"], ["proof (chain)\npicking this:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = v \\<longrightarrow>\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v'", "have\n      A\\<^sub>C_updates_x: \"mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v \\<or> mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'\""], ["proof (prove)\nusing this:\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = v \\<longrightarrow>\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v'\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v \\<or>\n    mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'", "unfolding mem\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) = v \\<longrightarrow>\n  mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v \\<or>\n    mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'", "by fastforce"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v \\<or>\n  mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "from A\\<^sub>C_not_None A\\<^sub>C_updates_x A\\<^sub>C_asm_mem"], ["proof (chain)\npicking this:\n  A\\<^sub>C (var\\<^sub>C_of x) = Some (v, v')\n  mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v \\<or>\n  mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x", "have\n      \"\\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x)\""], ["proof (prove)\nusing this:\n  A\\<^sub>C (var\\<^sub>C_of x) = Some (v, v')\n  mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v \\<or>\n  mem\\<^sub>2\\<^sub>C (var\\<^sub>C_of x) \\<noteq> v'\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x)", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  \\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A\\<^sub>A_of A\\<^sub>C x = Some (a, b);\n        mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x = a \\<longrightarrow>\n        mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written\n                                 (mds\\<^sub>A_of mds\\<^sub>C) x", "thus \"\\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\""], ["proof (prove)\nusing this:\n  \\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x)\n\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x", "by(rule var_writable\\<^sub>A)"], ["proof (state)\nthis:\n  \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dma\\<^sub>A_adaptation_eq:\n  \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x\\<^sub>A = dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) (var\\<^sub>C_of x\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A =\n    dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n     (var\\<^sub>C_of x\\<^sub>A)", "apply(subst dma_consistent[folded mem\\<^sub>A_of_def, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A =\n    dma\\<^sub>A\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C])\n     x\\<^sub>A", "apply(rule_tac x=x\\<^sub>A in fun_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n    dma\\<^sub>A\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C])", "apply(rule_tac f=\"dma\\<^sub>A\" in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n    mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n        x =\n       mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x", "apply(clarsimp simp: apply_adaptation_def A\\<^sub>A_of_def mem\\<^sub>A_of_def split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma A\\<^sub>A_asm_dma:\n  assumes A\\<^sub>C_asm_dma: \"\\<forall>x. dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) x \\<noteq> dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\"\n  shows \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 (A\\<^sub>A_of A\\<^sub>C)]) x\\<^sub>A \\<noteq> dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A \\<longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A \\<noteq>\n    dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n     x\\<^sub>A \\<longrightarrow>\n    \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "proof(intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A \\<noteq>\n    dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n     x\\<^sub>A \\<Longrightarrow>\n    \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "assume A\\<^sub>A_updates_dma: \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x\\<^sub>A \\<noteq> dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A\""], ["proof (state)\nthis:\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x\\<^sub>A \\<noteq>\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A \\<noteq>\n    dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n     x\\<^sub>A \\<Longrightarrow>\n    \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "with dma_consistent[folded mem\\<^sub>A_of_def] dma\\<^sub>A_adaptation_eq"], ["proof (chain)\npicking this:\n  dma\\<^sub>A (mem\\<^sub>A_of ?mem\\<^sub>C) ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    ?mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of ?A\\<^sub>C]\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 ?A\\<^sub>C]\n   (var\\<^sub>C_of ?x\\<^sub>A)\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x\\<^sub>A \\<noteq>\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A", "have \"dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) (var\\<^sub>C_of x\\<^sub>A) \\<noteq> dma\\<^sub>C mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\""], ["proof (prove)\nusing this:\n  dma\\<^sub>A (mem\\<^sub>A_of ?mem\\<^sub>C) ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    ?mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of ?A\\<^sub>C]\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 ?A\\<^sub>C]\n   (var\\<^sub>C_of ?x\\<^sub>A)\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x\\<^sub>A \\<noteq>\n  dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n     (var\\<^sub>C_of x\\<^sub>A) \\<noteq>\n    dma\\<^sub>C mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "by(metis)"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   (var\\<^sub>C_of x\\<^sub>A) \\<noteq>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A \\<noteq>\n    dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n     x\\<^sub>A \\<Longrightarrow>\n    \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "with A\\<^sub>C_asm_dma"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   (var\\<^sub>C_of x\\<^sub>A) \\<noteq>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "have \"\\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   (var\\<^sub>C_of x\\<^sub>A) \\<noteq>\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)", "by blast"], ["proof (state)\nthis:\n  \\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x\\<^sub>A \\<noteq>\n    dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n     x\\<^sub>A \\<Longrightarrow>\n    \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "thus \" \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\""], ["proof (prove)\nusing this:\n  \\<not> var_asm_not_written mds\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "by (rule  var_writable\\<^sub>A)"], ["proof (state)\nthis:\n  \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma var\\<^sub>C_of_in_\\<C>\\<^sub>C: \n  assumes \"x\\<^sub>A \\<in> \\<C>\\<^sub>A\"\n  shows \"var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C", "from assms"], ["proof (chain)\npicking this:\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A", "obtain y\\<^sub>A where \"x\\<^sub>A \\<in> \\<C>_vars\\<^sub>A y\\<^sub>A\""], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<in> \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>y\\<^sub>A.\n        x\\<^sub>A \\<in> \\<C>_vars\\<^sub>A y\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding abs.\\<C>_def"], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<in> \\<Union> (range \\<C>_vars\\<^sub>A)\n\ngoal (1 subgoal):\n 1. (\\<And>y\\<^sub>A.\n        x\\<^sub>A \\<in> \\<C>_vars\\<^sub>A y\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>A \\<in> \\<C>_vars\\<^sub>A y\\<^sub>A\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C", "hence \"var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>_vars\\<^sub>C (var\\<^sub>C_of y\\<^sub>A)\""], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<in> \\<C>_vars\\<^sub>A y\\<^sub>A\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A\n    \\<in> \\<C>_vars\\<^sub>C (var\\<^sub>C_of y\\<^sub>A)", "using \\<C>_vars_consistent"], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<in> \\<C>_vars\\<^sub>A y\\<^sub>A\n  var\\<^sub>C_of ` \\<C>_vars\\<^sub>A ?x\\<^sub>A =\n  \\<C>_vars\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A\n    \\<in> \\<C>_vars\\<^sub>C (var\\<^sub>C_of y\\<^sub>A)", "by blast"], ["proof (state)\nthis:\n  var\\<^sub>C_of x\\<^sub>A\n  \\<in> \\<C>_vars\\<^sub>C (var\\<^sub>C_of y\\<^sub>A)\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C", "thus ?thesis"], ["proof (prove)\nusing this:\n  var\\<^sub>C_of x\\<^sub>A\n  \\<in> \\<C>_vars\\<^sub>C (var\\<^sub>C_of y\\<^sub>A)\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C", "using conc.\\<C>_def"], ["proof (prove)\nusing this:\n  var\\<^sub>C_of x\\<^sub>A\n  \\<in> \\<C>_vars\\<^sub>C (var\\<^sub>C_of y\\<^sub>A)\n  \\<C>\\<^sub>C \\<equiv> \\<Union> (range \\<C>_vars\\<^sub>C)\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  var\\<^sub>C_of x\\<^sub>A \\<in> \\<C>\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma doesnt_have_mode\\<^sub>C:\n  \"x \\<notin> mds\\<^sub>A_of mds\\<^sub>C m \\<Longrightarrow> var\\<^sub>C_of x \\<notin> mds\\<^sub>C m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> mds\\<^sub>A_of mds\\<^sub>C m \\<Longrightarrow>\n    var\\<^sub>C_of x \\<notin> mds\\<^sub>C m", "by(simp add: doesnt_have_mode)"], ["", "lemma has_mode\\<^sub>A: \"var\\<^sub>C_of x \\<in> mds\\<^sub>C m \\<Longrightarrow> x \\<in> mds\\<^sub>A_of mds\\<^sub>C m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x \\<in> mds\\<^sub>C m \\<Longrightarrow>\n    x \\<in> mds\\<^sub>A_of mds\\<^sub>C m", "using doesnt_have_mode\\<^sub>C"], ["proof (prove)\nusing this:\n  ?x \\<notin> mds\\<^sub>A_of ?mds\\<^sub>C ?m \\<Longrightarrow>\n  var\\<^sub>C_of ?x \\<notin> ?mds\\<^sub>C ?m\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x \\<in> mds\\<^sub>C m \\<Longrightarrow>\n    x \\<in> mds\\<^sub>A_of mds\\<^sub>C m", "by fastforce"], ["", "lemma A\\<^sub>A_sec:\n  assumes A\\<^sub>C_sec: \"\\<forall>x. dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) x = Low \\<and> (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x = mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\"\n  shows \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x = Low \\<and> (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n           (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] x = (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>A\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x =\n    Low \\<and>\n    (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n    mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x =\n    mem\\<^sub>A_of\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n     x", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>dma\\<^sub>A\n              mem\\<^sub>A_of\n               mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                   A\\<^sub>C]\n              x =\n             Low;\n     x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A_of\n                       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x =\n                      mem\\<^sub>A_of\n                       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x", "assume x_is_Low: \"dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x = Low\""], ["proof (state)\nthis:\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x =\n  Low\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dma\\<^sub>A\n              mem\\<^sub>A_of\n               mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                   A\\<^sub>C]\n              x =\n             Low;\n     x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A_of\n                       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x =\n                      mem\\<^sub>A_of\n                       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x", "assume x_is_readable: \"x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>A\""], ["proof (state)\nthis:\n  x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  x \\<in> \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dma\\<^sub>A\n              mem\\<^sub>A_of\n               mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                   A\\<^sub>C]\n              x =\n             Low;\n     x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A_of\n                       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x =\n                      mem\\<^sub>A_of\n                       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x", "from x_is_Low"], ["proof (chain)\npicking this:\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x =\n  Low", "have x_is_Low\\<^sub>C: \"dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) (var\\<^sub>C_of x) = Low\""], ["proof (prove)\nusing this:\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x =\n  Low\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n     (var\\<^sub>C_of x) =\n    Low", "using dma\\<^sub>A_adaptation_eq"], ["proof (prove)\nusing this:\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x =\n  Low\n  dma\\<^sub>A\n   mem\\<^sub>A_of\n    ?mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of ?A\\<^sub>C]\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 ?A\\<^sub>C]\n   (var\\<^sub>C_of ?x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n     (var\\<^sub>C_of x) =\n    Low", "by simp"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   (var\\<^sub>C_of x) =\n  Low\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dma\\<^sub>A\n              mem\\<^sub>A_of\n               mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                   A\\<^sub>C]\n              x =\n             Low;\n     x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A_of\n                       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x =\n                      mem\\<^sub>A_of\n                       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x", "from x_is_readable"], ["proof (chain)\npicking this:\n  x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  x \\<in> \\<C>\\<^sub>A", "have \"var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or> var\\<^sub>C_of x \\<in> \\<C>\\<^sub>C\""], ["proof (prove)\nusing this:\n  x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  x \\<in> \\<C>\\<^sub>A\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n    var\\<^sub>C_of x \\<in> \\<C>\\<^sub>C", "using doesnt_have_mode\\<^sub>C  var\\<^sub>C_of_in_\\<C>\\<^sub>C"], ["proof (prove)\nusing this:\n  x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  x \\<in> \\<C>\\<^sub>A\n  ?x \\<notin> mds\\<^sub>A_of ?mds\\<^sub>C ?m \\<Longrightarrow>\n  var\\<^sub>C_of ?x \\<notin> ?mds\\<^sub>C ?m\n  ?x\\<^sub>A \\<in> \\<C>\\<^sub>A \\<Longrightarrow>\n  var\\<^sub>C_of ?x\\<^sub>A \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n    var\\<^sub>C_of x \\<in> \\<C>\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  var\\<^sub>C_of x \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dma\\<^sub>A\n              mem\\<^sub>A_of\n               mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                   A\\<^sub>C]\n              x =\n             Low;\n     x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A_of\n                       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x =\n                      mem\\<^sub>A_of\n                       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x", "with A\\<^sub>C_sec x_is_Low\\<^sub>C"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   (var\\<^sub>C_of x) =\n  Low\n  var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  var\\<^sub>C_of x \\<in> \\<C>\\<^sub>C", "have \"mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] (var\\<^sub>C_of x) = mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] (var\\<^sub>C_of x)\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   (var\\<^sub>C_of x) =\n  Low\n  var\\<^sub>C_of x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n  var\\<^sub>C_of x \\<in> \\<C>\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] (var\\<^sub>C_of x) =\n    mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] (var\\<^sub>C_of x)", "by blast"], ["proof (state)\nthis:\n  mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] (var\\<^sub>C_of x) =\n  mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] (var\\<^sub>C_of x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dma\\<^sub>A\n              mem\\<^sub>A_of\n               mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                   A\\<^sub>C]\n              x =\n             Low;\n     x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n     x \\<in> \\<C>\\<^sub>A\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A_of\n                       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x =\n                      mem\\<^sub>A_of\n                       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n                           A\\<^sub>C]\n                       x", "thus \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] x = (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] x\""], ["proof (prove)\nusing this:\n  mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] (var\\<^sub>C_of x) =\n  mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] (var\\<^sub>C_of x)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n     x =\n    mem\\<^sub>A_of\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n     x", "by(auto simp: mem\\<^sub>A_of_def apply_adaptation_def A\\<^sub>A_of_def split: option.splits)"], ["proof (state)\nthis:\n  mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n   x =\n  mem\\<^sub>A_of\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n   x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma apply_adaptation\\<^sub>A:\n  \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] = mem\\<^sub>A_of (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C])\"\n  \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] = mem\\<^sub>A_of (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n    mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] &&&\n    mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] =\n    mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]", "by(auto simp: mem\\<^sub>A_of_def A\\<^sub>A_of_def apply_adaptation_def split: option.splits)"], ["", "lemma R\\<^sub>C_of_closed_glob_consistent:\n  assumes mm: \n    \"\\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mds mem\\<^sub>2. (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n    abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\"\n  assumes cgc: \"abs.closed_glob_consistent \\<R>\\<^sub>A\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  shows \"conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)", "unfolding conc.closed_glob_consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       (\\<forall>A.\n           (\\<forall>x.\n               case A x of None \\<Rightarrow> True\n               | Some (v, v') \\<Rightarrow>\n                   mem\\<^sub>1 x \\<noteq> v \\<or>\n                   mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n                   \\<not> var_asm_not_written mds x) \\<and>\n           (\\<forall>x.\n               dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n               dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n               \\<not> var_asm_not_written mds x) \\<and>\n           (\\<forall>x.\n               dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n               Low \\<and>\n               (x \\<notin> mds AsmNoReadOrWrite \\<or>\n                x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n               mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n               mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x) \\<longrightarrow>\n           (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n           \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "fix c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C A\\<^sub>C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "assume \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\""], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from this rr"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n  secure_refinement \\<R>\\<^sub>A \\<R> P", "obtain c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A where\n       in_\\<R>\\<^sub>A:  \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\" and\n       in_\\<R>\\<^sub>1:  \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n       in_\\<R>\\<^sub>2:  \"(\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n         and\n       mds_eq: \"conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\"\n         and\n       P: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                 \\<in> \\<R>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>;\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>;\n         conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n          mem\\<^sub>2\\<^sub>C;\n         (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast dest: R\\<^sub>C_ofD)"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "assume A\\<^sub>C_asm_mem: \"\\<forall>x. case A\\<^sub>C x of None \\<Rightarrow> True\n                                   | Some (v, v') \\<Rightarrow>\n                                      mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or> mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\""], ["proof (state)\nthis:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "hence A\\<^sub>A_asm_mem: \"\\<forall>x. case (A\\<^sub>A_of A\\<^sub>C) x of None \\<Rightarrow> True\n                                           | Some (v, v') \\<Rightarrow>\n               (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x \\<noteq> v \\<or> (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) x \\<noteq> v' \\<longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       case A\\<^sub>A_of A\\<^sub>C x of None \\<Rightarrow> True\n       | Some (v, v') \\<Rightarrow>\n           mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n           mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq>\n           v' \\<longrightarrow>\n           \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x", "by(metis A\\<^sub>A_asm_mem)"], ["proof (state)\nthis:\n  \\<forall>x.\n     case A\\<^sub>A_of A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "assume A\\<^sub>C_asm_dma: \"\\<forall>x. dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) x \\<noteq> dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\""], ["proof (state)\nthis:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "hence A\\<^sub>A_asm_dma: \"\\<forall>x\\<^sub>A. dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 (A\\<^sub>A_of A\\<^sub>C)]) x\\<^sub>A \\<noteq> dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) x\\<^sub>A \\<longrightarrow> \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<^sub>A.\n       dma\\<^sub>A\n        mem\\<^sub>A_of\n         mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n        x\\<^sub>A \\<noteq>\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n        x\\<^sub>A \\<longrightarrow>\n       \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A", "by(metis A\\<^sub>A_asm_dma)"], ["proof (state)\nthis:\n  \\<forall>x\\<^sub>A.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x\\<^sub>A \\<noteq>\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n      x\\<^sub>A \\<longrightarrow>\n     \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "assume A\\<^sub>C_sec: \"\\<forall>x. dma\\<^sub>C (mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]) x = Low \\<and> (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n         mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x = mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\""], ["proof (state)\nthis:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "hence A\\<^sub>A_sec: \"\\<forall>x. dma\\<^sub>A ((mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]) x = Low \\<and> (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or> x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n         (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] x = (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] x\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       dma\\<^sub>A\n        mem\\<^sub>A_of\n         mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n        x =\n       Low \\<and>\n       (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n        x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n       mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n        x =\n       mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n        x", "by(metis A\\<^sub>A_sec)"], ["proof (state)\nthis:\n  \\<forall>x.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n      x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from rr"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P", "have others: \"closed_others \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. closed_others \\<R>", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n\ngoal (1 subgoal):\n 1. closed_others \\<R>", "by blast"], ["proof (state)\nthis:\n  closed_others \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from rr"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P", "have P_cgc: \"conc.closed_glob_consistent P\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "by blast"], ["proof (state)\nthis:\n  conc.closed_glob_consistent P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "let ?mem\\<^sub>1\\<^sub>C' = \"(mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C])\" and\n      ?mem\\<^sub>2\\<^sub>C' = \"(mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C])\" and\n      ?mem\\<^sub>1\\<^sub>A = \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\" and\n      ?mem\\<^sub>2\\<^sub>A = \"(mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)\" and\n      ?mem\\<^sub>1\\<^sub>A' = \"(mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\" and\n      ?mem\\<^sub>2\\<^sub>A' = \"(mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "have mem'_simps: \n    \"?mem\\<^sub>1\\<^sub>A' = mem\\<^sub>A_of ?mem\\<^sub>1\\<^sub>C'\" \n    \"?mem\\<^sub>2\\<^sub>A' = mem\\<^sub>A_of ?mem\\<^sub>2\\<^sub>C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n    mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] &&&\n    mem\\<^sub>A_of\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] =\n    mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]", "by(simp add: apply_adaptation\\<^sub>A)+"], ["proof (state)\nthis:\n  mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n  mem\\<^sub>A_of\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from cgc in_\\<R>\\<^sub>A A\\<^sub>A_asm_mem A\\<^sub>A_asm_dma A\\<^sub>A_sec"], ["proof (chain)\npicking this:\n  abs.closed_glob_consistent \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  \\<forall>x.\n     case A\\<^sub>A_of A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\n  \\<forall>x\\<^sub>A.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x\\<^sub>A \\<noteq>\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n      x\\<^sub>A \\<longrightarrow>\n     \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\n  \\<forall>x.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n      x", "have\n    in_\\<R>\\<^sub>A': \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C) [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\""], ["proof (prove)\nusing this:\n  abs.closed_glob_consistent \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  \\<forall>x.\n     case A\\<^sub>A_of A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\n  \\<forall>x\\<^sub>A.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x\\<^sub>A \\<noteq>\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n      x\\<^sub>A \\<longrightarrow>\n     \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\n  \\<forall>x.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n      x\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n              A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n              A\\<^sub>C]\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A", "unfolding abs.closed_glob_consistent_def"], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n     (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<longrightarrow>\n     (\\<forall>A.\n         (\\<forall>x.\n             case A x of None \\<Rightarrow> True\n             | Some (v, v') \\<Rightarrow>\n                 mem\\<^sub>1 x \\<noteq> v \\<or>\n                 mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n                 \\<not> var_asm_not_written mds x) \\<and>\n         (\\<forall>x.\n             dma\\<^sub>A mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n             dma\\<^sub>A mem\\<^sub>1 x \\<longrightarrow>\n             \\<not> var_asm_not_written mds x) \\<and>\n         (\\<forall>x.\n             dma\\<^sub>A mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n             (x \\<notin> mds AsmNoReadOrWrite \\<or>\n              x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n             mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n             mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x) \\<longrightarrow>\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A)\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  \\<forall>x.\n     case A\\<^sub>A_of A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\n  \\<forall>x\\<^sub>A.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x\\<^sub>A \\<noteq>\n     dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C)\n      x\\<^sub>A \\<longrightarrow>\n     \\<not> var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C) x\\<^sub>A\n  \\<forall>x.\n     dma\\<^sub>A\n      mem\\<^sub>A_of\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>A_of mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>A) \\<longrightarrow>\n     mem\\<^sub>A_of\n      mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C]\n      x =\n     mem\\<^sub>A_of\n      mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C]\n      x\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n              A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n              A\\<^sub>C]\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from A\\<^sub>C_asm_mem A\\<^sub>C_asm_dma"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x", "have \n    A\\<^sub>C_asm_mem\\<^sub>1': \"\\<forall>x. mem\\<^sub>1\\<^sub>C x \\<noteq> ?mem\\<^sub>1\\<^sub>C' x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\" and\n    A\\<^sub>C_asm_dma\\<^sub>1': \"\\<forall>x. dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq> dma\\<^sub>C ?mem\\<^sub>1\\<^sub>C' x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       mem\\<^sub>1\\<^sub>C x \\<noteq>\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n        x \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x &&&\n    \\<forall>x.\n       dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n       dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n        x \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x", "unfolding apply_adaptation_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C\n      (\\<lambda>x.\n          case A\\<^sub>C x of None \\<Rightarrow> mem\\<^sub>1\\<^sub>C x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb)\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       mem\\<^sub>1\\<^sub>C x \\<noteq>\n       (case A\\<^sub>C x of None \\<Rightarrow> mem\\<^sub>1\\<^sub>C x\n        | Some (xa, xb) \\<Rightarrow>\n            if True then xa else xb) \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x &&&\n    \\<forall>x.\n       dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n       dma\\<^sub>C\n        (\\<lambda>x.\n            case A\\<^sub>C x of None \\<Rightarrow> mem\\<^sub>1\\<^sub>C x\n            | Some (xa, xb) \\<Rightarrow> if True then xa else xb)\n        x \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x", "by(force split: option.splits)+"], ["proof (state)\nthis:\n  \\<forall>x.\n     mem\\<^sub>1\\<^sub>C x \\<noteq>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from A\\<^sub>C_asm_mem"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x", "have\n    A\\<^sub>C_asm_mem\\<^sub>2': \"\\<forall>x. mem\\<^sub>2\\<^sub>C x \\<noteq> ?mem\\<^sub>2\\<^sub>C' x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       mem\\<^sub>2\\<^sub>C x \\<noteq>\n       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n        x \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x", "unfolding apply_adaptation_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       mem\\<^sub>2\\<^sub>C x \\<noteq>\n       (case A\\<^sub>C x of None \\<Rightarrow> mem\\<^sub>2\\<^sub>C x\n        | Some (xa, xb) \\<Rightarrow>\n            if False then xa else xb) \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x", "by(force split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>x.\n     mem\\<^sub>2\\<^sub>C x \\<noteq>\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from in_\\<R>\\<^sub>1 A\\<^sub>C_asm_mem\\<^sub>1' A\\<^sub>C_asm_dma\\<^sub>1' others"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>x.\n     mem\\<^sub>1\\<^sub>C x \\<noteq>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  closed_others \\<R>", "have\n    in_\\<R>\\<^sub>1':  \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>x.\n     mem\\<^sub>1\\<^sub>C x \\<noteq>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  closed_others \\<R>\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n              A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "unfolding closed_others_def mem'_simps"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>x.\n     mem\\<^sub>1\\<^sub>C x \\<noteq>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     (\\<forall>x.\n         mem\\<^sub>C x \\<noteq> mem\\<^sub>C' x \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n     (\\<forall>x.\n         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C' x \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from mm[OF in_\\<R>\\<^sub>A]"], ["proof (chain)\npicking this:\n  abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C)\n   (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)", "have \n    dma\\<^sub>C_eq: \"dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\""], ["proof (prove)\nusing this:\n  abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C)\n   (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C) (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C)\n\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C", "by(rule abs_low_mds_eq_dma\\<^sub>C_eq)"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "have dma\\<^sub>C_eq': \"dma\\<^sub>C ?mem\\<^sub>1\\<^sub>C' = dma\\<^sub>C ?mem\\<^sub>2\\<^sub>C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] =\n    dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]", "apply(rule abs_low_mds_eq_dma\\<^sub>C_eq[OF mm])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>?c\\<^sub>16, mds\\<^sub>A_of\n                            ?mds, mem\\<^sub>A_of\n                                   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>?c\\<^sub>26, mds\\<^sub>A_of\n                            ?mds, mem\\<^sub>A_of\n                                   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A", "apply(simp add: mem'_simps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>?c\\<^sub>16, mds\\<^sub>A_of\n                            ?mds, mem\\<^sub>A_of\n                                   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>?c\\<^sub>26, mds\\<^sub>A_of\n                            ?mds, mem\\<^sub>A_of\n                                   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n A\\<^sub>C]\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A", "by(rule in_\\<R>\\<^sub>A')"], ["proof (state)\nthis:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] =\n  dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from dma\\<^sub>C_eq dma\\<^sub>C_eq' A\\<^sub>C_asm_dma\\<^sub>1'"], ["proof (chain)\npicking this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] =\n  dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x", "have\n    A\\<^sub>C_asm_dma\\<^sub>2': \"\\<forall>x. dma\\<^sub>C mem\\<^sub>2\\<^sub>C x \\<noteq> dma\\<^sub>C ?mem\\<^sub>2\\<^sub>C' x \\<longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x\""], ["proof (prove)\nusing this:\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C = dma\\<^sub>C mem\\<^sub>2\\<^sub>C\n  dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] =\n  dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       dma\\<^sub>C mem\\<^sub>2\\<^sub>C x \\<noteq>\n       dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n        x \\<longrightarrow>\n       \\<not> var_asm_not_written mds\\<^sub>C x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from in_\\<R>\\<^sub>2  A\\<^sub>C_asm_mem\\<^sub>2' A\\<^sub>C_asm_dma\\<^sub>2' others"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>x.\n     mem\\<^sub>2\\<^sub>C x \\<noteq>\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  closed_others \\<R>", "have\n    in_\\<R>\\<^sub>2':  \"(\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>x.\n     mem\\<^sub>2\\<^sub>C x \\<noteq>\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  closed_others \\<R>\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n              A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "unfolding closed_others_def mem'_simps"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>x.\n     mem\\<^sub>2\\<^sub>C x \\<noteq>\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n      x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     (\\<forall>x.\n         mem\\<^sub>C x \\<noteq> mem\\<^sub>C' x \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n     (\\<forall>x.\n         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C' x \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "have mds_eq': \"conc.low_mds_eq mds\\<^sub>C ?mem\\<^sub>1\\<^sub>C' ?mem\\<^sub>2\\<^sub>C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.low_mds_eq mds\\<^sub>C\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]", "using A\\<^sub>C_sec"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n\ngoal (1 subgoal):\n 1. conc.low_mds_eq mds\\<^sub>C\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]", "unfolding conc.low_mds_eq_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n       Low \\<and>\n       (x \\<in> \\<C>\\<^sub>C \\<or>\n        x \\<notin> mds\\<^sub>C AsmNoReadOrWrite) \\<longrightarrow>\n       mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n       mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x", "by blast"], ["proof (state)\nthis:\n  conc.low_mds_eq mds\\<^sub>C\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from P P_cgc A\\<^sub>C_asm_mem A\\<^sub>C_asm_dma A\\<^sub>C_sec"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  conc.closed_glob_consistent P\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x", "have P': \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  conc.closed_glob_consistent P\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> P", "unfolding conc.closed_glob_consistent_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n     (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n     \\<in> P \\<longrightarrow>\n     (\\<forall>A.\n         (\\<forall>x.\n             case A x of None \\<Rightarrow> True\n             | Some (v, v') \\<Rightarrow>\n                 mem\\<^sub>1 x \\<noteq> v \\<or>\n                 mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n                 \\<not> var_asm_not_written mds x) \\<and>\n         (\\<forall>x.\n             dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n             dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n             \\<not> var_asm_not_written mds x) \\<and>\n         (\\<forall>x.\n             dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n             (x \\<notin> mds AsmNoReadOrWrite \\<or>\n              x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n             mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n             mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x) \\<longrightarrow>\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n         \\<in> P)\n  \\<forall>x.\n     case A\\<^sub>C x of None \\<Rightarrow> True\n     | Some (v, v') \\<Rightarrow>\n         mem\\<^sub>1\\<^sub>C x \\<noteq> v \\<or>\n         mem\\<^sub>2\\<^sub>C x \\<noteq> v' \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n      x \\<noteq>\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C x \\<longrightarrow>\n     \\<not> var_asm_not_written mds\\<^sub>C x\n  \\<forall>x.\n     dma\\<^sub>C mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     Low \\<and>\n     (x \\<notin> mds\\<^sub>C AsmNoReadOrWrite \\<or>\n      x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n     mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C] x =\n     mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C] x\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> P", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 A.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<forall>x.\n           case A x of None \\<Rightarrow> True\n           | Some (v, v') \\<Rightarrow>\n               mem\\<^sub>1 x \\<noteq> v \\<or>\n               mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n               \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma\\<^sub>C mem\\<^sub>1 x \\<longrightarrow>\n           \\<not> var_asm_not_written mds x;\n        \\<forall>x.\n           dma\\<^sub>C mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<notin> mds AsmNoReadOrWrite \\<or>\n            x \\<in> \\<C>\\<^sub>C) \\<longrightarrow>\n           mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n           mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from in_\\<R>\\<^sub>A' in_\\<R>\\<^sub>1' in_\\<R>\\<^sub>2' mem'_simps R\\<^sub>C_ofI mds_eq' P'"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n  mem\\<^sub>A_of\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n  \\<lbrakk>(\\<langle>?c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n    ?mds\\<^sub>C, mem\\<^sub>A_of ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n            \\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> ?\\<R>;\n   (\\<langle>?c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>;\n   (\\<langle>?c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n   \\<in> ?\\<R>\\<^sub>A;\n   conc.low_mds_eq ?mds\\<^sub>C ?mem\\<^sub>1\\<^sub>C ?mem\\<^sub>2\\<^sub>C;\n   (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> R\\<^sub>C_of ?\\<R>\\<^sub>A ?\\<R> ?P\n  conc.low_mds_eq mds\\<^sub>C\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> P", "show\n  \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of\n            A\\<^sub>C]\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  mem\\<^sub>A_of\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>A_of A\\<^sub>C] =\n  mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n  mem\\<^sub>A_of\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>A_of A\\<^sub>C] =\n  mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n  \\<lbrakk>(\\<langle>?c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n    ?mds\\<^sub>C, mem\\<^sub>A_of ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n            \\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> ?\\<R>;\n   (\\<langle>?c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>;\n   (\\<langle>?c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                  ?mds\\<^sub>C, mem\\<^sub>A_of\n           ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n   \\<in> ?\\<R>\\<^sub>A;\n   conc.low_mds_eq ?mds\\<^sub>C ?mem\\<^sub>1\\<^sub>C ?mem\\<^sub>2\\<^sub>C;\n   (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n    \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> (\\<langle>?c\\<^sub>1\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>?c\\<^sub>2\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> R\\<^sub>C_of ?\\<R>\\<^sub>A ?\\<R> ?P\n  conc.low_mds_eq mds\\<^sub>C\n   mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\n   mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n    \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "by(metis)"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C [\\<parallel>\\<^sub>1 A\\<^sub>C]\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C [\\<parallel>\\<^sub>2 A\\<^sub>C]\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R\\<^sub>C_of_local_preservation:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes bisim: \"abs.strong_low_bisim_mm \\<R>\\<^sub>A\"\n  assumes in_R\\<^sub>C_of: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\"\n  assumes step\\<^sub>1\\<^sub>C: \"\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\"\n  shows \"\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from rr in_R\\<^sub>C_of"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "have\n    P: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> P", "by(blast dest: R\\<^sub>C_ofD)"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "let ?mds\\<^sub>A = \"mds\\<^sub>A_of mds\\<^sub>C\" and\n      ?mem\\<^sub>1\\<^sub>A = \"mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\" and\n      ?mem\\<^sub>2\\<^sub>A = \"mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\" and\n      ?mds\\<^sub>A' = \"mds\\<^sub>A_of mds\\<^sub>C'\" and\n      ?mem\\<^sub>1\\<^sub>A' = \"mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from rr in_R\\<^sub>C_of"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "obtain c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A where\n    in_\\<R>\\<^sub>1: \"(\\<langle>c\\<^sub>1\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n    in_\\<R>\\<^sub>2: \"(\\<langle>c\\<^sub>2\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n    in_\\<R>\\<^sub>A: \"(\\<langle>c\\<^sub>1\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\" and\n    low_mds_mds\\<^sub>C: \"conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A.\n        \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>;\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A;\n         conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C\n          mem\\<^sub>2\\<^sub>C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: R\\<^sub>C_ofD)+"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  conc.low_mds_eq mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from rr in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>A in_\\<R>\\<^sub>2 step\\<^sub>1\\<^sub>C"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C", "obtain n c\\<^sub>1\\<^sub>A' where\n     a: \"(abs.neval \\<langle> c\\<^sub>1\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>1\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A \\<and>\n         (\\<langle> c\\<^sub>1\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'. \n         (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P \\<and>\n         abs.neval \\<langle> c\\<^sub>2\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>2\\<^sub>A \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A  \\<longrightarrow>\n           (\\<exists> c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle> c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C \\<and>\n                   (\\<langle> c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>2\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P)))\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>n c\\<^sub>1\\<^sub>A'.\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n         n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n            (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n             \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n            \\<in> P \\<and>\n            abs.neval\n             \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n    mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n             n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n       mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n            (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> P)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding secure_refinement_def2"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n      mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n      mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>A_of\n                        mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n       mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n                  mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n          mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n          mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n          mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n          mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n             mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n               mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>n c\\<^sub>1\\<^sub>A'.\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n         n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<and>\n        (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n            (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n             \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n            \\<in> P \\<and>\n            abs.neval\n             \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n    mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n             n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n       mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n            (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n         mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> P)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<and>\n      abs.neval\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n       n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n      (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> \\<R> \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P))\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from a"], ["proof (chain)\npicking this:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<and>\n      abs.neval\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n       n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n      (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> \\<R> \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P))", "have neval\\<^sub>1\\<^sub>A: \"abs.neval \\<langle>c\\<^sub>1\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>1\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A\" and\n                in_\\<R>\\<^sub>1': \"(\\<langle>c\\<^sub>1\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<and>\n      abs.neval\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n       n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n      (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> \\<R> \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P))\n\ngoal (1 subgoal):\n 1. abs.neval\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                  mds\\<^sub>C, mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n     n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                     mds\\<^sub>C', mem\\<^sub>A_of\n              mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A &&&\n    (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "by blast+"], ["proof (state)\nthis:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from  strong_low_bisim_neval[OF neval\\<^sub>1\\<^sub>A  in_\\<R>\\<^sub>A bisim]"], ["proof (chain)\npicking this:\n  \\<exists>c\\<^sub>n' mem\\<^sub>n'.\n     abs.neval\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n      n \\<langle>c\\<^sub>n', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>n'\\<rangle>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>A_of\n             mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>n', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>n'\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A", "obtain c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A' where\n      neval\\<^sub>2\\<^sub>A: \"abs.neval \\<langle>c\\<^sub>2\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\" and\n      in_\\<R>\\<^sub>A'_help: \"(\\<langle>c\\<^sub>1\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\""], ["proof (prove)\nusing this:\n  \\<exists>c\\<^sub>n' mem\\<^sub>n'.\n     abs.neval\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n      n \\<langle>c\\<^sub>n', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>n'\\<rangle>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>A_of\n             mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>n', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>n'\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n  mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding abs.strong_low_bisim_mm_def"], ["proof (prove)\nusing this:\n  \\<exists>c\\<^sub>n' mem\\<^sub>n'.\n     abs.neval\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                   mds\\<^sub>C, mem\\<^sub>A_of\n           mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n      n \\<langle>c\\<^sub>n', mds\\<^sub>A_of\n                              mds\\<^sub>C', mem\\<^sub>n'\\<rangle>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                    mds\\<^sub>C', mem\\<^sub>A_of\n             mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>n', mds\\<^sub>A_of\n                            mds\\<^sub>C', mem\\<^sub>n'\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n         mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n            mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n  mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from a in_\\<R>\\<^sub>A in_\\<R>\\<^sub>2 neval\\<^sub>2\\<^sub>A P"], ["proof (chain)\npicking this:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<and>\n      abs.neval\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n       n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n      (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> \\<R> \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P))\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P", "obtain c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C' where\n          step\\<^sub>2\\<^sub>C: \"\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\" and\n          in_\\<R>\\<^sub>2'_help: \"(\\<langle>c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n          P': \"(\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<forall>c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<and>\n      abs.neval\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                    mds\\<^sub>C, mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n       n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n      (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> \\<R> \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P))\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A_of\n                                mds\\<^sub>C, mem\\<^sub>A_of\n        mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n        \\<lbrakk>\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                 \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C;\n         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n  mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R>;\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "let ?mem\\<^sub>2\\<^sub>A' = \"mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "from in_\\<R>\\<^sub>2'_help rr preserves_modes_memD"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C", "have \"mem\\<^sub>2\\<^sub>A' = ?mem\\<^sub>2\\<^sub>A'\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>2\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>2\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'", "by metis"], ["proof (state)\nthis:\n  mem\\<^sub>2\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "with in_\\<R>\\<^sub>2'_help in_\\<R>\\<^sub>A'_help"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  mem\\<^sub>2\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'", "have \n      in_\\<R>\\<^sub>2': \"(\\<langle>c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n      in_\\<R>\\<^sub>A': \"(\\<langle>c\\<^sub>1\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A', ?mds\\<^sub>A', ?mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  mem\\<^sub>2\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C'\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R> &&&\n    (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                   mds\\<^sub>C', mem\\<^sub>A_of\n            mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A)\n    \\<in> \\<R>\\<^sub>A", "by simp+"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "have \"conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'", "apply(rule new_vars_private_does_the_thing[where \\<R>=\\<R>, OF _ in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>2 step\\<^sub>1\\<^sub>C step\\<^sub>2\\<^sub>C low_mds_mds\\<^sub>C])"], ["proof (prove)\ngoal (2 subgoals):\n 1. new_vars_private \\<R>\n 2. abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')", "using rr"], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (2 subgoals):\n 1. new_vars_private \\<R>\n 2. abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')", "apply(fastforce simp: secure_refinement_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')", "using in_\\<R>\\<^sub>A' bisim"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')", "unfolding abs.strong_low_bisim_mm_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  sym \\<R>\\<^sub>A \\<and>\n  abs.closed_glob_consistent \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n      (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A \\<longrightarrow>\n      abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n      (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n          \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<longrightarrow>\n          (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n              \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A)\n              \\<in> \\<R>\\<^sub>A)))\n\ngoal (1 subgoal):\n 1. abs.low_mds_eq (mds\\<^sub>A_of mds\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>1\\<^sub>C')\n     (mem\\<^sub>A_of mem\\<^sub>2\\<^sub>C')", "by blast"], ["proof (state)\nthis:\n  conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "with step\\<^sub>2\\<^sub>C in_\\<R>\\<^sub>1' in_\\<R>\\<^sub>2' in_\\<R>\\<^sub>A' in_\\<R>\\<^sub>2' P'"], ["proof (chain)\npicking this:\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P\n  conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A_of\n                                 mds\\<^sub>C', mem\\<^sub>A_of\n          mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P\n  conc.low_mds_eq mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C'\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "by(blast intro: R\\<^sub>C_ofI)"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Security of the concrete system should follow straightforwardly from\n  security of the abstract one, via the compositionality theorem, presuming\n  that the compiler also preserves the sound use of modes.\n\\<close>"], ["", "lemma R\\<^sub>C_of_strong_low_bisim_mm:\n  assumes abs: \"abs.strong_low_bisim_mm \\<R>\\<^sub>A\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes P_sym: \"sym P\"\n  shows \"conc.strong_low_bisim_mm (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.strong_low_bisim_mm (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)", "unfolding conc.strong_low_bisim_mm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P) \\<and>\n    conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P) \\<and>\n    (\\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n        \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n        conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n        (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)))", "apply(intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. sym (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\n 2. conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\n 3. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "apply(rule R\\<^sub>C_of_sym)"], ["proof (prove)\ngoal (6 subgoals):\n 1. sym \\<R>\\<^sub>A\n 2. sym P\n 3. secure_refinement \\<R>\\<^sub>A \\<R> P\n 4. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mdsa mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mdsa, mem\\<^sub>1\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2, mdsa, mem\\<^sub>2\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n       abs.low_mds_eq mdsa mem\\<^sub>1 mem\\<^sub>2\n 5. conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\n 6. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "using abs rr P_sym"], ["proof (prove)\nusing this:\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  sym P\n\ngoal (6 subgoals):\n 1. sym \\<R>\\<^sub>A\n 2. sym P\n 3. secure_refinement \\<R>\\<^sub>A \\<R> P\n 4. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mdsa mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mdsa, mem\\<^sub>1\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2, mdsa, mem\\<^sub>2\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n       abs.low_mds_eq mdsa mem\\<^sub>1 mem\\<^sub>2\n 5. conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\n 6. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "unfolding abs.strong_low_bisim_mm_def"], ["proof (prove)\nusing this:\n  sym \\<R>\\<^sub>A \\<and>\n  abs.closed_glob_consistent \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n      (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A \\<longrightarrow>\n      abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n      (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n          \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<longrightarrow>\n          (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n              \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A)\n              \\<in> \\<R>\\<^sub>A)))\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  sym P\n\ngoal (6 subgoals):\n 1. sym \\<R>\\<^sub>A\n 2. sym P\n 3. secure_refinement \\<R>\\<^sub>A \\<R> P\n 4. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mdsa mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mdsa, mem\\<^sub>1\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2, mdsa, mem\\<^sub>2\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n       abs.low_mds_eq mdsa mem\\<^sub>1 mem\\<^sub>2\n 5. conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\n 6. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "apply blast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent (R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\n 2. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "apply(rule R\\<^sub>C_of_closed_glob_consistent)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mdsa mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mdsa, mem\\<^sub>1\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2, mdsa, mem\\<^sub>2\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n       abs.low_mds_eq mdsa mem\\<^sub>1 mem\\<^sub>2\n 2. abs.closed_glob_consistent \\<R>\\<^sub>A\n 3. secure_refinement \\<R>\\<^sub>A \\<R> P\n 4. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "using abs"], ["proof (prove)\nusing this:\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mdsa mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mdsa, mem\\<^sub>1\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2, mdsa, mem\\<^sub>2\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n       abs.low_mds_eq mdsa mem\\<^sub>1 mem\\<^sub>2\n 2. abs.closed_glob_consistent \\<R>\\<^sub>A\n 3. secure_refinement \\<R>\\<^sub>A \\<R> P\n 4. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "unfolding abs.strong_low_bisim_mm_def"], ["proof (prove)\nusing this:\n  sym \\<R>\\<^sub>A \\<and>\n  abs.closed_glob_consistent \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n      (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A \\<longrightarrow>\n      abs.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n      (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n          \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<longrightarrow>\n          (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n              \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A)\n              \\<in> \\<R>\\<^sub>A)))\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mdsa mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mdsa, mem\\<^sub>1\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2, mdsa, mem\\<^sub>2\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<Longrightarrow>\n       abs.low_mds_eq mdsa mem\\<^sub>1 mem\\<^sub>2\n 2. abs.closed_glob_consistent \\<R>\\<^sub>A\n 3. secure_refinement \\<R>\\<^sub>A \\<R> P\n 4. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "apply blast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. secure_refinement \\<R>\\<^sub>A \\<R> P\n 2. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "using rr"], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (2 subgoals):\n 1. secure_refinement \\<R>\\<^sub>A \\<R> P\n 2. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n       (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n               \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n       \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n       conc.low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                            \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "apply(fastforce simp: R\\<^sub>C_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                            \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P", "apply(rule R\\<^sub>C_of_local_preservation)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> secure_refinement \\<R>\\<^sub>A \\<R> P\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> abs.strong_low_bisim_mm \\<R>\\<^sub>A\n 3. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>?c\\<^sub>1\\<^sub>C88 c\\<^sub>1 mds\n                                    mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2\n                                    c\\<^sub>1' mds'\n                                    mem\\<^sub>1', mds, ?mem\\<^sub>1\\<^sub>C88\n                  c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1'\n                  mds' mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n 4. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<langle>?c\\<^sub>1\\<^sub>C88 c\\<^sub>1 mds\n                                   mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2\n                                   c\\<^sub>1' mds'\n                                   mem\\<^sub>1', mds, ?mem\\<^sub>1\\<^sub>C88\n                 c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1'\n                 mds' mem\\<^sub>1'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C", "apply(rule rr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> abs.strong_low_bisim_mm \\<R>\\<^sub>A\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>?c\\<^sub>1\\<^sub>C88 c\\<^sub>1 mds\n                                    mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2\n                                    c\\<^sub>1' mds'\n                                    mem\\<^sub>1', mds, ?mem\\<^sub>1\\<^sub>C88\n                  c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1'\n                  mds' mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n 3. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<langle>?c\\<^sub>1\\<^sub>C88 c\\<^sub>1 mds\n                                   mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2\n                                   c\\<^sub>1' mds'\n                                   mem\\<^sub>1', mds, ?mem\\<^sub>1\\<^sub>C88\n                 c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1'\n                 mds' mem\\<^sub>1'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C", "apply(rule abs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>?c\\<^sub>1\\<^sub>C88 c\\<^sub>1 mds\n                                    mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2\n                                    c\\<^sub>1' mds'\n                                    mem\\<^sub>1', mds, ?mem\\<^sub>1\\<^sub>C88\n                  c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1'\n                  mds' mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                \\<in> R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<langle>?c\\<^sub>1\\<^sub>C88 c\\<^sub>1 mds\n                                   mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2\n                                   c\\<^sub>1' mds'\n                                   mem\\<^sub>1', mds, ?mem\\<^sub>1\\<^sub>C88\n                 c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1'\n                 mds' mem\\<^sub>1'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"A Simpler Proof Principle for General Compositional Refinement\""], ["", "text \\<open>\n  Here we make use of the fact that the source language we are working\n  in is assumed deterministic. This allows us to invert the direction\n  of refinement and thereby to derive a simpler condition for secure\n  compositional refinement.\n  \n  The simpler condition rests on an ordinary definition of refinement,\n  and has the user prove separately that the coupling invariant @{term P}\n  is self-preserving. This allows proofs about coupling invariant properties\n  to be disentangled from the proof of refinement itself.\n\\<close>"], ["", "text \\<open>\n  Given a  bisimulation @{term \\<R>\\<^sub>A}, this definition captures the essence of the extra\n  requirements on a refinement relation~@{term \\<R>} needed to ensure that the refined program is\n  also secure. These requirements are essentially that:\n  \\begin{enumerate}\n    \\item The enabledness of the compiled code depends only on Low abstract data;\n    \\item The length of the abstract program to which a single step of the concrete program\n          corresponds depends only on Low abstract data;\n    \\item The coupling invariant is maintained.\n  \\end{enumerate}\n  \n  The second requirement we express via the parameter~@{term abs_steps} that, given an\n  abstract and corresponding concrete configuration, yields the number of execution steps of\n  the abstract configuration to which a single step of the concrete configuration corresponds.\n  \n  Note that a more specialised version of this definition, fixing the coupling\n  invariant @{term P} to be the one that relates all configurations with\n  identical programs and mode states, appeared in Murray et al., CSF 2016.\n  Here we generalise the theory to support a wider class of coupling invariants.\n\\<close>"], ["", "definition\n  simpler_refinement_safe \nwhere\n  \"simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<equiv> \n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C. (\\<langle>c\\<^sub>1\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>2\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and> \n      (\\<langle>c\\<^sub>1\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and> (\\<langle>c\\<^sub>2\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P  \\<longrightarrow>\n           (stops\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C = stops\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<and>\n           (abs_steps \\<langle>c\\<^sub>1\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C = abs_steps \\<langle>c\\<^sub>2\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<and>\n           (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C' c\\<^sub>2\\<^sub>C'. \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C  \\<and>\n                                          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                                          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P \\<and>\n                                          mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')\""], ["", "definition\n  secure_refinement_simpler\nwhere\n  \"secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps \\<equiv>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall> c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'. \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<exists> c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'. abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A (abs_steps \\<langle>c\\<^sub>1\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>1\\<^sub>C,mds\\<^sub>C,mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R>)))\""], ["", "lemma secure_refinement_simpler:\n  assumes rrs: \"secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\"\n  shows \"secure_refinement \\<R>\\<^sub>A \\<R> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure_refinement \\<R>\\<^sub>A \\<R> P", "unfolding secure_refinement_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_others \\<R> \\<and>\n    preserves_modes_mem \\<R> \\<and>\n    new_vars_private \\<R> \\<and>\n    conc.closed_glob_consistent P \\<and>\n    (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                mem\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                    c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P)))))", "proof(safe)"], ["proof (state)\ngoal (5 subgoals):\n 1. closed_others \\<R>\n 2. preserves_modes_mem \\<R>\n 3. new_vars_private \\<R>\n 4. conc.closed_glob_consistent P\n 5. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "from rrs"], ["proof (chain)\npicking this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps", "show \"closed_others \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. closed_others \\<R>", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. closed_others \\<R>", "by blast"], ["proof (state)\nthis:\n  closed_others \\<R>\n\ngoal (4 subgoals):\n 1. preserves_modes_mem \\<R>\n 2. new_vars_private \\<R>\n 3. conc.closed_glob_consistent P\n 4. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. preserves_modes_mem \\<R>\n 2. new_vars_private \\<R>\n 3. conc.closed_glob_consistent P\n 4. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "from rrs"], ["proof (chain)\npicking this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps", "show \"preserves_modes_mem \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "by blast"], ["proof (state)\nthis:\n  preserves_modes_mem \\<R>\n\ngoal (3 subgoals):\n 1. new_vars_private \\<R>\n 2. conc.closed_glob_consistent P\n 3. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. new_vars_private \\<R>\n 2. conc.closed_glob_consistent P\n 3. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "from rrs"], ["proof (chain)\npicking this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps", "show \"new_vars_private \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. new_vars_private \\<R>", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. new_vars_private \\<R>", "by blast"], ["proof (state)\nthis:\n  new_vars_private \\<R>\n\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "fix c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'"], ["proof (state)\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "let ?n = \"abs_steps \\<langle>c\\<^sub>1\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>1\\<^sub>C,mds\\<^sub>C,mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C\""], ["proof (state)\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "assume in_\\<R>\\<^sub>1: \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n     and eval\\<^sub>1\\<^sub>C: \"\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\""], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "with rrs"], ["proof (chain)\npicking this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C", "obtain c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A' where\n    neval\\<^sub>1: \"abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A ?n \\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A\" and\n    in_\\<R>\\<^sub>1': \"(\\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                  (abs_steps\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                  (abs_steps\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "have \"(\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P \\<and> abs.neval \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A ?n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and> \n                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n       \\<in> \\<R>\\<^sub>A \\<and>\n       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> P \\<and>\n       abs.neval\n        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n        (abs_steps\n          \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> P)", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                \\<in> \\<R>\\<^sub>A;\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P;\n        abs.neval\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n         (abs_steps\n           \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P", "fix c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                \\<in> \\<R>\\<^sub>A;\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P;\n        abs.neval\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n         (abs_steps\n           \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P", "assume \n    in_\\<R>\\<^sub>A: \"(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A\" and \n    in_\\<R>\\<^sub>2: \"(\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n    neval\\<^sub>2: \"abs.neval \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A ?n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\" and\n    in_P: \"(\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                \\<in> \\<R>\\<^sub>A;\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P;\n        abs.neval\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n         (abs_steps\n           \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P", "have \"\\<forall>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow> (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and> (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "fix c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "assume eval\\<^sub>2\\<^sub>C: \"\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\""], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "from in_\\<R>\\<^sub>2 eval\\<^sub>2\\<^sub>C in_P rrs"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps", "obtain\n      c\\<^sub>2\\<^sub>A'' mds\\<^sub>A'' mem\\<^sub>2\\<^sub>A'' where \n      neval\\<^sub>2': \"abs.neval \\<langle> c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A \\<rangle>\\<^sub>A (abs_steps \\<langle>c\\<^sub>2\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>2\\<^sub>C,mds\\<^sub>C,mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<langle> c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A'' \\<rangle>\\<^sub>A\" and\n      in_\\<R>\\<^sub>2': \"(\\<langle> c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A'' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>A'' mds\\<^sub>A'' mem\\<^sub>2\\<^sub>A''.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                  (abs_steps\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>A'' mds\\<^sub>A'' mem\\<^sub>2\\<^sub>A''.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                  (abs_steps\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "let ?n' = \"(abs_steps \\<langle>c\\<^sub>2\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>2\\<^sub>C,mds\\<^sub>C,mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "from rrs"], ["proof (chain)\npicking this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps", "have pe: \"simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\""], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps", "by blast"], ["proof (state)\nthis:\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "with in_\\<R>\\<^sub>A in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>2 in_P"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps", "have \"?n' = ?n\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. abs_steps\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C =\n    abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C", "unfolding simpler_refinement_safe_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n     c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P \\<longrightarrow>\n     stops\\<^sub>C\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n     stops\\<^sub>C\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n     abs_steps\n      \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n     abs_steps\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n     (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C'\n         mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C'\n         c\\<^sub>2\\<^sub>C'.\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P \\<and>\n         mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')\n\ngoal (1 subgoal):\n 1. abs_steps\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C =\n    abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C", "by fastforce"], ["proof (state)\nthis:\n  abs_steps\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C =\n  abs_steps\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "with neval\\<^sub>2 neval\\<^sub>2' abs.neval_det"], ["proof (chain)\npicking this:\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<lbrakk>abs.neval ?x ?n ?y; abs.neval ?x ?n ?y'\\<rbrakk>\n  \\<Longrightarrow> ?y = ?y'\n  abs_steps\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C =\n  abs_steps\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C", "have [simp]: \"c\\<^sub>2\\<^sub>A'' = c\\<^sub>2\\<^sub>A'\"  and [simp]: \"mds\\<^sub>A'' = mds\\<^sub>A'\" and [simp]: \"mem\\<^sub>2\\<^sub>A'' = mem\\<^sub>2\\<^sub>A'\""], ["proof (prove)\nusing this:\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\n  abs.neval\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<lbrakk>abs.neval ?x ?n ?y; abs.neval ?x ?n ?y'\\<rbrakk>\n  \\<Longrightarrow> ?y = ?y'\n  abs_steps\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C =\n  abs_steps\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. c\\<^sub>2\\<^sub>A'' = c\\<^sub>2\\<^sub>A' &&&\n    mds\\<^sub>A'' = mds\\<^sub>A' &&&\n    mem\\<^sub>2\\<^sub>A'' = mem\\<^sub>2\\<^sub>A'", "by auto"], ["proof (state)\nthis:\n  c\\<^sub>2\\<^sub>A'' = c\\<^sub>2\\<^sub>A'\n  mds\\<^sub>A'' = mds\\<^sub>A'\n  mem\\<^sub>2\\<^sub>A'' = mem\\<^sub>2\\<^sub>A'\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "from in_\\<R>\\<^sub>2'"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>", "have in_\\<R>\\<^sub>2': \"(\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>2\\<^sub>A''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "by simp"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "from eval\\<^sub>1\\<^sub>C eval\\<^sub>2\\<^sub>C in_P"], ["proof (chain)\npicking this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P", "have \n      in_P': \"(\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P", "using rrs"], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P", "unfolding secure_refinement_simpler_def\n                            simpler_refinement_safe_def"], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n      mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A \\<and>\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<and>\n      (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<and>\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<longrightarrow>\n      stops\\<^sub>C\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n      stops\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n      abs_steps\n       \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n      abs_steps\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n      (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C'\n          mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C'\n          c\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P \\<and>\n          mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')) \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P", "using in_\\<R>\\<^sub>A in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>2 in_P"], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n      mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n      \\<in> \\<R>\\<^sub>A \\<and>\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<and>\n      (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<and>\n      (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> P \\<longrightarrow>\n      stops\\<^sub>C\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n      stops\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n      abs_steps\n       \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n      abs_steps\n       \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n      (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C'\n          mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C'\n          c\\<^sub>2\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P \\<and>\n          mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')) \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P", "by auto"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "with in_\\<R>\\<^sub>2'"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P", "show \"(\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> P\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R> \\<and>\n    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> P", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R> \\<and>\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                \\<in> \\<R>\\<^sub>A;\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P;\n        abs.neval\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n         (abs_steps\n           \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P", "moreover"], ["proof (state)\nthis:\n  \\<forall>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                \\<in> \\<R>\\<^sub>A;\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P;\n        abs.neval\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n         (abs_steps\n           \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P", "have \"\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "from rrs"], ["proof (chain)\npicking this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps", "have pe: \"simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\""], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps", "by blast"], ["proof (state)\nthis:\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "with in_\\<R>\\<^sub>A in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>2 in_P"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps", "have \"stops\\<^sub>C  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C = stops\\<^sub>C  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. stops\\<^sub>C\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n    stops\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C", "unfolding simpler_refinement_safe_def"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n     c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P \\<longrightarrow>\n     stops\\<^sub>C\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n     stops\\<^sub>C\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n     abs_steps\n      \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n     abs_steps\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n     (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C'\n         mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C'\n         c\\<^sub>2\\<^sub>C'.\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P \\<and>\n         mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')\n\ngoal (1 subgoal):\n 1. stops\\<^sub>C\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n    stops\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C", "by blast"], ["proof (state)\nthis:\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "moreover"], ["proof (state)\nthis:\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "from eval\\<^sub>1\\<^sub>C"], ["proof (chain)\npicking this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C", "have \"\\<not> stops\\<^sub>C  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C\""], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<not> stops\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C", "unfolding stops\\<^sub>C_def"], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>c'.\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                c')\n               \\<notin> eval\\<^sub>C)", "by blast"], ["proof (state)\nthis:\n  \\<not> stops\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "ultimately"], ["proof (chain)\npicking this:\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\n  \\<not> stops\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C", "have \"\\<not> stops\\<^sub>C  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\""], ["proof (prove)\nusing this:\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n  stops\\<^sub>C\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\n  \\<not> stops\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<not> stops\\<^sub>C\n            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C", "by simp"], ["proof (state)\nthis:\n  \\<not> stops\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "from this"], ["proof (chain)\npicking this:\n  \\<not> stops\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C", "obtain c\\<^sub>2\\<^sub>C' mds\\<^sub>C'' mem\\<^sub>2\\<^sub>C'' where eval\\<^sub>2\\<^sub>C': \"\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C',mds\\<^sub>C'',mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C\""], ["proof (prove)\nusing this:\n  \\<not> stops\\<^sub>C\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>C' mds\\<^sub>C'' mem\\<^sub>2\\<^sub>C''.\n        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding stops\\<^sub>C_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>c'.\n             (\\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C,\n              c')\n             \\<notin> eval\\<^sub>C)\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>2\\<^sub>C' mds\\<^sub>C'' mem\\<^sub>2\\<^sub>C''.\n        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "with pe eval\\<^sub>1\\<^sub>C in_\\<R>\\<^sub>A in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>2 in_P"], ["proof (chain)\npicking this:\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C", "have in_P': \"(\\<langle>c\\<^sub>1\\<^sub>C',mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C',mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C) \\<in> P\"\n                                             and [simp]: \"mds\\<^sub>C'' = mds\\<^sub>C'\""], ["proof (prove)\nusing this:\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C)\n    \\<in> P &&&\n    mds\\<^sub>C'' = mds\\<^sub>C'", "unfolding simpler_refinement_safe_def"], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n     c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>1\\<^sub>C c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P \\<longrightarrow>\n     stops\\<^sub>C\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n     stops\\<^sub>C\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n     abs_steps\n      \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n      \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C =\n     abs_steps\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<and>\n     (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C'\n         mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C'\n         c\\<^sub>2\\<^sub>C'.\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P \\<and>\n         mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')\n  \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n  \\<in> \\<R>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C)\n    \\<in> P &&&\n    mds\\<^sub>C'' = mds\\<^sub>C'", "by blast+"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> P\n  mds\\<^sub>C'' = mds\\<^sub>C'\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "from in_P' eval\\<^sub>2\\<^sub>C'"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C", "show \"\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'. \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> P\n  \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C'', mem\\<^sub>2\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n       mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                \\<in> \\<R>\\<^sub>A;\n        (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> P;\n        abs.neval\n         \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n         (abs_steps\n           \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                            (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C", "show \n    \"\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and> (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and> (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n          \\<in> P\""], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> P", "by blast"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P \\<and>\n     abs.neval\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n      (abs_steps\n        \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P)\n\ngoal (2 subgoals):\n 1. conc.closed_glob_consistent P\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "with neval\\<^sub>1 in_\\<R>\\<^sub>1 in_\\<R>\\<^sub>1'"], ["proof (chain)\npicking this:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P \\<and>\n     abs.neval\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n      (abs_steps\n        \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P)", "show \"\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n            abs.neval \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> P \\<and>\n                abs.neval \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                    \\<in> P))\""], ["proof (prove)\nusing this:\n  abs.neval\n   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n   (abs_steps\n     \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n     mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n     \\<in> \\<R>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> P \\<and>\n     abs.neval\n      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n      (abs_steps\n        \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n         \\<in> P)\n\ngoal (1 subgoal):\n 1. \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n       abs.neval\n        \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n        n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n       (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n           mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n           \\<in> \\<R>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> P \\<and>\n           abs.neval\n            \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n           (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n               \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> P))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n     abs.neval\n      \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n      n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n     (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n         mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n         \\<in> \\<R>\\<^sub>A \\<and>\n         (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n          \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> P \\<and>\n         abs.neval\n          \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n          n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n         (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n             \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n             (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n              \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n             \\<in> \\<R> \\<and>\n             (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n              \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n             \\<in> P))\n\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "show \"conc.closed_glob_consistent P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "using rrs"], ["proof (prove)\nusing this:\n  secure_refinement_simpler \\<R>\\<^sub>A \\<R> P abs_steps\n\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "unfolding secure_refinement_simpler_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> P abs_steps \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent P", "by blast"], ["proof (state)\nthis:\n  conc.closed_glob_consistent P\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Simple Bisimulations and Simple Refinement\""], ["", "text \\<open>\n  We derive the theory of simple refinements from Murray et al. CSF 2016 from the above\n  \\emph{simpler} theory of secure refinement.\n\\<close>"], ["", "definition\n   bisim_simple\nwhere\n  \"bisim_simple \\<R>\\<^sub>A \\<equiv> \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1\\<^sub>A c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A. (\\<langle>c\\<^sub>1\\<^sub>A,mds,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>2\\<^sub>A,mds,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<longrightarrow> \n                                              c\\<^sub>1\\<^sub>A = c\\<^sub>2\\<^sub>A\""], ["", "definition\n  simple_refinement_safe\nwhere\n  \"simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<equiv> \n  \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C mem\\<^sub>2\\<^sub>C. (\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and> \n      (\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and> (\\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n           (stops\\<^sub>C \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C = stops\\<^sub>C \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<and>\n           (abs_steps \\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C = abs_steps \\<langle>c\\<^sub>A,mds\\<^sub>A,mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C) \\<and>\n           (\\<forall>mds\\<^sub>1\\<^sub>C' mds\\<^sub>2\\<^sub>C' mem\\<^sub>1\\<^sub>C' mem\\<^sub>2\\<^sub>C' c\\<^sub>1\\<^sub>C' c\\<^sub>2\\<^sub>C'. \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>1\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C  \\<and>\n                                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>2\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n                                          c\\<^sub>1\\<^sub>C' = c\\<^sub>2\\<^sub>C' \\<and> mds\\<^sub>1\\<^sub>C' = mds\\<^sub>2\\<^sub>C')\""], ["", "definition\n  secure_refinement_simple\nwhere\n  \"secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps \\<equiv>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall> c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'. \\<langle> c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<exists> c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'. abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A \\<rangle>\\<^sub>A (abs_steps \\<langle>c\\<^sub>1\\<^sub>A,mds\\<^sub>A,mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>1\\<^sub>C,mds\\<^sub>C,mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C' \\<rangle>\\<^sub>C) \\<in> \\<R>)))\""], ["", "definition\n  \\<I>simple\nwhere\n  \"\\<I>simple \\<equiv> {(\\<langle>c,mds,mem\\<rangle>\\<^sub>C,\\<langle>c',mds',mem'\\<rangle>\\<^sub>C)| c mds mem c' mds' mem'. c = c'}\""], ["", "lemma \\<I>simple_closed_glob_consistent:\n  \"conc.closed_glob_consistent \\<I>simple\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent \\<I>simple", "by(auto simp: conc.closed_glob_consistent_def \\<I>simple_def)"], ["", "lemma secure_refinement_simple:\n  assumes srs: \"secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\"\n  shows \"secure_refinement_simpler \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure_refinement_simpler \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps", "unfolding secure_refinement_simpler_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_others \\<R> \\<and>\n    preserves_modes_mem \\<R> \\<and>\n    new_vars_private \\<R> \\<and>\n    simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps \\<and>\n    conc.closed_glob_consistent \\<I>simple \\<and>\n    (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 (abs_steps\n                   \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                 \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R>)))", "proof(safe | clarsimp)+"], ["proof (state)\ngoal (6 subgoals):\n 1. closed_others \\<R>\n 2. preserves_modes_mem \\<R>\n 3. new_vars_private \\<R>\n 4. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 5. conc.closed_glob_consistent \\<I>simple\n 6. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "from srs"], ["proof (chain)\npicking this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps", "show \"closed_others \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (1 subgoal):\n 1. closed_others \\<R>", "unfolding secure_refinement_simple_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. closed_others \\<R>", "by blast"], ["proof (state)\nthis:\n  closed_others \\<R>\n\ngoal (5 subgoals):\n 1. preserves_modes_mem \\<R>\n 2. new_vars_private \\<R>\n 3. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 4. conc.closed_glob_consistent \\<I>simple\n 5. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. preserves_modes_mem \\<R>\n 2. new_vars_private \\<R>\n 3. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 4. conc.closed_glob_consistent \\<I>simple\n 5. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "from srs"], ["proof (chain)\npicking this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps", "show \"preserves_modes_mem \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "unfolding secure_refinement_simple_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R>", "by blast"], ["proof (state)\nthis:\n  preserves_modes_mem \\<R>\n\ngoal (4 subgoals):\n 1. new_vars_private \\<R>\n 2. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 3. conc.closed_glob_consistent \\<I>simple\n 4. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. new_vars_private \\<R>\n 2. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 3. conc.closed_glob_consistent \\<I>simple\n 4. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "from srs"], ["proof (chain)\npicking this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps", "show \"new_vars_private \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (1 subgoal):\n 1. new_vars_private \\<R>", "unfolding secure_refinement_simple_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. new_vars_private \\<R>", "by blast"], ["proof (state)\nthis:\n  new_vars_private \\<R>\n\ngoal (3 subgoals):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 2. conc.closed_glob_consistent \\<I>simple\n 3. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 2. conc.closed_glob_consistent \\<I>simple\n 3. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "show \"conc.closed_glob_consistent \\<I>simple\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.closed_glob_consistent \\<I>simple", "by (rule \\<I>simple_closed_glob_consistent)"], ["proof (state)\nthis:\n  conc.closed_glob_consistent \\<I>simple\n\ngoal (2 subgoals):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "from srs"], ["proof (chain)\npicking this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps", "have safe: \"simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps\""], ["proof (prove)\nusing this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (1 subgoal):\n 1. simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps", "unfolding secure_refinement_simple_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps", "by blast"], ["proof (state)\nthis:\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (2 subgoals):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "from srs"], ["proof (chain)\npicking this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps", "have simple: \"bisim_simple \\<R>\\<^sub>A\""], ["proof (prove)\nusing this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (1 subgoal):\n 1. bisim_simple \\<R>\\<^sub>A", "unfolding secure_refinement_simple_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. bisim_simple \\<R>\\<^sub>A", "by fastforce"], ["proof (state)\nthis:\n  bisim_simple \\<R>\\<^sub>A\n\ngoal (2 subgoals):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "from safe simple"], ["proof (chain)\npicking this:\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps\n  bisim_simple \\<R>\\<^sub>A", "show \"simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\""], ["proof (prove)\nusing this:\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps\n  bisim_simple \\<R>\\<^sub>A\n\ngoal (1 subgoal):\n 1. simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps", "by(fastforce simp: simpler_refinement_safe_def \\<I>simple_def simple_refinement_safe_def bisim_simple_def)"], ["proof (state)\nthis:\n  simpler_refinement_safe \\<R>\\<^sub>A \\<R> \\<I>simple abs_steps\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "fix c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             (abs_steps\n                               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                             \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>", "show \" (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<Longrightarrow>\n       \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n          abs.neval \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A (abs_steps \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n          (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n             \\<in> \\<R>;\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                         mem\\<^sub>1\\<^sub>A'.\n                         abs.neval\n                          \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                          (abs_steps\n                            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                          \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>", "using srs"], ["proof (prove)\nusing this:\n  secure_refinement_simple \\<R>\\<^sub>A \\<R> abs_steps\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n             \\<in> \\<R>;\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                         mem\\<^sub>1\\<^sub>A'.\n                         abs.neval\n                          \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                          (abs_steps\n                            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                          \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>", "unfolding secure_refinement_simple_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  simple_refinement_safe \\<R>\\<^sub>A \\<R> abs_steps \\<and>\n  bisim_simple \\<R>\\<^sub>A \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               (abs_steps\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n              \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n             \\<in> \\<R>;\n     \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n     \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                         mem\\<^sub>1\\<^sub>A'.\n                         abs.neval\n                          \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                          (abs_steps\n                            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                          \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>(\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R>;\n   \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n   \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                       mem\\<^sub>1\\<^sub>A'.\n                       abs.neval\n                        \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                        (abs_steps\n                          \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n                        \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> \\<R>\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Sound Mode Use Preservation\""], ["", "text \\<open>\n  Prove that\n  \\begin{quote}\n  acquiring a mode on the concrete version of an abstract\n      variable~@{term x}, and then mapping the new concrete mode state to the\n      corresponding abstract mode state,\n  \\end{quote}\n   is equivalent to\n   \\begin{quote}\n      first mapping the initial concrete mode\n      state to its corresponding abstract mode state and then acquiring the mode\n      on the abstract variable~@{term x}.\n   \\end{quote}\n\n   This lemma essentially justifies why a concrete program doing\n   @{term \"Acq (var\\<^sub>C_of x) SomeMode\"}\n   is a the right way to implement the abstract program doing\n   @{term \"Acq x SomeMode\"}.\n\\<close>"], ["", "(* FIXME: There might be better names for these *)"], ["", "lemma mode_acquire_refinement_helper:\n  \"mds\\<^sub>A_of (mds\\<^sub>C(SomeMode := insert (var\\<^sub>C_of x) (mds\\<^sub>C SomeMode))) =\n   (mds\\<^sub>A_of mds\\<^sub>C)(SomeMode := insert x (mds\\<^sub>A_of mds\\<^sub>C SomeMode))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mds\\<^sub>A_of\n     (mds\\<^sub>C\n      (SomeMode := insert (var\\<^sub>C_of x) (mds\\<^sub>C SomeMode))) =\n    (mds\\<^sub>A_of mds\\<^sub>C)\n    (SomeMode := insert x (mds\\<^sub>A_of mds\\<^sub>C SomeMode))", "apply(clarsimp simp: mds\\<^sub>A_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m.\n        inv var\\<^sub>C_of `\n        (range var\\<^sub>C_of \\<inter>\n         (if m = SomeMode\n          then insert (var\\<^sub>C_of x) (mds\\<^sub>C SomeMode)\n          else mds\\<^sub>C m))) =\n    (\\<lambda>m.\n        inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m))\n    (SomeMode :=\n       insert x\n        (inv var\\<^sub>C_of `\n         (range var\\<^sub>C_of \\<inter> mds\\<^sub>C SomeMode)))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       inv var\\<^sub>C_of `\n       (range var\\<^sub>C_of \\<inter>\n        (if m = SomeMode\n         then insert (var\\<^sub>C_of x) (mds\\<^sub>C SomeMode)\n         else mds\\<^sub>C m)) =\n       ((\\<lambda>m.\n            inv var\\<^sub>C_of `\n            (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m))\n        (SomeMode :=\n           insert x\n            (inv var\\<^sub>C_of `\n             (range var\\<^sub>C_of \\<inter> mds\\<^sub>C SomeMode))))\n        m", "apply(force simp: image_def inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mode_release_refinement_helper:\n  \"mds\\<^sub>A_of (mds\\<^sub>C(SomeMode := {y \\<in> mds\\<^sub>C SomeMode. y \\<noteq> (var\\<^sub>C_of x)})) =\n   (mds\\<^sub>A_of mds\\<^sub>C)(SomeMode := {y \\<in> (mds\\<^sub>A_of mds\\<^sub>C SomeMode). y \\<noteq> x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mds\\<^sub>A_of\n     (mds\\<^sub>C\n      (SomeMode :=\n         {y \\<in> mds\\<^sub>C SomeMode. y \\<noteq> var\\<^sub>C_of x})) =\n    (mds\\<^sub>A_of mds\\<^sub>C)\n    (SomeMode :=\n       {y \\<in> mds\\<^sub>A_of mds\\<^sub>C SomeMode. y \\<noteq> x})", "apply(clarsimp simp: mds\\<^sub>A_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m.\n        inv var\\<^sub>C_of `\n        (range var\\<^sub>C_of \\<inter>\n         (if m = SomeMode\n          then {y \\<in> mds\\<^sub>C SomeMode. y \\<noteq> var\\<^sub>C_of x}\n          else mds\\<^sub>C m))) =\n    (\\<lambda>m.\n        inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m))\n    (SomeMode :=\n       {y \\<in> inv var\\<^sub>C_of `\n                (range var\\<^sub>C_of \\<inter> mds\\<^sub>C SomeMode).\n        y \\<noteq> x})", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       inv var\\<^sub>C_of `\n       (range var\\<^sub>C_of \\<inter>\n        (if m = SomeMode\n         then {y \\<in> mds\\<^sub>C SomeMode. y \\<noteq> var\\<^sub>C_of x}\n         else mds\\<^sub>C m)) =\n       ((\\<lambda>m.\n            inv var\\<^sub>C_of `\n            (range var\\<^sub>C_of \\<inter> mds\\<^sub>C m))\n        (SomeMode :=\n           {y \\<in> inv var\\<^sub>C_of `\n                    (range var\\<^sub>C_of \\<inter> mds\\<^sub>C SomeMode).\n            y \\<noteq> x}))\n        m", "apply (force simp: image_def inv_f_f[OF var\\<^sub>C_of_inj])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  preserves_locally_sound_mode_use :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow> bool\"\nwhere\n  \"preserves_locally_sound_mode_use \\<R> \\<equiv>\n   \\<forall>lc\\<^sub>A lc\\<^sub>C.\n      (abs.locally_sound_mode_use lc\\<^sub>A \\<and> (lc\\<^sub>A, lc\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n      conc.locally_sound_mode_use lc\\<^sub>C)\""], ["", "lemma secure_refinement_loc_reach:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes in_\\<R>:  \"(\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n  assumes loc_reach\\<^sub>C: \"\\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<in> conc.loc_reach \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\"\n  shows \"\\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n      (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n      \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "using loc_reach\\<^sub>C"], ["proof (prove)\nusing this:\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "proof(induct rule: conc.loc_reach.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>fst (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n               (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "case (refl)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>fst (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n               (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>fst (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n               (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "using in_\\<R> abs.loc_reach.refl"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>fst (fst ?lc), snd (fst ?lc), snd ?lc\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach ?lc\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>fst (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n               (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "by force"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>fst (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n             (fst \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C), snd\n       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "case (step c\\<^sub>C' mds\\<^sub>C' mem\\<^sub>C' c\\<^sub>C'' mds\\<^sub>C'' mem\\<^sub>C'')"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "from step(2)"], ["proof (chain)\npicking this:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "obtain c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A' where \n    in_\\<R>': \"(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\" and \n    loc_reach\\<^sub>A: \"\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A \""], ["proof (prove)\nusing this:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n        \\<lbrakk>(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n         \\<in> abs.loc_reach\n                \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "from rr in_\\<R>' step(3)"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C", "obtain n c\\<^sub>A'' mds\\<^sub>A'' mem\\<^sub>A'' where \n    neval\\<^sub>A: \"abs.neval \\<langle> c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A' \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A'' \\<rangle>\\<^sub>A\" and\n    in_\\<R>'': \"(\\<langle> c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A'' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C'' \\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>n c\\<^sub>A'' mds\\<^sub>A'' mem\\<^sub>A''.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n         \\<in> \\<R>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>n c\\<^sub>A'' mds\\<^sub>A'' mem\\<^sub>A''.\n        \\<lbrakk>abs.neval\n                  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A;\n         (\\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n         \\<in> \\<R>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  abs.neval \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "from neval\\<^sub>A loc_reach\\<^sub>A"], ["proof (chain)\npicking this:\n  abs.neval \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "have \"\\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\""], ["proof (prove)\nusing this:\n  abs.neval \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n    \\<in> abs.loc_reach\n           \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "using abs.neval_loc_reach"], ["proof (prove)\nusing this:\n  abs.neval \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n   n \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n  \\<lbrakk>abs.neval ?lc' ?n ?lc''; ?lc' \\<in> abs.loc_reach ?lc\\<rbrakk>\n  \\<Longrightarrow> ?lc'' \\<in> abs.loc_reach ?lc\n\ngoal (1 subgoal):\n 1. \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n    \\<in> abs.loc_reach\n           \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "by blast"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c'', mds'', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "with in_\\<R>''"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "show ?case"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A'', mds\\<^sub>A'', mem\\<^sub>A''\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "by blast"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C'', mds\\<^sub>C'', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "case (mem_diff c\\<^sub>C' mds\\<^sub>C' mem\\<^sub>C' mem\\<^sub>C'')"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n  \\<forall>x.\n     var_asm_not_written mds\\<^sub>C' x \\<longrightarrow>\n     mem\\<^sub>C' x = mem\\<^sub>C'' x \\<and>\n     dma\\<^sub>C mem\\<^sub>C' x = dma\\<^sub>C mem\\<^sub>C'' x\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "from mem_diff(2)"], ["proof (chain)\npicking this:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "obtain c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A' where \n    in_\\<R>': \"(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\" and \n    loc_reach\\<^sub>A: \"\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A \""], ["proof (prove)\nusing this:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n        \\<lbrakk>(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n         \\<in> abs.loc_reach\n                \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "from rr"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P", "have mm: \"preserves_modes_mem \\<R>\" and co: \"closed_others \\<R>\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R> &&& closed_others \\<R>", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  new_vars_private \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P)))))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R> &&& closed_others \\<R>", "by blast+"], ["proof (state)\nthis:\n  preserves_modes_mem \\<R>\n  closed_others \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "from preserves_modes_memD[OF mm in_\\<R>']"], ["proof (chain)\npicking this:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C' \\<and>\n  mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'", "have \n    mem\\<^sub>A'_def: \"mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\" and mds\\<^sub>A'_def: \"mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'\""], ["proof (prove)\nusing this:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C' \\<and>\n  mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C' &&&\n    mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'", "by simp+"], ["proof (state)\nthis:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\n  mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "hence in_\\<R>': \"(\\<langle>c\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\"\n   and loc_reach\\<^sub>A: \"(\\<langle>c\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A) \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\""], ["proof (prove)\nusing this:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\n  mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>A_of\n    mem\\<^sub>C'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R> &&&\n    \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                          mds\\<^sub>C', mem\\<^sub>A_of\n   mem\\<^sub>C'\\<rangle>\\<^sub>A\n    \\<in> abs.loc_reach\n           \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "using in_\\<R>' loc_reach\\<^sub>A"], ["proof (prove)\nusing this:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\n  mds\\<^sub>A' = mds\\<^sub>A_of mds\\<^sub>C'\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>A_of\n    mem\\<^sub>C'\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n    \\<in> \\<R> &&&\n    \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                          mds\\<^sub>C', mem\\<^sub>A_of\n   mem\\<^sub>C'\\<rangle>\\<^sub>A\n    \\<in> abs.loc_reach\n           \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "by simp+"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "with mem_diff(3) co"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     var_asm_not_written mds\\<^sub>C' x \\<longrightarrow>\n     mem\\<^sub>C' x = mem\\<^sub>C'' x \\<and>\n     dma\\<^sub>C mem\\<^sub>C' x = dma\\<^sub>C mem\\<^sub>C'' x\n  closed_others \\<R>\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "have \"(\\<langle>c\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>C''\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     var_asm_not_written mds\\<^sub>C' x \\<longrightarrow>\n     mem\\<^sub>C' x = mem\\<^sub>C'' x \\<and>\n     dma\\<^sub>C mem\\<^sub>C' x = dma\\<^sub>C mem\\<^sub>C'' x\n  closed_others \\<R>\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>A_of\n    mem\\<^sub>C''\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "unfolding closed_others_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     var_asm_not_written mds\\<^sub>C' x \\<longrightarrow>\n     mem\\<^sub>C' x = mem\\<^sub>C'' x \\<and>\n     dma\\<^sub>C mem\\<^sub>C' x = dma\\<^sub>C mem\\<^sub>C'' x\n  \\<forall>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     (\\<forall>x.\n         mem\\<^sub>C x \\<noteq> mem\\<^sub>C' x \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n     (\\<forall>x.\n         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C' x \\<longrightarrow>\n         \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n     \\<in> \\<R>\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                           mds\\<^sub>C', mem\\<^sub>A_of\n    mem\\<^sub>C''\\<rangle>\\<^sub>A,\n     \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n    \\<in> \\<R>", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "moreover"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "have \"\\<langle>c\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', mem\\<^sub>A_of mem\\<^sub>C''\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                          mds\\<^sub>C', mem\\<^sub>A_of\n   mem\\<^sub>C''\\<rangle>\\<^sub>A\n    \\<in> abs.loc_reach\n           \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "apply(rule abs.loc_reach.mem_diff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<langle>c\\<^sub>A', mds\\<^sub>A_of mds\\<^sub>C', ?mem'\\<rangle>\\<^sub>A\n    \\<in> abs.loc_reach\n           \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n 2. \\<forall>x.\n       var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C') x \\<longrightarrow>\n       ?mem' x = mem\\<^sub>A_of mem\\<^sub>C'' x \\<and>\n       dma\\<^sub>A ?mem' x = dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C'') x", "apply(rule loc_reach\\<^sub>A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C') x \\<longrightarrow>\n       mem\\<^sub>A_of mem\\<^sub>C' x = mem\\<^sub>A_of mem\\<^sub>C'' x \\<and>\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C') x =\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C'') x", "using mem_diff(3)"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     var_asm_not_written mds\\<^sub>C' x \\<longrightarrow>\n     mem\\<^sub>C' x = mem\\<^sub>C'' x \\<and>\n     dma\\<^sub>C mem\\<^sub>C' x = dma\\<^sub>C mem\\<^sub>C'' x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C') x \\<longrightarrow>\n       mem\\<^sub>A_of mem\\<^sub>C' x = mem\\<^sub>A_of mem\\<^sub>C'' x \\<and>\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C') x =\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C'') x", "using calculation in_\\<R>' in_\\<R>_dma' mem\\<^sub>A_of_def mm var_writable\\<^sub>A"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     var_asm_not_written mds\\<^sub>C' x \\<longrightarrow>\n     mem\\<^sub>C' x = mem\\<^sub>C'' x \\<and>\n     dma\\<^sub>C mem\\<^sub>C' x = dma\\<^sub>C mem\\<^sub>C'' x\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> dma\\<^sub>A ?mem\\<^sub>A ?x\\<^sub>A =\n                    dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n  mem\\<^sub>A_of ?mem\\<^sub>C \\<equiv>\n  \\<lambda>x\\<^sub>A. ?mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)\n  preserves_modes_mem \\<R>\n  \\<not> var_asm_not_written ?mds\\<^sub>C\n          (var\\<^sub>C_of ?x) \\<Longrightarrow>\n  \\<not> var_asm_not_written (mds\\<^sub>A_of ?mds\\<^sub>C) ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       var_asm_not_written (mds\\<^sub>A_of mds\\<^sub>C') x \\<longrightarrow>\n       mem\\<^sub>A_of mem\\<^sub>C' x = mem\\<^sub>A_of mem\\<^sub>C'' x \\<and>\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C') x =\n       dma\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C'') x", "by fastforce"], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C''\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\\<^sub>C\n                \\<in> conc.loc_reach\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C;\n        \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n           (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c', mds', mem'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n           \\<in> abs.loc_reach\n                  \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A;\n        \\<forall>x.\n           var_asm_not_written mds' x \\<longrightarrow>\n           mem' x = mem'' x \\<and>\n           dma\\<^sub>C mem' x = dma\\<^sub>C mem'' x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                            (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c', mds', mem''\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                            \\<in> abs.loc_reach\n                                   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "ultimately"], ["proof (chain)\npicking this:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C''\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "show ?case"], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                         mds\\<^sub>C', mem\\<^sub>A_of\n  mem\\<^sub>C''\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A_of\n                        mds\\<^sub>C', mem\\<^sub>A_of\n mem\\<^sub>C''\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<and>\n       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n       \\<in> abs.loc_reach\n              \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "by blast"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n     (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C''\\<rangle>\\<^sub>C)\n     \\<in> \\<R> \\<and>\n     \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach\n            \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal:\nNo subgoals!", "qed"], ["", "definition preserves_local_guarantee_compliance ::\n  \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation \\<Rightarrow> bool\"\nwhere\n  \"preserves_local_guarantee_compliance \\<R> \\<equiv>\n    \\<forall>cm\\<^sub>A mem\\<^sub>A cm\\<^sub>C mem\\<^sub>C.\n      abs.respects_own_guarantees cm\\<^sub>A \\<and>\n      ((cm\\<^sub>A, mem\\<^sub>A), (cm\\<^sub>C, mem\\<^sub>C)) \\<in> \\<R> \\<longrightarrow>\n        conc.respects_own_guarantees cm\\<^sub>C\""], ["", "lemma preserves_local_guarantee_compliance_def2:\n  \"preserves_local_guarantee_compliance \\<R> \\<equiv>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C.\n      abs.respects_own_guarantees (c\\<^sub>A, mds\\<^sub>A) \\<and>\n      (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n        conc.respects_own_guarantees (c\\<^sub>C, mds\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_local_guarantee_compliance \\<R> \\<equiv>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       abs.respects_own_guarantees (c\\<^sub>A, mds\\<^sub>A) \\<and>\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       conc.respects_own_guarantees (c\\<^sub>C, mds\\<^sub>C)", "unfolding preserves_local_guarantee_compliance_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>cm\\<^sub>A mem\\<^sub>A cm\\<^sub>C mem\\<^sub>C.\n       abs.respects_own_guarantees cm\\<^sub>A \\<and>\n       ((cm\\<^sub>A, mem\\<^sub>A), cm\\<^sub>C, mem\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       conc.respects_own_guarantees cm\\<^sub>C \\<equiv>\n    \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       abs.respects_own_guarantees (c\\<^sub>A, mds\\<^sub>A) \\<and>\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       conc.respects_own_guarantees (c\\<^sub>C, mds\\<^sub>C)", "by simp"], ["", "(* This lemma proves it is sufficient to require a refinement relation to preserve\n   guarantee compliance to ensure that it also preserves locally sound mode use.\n  TODO: Should preserves_guarantee_compliance become part of secure_refinement's requirements? *)"], ["", "lemma locally_sound_mode_use_preservation:\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes preserves_guarantee_compliance: \"preserves_local_guarantee_compliance \\<R>\"\n  shows \"preserves_locally_sound_mode_use \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_locally_sound_mode_use \\<R>", "unfolding preserves_locally_sound_mode_use_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>lc\\<^sub>A lc\\<^sub>C.\n       abs.locally_sound_mode_use lc\\<^sub>A \\<and>\n       (lc\\<^sub>A, lc\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n       conc.locally_sound_mode_use lc\\<^sub>C", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       \\<lbrakk>abs.locally_sound_mode_use\n                 \\<langle>a, b, ba\\<rangle>\\<^sub>A;\n        (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n         \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n        \\<in> \\<R>\\<rbrakk>\n       \\<Longrightarrow> conc.locally_sound_mode_use\n                          \\<langle>aa, bb, bc\\<rangle>\\<^sub>C", "fix c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       \\<lbrakk>abs.locally_sound_mode_use\n                 \\<langle>a, b, ba\\<rangle>\\<^sub>A;\n        (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n         \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n        \\<in> \\<R>\\<rbrakk>\n       \\<Longrightarrow> conc.locally_sound_mode_use\n                          \\<langle>aa, bb, bc\\<rangle>\\<^sub>C", "assume locally_sound\\<^sub>A: \"abs.locally_sound_mode_use \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\" and\n         in_\\<R>: \"(\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (state)\nthis:\n  abs.locally_sound_mode_use\n   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<And>a b ba aa bb bc.\n       \\<lbrakk>abs.locally_sound_mode_use\n                 \\<langle>a, b, ba\\<rangle>\\<^sub>A;\n        (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n         \\<langle>aa, bb, bc\\<rangle>\\<^sub>C)\n        \\<in> \\<R>\\<rbrakk>\n       \\<Longrightarrow> conc.locally_sound_mode_use\n                          \\<langle>aa, bb, bc\\<rangle>\\<^sub>C", "show \"conc.locally_sound_mode_use \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.locally_sound_mode_use\n     \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C", "unfolding conc.locally_sound_mode_use_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>lc'\\<in>conc.loc_reach\n                      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C.\n       conc.respects_own_guarantees (fst lc')", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<langle>a, b, ba\\<rangle>\\<^sub>C\n       \\<in> conc.loc_reach\n              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C \\<Longrightarrow>\n       conc.respects_own_guarantees (a, b)", "fix c\\<^sub>C' mds\\<^sub>C' mem\\<^sub>C'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<langle>a, b, ba\\<rangle>\\<^sub>C\n       \\<in> conc.loc_reach\n              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C \\<Longrightarrow>\n       conc.respects_own_guarantees (a, b)", "assume loc_reach\\<^sub>C: \"\\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C \\<in> conc.loc_reach \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\""], ["proof (state)\nthis:\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<langle>a, b, ba\\<rangle>\\<^sub>C\n       \\<in> conc.loc_reach\n              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C \\<Longrightarrow>\n       conc.respects_own_guarantees (a, b)", "from rr in_\\<R> loc_reach\\<^sub>C"], ["proof (chain)\npicking this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C", "obtain c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A' where\n        in_\\<R>': \"(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\" and\n        loc_reach\\<^sub>A: \"\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A \\<in> abs.loc_reach \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\""], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n        \\<lbrakk>(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n         \\<in> abs.loc_reach\n                \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using secure_refinement_loc_reach"], ["proof (prove)\nusing this:\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C\n  \\<in> conc.loc_reach\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n  \\<lbrakk>secure_refinement ?\\<R>\\<^sub>A ?\\<R> ?P;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>;\n   \\<langle>?c\\<^sub>C', ?mds\\<^sub>C', ?mem\\<^sub>C'\\<rangle>\\<^sub>C\n   \\<in> conc.loc_reach\n          \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n                       (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                        \\<langle>?c\\<^sub>C', ?mds\\<^sub>C', ?mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> ?\\<R> \\<and>\n                       \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n                       \\<in> abs.loc_reach\n                              \\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>A' mds\\<^sub>A' mem\\<^sub>A'.\n        \\<lbrakk>(\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R>;\n         \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n         \\<in> abs.loc_reach\n                \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<langle>a, b, ba\\<rangle>\\<^sub>C\n       \\<in> conc.loc_reach\n              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C \\<Longrightarrow>\n       conc.respects_own_guarantees (a, b)", "from locally_sound\\<^sub>A loc_reach\\<^sub>A"], ["proof (chain)\npicking this:\n  abs.locally_sound_mode_use\n   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A", "have respects_guarantees\\<^sub>A': \"abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')\""], ["proof (prove)\nusing this:\n  abs.locally_sound_mode_use\n   \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')", "unfolding abs.locally_sound_mode_use_def2"], ["proof (prove)\nusing this:\n  \\<forall>lc'\\<in>abs.loc_reach\n                    \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A.\n     abs.respects_own_guarantees (fst lc')\n  \\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach\n         \\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')", "by auto"], ["proof (state)\nthis:\n  abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')\n\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<langle>a, b, ba\\<rangle>\\<^sub>C\n       \\<in> conc.loc_reach\n              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C \\<Longrightarrow>\n       conc.respects_own_guarantees (a, b)", "with preserves_guarantee_compliance in_\\<R>'"], ["proof (chain)\npicking this:\n  preserves_local_guarantee_compliance \\<R>\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')", "show \"conc.respects_own_guarantees (c\\<^sub>C', mds\\<^sub>C')\""], ["proof (prove)\nusing this:\n  preserves_local_guarantee_compliance \\<R>\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')\n\ngoal (1 subgoal):\n 1. conc.respects_own_guarantees (c\\<^sub>C', mds\\<^sub>C')", "unfolding preserves_local_guarantee_compliance_def"], ["proof (prove)\nusing this:\n  \\<forall>cm\\<^sub>A mem\\<^sub>A cm\\<^sub>C mem\\<^sub>C.\n     abs.respects_own_guarantees cm\\<^sub>A \\<and>\n     ((cm\\<^sub>A, mem\\<^sub>A), cm\\<^sub>C, mem\\<^sub>C)\n     \\<in> \\<R> \\<longrightarrow>\n     conc.respects_own_guarantees cm\\<^sub>C\n  (\\<langle>c\\<^sub>A', mds\\<^sub>A', mem\\<^sub>A'\\<rangle>\\<^sub>A,\n   \\<langle>c\\<^sub>C', mds\\<^sub>C', mem\\<^sub>C'\\<rangle>\\<^sub>C)\n  \\<in> \\<R>\n  abs.respects_own_guarantees (c\\<^sub>A', mds\\<^sub>A')\n\ngoal (1 subgoal):\n 1. conc.respects_own_guarantees (c\\<^sub>C', mds\\<^sub>C')", "by blast"], ["proof (state)\nthis:\n  conc.respects_own_guarantees (c\\<^sub>C', mds\\<^sub>C')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  conc.locally_sound_mode_use\n   \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Refinement without changing the Memory Model\""], ["", "text \\<open>\n  Here we define a locale which restricts the refinement to be between an abstract and\n  concrete programs that share identical memory models: i,e. have the same set of variables.\n  This allows us to derive simpler versions of the conditions that are likely to be easier\n  to work with for initial experimentation.\n\\<close>"], ["", "locale sifum_refinement_same_mem = \n  abs: sifum_security dma \\<C>_vars \\<C> eval\\<^sub>A some_val +\n  conc: sifum_security dma \\<C>_vars \\<C> eval\\<^sub>C some_val\n  for dma :: \"('Var,'Val) Mem \\<Rightarrow> 'Var \\<Rightarrow> Sec\"\n  and \\<C>_vars :: \"'Var \\<Rightarrow> 'Var set\"\n  and \\<C> :: \"'Var set\"\n  and eval\\<^sub>A :: \"('Com\\<^sub>A, 'Var, 'Val) LocalConf rel\"\n  and eval\\<^sub>C :: \"('Com\\<^sub>C, 'Var, 'Val) LocalConf rel\"\n  and some_val :: \"'Val\""], ["", "sublocale sifum_refinement_same_mem \\<subseteq> \n          gen_refine: sifum_refinement dma dma \\<C>_vars \\<C>_vars \\<C> \\<C> eval\\<^sub>A eval\\<^sub>C some_val id"], ["proof (prove)\ngoal (1 subgoal):\n 1. sifum_refinement dma dma \\<C>_vars \\<C>_vars eval\\<^sub>A eval\\<^sub>C\n     id &&&\n    (\\<C> \\<equiv> \\<Union> (range \\<C>_vars)) &&&\n    \\<C> \\<equiv> \\<Union> (range \\<C>_vars)", "by(unfold_locales, simp_all)"], ["", "context sifum_refinement_same_mem begin"], ["", "lemma [simp]:\n  \"gen_refine.new_vars_private \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_refine.new_vars_private \\<R>", "unfolding gen_refine.new_vars_private_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<forall>v\\<^sub>C.\n               (mem\\<^sub>1\\<^sub>C' v\\<^sub>C \\<noteq>\n                mem\\<^sub>1\\<^sub>C v\\<^sub>C \\<or>\n                dma mem\\<^sub>1\\<^sub>C' v\\<^sub>C\n                < dma mem\\<^sub>1\\<^sub>C v\\<^sub>C) \\<and>\n               v\\<^sub>C \\<notin> range id \\<longrightarrow>\n               v\\<^sub>C \\<in> mds\\<^sub>C' AsmNoReadOrWrite) \\<and>\n           mds\\<^sub>C AsmNoReadOrWrite - range id\n           \\<subseteq> mds\\<^sub>C' AsmNoReadOrWrite - range id)", "by simp"], ["", "definition\n  preserves_modes_mem :: \"('Com\\<^sub>A, 'Var, 'Val, 'Com\\<^sub>C, 'Var) state_relation \\<Rightarrow> bool\"\nwhere\n  \"preserves_modes_mem \\<R> \\<equiv> \n  (\\<forall> c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C. (\\<langle> c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>C \\<and> mds\\<^sub>A = mds\\<^sub>C)\""], ["", "definition\n  closed_others :: \"('Com\\<^sub>A, 'Var, 'Val, 'Com\\<^sub>C, 'Var) state_relation \\<Rightarrow> bool\"\nwhere\n  \"closed_others \\<R> \\<equiv> \n  (\\<forall> c\\<^sub>A mds mem c\\<^sub>C mem'. (\\<langle> c\\<^sub>A, mds, mem \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds, mem \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n   (\\<forall>x. mem x \\<noteq> mem' x \\<longrightarrow> \\<not> var_asm_not_written mds x) \\<longrightarrow>\n   (\\<forall>x. dma mem x \\<noteq> dma mem' x \\<longrightarrow> \\<not> var_asm_not_written mds x) \\<longrightarrow>\n         (\\<langle> c\\<^sub>A, mds, mem' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds, mem' \\<rangle>\\<^sub>C) \\<in> \\<R>)\""], ["", "lemma [simp]:\n  \"gen_refine.mds\\<^sub>A_of x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_refine.mds\\<^sub>A_of x = x", "by(simp add: gen_refine.mds\\<^sub>A_of_def)"], ["", "lemma [simp]:\n  \"gen_refine.mem\\<^sub>A_of x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_refine.mem\\<^sub>A_of x = x", "by(simp add: gen_refine.mem\\<^sub>A_of_def)"], ["", "lemma [simp]:\n  \"preserves_modes_mem \\<R> \\<Longrightarrow>\n  gen_refine.closed_others \\<R> = closed_others \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_modes_mem \\<R> \\<Longrightarrow>\n    gen_refine.closed_others \\<R> = closed_others \\<R>", "unfolding closed_others_def\n            gen_refine.closed_others_def\n            preserves_modes_mem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n       mem\\<^sub>C.\n       (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n        \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n       \\<in> \\<R> \\<longrightarrow>\n       mem\\<^sub>A = mem\\<^sub>C \\<and>\n       mds\\<^sub>A = mds\\<^sub>C \\<Longrightarrow>\n    (\\<forall>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n        (\\<langle>c\\<^sub>A, gen_refine.mds\\<^sub>A_of\n                              mds\\<^sub>C, gen_refine.mem\\<^sub>A_of\n      mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>x.\n            mem\\<^sub>C x \\<noteq> mem\\<^sub>C' x \\<longrightarrow>\n            \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n        (\\<forall>x.\n            dma mem\\<^sub>C x \\<noteq> dma mem\\<^sub>C' x \\<longrightarrow>\n            \\<not> var_asm_not_written mds\\<^sub>C x) \\<longrightarrow>\n        (\\<langle>c\\<^sub>A, gen_refine.mds\\<^sub>A_of\n                              mds\\<^sub>C, gen_refine.mem\\<^sub>A_of\n      mem\\<^sub>C'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>) =\n    (\\<forall>c\\<^sub>A mds mem c\\<^sub>C mem'.\n        (\\<langle>c\\<^sub>A, mds, mem\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds, mem\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>x.\n            mem x \\<noteq> mem' x \\<longrightarrow>\n            \\<not> var_asm_not_written mds x) \\<longrightarrow>\n        (\\<forall>x.\n            dma mem x \\<noteq> dma mem' x \\<longrightarrow>\n            \\<not> var_asm_not_written mds x) \\<longrightarrow>\n        (\\<langle>c\\<^sub>A, mds, mem'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds, mem'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>)", "by auto"], ["", "lemma [simp]:\n  \"gen_refine.preserves_modes_mem \\<R> = preserves_modes_mem \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_refine.preserves_modes_mem \\<R> = preserves_modes_mem \\<R>", "unfolding gen_refine.preserves_modes_mem_def2 preserves_modes_mem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>C.\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        mem\\<^sub>A = gen_refine.mem\\<^sub>A_of mem\\<^sub>C \\<and>\n        mds\\<^sub>A = gen_refine.mds\\<^sub>A_of mds\\<^sub>C) =\n    (\\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n        mem\\<^sub>C.\n        (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        mem\\<^sub>A = mem\\<^sub>C \\<and> mds\\<^sub>A = mds\\<^sub>C)", "by simp"], ["", "definition\n  secure_refinement :: \"('Com\\<^sub>A, 'Var, 'Val) LocalConf rel \\<Rightarrow> ('Com\\<^sub>A, 'Var, 'Val, 'Com\\<^sub>C, 'Var) state_relation \\<Rightarrow> \n                          ('Com\\<^sub>C, 'Var, 'Val) LocalConf rel \\<Rightarrow> bool\"\nwhere\n  \"secure_refinement \\<R>\\<^sub>A \\<R> P \\<equiv>\n  closed_others \\<R> \\<and>\n  preserves_modes_mem \\<R> \\<and>\n  conc.closed_glob_consistent P \\<and>\n  (\\<forall> c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C. \n   (\\<langle> c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1 \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1 \\<rangle>\\<^sub>C) \\<in> \\<R> \\<longrightarrow>\n    (\\<forall> c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'. \\<langle> c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1 \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1' \\<rangle>\\<^sub>C \\<longrightarrow>\n     (\\<exists> n c\\<^sub>1\\<^sub>A'. abs.neval \\<langle> c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1 \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1' \\<rangle>\\<^sub>A \\<and>\n                   (\\<langle> c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n       (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2'. \n         (\\<langle> c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1 \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2 \\<rangle>\\<^sub>A) \\<in> \\<R>\\<^sub>A \\<and>\n         (\\<langle> c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2 \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2 \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n         (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C) \\<in> P  \\<and>\n         abs.neval \\<langle> c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2 \\<rangle>\\<^sub>A n \\<langle> c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2' \\<rangle>\\<^sub>A  \\<longrightarrow>\n           (\\<exists> c\\<^sub>2\\<^sub>C' . \\<langle> c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2 \\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle> c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2' \\<rangle>\\<^sub>C \\<and>\n                   (\\<langle> c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2' \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2' \\<rangle>\\<^sub>C) \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C) \\<in> P )))))\""], ["", "lemma preserves_modes_memD:\n  \"preserves_modes_mem \\<R> \\<Longrightarrow>\n(\\<langle> c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A \\<rangle>\\<^sub>A, \\<langle> c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C \\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n      mem\\<^sub>A = mem\\<^sub>C \\<and> mds\\<^sub>A = mds\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preserves_modes_mem \\<R>;\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>A = mem\\<^sub>C \\<and>\n                      mds\\<^sub>A = mds\\<^sub>C", "by(auto simp: preserves_modes_mem_def)"], ["", "lemma [simp]:\n  \"gen_refine.secure_refinement \\<R>\\<^sub>A \\<R> P = secure_refinement \\<R>\\<^sub>A \\<R> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_refine.secure_refinement \\<R>\\<^sub>A \\<R> P =\n    secure_refinement \\<R>\\<^sub>A \\<R> P", "unfolding gen_refine.secure_refinement_def secure_refinement_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (gen_refine.closed_others \\<R> \\<and>\n     gen_refine.preserves_modes_mem \\<R> \\<and>\n     gen_refine.new_vars_private \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n         c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                 mem\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                     c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                     c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P)))))) =\n    (closed_others \\<R> \\<and>\n     preserves_modes_mem \\<R> \\<and>\n     conc.closed_glob_consistent P \\<and>\n     (\\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n         (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n         \\<in> \\<R> \\<longrightarrow>\n         (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n             \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n             (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                 abs.neval\n                  \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                  n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                 (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                  \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                 \\<in> \\<R> \\<and>\n                 (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                     c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                     (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                     \\<in> \\<R>\\<^sub>A \\<and>\n                     (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                     \\<in> \\<R> \\<and>\n                     (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                     \\<in> P \\<and>\n                     abs.neval\n                      \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                      n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                     (\\<exists>c\\<^sub>2\\<^sub>C'.\n                         \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                         (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                         \\<in> P))))))", "apply safe"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>gen_refine.closed_others \\<R>;\n     gen_refine.preserves_modes_mem \\<R>; gen_refine.new_vars_private \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                mem\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                    c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> closed_others \\<R>\n 2. \\<lbrakk>gen_refine.closed_others \\<R>;\n     gen_refine.preserves_modes_mem \\<R>; gen_refine.new_vars_private \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                mem\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                    c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> preserves_modes_mem \\<R>\n 3. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 4. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.closed_others \\<R>\n 5. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.preserves_modes_mem \\<R>\n 6. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.new_vars_private \\<R>\n 7. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply fastforce"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>gen_refine.closed_others \\<R>;\n     gen_refine.preserves_modes_mem \\<R>; gen_refine.new_vars_private \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n        c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                mem\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                    c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                    mem\\<^sub>2\\<^sub>A'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> preserves_modes_mem \\<R>\n 2. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 3. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.closed_others \\<R>\n 4. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.preserves_modes_mem \\<R>\n 5. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.new_vars_private \\<R>\n 6. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply fastforce"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.closed_others \\<R>\n 3. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.preserves_modes_mem \\<R>\n 4. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.new_vars_private \\<R>\n 5. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "defer"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.closed_others \\<R>\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.preserves_modes_mem \\<R>\n 3. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.new_vars_private \\<R>\n 4. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 5. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.preserves_modes_mem \\<R>\n 2. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.new_vars_private \\<R>\n 3. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 4. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n     conc.closed_glob_consistent P;\n     \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R> \\<longrightarrow>\n        (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n            (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                abs.neval\n                 \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                 n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<and>\n                (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                    c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                    (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                    \\<in> \\<R>\\<^sub>A \\<and>\n                    (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> \\<R> \\<and>\n                    (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                     \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                    \\<in> P \\<and>\n                    abs.neval\n                     \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                     n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                    (\\<exists>c\\<^sub>2\\<^sub>C'.\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                        (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> \\<R> \\<and>\n                        (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                         \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                        \\<in> P))))\\<rbrakk>\n    \\<Longrightarrow> gen_refine.new_vars_private \\<R>\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 3. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply ((drule spec)+, erule (1) impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C;\n        \\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n           \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n               abs.neval\n                \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                   c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                   mem\\<^sub>2\\<^sub>A'.\n                   (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                   \\<in> \\<R>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                   \\<in> P \\<and>\n                   abs.neval\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                   (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                       \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                       \\<in> P)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply ((drule spec)+, erule (1) impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C;\n        \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n           abs.neval\n            \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A n\n            \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n               mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n               (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n               \\<in> \\<R>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n               \\<in> P \\<and>\n               abs.neval\n                \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n               (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                   \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> P))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply (clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1' n c\\<^sub>1\\<^sub>A'\n       mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C;\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A n\n         \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A;\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n           mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n           \\<in> \\<R>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> P \\<and>\n           abs.neval\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n           (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n               \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> P)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply(rename_tac  n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1' n c\\<^sub>1\\<^sub>A'\n       mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C;\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A n\n         \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A;\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n           mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n           \\<in> \\<R>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> P \\<and>\n           abs.neval\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n           (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n               \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> P)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply(rule_tac x=n in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1' n c\\<^sub>1\\<^sub>A'\n       mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C;\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A n\n         \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A;\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n           mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n           \\<in> \\<R>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> P \\<and>\n           abs.neval\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n           (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n               \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> P)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                                c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                                mem\\<^sub>2'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                    \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply(rule_tac x=c\\<^sub>1\\<^sub>A' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C\n       c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1' n c\\<^sub>1\\<^sub>A'\n       mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n       \\<lbrakk>gen_refine.closed_others \\<R>;\n        gen_refine.preserves_modes_mem \\<R>;\n        gen_refine.new_vars_private \\<R>; conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C;\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A n\n         \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A;\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A c\\<^sub>2\\<^sub>C\n           mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n           \\<in> \\<R>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> P \\<and>\n           abs.neval\n            \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n           (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n               \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n               \\<in> P)\\<rbrakk>\n       \\<Longrightarrow> abs.neval\n                          \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                          n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                         (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R> \\<and>\n                         (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\n                             c\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                             mem\\<^sub>2'.\n                             (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                              \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                             \\<in> \\<R>\\<^sub>A \\<and>\n                             (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                              \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                             \\<in> \\<R> \\<and>\n                             (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                              \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                             \\<in> P \\<and>\n                             abs.neval\n                              \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                              n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                             (\\<exists>c\\<^sub>2\\<^sub>C'.\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                 \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                                 (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                                  \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                 \\<in> \\<R> \\<and>\n                                 (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                                  \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                                 \\<in> P))\n 2. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply(fastforce dest: preserves_modes_memD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply (frule (1) preserves_modes_memD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        mem\\<^sub>1\\<^sub>A = mem\\<^sub>1\\<^sub>C \\<and>\n        mds\\<^sub>A = mds\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds mem\\<^sub>1 c\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds, mem\\<^sub>1\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds, mem\\<^sub>2\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                           \\<in> P))));\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply ((drule spec)+, erule (1) impE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<forall>c\\<^sub>1\\<^sub>C' mds' mem\\<^sub>1'.\n           \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C \\<longrightarrow>\n           (\\<exists>n c\\<^sub>1\\<^sub>A'.\n               abs.neval\n                \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>A', mds', mem\\<^sub>1'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n                   c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n                   (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A)\n                   \\<in> \\<R>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                   \\<in> P \\<and>\n                   abs.neval\n                    \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n                   (\\<exists>c\\<^sub>2\\<^sub>C'.\n                       \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A', mds', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C', mds', mem\\<^sub>1'\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C', mds', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                       \\<in> P)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply ((drule spec)+, erule (1) impE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        \\<exists>n c\\<^sub>1\\<^sub>A'.\n           abs.neval\n            \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n               c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n               (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A)\n               \\<in> \\<R>\\<^sub>A \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C)\n               \\<in> P \\<and>\n               abs.neval\n                \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A\n                n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n               (\\<exists>c\\<^sub>2\\<^sub>C'.\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                   \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n                   (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n                   \\<in> P))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n       c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C c\\<^sub>1\\<^sub>C'\n       mds\\<^sub>C' mem\\<^sub>1\\<^sub>C' n c\\<^sub>1\\<^sub>A'.\n       \\<lbrakk>closed_others \\<R>; preserves_modes_mem \\<R>;\n        conc.closed_glob_consistent P;\n        (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C;\n        abs.neval\n         \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n         n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A;\n        (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2 c\\<^sub>2\\<^sub>C\n           c\\<^sub>2\\<^sub>A' mem\\<^sub>2'.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A)\n           \\<in> \\<R>\\<^sub>A \\<and>\n           (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<and>\n           (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n            \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C)\n           \\<in> P \\<and>\n           abs.neval\n            \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>A\n            n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>A \\<longrightarrow>\n           (\\<exists>c\\<^sub>2\\<^sub>C'.\n               \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>C \\<and>\n               (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>A,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> \\<R> \\<and>\n               (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2'\\<rangle>\\<^sub>C)\n               \\<in> P)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                            mem\\<^sub>1\\<^sub>A'.\n                            abs.neval\n                             \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A\n                             n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                            (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R> \\<and>\n                            (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                                c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                                c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                                (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A \\<and>\n                                (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> \\<R> \\<and>\n                                (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                                \\<in> P \\<and>\n                                abs.neval\n                                 \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>C, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                                (\\<exists>c\\<^sub>2\\<^sub>C'\n                                    mem\\<^sub>2\\<^sub>C'.\n                                    \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                                    \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                                    (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> \\<R> \\<and>\n                                    (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                                     \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                                    \\<in> P))", "apply(blast dest: preserves_modes_memD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma R\\<^sub>C_of_strong_low_bisim_mm:\n  assumes abs: \"abs.strong_low_bisim_mm \\<R>\\<^sub>A\"\n  assumes rr: \"secure_refinement \\<R>\\<^sub>A \\<R> P\"\n  assumes P_sym: \"sym P\"\n  shows \"conc.strong_low_bisim_mm (gen_refine.R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.strong_low_bisim_mm (gen_refine.R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)", "using abs rr gen_refine.R\\<^sub>C_of_strong_low_bisim_mm[OF _ _ P_sym]"], ["proof (prove)\nusing this:\n  abs.strong_low_bisim_mm \\<R>\\<^sub>A\n  secure_refinement \\<R>\\<^sub>A \\<R> P\n  \\<lbrakk>abs.strong_low_bisim_mm ?\\<R>\\<^sub>A;\n   gen_refine.secure_refinement ?\\<R>\\<^sub>A ?\\<R> P\\<rbrakk>\n  \\<Longrightarrow> conc.strong_low_bisim_mm\n                     (gen_refine.R\\<^sub>C_of ?\\<R>\\<^sub>A ?\\<R> P)\n\ngoal (1 subgoal):\n 1. conc.strong_low_bisim_mm (gen_refine.R\\<^sub>C_of \\<R>\\<^sub>A \\<R> P)", "by simp"], ["", "end"], ["", "context sifum_refinement begin"], ["", "lemma use_secure_refinement_helper:\n  \"secure_refinement \\<R>\\<^sub>A \\<R> P \\<Longrightarrow>\n   ((cm\\<^sub>A,mem\\<^sub>A),(cm\\<^sub>C,mem\\<^sub>C)) \\<in> \\<R> \\<Longrightarrow> (cm\\<^sub>C,mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>C',mem\\<^sub>C') \\<Longrightarrow>\n   (\\<exists>cm\\<^sub>A' mem\\<^sub>A' n. abs.neval (cm\\<^sub>A,mem\\<^sub>A) n (cm\\<^sub>A',mem\\<^sub>A') \\<and>\n                 ((cm\\<^sub>A',mem\\<^sub>A'), (cm\\<^sub>C',mem\\<^sub>C')) \\<in> \\<R>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>secure_refinement \\<R>\\<^sub>A \\<R> P;\n     ((cm\\<^sub>A, mem\\<^sub>A), cm\\<^sub>C, mem\\<^sub>C) \\<in> \\<R>;\n     (cm\\<^sub>C, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n     (cm\\<^sub>C', mem\\<^sub>C')\\<rbrakk>\n    \\<Longrightarrow> \\<exists>cm\\<^sub>A' mem\\<^sub>A' n.\n                         abs.neval (cm\\<^sub>A, mem\\<^sub>A) n\n                          (cm\\<^sub>A', mem\\<^sub>A') \\<and>\n                         ((cm\\<^sub>A', mem\\<^sub>A'), cm\\<^sub>C',\n                          mem\\<^sub>C')\n                         \\<in> \\<R>", "apply(case_tac cm\\<^sub>A, case_tac cm\\<^sub>C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>secure_refinement \\<R>\\<^sub>A \\<R> P;\n        ((cm\\<^sub>A, mem\\<^sub>A), cm\\<^sub>C, mem\\<^sub>C) \\<in> \\<R>;\n        (cm\\<^sub>C, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n        (cm\\<^sub>C', mem\\<^sub>C');\n        cm\\<^sub>A = (a, b); cm\\<^sub>C = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cm\\<^sub>A' mem\\<^sub>A' n.\n                            abs.neval (cm\\<^sub>A, mem\\<^sub>A) n\n                             (cm\\<^sub>A', mem\\<^sub>A') \\<and>\n                            ((cm\\<^sub>A', mem\\<^sub>A'), cm\\<^sub>C',\n                             mem\\<^sub>C')\n                            \\<in> \\<R>", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>secure_refinement \\<R>\\<^sub>A \\<R> P;\n        (\\<langle>a, b, mem\\<^sub>A\\<rangle>\\<^sub>A,\n         \\<langle>aa, ba, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>;\n        \\<langle>aa, ba, mem\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        (cm\\<^sub>C', mem\\<^sub>C');\n        cm\\<^sub>A = (a, b); cm\\<^sub>C = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa ba mem\\<^sub>A'.\n                            (\\<exists>n.\n                                abs.neval\n                                 \\<langle>a, b, mem\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>aa, ba, mem\\<^sub>A'\\<rangle>\\<^sub>A) \\<and>\n                            (\\<langle>aa, ba, mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             cm\\<^sub>C', mem\\<^sub>C')\n                            \\<in> \\<R>", "apply(clarsimp simp: secure_refinement_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(\\<langle>a, b, mem\\<^sub>A\\<rangle>\\<^sub>A,\n                 \\<langle>aa, ba, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n        \\<langle>aa, ba, mem\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n        (cm\\<^sub>C', mem\\<^sub>C');\n        cm\\<^sub>A = (a, b); cm\\<^sub>C = (aa, ba); closed_others \\<R>;\n        preserves_modes_mem \\<R>; new_vars_private \\<R>;\n        conc.closed_glob_consistent P;\n        \\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n           c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n           (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n            \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n           \\<in> \\<R> \\<longrightarrow>\n           (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n               \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n               (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A'\n                   mem\\<^sub>1\\<^sub>A'.\n                   abs.neval\n                    \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n                    n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n                   (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n                    \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n                   \\<in> \\<R> \\<and>\n                   (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                       c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C\n                       c\\<^sub>2\\<^sub>A' mem\\<^sub>2\\<^sub>A'.\n                       (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                       \\<in> \\<R>\\<^sub>A \\<and>\n                       (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> \\<R> \\<and>\n                       (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                        \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                       \\<in> P \\<and>\n                       abs.neval\n                        \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                        n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                       (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                           \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                           \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                           (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> \\<R> \\<and>\n                           (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                            \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                           \\<in> P))))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa ba mem\\<^sub>A'.\n                            (\\<exists>n.\n                                abs.neval\n                                 \\<langle>a, b, mem\\<^sub>A\\<rangle>\\<^sub>A\n                                 n \\<langle>aa, ba, mem\\<^sub>A'\\<rangle>\\<^sub>A) \\<and>\n                            (\\<langle>aa, ba, mem\\<^sub>A'\\<rangle>\\<^sub>A,\n                             cm\\<^sub>C', mem\\<^sub>C')\n                            \\<in> \\<R>", "by (metis surjective_pairing)"], ["", "lemma closed_othersD:\n  \"closed_others \\<R> \\<Longrightarrow>\n   (\\<langle>c\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R> \\<Longrightarrow>\n   (\\<And>x. mem\\<^sub>C' x \\<noteq> mem\\<^sub>C x \\<or> dma\\<^sub>C mem\\<^sub>C' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x \\<Longrightarrow> \\<not> var_asm_not_written mds\\<^sub>C x) \\<Longrightarrow>\n   (\\<langle>c\\<^sub>A, mds\\<^sub>A_of mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>closed_others \\<R>;\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>;\n     \\<And>x.\n        mem\\<^sub>C' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x \\<Longrightarrow>\n        \\<not> var_asm_not_written mds\\<^sub>C x\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n      mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>", "unfolding closed_others_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>c\\<^sub>A c\\<^sub>C mds\\<^sub>C mem\\<^sub>C\n                mem\\<^sub>C'.\n                (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                \\<in> \\<R> \\<longrightarrow>\n                (\\<forall>x.\n                    mem\\<^sub>C x \\<noteq> mem\\<^sub>C' x \\<longrightarrow>\n                    \\<not> var_asm_not_written mds\\<^sub>C\n                            x) \\<longrightarrow>\n                (\\<forall>x.\n                    dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                    dma\\<^sub>C mem\\<^sub>C' x \\<longrightarrow>\n                    \\<not> var_asm_not_written mds\\<^sub>C\n                            x) \\<longrightarrow>\n                (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\nmds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                \\<in> \\<R>;\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n                           mds\\<^sub>C, mem\\<^sub>A_of\n   mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>;\n     \\<And>x.\n        mem\\<^sub>C' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x \\<Longrightarrow>\n        \\<not> var_asm_not_written mds\\<^sub>C x\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>A, mds\\<^sub>A_of\n      mds\\<^sub>C, mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>", "by auto"], ["", "end"], ["", "record ('a, 'Val, 'Var\\<^sub>C, 'Com\\<^sub>C, 'Var\\<^sub>A, 'Com\\<^sub>A) componentwise_refinement =\n  priv_mem :: \"'Var\\<^sub>C set\" (* private variables *)\n  \\<R>\\<^sub>A_rel :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val) LocalConf rel\" (* abstract bisimulation *)\n  \\<R>_rel :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val, 'Com\\<^sub>C, 'Var\\<^sub>C) state_relation\" (* refinement relation *)\n  P_rel :: \"('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf rel\""], ["", "section \"Whole System Refinement\""], ["", "text \\<open>\n  A locale to capture componentwise refinement of an entire system.\n\\<close>"], ["", "locale sifum_refinement_sys = \n  sifum_refinement dma\\<^sub>A dma\\<^sub>C \\<C>_vars\\<^sub>A \\<C>_vars\\<^sub>C \\<C>\\<^sub>A \\<C>\\<^sub>C eval\\<^sub>A eval\\<^sub>C some_val var\\<^sub>C_of\n  for dma\\<^sub>A :: \"('Var\\<^sub>A,'Val) Mem \\<Rightarrow> 'Var\\<^sub>A \\<Rightarrow> Sec\"\n  and dma\\<^sub>C :: \"('Var\\<^sub>C,'Val) Mem \\<Rightarrow> 'Var\\<^sub>C \\<Rightarrow> Sec\"\n  and \\<C>_vars\\<^sub>A :: \"'Var\\<^sub>A \\<Rightarrow> 'Var\\<^sub>A set\"\n  and \\<C>_vars\\<^sub>C :: \"'Var\\<^sub>C \\<Rightarrow> 'Var\\<^sub>C set\"\n  and \\<C>\\<^sub>A :: \"'Var\\<^sub>A set\"\n  and \\<C>\\<^sub>C :: \"'Var\\<^sub>C set\"\n  and eval\\<^sub>A :: \"('Com\\<^sub>A, 'Var\\<^sub>A, 'Val) LocalConf rel\"\n  and eval\\<^sub>C :: \"('Com\\<^sub>C, 'Var\\<^sub>C, 'Val) LocalConf rel\"\n  and some_val :: \"'Val\"\n  and var\\<^sub>C_of :: \"'Var\\<^sub>A \\<Rightarrow> 'Var\\<^sub>C\" +\n  fixes cms :: \"('a::wellorder, 'Val, 'Var\\<^sub>C, 'Com\\<^sub>C, 'Var\\<^sub>A, 'Com\\<^sub>A) componentwise_refinement list\" \n  fixes priv_mem\\<^sub>C :: \"'Var\\<^sub>C set list\"\n  defines priv_mem\\<^sub>C_def: \"priv_mem\\<^sub>C \\<equiv> map priv_mem cms\"\n  assumes priv_mem_disjoint: \"i < length cms \\<Longrightarrow> j < length cms \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> priv_mem\\<^sub>C ! i \\<inter> priv_mem\\<^sub>C ! j = {}\"\n  assumes new_vars_priv: \"- range var\\<^sub>C_of = \\<Union> (set priv_mem\\<^sub>C)\"\n  assumes new_privs_preserved: \"\\<langle>c, mds, mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<Longrightarrow> x \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n                                 (x \\<in> mds m) = (x \\<in> mds' m)\"\n  assumes secure_refinements: \n    \"i < length cms \\<Longrightarrow> secure_refinement (\\<R>\\<^sub>A_rel (cms ! i)) (\\<R>_rel (cms ! i)) (P_rel (cms ! i))\"\n  assumes local_guarantee_preservation:\n    \"i < length cms \\<Longrightarrow> preserves_local_guarantee_compliance (\\<R>_rel (cms ! i))\"\n  assumes bisims:\n    \"i < length cms \\<Longrightarrow> abs.strong_low_bisim_mm (\\<R>\\<^sub>A_rel (cms ! i))\"\n  assumes Ps_sym:\n    \"\\<And>a b. i < length cms \\<Longrightarrow> sym (P_rel (cms ! i))\"\n  assumes Ps_refl_on_low_mds_eq:\n    \"i < length cms \\<Longrightarrow> conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C' \\<Longrightarrow> (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C, \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C) \\<in> (P_rel (cms ! i))\""], ["", "(* FIXME: move to a parent theory? *)"], ["", "context sifum_security begin"], ["", "lemma neval_modifies_helper:\n  assumes nevaln: \"neval lcn m lcn'\"\n  assumes lcn_def: \"lcn = (cms ! n, mem)\"\n  assumes lcn'_def: \"lcn' = (cmn', mem')\"\n  assumes len: \"n < length cms\"\n  assumes modified: \"mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\"\n  shows \"\\<exists>k cmn'' mem'' cmn''' mem'''. k < m \\<and> neval (cms ! n,mem) k (cmn'',mem'') \\<and>\n                           (cmn'',mem'') \\<leadsto> (cmn''', mem''') \\<and>\n                           (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "using nevaln lcn_def lcn'_def modified len"], ["proof (prove)\nusing this:\n  lcn \\<leadsto>\\<^bsup>m\\<^esup> lcn'\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n  mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\n  n < length cms\n\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "proof(induct arbitrary: cms cmn' mem mem' rule: neval.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa y cms cmn' mem mem'.\n       \\<lbrakk>xa = y; xa = (cms ! n, mem); y = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < 0 \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<And>xa y na z cms cmn' mem mem'.\n       \\<lbrakk>xa \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms cmn' mem mem'.\n           \\<lbrakk>y = (cms ! n, mem); z = (cmn', mem');\n            mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n            n < length cms\\<rbrakk>\n           \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                                k < na \\<and>\n                                (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                                (cmn'', mem'') \\<and>\n                                (cmn'', mem'') \\<leadsto>\n                                (cmn''', mem''') \\<and>\n                                (mem'' x \\<noteq> mem''' x \\<or>\n                                 dma mem'' x \\<noteq> dma mem''' x);\n        xa = (cms ! n, mem); z = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < Suc na \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)", "case (neval_0 lcn lcn')"], ["proof (state)\nthis:\n  lcn = lcn'\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n  mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\n  n < length cms\n\ngoal (2 subgoals):\n 1. \\<And>xa y cms cmn' mem mem'.\n       \\<lbrakk>xa = y; xa = (cms ! n, mem); y = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < 0 \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<And>xa y na z cms cmn' mem mem'.\n       \\<lbrakk>xa \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms cmn' mem mem'.\n           \\<lbrakk>y = (cms ! n, mem); z = (cmn', mem');\n            mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n            n < length cms\\<rbrakk>\n           \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                                k < na \\<and>\n                                (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                                (cmn'', mem'') \\<and>\n                                (cmn'', mem'') \\<leadsto>\n                                (cmn''', mem''') \\<and>\n                                (mem'' x \\<noteq> mem''' x \\<or>\n                                 dma mem'' x \\<noteq> dma mem''' x);\n        xa = (cms ! n, mem); z = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < Suc na \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)", "from neval_0"], ["proof (chain)\npicking this:\n  lcn = lcn'\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n  mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\n  n < length cms", "show ?case"], ["proof (prove)\nusing this:\n  lcn = lcn'\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n  mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\n  n < length cms\n\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < 0 \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "by simp"], ["proof (state)\nthis:\n  \\<exists>k cmn'' mem'' cmn''' mem'''.\n     k < 0 \\<and>\n     (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n     (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n     (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n\ngoal (1 subgoal):\n 1. \\<And>xa y na z cms cmn' mem mem'.\n       \\<lbrakk>xa \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms cmn' mem mem'.\n           \\<lbrakk>y = (cms ! n, mem); z = (cmn', mem');\n            mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n            n < length cms\\<rbrakk>\n           \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                                k < na \\<and>\n                                (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                                (cmn'', mem'') \\<and>\n                                (cmn'', mem'') \\<leadsto>\n                                (cmn''', mem''') \\<and>\n                                (mem'' x \\<noteq> mem''' x \\<or>\n                                 dma mem'' x \\<noteq> dma mem''' x);\n        xa = (cms ! n, mem); z = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < Suc na \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa y na z cms cmn' mem mem'.\n       \\<lbrakk>xa \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms cmn' mem mem'.\n           \\<lbrakk>y = (cms ! n, mem); z = (cmn', mem');\n            mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n            n < length cms\\<rbrakk>\n           \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                                k < na \\<and>\n                                (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                                (cmn'', mem'') \\<and>\n                                (cmn'', mem'') \\<leadsto>\n                                (cmn''', mem''') \\<and>\n                                (mem'' x \\<noteq> mem''' x \\<or>\n                                 dma mem'' x \\<noteq> dma mem''' x);\n        xa = (cms ! n, mem); z = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < Suc na \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)", "case (neval_S_n lcn lcn'' m lcn')"], ["proof (state)\nthis:\n  lcn \\<leadsto> lcn''\n  lcn'' \\<leadsto>\\<^bsup>m\\<^esup> lcn'\n  \\<lbrakk>lcn'' = (?cms5 ! n, ?mem5); lcn' = (?cmn'5, ?mem'5);\n   ?mem5 x \\<noteq> ?mem'5 x \\<or> dma ?mem5 x \\<noteq> dma ?mem'5 x;\n   n < length ?cms5\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                       k < m \\<and>\n                       (?cms5 ! n, ?mem5) \\<leadsto>\\<^bsup>k\\<^esup>\n                       (cmn'', mem'') \\<and>\n                       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n                       (mem'' x \\<noteq> mem''' x \\<or>\n                        dma mem'' x \\<noteq> dma mem''' x)\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n  mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x\n  n < length cms\n\ngoal (1 subgoal):\n 1. \\<And>xa y na z cms cmn' mem mem'.\n       \\<lbrakk>xa \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms cmn' mem mem'.\n           \\<lbrakk>y = (cms ! n, mem); z = (cmn', mem');\n            mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n            n < length cms\\<rbrakk>\n           \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                                k < na \\<and>\n                                (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                                (cmn'', mem'') \\<and>\n                                (cmn'', mem'') \\<leadsto>\n                                (cmn''', mem''') \\<and>\n                                (mem'' x \\<noteq> mem''' x \\<or>\n                                 dma mem'' x \\<noteq> dma mem''' x);\n        xa = (cms ! n, mem); z = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < Suc na \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)", "obtain cmn'' mem'' where lcn''_def: \"lcn'' = (cmn'', mem'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cmn'' mem''.\n        lcn'' = (cmn'', mem'') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  lcn'' = (cmn'', mem'')\n\ngoal (1 subgoal):\n 1. \\<And>xa y na z cms cmn' mem mem'.\n       \\<lbrakk>xa \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms cmn' mem mem'.\n           \\<lbrakk>y = (cms ! n, mem); z = (cmn', mem');\n            mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n            n < length cms\\<rbrakk>\n           \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                                k < na \\<and>\n                                (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                                (cmn'', mem'') \\<and>\n                                (cmn'', mem'') \\<leadsto>\n                                (cmn''', mem''') \\<and>\n                                (mem'' x \\<noteq> mem''' x \\<or>\n                                 dma mem'' x \\<noteq> dma mem''' x);\n        xa = (cms ! n, mem); z = (cmn', mem');\n        mem x \\<noteq> mem' x \\<or> dma mem x \\<noteq> dma mem' x;\n        n < length cms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k cmn'' mem'' cmn''' mem'''.\n                            k < Suc na \\<and>\n                            (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup>\n                            (cmn'', mem'') \\<and>\n                            (cmn'', mem'') \\<leadsto>\n                            (cmn''', mem''') \\<and>\n                            (mem'' x \\<noteq> mem''' x \\<or>\n                             dma mem'' x \\<noteq> dma mem''' x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "proof(cases \"mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. mem x \\<noteq> mem'' x \\<or>\n    dma mem x \\<noteq> dma mem'' x \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "assume a: \"mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x\""], ["proof (state)\nthis:\n  mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x\n\ngoal (2 subgoals):\n 1. mem x \\<noteq> mem'' x \\<or>\n    dma mem x \\<noteq> dma mem'' x \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "let ?k = \"0::nat\""], ["proof (state)\ngoal (2 subgoals):\n 1. mem x \\<noteq> mem'' x \\<or>\n    dma mem x \\<noteq> dma mem'' x \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "let ?cmn'' = \"cms ! n\""], ["proof (state)\ngoal (2 subgoals):\n 1. mem x \\<noteq> mem'' x \\<or>\n    dma mem x \\<noteq> dma mem'' x \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "let ?mem'' = \"mem\""], ["proof (state)\ngoal (2 subgoals):\n 1. mem x \\<noteq> mem'' x \\<or>\n    dma mem x \\<noteq> dma mem'' x \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "have \"?k < Suc m \\<and>\n    neval (cms ! n, mem) ?k (?cmn'', ?mem'') \\<and>\n    (?cmn'', ?mem'') \\<leadsto> (cmn'', mem'') \\<and> (?mem'' x \\<noteq> mem'' x \\<or>\n    dma ?mem'' x \\<noteq> dma mem'' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc m \\<and>\n    (cms ! n, mem) \\<leadsto>\\<^bsup>0\\<^esup> (cms ! n, mem) \\<and>\n    (cms ! n, mem) \\<leadsto> (cmn'', mem'') \\<and>\n    (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)", "apply (rule conjI, simp add: neval.neval_0)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms ! n, mem) \\<leadsto> (cmn'', mem'') \\<and>\n    (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)", "apply (simp only: a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms ! n, mem) \\<leadsto> (cmn'', mem'') \\<and> True", "by (simp add: neval_S_n(1)[simplified neval_S_n lcn''_def])"], ["proof (state)\nthis:\n  0 < Suc m \\<and>\n  (cms ! n, mem) \\<leadsto>\\<^bsup>0\\<^esup> (cms ! n, mem) \\<and>\n  (cms ! n, mem) \\<leadsto> (cmn'', mem'') \\<and>\n  (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)\n\ngoal (2 subgoals):\n 1. mem x \\<noteq> mem'' x \\<or>\n    dma mem x \\<noteq> dma mem'' x \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n 2. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "thus ?case"], ["proof (prove)\nusing this:\n  0 < Suc m \\<and>\n  (cms ! n, mem) \\<leadsto>\\<^bsup>0\\<^esup> (cms ! n, mem) \\<and>\n  (cms ! n, mem) \\<leadsto> (cmn'', mem'') \\<and>\n  (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)\n\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "by blast"], ["proof (state)\nthis:\n  \\<exists>k cmn'' mem'' cmn''' mem'''.\n     k < Suc m \\<and>\n     (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n     (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n     (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "assume a: \"\\<not> (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)\""], ["proof (state)\nthis:\n  \\<not> (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "hence unchanged: \"mem'' x = mem x \\<and> dma mem'' x = dma mem x\""], ["proof (prove)\nusing this:\n  \\<not> (mem x \\<noteq> mem'' x \\<or> dma mem x \\<noteq> dma mem'' x)\n\ngoal (1 subgoal):\n 1. mem'' x = mem x \\<and> dma mem'' x = dma mem x", "by (blast intro: sym)"], ["proof (state)\nthis:\n  mem'' x = mem x \\<and> dma mem'' x = dma mem x\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "define cms'' where \"cms'' = cms[n := cmn'']\""], ["proof (state)\nthis:\n  cms'' = cms[n := cmn'']\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "have len'': \"n < length cms''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length cms''", "by(simp add: cms''_def neval_S_n)"], ["proof (state)\nthis:\n  n < length cms''\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "hence lcn''_def2: \"lcn'' = (cms'' ! n, mem'')\""], ["proof (prove)\nusing this:\n  n < length cms''\n\ngoal (1 subgoal):\n 1. lcn'' = (cms'' ! n, mem'')", "by(simp add: lcn''_def cms''_def)"], ["proof (state)\nthis:\n  lcn'' = (cms'' ! n, mem'')\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "from\n    neval_S_n(3)[OF lcn''_def2 neval_S_n(5), simplified unchanged neval_S_n len'']"], ["proof (chain)\npicking this:\n  \\<lbrakk>True; True\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k cmn'' mem''a cmn''' mem'''.\n                       k < m \\<and>\n                       (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup>\n                       (cmn'', mem''a) \\<and>\n                       (cmn'', mem''a) \\<leadsto> (cmn''', mem''') \\<and>\n                       (mem''a x \\<noteq> mem''' x \\<or>\n                        dma mem''a x \\<noteq> dma mem''' x)", "obtain k cmn''' mem''' cmn'''' mem'''' where\n      hyp:    \"k < m \\<and>\n          neval (cms'' ! n, mem'') k (cmn''', mem''') \\<and>\n          (cmn''', mem''') \\<leadsto> (cmn'''', mem'''') \\<and>\n          (mem''' x \\<noteq> mem'''' x \\<or> dma mem''' x \\<noteq> dma mem'''' x)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>True; True\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k cmn'' mem''a cmn''' mem'''.\n                       k < m \\<and>\n                       (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup>\n                       (cmn'', mem''a) \\<and>\n                       (cmn'', mem''a) \\<leadsto> (cmn''', mem''') \\<and>\n                       (mem''a x \\<noteq> mem''' x \\<or>\n                        dma mem''a x \\<noteq> dma mem''' x)\n\ngoal (1 subgoal):\n 1. (\\<And>k cmn''' mem''' cmn'''' mem''''.\n        k < m \\<and>\n        (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup>\n        (cmn''', mem''') \\<and>\n        (cmn''', mem''') \\<leadsto> (cmn'''', mem'''') \\<and>\n        (mem''' x \\<noteq> mem'''' x \\<or>\n         dma mem''' x \\<noteq> dma mem'''' x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k < m \\<and>\n  (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''') \\<and>\n  (cmn''', mem''') \\<leadsto> (cmn'''', mem'''') \\<and>\n  (mem''' x \\<noteq> mem'''' x \\<or> dma mem''' x \\<noteq> dma mem'''' x)\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "have \"neval (cms ! n, mem) (Suc k) (cmn''', mem''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms ! n, mem) \\<leadsto>\\<^bsup>Suc k\\<^esup> (cmn''', mem''')", "apply(rule neval.neval_S_n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (cms ! n, mem) \\<leadsto> ?y\n 2. ?y \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''')", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. ?y \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''')\n 2. (cms ! n, mem) \\<leadsto> ?y", "using hyp"], ["proof (prove)\nusing this:\n  k < m \\<and>\n  (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''') \\<and>\n  (cmn''', mem''') \\<leadsto> (cmn'''', mem'''') \\<and>\n  (mem''' x \\<noteq> mem'''' x \\<or> dma mem''' x \\<noteq> dma mem'''' x)\n\ngoal (2 subgoals):\n 1. ?y \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''')\n 2. (cms ! n, mem) \\<leadsto> ?y", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms ! n, mem) \\<leadsto> (cms'' ! n, mem'')", "apply(simp add: cms''_def neval_S_n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms ! n, mem) \\<leadsto> (cmn'', mem'')", "by(rule neval_S_n(1)[simplified neval_S_n lcn''_def])"], ["proof (state)\nthis:\n  (cms ! n, mem) \\<leadsto>\\<^bsup>Suc k\\<^esup> (cmn''', mem''')\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "moreover"], ["proof (state)\nthis:\n  (cms ! n, mem) \\<leadsto>\\<^bsup>Suc k\\<^esup> (cmn''', mem''')\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "have \"Suc k < Suc m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k < Suc m", "using hyp"], ["proof (prove)\nusing this:\n  k < m \\<and>\n  (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''') \\<and>\n  (cmn''', mem''') \\<leadsto> (cmn'''', mem'''') \\<and>\n  (mem''' x \\<noteq> mem'''' x \\<or> dma mem''' x \\<noteq> dma mem'''' x)\n\ngoal (1 subgoal):\n 1. Suc k < Suc m", "by auto"], ["proof (state)\nthis:\n  Suc k < Suc m\n\ngoal (1 subgoal):\n 1. \\<not> (mem x \\<noteq> mem'' x \\<or>\n            dma mem x \\<noteq> dma mem'' x) \\<Longrightarrow>\n    \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "ultimately"], ["proof (chain)\npicking this:\n  (cms ! n, mem) \\<leadsto>\\<^bsup>Suc k\\<^esup> (cmn''', mem''')\n  Suc k < Suc m", "show ?case"], ["proof (prove)\nusing this:\n  (cms ! n, mem) \\<leadsto>\\<^bsup>Suc k\\<^esup> (cmn''', mem''')\n  Suc k < Suc m\n\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "using hyp"], ["proof (prove)\nusing this:\n  (cms ! n, mem) \\<leadsto>\\<^bsup>Suc k\\<^esup> (cmn''', mem''')\n  Suc k < Suc m\n  k < m \\<and>\n  (cms'' ! n, mem'') \\<leadsto>\\<^bsup>k\\<^esup> (cmn''', mem''') \\<and>\n  (cmn''', mem''') \\<leadsto> (cmn'''', mem'''') \\<and>\n  (mem''' x \\<noteq> mem'''' x \\<or> dma mem''' x \\<noteq> dma mem'''' x)\n\ngoal (1 subgoal):\n 1. \\<exists>k cmn'' mem'' cmn''' mem'''.\n       k < Suc m \\<and>\n       (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n       (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n       (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>k cmn'' mem'' cmn''' mem'''.\n     k < Suc m \\<and>\n     (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n     (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n     (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k cmn'' mem'' cmn''' mem'''.\n     k < Suc m \\<and>\n     (cms ! n, mem) \\<leadsto>\\<^bsup>k\\<^esup> (cmn'', mem'') \\<and>\n     (cmn'', mem'') \\<leadsto> (cmn''', mem''') \\<and>\n     (mem'' x \\<noteq> mem''' x \\<or> dma mem'' x \\<noteq> dma mem''' x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma neval_sched_Nil [simp]:\n  \"(cms, mem) \\<rightarrow>\\<^bsub>[]\\<^esub> (cms, mem)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms, mem) \\<rightarrow>\\<^bsub>[]\\<^esub> (cms, mem)", "by simp"], ["", "lemma reachable_mode_states_refl:\n  \"map snd cms \\<in> reachable_mode_states (cms, mem)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd cms \\<in> reachable_mode_states (cms, mem)", "apply(clarsimp simp: reachable_mode_states_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>cms'.\n       (\\<exists>mem' sched.\n           (cms,\n            mem) \\<rightarrow>\\<^bsub>sched\\<^esub> (cms', mem')) \\<and>\n       map snd cms' = map snd cms", "using neval_sched_Nil"], ["proof (prove)\nusing this:\n  (?cms, ?mem) \\<rightarrow>\\<^bsub>[]\\<^esub> (?cms, ?mem)\n\ngoal (1 subgoal):\n 1. \\<exists>cms'.\n       (\\<exists>mem' sched.\n           (cms,\n            mem) \\<rightarrow>\\<^bsub>sched\\<^esub> (cms', mem')) \\<and>\n       map snd cms' = map snd cms", "by blast"], ["", "lemma neval_reachable_mode_states:\n  assumes neval: \"neval lc n lc'\"\n  assumes lc_def: \"lc = (cms ! k, mem)\" \n  assumes len: \"k < length cms\"\n  shows \"map snd (cms[k := (fst lc')]) \\<in> reachable_mode_states (cms, mem)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (cms[k := fst lc']) \\<in> reachable_mode_states (cms, mem)", "using neval lc_def len"], ["proof (prove)\nusing this:\n  lc \\<leadsto>\\<^bsup>n\\<^esup> lc'\n  lc = (cms ! k, mem)\n  k < length cms\n\ngoal (1 subgoal):\n 1. map snd (cms[k := fst lc']) \\<in> reachable_mode_states (cms, mem)", "proof(induct arbitrary: cms mem rule: neval.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y cms mem.\n       \\<lbrakk>x = y; x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst y])\n                         \\<in> reachable_mode_states (cms, mem)\n 2. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "case (neval_0 x y)"], ["proof (state)\nthis:\n  x = y\n  x = (cms ! k, mem)\n  k < length cms\n\ngoal (2 subgoals):\n 1. \\<And>x y cms mem.\n       \\<lbrakk>x = y; x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst y])\n                         \\<in> reachable_mode_states (cms, mem)\n 2. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "thus ?case"], ["proof (prove)\nusing this:\n  x = y\n  x = (cms ! k, mem)\n  k < length cms\n\ngoal (1 subgoal):\n 1. map snd (cms[k := fst y]) \\<in> reachable_mode_states (cms, mem)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(cms ! k, mem) = y; x = y; k < length cms\\<rbrakk>\n    \\<Longrightarrow> map snd (cms[k := fst y])\n                      \\<in> reachable_mode_states (cms, mem)", "apply(drule sym, simp add: len reachable_mode_states_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  map snd (cms[k := fst y]) \\<in> reachable_mode_states (cms, mem)\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "case (neval_S_n x y n z)"], ["proof (state)\nthis:\n  x \\<leadsto> y\n  y \\<leadsto>\\<^bsup>n\\<^esup> z\n  \\<lbrakk>y = (?cms5 ! k, ?mem5); k < length ?cms5\\<rbrakk>\n  \\<Longrightarrow> map snd (?cms5[k := fst z])\n                    \\<in> reachable_mode_states (?cms5, ?mem5)\n  x = (cms ! k, mem)\n  k < length cms\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "define cms' where \"cms' = cms[k := fst y]\""], ["proof (state)\nthis:\n  cms' = cms[k := fst y]\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "define mem' where \"mem' = snd y\""], ["proof (state)\nthis:\n  mem' = snd y\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "have y_def: \"y = (cms' ! k, mem')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = (cms' ! k, mem')", "by(simp add: cms'_def mem'_def neval_S_n)"], ["proof (state)\nthis:\n  y = (cms' ! k, mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "moreover"], ["proof (state)\nthis:\n  y = (cms' ! k, mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "have len': \"k < length cms'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < length cms'", "by(simp add: cms'_def neval_S_n)"], ["proof (state)\nthis:\n  k < length cms'\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "ultimately"], ["proof (chain)\npicking this:\n  y = (cms' ! k, mem')\n  k < length cms'", "have hyp: \"map snd (cms'[k := fst z]) \\<in> reachable_mode_states (cms', mem')\""], ["proof (prove)\nusing this:\n  y = (cms' ! k, mem')\n  k < length cms'\n\ngoal (1 subgoal):\n 1. map snd (cms'[k := fst z]) \\<in> reachable_mode_states (cms', mem')", "using neval_S_n"], ["proof (prove)\nusing this:\n  y = (cms' ! k, mem')\n  k < length cms'\n  x \\<leadsto> y\n  y \\<leadsto>\\<^bsup>n\\<^esup> z\n  \\<lbrakk>y = (?cms5 ! k, ?mem5); k < length ?cms5\\<rbrakk>\n  \\<Longrightarrow> map snd (?cms5[k := fst z])\n                    \\<in> reachable_mode_states (?cms5, ?mem5)\n  x = (cms ! k, mem)\n  k < length cms\n\ngoal (1 subgoal):\n 1. map snd (cms'[k := fst z]) \\<in> reachable_mode_states (cms', mem')", "by metis"], ["proof (state)\nthis:\n  map snd (cms'[k := fst z]) \\<in> reachable_mode_states (cms', mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "have \"map snd (cms'[k := fst z]) = map snd (cms[k := fst z])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (cms'[k := fst z]) = map snd (cms[k := fst z])", "unfolding cms'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (cms[k := fst y, k := fst z]) = map snd (cms[k := fst z])", "by simp"], ["proof (state)\nthis:\n  map snd (cms'[k := fst z]) = map snd (cms[k := fst z])\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "moreover"], ["proof (state)\nthis:\n  map snd (cms'[k := fst z]) = map snd (cms[k := fst z])\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "have \"(cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')", "using meval_intro neval_S_n y_def cms'_def mem'_def len'"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?cms ! ?n, ?mem) \\<leadsto> (?cm', ?mem');\n   ?n < length ?cms\\<rbrakk>\n  \\<Longrightarrow> (?cms,\n                     ?mem) \\<leadsto>\\<^bsub>?n\\<^esub> (?cms[?n := ?cm'],\n                   ?mem')\n  x \\<leadsto> y\n  y \\<leadsto>\\<^bsup>n\\<^esup> z\n  \\<lbrakk>y = (?cms5 ! k, ?mem5); k < length ?cms5\\<rbrakk>\n  \\<Longrightarrow> map snd (?cms5[k := fst z])\n                    \\<in> reachable_mode_states (?cms5, ?mem5)\n  x = (cms ! k, mem)\n  k < length cms\n  y = (cms' ! k, mem')\n  cms' = cms[k := fst y]\n  mem' = snd y\n  k < length cms'\n\ngoal (1 subgoal):\n 1. (cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')", "by fastforce"], ["proof (state)\nthis:\n  (cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y n z cms mem.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>n\\<^esup> z;\n        \\<And>cms mem.\n           \\<lbrakk>y = (cms ! k, mem); k < length cms\\<rbrakk>\n           \\<Longrightarrow> map snd (cms[k := fst z])\n                             \\<in> reachable_mode_states (cms, mem);\n        x = (cms ! k, mem); k < length cms\\<rbrakk>\n       \\<Longrightarrow> map snd (cms[k := fst z])\n                         \\<in> reachable_mode_states (cms, mem)", "ultimately"], ["proof (chain)\npicking this:\n  map snd (cms'[k := fst z]) = map snd (cms[k := fst z])\n  (cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')", "show ?case"], ["proof (prove)\nusing this:\n  map snd (cms'[k := fst z]) = map snd (cms[k := fst z])\n  (cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')\n\ngoal (1 subgoal):\n 1. map snd (cms[k := fst z]) \\<in> reachable_mode_states (cms, mem)", "using reachable_modes_subset subsetD hyp"], ["proof (prove)\nusing this:\n  map snd (cms'[k := fst z]) = map snd (cms[k := fst z])\n  (cms, mem) \\<leadsto>\\<^bsub>k\\<^esub> (cms', mem')\n  (?cms, ?mem) \\<leadsto>\\<^bsub>?k\\<^esub> (?cms', ?mem') \\<Longrightarrow>\n  reachable_mode_states (?cms', ?mem')\n  \\<subseteq> reachable_mode_states (?cms, ?mem)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  map snd (cms'[k := fst z]) \\<in> reachable_mode_states (cms', mem')\n\ngoal (1 subgoal):\n 1. map snd (cms[k := fst z]) \\<in> reachable_mode_states (cms, mem)", "by fastforce"], ["proof (state)\nthis:\n  map snd (cms[k := fst z]) \\<in> reachable_mode_states (cms, mem)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma meval_sched_sound_mode_use:\n  \"sound_mode_use gc \\<Longrightarrow> meval_sched sched gc gc' \\<Longrightarrow> sound_mode_use gc'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sound_mode_use gc;\n     gc \\<rightarrow>\\<^bsub>sched\\<^esub> gc'\\<rbrakk>\n    \\<Longrightarrow> sound_mode_use gc'", "proof(induct rule: meval_sched.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>sound_mode_use c;\n        c \\<rightarrow>\\<^bsub>[]\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'\n 2. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "case (1 gc)"], ["proof (state)\nthis:\n  sound_mode_use gc\n  gc \\<rightarrow>\\<^bsub>[]\\<^esub> c'_\n\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>sound_mode_use c;\n        c \\<rightarrow>\\<^bsub>[]\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'\n 2. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "thus ?case"], ["proof (prove)\nusing this:\n  sound_mode_use gc\n  gc \\<rightarrow>\\<^bsub>[]\\<^esub> c'_\n\ngoal (1 subgoal):\n 1. sound_mode_use c'_", "by simp"], ["proof (state)\nthis:\n  sound_mode_use c'_\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "case (2 n ns gc gc')"], ["proof (state)\nthis:\n  \\<lbrakk>sound_mode_use ?x5;\n   ?x5 \\<rightarrow>\\<^bsub>ns\\<^esub> gc'\\<rbrakk>\n  \\<Longrightarrow> sound_mode_use gc'\n  sound_mode_use gc\n  gc \\<rightarrow>\\<^bsub>n # ns\\<^esub> gc'\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "from 2(3)"], ["proof (chain)\npicking this:\n  gc \\<rightarrow>\\<^bsub>n # ns\\<^esub> gc'", "obtain gc'' where \"meval_abv gc n gc''\" and a: \"meval_sched ns gc'' gc'\""], ["proof (prove)\nusing this:\n  gc \\<rightarrow>\\<^bsub>n # ns\\<^esub> gc'\n\ngoal (1 subgoal):\n 1. (\\<And>gc''.\n        \\<lbrakk>gc \\<leadsto>\\<^bsub>n\\<^esub> gc'';\n         gc'' \\<rightarrow>\\<^bsub>ns\\<^esub> gc'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  gc \\<leadsto>\\<^bsub>n\\<^esub> gc''\n  gc'' \\<rightarrow>\\<^bsub>ns\\<^esub> gc'\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "with 2(2) sound_modes_invariant"], ["proof (chain)\npicking this:\n  sound_mode_use gc\n  \\<lbrakk>sound_mode_use (?cms, ?mem);\n   (?cms, ?mem) \\<leadsto>\\<^bsub>?k\\<^esub> (?cms', ?mem')\\<rbrakk>\n  \\<Longrightarrow> sound_mode_use (?cms', ?mem')\n  gc \\<leadsto>\\<^bsub>n\\<^esub> gc''\n  gc'' \\<rightarrow>\\<^bsub>ns\\<^esub> gc'", "have b: \"sound_mode_use gc''\""], ["proof (prove)\nusing this:\n  sound_mode_use gc\n  \\<lbrakk>sound_mode_use (?cms, ?mem);\n   (?cms, ?mem) \\<leadsto>\\<^bsub>?k\\<^esub> (?cms', ?mem')\\<rbrakk>\n  \\<Longrightarrow> sound_mode_use (?cms', ?mem')\n  gc \\<leadsto>\\<^bsub>n\\<^esub> gc''\n  gc'' \\<rightarrow>\\<^bsub>ns\\<^esub> gc'\n\ngoal (1 subgoal):\n 1. sound_mode_use gc''", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  sound_mode_use gc''\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>sound_mode_use x;\n                    x \\<rightarrow>\\<^bsub>ns\\<^esub> c'\\<rbrakk>\n                   \\<Longrightarrow> sound_mode_use c';\n        sound_mode_use c; c \\<rightarrow>\\<^bsub>n # ns\\<^esub> c'\\<rbrakk>\n       \\<Longrightarrow> sound_mode_use c'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sound_mode_use gc'", "by (rule 2(1)[OF b a])"], ["proof (state)\nthis:\n  sound_mode_use gc'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma neval_meval:\n  \"neval lcn k lcn' \\<Longrightarrow> n < length cms \\<Longrightarrow> lcn = (cms ! n,mem) \\<Longrightarrow> lcn' = (cmn', mem') \\<Longrightarrow>\n  meval_sched (replicate k n) (cms,mem) (cms[n := cmn'],mem')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lcn \\<leadsto>\\<^bsup>k\\<^esup> lcn'; n < length cms;\n     lcn = (cms ! n, mem); lcn' = (cmn', mem')\\<rbrakk>\n    \\<Longrightarrow> (cms,\n                       mem) \\<rightarrow>\\<^bsub>replicate k\n            n\\<^esub> (cms[n := cmn'], mem')", "proof(induct arbitrary: cms mem cmn' mem' rule: neval.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y cms mem cmn' mem'.\n       \\<lbrakk>x = y; n < length cms; x = (cms ! n, mem);\n        y = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate 0\n               n\\<^esub> (cms[n := cmn'], mem')\n 2. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "case (neval_0 lcn lcn')"], ["proof (state)\nthis:\n  lcn = lcn'\n  n < length cms\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n\ngoal (2 subgoals):\n 1. \\<And>x y cms mem cmn' mem'.\n       \\<lbrakk>x = y; n < length cms; x = (cms ! n, mem);\n        y = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate 0\n               n\\<^esub> (cms[n := cmn'], mem')\n 2. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "thus ?case"], ["proof (prove)\nusing this:\n  lcn = lcn'\n  n < length cms\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n\ngoal (1 subgoal):\n 1. (cms,\n     mem) \\<rightarrow>\\<^bsub>replicate 0 n\\<^esub> (cms[n := cmn'], mem')", "by fastforce"], ["proof (state)\nthis:\n  (cms,\n   mem) \\<rightarrow>\\<^bsub>replicate 0 n\\<^esub> (cms[n := cmn'], mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "case (neval_S_n lcn lcn'' k lcn')"], ["proof (state)\nthis:\n  lcn \\<leadsto> lcn''\n  lcn'' \\<leadsto>\\<^bsup>k\\<^esup> lcn'\n  \\<lbrakk>n < length ?cms5; lcn'' = (?cms5 ! n, ?mem5);\n   lcn' = (?cmn'5, ?mem'5)\\<rbrakk>\n  \\<Longrightarrow> (?cms5,\n                     ?mem5) \\<rightarrow>\\<^bsub>replicate k\n            n\\<^esub> (?cms5[n := ?cmn'5], ?mem'5)\n  n < length cms\n  lcn = (cms ! n, mem)\n  lcn' = (cmn', mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "define cms'' where [simp]: \"cms'' = cms[n := fst lcn'']\""], ["proof (state)\nthis:\n  cms'' = cms[n := fst lcn'']\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "define mem'' where [simp]: \"mem'' = snd lcn''\""], ["proof (state)\nthis:\n  mem'' = snd lcn''\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "have len'' [simp]: \"n < length cms''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length cms''", "by(simp add: neval_S_n(4))"], ["proof (state)\nthis:\n  n < length cms''\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "have lcn''_def: \"lcn'' = (cms'' ! n, mem'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcn'' = (cms'' ! n, mem'')", "using len''"], ["proof (prove)\nusing this:\n  n < length cms''\n\ngoal (1 subgoal):\n 1. lcn'' = (cms'' ! n, mem'')", "by simp"], ["proof (state)\nthis:\n  lcn'' = (cms'' ! n, mem'')\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "have hyp: \"(cms'', mem'') \\<rightarrow>\\<^bsub>replicate k n\\<^esub> (cms''[n := cmn'], mem')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms'',\n     mem'') \\<rightarrow>\\<^bsub>replicate k\n                                  n\\<^esub> (cms''[n := cmn'], mem')", "by (rule neval_S_n(3)[OF len'' lcn''_def neval_S_n(6)])"], ["proof (state)\nthis:\n  (cms'',\n   mem'') \\<rightarrow>\\<^bsub>replicate k\n                                n\\<^esub> (cms''[n := cmn'], mem')\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "have meval: \"(cms, mem) \\<leadsto>\\<^bsub>n\\<^esub> (cms'', mem'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms, mem) \\<leadsto>\\<^bsub>n\\<^esub> (cms'', mem'')", "using cms''_def neval_S_n.hyps(1) neval_S_n.prems(1) neval_S_n.prems(2)"], ["proof (prove)\nusing this:\n  cms'' = cms[n := fst lcn'']\n  lcn \\<leadsto> lcn''\n  n < length cms\n  lcn = (cms ! n, mem)\n\ngoal (1 subgoal):\n 1. (cms, mem) \\<leadsto>\\<^bsub>n\\<^esub> (cms'', mem'')", "by fastforce"], ["proof (state)\nthis:\n  (cms, mem) \\<leadsto>\\<^bsub>n\\<^esub> (cms'', mem'')\n\ngoal (1 subgoal):\n 1. \\<And>x y na z cms mem cmn' mem'.\n       \\<lbrakk>x \\<leadsto> y; y \\<leadsto>\\<^bsup>na\\<^esup> z;\n        \\<And>cms mem cmn' mem'.\n           \\<lbrakk>n < length cms; y = (cms ! n, mem);\n            z = (cmn', mem')\\<rbrakk>\n           \\<Longrightarrow> (cms,\n                              mem) \\<rightarrow>\\<^bsub>replicate na\n                   n\\<^esub> (cms[n := cmn'], mem');\n        n < length cms; x = (cms ! n, mem); z = (cmn', mem')\\<rbrakk>\n       \\<Longrightarrow> (cms,\n                          mem) \\<rightarrow>\\<^bsub>replicate (Suc na)\n               n\\<^esub> (cms[n := cmn'], mem')", "from hyp meval"], ["proof (chain)\npicking this:\n  (cms'',\n   mem'') \\<rightarrow>\\<^bsub>replicate k\n                                n\\<^esub> (cms''[n := cmn'], mem')\n  (cms, mem) \\<leadsto>\\<^bsub>n\\<^esub> (cms'', mem'')", "show ?case"], ["proof (prove)\nusing this:\n  (cms'',\n   mem'') \\<rightarrow>\\<^bsub>replicate k\n                                n\\<^esub> (cms''[n := cmn'], mem')\n  (cms, mem) \\<leadsto>\\<^bsub>n\\<^esub> (cms'', mem'')\n\ngoal (1 subgoal):\n 1. (cms,\n     mem) \\<rightarrow>\\<^bsub>replicate (Suc k)\n                                n\\<^esub> (cms[n := cmn'], mem')", "by fastforce"], ["proof (state)\nthis:\n  (cms,\n   mem) \\<rightarrow>\\<^bsub>replicate (Suc k)\n                              n\\<^esub> (cms[n := cmn'], mem')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma meval_sched_app:\n  \"meval_sched as gc gc' \\<Longrightarrow> meval_sched bs gc' gc'' \\<Longrightarrow> meval_sched (as@bs) gc gc''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n     gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n    \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @ bs\\<^esub> gc''", "proof(induct as arbitrary: gc gc' bs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>gc gc' bs.\n       \\<lbrakk>gc \\<rightarrow>\\<^bsub>[]\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>[] @ bs\\<^esub> gc''\n 2. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "case Nil"], ["proof (state)\nthis:\n  gc \\<rightarrow>\\<^bsub>[]\\<^esub> gc'\n  gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\n\ngoal (2 subgoals):\n 1. \\<And>gc gc' bs.\n       \\<lbrakk>gc \\<rightarrow>\\<^bsub>[]\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>[] @ bs\\<^esub> gc''\n 2. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "thus ?case"], ["proof (prove)\nusing this:\n  gc \\<rightarrow>\\<^bsub>[]\\<^esub> gc'\n  gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\n\ngoal (1 subgoal):\n 1. gc \\<rightarrow>\\<^bsub>[] @ bs\\<^esub> gc''", "by simp"], ["proof (state)\nthis:\n  gc \\<rightarrow>\\<^bsub>[] @ bs\\<^esub> gc''\n\ngoal (1 subgoal):\n 1. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?gc5 \\<rightarrow>\\<^bsub>as\\<^esub> ?gc'5;\n   ?gc'5 \\<rightarrow>\\<^bsub>?bs5\\<^esub> gc''\\<rbrakk>\n  \\<Longrightarrow> ?gc5 \\<rightarrow>\\<^bsub>as @ ?bs5\\<^esub> gc''\n  gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc'\n  gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\n\ngoal (1 subgoal):\n 1. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "from Cons(2)"], ["proof (chain)\npicking this:\n  gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc'", "obtain gc''' where a: \"meval_abv gc a gc'''\" and as: \"meval_sched as gc''' gc'\""], ["proof (prove)\nusing this:\n  gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc'\n\ngoal (1 subgoal):\n 1. (\\<And>gc'''.\n        \\<lbrakk>gc \\<leadsto>\\<^bsub>a\\<^esub> gc''';\n         gc''' \\<rightarrow>\\<^bsub>as\\<^esub> gc'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  gc \\<leadsto>\\<^bsub>a\\<^esub> gc'''\n  gc''' \\<rightarrow>\\<^bsub>as\\<^esub> gc'\n\ngoal (1 subgoal):\n 1. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "from Cons(1)[OF as Cons(3)] a"], ["proof (chain)\npicking this:\n  gc''' \\<rightarrow>\\<^bsub>as @ bs\\<^esub> gc''\n  gc \\<leadsto>\\<^bsub>a\\<^esub> gc'''", "have \"gc \\<rightarrow>\\<^bsub>a # (as @ bs)\\<^esub> gc''\""], ["proof (prove)\nusing this:\n  gc''' \\<rightarrow>\\<^bsub>as @ bs\\<^esub> gc''\n  gc \\<leadsto>\\<^bsub>a\\<^esub> gc'''\n\ngoal (1 subgoal):\n 1. gc \\<rightarrow>\\<^bsub>a # as @ bs\\<^esub> gc''", "by (metis meval_sched.simps)"], ["proof (state)\nthis:\n  gc \\<rightarrow>\\<^bsub>a # as @ bs\\<^esub> gc''\n\ngoal (1 subgoal):\n 1. \\<And>a as gc gc' bs.\n       \\<lbrakk>\\<And>gc gc' bs.\n                   \\<lbrakk>gc \\<rightarrow>\\<^bsub>as\\<^esub> gc';\n                    gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n                   \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>as @\n                       bs\\<^esub> gc'';\n        gc \\<rightarrow>\\<^bsub>a # as\\<^esub> gc';\n        gc' \\<rightarrow>\\<^bsub>bs\\<^esub> gc''\\<rbrakk>\n       \\<Longrightarrow> gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "thus ?case"], ["proof (prove)\nusing this:\n  gc \\<rightarrow>\\<^bsub>a # as @ bs\\<^esub> gc''\n\ngoal (1 subgoal):\n 1. gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''", "by simp"], ["proof (state)\nthis:\n  gc \\<rightarrow>\\<^bsub>(a # as) @ bs\\<^esub> gc''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context sifum_refinement_sys begin"], ["", "lemma conc_respects_priv:\n  assumes xnin: \"x\\<^sub>C \\<notin> range var\\<^sub>C_of\"\n  assumes modified\\<^sub>C: \"mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or> dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq> dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\"\n  assumes eval\\<^sub>C: \"(cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>Cn', mem\\<^sub>C')\"\n  assumes in_\\<R>n: \"((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\"\n  assumes preserves: \"preserves_local_guarantee_compliance \\<R>n\"\n  assumes sound_mode_use\\<^sub>A: \"abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\"\n  assumes nlen: \"n < length cms\"\n  assumes len_eq: \"length cms\\<^sub>A = length cms\"\n  assumes len_eq': \"length cms\\<^sub>C = length cms\"\n  shows \"x\\<^sub>C \\<notin> (snd (cms\\<^sub>C ! n)) GuarNoWrite \\<and> x\\<^sub>C \\<notin> (snd (cms\\<^sub>C ! n)) GuarNoReadOrWrite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "from sound_mode_use\\<^sub>A"], ["proof (chain)\npicking this:\n  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)", "have \"abs.respects_own_guarantees (cms\\<^sub>A ! n)\""], ["proof (prove)\nusing this:\n  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n\ngoal (1 subgoal):\n 1. abs.respects_own_guarantees (cms\\<^sub>A ! n)", "using nlen len_eq abs.locally_sound_respects_guarantees"], ["proof (prove)\nusing this:\n  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n  n < length cms\n  length cms\\<^sub>A = length cms\n  abs.locally_sound_mode_use (?cm, ?mem) \\<Longrightarrow>\n  abs.respects_own_guarantees ?cm\n\ngoal (1 subgoal):\n 1. abs.respects_own_guarantees (cms\\<^sub>A ! n)", "unfolding abs.sound_mode_use_def list_all_length"], ["proof (prove)\nusing this:\n  case (cms\\<^sub>A, mem\\<^sub>A) of\n  (cms, mem) \\<Rightarrow>\n    (\\<forall>n<length cms.\n        abs.locally_sound_mode_use (cms ! n, mem)) \\<and>\n    abs.globally_sound_mode_use (cms, mem)\n  n < length cms\n  length cms\\<^sub>A = length cms\n  abs.locally_sound_mode_use (?cm, ?mem) \\<Longrightarrow>\n  abs.respects_own_guarantees ?cm\n\ngoal (1 subgoal):\n 1. abs.respects_own_guarantees (cms\\<^sub>A ! n)", "by fastforce"], ["proof (state)\nthis:\n  abs.respects_own_guarantees (cms\\<^sub>A ! n)\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "with in_\\<R>n"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  abs.respects_own_guarantees (cms\\<^sub>A ! n)", "have 1: \"conc.respects_own_guarantees (cms\\<^sub>C ! n)\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  abs.respects_own_guarantees (cms\\<^sub>A ! n)\n\ngoal (1 subgoal):\n 1. conc.respects_own_guarantees (cms\\<^sub>C ! n)", "using preserves"], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  abs.respects_own_guarantees (cms\\<^sub>A ! n)\n  preserves_local_guarantee_compliance \\<R>n\n\ngoal (1 subgoal):\n 1. conc.respects_own_guarantees (cms\\<^sub>C ! n)", "unfolding preserves_local_guarantee_compliance_def"], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  abs.respects_own_guarantees (cms\\<^sub>A ! n)\n  \\<forall>cm\\<^sub>A mem\\<^sub>A cm\\<^sub>C mem\\<^sub>C.\n     abs.respects_own_guarantees cm\\<^sub>A \\<and>\n     ((cm\\<^sub>A, mem\\<^sub>A), cm\\<^sub>C, mem\\<^sub>C)\n     \\<in> \\<R>n \\<longrightarrow>\n     conc.respects_own_guarantees cm\\<^sub>C\n\ngoal (1 subgoal):\n 1. conc.respects_own_guarantees (cms\\<^sub>C ! n)", "by metis"], ["proof (state)\nthis:\n  conc.respects_own_guarantees (cms\\<^sub>C ! n)\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "with eval\\<^sub>C modified\\<^sub>C"], ["proof (chain)\npicking this:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n  (cm\\<^sub>Cn', mem\\<^sub>C')\n  mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq>\n  dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\n  conc.respects_own_guarantees (cms\\<^sub>C ! n)", "have 2: \"\\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\""], ["proof (prove)\nusing this:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n  (cm\\<^sub>Cn', mem\\<^sub>C')\n  mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq>\n  dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\n  conc.respects_own_guarantees (cms\\<^sub>C ! n)\n\ngoal (1 subgoal):\n 1. \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C", "unfolding conc.doesnt_modify_def"], ["proof (prove)\nusing this:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n  (cm\\<^sub>Cn', mem\\<^sub>C')\n  mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq>\n  dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\n  conc.respects_own_guarantees (cms\\<^sub>C ! n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>mds mem c' mds' mem'.\n               \\<langle>fst (cms\\<^sub>C !\n                             n), mds, mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n               \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<longrightarrow>\n               mem x\\<^sub>C = mem' x\\<^sub>C \\<and>\n               dma\\<^sub>C mem x\\<^sub>C = dma\\<^sub>C mem' x\\<^sub>C)", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "then"], ["proof (chain)\npicking this:\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C", "have \"\\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\""], ["proof (prove)\nusing this:\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C", "using conc.doesnt_read_or_modify_doesnt_modify"], ["proof (prove)\nusing this:\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n  conc.doesnt_read_or_modify ?c ?x \\<Longrightarrow>\n  conc.doesnt_modify ?c ?x\n\ngoal (1 subgoal):\n 1. \\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C", "by metis"], ["proof (state)\nthis:\n  \\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "with 1 2"], ["proof (chain)\npicking this:\n  conc.respects_own_guarantees (cms\\<^sub>C ! n)\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n  \\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C", "show ?thesis"], ["proof (prove)\nusing this:\n  conc.respects_own_guarantees (cms\\<^sub>C ! n)\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n  \\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "unfolding conc.respects_own_guarantees_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (x \\<in> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite \\<longrightarrow>\n      conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x) \\<and>\n     (x \\<in> snd (cms\\<^sub>C ! n) GuarNoWrite \\<longrightarrow>\n      conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x)\n  \\<not> conc.doesnt_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n  \\<not> conc.doesnt_read_or_modify (fst (cms\\<^sub>C ! n)) x\\<^sub>C\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "by metis"], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma modified_variables_are_not_assumed_not_written:\n  fixes cms\\<^sub>A mem\\<^sub>A cms\\<^sub>C mem\\<^sub>C cm\\<^sub>Cn' mem\\<^sub>C' \\<R>n cm\\<^sub>An' mem\\<^sub>A' m\\<^sub>A \\<R>i\n  assumes sound_mode_use\\<^sub>A: \"abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\"\n  assumes pmmn: \"preserves_modes_mem \\<R>n\"\n  assumes in_\\<R>n: \"((cms\\<^sub>A ! n, mem\\<^sub>A), (cms\\<^sub>C ! n, mem\\<^sub>C)) \\<in> \\<R>n\"\n  assumes pmmi: \"preserves_modes_mem \\<R>i\"\n  assumes in_\\<R>i: \"((cms\\<^sub>A ! i, mem\\<^sub>A), (cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>i\"\n  assumes nlen: \"n < length cms\"\n  assumes len\\<^sub>A: \"length cms\\<^sub>A = length cms\"\n  assumes len\\<^sub>C: \"length cms\\<^sub>C = length cms\"\n  assumes priv_is_asm_priv: \"\\<And>i. i < length cms \\<Longrightarrow> priv_mem\\<^sub>C ! i \\<subseteq> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite\"\n  assumes priv_is_guar_priv: \"\\<And>i j. i < length cms \\<Longrightarrow> j < length cms \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> priv_mem\\<^sub>C ! i \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\"\n  assumes new_asms_only_for_priv: \"\\<And>i. i < length cms \\<Longrightarrow> \n                                           (snd (cms\\<^sub>C ! i) AsmNoReadOrWrite \\<union> snd (cms\\<^sub>C ! i) AsmNoWrite) \\<inter> (- range var\\<^sub>C_of) \\<subseteq> priv_mem\\<^sub>C ! i\"\n  assumes eval\\<^sub>Cn: \"(cms\\<^sub>C ! n,mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>Cn', mem\\<^sub>C')\"\n  assumes neval\\<^sub>An: \"abs.neval (cms\\<^sub>A ! n,mem\\<^sub>A) m\\<^sub>A (cm\\<^sub>An', mem\\<^sub>A')\"\n  assumes in_\\<R>n': \"((cm\\<^sub>An', mem\\<^sub>A'), (cm\\<^sub>Cn', mem\\<^sub>C')) \\<in> \\<R>n\"\n  assumes modified\\<^sub>C: \"mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or> dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq> dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\"\n  assumes neq: \"i \\<noteq> n\"\n  assumes ilen: \"i < length cms\"\n  assumes preserves: \"preserves_local_guarantee_compliance \\<R>n\"\n  shows \"\\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "proof(cases \"x\\<^sub>C \\<in> range var\\<^sub>C_of\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "assume \"x\\<^sub>C \\<in> range var\\<^sub>C_of\""], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> range var\\<^sub>C_of\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from this"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<in> range var\\<^sub>C_of", "obtain x\\<^sub>A where x\\<^sub>C_def: \"x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. (\\<And>x\\<^sub>A.\n        x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "obtain c\\<^sub>An mds\\<^sub>An where [simp]: \"cms\\<^sub>A ! n = (c\\<^sub>An, mds\\<^sub>An)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>An mds\\<^sub>An.\n        cms\\<^sub>A ! n = (c\\<^sub>An, mds\\<^sub>An) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cms\\<^sub>A ! n = (c\\<^sub>An, mds\\<^sub>An)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "obtain c\\<^sub>Cn mds\\<^sub>Cn where [simp]: \"cms\\<^sub>C ! n = (c\\<^sub>Cn, mds\\<^sub>Cn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>Cn mds\\<^sub>Cn.\n        cms\\<^sub>C ! n = (c\\<^sub>Cn, mds\\<^sub>Cn) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cms\\<^sub>C ! n = (c\\<^sub>Cn, mds\\<^sub>Cn)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "obtain c\\<^sub>Cn' mds\\<^sub>Cn' where [simp]: \"cm\\<^sub>Cn' = (c\\<^sub>Cn', mds\\<^sub>Cn')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>Cn' mds\\<^sub>Cn'.\n        cm\\<^sub>Cn' = (c\\<^sub>Cn', mds\\<^sub>Cn') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cm\\<^sub>Cn' = (c\\<^sub>Cn', mds\\<^sub>Cn')\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "obtain c\\<^sub>An' mds\\<^sub>An' where [simp]: \"cm\\<^sub>An' = (c\\<^sub>An', mds\\<^sub>An')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>An' mds\\<^sub>An'.\n        cm\\<^sub>An' = (c\\<^sub>An', mds\\<^sub>An') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cm\\<^sub>An' = (c\\<^sub>An', mds\\<^sub>An')\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from in_\\<R>n pmmn"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  preserves_modes_mem \\<R>n", "have [simp]: \"mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\" and [simp]: \"mds\\<^sub>An = mds\\<^sub>A_of mds\\<^sub>Cn\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  preserves_modes_mem \\<R>n\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C &&&\n    mds\\<^sub>An = mds\\<^sub>A_of mds\\<^sub>Cn", "using preserves_modes_memD"], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C) \\<in> \\<R>n\n  preserves_modes_mem \\<R>n\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C &&&\n    mds\\<^sub>An = mds\\<^sub>A_of mds\\<^sub>Cn", "by auto"], ["proof (state)\nthis:\n  mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\n  mds\\<^sub>An = mds\\<^sub>A_of mds\\<^sub>Cn\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from in_\\<R>n' pmmn"], ["proof (chain)\npicking this:\n  ((cm\\<^sub>An', mem\\<^sub>A'), cm\\<^sub>Cn', mem\\<^sub>C') \\<in> \\<R>n\n  preserves_modes_mem \\<R>n", "have [simp]: \"mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\" and [simp]: \"mds\\<^sub>An' = mds\\<^sub>A_of mds\\<^sub>Cn'\""], ["proof (prove)\nusing this:\n  ((cm\\<^sub>An', mem\\<^sub>A'), cm\\<^sub>Cn', mem\\<^sub>C') \\<in> \\<R>n\n  preserves_modes_mem \\<R>n\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C' &&&\n    mds\\<^sub>An' = mds\\<^sub>A_of mds\\<^sub>Cn'", "using preserves_modes_memD"], ["proof (prove)\nusing this:\n  ((cm\\<^sub>An', mem\\<^sub>A'), cm\\<^sub>Cn', mem\\<^sub>C') \\<in> \\<R>n\n  preserves_modes_mem \\<R>n\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C' &&&\n    mds\\<^sub>An' = mds\\<^sub>A_of mds\\<^sub>Cn'", "by auto"], ["proof (state)\nthis:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\n  mds\\<^sub>An' = mds\\<^sub>A_of mds\\<^sub>Cn'\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from modified\\<^sub>C dma_consistent"], ["proof (chain)\npicking this:\n  mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq>\n  dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\n  dma\\<^sub>A (\\<lambda>x\\<^sub>A. ?mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)", "have \n    modified\\<^sub>A: \"mem\\<^sub>A x\\<^sub>A \\<noteq> mem\\<^sub>A' x\\<^sub>A \\<or> dma\\<^sub>A mem\\<^sub>A x\\<^sub>A \\<noteq> dma\\<^sub>A mem\\<^sub>A' x\\<^sub>A\""], ["proof (prove)\nusing this:\n  mem\\<^sub>C x\\<^sub>C \\<noteq> mem\\<^sub>C' x\\<^sub>C \\<or>\n  dma\\<^sub>C mem\\<^sub>C x\\<^sub>C \\<noteq>\n  dma\\<^sub>C mem\\<^sub>C' x\\<^sub>C\n  dma\\<^sub>A (\\<lambda>x\\<^sub>A. ?mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A))\n   ?x\\<^sub>A =\n  dma\\<^sub>C ?mem\\<^sub>C (var\\<^sub>C_of ?x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A x\\<^sub>A \\<noteq> mem\\<^sub>A' x\\<^sub>A \\<or>\n    dma\\<^sub>A mem\\<^sub>A x\\<^sub>A \\<noteq>\n    dma\\<^sub>A mem\\<^sub>A' x\\<^sub>A", "by (simp add: mem\\<^sub>A_of_def x\\<^sub>C_def)"], ["proof (state)\nthis:\n  mem\\<^sub>A x\\<^sub>A \\<noteq> mem\\<^sub>A' x\\<^sub>A \\<or>\n  dma\\<^sub>A mem\\<^sub>A x\\<^sub>A \\<noteq>\n  dma\\<^sub>A mem\\<^sub>A' x\\<^sub>A\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from len\\<^sub>A nlen"], ["proof (chain)\npicking this:\n  length cms\\<^sub>A = length cms\n  n < length cms", "have nlen\\<^sub>A: \"n < length cms\\<^sub>A\""], ["proof (prove)\nusing this:\n  length cms\\<^sub>A = length cms\n  n < length cms\n\ngoal (1 subgoal):\n 1. n < length cms\\<^sub>A", "by simp"], ["proof (state)\nthis:\n  n < length cms\\<^sub>A\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from len\\<^sub>A ilen"], ["proof (chain)\npicking this:\n  length cms\\<^sub>A = length cms\n  i < length cms", "have ilen\\<^sub>A: \"i < length cms\\<^sub>A\""], ["proof (prove)\nusing this:\n  length cms\\<^sub>A = length cms\n  i < length cms\n\ngoal (1 subgoal):\n 1. i < length cms\\<^sub>A", "by simp"], ["proof (state)\nthis:\n  i < length cms\\<^sub>A\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from abs.neval_modifies_helper[OF neval\\<^sub>An HOL.refl HOL.refl nlen\\<^sub>A modified\\<^sub>A]"], ["proof (chain)\npicking this:\n  \\<exists>k cmn'' mem'' cmn''' mem'''.\n     k < m\\<^sub>A \\<and>\n     abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) k (cmn'', mem'') \\<and>\n     (cmn'', mem'') \\<leadsto>\\<^sub>A (cmn''', mem''') \\<and>\n     (mem'' x\\<^sub>A \\<noteq> mem''' x\\<^sub>A \\<or>\n      dma\\<^sub>A mem'' x\\<^sub>A \\<noteq> dma\\<^sub>A mem''' x\\<^sub>A)", "obtain k\\<^sub>A cm\\<^sub>An'' mem\\<^sub>A'' cm\\<^sub>An''' mem\\<^sub>A''' \n  where \"k\\<^sub>A < m\\<^sub>A\" \n    and neval\\<^sub>An'': \"abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) k\\<^sub>A (cm\\<^sub>An'', mem\\<^sub>A'')\"\n    and eval\\<^sub>An'': \"(cm\\<^sub>An'', mem\\<^sub>A'') \\<leadsto>\\<^sub>A (cm\\<^sub>An''', mem\\<^sub>A''')\"\n    and modified\\<^sub>A'': \"(mem\\<^sub>A'' x\\<^sub>A \\<noteq> mem\\<^sub>A''' x\\<^sub>A \\<or> dma\\<^sub>A mem\\<^sub>A'' x\\<^sub>A \\<noteq> dma\\<^sub>A mem\\<^sub>A''' x\\<^sub>A)\""], ["proof (prove)\nusing this:\n  \\<exists>k cmn'' mem'' cmn''' mem'''.\n     k < m\\<^sub>A \\<and>\n     abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) k (cmn'', mem'') \\<and>\n     (cmn'', mem'') \\<leadsto>\\<^sub>A (cmn''', mem''') \\<and>\n     (mem'' x\\<^sub>A \\<noteq> mem''' x\\<^sub>A \\<or>\n      dma\\<^sub>A mem'' x\\<^sub>A \\<noteq> dma\\<^sub>A mem''' x\\<^sub>A)\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>A cm\\<^sub>An'' mem\\<^sub>A'' cm\\<^sub>An'''\n        mem\\<^sub>A'''.\n        \\<lbrakk>k\\<^sub>A < m\\<^sub>A;\n         abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) k\\<^sub>A\n          (cm\\<^sub>An'', mem\\<^sub>A'');\n         (cm\\<^sub>An'', mem\\<^sub>A'') \\<leadsto>\\<^sub>A\n         (cm\\<^sub>An''', mem\\<^sub>A''');\n         mem\\<^sub>A'' x\\<^sub>A \\<noteq> mem\\<^sub>A''' x\\<^sub>A \\<or>\n         dma\\<^sub>A mem\\<^sub>A'' x\\<^sub>A \\<noteq>\n         dma\\<^sub>A mem\\<^sub>A''' x\\<^sub>A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k\\<^sub>A < m\\<^sub>A\n  abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) k\\<^sub>A\n   (cm\\<^sub>An'', mem\\<^sub>A'')\n  (cm\\<^sub>An'', mem\\<^sub>A'') \\<leadsto>\\<^sub>A\n  (cm\\<^sub>An''', mem\\<^sub>A''')\n  mem\\<^sub>A'' x\\<^sub>A \\<noteq> mem\\<^sub>A''' x\\<^sub>A \\<or>\n  dma\\<^sub>A mem\\<^sub>A'' x\\<^sub>A \\<noteq>\n  dma\\<^sub>A mem\\<^sub>A''' x\\<^sub>A\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "let ?c\\<^sub>An'' = \"fst cm\\<^sub>An''\""], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "let ?mds\\<^sub>An'' = \"snd cm\\<^sub>An''\""], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from eval\\<^sub>An'' modified\\<^sub>A''"], ["proof (chain)\npicking this:\n  (cm\\<^sub>An'', mem\\<^sub>A'') \\<leadsto>\\<^sub>A\n  (cm\\<^sub>An''', mem\\<^sub>A''')\n  mem\\<^sub>A'' x\\<^sub>A \\<noteq> mem\\<^sub>A''' x\\<^sub>A \\<or>\n  dma\\<^sub>A mem\\<^sub>A'' x\\<^sub>A \\<noteq>\n  dma\\<^sub>A mem\\<^sub>A''' x\\<^sub>A", "have modifies\\<^sub>A'': \"\\<not> abs.doesnt_modify ?c\\<^sub>An'' x\\<^sub>A\""], ["proof (prove)\nusing this:\n  (cm\\<^sub>An'', mem\\<^sub>A'') \\<leadsto>\\<^sub>A\n  (cm\\<^sub>An''', mem\\<^sub>A''')\n  mem\\<^sub>A'' x\\<^sub>A \\<noteq> mem\\<^sub>A''' x\\<^sub>A \\<or>\n  dma\\<^sub>A mem\\<^sub>A'' x\\<^sub>A \\<noteq>\n  dma\\<^sub>A mem\\<^sub>A''' x\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<not> abs.doesnt_modify (fst cm\\<^sub>An'') x\\<^sub>A", "unfolding abs.doesnt_modify_def"], ["proof (prove)\nusing this:\n  (cm\\<^sub>An'', mem\\<^sub>A'') \\<leadsto>\\<^sub>A\n  (cm\\<^sub>An''', mem\\<^sub>A''')\n  mem\\<^sub>A'' x\\<^sub>A \\<noteq> mem\\<^sub>A''' x\\<^sub>A \\<or>\n  dma\\<^sub>A mem\\<^sub>A'' x\\<^sub>A \\<noteq>\n  dma\\<^sub>A mem\\<^sub>A''' x\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>mds mem c' mds' mem'.\n               \\<langle>fst cm\\<^sub>An'', mds, mem\\<rangle>\\<^sub>A \\<leadsto>\\<^sub>A\n               \\<langle>c', mds', mem'\\<rangle>\\<^sub>A \\<longrightarrow>\n               mem x\\<^sub>A = mem' x\\<^sub>A \\<and>\n               dma\\<^sub>A mem x\\<^sub>A = dma\\<^sub>A mem' x\\<^sub>A)", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  \\<not> abs.doesnt_modify (fst cm\\<^sub>An'') x\\<^sub>A\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "have loc_reach\\<^sub>A'': \"(cm\\<^sub>An'', mem\\<^sub>A'') \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cm\\<^sub>An'', mem\\<^sub>A'')\n    \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)", "apply(rule abs.neval_loc_reach)"], ["proof (prove)\ngoal (2 subgoals):\n 1. abs.neval ?lc' ?n (cm\\<^sub>An'', mem\\<^sub>A'')\n 2. ?lc' \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)", "apply(rule neval\\<^sub>An'')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cms\\<^sub>A ! n, mem\\<^sub>A)\n    \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)", "using abs.loc_reach.refl"], ["proof (prove)\nusing this:\n  \\<langle>fst (fst ?lc), snd (fst ?lc), snd ?lc\\<rangle>\\<^sub>A\n  \\<in> abs.loc_reach ?lc\n\ngoal (1 subgoal):\n 1. (cms\\<^sub>A ! n, mem\\<^sub>A)\n    \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)", "by simp"], ["proof (state)\nthis:\n  (cm\\<^sub>An'', mem\\<^sub>A'')\n  \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "have locally_sound_mode_use\\<^sub>An: \"abs.locally_sound_mode_use  (cms\\<^sub>A ! n, mem\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)", "using sound_mode_use\\<^sub>A nlen\\<^sub>A"], ["proof (prove)\nusing this:\n  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n  n < length cms\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)", "unfolding abs.sound_mode_use_def"], ["proof (prove)\nusing this:\n  case (cms\\<^sub>A, mem\\<^sub>A) of\n  (cms, mem) \\<Rightarrow>\n    list_all (\\<lambda>cm. abs.locally_sound_mode_use (cm, mem)) cms \\<and>\n    abs.globally_sound_mode_use (cms, mem)\n  n < length cms\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)", "using list_all_length"], ["proof (prove)\nusing this:\n  case (cms\\<^sub>A, mem\\<^sub>A) of\n  (cms, mem) \\<Rightarrow>\n    list_all (\\<lambda>cm. abs.locally_sound_mode_use (cm, mem)) cms \\<and>\n    abs.globally_sound_mode_use (cms, mem)\n  n < length cms\\<^sub>A\n  list_all ?P ?xs = (\\<forall>n<length ?xs. ?P (?xs ! n))\n\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)", "by fastforce"], ["proof (state)\nthis:\n  abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from modifies\\<^sub>A'' loc_reach\\<^sub>A'' locally_sound_mode_use\\<^sub>An abs.doesnt_read_or_modify_doesnt_modify"], ["proof (chain)\npicking this:\n  \\<not> abs.doesnt_modify (fst cm\\<^sub>An'') x\\<^sub>A\n  (cm\\<^sub>An'', mem\\<^sub>A'')\n  \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)\n  abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)\n  abs.doesnt_read_or_modify ?c ?x \\<Longrightarrow> abs.doesnt_modify ?c ?x", "have no_guar\\<^sub>An: \"x\\<^sub>A \\<notin> ?mds\\<^sub>An'' GuarNoReadOrWrite \\<and> x\\<^sub>A \\<notin> ?mds\\<^sub>An'' GuarNoWrite\""], ["proof (prove)\nusing this:\n  \\<not> abs.doesnt_modify (fst cm\\<^sub>An'') x\\<^sub>A\n  (cm\\<^sub>An'', mem\\<^sub>A'')\n  \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)\n  abs.locally_sound_mode_use (cms\\<^sub>A ! n, mem\\<^sub>A)\n  abs.doesnt_read_or_modify ?c ?x \\<Longrightarrow> abs.doesnt_modify ?c ?x\n\ngoal (1 subgoal):\n 1. x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoReadOrWrite \\<and>\n    x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoWrite", "unfolding abs.locally_sound_mode_use_def"], ["proof (prove)\nusing this:\n  \\<not> abs.doesnt_modify (fst cm\\<^sub>An'') x\\<^sub>A\n  (cm\\<^sub>An'', mem\\<^sub>A'')\n  \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A)\n  \\<forall>c' mds' mem'.\n     \\<langle>c', mds', mem'\\<rangle>\\<^sub>A\n     \\<in> abs.loc_reach (cms\\<^sub>A ! n, mem\\<^sub>A) \\<longrightarrow>\n     (\\<forall>x.\n         (x \\<in> mds' GuarNoReadOrWrite \\<longrightarrow>\n          abs.doesnt_read_or_modify c' x) \\<and>\n         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n          abs.doesnt_modify c' x))\n  abs.doesnt_read_or_modify ?c ?x \\<Longrightarrow> abs.doesnt_modify ?c ?x\n\ngoal (1 subgoal):\n 1. x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoReadOrWrite \\<and>\n    x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoWrite", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoReadOrWrite \\<and>\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "let ?mdss\\<^sub>A'' = \"map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'',mem\\<^sub>A'')])\""], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "have \"?mdss\\<^sub>A'' \\<in> abs.reachable_mode_states (cms\\<^sub>A, mem\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])\n    \\<in> abs.reachable_mode_states (cms\\<^sub>A, mem\\<^sub>A)", "apply(rule abs.neval_reachable_mode_states)"], ["proof (prove)\ngoal (3 subgoals):\n 1. abs.neval ?lc ?n (cm\\<^sub>An'', mem\\<^sub>A'')\n 2. ?lc = (cms\\<^sub>A ! n, mem\\<^sub>A)\n 3. n < length cms\\<^sub>A", "apply(rule neval\\<^sub>An'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. (cms\\<^sub>A ! n, mem\\<^sub>A) = (cms\\<^sub>A ! n, mem\\<^sub>A)\n 2. n < length cms\\<^sub>A", "apply(rule HOL.refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length cms\\<^sub>A", "by(rule nlen\\<^sub>A)"], ["proof (state)\nthis:\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])\n  \\<in> abs.reachable_mode_states (cms\\<^sub>A, mem\\<^sub>A)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "hence compat: \"abs.compatible_modes ?mdss\\<^sub>A''\""], ["proof (prove)\nusing this:\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])\n  \\<in> abs.reachable_mode_states (cms\\<^sub>A, mem\\<^sub>A)\n\ngoal (1 subgoal):\n 1. abs.compatible_modes\n     (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))", "using sound_mode_use\\<^sub>A"], ["proof (prove)\nusing this:\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])\n  \\<in> abs.reachable_mode_states (cms\\<^sub>A, mem\\<^sub>A)\n  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n\ngoal (1 subgoal):\n 1. abs.compatible_modes\n     (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))", "by(simp add: abs.globally_sound_mode_use_def)"], ["proof (state)\nthis:\n  abs.compatible_modes\n   (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "have n: \"?mdss\\<^sub>A'' ! n = ?mds\\<^sub>An''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! n =\n    snd cm\\<^sub>An''", "by(simp add: nlen\\<^sub>A)"], ["proof (state)\nthis:\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! n =\n  snd cm\\<^sub>An''\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "let ?mds\\<^sub>Ai = \"snd (cms\\<^sub>A ! i)\""], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "have i: \"?mdss\\<^sub>A'' ! i = ?mds\\<^sub>Ai\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! i =\n    snd (cms\\<^sub>A ! i)", "apply(simp add: ilen\\<^sub>A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (cms\\<^sub>A[n := cm\\<^sub>An''] ! i) = snd (cms\\<^sub>A ! i)", "by(metis nth_list_update_neq neq)"], ["proof (state)\nthis:\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! i =\n  snd (cms\\<^sub>A ! i)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from nlen\\<^sub>A"], ["proof (chain)\npicking this:\n  n < length cms\\<^sub>A", "have nlen\\<^sub>A'': \"n < length ?mdss\\<^sub>A''\""], ["proof (prove)\nusing this:\n  n < length cms\\<^sub>A\n\ngoal (1 subgoal):\n 1. n < length\n         (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))", "by simp"], ["proof (state)\nthis:\n  n < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from ilen\\<^sub>A"], ["proof (chain)\npicking this:\n  i < length cms\\<^sub>A", "have ilen\\<^sub>A'': \"i < length ?mdss\\<^sub>A''\""], ["proof (prove)\nusing this:\n  i < length cms\\<^sub>A\n\ngoal (1 subgoal):\n 1. i < length\n         (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))", "by simp"], ["proof (state)\nthis:\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "with compat n i nlen\\<^sub>A'' ilen\\<^sub>A'' no_guar\\<^sub>An neq"], ["proof (chain)\npicking this:\n  abs.compatible_modes\n   (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! n =\n  snd cm\\<^sub>An''\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! i =\n  snd (cms\\<^sub>A ! i)\n  n < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoReadOrWrite \\<and>\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoWrite\n  i \\<noteq> n\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))", "have no_asm\\<^sub>Ai: \"x\\<^sub>A \\<notin> ?mds\\<^sub>Ai AsmNoWrite \\<and> x\\<^sub>A \\<notin> ?mds\\<^sub>Ai AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  abs.compatible_modes\n   (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! n =\n  snd cm\\<^sub>An''\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! i =\n  snd (cms\\<^sub>A ! i)\n  n < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoReadOrWrite \\<and>\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoWrite\n  i \\<noteq> n\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n\ngoal (1 subgoal):\n 1. x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n    x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite", "unfolding abs.compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length\n          (map snd\n            (cms\\<^sub>A\n             [n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])) \\<longrightarrow>\n     (x \\<in> (map snd\n                (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) !\n               i)\n               AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length\n                   (map snd\n                     (cms\\<^sub>A\n                      [n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd\n                    (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) !\n                   j)\n                   GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (map snd\n                (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) !\n               i)\n               AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length\n                   (map snd\n                     (cms\\<^sub>A\n                      [n := fst (cm\\<^sub>An'', mem\\<^sub>A'')])).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd\n                    (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) !\n                   j)\n                   GuarNoWrite))\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! n =\n  snd cm\\<^sub>An''\n  map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]) ! i =\n  snd (cms\\<^sub>A ! i)\n  n < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoReadOrWrite \\<and>\n  x\\<^sub>A \\<notin> snd cm\\<^sub>An'' GuarNoWrite\n  i \\<noteq> n\n  i < length\n       (map snd (cms\\<^sub>A[n := fst (cm\\<^sub>An'', mem\\<^sub>A'')]))\n\ngoal (1 subgoal):\n 1. x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n    x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite", "by metis"], ["proof (state)\nthis:\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "obtain c\\<^sub>Ai mds\\<^sub>Ai where [simp]: \"cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>Ai mds\\<^sub>Ai.\n        cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "obtain c\\<^sub>Ci mds\\<^sub>Ci where [simp]: \"cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>Ci mds\\<^sub>Ci.\n        cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from in_\\<R>i pmmi"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C) \\<in> \\<R>i\n  preserves_modes_mem \\<R>i", "have [simp]: \"mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C) \\<in> \\<R>i\n  preserves_modes_mem \\<R>i\n\ngoal (1 subgoal):\n 1. mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci", "using preserves_modes_memD"], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C) \\<in> \\<R>i\n  preserves_modes_mem \\<R>i\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci", "by auto"], ["proof (state)\nthis:\n  mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "have [simp]: \"?mds\\<^sub>Ai = mds\\<^sub>Ai\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (cms\\<^sub>A ! i) = mds\\<^sub>Ai", "by simp"], ["proof (state)\nthis:\n  snd (cms\\<^sub>A ! i) = mds\\<^sub>Ai\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from no_asm\\<^sub>Ai"], ["proof (chain)\npicking this:\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite", "have no_asm\\<^sub>Ci: \"x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and> x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and>\n    x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite", "using x\\<^sub>C_def mds\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n  x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and>\n    x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite", "using doesnt_have_mode"], ["proof (prove)\nusing this:\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoWrite \\<and>\n  x\\<^sub>A \\<notin> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n  x\\<^sub>C = var\\<^sub>C_of x\\<^sub>A\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  (?x \\<notin> mds\\<^sub>A_of ?mds\\<^sub>C ?m) =\n  (var\\<^sub>C_of ?x \\<notin> ?mds\\<^sub>C ?m)\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and>\n    x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and>\n  x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x\\<^sub>C \\<in> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n 2. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "thus ?thesis"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and>\n  x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "unfolding var_asm_not_written_def"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoWrite \\<and>\n  x\\<^sub>C \\<notin> mds\\<^sub>Ci AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<not> (x\\<^sub>C \\<in> snd (cms\\<^sub>C ! i) AsmNoWrite \\<or>\n            x\\<^sub>C \\<in> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite)", "by simp"], ["proof (state)\nthis:\n  \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "let ?mds\\<^sub>Cn = \"snd (cms\\<^sub>C ! n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "let ?mds\\<^sub>Ci = \"snd (cms\\<^sub>C ! i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "assume new_var: \"x\\<^sub>C \\<notin> range var\\<^sub>C_of\""], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "from conc_respects_priv[OF new_var modified\\<^sub>C eval\\<^sub>Cn in_\\<R>n preserves sound_mode_use\\<^sub>A nlen len\\<^sub>A len\\<^sub>C]"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "have \"x\\<^sub>C \\<notin> ?mds\\<^sub>Cn GuarNoWrite \\<and> x\\<^sub>C \\<notin> ?mds\\<^sub>Cn GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n    x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "."], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "with priv_is_guar_priv nlen ilen neq"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i7 < length cms; ?j7 < length cms; ?i7 \\<noteq> ?j7\\<rbrakk>\n  \\<Longrightarrow> priv_mem\\<^sub>C ! ?i7\n                    \\<subseteq> snd (cms\\<^sub>C ! ?j7) GuarNoReadOrWrite\n  n < length cms\n  i < length cms\n  i \\<noteq> n\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite", "have \"x\\<^sub>C \\<notin> priv_mem\\<^sub>C ! i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?i7 < length cms; ?j7 < length cms; ?i7 \\<noteq> ?j7\\<rbrakk>\n  \\<Longrightarrow> priv_mem\\<^sub>C ! ?i7\n                    \\<subseteq> snd (cms\\<^sub>C ! ?j7) GuarNoReadOrWrite\n  n < length cms\n  i < length cms\n  i \\<noteq> n\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoWrite \\<and>\n  x\\<^sub>C \\<notin> snd (cms\\<^sub>C ! n) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> priv_mem\\<^sub>C ! i", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C \\<notin> priv_mem\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "with new_var new_asms_only_for_priv ilen"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  ?i7 < length cms \\<Longrightarrow>\n  (snd (cms\\<^sub>C ! ?i7) AsmNoReadOrWrite \\<union>\n   snd (cms\\<^sub>C ! ?i7) AsmNoWrite) \\<inter>\n  - range var\\<^sub>C_of\n  \\<subseteq> priv_mem\\<^sub>C ! ?i7\n  i < length cms\n  x\\<^sub>C \\<notin> priv_mem\\<^sub>C ! i", "have \"x\\<^sub>C \\<notin> ?mds\\<^sub>Ci AsmNoReadOrWrite \\<union> ?mds\\<^sub>Ci AsmNoWrite\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<notin> range var\\<^sub>C_of\n  ?i7 < length cms \\<Longrightarrow>\n  (snd (cms\\<^sub>C ! ?i7) AsmNoReadOrWrite \\<union>\n   snd (cms\\<^sub>C ! ?i7) AsmNoWrite) \\<inter>\n  - range var\\<^sub>C_of\n  \\<subseteq> priv_mem\\<^sub>C ! ?i7\n  i < length cms\n  x\\<^sub>C \\<notin> priv_mem\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. x\\<^sub>C\n    \\<notin> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite \\<union>\n             snd (cms\\<^sub>C ! i) AsmNoWrite", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C\n  \\<notin> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite \\<union>\n           snd (cms\\<^sub>C ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<notin> range var\\<^sub>C_of \\<Longrightarrow>\n    \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "thus ?thesis"], ["proof (prove)\nusing this:\n  x\\<^sub>C\n  \\<notin> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite \\<union>\n           snd (cms\\<^sub>C ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C", "unfolding var_asm_not_written_def"], ["proof (prove)\nusing this:\n  x\\<^sub>C\n  \\<notin> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite \\<union>\n           snd (cms\\<^sub>C ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. \\<not> (x\\<^sub>C \\<in> snd (cms\\<^sub>C ! i) AsmNoWrite \\<or>\n            x\\<^sub>C \\<in> snd (cms\\<^sub>C ! i) AsmNoReadOrWrite)", "by simp"], ["proof (state)\nthis:\n  \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i)) x\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  priv_is_asm_priv :: \"'Var\\<^sub>C Mds list \\<Rightarrow> bool\"\nwhere\n  \"priv_is_asm_priv mdss\\<^sub>C \\<equiv>  \\<forall>i < length cms. priv_mem\\<^sub>C ! i \\<subseteq> (mdss\\<^sub>C ! i) AsmNoReadOrWrite\""], ["", "definition\n  priv_is_guar_priv :: \"'Var\\<^sub>C Mds list \\<Rightarrow> bool\"\nwhere\n  \"priv_is_guar_priv mdss\\<^sub>C \\<equiv> \n    \\<forall>i < length cms. (\\<forall>j < length cms. i \\<noteq> j \\<longrightarrow> priv_mem\\<^sub>C ! i \\<subseteq> (mdss\\<^sub>C ! j) GuarNoReadOrWrite)\""], ["", "definition\n  new_asms_only_for_priv :: \"'Var\\<^sub>C Mds list \\<Rightarrow> bool\"\nwhere\n  \"new_asms_only_for_priv mdss\\<^sub>C \\<equiv> \n    \\<forall> i < length cms. \n      ((mdss\\<^sub>C ! i) AsmNoReadOrWrite \\<union> (mdss\\<^sub>C ! i) AsmNoWrite) \\<inter> (- range var\\<^sub>C_of) \\<subseteq> priv_mem\\<^sub>C ! i\""], ["", "definition\n  new_asms_NoReadOrWrite_only :: \"'Var\\<^sub>C Mds list \\<Rightarrow> bool\"\nwhere\n  \"new_asms_NoReadOrWrite_only mdss\\<^sub>C \\<equiv> \n    \\<forall> i < length cms. \n      (mdss\\<^sub>C ! i) AsmNoWrite \\<inter> (- range var\\<^sub>C_of) = {}\""], ["", "definition\n  modes_respect_priv :: \"'Var\\<^sub>C Mds list \\<Rightarrow> bool\"\nwhere\n  \"modes_respect_priv mdss\\<^sub>C  \\<equiv> priv_is_asm_priv mdss\\<^sub>C \\<and> priv_is_guar_priv mdss\\<^sub>C \\<and>\n                               new_asms_only_for_priv mdss\\<^sub>C \\<and>\n                               new_asms_NoReadOrWrite_only mdss\\<^sub>C\""], ["", "definition\n  ignores_old_vars :: \"('Var\\<^sub>C Mds list \\<Rightarrow> bool) \\<Rightarrow> bool\"\nwhere\n  \"ignores_old_vars P \\<equiv> \\<forall>mdss mdss'. length mdss = length mdss' \\<and> length mdss' = length cms \\<longrightarrow> \n    (map (\\<lambda>x m. x m \\<inter> (- range var\\<^sub>C_of)) mdss) = (map (\\<lambda>x m. x m \\<inter> (- range var\\<^sub>C_of)) mdss') \\<longrightarrow> \n  P mdss = P mdss'\""], ["", "lemma ignores_old_vars_conj:\n  assumes Rdef: \"(\\<And>x. R x = (P x \\<and> Q x))\"\n  assumes iP: \"ignores_old_vars P\" \n  assumes iQ: \"ignores_old_vars Q\" \n  shows \"ignores_old_vars R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars R", "unfolding ignores_old_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mdss mdss'.\n       length mdss = length mdss' \\<and>\n       length mdss' = length cms \\<longrightarrow>\n       map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n       map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n        mdss' \\<longrightarrow>\n       R mdss = R mdss'", "apply(simp add: Rdef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mdss mdss'.\n       length mdss = length mdss' \\<and>\n       length mdss' = length cms \\<longrightarrow>\n       map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n       map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n        mdss' \\<longrightarrow>\n       (P mdss \\<and> Q mdss) = (P mdss' \\<and> Q mdss')", "apply(intro impI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length mdss' \\<and> length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n         mdss'\\<rbrakk>\n       \\<Longrightarrow> (P mdss \\<and> Q mdss) = (P mdss' \\<and> Q mdss')", "apply(rule conj_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length mdss' \\<and> length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n         mdss'\\<rbrakk>\n       \\<Longrightarrow> P mdss = P mdss'\n 2. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length mdss' \\<and> length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        P mdss'\\<rbrakk>\n       \\<Longrightarrow> Q mdss = Q mdss'", "apply(erule (1) iP[unfolded ignores_old_vars_def, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length mdss' \\<and> length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        P mdss'\\<rbrakk>\n       \\<Longrightarrow> Q mdss = Q mdss'", "apply(erule (1) iQ[unfolded ignores_old_vars_def, rule_format])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nth_map_eq': \n  \"length xs = length ys \\<Longrightarrow> map f xs = map g ys \\<Longrightarrow> i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys; map f xs = map g ys;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> f (xs ! i) = g (ys ! i)", "apply(induct xs ys rule: list_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>map f [] = map g []; i < length []\\<rbrakk>\n    \\<Longrightarrow> f ([] ! i) = g ([] ! i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n        \\<Longrightarrow> f (xs ! i) = g (ys ! i);\n        map f (x # xs) = map g (y # ys); i < length (x # xs)\\<rbrakk>\n       \\<Longrightarrow> f ((x # xs) ! i) = g ((y # ys) ! i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n        \\<Longrightarrow> f (xs ! i) = g (ys ! i);\n        map f (x # xs) = map g (y # ys); i < length (x # xs)\\<rbrakk>\n       \\<Longrightarrow> f ((x # xs) ! i) = g ((y # ys) ! i)", "apply(case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n        \\<Longrightarrow> f (xs ! i) = g (ys ! i);\n        map f (x # xs) = map g (y # ys); i < length (x # xs); i = 0\\<rbrakk>\n       \\<Longrightarrow> f ((x # xs) ! i) = g ((y # ys) ! i)\n 2. \\<And>x xs y ys nat.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n        \\<Longrightarrow> f (xs ! i) = g (ys ! i);\n        map f (x # xs) = map g (y # ys); i < length (x # xs);\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f ((x # xs) ! i) = g ((y # ys) ! i)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys nat.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n        \\<Longrightarrow> f (xs ! i) = g (ys ! i);\n        map f (x # xs) = map g (y # ys); i < length (x # xs);\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f ((x # xs) ! i) = g ((y # ys) ! i)", "by (metis length_map nth_map)"], ["", "lemma nth_map_eq: \n  \"map f xs = map g ys \\<Longrightarrow> i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n    \\<Longrightarrow> f (xs ! i) = g (ys ! i)", "apply(rule nth_map_eq')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n    \\<Longrightarrow> length xs = length ys\n 2. \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n    \\<Longrightarrow> map f xs = map g ys\n 3. \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n    \\<Longrightarrow> i < length xs", "apply(erule map_eq_imp_length_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n    \\<Longrightarrow> map f xs = map g ys\n 2. \\<lbrakk>map f xs = map g ys; i < length xs\\<rbrakk>\n    \\<Longrightarrow> i < length xs", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nth_in_Union_over_set: \n  \"i < length xs \\<Longrightarrow> xs ! i \\<subseteq> \\<Union>(set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs \\<Longrightarrow> xs ! i \\<subseteq> \\<Union> (set xs)", "by (simp add: Union_upper)"], ["", "lemma priv_are_new_vars: \n  \"x \\<in> priv_mem\\<^sub>C ! i \\<Longrightarrow> i < length cms \\<Longrightarrow> x \\<notin> range var\\<^sub>C_of\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> priv_mem\\<^sub>C ! i; i < length cms\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> range var\\<^sub>C_of", "using new_vars_priv nth_in_Union_over_set subsetD"], ["proof (prove)\nusing this:\n  - range var\\<^sub>C_of = \\<Union> (set priv_mem\\<^sub>C)\n  ?i < length ?xs \\<Longrightarrow> ?xs ! ?i \\<subseteq> \\<Union> (set ?xs)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> priv_mem\\<^sub>C ! i; i < length cms\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> range var\\<^sub>C_of", "using priv_mem\\<^sub>C_def"], ["proof (prove)\nusing this:\n  - range var\\<^sub>C_of = \\<Union> (set priv_mem\\<^sub>C)\n  ?i < length ?xs \\<Longrightarrow> ?xs ! ?i \\<subseteq> \\<Union> (set ?xs)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  priv_mem\\<^sub>C \\<equiv> map priv_mem cms\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> priv_mem\\<^sub>C ! i; i < length cms\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> range var\\<^sub>C_of", "by fastforce"], ["", "lemma priv_is_asm_priv_ignores_old_vars:\n  \"ignores_old_vars priv_is_asm_priv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars priv_is_asm_priv", "apply(clarsimp simp: ignores_old_vars_def priv_is_asm_priv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n         mdss'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<length cms.\n                             priv_mem\\<^sub>C ! i\n                             \\<subseteq> (mdss ! i) AsmNoReadOrWrite) =\n                         (\\<forall>i<length cms.\n                             priv_mem\\<^sub>C ! i\n                             \\<subseteq> (mdss' ! i) AsmNoReadOrWrite)", "apply(rule all_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! i) AsmNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! i) AsmNoReadOrWrite)", "apply(drule nth_map_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> ?i18 mdss mdss' i < length mdss\n 2. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms;\n        (\\<lambda>m.\n            (mdss ! ?i18 mdss mdss' i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m.\n            (mdss' ! ?i18 mdss mdss' i) m \\<inter>\n            - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! i) AsmNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! i) AsmNoReadOrWrite)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! i) AsmNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! i) AsmNoReadOrWrite)", "apply(blast dest: priv_are_new_vars fun_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma priv_is_guar_priv_ignores_old_vars:\n  \"ignores_old_vars priv_is_guar_priv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars priv_is_guar_priv", "apply(clarsimp simp: ignores_old_vars_def priv_is_guar_priv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n         mdss'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<length cms.\n                             \\<forall>j<length cms.\n                                i \\<noteq> j \\<longrightarrow>\n                                priv_mem\\<^sub>C ! i\n                                \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (\\<forall>i<length cms.\n                             \\<forall>j<length cms.\n                                i \\<noteq> j \\<longrightarrow>\n                                priv_mem\\<^sub>C ! i\n                                \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(rule all_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j<length cms.\n                             i \\<noteq> j \\<longrightarrow>\n                             priv_mem\\<^sub>C ! i\n                             \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (\\<forall>j<length cms.\n                             i \\<noteq> j \\<longrightarrow>\n                             priv_mem\\<^sub>C ! i\n                             \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(rule all_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms\\<rbrakk>\n       \\<Longrightarrow> (i \\<noteq> j \\<longrightarrow>\n                          priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (i \\<noteq> j \\<longrightarrow>\n                          priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(rule imp_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms\\<rbrakk>\n       \\<Longrightarrow> (i \\<noteq> j) = (i \\<noteq> j)\n 2. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(rule HOL.refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(frule nth_map_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> ?i24 mdss mdss' i j < length mdss\n 2. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms; i \\<noteq> j;\n        (\\<lambda>m.\n            (mdss ! ?i24 mdss mdss' i j) m \\<inter>\n            - range var\\<^sub>C_of) =\n        (\\<lambda>m.\n            (mdss' ! ?i24 mdss mdss' i j) m \\<inter>\n            - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms; j < length cms; i \\<noteq> j;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(drule_tac i=j in nth_map_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms; j < length cms; i \\<noteq> j;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> j < length mdss\n 2. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms; j < length cms; i \\<noteq> j;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of);\n        (\\<lambda>m. (mdss ! j) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! j) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i j.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms; j < length cms; i \\<noteq> j;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of);\n        (\\<lambda>m. (mdss ! j) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! j) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss ! j) GuarNoReadOrWrite) =\n                         (priv_mem\\<^sub>C ! i\n                          \\<subseteq> (mdss' ! j) GuarNoReadOrWrite)", "apply(blast dest: priv_are_new_vars fun_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_asms_only_for_priv_ignores_old_vars:\n  \"ignores_old_vars new_asms_only_for_priv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars new_asms_only_for_priv", "apply(clarsimp simp: ignores_old_vars_def new_asms_only_for_priv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n         mdss'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<length cms.\n                             ((mdss ! i) AsmNoReadOrWrite \\<union>\n                              (mdss ! i) AsmNoWrite) \\<inter>\n                             - range var\\<^sub>C_of\n                             \\<subseteq> priv_mem\\<^sub>C ! i) =\n                         (\\<forall>i<length cms.\n                             ((mdss' ! i) AsmNoReadOrWrite \\<union>\n                              (mdss' ! i) AsmNoWrite) \\<inter>\n                             - range var\\<^sub>C_of\n                             \\<subseteq> priv_mem\\<^sub>C ! i)", "apply(rule all_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> (((mdss ! i) AsmNoReadOrWrite \\<union>\n                           (mdss ! i) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! i) =\n                         (((mdss' ! i) AsmNoReadOrWrite \\<union>\n                           (mdss' ! i) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! i)", "apply(drule nth_map_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> ?i19 mdss mdss' i < length mdss\n 2. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms;\n        (\\<lambda>m.\n            (mdss ! ?i19 mdss mdss' i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m.\n            (mdss' ! ?i19 mdss mdss' i) m \\<inter>\n            - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (((mdss ! i) AsmNoReadOrWrite \\<union>\n                           (mdss ! i) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! i) =\n                         (((mdss' ! i) AsmNoReadOrWrite \\<union>\n                           (mdss' ! i) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> (((mdss ! i) AsmNoReadOrWrite \\<union>\n                           (mdss ! i) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! i) =\n                         (((mdss' ! i) AsmNoReadOrWrite \\<union>\n                           (mdss' ! i) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! i)", "apply(blast dest: priv_are_new_vars fun_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_asms_NoReadOrWrite_only_ignores_old_vars:\n  \"ignores_old_vars new_asms_NoReadOrWrite_only\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars new_asms_NoReadOrWrite_only", "apply(clarsimp simp: ignores_old_vars_def new_asms_NoReadOrWrite_only_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss'.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n         mdss'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<length cms.\n                             (mdss ! i) AsmNoWrite \\<inter>\n                             - range var\\<^sub>C_of =\n                             {}) =\n                         (\\<forall>i<length cms.\n                             (mdss' ! i) AsmNoWrite \\<inter>\n                             - range var\\<^sub>C_of =\n                             {})", "apply(rule all_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n        map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss';\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> ((mdss ! i) AsmNoWrite \\<inter>\n                          - range var\\<^sub>C_of =\n                          {}) =\n                         ((mdss' ! i) AsmNoWrite \\<inter>\n                          - range var\\<^sub>C_of =\n                          {})", "apply(drule nth_map_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms\\<rbrakk>\n       \\<Longrightarrow> ?i19 mdss mdss' i < length mdss\n 2. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms;\n        (\\<lambda>m.\n            (mdss ! ?i19 mdss mdss' i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m.\n            (mdss' ! ?i19 mdss mdss' i) m \\<inter>\n            - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> ((mdss ! i) AsmNoWrite \\<inter>\n                          - range var\\<^sub>C_of =\n                          {}) =\n                         ((mdss' ! i) AsmNoWrite \\<inter>\n                          - range var\\<^sub>C_of =\n                          {})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mdss mdss' i.\n       \\<lbrakk>length mdss = length cms; length mdss' = length cms;\n        i < length cms;\n        (\\<lambda>m. (mdss ! i) m \\<inter> - range var\\<^sub>C_of) =\n        (\\<lambda>m. (mdss' ! i) m \\<inter> - range var\\<^sub>C_of)\\<rbrakk>\n       \\<Longrightarrow> ((mdss ! i) AsmNoWrite \\<inter>\n                          - range var\\<^sub>C_of =\n                          {}) =\n                         ((mdss' ! i) AsmNoWrite \\<inter>\n                          - range var\\<^sub>C_of =\n                          {})", "apply(blast dest: priv_are_new_vars fun_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma modes_respect_priv_ignores_old_vars:\n   \"ignores_old_vars modes_respect_priv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars modes_respect_priv", "apply(rule ignores_old_vars_conj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. modes_respect_priv x = (?P x \\<and> ?Q x)\n 2. ignores_old_vars ?P\n 3. ignores_old_vars ?Q", "apply(subst modes_respect_priv_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       (priv_is_asm_priv x \\<and>\n        priv_is_guar_priv x \\<and>\n        new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x) =\n       (?P5 x x \\<and> ?Q5 x x)\n 2. ignores_old_vars (\\<lambda>x. ?P5 x x)\n 3. ignores_old_vars (\\<lambda>x. ?Q5 x x)", "apply(rule HOL.refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ignores_old_vars priv_is_asm_priv\n 2. ignores_old_vars\n     (\\<lambda>x.\n         priv_is_guar_priv x \\<and>\n         new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x)", "apply(rule priv_is_asm_priv_ignores_old_vars)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars\n     (\\<lambda>x.\n         priv_is_guar_priv x \\<and>\n         new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x)", "apply(rule ignores_old_vars_conj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       (priv_is_guar_priv x \\<and>\n        new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x) =\n       (?P8 x \\<and> ?Q8 x)\n 2. ignores_old_vars ?P8\n 3. ignores_old_vars ?Q8", "apply(rule HOL.refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ignores_old_vars priv_is_guar_priv\n 2. ignores_old_vars\n     (\\<lambda>x.\n         new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x)", "apply(rule priv_is_guar_priv_ignores_old_vars)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars\n     (\\<lambda>x.\n         new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x)", "apply(rule ignores_old_vars_conj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       (new_asms_only_for_priv x \\<and> new_asms_NoReadOrWrite_only x) =\n       (?P13 x \\<and> ?Q13 x)\n 2. ignores_old_vars ?P13\n 3. ignores_old_vars ?Q13", "apply(rule HOL.refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ignores_old_vars new_asms_only_for_priv\n 2. ignores_old_vars new_asms_NoReadOrWrite_only", "apply(rule new_asms_only_for_priv_ignores_old_vars)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ignores_old_vars new_asms_NoReadOrWrite_only", "apply(rule new_asms_NoReadOrWrite_only_ignores_old_vars)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ignores_old_varsD:\n  \"ignores_old_vars P \\<Longrightarrow> length mdss = length mdss' \\<Longrightarrow> length mdss' = length cms \\<Longrightarrow>\n  (map (\\<lambda>x m. x m \\<inter> (- range var\\<^sub>C_of)) mdss) = (map (\\<lambda>x m. x m \\<inter> (- range var\\<^sub>C_of)) mdss') \\<Longrightarrow> \n  P mdss = P mdss'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ignores_old_vars P; length mdss = length mdss';\n     length mdss' = length cms;\n     map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n     map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss'\\<rbrakk>\n    \\<Longrightarrow> P mdss = P mdss'", "unfolding ignores_old_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>mdss mdss'.\n                length mdss = length mdss' \\<and>\n                length mdss' = length cms \\<longrightarrow>\n                map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n                 mdss =\n                map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n                 mdss' \\<longrightarrow>\n                P mdss = P mdss';\n     length mdss = length mdss'; length mdss' = length cms;\n     map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss =\n     map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of) mdss'\\<rbrakk>\n    \\<Longrightarrow> P mdss = P mdss'", "by force"], ["", "lemma new_privs_preserved':\n  \"\\<langle>c, mds, mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<Longrightarrow> (mds m \\<inter> (- range var\\<^sub>C_of)) = (mds' m \\<inter> (- range var\\<^sub>C_of))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c, mds, mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n    \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<Longrightarrow>\n    mds m \\<inter> - range var\\<^sub>C_of =\n    mds' m \\<inter> - range var\\<^sub>C_of", "using new_privs_preserved"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<langle>?c, ?mds, ?mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n           \\<langle>?c', ?mds', ?mem'\\<rangle>\\<^sub>C;\n   ?x \\<notin> range var\\<^sub>C_of\\<rbrakk>\n  \\<Longrightarrow> (?x \\<in> ?mds ?m) = (?x \\<in> ?mds' ?m)\n\ngoal (1 subgoal):\n 1. \\<langle>c, mds, mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n    \\<langle>c', mds', mem'\\<rangle>\\<^sub>C \\<Longrightarrow>\n    mds m \\<inter> - range var\\<^sub>C_of =\n    mds' m \\<inter> - range var\\<^sub>C_of", "by blast"], ["", "lemma map_nth_eq:\n  \"length xs = length ys \\<Longrightarrow> (\\<And>i. i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)) \\<Longrightarrow>\n  map f xs = map g ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys;\n     \\<And>i.\n        i < length xs \\<Longrightarrow> f (xs ! i) = g (ys ! i)\\<rbrakk>\n    \\<Longrightarrow> map f xs = map g ys", "apply(induct xs ys rule: list_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i < length [] \\<Longrightarrow>\n        f ([] ! i) = g ([] ! i)) \\<Longrightarrow>\n    map f [] = map g []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        (\\<And>i.\n            i < length xs \\<Longrightarrow>\n            f (xs ! i) = g (ys ! i)) \\<Longrightarrow>\n        map f xs = map g ys;\n        \\<And>i.\n           i < length (x # xs) \\<Longrightarrow>\n           f ((x # xs) ! i) = g ((y # ys) ! i)\\<rbrakk>\n       \\<Longrightarrow> map f (x # xs) = map g (y # ys)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        (\\<And>i.\n            i < length xs \\<Longrightarrow>\n            f (xs ! i) = g (ys ! i)) \\<Longrightarrow>\n        map f xs = map g ys;\n        \\<And>i.\n           i < length (x # xs) \\<Longrightarrow>\n           f ((x # xs) ! i) = g ((y # ys) ! i)\\<rbrakk>\n       \\<Longrightarrow> map f (x # xs) = map g (y # ys)", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ignores_old_vars_conc_meval:\n  assumes ignores: \"ignores_old_vars P\"\n  assumes meval:  \"conc.meval_abv gc\\<^sub>C n gc\\<^sub>C'\"\n  assumes len_eq: \"length (fst gc\\<^sub>C) = length cms\"\n  shows \"P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "obtain cms\\<^sub>C mem\\<^sub>C where [simp]: \"gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cms\\<^sub>C mem\\<^sub>C.\n        gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "obtain cms\\<^sub>C' mem\\<^sub>C' where [simp]: \"gc\\<^sub>C' = (cms\\<^sub>C', mem\\<^sub>C')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cms\\<^sub>C' mem\\<^sub>C'.\n        gc\\<^sub>C' = (cms\\<^sub>C', mem\\<^sub>C') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  gc\\<^sub>C' = (cms\\<^sub>C', mem\\<^sub>C')\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "from meval"], ["proof (chain)\npicking this:\n  conc.meval_abv gc\\<^sub>C n gc\\<^sub>C'", "obtain cmn' mem\\<^sub>C' where\n    eval\\<^sub>Cn: \"(cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C (cmn', mem\\<^sub>C')\" and len: \"n < length cms\\<^sub>C\" and cms\\<^sub>C'_def: \"cms\\<^sub>C' = cms\\<^sub>C[n := cmn']\""], ["proof (prove)\nusing this:\n  conc.meval_abv gc\\<^sub>C n gc\\<^sub>C'\n\ngoal (1 subgoal):\n 1. (\\<And>cmn' mem\\<^sub>C'.\n        \\<lbrakk>(cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                 (cmn', mem\\<^sub>C');\n         n < length cms\\<^sub>C;\n         cms\\<^sub>C' = cms\\<^sub>C[n := cmn']\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using conc.meval.cases"], ["proof (prove)\nusing this:\n  conc.meval_abv gc\\<^sub>C n gc\\<^sub>C'\n  \\<lbrakk>conc.meval_abv (?a1.0, ?a2.0) ?a3.0 (?a4.0, ?a5.0);\n   \\<And>cms n mem cm' mem'.\n      \\<lbrakk>?a1.0 = cms; ?a2.0 = mem; ?a3.0 = n; ?a4.0 = cms[n := cm'];\n       ?a5.0 = mem'; (cms ! n, mem) \\<leadsto>\\<^sub>C (cm', mem');\n       n < length cms\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>cmn' mem\\<^sub>C'.\n        \\<lbrakk>(cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                 (cmn', mem\\<^sub>C');\n         n < length cms\\<^sub>C;\n         cms\\<^sub>C' = cms\\<^sub>C[n := cmn']\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C (cmn', mem\\<^sub>C')\n  n < length cms\\<^sub>C\n  cms\\<^sub>C' = cms\\<^sub>C[n := cmn']\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "have\n    \"P (map snd cms\\<^sub>C) = P (map snd cms\\<^sub>C')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (map snd cms\\<^sub>C) = P (map snd cms\\<^sub>C')", "apply(rule ignores_old_varsD[OF ignores])"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (map snd cms\\<^sub>C) = length (map snd cms\\<^sub>C')\n 2. length (map snd cms\\<^sub>C') = length cms\n 3. map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C) =\n    map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C')", "apply(simp add: cms\\<^sub>C'_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (map snd cms\\<^sub>C') = length cms\n 2. map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C) =\n    map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C')", "using len_eq"], ["proof (prove)\nusing this:\n  length (fst gc\\<^sub>C) = length cms\n\ngoal (2 subgoals):\n 1. length (map snd cms\\<^sub>C') = length cms\n 2. map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C) =\n    map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C')", "apply (simp add: cms\\<^sub>C'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C) =\n    map (\\<lambda>x m. x m \\<inter> - range var\\<^sub>C_of)\n     (map snd cms\\<^sub>C')", "apply(rule map_nth_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (map snd cms\\<^sub>C) = length (map snd cms\\<^sub>C')\n 2. \\<And>i.\n       i < length (map snd cms\\<^sub>C) \\<Longrightarrow>\n       (\\<lambda>m.\n           (map snd cms\\<^sub>C ! i) m \\<inter> - range var\\<^sub>C_of) =\n       (\\<lambda>m.\n           (map snd cms\\<^sub>C' ! i) m \\<inter> - range var\\<^sub>C_of)", "apply (simp add: cms\\<^sub>C'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (map snd cms\\<^sub>C) \\<Longrightarrow>\n       (\\<lambda>m.\n           (map snd cms\\<^sub>C ! i) m \\<inter> - range var\\<^sub>C_of) =\n       (\\<lambda>m.\n           (map snd cms\\<^sub>C' ! i) m \\<inter> - range var\\<^sub>C_of)", "apply(case_tac \"i = n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i = n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)\n 2. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>n < length cms\\<^sub>C; i = n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             snd (cms\\<^sub>C ! n) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! n) m \\<inter>\n                             - range var\\<^sub>C_of)\n 2. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)", "apply(rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i m.\n       \\<lbrakk>n < length cms\\<^sub>C; i = n\\<rbrakk>\n       \\<Longrightarrow> snd (cms\\<^sub>C ! n) m \\<inter>\n                         - range var\\<^sub>C_of =\n                         (map snd cms\\<^sub>C' ! n) m \\<inter>\n                         - range var\\<^sub>C_of\n 2. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)", "apply(simp add: cms\\<^sub>C'_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i m.\n       \\<lbrakk>n < length cms\\<^sub>C; i = n\\<rbrakk>\n       \\<Longrightarrow> snd (cms\\<^sub>C ! n) m \\<inter>\n                         - range var\\<^sub>C_of =\n                         snd cmn' m \\<inter> - range var\\<^sub>C_of\n 2. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)", "using eval\\<^sub>Cn new_privs_preserved'"], ["proof (prove)\nusing this:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C (cmn', mem\\<^sub>C')\n  \\<langle>?c, ?mds, ?mem\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n  \\<langle>?c', ?mds', ?mem'\\<rangle>\\<^sub>C \\<Longrightarrow>\n  ?mds ?m \\<inter> - range var\\<^sub>C_of =\n  ?mds' ?m \\<inter> - range var\\<^sub>C_of\n\ngoal (2 subgoals):\n 1. \\<And>i m.\n       \\<lbrakk>n < length cms\\<^sub>C; i = n\\<rbrakk>\n       \\<Longrightarrow> snd (cms\\<^sub>C ! n) m \\<inter>\n                         - range var\\<^sub>C_of =\n                         snd cmn' m \\<inter> - range var\\<^sub>C_of\n 2. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)", "apply(metis surjective_pairing)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length (map snd cms\\<^sub>C); i \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>m.\n                             (map snd cms\\<^sub>C ! i) m \\<inter>\n                             - range var\\<^sub>C_of) =\n                         (\\<lambda>m.\n                             (map snd cms\\<^sub>C' ! i) m \\<inter>\n                             - range var\\<^sub>C_of)", "by (simp add: cms\\<^sub>C'_def)"], ["proof (state)\nthis:\n  P (map snd cms\\<^sub>C) = P (map snd cms\\<^sub>C')\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P (map snd cms\\<^sub>C) = P (map snd cms\\<^sub>C')\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "by simp"], ["proof (state)\nthis:\n  P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ignores_old_vars_conc_meval_sched:\n  assumes ignores: \"ignores_old_vars P\"\n  assumes meval_sched:  \"conc.meval_sched sched gc\\<^sub>C gc\\<^sub>C'\"\n  assumes len_eq: \"length (fst gc\\<^sub>C) = length cms\"\n  shows \"P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "using meval_sched len_eq"], ["proof (prove)\nusing this:\n  conc.meval_sched_abv gc\\<^sub>C sched gc\\<^sub>C'\n  length (fst gc\\<^sub>C) = length cms\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc\\<^sub>C)) = P (map snd (fst gc\\<^sub>C'))", "proof(induct rule: conc.meval_sched.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>conc.meval_sched_abv c [] c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))\n 2. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "case (1 gc gc')"], ["proof (state)\nthis:\n  conc.meval_sched_abv gc [] gc'\n  length (fst gc) = length cms\n\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>conc.meval_sched_abv c [] c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))\n 2. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "thus ?case"], ["proof (prove)\nusing this:\n  conc.meval_sched_abv gc [] gc'\n  length (fst gc) = length cms\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc)) = P (map snd (fst gc'))", "by simp"], ["proof (state)\nthis:\n  P (map snd (fst gc)) = P (map snd (fst gc'))\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "case (2 n ns gc gc')"], ["proof (state)\nthis:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "from 2(2)"], ["proof (chain)\npicking this:\n  conc.meval_sched_abv gc (n # ns) gc'", "obtain gc'' where b: \"conc.meval_abv gc n gc''\" and a: \"conc.meval_sched ns gc'' gc'\""], ["proof (prove)\nusing this:\n  conc.meval_sched_abv gc (n # ns) gc'\n\ngoal (1 subgoal):\n 1. (\\<And>gc''.\n        \\<lbrakk>conc.meval_abv gc n gc'';\n         conc.meval_sched_abv gc'' ns gc'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  conc.meval_abv gc n gc''\n  conc.meval_sched_abv gc'' ns gc'\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "with 2"], ["proof (chain)\npicking this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n  conc.meval_abv gc n gc''\n  conc.meval_sched_abv gc'' ns gc'", "have \"length (fst gc'') = length cms\""], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n  conc.meval_abv gc n gc''\n  conc.meval_sched_abv gc'' ns gc'\n\ngoal (1 subgoal):\n 1. length (fst gc'') = length cms", "using conc.meval.cases"], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n  conc.meval_abv gc n gc''\n  conc.meval_sched_abv gc'' ns gc'\n  \\<lbrakk>conc.meval_abv (?a1.0, ?a2.0) ?a3.0 (?a4.0, ?a5.0);\n   \\<And>cms n mem cm' mem'.\n      \\<lbrakk>?a1.0 = cms; ?a2.0 = mem; ?a3.0 = n; ?a4.0 = cms[n := cm'];\n       ?a5.0 = mem'; (cms ! n, mem) \\<leadsto>\\<^sub>C (cm', mem');\n       n < length cms\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. length (fst gc'') = length cms", "by (metis length_list_update surjective_pairing)"], ["proof (state)\nthis:\n  length (fst gc'') = length cms\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c'.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst x) = length cms\\<rbrakk>\n                   \\<Longrightarrow> P (map snd (fst x)) =\n                                     P (map snd (fst c'));\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst c) = length cms\\<rbrakk>\n       \\<Longrightarrow> P (map snd (fst c)) = P (map snd (fst c'))", "with 2 a b"], ["proof (chain)\npicking this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n  conc.meval_sched_abv gc'' ns gc'\n  conc.meval_abv gc n gc''\n  length (fst gc'') = length cms", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n  conc.meval_sched_abv gc'' ns gc'\n  conc.meval_abv gc n gc''\n  length (fst gc'') = length cms\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc)) = P (map snd (fst gc'))", "using ignores_old_vars_conc_meval ignores"], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc';\n   length (fst ?x7) = length cms\\<rbrakk>\n  \\<Longrightarrow> P (map snd (fst ?x7)) = P (map snd (fst gc'))\n  conc.meval_sched_abv gc (n # ns) gc'\n  length (fst gc) = length cms\n  conc.meval_sched_abv gc'' ns gc'\n  conc.meval_abv gc n gc''\n  length (fst gc'') = length cms\n  \\<lbrakk>ignores_old_vars ?P; conc.meval_abv ?gc\\<^sub>C ?n ?gc\\<^sub>C';\n   length (fst ?gc\\<^sub>C) = length cms\\<rbrakk>\n  \\<Longrightarrow> ?P (map snd (fst ?gc\\<^sub>C)) =\n                    ?P (map snd (fst ?gc\\<^sub>C'))\n  ignores_old_vars P\n\ngoal (1 subgoal):\n 1. P (map snd (fst gc)) = P (map snd (fst gc'))", "by metis"], ["proof (state)\nthis:\n  P (map snd (fst gc)) = P (map snd (fst gc'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma meval_sched_modes_respect_priv:\n  \"conc.meval_sched sched gc\\<^sub>C gc\\<^sub>C' \\<Longrightarrow>   length (fst gc\\<^sub>C) = length cms \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched gc\\<^sub>C';\n     length (fst gc\\<^sub>C) = length cms;\n     modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n    \\<Longrightarrow> modes_respect_priv (map snd (fst gc\\<^sub>C'))", "by(blast dest!: ignores_old_vars_conc_meval_sched[OF modes_respect_priv_ignores_old_vars])"], ["", "lemma meval_modes_respect_priv:\n  \"conc.meval_abv gc\\<^sub>C n gc\\<^sub>C' \\<Longrightarrow>   length (fst gc\\<^sub>C) = length cms \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n  modes_respect_priv (map snd (fst gc\\<^sub>C'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conc.meval_abv gc\\<^sub>C n gc\\<^sub>C';\n     length (fst gc\\<^sub>C) = length cms;\n     modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n    \\<Longrightarrow> modes_respect_priv (map snd (fst gc\\<^sub>C'))", "by(blast dest!: ignores_old_vars_conc_meval[OF modes_respect_priv_ignores_old_vars])"], ["", "(* I think this lemma would guarantee globally sound mode use for all of the\n  var\\<^sub>C_of variables. It should also hold for all of the non var\\<^sub>C_of variables by\n  the locale assumptions above *)"], ["", "lemma traces_refinement:\n  \"\\<And>gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A. conc.meval_sched sched\\<^sub>C gc\\<^sub>C gc\\<^sub>C' \\<Longrightarrow>\n    length (fst gc\\<^sub>A) = length cms \\<Longrightarrow> length (fst gc\\<^sub>C) = length cms  \\<Longrightarrow>\n    (\\<And>i. i < length cms \\<Longrightarrow> ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)) \\<in> \\<R>_rel (cms ! i)) \\<Longrightarrow>\n    abs.sound_mode_use gc\\<^sub>A \\<Longrightarrow> modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n   \\<exists>sched\\<^sub>A gc\\<^sub>A'. abs.meval_sched sched\\<^sub>A gc\\<^sub>A gc\\<^sub>A' \\<and>\n          (\\<forall>i. i < length cms \\<longrightarrow> ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), (fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')) \\<in> \\<R>_rel (cms ! i)) \\<and>\n          abs.sound_mode_use gc\\<^sub>A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C gc\\<^sub>C';\n        length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C gc\\<^sub>C';\n        length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "fix gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C gc\\<^sub>C';\n        length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "assume meval\\<^sub>C: \"conc.meval_sched sched\\<^sub>C gc\\<^sub>C gc\\<^sub>C'\"\n     and len_eq [simp]: \"length (fst gc\\<^sub>A) = length cms\"\n     and len_eq'[simp]: \"length (fst gc\\<^sub>C) = length cms\"\n     and in_\\<R>: \"(\\<And>i. i < length cms \\<Longrightarrow> ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n     and sound_mode_use\\<^sub>A: \"abs.sound_mode_use gc\\<^sub>A\"\n     and modes_respect_priv: \"modes_respect_priv (map snd (fst gc\\<^sub>C))\""], ["proof (state)\nthis:\n  conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C gc\\<^sub>C'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>C' sched\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C gc\\<^sub>C';\n        length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "thus\n    \"\\<exists>sched\\<^sub>A gc\\<^sub>A'. abs.meval_sched sched\\<^sub>A gc\\<^sub>A gc\\<^sub>A' \\<and>\n          (\\<forall>i. i < length cms \\<longrightarrow> ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), (fst gc\\<^sub>C' ! i, snd gc\\<^sub>C')) \\<in> \\<R>_rel (cms ! i)) \\<and>\n          abs.sound_mode_use gc\\<^sub>A'\""], ["proof (prove)\nusing this:\n  conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C gc\\<^sub>C'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n       abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n       (\\<forall>i<length cms.\n           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>C' ! i,\n            snd gc\\<^sub>C')\n           \\<in> \\<R>_rel (cms ! i)) \\<and>\n       abs.sound_mode_use gc\\<^sub>A'", "proof(induct  arbitrary: gc\\<^sub>A rule: conc.meval_sched.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c c' gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv c [] c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'\n 2. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "case (1 cms\\<^sub>C cms\\<^sub>C')"], ["proof (state)\nthis:\n  conc.meval_sched_abv cms\\<^sub>C [] cms\\<^sub>C'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst cms\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst cms\\<^sub>C ! ?i7,\n   snd cms\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst cms\\<^sub>C))\n\ngoal (2 subgoals):\n 1. \\<And>c c' gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv c [] c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'\n 2. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from 1(1)"], ["proof (chain)\npicking this:\n  conc.meval_sched_abv cms\\<^sub>C [] cms\\<^sub>C'", "have cms\\<^sub>C'_def [simp]: \"cms\\<^sub>C' = cms\\<^sub>C\""], ["proof (prove)\nusing this:\n  conc.meval_sched_abv cms\\<^sub>C [] cms\\<^sub>C'\n\ngoal (1 subgoal):\n 1. cms\\<^sub>C' = cms\\<^sub>C", "by simp"], ["proof (state)\nthis:\n  cms\\<^sub>C' = cms\\<^sub>C\n\ngoal (2 subgoals):\n 1. \\<And>c c' gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv c [] c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'\n 2. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "with 1"], ["proof (chain)\npicking this:\n  conc.meval_sched_abv cms\\<^sub>C [] cms\\<^sub>C'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst cms\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst cms\\<^sub>C ! ?i7,\n   snd cms\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst cms\\<^sub>C))\n  cms\\<^sub>C' = cms\\<^sub>C", "have \"abs.meval_sched [] gc\\<^sub>A gc\\<^sub>A \\<and>\n    (\\<forall>i<length cms.\n        ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst cms\\<^sub>C' ! i, snd cms\\<^sub>C') \\<in> \\<R>_rel (cms ! i)) \\<and>\n        abs.sound_mode_use gc\\<^sub>A\""], ["proof (prove)\nusing this:\n  conc.meval_sched_abv cms\\<^sub>C [] cms\\<^sub>C'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst cms\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst cms\\<^sub>C ! ?i7,\n   snd cms\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst cms\\<^sub>C))\n  cms\\<^sub>C' = cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. abs.meval_sched_abv gc\\<^sub>A [] gc\\<^sub>A \\<and>\n    (\\<forall>i<length cms.\n        ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst cms\\<^sub>C' ! i,\n         snd cms\\<^sub>C')\n        \\<in> \\<R>_rel (cms ! i)) \\<and>\n    abs.sound_mode_use gc\\<^sub>A", "by simp"], ["proof (state)\nthis:\n  abs.meval_sched_abv gc\\<^sub>A [] gc\\<^sub>A \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst cms\\<^sub>C' ! i,\n       snd cms\\<^sub>C')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A\n\ngoal (2 subgoals):\n 1. \\<And>c c' gc\\<^sub>A.\n       \\<lbrakk>conc.meval_sched_abv c [] c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'\n 2. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "thus ?case"], ["proof (prove)\nusing this:\n  abs.meval_sched_abv gc\\<^sub>A [] gc\\<^sub>A \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst cms\\<^sub>C' ! i,\n       snd cms\\<^sub>C')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<exists>sched\\<^sub>A gc\\<^sub>A''.\n       abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A'' \\<and>\n       (\\<forall>i<length cms.\n           ((fst gc\\<^sub>A'' ! i, snd gc\\<^sub>A''), fst cms\\<^sub>C' ! i,\n            snd cms\\<^sub>C')\n           \\<in> \\<R>_rel (cms ! i)) \\<and>\n       abs.sound_mode_use gc\\<^sub>A''", "by blast"], ["proof (state)\nthis:\n  \\<exists>sched\\<^sub>A gc\\<^sub>A''.\n     abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A'' \\<and>\n     (\\<forall>i<length cms.\n         ((fst gc\\<^sub>A'' ! i, snd gc\\<^sub>A''), fst cms\\<^sub>C' ! i,\n          snd cms\\<^sub>C')\n         \\<in> \\<R>_rel (cms ! i)) \\<and>\n     abs.sound_mode_use gc\\<^sub>A''\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "case (2 n ns gc\\<^sub>C gc\\<^sub>c')"], ["proof (state)\nthis:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "obtain cms\\<^sub>C mem\\<^sub>C where gc\\<^sub>C_def [simp]: \"gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cms\\<^sub>C mem\\<^sub>C.\n        gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "obtain cms\\<^sub>A mem\\<^sub>A where gc\\<^sub>A_def [simp]: \"gc\\<^sub>A = (cms\\<^sub>A, mem\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cms\\<^sub>A mem\\<^sub>A.\n        gc\\<^sub>A = (cms\\<^sub>A, mem\\<^sub>A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  gc\\<^sub>A = (cms\\<^sub>A, mem\\<^sub>A)\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from 2(2) gc\\<^sub>C_def"], ["proof (chain)\npicking this:\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)", "obtain cms\\<^sub>C'' mem\\<^sub>C'' where\n      meval\\<^sub>C: \"((cms\\<^sub>C,mem\\<^sub>C), n, (cms\\<^sub>C'',mem\\<^sub>C'')) \\<in> conc.meval\" and \n      meval_sched\\<^sub>C: \"conc.meval_sched ns (cms\\<^sub>C'',mem\\<^sub>C'') gc\\<^sub>c'\""], ["proof (prove)\nusing this:\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)\n\ngoal (1 subgoal):\n 1. (\\<And>cms\\<^sub>C'' mem\\<^sub>C''.\n        \\<lbrakk>conc.meval_abv (cms\\<^sub>C, mem\\<^sub>C) n\n                  (cms\\<^sub>C'', mem\\<^sub>C'');\n         conc.meval_sched_abv (cms\\<^sub>C'', mem\\<^sub>C'') ns\n          gc\\<^sub>c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  conc.meval_abv (cms\\<^sub>C, mem\\<^sub>C) n (cms\\<^sub>C'', mem\\<^sub>C'')\n  conc.meval_sched_abv (cms\\<^sub>C'', mem\\<^sub>C'') ns gc\\<^sub>c'\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "let ?cm\\<^sub>Cn = \"cms\\<^sub>C ! n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "let ?cm\\<^sub>An = \"cms\\<^sub>A ! n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "let ?\\<R>n = \"\\<R>_rel (cms ! n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from meval\\<^sub>C"], ["proof (chain)\npicking this:\n  conc.meval_abv (cms\\<^sub>C, mem\\<^sub>C) n (cms\\<^sub>C'', mem\\<^sub>C'')", "obtain cm\\<^sub>Cn'' where\n      eval\\<^sub>Cn: \"(?cm\\<^sub>Cn, mem\\<^sub>C) \\<leadsto>\\<^sub>C (cm\\<^sub>Cn'', mem\\<^sub>C'')\" and\n      len: \"n < length cms\\<^sub>C\" and\n      cms\\<^sub>C''_def: \"cms\\<^sub>C'' = cms\\<^sub>C [n := cm\\<^sub>Cn'']\""], ["proof (prove)\nusing this:\n  conc.meval_abv (cms\\<^sub>C, mem\\<^sub>C) n (cms\\<^sub>C'', mem\\<^sub>C'')\n\ngoal (1 subgoal):\n 1. (\\<And>cm\\<^sub>Cn''.\n        \\<lbrakk>(cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                 (cm\\<^sub>Cn'', mem\\<^sub>C'');\n         n < length cms\\<^sub>C;\n         cms\\<^sub>C'' = cms\\<^sub>C[n := cm\\<^sub>Cn'']\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast elim: conc.meval.cases)"], ["proof (state)\nthis:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n  (cm\\<^sub>Cn'', mem\\<^sub>C'')\n  n < length cms\\<^sub>C\n  cms\\<^sub>C'' = cms\\<^sub>C[n := cm\\<^sub>Cn'']\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from len"], ["proof (chain)\npicking this:\n  n < length cms\\<^sub>C", "have len [simp]: \"n < length cms\""], ["proof (prove)\nusing this:\n  n < length cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. n < length cms", "by (simp add: 2[simplified])"], ["proof (state)\nthis:\n  n < length cms\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from cms\\<^sub>C''_def 2"], ["proof (chain)\npicking this:\n  cms\\<^sub>C'' = cms\\<^sub>C[n := cm\\<^sub>Cn'']\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))", "have \n      len_cms\\<^sub>C'' [simp]: \"length cms\\<^sub>C'' = length cms\""], ["proof (prove)\nusing this:\n  cms\\<^sub>C'' = cms\\<^sub>C[n := cm\\<^sub>Cn'']\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. length cms\\<^sub>C'' = length cms", "by simp"], ["proof (state)\nthis:\n  length cms\\<^sub>C'' = length cms\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from 2 len"], ["proof (chain)\npicking this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n  n < length cms", "have \n      in_\\<R>n: \"((?cm\\<^sub>An,mem\\<^sub>A), (?cm\\<^sub>Cn,mem\\<^sub>C)) \\<in> ?\\<R>n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n  n < length cms\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! n)", "by simp"], ["proof (state)\nthis:\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! n)\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "with eval\\<^sub>Cn use_secure_refinement_helper[OF secure_refinements[OF len]]"], ["proof (chain)\npicking this:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n  (cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<lbrakk>((?cm\\<^sub>A, ?mem\\<^sub>A), ?cm\\<^sub>C, ?mem\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! n);\n   (?cm\\<^sub>C, ?mem\\<^sub>C) \\<leadsto>\\<^sub>C\n   (?cm\\<^sub>C', ?mem\\<^sub>C')\\<rbrakk>\n  \\<Longrightarrow> \\<exists>cm\\<^sub>A' mem\\<^sub>A' na.\n                       abs.neval (?cm\\<^sub>A, ?mem\\<^sub>A) na\n                        (cm\\<^sub>A', mem\\<^sub>A') \\<and>\n                       ((cm\\<^sub>A', mem\\<^sub>A'), ?cm\\<^sub>C',\n                        ?mem\\<^sub>C')\n                       \\<in> \\<R>_rel (cms ! n)\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! n)", "obtain cm\\<^sub>An'' mem\\<^sub>A'' m\\<^sub>A where\n      neval\\<^sub>An: \"abs.neval (?cm\\<^sub>An, mem\\<^sub>A) m\\<^sub>A (cm\\<^sub>An'', mem\\<^sub>A'')\" and\n      in_\\<R>n'': \"((cm\\<^sub>An'',mem\\<^sub>A''),(cm\\<^sub>Cn'',mem\\<^sub>C'')) \\<in> ?\\<R>n\""], ["proof (prove)\nusing this:\n  (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n  (cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<lbrakk>((?cm\\<^sub>A, ?mem\\<^sub>A), ?cm\\<^sub>C, ?mem\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! n);\n   (?cm\\<^sub>C, ?mem\\<^sub>C) \\<leadsto>\\<^sub>C\n   (?cm\\<^sub>C', ?mem\\<^sub>C')\\<rbrakk>\n  \\<Longrightarrow> \\<exists>cm\\<^sub>A' mem\\<^sub>A' na.\n                       abs.neval (?cm\\<^sub>A, ?mem\\<^sub>A) na\n                        (cm\\<^sub>A', mem\\<^sub>A') \\<and>\n                       ((cm\\<^sub>A', mem\\<^sub>A'), ?cm\\<^sub>C',\n                        ?mem\\<^sub>C')\n                       \\<in> \\<R>_rel (cms ! n)\n  ((cms\\<^sub>A ! n, mem\\<^sub>A), cms\\<^sub>C ! n, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! n)\n\ngoal (1 subgoal):\n 1. (\\<And>m\\<^sub>A cm\\<^sub>An'' mem\\<^sub>A''.\n        \\<lbrakk>abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) m\\<^sub>A\n                  (cm\\<^sub>An'', mem\\<^sub>A'');\n         ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'', mem\\<^sub>C'')\n         \\<in> \\<R>_rel (cms ! n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast+"], ["proof (state)\nthis:\n  abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) m\\<^sub>A\n   (cm\\<^sub>An'', mem\\<^sub>A'')\n  ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! n)\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "define cms\\<^sub>A'' where \"cms\\<^sub>A'' = cms\\<^sub>A [n := cm\\<^sub>An'']\""], ["proof (state)\nthis:\n  cms\\<^sub>A'' = cms\\<^sub>A[n := cm\\<^sub>An'']\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "define gc\\<^sub>A'' where [simp]: \"gc\\<^sub>A'' = (cms\\<^sub>A'', mem\\<^sub>A'')\""], ["proof (state)\nthis:\n  gc\\<^sub>A'' = (cms\\<^sub>A'', mem\\<^sub>A'')\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "have len_cms\\<^sub>A'' [simp]: \"length cms\\<^sub>A'' = length cms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length cms\\<^sub>A'' = length cms", "by(simp add: cms\\<^sub>A''_def 2[simplified])"], ["proof (state)\nthis:\n  length cms\\<^sub>A'' = length cms\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "have in_\\<R>'': \"(\\<And>i. i < length cms \\<Longrightarrow> ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'') \\<in> \\<R>_rel (cms ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length cms \\<Longrightarrow>\n       ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i,\n        mem\\<^sub>C'')\n       \\<in> \\<R>_rel (cms ! i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length cms \\<Longrightarrow>\n       ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i,\n        mem\\<^sub>C'')\n       \\<in> \\<R>_rel (cms ! i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length cms \\<Longrightarrow>\n       ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i,\n        mem\\<^sub>C'')\n       \\<in> \\<R>_rel (cms ! i)", "assume \"i < length cms\""], ["proof (state)\nthis:\n  i < length cms\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length cms \\<Longrightarrow>\n       ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i,\n        mem\\<^sub>C'')\n       \\<in> \\<R>_rel (cms ! i)", "show \"?thesis i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "proof(cases \"i = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)\n 2. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "assume \"i = n\""], ["proof (state)\nthis:\n  i = n\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)\n 2. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "hence \"cms\\<^sub>A'' ! i = cm\\<^sub>An''\""], ["proof (prove)\nusing this:\n  i = n\n\ngoal (1 subgoal):\n 1. cms\\<^sub>A'' ! i = cm\\<^sub>An''", "using cms\\<^sub>A''_def len_cms\\<^sub>A'' len"], ["proof (prove)\nusing this:\n  i = n\n  cms\\<^sub>A'' = cms\\<^sub>A[n := cm\\<^sub>An'']\n  length cms\\<^sub>A'' = length cms\n  n < length cms\n\ngoal (1 subgoal):\n 1. cms\\<^sub>A'' ! i = cm\\<^sub>An''", "by simp"], ["proof (state)\nthis:\n  cms\\<^sub>A'' ! i = cm\\<^sub>An''\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)\n 2. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "moreover"], ["proof (state)\nthis:\n  cms\\<^sub>A'' ! i = cm\\<^sub>An''\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)\n 2. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "from \\<open>i = n\\<close>"], ["proof (chain)\npicking this:\n  i = n", "have \"cms\\<^sub>C'' ! i = cm\\<^sub>Cn''\""], ["proof (prove)\nusing this:\n  i = n\n\ngoal (1 subgoal):\n 1. cms\\<^sub>C'' ! i = cm\\<^sub>Cn''", "using cms\\<^sub>C''_def len_cms\\<^sub>C'' len"], ["proof (prove)\nusing this:\n  i = n\n  cms\\<^sub>C'' = cms\\<^sub>C[n := cm\\<^sub>Cn'']\n  length cms\\<^sub>C'' = length cms\n  n < length cms\n\ngoal (1 subgoal):\n 1. cms\\<^sub>C'' ! i = cm\\<^sub>Cn''", "by simp"], ["proof (state)\nthis:\n  cms\\<^sub>C'' ! i = cm\\<^sub>Cn''\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)\n 2. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "ultimately"], ["proof (chain)\npicking this:\n  cms\\<^sub>A'' ! i = cm\\<^sub>An''\n  cms\\<^sub>C'' ! i = cm\\<^sub>Cn''", "show ?thesis"], ["proof (prove)\nusing this:\n  cms\\<^sub>A'' ! i = cm\\<^sub>An''\n  cms\\<^sub>C'' ! i = cm\\<^sub>Cn''\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "using in_\\<R>n'' \\<open>i = n\\<close>"], ["proof (prove)\nusing this:\n  cms\\<^sub>A'' ! i = cm\\<^sub>An''\n  cms\\<^sub>C'' ! i = cm\\<^sub>Cn''\n  ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! n)\n  i = n\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "by simp"], ["proof (state)\nthis:\n  ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "obtain c\\<^sub>Ai mds\\<^sub>Ai where cms\\<^sub>Ai_def [simp]: \"(cms\\<^sub>A ! i) = (c\\<^sub>Ai, mds\\<^sub>Ai)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>Ai mds\\<^sub>Ai.\n        cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai)\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "obtain c\\<^sub>Ci mds\\<^sub>Ci where cms\\<^sub>Ci_def [simp]: \"(cms\\<^sub>C ! i) = (c\\<^sub>Ci, mds\\<^sub>Ci)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>Ci mds\\<^sub>Ci.\n        cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "hence mds\\<^sub>Ci_def: \"mds\\<^sub>Ci = snd (cms\\<^sub>C ! i)\""], ["proof (prove)\nusing this:\n  cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)\n\ngoal (1 subgoal):\n 1. mds\\<^sub>Ci = snd (cms\\<^sub>C ! i)", "by simp"], ["proof (state)\nthis:\n  mds\\<^sub>Ci = snd (cms\\<^sub>C ! i)\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "from 2(5) \\<open>i < length cms\\<close>"], ["proof (chain)\npicking this:\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  i < length cms", "have \n          in_\\<R>i: \"((cms\\<^sub>A ! i,mem\\<^sub>A), (cms\\<^sub>C ! i,mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i)\""], ["proof (prove)\nusing this:\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  i < length cms\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! i)", "by force"], ["proof (state)\nthis:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "from in_\\<R>n'' secure_refinements len preserves_modes_memD"], ["proof (chain)\npicking this:\n  ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! n)\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  n < length cms\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C", "have mem\\<^sub>A''_def [simp]: \"mem\\<^sub>A'' = mem\\<^sub>A_of mem\\<^sub>C''\""], ["proof (prove)\nusing this:\n  ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! n)\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  n < length cms\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A'' = mem\\<^sub>A_of mem\\<^sub>C''", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'', mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! n)\n  ?i < length cms \\<Longrightarrow>\n  closed_others (\\<R>_rel (cms ! ?i)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! ?i)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! ?i)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! ?i)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! ?i) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! ?i) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! ?i) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! ?i))))))\n  n < length cms\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A'' = mem\\<^sub>A_of mem\\<^sub>C''", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  mem\\<^sub>A'' = mem\\<^sub>A_of mem\\<^sub>C''\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "from in_\\<R>i secure_refinements  \\<open>i < length cms\\<close> preserves_modes_memD\n             cms\\<^sub>Ai_def cms\\<^sub>Ci_def"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  i < length cms\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n  cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai)\n  cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)", "have mem\\<^sub>A_def [simp]: \"mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\" and\n             mds\\<^sub>Ai_def [simp]: \"mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  i < length cms\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n  cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai)\n  cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C &&&\n    mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n  ?i < length cms \\<Longrightarrow>\n  closed_others (\\<R>_rel (cms ! ?i)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! ?i)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! ?i)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! ?i)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! ?i) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! ?i) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! ?i) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! ?i))))))\n  i < length cms\n  \\<lbrakk>preserves_modes_mem ?\\<R>;\n   (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n    \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n   \\<in> ?\\<R>\\<rbrakk>\n  \\<Longrightarrow> ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n                    ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n  cms\\<^sub>A ! i = (c\\<^sub>Ai, mds\\<^sub>Ai)\n  cms\\<^sub>C ! i = (c\\<^sub>Ci, mds\\<^sub>Ci)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C &&&\n    mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci", "by metis+"], ["proof (state)\nthis:\n  mem\\<^sub>A = mem\\<^sub>A_of mem\\<^sub>C\n  mds\\<^sub>Ai = mds\\<^sub>A_of mds\\<^sub>Ci\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "assume \"i \\<noteq> n\""], ["proof (state)\nthis:\n  i \\<noteq> n\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "hence \"cms\\<^sub>A'' ! i = cms\\<^sub>A ! i\""], ["proof (prove)\nusing this:\n  i \\<noteq> n\n\ngoal (1 subgoal):\n 1. cms\\<^sub>A'' ! i = cms\\<^sub>A ! i", "using cms\\<^sub>A''_def len_cms\\<^sub>A'' len"], ["proof (prove)\nusing this:\n  i \\<noteq> n\n  cms\\<^sub>A'' = cms\\<^sub>A[n := cm\\<^sub>An'']\n  length cms\\<^sub>A'' = length cms\n  n < length cms\n\ngoal (1 subgoal):\n 1. cms\\<^sub>A'' ! i = cms\\<^sub>A ! i", "by simp"], ["proof (state)\nthis:\n  cms\\<^sub>A'' ! i = cms\\<^sub>A ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "moreover"], ["proof (state)\nthis:\n  cms\\<^sub>A'' ! i = cms\\<^sub>A ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "from \\<open>i \\<noteq> n\\<close>"], ["proof (chain)\npicking this:\n  i \\<noteq> n", "have \"cms\\<^sub>C'' ! i = cms\\<^sub>C ! i\""], ["proof (prove)\nusing this:\n  i \\<noteq> n\n\ngoal (1 subgoal):\n 1. cms\\<^sub>C'' ! i = cms\\<^sub>C ! i", "using cms\\<^sub>C''_def len_cms\\<^sub>C'' len"], ["proof (prove)\nusing this:\n  i \\<noteq> n\n  cms\\<^sub>C'' = cms\\<^sub>C[n := cm\\<^sub>Cn'']\n  length cms\\<^sub>C'' = length cms\n  n < length cms\n\ngoal (1 subgoal):\n 1. cms\\<^sub>C'' ! i = cms\\<^sub>C ! i", "by simp"], ["proof (state)\nthis:\n  cms\\<^sub>C'' ! i = cms\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "ultimately"], ["proof (chain)\npicking this:\n  cms\\<^sub>A'' ! i = cms\\<^sub>A ! i\n  cms\\<^sub>C'' ! i = cms\\<^sub>C ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  cms\\<^sub>A'' ! i = cms\\<^sub>A ! i\n  cms\\<^sub>C'' ! i = cms\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "using 2(5)[of i] \\<open>i \\<noteq> n\\<close> \\<open>i < length cms\\<close>"], ["proof (prove)\nusing this:\n  cms\\<^sub>A'' ! i = cms\\<^sub>A ! i\n  cms\\<^sub>C'' ! i = cms\\<^sub>C ! i\n  i < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i, snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n  i \\<noteq> n\n  i < length cms\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n    \\<in> \\<R>_rel (cms ! i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cms\\<^sub>A'' ! i = (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n     cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n     (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                            mds\\<^sub>Ci, mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i);\n     i \\<noteq> n; i < length cms\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n       mds\\<^sub>Ci, mem\\<^sub>A_of mem\\<^sub>C''\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C''\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! i)", "apply(rule closed_othersD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>cms\\<^sub>A'' ! i = (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n     cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n     (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                            mds\\<^sub>Ci, mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i);\n     i \\<noteq> n; i < length cms\\<rbrakk>\n    \\<Longrightarrow> closed_others (\\<R>_rel (cms ! i))\n 2. \\<lbrakk>cms\\<^sub>A'' ! i = (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n     cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n     (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                            mds\\<^sub>Ci, mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i);\n     i \\<noteq> n; i < length cms\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n       mds\\<^sub>Ci, mem\\<^sub>A_of ?mem\\<^sub>C5\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, ?mem\\<^sub>C5\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               mds\\<^sub>Ci, mem\\<^sub>A_of\n        mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> ?mem\\<^sub>C5 x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C ?mem\\<^sub>C5 x\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written mds\\<^sub>Ci x", "apply(rule secure_refinements[OF \\<open>i < length cms\\<close>, unfolded secure_refinement_def, THEN conjunct1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>cms\\<^sub>A'' ! i = (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n     cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n     (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                            mds\\<^sub>Ci, mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i);\n     i \\<noteq> n; i < length cms\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n       mds\\<^sub>Ci, mem\\<^sub>A_of ?mem\\<^sub>C5\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, ?mem\\<^sub>C5\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               mds\\<^sub>Ci, mem\\<^sub>A_of\n        mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> ?mem\\<^sub>C5 x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C ?mem\\<^sub>C5 x\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written mds\\<^sub>Ci x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of mds\\<^sub>Ci);\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, mds\\<^sub>Ci);\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               mds\\<^sub>Ci, mem\\<^sub>A_of\n        mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, mds\\<^sub>Ci, mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written mds\\<^sub>Ci x", "apply(simp only: mds\\<^sub>Ci_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> \\<not> var_asm_not_written (snd (cms\\<^sub>C ! i))\n                                 x", "apply(rule_tac \\<R>n=\"\\<R>_rel (cms ! n)\"  and \\<R>i=\"\\<R>_rel (cms ! i)\" in modified_variables_are_not_assumed_not_written)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.sound_mode_use\n                          (?cms\\<^sub>A11 x, ?mem\\<^sub>A11 x)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! n))\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cms\\<^sub>A11 x ! ?n11 x, ?mem\\<^sub>A11 x),\n                          cms\\<^sub>C ! ?n11 x, ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cms\\<^sub>A11 x ! i, ?mem\\<^sub>A11 x),\n                          cms\\<^sub>C ! i, ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! i)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ?n11 x < length cms\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length (?cms\\<^sub>A11 x) = length cms\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 9. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 10. \\<And>x ia j.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n         ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                          \\<subseteq> snd (cms\\<^sub>C ! j)\n GuarNoReadOrWrite\nA total of 18 subgoals...", "apply(rule 2(6)[unfolded gc\\<^sub>A_def])"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! n))\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! ?n11 x, mem\\<^sub>A),\n                          cms\\<^sub>C ! ?n11 x, ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i,\n                          ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! i)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ?n11 x < length cms\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 8. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 9. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 10. \\<And>x ia.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n         ia < length cms\\<rbrakk>\n        \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                           snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! ia\nA total of 17 subgoals...", "using secure_refinements len secure_refinement_def"], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  n < length cms\n  secure_refinement ?\\<R>\\<^sub>A ?\\<R> ?P \\<equiv>\n  closed_others ?\\<R> \\<and>\n  preserves_modes_mem ?\\<R> \\<and>\n  new_vars_private ?\\<R> \\<and>\n  conc.closed_glob_consistent ?P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> ?\\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> ?\\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> ?\\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> ?\\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> ?P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> ?\\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> ?P)))))\n\ngoal (17 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! n))\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! ?n11 x, mem\\<^sub>A),\n                          cms\\<^sub>C ! ?n11 x, ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i,\n                          ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! i)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ?n11 x < length cms\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 8. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 9. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 10. \\<And>x ia.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n         ia < length cms\\<rbrakk>\n        \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                           snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                          - range var\\<^sub>C_of\n                          \\<subseteq> priv_mem\\<^sub>C ! ia\nA total of 17 subgoals...", "apply blast"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! ?n11 x, mem\\<^sub>A),\n                          cms\\<^sub>C ! ?n11 x, ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i,\n                          ?mem\\<^sub>C11 x)\n                         \\<in> \\<R>_rel (cms ! i)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ?n11 x < length cms\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 7. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 8. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 9. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> (cms\\<^sub>C ! ?n11 x,\n                           ?mem\\<^sub>C11 x) \\<leadsto>\\<^sub>C\n                          (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\nA total of 16 subgoals...", "apply(rule in_\\<R>n)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i,\n                          mem\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> n < length cms\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 6. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 7. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 8. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                           (?m\\<^sub>A11 x)\n                           (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\nA total of 15 subgoals...", "using secure_refinements secure_refinement_def"], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  secure_refinement ?\\<R>\\<^sub>A ?\\<R> ?P \\<equiv>\n  closed_others ?\\<R> \\<and>\n  preserves_modes_mem ?\\<R> \\<and>\n  new_vars_private ?\\<R> \\<and>\n  conc.closed_glob_consistent ?P \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> ?\\<R> \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> ?\\<R> \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> ?\\<R>\\<^sub>A \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> ?\\<R> \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> ?P \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> ?\\<R> \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> ?P)))))\n\ngoal (15 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i,\n                          mem\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> n < length cms\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 6. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 7. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 8. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                           (?m\\<^sub>A11 x)\n                           (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\nA total of 15 subgoals...", "apply blast"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i,\n                          mem\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> n < length cms\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 5. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 6. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 7. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                           ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                          \\<in> \\<R>_rel (cms ! n)\nA total of 14 subgoals...", "apply(rule in_\\<R>i)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> n < length cms\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 4. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 5. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 6. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                          dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                          dma\\<^sub>C (?mem\\<^sub>C'11 x) x\nA total of 13 subgoals...", "apply(rule len)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 3. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 4. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 5. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> i \\<noteq> n\nA total of 12 subgoals...", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (12 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>A = length cms\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 3. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 4. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 5. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> i \\<noteq> n\nA total of 12 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 2. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 3. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 4. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> i < length cms\nA total of 11 subgoals...", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (11 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> length cms\\<^sub>C = length cms\n 2. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 3. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 4. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> i < length cms\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 2. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 3. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> preserves_local_guarantee_compliance\n                           (\\<R>_rel (cms ! n))", "using 2(7)"], ["proof (prove)\nusing this:\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (10 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 2. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 3. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> preserves_local_guarantee_compliance\n                           (\\<R>_rel (cms ! n))", "unfolding modes_respect_priv_def priv_is_asm_priv_def gc\\<^sub>C_def"], ["proof (prove)\nusing this:\n  (\\<forall>i<length cms.\n      priv_mem\\<^sub>C ! i\n      \\<subseteq> (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! i)\n                   AsmNoReadOrWrite) \\<and>\n  priv_is_guar_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  new_asms_only_for_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  new_asms_NoReadOrWrite_only (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\n\ngoal (10 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 2. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 3. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> preserves_local_guarantee_compliance\n                           (\\<R>_rel (cms ! n))", "using \"2.prems\"(3)"], ["proof (prove)\nusing this:\n  (\\<forall>i<length cms.\n      priv_mem\\<^sub>C ! i\n      \\<subseteq> (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! i)\n                   AsmNoReadOrWrite) \\<and>\n  priv_is_guar_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  new_asms_only_for_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  new_asms_NoReadOrWrite_only (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\n  length (fst gc\\<^sub>C) = length cms\n\ngoal (10 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite\n 2. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 3. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 10. \\<And>x.\n        \\<lbrakk>cms\\<^sub>A'' ! i =\n                 (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n         cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n         (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                                (snd (cms\\<^sub>C !\ni)), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n          \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                    i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n         \\<in> \\<R>_rel (cms ! i);\n         i \\<noteq> n; i < length cms;\n         mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n         dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n         dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n        \\<Longrightarrow> preserves_local_guarantee_compliance\n                           (\\<R>_rel (cms ! n))", "apply auto[1]"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 2. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "using 2(7)"], ["proof (prove)\nusing this:\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (9 subgoals):\n 1. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 2. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "unfolding modes_respect_priv_def priv_is_guar_priv_def gc\\<^sub>C_def"], ["proof (prove)\nusing this:\n  priv_is_asm_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  (\\<forall>i<length cms.\n      \\<forall>j<length cms.\n         i \\<noteq> j \\<longrightarrow>\n         priv_mem\\<^sub>C ! i\n         \\<subseteq> (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! j)\n                      GuarNoReadOrWrite) \\<and>\n  new_asms_only_for_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  new_asms_NoReadOrWrite_only (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\n\ngoal (9 subgoals):\n 1. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 2. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "using \"2.prems\"(3)"], ["proof (prove)\nusing this:\n  priv_is_asm_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  (\\<forall>i<length cms.\n      \\<forall>j<length cms.\n         i \\<noteq> j \\<longrightarrow>\n         priv_mem\\<^sub>C ! i\n         \\<subseteq> (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! j)\n                      GuarNoReadOrWrite) \\<and>\n  new_asms_only_for_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  new_asms_NoReadOrWrite_only (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\n  length (fst gc\\<^sub>C) = length cms\n\ngoal (9 subgoals):\n 1. \\<And>x ia j.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms; j < length cms; ia \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> priv_mem\\<^sub>C ! ia\n                         \\<subseteq> snd (cms\\<^sub>C ! j) GuarNoReadOrWrite\n 2. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 9. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply auto[1]"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "using 2(7)"], ["proof (prove)\nusing this:\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (8 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "unfolding modes_respect_priv_def new_asms_only_for_priv_def gc\\<^sub>C_def"], ["proof (prove)\nusing this:\n  priv_is_asm_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  priv_is_guar_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  (\\<forall>i<length cms.\n      ((map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! i)\n        AsmNoReadOrWrite \\<union>\n       (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! i) AsmNoWrite) \\<inter>\n      - range var\\<^sub>C_of\n      \\<subseteq> priv_mem\\<^sub>C ! i) \\<and>\n  new_asms_NoReadOrWrite_only (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\n\ngoal (8 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "using \"2.prems\"(3)"], ["proof (prove)\nusing this:\n  priv_is_asm_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  priv_is_guar_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C))) \\<and>\n  (\\<forall>i<length cms.\n      ((map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! i)\n        AsmNoReadOrWrite \\<union>\n       (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)) ! i) AsmNoWrite) \\<inter>\n      - range var\\<^sub>C_of\n      \\<subseteq> priv_mem\\<^sub>C ! i) \\<and>\n  new_asms_NoReadOrWrite_only (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\n  length (fst gc\\<^sub>C) = length cms\n\ngoal (8 subgoals):\n 1. \\<And>x ia.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq> dma\\<^sub>C mem\\<^sub>C x;\n        ia < length cms\\<rbrakk>\n       \\<Longrightarrow> (snd (cms\\<^sub>C ! ia) AsmNoReadOrWrite \\<union>\n                          snd (cms\\<^sub>C ! ia) AsmNoWrite) \\<inter>\n                         - range var\\<^sub>C_of\n                         \\<subseteq> priv_mem\\<^sub>C ! ia\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 8. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply auto[1]"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> (cms\\<^sub>C ! n, mem\\<^sub>C) \\<leadsto>\\<^sub>C\n                         (?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          ?cm\\<^sub>Cn'11 x, ?mem\\<^sub>C'11 x)\n                         \\<in> \\<R>_rel (cms ! n)\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> ?mem\\<^sub>C'11 x x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C (?mem\\<^sub>C'11 x) x\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 7. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply(rule eval\\<^sub>Cn)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A)\n                          (?m\\<^sub>A11 x)\n                          (?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((?cm\\<^sub>An'11 x, ?mem\\<^sub>A'11 x),\n                          cm\\<^sub>Cn'', mem\\<^sub>C'')\n                         \\<in> \\<R>_rel (cms ! n)\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> mem\\<^sub>C'' x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C mem\\<^sub>C'' x\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 6. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply(rule neval\\<^sub>An)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> ((cm\\<^sub>An'', mem\\<^sub>A''), cm\\<^sub>Cn'',\n                          mem\\<^sub>C'')\n                         \\<in> \\<R>_rel (cms ! n)\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> mem\\<^sub>C'' x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C mem\\<^sub>C'' x\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 5. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply(rule in_\\<R>n'')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>C x \\<noteq> mem\\<^sub>C'' x \\<or>\n                         dma\\<^sub>C mem\\<^sub>C x \\<noteq>\n                         dma\\<^sub>C mem\\<^sub>C'' x\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 4. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 3. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 2. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> preserves_local_guarantee_compliance\n                          (\\<R>_rel (cms ! n))", "apply(rule local_guarantee_preservation)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cms\\<^sub>A'' ! i =\n                (c\\<^sub>Ai, mds\\<^sub>A_of (snd (cms\\<^sub>C ! i)));\n        cms\\<^sub>C'' ! i = (c\\<^sub>Ci, snd (cms\\<^sub>C ! i));\n        (\\<langle>c\\<^sub>Ai, mds\\<^sub>A_of\n                               (snd (cms\\<^sub>C !\n                                     i)), mem\\<^sub>A_of\n     mem\\<^sub>C\\<rangle>\\<^sub>A,\n         \\<langle>c\\<^sub>Ci, snd (cms\\<^sub>C !\n                                   i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n        \\<in> \\<R>_rel (cms ! i);\n        i \\<noteq> n; i < length cms;\n        mem\\<^sub>C'' x \\<noteq> mem\\<^sub>C x \\<or>\n        dma\\<^sub>C mem\\<^sub>C'' x \\<noteq>\n        dma\\<^sub>C mem\\<^sub>C x\\<rbrakk>\n       \\<Longrightarrow> n < length cms", "by simp"], ["proof (state)\nthis:\n  ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((cms\\<^sub>A'' ! i, mem\\<^sub>A''), cms\\<^sub>C'' ! i, mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A'' ! ?i7, mem\\<^sub>A''), cms\\<^sub>C'' ! ?i7, mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! ?i7)\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "have meval_sched\\<^sub>A: \"abs.meval_sched (replicate m\\<^sub>A n) gc\\<^sub>A (cms\\<^sub>A'', mem\\<^sub>A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.meval_sched_abv gc\\<^sub>A (replicate m\\<^sub>A n)\n     (cms\\<^sub>A'', mem\\<^sub>A'')", "apply(simp add: cms\\<^sub>A''_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.meval_sched_abv (cms\\<^sub>A, mem\\<^sub>A) (replicate m\\<^sub>A n)\n     (cms\\<^sub>A[n := cm\\<^sub>An''], mem\\<^sub>A'')", "apply(rule abs.neval_meval[OF _ _ HOL.refl HOL.refl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. abs.neval (cms\\<^sub>A ! n, mem\\<^sub>A) m\\<^sub>A\n     (cm\\<^sub>An'', mem\\<^sub>A'')\n 2. n < length cms\\<^sub>A", "apply(rule neval\\<^sub>An)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length cms\\<^sub>A", "using \"2.prems\"(2)"], ["proof (prove)\nusing this:\n  length (fst gc\\<^sub>A) = length cms\n\ngoal (1 subgoal):\n 1. n < length cms\\<^sub>A", "by auto"], ["proof (state)\nthis:\n  abs.meval_sched_abv gc\\<^sub>A (replicate m\\<^sub>A n)\n   (cms\\<^sub>A'', mem\\<^sub>A'')\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "have sound_mode_use\\<^sub>A'': \"abs.sound_mode_use (cms\\<^sub>A'', mem\\<^sub>A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.sound_mode_use (cms\\<^sub>A'', mem\\<^sub>A'')", "apply(rule abs.meval_sched_sound_mode_use)"], ["proof (prove)\ngoal (2 subgoals):\n 1. abs.sound_mode_use ?gc\n 2. abs.meval_sched_abv ?gc ?sched (cms\\<^sub>A'', mem\\<^sub>A'')", "apply(rule 2(6))"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.meval_sched_abv gc\\<^sub>A ?sched (cms\\<^sub>A'', mem\\<^sub>A'')", "by(rule meval_sched\\<^sub>A)"], ["proof (state)\nthis:\n  abs.sound_mode_use (cms\\<^sub>A'', mem\\<^sub>A'')\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "have respects'': \"modes_respect_priv (map snd cms\\<^sub>C'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd cms\\<^sub>C'')", "apply(rule meval_modes_respect_priv[where gc\\<^sub>C'=\"(cms\\<^sub>C'',mem\\<^sub>C'')\", simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. conc.meval_abv ?gc\\<^sub>C ?n (cms\\<^sub>C'', mem\\<^sub>C'')\n 2. length (fst ?gc\\<^sub>C) = length cms\n 3. modes_respect_priv (map snd (fst ?gc\\<^sub>C))", "apply(rule meval\\<^sub>C)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (fst (cms\\<^sub>C, mem\\<^sub>C)) = length cms\n 2. modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "using \"2.prems\"(3) gc\\<^sub>C_def"], ["proof (prove)\nusing this:\n  length (fst gc\\<^sub>C) = length cms\n  gc\\<^sub>C = (cms\\<^sub>C, mem\\<^sub>C)\n\ngoal (2 subgoals):\n 1. length (fst (cms\\<^sub>C, mem\\<^sub>C)) = length cms\n 2. modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>conc.meval_sched_abv ?x7 ns gc\\<^sub>c';\n   length (fst ?gc\\<^sub>A7) = length cms; length (fst ?x7) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst ?gc\\<^sub>A7 ! i, snd ?gc\\<^sub>A7), fst ?x7 ! i, snd ?x7)\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use ?gc\\<^sub>A7;\n   modes_respect_priv (map snd (fst ?x7))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv ?gc\\<^sub>A7 sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  conc.meval_sched_abv gc\\<^sub>C (n # ns) gc\\<^sub>c'\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "by simp"], ["proof (state)\nthis:\n  modes_respect_priv (map snd cms\\<^sub>C'')\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from respects'' 2(1)[OF meval_sched\\<^sub>C, where gc\\<^sub>A7 = gc\\<^sub>A''] in_\\<R>'' sound_mode_use\\<^sub>A''"], ["proof (chain)\npicking this:\n  modes_respect_priv (map snd cms\\<^sub>C'')\n  \\<lbrakk>length (fst gc\\<^sub>A'') = length cms;\n   length (fst (cms\\<^sub>C'', mem\\<^sub>C'')) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst gc\\<^sub>A'' ! i, snd gc\\<^sub>A''),\n       fst (cms\\<^sub>C'', mem\\<^sub>C'') ! i,\n       snd (cms\\<^sub>C'', mem\\<^sub>C''))\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use gc\\<^sub>A'';\n   modes_respect_priv\n    (map snd (fst (cms\\<^sub>C'', mem\\<^sub>C'')))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv gc\\<^sub>A'' sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A'' ! ?i7, mem\\<^sub>A''), cms\\<^sub>C'' ! ?i7, mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use (cms\\<^sub>A'', mem\\<^sub>A'')", "obtain sched\\<^sub>A gc\\<^sub>A' \n    where  meval_sched\\<^sub>A'': \"abs.meval_sched sched\\<^sub>A gc\\<^sub>A'' gc\\<^sub>A'\" and\n           in_\\<R>': \"(\\<forall>i<length cms. ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>c' ! i, snd gc\\<^sub>c') \\<in> \\<R>_rel (cms ! i))\" and\n           sound_mode_use\\<^sub>A': \"abs.sound_mode_use  gc\\<^sub>A'\""], ["proof (prove)\nusing this:\n  modes_respect_priv (map snd cms\\<^sub>C'')\n  \\<lbrakk>length (fst gc\\<^sub>A'') = length cms;\n   length (fst (cms\\<^sub>C'', mem\\<^sub>C'')) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst gc\\<^sub>A'' ! i, snd gc\\<^sub>A''),\n       fst (cms\\<^sub>C'', mem\\<^sub>C'') ! i,\n       snd (cms\\<^sub>C'', mem\\<^sub>C''))\n      \\<in> \\<R>_rel (cms ! i);\n   abs.sound_mode_use gc\\<^sub>A'';\n   modes_respect_priv\n    (map snd (fst (cms\\<^sub>C'', mem\\<^sub>C'')))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv gc\\<^sub>A'' sched\\<^sub>A\n                        gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst gc\\<^sub>c' ! i, snd gc\\<^sub>c')\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A'' ! ?i7, mem\\<^sub>A''), cms\\<^sub>C'' ! ?i7, mem\\<^sub>C'')\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use (cms\\<^sub>A'', mem\\<^sub>A'')\n\ngoal (1 subgoal):\n 1. (\\<And>sched\\<^sub>A gc\\<^sub>A'.\n        \\<lbrakk>abs.meval_sched_abv gc\\<^sub>A'' sched\\<^sub>A gc\\<^sub>A';\n         \\<forall>i<length cms.\n            ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>c' ! i,\n             snd gc\\<^sub>c')\n            \\<in> \\<R>_rel (cms ! i);\n         abs.sound_mode_use gc\\<^sub>A'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  abs.meval_sched_abv gc\\<^sub>A'' sched\\<^sub>A gc\\<^sub>A'\n  \\<forall>i<length cms.\n     ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>c' ! i,\n      snd gc\\<^sub>c')\n     \\<in> \\<R>_rel (cms ! i)\n  abs.sound_mode_use gc\\<^sub>A'\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "define final_sched\\<^sub>A where \"final_sched\\<^sub>A = (replicate m\\<^sub>A n) @ sched\\<^sub>A\""], ["proof (state)\nthis:\n  final_sched\\<^sub>A = replicate m\\<^sub>A n @ sched\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "have meval_final_sched\\<^sub>A: \"abs.meval_sched final_sched\\<^sub>A gc\\<^sub>A gc\\<^sub>A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.meval_sched_abv gc\\<^sub>A final_sched\\<^sub>A gc\\<^sub>A'", "using meval_sched\\<^sub>A'' meval_sched\\<^sub>A abs.meval_sched_app final_sched\\<^sub>A_def gc\\<^sub>A''_def"], ["proof (prove)\nusing this:\n  abs.meval_sched_abv gc\\<^sub>A'' sched\\<^sub>A gc\\<^sub>A'\n  abs.meval_sched_abv gc\\<^sub>A (replicate m\\<^sub>A n)\n   (cms\\<^sub>A'', mem\\<^sub>A'')\n  \\<lbrakk>abs.meval_sched_abv ?gc ?as ?gc';\n   abs.meval_sched_abv ?gc' ?bs ?gc''\\<rbrakk>\n  \\<Longrightarrow> abs.meval_sched_abv ?gc (?as @ ?bs) ?gc''\n  final_sched\\<^sub>A = replicate m\\<^sub>A n @ sched\\<^sub>A\n  gc\\<^sub>A'' = (cms\\<^sub>A'', mem\\<^sub>A'')\n\ngoal (1 subgoal):\n 1. abs.meval_sched_abv gc\\<^sub>A final_sched\\<^sub>A gc\\<^sub>A'", "by blast"], ["proof (state)\nthis:\n  abs.meval_sched_abv gc\\<^sub>A final_sched\\<^sub>A gc\\<^sub>A'\n\ngoal (1 subgoal):\n 1. \\<And>n ns c c' gc\\<^sub>A.\n       \\<lbrakk>\\<And>x gc\\<^sub>A.\n                   \\<lbrakk>conc.meval_sched_abv x ns c';\n                    length (fst gc\\<^sub>A) = length cms;\n                    length (fst x) = length cms;\n                    \\<And>i.\n                       i < length cms \\<Longrightarrow>\n                       ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst x ! i,\n                        snd x)\n                       \\<in> \\<R>_rel (cms ! i);\n                    abs.sound_mode_use gc\\<^sub>A;\n                    modes_respect_priv (map snd (fst x))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n  (\\<forall>i<length cms.\n      ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst c' ! i, snd c')\n      \\<in> \\<R>_rel (cms ! i)) \\<and>\n  abs.sound_mode_use gc\\<^sub>A';\n        conc.meval_sched_abv c (n # ns) c';\n        length (fst gc\\<^sub>A) = length cms; length (fst c) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst c ! i, snd c)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                            abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A\n                             gc\\<^sub>A' \\<and>\n                            (\\<forall>i<length cms.\n                                ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                                 fst c' ! i, snd c')\n                                \\<in> \\<R>_rel (cms ! i)) \\<and>\n                            abs.sound_mode_use gc\\<^sub>A'", "from meval_final_sched\\<^sub>A in_\\<R>' sound_mode_use\\<^sub>A'"], ["proof (chain)\npicking this:\n  abs.meval_sched_abv gc\\<^sub>A final_sched\\<^sub>A gc\\<^sub>A'\n  \\<forall>i<length cms.\n     ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>c' ! i,\n      snd gc\\<^sub>c')\n     \\<in> \\<R>_rel (cms ! i)\n  abs.sound_mode_use gc\\<^sub>A'", "show ?case"], ["proof (prove)\nusing this:\n  abs.meval_sched_abv gc\\<^sub>A final_sched\\<^sub>A gc\\<^sub>A'\n  \\<forall>i<length cms.\n     ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>c' ! i,\n      snd gc\\<^sub>c')\n     \\<in> \\<R>_rel (cms ! i)\n  abs.sound_mode_use gc\\<^sub>A'\n\ngoal (1 subgoal):\n 1. \\<exists>sched\\<^sub>A gc\\<^sub>A''.\n       abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A'' \\<and>\n       (\\<forall>i<length cms.\n           ((fst gc\\<^sub>A'' ! i, snd gc\\<^sub>A''), fst gc\\<^sub>c' ! i,\n            snd gc\\<^sub>c')\n           \\<in> \\<R>_rel (cms ! i)) \\<and>\n       abs.sound_mode_use gc\\<^sub>A''", "by blast"], ["proof (state)\nthis:\n  \\<exists>sched\\<^sub>A gc\\<^sub>A''.\n     abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A'' \\<and>\n     (\\<forall>i<length cms.\n         ((fst gc\\<^sub>A'' ! i, snd gc\\<^sub>A''), fst gc\\<^sub>c' ! i,\n          snd gc\\<^sub>c')\n         \\<in> \\<R>_rel (cms ! i)) \\<and>\n     abs.sound_mode_use gc\\<^sub>A''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n     abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n     (\\<forall>i<length cms.\n         ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'), fst gc\\<^sub>C' ! i,\n          snd gc\\<^sub>C')\n         \\<in> \\<R>_rel (cms ! i)) \\<and>\n     abs.sound_mode_use gc\\<^sub>A'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context sifum_security begin"], ["", "definition\n  restrict_modes :: \"'Var Mds list \\<Rightarrow> 'Var set \\<Rightarrow> 'Var Mds list\"\nwhere\n  \"restrict_modes mdss X \\<equiv> map (\\<lambda>mds m. mds m \\<inter> X) mdss\""], ["", "lemma restrict_modes_length [simp]:\n  \"length (restrict_modes mdss X) = length mdss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (restrict_modes mdss X) = length mdss", "by(auto simp: restrict_modes_def)"], ["", "lemma compatible_modes_by_case_distinction:\n  assumes compat_X: \"compatible_modes (restrict_modes mdss X)\"\n  assumes compat_compX: \"compatible_modes (restrict_modes mdss (-X ))\"\n  shows \"compatible_modes mdss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible_modes mdss", "unfolding compatible_modes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i x.\n       i < length mdss \\<longrightarrow>\n       (x \\<in> (mdss ! i) AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length mdss.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (mdss ! j) GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (mdss ! i) AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length mdss.\n            j \\<noteq> i \\<longrightarrow> x \\<in> (mdss ! j) GuarNoWrite))", "proof(safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoReadOrWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "fix i x j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoReadOrWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume ilen: \"i < length mdss\""], ["proof (state)\nthis:\n  i < length mdss\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoReadOrWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume jlen: \"j < length mdss\""], ["proof (state)\nthis:\n  j < length mdss\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoReadOrWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume neq: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoReadOrWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume asm: \"x \\<in> (mdss ! i) AsmNoReadOrWrite\""], ["proof (state)\nthis:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoReadOrWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "show \"x \\<in> (mdss ! j) GuarNoReadOrWrite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoReadOrWrite", "proof(cases \"x \\<in> X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "assume xin: \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "let ?mdss\\<^sub>X = \"restrict_modes mdss X\""], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "from asm xin"], ["proof (chain)\npicking this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<in> X", "have \"x \\<in> (?mdss\\<^sub>X ! i) AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> X) mdss ! i)\n             AsmNoReadOrWrite", "using ilen"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<in> X\n  i < length mdss\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> X) mdss ! i)\n             AsmNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "with compat_X jlen ilen neq"], ["proof (chain)\npicking this:\n  compatible_modes (restrict_modes mdss X)\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite", "have \"x \\<in> (?mdss\\<^sub>X ! j) GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  compatible_modes (restrict_modes mdss X)\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite", "unfolding compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (restrict_modes mdss X) \\<longrightarrow>\n     (x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss X).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (restrict_modes mdss X ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss X).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss X ! j) GuarNoWrite))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "with xin jlen"], ["proof (chain)\npicking this:\n  x \\<in> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoReadOrWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<in> X\n  j < length mdss\n  x \\<in> (map (\\<lambda>mds m. mds m \\<inter> X) mdss ! j)\n           GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (mdss ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "assume xnin: \"x \\<notin> X\""], ["proof (state)\nthis:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "let ?mdss\\<^sub>X = \"restrict_modes mdss (- X)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "from asm xnin"], ["proof (chain)\npicking this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<notin> X", "have \"x \\<in> (?mdss\\<^sub>X ! i) AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss (- X) ! i) AsmNoReadOrWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> - X) mdss ! i)\n             AsmNoReadOrWrite", "using ilen"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoReadOrWrite\n  x \\<notin> X\n  i < length mdss\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> - X) mdss ! i)\n             AsmNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "with compat_compX jlen ilen neq"], ["proof (chain)\npicking this:\n  compatible_modes (restrict_modes mdss (- X))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoReadOrWrite", "have \"x \\<in> (?mdss\\<^sub>X ! j) GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  compatible_modes (restrict_modes mdss (- X))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite", "unfolding compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (restrict_modes mdss (- X)) \\<longrightarrow>\n     (x \\<in> (restrict_modes mdss (- X) ! i)\n               AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss (- X)).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss (- X)).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoReadOrWrite", "with xnin jlen"], ["proof (chain)\npicking this:\n  x \\<notin> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoReadOrWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  j < length mdss\n  x \\<in> (map (\\<lambda>mds m. mds m \\<inter> - X) mdss ! j)\n           GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoReadOrWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (mdss ! j) GuarNoReadOrWrite\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> (mdss ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "fix i x j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume ilen: \"i < length mdss\""], ["proof (state)\nthis:\n  i < length mdss\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume jlen: \"j < length mdss\""], ["proof (state)\nthis:\n  j < length mdss\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume neq: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume asm: \"x \\<in> (mdss ! i) AsmNoWrite\""], ["proof (state)\nthis:\n  x \\<in> (mdss ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>i < length mdss; x \\<in> (mdss ! i) AsmNoWrite;\n        j < length mdss; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "show \"x \\<in> (mdss ! j) GuarNoWrite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoWrite", "proof(cases \"x \\<in> X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume xin: \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "let ?mdss\\<^sub>X = \"restrict_modes mdss X\""], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "from asm xin"], ["proof (chain)\npicking this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<in> X", "have \"x \\<in> (?mdss\\<^sub>X ! i) AsmNoWrite\""], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss X ! i) AsmNoWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> X) mdss ! i) AsmNoWrite", "using ilen"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<in> X\n  i < length mdss\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> X) mdss ! i) AsmNoWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss X ! i) AsmNoWrite\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "with compat_X jlen ilen neq"], ["proof (chain)\npicking this:\n  compatible_modes (restrict_modes mdss X)\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss X ! i) AsmNoWrite", "have \"x \\<in> (?mdss\\<^sub>X ! j) GuarNoWrite\""], ["proof (prove)\nusing this:\n  compatible_modes (restrict_modes mdss X)\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss X ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss X ! j) GuarNoWrite", "unfolding compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (restrict_modes mdss X) \\<longrightarrow>\n     (x \\<in> (restrict_modes mdss X ! i) AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss X).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss X ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (restrict_modes mdss X ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss X).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss X ! j) GuarNoWrite))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss X ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss X ! j) GuarNoWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss X ! j) GuarNoWrite\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite\n 2. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "with xin jlen"], ["proof (chain)\npicking this:\n  x \\<in> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss X ! j) GuarNoWrite", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss X ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<in> X\n  j < length mdss\n  x \\<in> (map (\\<lambda>mds m. mds m \\<inter> X) mdss ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (mdss ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "assume xnin: \"x \\<notin> X\""], ["proof (state)\nthis:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "let ?mdss\\<^sub>X = \"restrict_modes mdss (- X)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "from asm xnin"], ["proof (chain)\npicking this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<notin> X", "have \"x \\<in> (?mdss\\<^sub>X ! i) AsmNoWrite\""], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> - X) mdss ! i) AsmNoWrite", "using ilen"], ["proof (prove)\nusing this:\n  x \\<in> (mdss ! i) AsmNoWrite\n  x \\<notin> X\n  i < length mdss\n\ngoal (1 subgoal):\n 1. x \\<in> (map (\\<lambda>mds m. mds m \\<inter> - X) mdss ! i) AsmNoWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "with compat_compX jlen ilen neq"], ["proof (chain)\npicking this:\n  compatible_modes (restrict_modes mdss (- X))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite", "have \"x \\<in> (?mdss\\<^sub>X ! j) GuarNoWrite\""], ["proof (prove)\nusing this:\n  compatible_modes (restrict_modes mdss (- X))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite", "unfolding compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (restrict_modes mdss (- X)) \\<longrightarrow>\n     (x \\<in> (restrict_modes mdss (- X) ! i)\n               AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss (- X)).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss (- X) ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (restrict_modes mdss (- X)).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite))\n  j < length mdss\n  i < length mdss\n  j \\<noteq> i\n  x \\<in> (restrict_modes mdss (- X) ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow> x \\<in> (mdss ! j) GuarNoWrite", "with xnin jlen"], ["proof (chain)\npicking this:\n  x \\<notin> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  j < length mdss\n  x \\<in> (restrict_modes mdss (- X) ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoWrite", "unfolding restrict_modes_def"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  j < length mdss\n  x \\<in> (map (\\<lambda>mds m. mds m \\<inter> - X) mdss ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<in> (mdss ! j) GuarNoWrite", "by auto"], ["proof (state)\nthis:\n  x \\<in> (mdss ! j) GuarNoWrite\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> (mdss ! j) GuarNoWrite\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_restrict_modesD:\n  \"i < length mdss \\<Longrightarrow> x \\<in> ((restrict_modes mdss X) ! i) m \\<Longrightarrow> x \\<in> X \\<and> x \\<in> (mdss ! i) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length mdss; x \\<in> (restrict_modes mdss X ! i) m\\<rbrakk>\n    \\<Longrightarrow> x \\<in> X \\<and> x \\<in> (mdss ! i) m", "by(auto simp: restrict_modes_def)"], ["", "lemma in_restrict_modesI:\n  \"i < length mdss \\<Longrightarrow> x \\<in> X \\<Longrightarrow> x \\<in> (mdss ! i) m \\<Longrightarrow> x \\<in> ((restrict_modes mdss X) ! i) m \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length mdss; x \\<in> X; x \\<in> (mdss ! i) m\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (restrict_modes mdss X ! i) m", "by(auto simp: restrict_modes_def)"], ["", "lemma meval_sched_length:\n  \"meval_sched sched gc gc' \\<Longrightarrow> length (fst gc') = length (fst gc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gc \\<rightarrow>\\<^bsub>sched\\<^esub> gc' \\<Longrightarrow>\n    length (fst gc') = length (fst gc)", "apply(induct sched arbitrary: gc gc')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gc gc'.\n       gc \\<rightarrow>\\<^bsub>[]\\<^esub> gc' \\<Longrightarrow>\n       length (fst gc') = length (fst gc)\n 2. \\<And>a sched gc gc'.\n       \\<lbrakk>\\<And>gc gc'.\n                   gc \\<rightarrow>\\<^bsub>sched\\<^esub> gc' \\<Longrightarrow>\n                   length (fst gc') = length (fst gc);\n        gc \\<rightarrow>\\<^bsub>a # sched\\<^esub> gc'\\<rbrakk>\n       \\<Longrightarrow> length (fst gc') = length (fst gc)", "by auto"], ["", "end"], ["", "context sifum_refinement_sys begin"], ["", "lemma compatible_modes_old_vars:\n  assumes compatible_modes\\<^sub>A: \"abs.compatible_modes (map snd cms\\<^sub>A)\" \n  assumes len\\<^sub>A: \"length cms\\<^sub>A = length cms\"\n  assumes len\\<^sub>C: \"length cms\\<^sub>C = length cms\"\n  assumes in_\\<R>: \"(\\<forall>i<length cms. ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C) \\<in> \\<R>_rel (cms ! i))\"\n  shows \"conc.compatible_modes (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.compatible_modes\n     (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of))", "unfolding conc.compatible_modes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i x.\n       i < length\n            (conc.restrict_modes (map snd cms\\<^sub>C)\n              (range var\\<^sub>C_of)) \\<longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length\n                     (conc.restrict_modes (map snd cms\\<^sub>C)\n                       (range var\\<^sub>C_of)).\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length\n                     (conc.restrict_modes (map snd cms\\<^sub>C)\n                       (range var\\<^sub>C_of)).\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "fix i x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "assume i_len: \"i < length cms\\<^sub>C\""], ["proof (state)\nthis:\n  i < length cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "let ?cms = \"cms ! i\" and\n      ?c\\<^sub>A = \"fst (cms\\<^sub>A ! i)\" and ?mds\\<^sub>A = \"snd (cms\\<^sub>A ! i)\" and\n      ?c\\<^sub>C = \"fst (cms\\<^sub>C ! i)\" and ?mds\\<^sub>C = \"snd (cms\\<^sub>C ! i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "from in_\\<R> i_len len\\<^sub>C"], ["proof (chain)\npicking this:\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i)\n  i < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms", "have in_\\<R>_i: \"((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C) \\<in> \\<R>_rel ?cms\""], ["proof (prove)\nusing this:\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i)\n  i < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! i)", "by simp"], ["proof (state)\nthis:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "from i_len"], ["proof (chain)\npicking this:\n  i < length cms\\<^sub>C", "have \"i < length (map snd cms\\<^sub>C)\""], ["proof (prove)\nusing this:\n  i < length cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. i < length (map snd cms\\<^sub>C)", "by simp"], ["proof (state)\nthis:\n  i < length (map snd cms\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "hence m_x_range: \"\\<And>m. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) m \\<Longrightarrow> x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) m\""], ["proof (prove)\nusing this:\n  i < length (map snd cms\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                i)\n                m \\<Longrightarrow>\n       x \\<in> range var\\<^sub>C_of \\<and>\n       x \\<in> (map snd cms\\<^sub>C ! i) m", "using conc.in_restrict_modesD i_len"], ["proof (prove)\nusing this:\n  i < length (map snd cms\\<^sub>C)\n  \\<lbrakk>?i < length ?mdss;\n   ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X \\<and> ?x \\<in> (?mdss ! ?i) ?m\n  i < length cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                i)\n                m \\<Longrightarrow>\n       x \\<in> range var\\<^sub>C_of \\<and>\n       x \\<in> (map snd cms\\<^sub>C ! i) m", "by blast+"], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "hence m_x\\<^sub>C_i: \"\\<And>m. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) m \\<Longrightarrow> x \\<in> ?mds\\<^sub>C m\""], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                i)\n                m \\<Longrightarrow>\n       x \\<in> snd (cms\\<^sub>C ! i) m", "by (simp add: i_len)"], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> snd (cms\\<^sub>C ! i) ?m7\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "from secure_refinements i_len len\\<^sub>C"], ["proof (chain)\npicking this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  i < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms", "have \"secure_refinement (\\<R>\\<^sub>A_rel ?cms) (\\<R>_rel ?cms) (P_rel ?cms)\""], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  i < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms\n\ngoal (1 subgoal):\n 1. secure_refinement (\\<R>\\<^sub>A_rel (cms ! i)) (\\<R>_rel (cms ! i))\n     (P_rel (cms ! i))", "by simp"], ["proof (state)\nthis:\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! i)) (\\<R>_rel (cms ! i))\n   (P_rel (cms ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "hence preserves_modes_mem_\\<R>_i: \"preserves_modes_mem (\\<R>_rel ?cms)\""], ["proof (prove)\nusing this:\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! i)) (\\<R>_rel (cms ! i))\n   (P_rel (cms ! i))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! i))", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others (\\<R>_rel (cms ! i)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! i)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! i)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! i)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! i) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! i) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! i) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! i) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! i) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! i))))))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! i))", "by simp"], ["proof (state)\nthis:\n  preserves_modes_mem (\\<R>_rel (cms ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "from in_\\<R>_i"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)", "have \"(\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>_rel ?cms\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. (\\<langle>fst (cms\\<^sub>A !\n                   i), snd (cms\\<^sub>A ! i), mem\\<^sub>A\\<rangle>\\<^sub>A,\n     \\<langle>fst (cms\\<^sub>C !\n                   i), snd (cms\\<^sub>C ! i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! i)", "by clarsimp"], ["proof (state)\nthis:\n  (\\<langle>fst (cms\\<^sub>A !\n                 i), snd (cms\\<^sub>A ! i), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 i), snd (cms\\<^sub>C ! i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "with preserves_modes_mem_\\<R>_i"], ["proof (chain)\npicking this:\n  preserves_modes_mem (\\<R>_rel (cms ! i))\n  (\\<langle>fst (cms\\<^sub>A !\n                 i), snd (cms\\<^sub>A ! i), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 i), snd (cms\\<^sub>C ! i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)", "have \"(\\<forall>x\\<^sub>A. mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and> (\\<forall>m. var\\<^sub>C_of ` ?mds\\<^sub>A m = range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\""], ["proof (prove)\nusing this:\n  preserves_modes_mem (\\<R>_rel (cms ! i))\n  (\\<langle>fst (cms\\<^sub>A !\n                 i), snd (cms\\<^sub>A ! i), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 i), snd (cms\\<^sub>C ! i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<^sub>A.\n        mem\\<^sub>A x\\<^sub>A =\n        mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n    (\\<forall>m.\n        var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n        range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)", "unfolding preserves_modes_mem_def"], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>C.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i) \\<longrightarrow>\n     (\\<forall>x\\<^sub>A.\n         mem\\<^sub>A x\\<^sub>A =\n         mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n     (\\<forall>m.\n         var\\<^sub>C_of ` mds\\<^sub>A m =\n         range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n  (\\<langle>fst (cms\\<^sub>A !\n                 i), snd (cms\\<^sub>A ! i), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 i), snd (cms\\<^sub>C ! i), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<^sub>A.\n        mem\\<^sub>A x\\<^sub>A =\n        mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n    (\\<forall>m.\n        var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n        range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "with m_x\\<^sub>C_i"], ["proof (chain)\npicking this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> snd (cms\\<^sub>C ! i) ?m7\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)", "have m_x\\<^sub>A: \"\\<And>m. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) m \\<Longrightarrow> var\\<^sub>A_of x \\<in> ?mds\\<^sub>A m\""], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> snd (cms\\<^sub>C ! i) ?m7\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                i)\n                m \\<Longrightarrow>\n       var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) m", "unfolding var\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> snd (cms\\<^sub>C ! i) ?m7\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                i)\n                m \\<Longrightarrow>\n       inv var\\<^sub>C_of x \\<in> snd (cms\\<^sub>A ! i) m", "using m_x_range inj_image_mem_iff var\\<^sub>C_of_inj"], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> snd (cms\\<^sub>C ! i) ?m7\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! i) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! i) m)\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7\n  inj ?f \\<Longrightarrow> (?f ?a \\<in> ?f ` ?A) = (?a \\<in> ?A)\n  inj var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                i)\n                m \\<Longrightarrow>\n       inv var\\<^sub>C_of x \\<in> snd (cms\\<^sub>A ! i) m", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) ?m7\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       i < length cms\\<^sub>C \\<Longrightarrow>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoReadOrWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoReadOrWrite)) \\<and>\n       (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                  (range var\\<^sub>C_of) !\n                 i)\n                 AsmNoWrite \\<longrightarrow>\n        (\\<forall>j<length cms\\<^sub>C.\n            j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                      (range var\\<^sub>C_of) !\n                     j)\n                     GuarNoWrite))", "show \"(x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) AsmNoReadOrWrite \\<longrightarrow>\n          (\\<forall>j<length cms\\<^sub>C. j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! j) GuarNoReadOrWrite)) \\<and>\n        (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) AsmNoWrite \\<longrightarrow>\n          (\\<forall>j<length cms\\<^sub>C. j \\<noteq> i \\<longrightarrow>\n            x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! j) GuarNoWrite))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n               (range var\\<^sub>C_of) !\n              i)\n              AsmNoReadOrWrite \\<longrightarrow>\n     (\\<forall>j<length cms\\<^sub>C.\n         j \\<noteq> i \\<longrightarrow>\n         x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                   (range var\\<^sub>C_of) !\n                  j)\n                  GuarNoReadOrWrite)) \\<and>\n    (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n               (range var\\<^sub>C_of) !\n              i)\n              AsmNoWrite \\<longrightarrow>\n     (\\<forall>j<length cms\\<^sub>C.\n         j \\<noteq> i \\<longrightarrow>\n         x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                   (range var\\<^sub>C_of) !\n                  j)\n                  GuarNoWrite))", "proof(safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume AsmNoRW_x\\<^sub>C: \"x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) AsmNoReadOrWrite\" and\n        j_len: \"j < length cms\\<^sub>C\" and\n        j_not_i: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoReadOrWrite\n  j < length cms\\<^sub>C\n  j \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "let ?cms' = \"cms ! j\" and\n          ?c\\<^sub>A' = \"fst (cms\\<^sub>A ! j)\" and ?mds\\<^sub>A' = \"snd (cms\\<^sub>A ! j)\" and\n          ?c\\<^sub>C' = \"fst (cms\\<^sub>C ! j)\" and ?mds\\<^sub>C' = \"snd (cms\\<^sub>C ! j)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from AsmNoRW_x\\<^sub>C m_x_range"], ["proof (chain)\npicking this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoReadOrWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7", "have x_range: \"x \\<in> range var\\<^sub>C_of\""], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoReadOrWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7\n\ngoal (1 subgoal):\n 1. x \\<in> range var\\<^sub>C_of", "by simp"], ["proof (state)\nthis:\n  x \\<in> range var\\<^sub>C_of\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from AsmNoRW_x\\<^sub>C m_x\\<^sub>A"], ["proof (chain)\npicking this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoReadOrWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) ?m7", "have \"var\\<^sub>A_of x \\<in> ?mds\\<^sub>A AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoReadOrWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) ?m7\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite", "by simp"], ["proof (state)\nthis:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "with compatible_modes\\<^sub>A"], ["proof (chain)\npicking this:\n  abs.compatible_modes (map snd cms\\<^sub>A)\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite", "have GuarNoRW_x\\<^sub>A: \"var\\<^sub>A_of x \\<in> ?mds\\<^sub>A' GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  abs.compatible_modes (map snd cms\\<^sub>A)\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite", "unfolding abs.compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (map snd cms\\<^sub>A) \\<longrightarrow>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoWrite))\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite", "using i_len len\\<^sub>A len\\<^sub>C j_len j_not_i"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (map snd cms\\<^sub>A) \\<longrightarrow>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoWrite))\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoReadOrWrite\n  i < length cms\\<^sub>C\n  length cms\\<^sub>A = length cms\n  length cms\\<^sub>C = length cms\n  j < length cms\\<^sub>C\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite", "by clarsimp"], ["proof (state)\nthis:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from in_\\<R> j_len len\\<^sub>C"], ["proof (chain)\npicking this:\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i)\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms", "have in_\\<R>_j: \"((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C) \\<in> \\<R>_rel ?cms'\""], ["proof (prove)\nusing this:\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i)\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! j)", "by simp"], ["proof (state)\nthis:\n  ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from j_len"], ["proof (chain)\npicking this:\n  j < length cms\\<^sub>C", "have j_len': \"j < length (map snd cms\\<^sub>C)\""], ["proof (prove)\nusing this:\n  j < length cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. j < length (map snd cms\\<^sub>C)", "by simp"], ["proof (state)\nthis:\n  j < length (map snd cms\\<^sub>C)\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from secure_refinements j_len len\\<^sub>C"], ["proof (chain)\npicking this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms", "have \"secure_refinement (\\<R>\\<^sub>A_rel ?cms') (\\<R>_rel ?cms') (P_rel ?cms')\""], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms\n\ngoal (1 subgoal):\n 1. secure_refinement (\\<R>\\<^sub>A_rel (cms ! j)) (\\<R>_rel (cms ! j))\n     (P_rel (cms ! j))", "by simp"], ["proof (state)\nthis:\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! j)) (\\<R>_rel (cms ! j))\n   (P_rel (cms ! j))\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "hence preserves_modes_mem_\\<R>_j: \"preserves_modes_mem (\\<R>_rel ?cms')\""], ["proof (prove)\nusing this:\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! j)) (\\<R>_rel (cms ! j))\n   (P_rel (cms ! j))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! j))", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others (\\<R>_rel (cms ! j)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! j)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! j)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! j)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! j) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! j) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! j) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! j) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! j) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! j) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! j))))))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! j))", "by simp"], ["proof (state)\nthis:\n  preserves_modes_mem (\\<R>_rel (cms ! j))\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from in_\\<R>_j"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)", "have \"(\\<langle>?c\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>?c\\<^sub>C', ?mds\\<^sub>C', mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>_rel ?cms'\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. (\\<langle>fst (cms\\<^sub>A !\n                   j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n     \\<langle>fst (cms\\<^sub>C !\n                   j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! j)", "by clarsimp"], ["proof (state)\nthis:\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "with preserves_modes_mem_\\<R>_j"], ["proof (chain)\npicking this:\n  preserves_modes_mem (\\<R>_rel (cms ! j))\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)", "have \"(\\<forall>x\\<^sub>A. mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and> (\\<forall>m. var\\<^sub>C_of ` ?mds\\<^sub>A' m = range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C' m)\""], ["proof (prove)\nusing this:\n  preserves_modes_mem (\\<R>_rel (cms ! j))\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<^sub>A.\n        mem\\<^sub>A x\\<^sub>A =\n        mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n    (\\<forall>m.\n        var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n        range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)", "unfolding preserves_modes_mem_def"], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>C.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! j) \\<longrightarrow>\n     (\\<forall>x\\<^sub>A.\n         mem\\<^sub>A x\\<^sub>A =\n         mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n     (\\<forall>m.\n         var\\<^sub>C_of ` mds\\<^sub>A m =\n         range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<^sub>A.\n        mem\\<^sub>A x\\<^sub>A =\n        mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n    (\\<forall>m.\n        var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n        range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoReadOrWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "with GuarNoRW_x\\<^sub>A j_len j_len' mds\\<^sub>A_of_def x_range conc.in_restrict_modesI var\\<^sub>C_of_inj"], ["proof (chain)\npicking this:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite\n  j < length cms\\<^sub>C\n  j < length (map snd cms\\<^sub>C)\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  x \\<in> range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  inj var\\<^sub>C_of\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)", "show \"x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! j) GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite\n  j < length cms\\<^sub>C\n  j < length (map snd cms\\<^sub>C)\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  x \\<in> range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  inj var\\<^sub>C_of\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)\n\ngoal (1 subgoal):\n 1. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n              (range var\\<^sub>C_of) !\n             j)\n             GuarNoReadOrWrite", "unfolding var\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  inv var\\<^sub>C_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoReadOrWrite\n  j < length cms\\<^sub>C\n  j < length (map snd cms\\<^sub>C)\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  x \\<in> range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  inj var\\<^sub>C_of\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)\n\ngoal (1 subgoal):\n 1. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n              (range var\\<^sub>C_of) !\n             j)\n             GuarNoReadOrWrite", "by (metis (no_types, lifting) doesnt_have_mode f_inv_into_f image_inv_f_f nth_map)"], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           j)\n           GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "(* This argument is identical to that for AsmNoReadOrWrite *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume AsmNoWrite_x\\<^sub>C: \"x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! i) AsmNoWrite\" and\n        j_len: \"j < length cms\\<^sub>C\" and\n        j_not_i: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoWrite\n  j < length cms\\<^sub>C\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "let ?cms' = \"cms ! j\" and\n          ?c\\<^sub>A' = \"fst (cms\\<^sub>A ! j)\" and ?mds\\<^sub>A' = \"snd (cms\\<^sub>A ! j)\" and\n          ?c\\<^sub>C' = \"fst (cms\\<^sub>C ! j)\" and ?mds\\<^sub>C' = \"snd (cms\\<^sub>C ! j)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from AsmNoWrite_x\\<^sub>C m_x_range"], ["proof (chain)\npicking this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7", "have x_range: \"x \\<in> range var\\<^sub>C_of\""], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  x \\<in> range var\\<^sub>C_of \\<and> x \\<in> (map snd cms\\<^sub>C ! i) ?m7\n\ngoal (1 subgoal):\n 1. x \\<in> range var\\<^sub>C_of", "by simp"], ["proof (state)\nthis:\n  x \\<in> range var\\<^sub>C_of\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from AsmNoWrite_x\\<^sub>C m_x\\<^sub>A"], ["proof (chain)\npicking this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) ?m7", "have \"var\\<^sub>A_of x \\<in> ?mds\\<^sub>A AsmNoWrite\""], ["proof (prove)\nusing this:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           AsmNoWrite\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           i)\n           ?m7 \\<Longrightarrow>\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) ?m7\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoWrite", "by simp"], ["proof (state)\nthis:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "with compatible_modes\\<^sub>A"], ["proof (chain)\npicking this:\n  abs.compatible_modes (map snd cms\\<^sub>A)\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoWrite", "have GuarNoWrite_x\\<^sub>A: \"var\\<^sub>A_of x \\<in> ?mds\\<^sub>A' GuarNoWrite\""], ["proof (prove)\nusing this:\n  abs.compatible_modes (map snd cms\\<^sub>A)\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite", "unfolding abs.compatible_modes_def"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (map snd cms\\<^sub>A) \\<longrightarrow>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoWrite))\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite", "using i_len len\\<^sub>A len\\<^sub>C j_len j_not_i"], ["proof (prove)\nusing this:\n  \\<forall>i x.\n     i < length (map snd cms\\<^sub>A) \\<longrightarrow>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoReadOrWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoReadOrWrite)) \\<and>\n     (x \\<in> (map snd cms\\<^sub>A ! i) AsmNoWrite \\<longrightarrow>\n      (\\<forall>j<length (map snd cms\\<^sub>A).\n          j \\<noteq> i \\<longrightarrow>\n          x \\<in> (map snd cms\\<^sub>A ! j) GuarNoWrite))\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! i) AsmNoWrite\n  i < length cms\\<^sub>C\n  length cms\\<^sub>A = length cms\n  length cms\\<^sub>C = length cms\n  j < length cms\\<^sub>C\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite", "by clarsimp"], ["proof (state)\nthis:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from in_\\<R> j_len len\\<^sub>C"], ["proof (chain)\npicking this:\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i)\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms", "have in_\\<R>_j: \"((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C) \\<in> \\<R>_rel ?cms'\""], ["proof (prove)\nusing this:\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A ! i, mem\\<^sub>A), cms\\<^sub>C ! i, mem\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! i)\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms\n\ngoal (1 subgoal):\n 1. ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! j)", "by simp"], ["proof (state)\nthis:\n  ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from j_len"], ["proof (chain)\npicking this:\n  j < length cms\\<^sub>C", "have j_len': \"j < length (map snd cms\\<^sub>C)\""], ["proof (prove)\nusing this:\n  j < length cms\\<^sub>C\n\ngoal (1 subgoal):\n 1. j < length (map snd cms\\<^sub>C)", "by simp"], ["proof (state)\nthis:\n  j < length (map snd cms\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from secure_refinements j_len len\\<^sub>C"], ["proof (chain)\npicking this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms", "have \"secure_refinement (\\<R>\\<^sub>A_rel ?cms') (\\<R>_rel ?cms') (P_rel ?cms')\""], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  j < length cms\\<^sub>C\n  length cms\\<^sub>C = length cms\n\ngoal (1 subgoal):\n 1. secure_refinement (\\<R>\\<^sub>A_rel (cms ! j)) (\\<R>_rel (cms ! j))\n     (P_rel (cms ! j))", "by simp"], ["proof (state)\nthis:\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! j)) (\\<R>_rel (cms ! j))\n   (P_rel (cms ! j))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "hence preserves_modes_mem_\\<R>_j: \"preserves_modes_mem (\\<R>_rel ?cms')\""], ["proof (prove)\nusing this:\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! j)) (\\<R>_rel (cms ! j))\n   (P_rel (cms ! j))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! j))", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  closed_others (\\<R>_rel (cms ! j)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! j)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! j)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! j)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! j) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! j) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! j) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! j) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! j) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! j) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! j))))))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! j))", "by simp"], ["proof (state)\nthis:\n  preserves_modes_mem (\\<R>_rel (cms ! j))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from in_\\<R>_j"], ["proof (chain)\npicking this:\n  ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)", "have \"(\\<langle>?c\\<^sub>A', ?mds\\<^sub>A', mem\\<^sub>A\\<rangle>\\<^sub>A, \\<langle>?c\\<^sub>C', ?mds\\<^sub>C', mem\\<^sub>C\\<rangle>\\<^sub>C) \\<in> \\<R>_rel ?cms'\""], ["proof (prove)\nusing this:\n  ((cms\\<^sub>A ! j, mem\\<^sub>A), cms\\<^sub>C ! j, mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. (\\<langle>fst (cms\\<^sub>A !\n                   j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n     \\<langle>fst (cms\\<^sub>C !\n                   j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n    \\<in> \\<R>_rel (cms ! j)", "by clarsimp"], ["proof (state)\nthis:\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "with preserves_modes_mem_\\<R>_j"], ["proof (chain)\npicking this:\n  preserves_modes_mem (\\<R>_rel (cms ! j))\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)", "have \"(\\<forall>x\\<^sub>A. mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and> (\\<forall>m. var\\<^sub>C_of ` ?mds\\<^sub>A' m = range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C' m)\""], ["proof (prove)\nusing this:\n  preserves_modes_mem (\\<R>_rel (cms ! j))\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<^sub>A.\n        mem\\<^sub>A x\\<^sub>A =\n        mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n    (\\<forall>m.\n        var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n        range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)", "unfolding preserves_modes_mem_def"], ["proof (prove)\nusing this:\n  \\<forall>c\\<^sub>A mds\\<^sub>A mem\\<^sub>A c\\<^sub>C mds\\<^sub>C\n     mem\\<^sub>C.\n     (\\<langle>c\\<^sub>A, mds\\<^sub>A, mem\\<^sub>A\\<rangle>\\<^sub>A,\n      \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n     \\<in> \\<R>_rel (cms ! j) \\<longrightarrow>\n     (\\<forall>x\\<^sub>A.\n         mem\\<^sub>A x\\<^sub>A =\n         mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n     (\\<forall>m.\n         var\\<^sub>C_of ` mds\\<^sub>A m =\n         range var\\<^sub>C_of \\<inter> mds\\<^sub>C m)\n  (\\<langle>fst (cms\\<^sub>A !\n                 j), snd (cms\\<^sub>A ! j), mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>fst (cms\\<^sub>C !\n                 j), snd (cms\\<^sub>C ! j), mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! j)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<^sub>A.\n        mem\\<^sub>A x\\<^sub>A =\n        mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n    (\\<forall>m.\n        var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n        range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                          (range var\\<^sub>C_of) !\n                         i)\n                         AsmNoWrite;\n        j < length cms\\<^sub>C; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                                   (range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "with GuarNoWrite_x\\<^sub>A j_len j_len' mds\\<^sub>A_of_def x_range conc.in_restrict_modesI var\\<^sub>C_of_inj"], ["proof (chain)\npicking this:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite\n  j < length cms\\<^sub>C\n  j < length (map snd cms\\<^sub>C)\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  x \\<in> range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  inj var\\<^sub>C_of\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)", "show \"x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C) (range var\\<^sub>C_of) ! j) GuarNoWrite\""], ["proof (prove)\nusing this:\n  var\\<^sub>A_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite\n  j < length cms\\<^sub>C\n  j < length (map snd cms\\<^sub>C)\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  x \\<in> range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  inj var\\<^sub>C_of\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)\n\ngoal (1 subgoal):\n 1. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n              (range var\\<^sub>C_of) !\n             j)\n             GuarNoWrite", "unfolding var\\<^sub>A_of_def"], ["proof (prove)\nusing this:\n  inv var\\<^sub>C_of x \\<in> snd (cms\\<^sub>A ! j) GuarNoWrite\n  j < length cms\\<^sub>C\n  j < length (map snd cms\\<^sub>C)\n  mds\\<^sub>A_of ?mds\\<^sub>C \\<equiv>\n  \\<lambda>m.\n     inv var\\<^sub>C_of ` (range var\\<^sub>C_of \\<inter> ?mds\\<^sub>C m)\n  x \\<in> range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  inj var\\<^sub>C_of\n  (\\<forall>x\\<^sub>A.\n      mem\\<^sub>A x\\<^sub>A = mem\\<^sub>C (var\\<^sub>C_of x\\<^sub>A)) \\<and>\n  (\\<forall>m.\n      var\\<^sub>C_of ` snd (cms\\<^sub>A ! j) m =\n      range var\\<^sub>C_of \\<inter> snd (cms\\<^sub>C ! j) m)\n\ngoal (1 subgoal):\n 1. x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n              (range var\\<^sub>C_of) !\n             j)\n             GuarNoWrite", "by (metis (no_types, lifting) doesnt_have_mode f_inv_into_f image_inv_f_f nth_map)"], ["proof (state)\nthis:\n  x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n            (range var\\<^sub>C_of) !\n           j)\n           GuarNoWrite\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n             (range var\\<^sub>C_of) !\n            i)\n            AsmNoReadOrWrite \\<longrightarrow>\n   (\\<forall>j<length cms\\<^sub>C.\n       j \\<noteq> i \\<longrightarrow>\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                j)\n                GuarNoReadOrWrite)) \\<and>\n  (x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n             (range var\\<^sub>C_of) !\n            i)\n            AsmNoWrite \\<longrightarrow>\n   (\\<forall>j<length cms\\<^sub>C.\n       j \\<noteq> i \\<longrightarrow>\n       x \\<in> (conc.restrict_modes (map snd cms\\<^sub>C)\n                 (range var\\<^sub>C_of) !\n                j)\n                GuarNoWrite))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compatible_modes_new_vars:\n  \"length mdss = length cms \\<Longrightarrow> modes_respect_priv mdss \\<Longrightarrow> conc.compatible_modes (conc.restrict_modes mdss (- range var\\<^sub>C_of))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length mdss = length cms; modes_respect_priv mdss\\<rbrakk>\n    \\<Longrightarrow> conc.compatible_modes\n                       (conc.restrict_modes mdss (- range var\\<^sub>C_of))", "unfolding conc.compatible_modes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length mdss = length cms; modes_respect_priv mdss\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i x.\n                         i < length\n                              (conc.restrict_modes mdss\n                                (- range var\\<^sub>C_of)) \\<longrightarrow>\n                         (x \\<in> (conc.restrict_modes mdss\n                                    (- range var\\<^sub>C_of) !\n                                   i)\n                                   AsmNoReadOrWrite \\<longrightarrow>\n                          (\\<forall>j<length\n (conc.restrict_modes mdss (- range var\\<^sub>C_of)).\n                              j \\<noteq> i \\<longrightarrow>\n                              x \\<in> (conc.restrict_modes mdss\n  (- range var\\<^sub>C_of) !\n j)\n GuarNoReadOrWrite)) \\<and>\n                         (x \\<in> (conc.restrict_modes mdss\n                                    (- range var\\<^sub>C_of) !\n                                   i)\n                                   AsmNoWrite \\<longrightarrow>\n                          (\\<forall>j<length\n (conc.restrict_modes mdss (- range var\\<^sub>C_of)).\n                              j \\<noteq> i \\<longrightarrow>\n                              x \\<in> (conc.restrict_modes mdss\n  (- range var\\<^sub>C_of) !\n j)\n GuarNoWrite))", "proof(safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "let ?X = \"- range var\\<^sub>C_of\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "let ?mdss\\<^sub>X = \"conc.restrict_modes mdss ?X\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume respect: \"modes_respect_priv mdss\""], ["proof (state)\nthis:\n  modes_respect_priv mdss\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume len_eq: \"length mdss = length cms\""], ["proof (state)\nthis:\n  length mdss = length cms\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "fix i x\\<^sub>C j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume ilen: \"i < length ?mdss\\<^sub>X\""], ["proof (state)\nthis:\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume jlen: \"j < length ?mdss\\<^sub>X\""], ["proof (state)\nthis:\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume neq: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "assume asm\\<^sub>X: \"x\\<^sub>C \\<in> (?mdss\\<^sub>X ! i) AsmNoWrite\""], ["proof (state)\nthis:\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i) AsmNoWrite\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from conc.in_restrict_modesD ilen asm\\<^sub>X conc.restrict_modes_length"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i < length ?mdss;\n   ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X \\<and> ?x \\<in> (?mdss ! ?i) ?m\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i) AsmNoWrite\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss", "have \n    xin: \"x\\<^sub>C \\<in> ?X\" and\n    asm: \"x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length ?mdss;\n   ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X \\<and> ?x \\<in> (?mdss ! ?i) ?m\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i) AsmNoWrite\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> - range var\\<^sub>C_of &&&\n    x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite", "by metis+"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "from asm"], ["proof (chain)\npicking this:\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite", "have \"False\""], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite\n\ngoal (1 subgoal):\n 1. False", "using respect xin ilen conc.restrict_modes_length len_eq"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite\n  modes_respect_priv mdss\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n\ngoal (1 subgoal):\n 1. False", "unfolding modes_respect_priv_def new_asms_NoReadOrWrite_only_def"], ["proof (prove)\nusing this:\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoWrite\n  priv_is_asm_priv mdss \\<and>\n  priv_is_guar_priv mdss \\<and>\n  new_asms_only_for_priv mdss \\<and>\n  (\\<forall>i<length cms.\n      (mdss ! i) AsmNoWrite \\<inter> - range var\\<^sub>C_of = {})\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite\n 2. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoWrite", "thus \"x\\<^sub>C \\<in> (?mdss\\<^sub>X ! j) GuarNoWrite\""], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. x\\<^sub>C\n    \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! j)\n           GuarNoWrite", "by blast"], ["proof (state)\nthis:\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! j) GuarNoWrite\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "let ?X = \"- range var\\<^sub>C_of\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "let ?mdss\\<^sub>X = \"conc.restrict_modes mdss ?X\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "assume respect: \"modes_respect_priv mdss\""], ["proof (state)\nthis:\n  modes_respect_priv mdss\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "assume len_eq: \"length mdss = length cms\""], ["proof (state)\nthis:\n  length mdss = length cms\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "fix i x\\<^sub>C j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "assume ilen: \"i < length ?mdss\\<^sub>X\""], ["proof (state)\nthis:\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "assume jlen: \"j < length ?mdss\\<^sub>X\""], ["proof (state)\nthis:\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "assume neq: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "assume asm\\<^sub>X: \"x\\<^sub>C \\<in> (?mdss\\<^sub>X ! i) AsmNoReadOrWrite\""], ["proof (state)\nthis:\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n         AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "from conc.in_restrict_modesD ilen asm\\<^sub>X conc.restrict_modes_length"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i < length ?mdss;\n   ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X \\<and> ?x \\<in> (?mdss ! ?i) ?m\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n         AsmNoReadOrWrite\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss", "have \n    xin: \"x\\<^sub>C \\<in> ?X\" and\n    asm: \"x\\<^sub>C \\<in> (mdss ! i) AsmNoReadOrWrite\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length ?mdss;\n   ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X \\<and> ?x \\<in> (?mdss ! ?i) ?m\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n         AsmNoReadOrWrite\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> - range var\\<^sub>C_of &&&\n    x\\<^sub>C \\<in> (mdss ! i) AsmNoReadOrWrite", "by metis+"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "from respect asm xin ilen conc.restrict_modes_length len_eq"], ["proof (chain)\npicking this:\n  modes_respect_priv mdss\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoReadOrWrite\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms", "have\n    \"x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i\""], ["proof (prove)\nusing this:\n  modes_respect_priv mdss\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoReadOrWrite\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i", "unfolding modes_respect_priv_def new_asms_only_for_priv_def"], ["proof (prove)\nusing this:\n  priv_is_asm_priv mdss \\<and>\n  priv_is_guar_priv mdss \\<and>\n  (\\<forall>i<length cms.\n      ((mdss ! i) AsmNoReadOrWrite \\<union> (mdss ! i) AsmNoWrite) \\<inter>\n      - range var\\<^sub>C_of\n      \\<subseteq> priv_mem\\<^sub>C ! i) \\<and>\n  new_asms_NoReadOrWrite_only mdss\n  x\\<^sub>C \\<in> (mdss ! i) AsmNoReadOrWrite\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i", "by force"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "with respect ilen jlen neq conc.restrict_modes_length len_eq"], ["proof (chain)\npicking this:\n  modes_respect_priv mdss\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  j \\<noteq> i\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n  x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i", "have\n    \"x\\<^sub>C \\<in> (mdss ! j) GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  modes_respect_priv mdss\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  j \\<noteq> i\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n  x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> (mdss ! j) GuarNoReadOrWrite", "unfolding modes_respect_priv_def priv_is_guar_priv_def"], ["proof (prove)\nusing this:\n  priv_is_asm_priv mdss \\<and>\n  (\\<forall>i<length cms.\n      \\<forall>j<length cms.\n         i \\<noteq> j \\<longrightarrow>\n         priv_mem\\<^sub>C ! i\n         \\<subseteq> (mdss ! j) GuarNoReadOrWrite) \\<and>\n  new_asms_only_for_priv mdss \\<and> new_asms_NoReadOrWrite_only mdss\n  i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  j \\<noteq> i\n  length (conc.restrict_modes ?mdss ?X) = length ?mdss\n  length mdss = length cms\n  x\\<^sub>C \\<in> priv_mem\\<^sub>C ! i\n\ngoal (1 subgoal):\n 1. x\\<^sub>C \\<in> (mdss ! j) GuarNoReadOrWrite", "by force"], ["proof (state)\nthis:\n  x\\<^sub>C \\<in> (mdss ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. \\<And>i x j.\n       \\<lbrakk>length mdss = length cms; modes_respect_priv mdss;\n        i < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        x \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! i)\n                 AsmNoReadOrWrite;\n        j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (conc.restrict_modes mdss\n                                   (- range var\\<^sub>C_of) !\n                                  j)\n                                  GuarNoReadOrWrite", "with jlen xin conc.in_restrict_modesI"], ["proof (chain)\npicking this:\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  x\\<^sub>C \\<in> (mdss ! j) GuarNoReadOrWrite", "show\n    \"x\\<^sub>C \\<in> (?mdss\\<^sub>X ! j) GuarNoReadOrWrite\""], ["proof (prove)\nusing this:\n  j < length (conc.restrict_modes mdss (- range var\\<^sub>C_of))\n  x\\<^sub>C \\<in> - range var\\<^sub>C_of\n  \\<lbrakk>?i < length ?mdss; ?x \\<in> ?X; ?x \\<in> (?mdss ! ?i) ?m\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (conc.restrict_modes ?mdss ?X ! ?i) ?m\n  x\\<^sub>C \\<in> (mdss ! j) GuarNoReadOrWrite\n\ngoal (1 subgoal):\n 1. x\\<^sub>C\n    \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! j)\n           GuarNoReadOrWrite", "by force"], ["proof (state)\nthis:\n  x\\<^sub>C\n  \\<in> (conc.restrict_modes mdss (- range var\\<^sub>C_of) ! j)\n         GuarNoReadOrWrite\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sound_mode_use_preservation:\n  \"\\<And>gc\\<^sub>C gc\\<^sub>A. \n    length (fst gc\\<^sub>A) = length cms \\<Longrightarrow> length (fst gc\\<^sub>C) = length cms  \\<Longrightarrow>\n    (\\<And>i. i < length cms \\<Longrightarrow> ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)) \\<in> \\<R>_rel (cms ! i)) \\<Longrightarrow>\n    abs.sound_mode_use gc\\<^sub>A \\<Longrightarrow> modes_respect_priv (map snd (fst gc\\<^sub>C)) \\<Longrightarrow>\n    conc.sound_mode_use gc\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "fix gc\\<^sub>C gc\\<^sub>A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "assume len_eq [simp]: \"length (fst gc\\<^sub>A) = length cms\"\n     and len_eq'[simp]: \"length (fst gc\\<^sub>C) = length cms\"\n     and in_\\<R>: \"(\\<And>i. i < length cms \\<Longrightarrow> ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n     and sound_mode_use\\<^sub>A: \"abs.sound_mode_use gc\\<^sub>A\"\n     and modes_respect_priv: \"modes_respect_priv (map snd (fst gc\\<^sub>C))\""], ["proof (state)\nthis:\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>C) = length cms\n  ?i7 < length cms \\<Longrightarrow>\n  ((fst gc\\<^sub>A ! ?i7, snd gc\\<^sub>A), fst gc\\<^sub>C ! ?i7,\n   snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  abs.sound_mode_use gc\\<^sub>A\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "have \"conc.globally_sound_mode_use gc\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.globally_sound_mode_use gc\\<^sub>C", "unfolding conc.globally_sound_mode_use_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<longrightarrow>\n       conc.compatible_modes mdss", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "fix mdss\\<^sub>C'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "assume in_reachable_modes: \"mdss\\<^sub>C' \\<in> conc.reachable_mode_states gc\\<^sub>C\""], ["proof (state)\nthis:\n  mdss\\<^sub>C' \\<in> conc.reachable_mode_states gc\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "from this"], ["proof (chain)\npicking this:\n  mdss\\<^sub>C' \\<in> conc.reachable_mode_states gc\\<^sub>C", "obtain cms\\<^sub>C' mem\\<^sub>C' sched\\<^sub>C where\n      meval_sched\\<^sub>C: \"conc.meval_sched sched\\<^sub>C gc\\<^sub>C (cms\\<^sub>C', mem\\<^sub>C')\" and\n      mdss\\<^sub>C'_def: \"mdss\\<^sub>C' = map snd cms\\<^sub>C'\""], ["proof (prove)\nusing this:\n  mdss\\<^sub>C' \\<in> conc.reachable_mode_states gc\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>sched\\<^sub>C cms\\<^sub>C' mem\\<^sub>C'.\n        \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C\n                  (cms\\<^sub>C', mem\\<^sub>C');\n         mdss\\<^sub>C' = map snd cms\\<^sub>C'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding conc.reachable_mode_states_def"], ["proof (prove)\nusing this:\n  mdss\\<^sub>C'\n  \\<in> {mdss.\n         \\<exists>cms' mem' sched.\n            conc.meval_sched_abv gc\\<^sub>C sched (cms', mem') \\<and>\n            map snd cms' = mdss}\n\ngoal (1 subgoal):\n 1. (\\<And>sched\\<^sub>C cms\\<^sub>C' mem\\<^sub>C'.\n        \\<lbrakk>conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C\n                  (cms\\<^sub>C', mem\\<^sub>C');\n         mdss\\<^sub>C' = map snd cms\\<^sub>C'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  conc.meval_sched_abv gc\\<^sub>C sched\\<^sub>C (cms\\<^sub>C', mem\\<^sub>C')\n  mdss\\<^sub>C' = map snd cms\\<^sub>C'\n\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "from traces_refinement[OF meval_sched\\<^sub>C, OF len_eq len_eq' in_\\<R> sound_mode_use\\<^sub>A modes_respect_priv]"], ["proof (chain)\npicking this:\n  (\\<And>i.\n      i < length cms \\<Longrightarrow> i < length cms) \\<Longrightarrow>\n  \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n     abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n     (\\<forall>i<length cms.\n         ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n          fst (cms\\<^sub>C', mem\\<^sub>C') ! i,\n          snd (cms\\<^sub>C', mem\\<^sub>C'))\n         \\<in> \\<R>_rel (cms ! i)) \\<and>\n     abs.sound_mode_use gc\\<^sub>A'", "obtain sched\\<^sub>A gc\\<^sub>A' cms\\<^sub>A' mem\\<^sub>A' where gc\\<^sub>A'_def [simp]: \"gc\\<^sub>A' = (cms\\<^sub>A', mem\\<^sub>A')\"  and\n      meval_sched\\<^sub>A: \"abs.meval_sched sched\\<^sub>A gc\\<^sub>A gc\\<^sub>A'\" and\n      in_\\<R>: \"(\\<forall>i<length cms.\n              ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C') \\<in> \\<R>_rel (cms ! i))\"\n      and sound_mode_use\\<^sub>A': \"abs.sound_mode_use gc\\<^sub>A'\""], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i < length cms \\<Longrightarrow> i < length cms) \\<Longrightarrow>\n  \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n     abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A' \\<and>\n     (\\<forall>i<length cms.\n         ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n          fst (cms\\<^sub>C', mem\\<^sub>C') ! i,\n          snd (cms\\<^sub>C', mem\\<^sub>C'))\n         \\<in> \\<R>_rel (cms ! i)) \\<and>\n     abs.sound_mode_use gc\\<^sub>A'\n\ngoal (1 subgoal):\n 1. (\\<And>gc\\<^sub>A' cms\\<^sub>A' mem\\<^sub>A' sched\\<^sub>A.\n        \\<lbrakk>gc\\<^sub>A' = (cms\\<^sub>A', mem\\<^sub>A');\n         abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A';\n         \\<forall>i<length cms.\n            ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i,\n             mem\\<^sub>C')\n            \\<in> \\<R>_rel (cms ! i);\n         abs.sound_mode_use gc\\<^sub>A'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  gc\\<^sub>A' = (cms\\<^sub>A', mem\\<^sub>A')\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A'\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C')\n     \\<in> \\<R>_rel (cms ! i)\n  abs.sound_mode_use gc\\<^sub>A'\n\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "let ?mdss\\<^sub>A' = \"map snd cms\\<^sub>A'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "have \"?mdss\\<^sub>A' \\<in> abs.reachable_mode_states gc\\<^sub>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd cms\\<^sub>A' \\<in> abs.reachable_mode_states gc\\<^sub>A", "unfolding abs.reachable_mode_states_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd cms\\<^sub>A'\n    \\<in> {mdss.\n           \\<exists>cms' mem' sched.\n              abs.meval_sched_abv gc\\<^sub>A sched (cms', mem') \\<and>\n              map snd cms' = mdss}", "using meval_sched\\<^sub>A"], ["proof (prove)\nusing this:\n  abs.meval_sched_abv gc\\<^sub>A sched\\<^sub>A gc\\<^sub>A'\n\ngoal (1 subgoal):\n 1. map snd cms\\<^sub>A'\n    \\<in> {mdss.\n           \\<exists>cms' mem' sched.\n              abs.meval_sched_abv gc\\<^sub>A sched (cms', mem') \\<and>\n              map snd cms' = mdss}", "by fastforce"], ["proof (state)\nthis:\n  map snd cms\\<^sub>A' \\<in> abs.reachable_mode_states gc\\<^sub>A\n\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "hence compatible_modes\\<^sub>A': \"abs.compatible_modes ?mdss\\<^sub>A'\""], ["proof (prove)\nusing this:\n  map snd cms\\<^sub>A' \\<in> abs.reachable_mode_states gc\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.compatible_modes (map snd cms\\<^sub>A')", "using sound_mode_use\\<^sub>A"], ["proof (prove)\nusing this:\n  map snd cms\\<^sub>A' \\<in> abs.reachable_mode_states gc\\<^sub>A\n  abs.sound_mode_use gc\\<^sub>A\n\ngoal (1 subgoal):\n 1. abs.compatible_modes (map snd cms\\<^sub>A')", "unfolding abs.sound_mode_use_def abs.globally_sound_mode_use_def"], ["proof (prove)\nusing this:\n  map snd cms\\<^sub>A' \\<in> abs.reachable_mode_states gc\\<^sub>A\n  case gc\\<^sub>A of\n  (cms, mem) \\<Rightarrow>\n    list_all (\\<lambda>cm. abs.locally_sound_mode_use (cm, mem)) cms \\<and>\n    (\\<forall>mdss.\n        mdss \\<in> abs.reachable_mode_states (cms, mem) \\<longrightarrow>\n        abs.compatible_modes mdss)\n\ngoal (1 subgoal):\n 1. abs.compatible_modes (map snd cms\\<^sub>A')", "by fastforce"], ["proof (state)\nthis:\n  abs.compatible_modes (map snd cms\\<^sub>A')\n\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "let ?X = \"range var\\<^sub>C_of\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mdss.\n       mdss \\<in> conc.reachable_mode_states gc\\<^sub>C \\<Longrightarrow>\n       conc.compatible_modes mdss", "show \"conc.compatible_modes mdss\\<^sub>C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.compatible_modes mdss\\<^sub>C'", "proof(rule conc.compatible_modes_by_case_distinction[where X=\"?X\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. conc.compatible_modes\n     (conc.restrict_modes mdss\\<^sub>C' (range var\\<^sub>C_of))\n 2. conc.compatible_modes\n     (conc.restrict_modes mdss\\<^sub>C' (- range var\\<^sub>C_of))", "show \"conc.compatible_modes (conc.restrict_modes mdss\\<^sub>C' ?X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.compatible_modes\n     (conc.restrict_modes mdss\\<^sub>C' (range var\\<^sub>C_of))", "apply(simp add: mdss\\<^sub>C'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.compatible_modes\n     (conc.restrict_modes (map snd cms\\<^sub>C') (range var\\<^sub>C_of))", "apply(rule compatible_modes_old_vars[OF _ _ _ in_\\<R>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. abs.compatible_modes (map snd cms\\<^sub>A')\n 2. length cms\\<^sub>A' = length cms\n 3. length cms\\<^sub>C' = length cms", "apply(rule compatible_modes\\<^sub>A')"], ["proof (prove)\ngoal (2 subgoals):\n 1. length cms\\<^sub>A' = length cms\n 2. length cms\\<^sub>C' = length cms", "using len_eq abs.meval_sched_length[OF meval_sched\\<^sub>A] gc\\<^sub>A'_def"], ["proof (prove)\nusing this:\n  length (fst gc\\<^sub>A) = length cms\n  length (fst gc\\<^sub>A') = length (fst gc\\<^sub>A)\n  gc\\<^sub>A' = (cms\\<^sub>A', mem\\<^sub>A')\n\ngoal (2 subgoals):\n 1. length cms\\<^sub>A' = length cms\n 2. length cms\\<^sub>C' = length cms", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. length cms\\<^sub>C' = length cms", "using len_eq' conc.meval_sched_length[OF meval_sched\\<^sub>C]"], ["proof (prove)\nusing this:\n  length (fst gc\\<^sub>C) = length cms\n  length (fst (cms\\<^sub>C', mem\\<^sub>C')) = length (fst gc\\<^sub>C)\n\ngoal (1 subgoal):\n 1. length cms\\<^sub>C' = length cms", "by simp"], ["proof (state)\nthis:\n  conc.compatible_modes\n   (conc.restrict_modes mdss\\<^sub>C' (range var\\<^sub>C_of))\n\ngoal (1 subgoal):\n 1. conc.compatible_modes\n     (conc.restrict_modes mdss\\<^sub>C' (- range var\\<^sub>C_of))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. conc.compatible_modes\n     (conc.restrict_modes mdss\\<^sub>C' (- range var\\<^sub>C_of))", "show \"conc.compatible_modes (conc.restrict_modes mdss\\<^sub>C' (- ?X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.compatible_modes\n     (conc.restrict_modes mdss\\<^sub>C' (- range var\\<^sub>C_of))", "apply(rule compatible_modes_new_vars)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length mdss\\<^sub>C' = length cms\n 2. modes_respect_priv mdss\\<^sub>C'", "using len_eq' conc.meval_sched_length[OF meval_sched\\<^sub>C] mdss\\<^sub>C'_def"], ["proof (prove)\nusing this:\n  length (fst gc\\<^sub>C) = length cms\n  length (fst (cms\\<^sub>C', mem\\<^sub>C')) = length (fst gc\\<^sub>C)\n  mdss\\<^sub>C' = map snd cms\\<^sub>C'\n\ngoal (2 subgoals):\n 1. length mdss\\<^sub>C' = length cms\n 2. modes_respect_priv mdss\\<^sub>C'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv mdss\\<^sub>C'", "apply(simp add: mdss\\<^sub>C'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd cms\\<^sub>C')", "apply(rule meval_sched_modes_respect_priv[OF meval_sched\\<^sub>C, simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd (fst gc\\<^sub>C))", "using modes_respect_priv"], ["proof (prove)\nusing this:\n  modes_respect_priv (map snd (fst gc\\<^sub>C))\n\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd (fst gc\\<^sub>C))", "by simp"], ["proof (state)\nthis:\n  conc.compatible_modes\n   (conc.restrict_modes mdss\\<^sub>C' (- range var\\<^sub>C_of))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  conc.compatible_modes mdss\\<^sub>C'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  conc.globally_sound_mode_use gc\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "moreover"], ["proof (state)\nthis:\n  conc.globally_sound_mode_use gc\\<^sub>C\n\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "have \"list_all (\\<lambda> cm. conc.locally_sound_mode_use (cm, (snd gc\\<^sub>C))) (fst gc\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>cm. conc.locally_sound_mode_use (cm, snd gc\\<^sub>C))\n     (fst gc\\<^sub>C)", "unfolding list_all_length"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length (fst gc\\<^sub>C).\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (fst gc\\<^sub>C) \\<Longrightarrow>\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (fst gc\\<^sub>C) \\<Longrightarrow>\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "assume \"i < length (fst gc\\<^sub>C)\""], ["proof (state)\nthis:\n  i < length (fst gc\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (fst gc\\<^sub>C) \\<Longrightarrow>\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "hence len: \"i < length cms\""], ["proof (prove)\nusing this:\n  i < length (fst gc\\<^sub>C)\n\ngoal (1 subgoal):\n 1. i < length cms", "by simp"], ["proof (state)\nthis:\n  i < length cms\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (fst gc\\<^sub>C) \\<Longrightarrow>\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "have preserves: \"preserves_locally_sound_mode_use (\\<R>_rel (cms ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_locally_sound_mode_use (\\<R>_rel (cms ! i))", "apply(rule locally_sound_mode_use_preservation)"], ["proof (prove)\ngoal (2 subgoals):\n 1. secure_refinement ?\\<R>\\<^sub>A (\\<R>_rel (cms ! i)) ?P\n 2. preserves_local_guarantee_compliance (\\<R>_rel (cms ! i))", "using secure_refinements len"], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n  i < length cms\n\ngoal (2 subgoals):\n 1. secure_refinement ?\\<R>\\<^sub>A (\\<R>_rel (cms ! i)) ?P\n 2. preserves_local_guarantee_compliance (\\<R>_rel (cms ! i))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves_local_guarantee_compliance (\\<R>_rel (cms ! i))", "using local_guarantee_preservation len"], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  preserves_local_guarantee_compliance (\\<R>_rel (cms ! ?i))\n  i < length cms\n\ngoal (1 subgoal):\n 1. preserves_local_guarantee_compliance (\\<R>_rel (cms ! i))", "by blast"], ["proof (state)\nthis:\n  preserves_locally_sound_mode_use (\\<R>_rel (cms ! i))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (fst gc\\<^sub>C) \\<Longrightarrow>\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "have \"abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)", "using sound_mode_use\\<^sub>A \\<open>i < length cms\\<close> len_eq"], ["proof (prove)\nusing this:\n  abs.sound_mode_use gc\\<^sub>A\n  i < length cms\n  length (fst gc\\<^sub>A) = length cms\n\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)", "unfolding abs.sound_mode_use_def list_all_length"], ["proof (prove)\nusing this:\n  case gc\\<^sub>A of\n  (cms, mem) \\<Rightarrow>\n    (\\<forall>n<length cms.\n        abs.locally_sound_mode_use (cms ! n, mem)) \\<and>\n    abs.globally_sound_mode_use (cms, mem)\n  i < length cms\n  length (fst gc\\<^sub>A) = length cms\n\ngoal (1 subgoal):\n 1. abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)", "by (simp add: case_prod_unfold)"], ["proof (state)\nthis:\n  abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (fst gc\\<^sub>C) \\<Longrightarrow>\n       conc.locally_sound_mode_use (fst gc\\<^sub>C ! n, snd gc\\<^sub>C)", "from this in_\\<R>[OF len] preserves[unfolded preserves_locally_sound_mode_use_def]"], ["proof (chain)\npicking this:\n  abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)\n  ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i, snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n  \\<forall>lc\\<^sub>A lc\\<^sub>C.\n     abs.locally_sound_mode_use lc\\<^sub>A \\<and>\n     (lc\\<^sub>A, lc\\<^sub>C) \\<in> \\<R>_rel (cms ! i) \\<longrightarrow>\n     conc.locally_sound_mode_use lc\\<^sub>C", "show \"conc.locally_sound_mode_use (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)\""], ["proof (prove)\nusing this:\n  abs.locally_sound_mode_use (fst gc\\<^sub>A ! i, snd gc\\<^sub>A)\n  ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i, snd gc\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i)\n  \\<forall>lc\\<^sub>A lc\\<^sub>C.\n     abs.locally_sound_mode_use lc\\<^sub>A \\<and>\n     (lc\\<^sub>A, lc\\<^sub>C) \\<in> \\<R>_rel (cms ! i) \\<longrightarrow>\n     conc.locally_sound_mode_use lc\\<^sub>C\n\ngoal (1 subgoal):\n 1. conc.locally_sound_mode_use (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)", "by blast"], ["proof (state)\nthis:\n  conc.locally_sound_mode_use (fst gc\\<^sub>C ! i, snd gc\\<^sub>C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all (\\<lambda>cm. conc.locally_sound_mode_use (cm, snd gc\\<^sub>C))\n   (fst gc\\<^sub>C)\n\ngoal (1 subgoal):\n 1. \\<And>gc\\<^sub>C gc\\<^sub>A.\n       \\<lbrakk>length (fst gc\\<^sub>A) = length cms;\n        length (fst gc\\<^sub>C) = length cms;\n        \\<And>i.\n           i < length cms \\<Longrightarrow>\n           ((fst gc\\<^sub>A ! i, snd gc\\<^sub>A), fst gc\\<^sub>C ! i,\n            snd gc\\<^sub>C)\n           \\<in> \\<R>_rel (cms ! i);\n        abs.sound_mode_use gc\\<^sub>A;\n        modes_respect_priv (map snd (fst gc\\<^sub>C))\\<rbrakk>\n       \\<Longrightarrow> conc.sound_mode_use gc\\<^sub>C", "ultimately"], ["proof (chain)\npicking this:\n  conc.globally_sound_mode_use gc\\<^sub>C\n  list_all (\\<lambda>cm. conc.locally_sound_mode_use (cm, snd gc\\<^sub>C))\n   (fst gc\\<^sub>C)", "show \"?thesis gc\\<^sub>C gc\\<^sub>A\""], ["proof (prove)\nusing this:\n  conc.globally_sound_mode_use gc\\<^sub>C\n  list_all (\\<lambda>cm. conc.locally_sound_mode_use (cm, snd gc\\<^sub>C))\n   (fst gc\\<^sub>C)\n\ngoal (1 subgoal):\n 1. conc.sound_mode_use gc\\<^sub>C", "unfolding conc.sound_mode_use_def"], ["proof (prove)\nusing this:\n  conc.globally_sound_mode_use gc\\<^sub>C\n  list_all (\\<lambda>cm. conc.locally_sound_mode_use (cm, snd gc\\<^sub>C))\n   (fst gc\\<^sub>C)\n\ngoal (1 subgoal):\n 1. case gc\\<^sub>C of\n    (cms, mem) \\<Rightarrow>\n      list_all (\\<lambda>cm. conc.locally_sound_mode_use (cm, mem))\n       cms \\<and>\n      conc.globally_sound_mode_use (cms, mem)", "by (simp add: case_prod_unfold)"], ["proof (state)\nthis:\n  conc.sound_mode_use gc\\<^sub>C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma refined_prog_secure:\n  assumes len\\<^sub>A [simp]: \"length cms\\<^sub>C = length cms\"\n  assumes len\\<^sub>C [simp]: \"length cms\\<^sub>A = length cms\"\n  assumes in_\\<R>: \"(\\<And>i mem\\<^sub>C. i < length cms \\<Longrightarrow>  ((cms\\<^sub>A ! i,mem\\<^sub>A_of mem\\<^sub>C),(cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n  assumes in_\\<R>\\<^sub>A: \"(\\<And>i mem\\<^sub>C mem\\<^sub>C'. \\<lbrakk>i < length cms; conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C), (cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C')) \\<in> \\<R>\\<^sub>A_rel (cms ! i))\"\n  assumes sound_mode_use\\<^sub>A: \"(\\<And> mem\\<^sub>A.  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A))\"\n  assumes modes_respect_priv: \"modes_respect_priv (map snd cms\\<^sub>C)\"\n  shows \"conc.prog_sifum_secure_cont cms\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.prog_sifum_secure_cont cms\\<^sub>C", "apply(rule conc.sifum_compositionality_cont)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_all conc.com_sifum_secure cms\\<^sub>C\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(clarsimp simp: list_all_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       n < length cms \\<Longrightarrow>\n       conc.com_sifum_secure (cms\\<^sub>C ! n)\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(clarsimp simp: conc.com_sifum_secure_def conc.low_indistinguishable_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> conc.mm_equiv_abv\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule conc.mm_equiv.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> conc.strong_low_bisim_mm\n                          (?\\<R>13 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n 2. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> ?\\<R>13 n c mds\\<^sub>s mem\\<^sub>1\n                                mem\\<^sub>2\n 3. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule R\\<^sub>C_of_strong_low_bisim_mm)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> abs.strong_low_bisim_mm\n                          (?\\<R>\\<^sub>A16 n c mds\\<^sub>s mem\\<^sub>1\n                            mem\\<^sub>2)\n 2. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> secure_refinement\n                          (?\\<R>\\<^sub>A16 n c mds\\<^sub>s mem\\<^sub>1\n                            mem\\<^sub>2)\n                          (?\\<R>16 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n                          (?P16 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n 3. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> sym (?P16 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n 4. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of\n                                (?\\<R>\\<^sub>A16 n c mds\\<^sub>s mem\\<^sub>1\n                                  mem\\<^sub>2)\n                                (?\\<R>16 n c mds\\<^sub>s mem\\<^sub>1\n                                  mem\\<^sub>2)\n                                (?P16 n c mds\\<^sub>s mem\\<^sub>1\n                                  mem\\<^sub>2)\n 5. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(fastforce intro: bisims)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> secure_refinement (\\<R>\\<^sub>A_rel (cms ! n))\n                          (?\\<R>16 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n                          (?P16 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n 2. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> sym (?P16 n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2)\n 3. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of (\\<R>\\<^sub>A_rel (cms ! n))\n                                (?\\<R>16 n c mds\\<^sub>s mem\\<^sub>1\n                                  mem\\<^sub>2)\n                                (?P16 n c mds\\<^sub>s mem\\<^sub>1\n                                  mem\\<^sub>2)\n 4. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(fastforce intro: secure_refinements)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> sym (P_rel (cms ! n))\n 2. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of (\\<R>\\<^sub>A_rel (cms ! n))\n                                (\\<R>_rel (cms ! n)) (P_rel (cms ! n))\n 3. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(fastforce simp: Ps_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                         \\<in> R\\<^sub>C_of (\\<R>\\<^sub>A_rel (cms ! n))\n                                (\\<R>_rel (cms ! n)) (P_rel (cms ! n))\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(clarsimp simp: R\\<^sub>C_of_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n c mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2.\n       \\<lbrakk>n < length cms; cms\\<^sub>C ! n = (c, mds\\<^sub>s);\n        conc.low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b ba.\n                            (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! n) \\<and>\n                            (\\<exists>aa bb bc.\n                                (\\<langle>aa, bb, bc\\<rangle>\\<^sub>A,\n                                 \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> \\<R>_rel (cms ! n) \\<and>\n                                (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                                 \\<langle>aa, bb, bc\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A_rel (cms ! n) \\<and>\n                                (\\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\\<^sub>C,\n                                 \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>\\<^sub>C)\n                                \\<in> P_rel (cms ! n))\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rename_tac i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b ba.\n                            (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<exists>aa bb bc.\n                                (\\<langle>aa, bb, bc\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                                \\<in> \\<R>_rel (cms ! i) \\<and>\n                                (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                                 \\<langle>aa, bb, bc\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                                (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                                \\<in> P_rel (cms ! i))\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule_tac x=\"fst (cms\\<^sub>A ! i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b ba.\n                            (\\<langle>fst\n (cms\\<^sub>A ! i), b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<exists>a bb bc.\n                                (\\<langle>a, bb, bc\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                                \\<in> \\<R>_rel (cms ! i) \\<and>\n                                (\\<langle>fst\n     (cms\\<^sub>A ! i), b, ba\\<rangle>\\<^sub>A,\n                                 \\<langle>a, bb, bc\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                                (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                                \\<in> P_rel (cms ! i))\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule_tac x=\"snd (cms\\<^sub>A ! i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (\\<langle>fst\n (cms\\<^sub>A ! i), snd (cms\\<^sub>A ! i), b\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<exists>a ba bb.\n                                (\\<langle>a, ba, bb\\<rangle>\\<^sub>A,\n                                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                                \\<in> \\<R>_rel (cms ! i) \\<and>\n                                (\\<langle>fst\n     (cms\\<^sub>A ! i), snd (cms\\<^sub>A ! i), b\\<rangle>\\<^sub>A,\n                                 \\<langle>a, ba, bb\\<rangle>\\<^sub>A)\n                                \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                                (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                                 \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                                \\<in> P_rel (cms ! i))\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule_tac x=\"mem\\<^sub>A_of mem\\<^sub>C\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i) \\<and>\n                         (\\<exists>a b ba.\n                             (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                             \\<in> \\<R>_rel (cms ! i) \\<and>\n                             (\\<langle>fst\n  (cms\\<^sub>A !\n   i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                              \\<langle>a, b, ba\\<rangle>\\<^sub>A)\n                             \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                             (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                              \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                             \\<in> P_rel (cms ! i))\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b ba.\n                            (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<langle>fst\n (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                             \\<langle>a, b, ba\\<rangle>\\<^sub>A)\n                            \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                            (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P_rel (cms ! i)\n 3. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "using in_\\<R>"], ["proof (prove)\nusing this:\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A ! ?i7, mem\\<^sub>A_of ?mem\\<^sub>C7), cms\\<^sub>C ! ?i7,\n   ?mem\\<^sub>C7)\n  \\<in> \\<R>_rel (cms ! ?i7)\n\ngoal (3 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b ba.\n                            (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<langle>fst\n (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                             \\<langle>a, b, ba\\<rangle>\\<^sub>A)\n                            \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                            (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P_rel (cms ! i)\n 3. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b ba.\n                            (\\<langle>a, b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<langle>fst\n (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                             \\<langle>a, b, ba\\<rangle>\\<^sub>A)\n                            \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                            (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P_rel (cms ! i)\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule_tac x=\"fst (cms\\<^sub>A ! i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b ba.\n                            (\\<langle>fst\n (cms\\<^sub>A ! i), b, ba\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<langle>fst\n (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                             \\<langle>fst\n (cms\\<^sub>A ! i), b, ba\\<rangle>\\<^sub>A)\n                            \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                            (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P_rel (cms ! i)\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule_tac x=\"snd (cms\\<^sub>A ! i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (\\<langle>fst\n (cms\\<^sub>A ! i), snd (cms\\<^sub>A ! i), b\\<rangle>\\<^sub>A,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> \\<R>_rel (cms ! i) \\<and>\n                            (\\<langle>fst\n (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                             \\<langle>fst\n (cms\\<^sub>A ! i), snd (cms\\<^sub>A ! i), b\\<rangle>\\<^sub>A)\n                            \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                            (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                             \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                            \\<in> P_rel (cms ! i)\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule_tac x=\"mem\\<^sub>A_of mem\\<^sub>C'\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i) \\<and>\n                         (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A)\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                         (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P_rel (cms ! i)\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A)\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                         (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P_rel (cms ! i)\n 3. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "using in_\\<R>"], ["proof (prove)\nusing this:\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A ! ?i7, mem\\<^sub>A_of ?mem\\<^sub>C7), cms\\<^sub>C ! ?i7,\n   ?mem\\<^sub>C7)\n  \\<in> \\<R>_rel (cms ! ?i7)\n\ngoal (3 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A)\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                         (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P_rel (cms ! i)\n 3. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i c\\<^sub>C mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms; cms\\<^sub>C ! i = (c\\<^sub>C, mds\\<^sub>C);\n        conc.low_mds_eq mds\\<^sub>C mem\\<^sub>C mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A ! i), mem\\<^sub>A_of mem\\<^sub>C'\\<rangle>\\<^sub>A)\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i) \\<and>\n                         (\\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C\\<rangle>\\<^sub>C,\n                          \\<langle>c\\<^sub>C, mds\\<^sub>C, mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> P_rel (cms ! i)\n 2. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(fastforce simp: in_\\<R>\\<^sub>A Ps_refl_on_low_mds_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       True \\<longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem. True \\<Longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem)", "apply(rename_tac mem\\<^sub>C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow> conc.sound_mode_use (cms\\<^sub>C, mem\\<^sub>C)", "apply(rule_tac gc\\<^sub>A=\"(cms\\<^sub>A,mem\\<^sub>A_of mem\\<^sub>C)\" in sound_mode_use_preservation)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       length (fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)) = length cms\n 2. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       length (fst (cms\\<^sub>C, mem\\<^sub>C)) = length cms\n 3. \\<And>mem\\<^sub>C i.\n       \\<lbrakk>True; i < length cms\\<rbrakk>\n       \\<Longrightarrow> ((fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) !\n                           i,\n                           snd (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)),\n                          fst (cms\\<^sub>C, mem\\<^sub>C) ! i,\n                          snd (cms\\<^sub>C, mem\\<^sub>C))\n                         \\<in> \\<R>_rel (cms ! i)\n 4. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n 5. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       length (fst (cms\\<^sub>C, mem\\<^sub>C)) = length cms\n 2. \\<And>mem\\<^sub>C i.\n       \\<lbrakk>True; i < length cms\\<rbrakk>\n       \\<Longrightarrow> ((fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) !\n                           i,\n                           snd (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)),\n                          fst (cms\\<^sub>C, mem\\<^sub>C) ! i,\n                          snd (cms\\<^sub>C, mem\\<^sub>C))\n                         \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n 4. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mem\\<^sub>C i.\n       \\<lbrakk>True; i < length cms\\<rbrakk>\n       \\<Longrightarrow> ((fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) !\n                           i,\n                           snd (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)),\n                          fst (cms\\<^sub>C, mem\\<^sub>C) ! i,\n                          snd (cms\\<^sub>C, mem\\<^sub>C))\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n 3. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "using in_\\<R>"], ["proof (prove)\nusing this:\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A ! ?i7, mem\\<^sub>A_of ?mem\\<^sub>C7), cms\\<^sub>C ! ?i7,\n   ?mem\\<^sub>C7)\n  \\<in> \\<R>_rel (cms ! ?i7)\n\ngoal (3 subgoals):\n 1. \\<And>mem\\<^sub>C i.\n       \\<lbrakk>True; i < length cms\\<rbrakk>\n       \\<Longrightarrow> ((fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) !\n                           i,\n                           snd (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)),\n                          fst (cms\\<^sub>C, mem\\<^sub>C) ! i,\n                          snd (cms\\<^sub>C, mem\\<^sub>C))\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n 3. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n 2. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "apply(rule sound_mode_use\\<^sub>A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem\\<^sub>C.\n       True \\<Longrightarrow>\n       modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd cms\\<^sub>C)", "by(rule modes_respect_priv)"], ["", "lemma refined_prog_secure':\n  assumes len\\<^sub>A [simp]: \"length cms\\<^sub>C = length cms\"\n  assumes len\\<^sub>C [simp]: \"length cms\\<^sub>A = length cms\"\n  assumes in_\\<R>: \"(\\<And>i mem\\<^sub>C. i < length cms \\<Longrightarrow> ((cms\\<^sub>A ! i,mem\\<^sub>A_of mem\\<^sub>C),(cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n  assumes in_\\<R>\\<^sub>A: \"(\\<And>i mem\\<^sub>A mem\\<^sub>A'. \\<lbrakk>i < length cms;  abs.low_mds_eq (snd (cms\\<^sub>A ! i)) mem\\<^sub>A mem\\<^sub>A'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A), (cms\\<^sub>A ! i, mem\\<^sub>A')) \\<in> \\<R>\\<^sub>A_rel (cms ! i))\"\n  assumes sound_mode_use\\<^sub>A: \"(\\<And> mem\\<^sub>A.  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A))\"\n  assumes modes_respect_priv: \"modes_respect_priv (map snd cms\\<^sub>C)\"\n  shows \"conc.prog_sifum_secure_cont cms\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conc.prog_sifum_secure_cont cms\\<^sub>C", "apply(rule refined_prog_secure)"], ["proof (prove)\ngoal (6 subgoals):\n 1. length cms\\<^sub>C = length cms\n 2. length ?cms\\<^sub>A = length cms\n 3. \\<And>i mem\\<^sub>C.\n       i < length cms \\<Longrightarrow>\n       ((?cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C), cms\\<^sub>C ! i,\n        mem\\<^sub>C)\n       \\<in> \\<R>_rel (cms ! i)\n 4. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((?cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C),\n                          ?cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C')\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i)\n 5. \\<And>mem\\<^sub>A. abs.sound_mode_use (?cms\\<^sub>A, mem\\<^sub>A)\n 6. modes_respect_priv (map snd cms\\<^sub>C)", "apply(rule len\\<^sub>A)"], ["proof (prove)\ngoal (5 subgoals):\n 1. length ?cms\\<^sub>A = length cms\n 2. \\<And>i mem\\<^sub>C.\n       i < length cms \\<Longrightarrow>\n       ((?cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C), cms\\<^sub>C ! i,\n        mem\\<^sub>C)\n       \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((?cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C),\n                          ?cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C')\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i)\n 4. \\<And>mem\\<^sub>A. abs.sound_mode_use (?cms\\<^sub>A, mem\\<^sub>A)\n 5. modes_respect_priv (map snd cms\\<^sub>C)", "apply(rule len\\<^sub>C)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C.\n       i < length cms \\<Longrightarrow>\n       ((cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C), cms\\<^sub>C ! i,\n        mem\\<^sub>C)\n       \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C),\n                          cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C')\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i)\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "apply(blast intro: in_\\<R>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C),\n                          cms\\<^sub>A ! i, mem\\<^sub>A_of mem\\<^sub>C')\n                         \\<in> \\<R>\\<^sub>A_rel (cms ! i)\n 2. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 3. modes_respect_priv (map snd cms\\<^sub>C)", "apply(rule in_\\<R>\\<^sub>A)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> i < length cms\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> abs.low_mds_eq (snd (cms\\<^sub>A ! i))\n                          (mem\\<^sub>A_of mem\\<^sub>C)\n                          (mem\\<^sub>A_of mem\\<^sub>C')\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> abs.low_mds_eq (snd (cms\\<^sub>A ! i))\n                          (mem\\<^sub>A_of mem\\<^sub>C)\n                          (mem\\<^sub>A_of mem\\<^sub>C')\n 2. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 3. modes_respect_priv (map snd cms\\<^sub>C)", "apply(subgoal_tac \"snd (cms\\<^sub>A ! i) = mds\\<^sub>A_of (snd (cms\\<^sub>C ! i))\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C mem\\<^sub>C';\n        snd (cms\\<^sub>A ! i) =\n        mds\\<^sub>A_of (snd (cms\\<^sub>C ! i))\\<rbrakk>\n       \\<Longrightarrow> abs.low_mds_eq (snd (cms\\<^sub>A ! i))\n                          (mem\\<^sub>A_of mem\\<^sub>C)\n                          (mem\\<^sub>A_of mem\\<^sub>C')\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> snd (cms\\<^sub>A ! i) =\n                         mds\\<^sub>A_of (snd (cms\\<^sub>C ! i))\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "using low_mds_eq_from_conc_to_abs"], ["proof (prove)\nusing this:\n  conc.low_mds_eq ?mds ?mem ?mem' \\<Longrightarrow>\n  abs.low_mds_eq (mds\\<^sub>A_of ?mds) (mem\\<^sub>A_of ?mem)\n   (mem\\<^sub>A_of ?mem')\n\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C mem\\<^sub>C';\n        snd (cms\\<^sub>A ! i) =\n        mds\\<^sub>A_of (snd (cms\\<^sub>C ! i))\\<rbrakk>\n       \\<Longrightarrow> abs.low_mds_eq (snd (cms\\<^sub>A ! i))\n                          (mem\\<^sub>A_of mem\\<^sub>C)\n                          (mem\\<^sub>A_of mem\\<^sub>C')\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> snd (cms\\<^sub>A ! i) =\n                         mds\\<^sub>A_of (snd (cms\\<^sub>C ! i))\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> snd (cms\\<^sub>A ! i) =\n                         mds\\<^sub>A_of (snd (cms\\<^sub>C ! i))\n 2. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 3. modes_respect_priv (map snd cms\\<^sub>C)", "apply(rule_tac \\<R>1=\"\\<R>_rel (cms ! i)\" and c\\<^sub>A1=\"fst (cms\\<^sub>A ! i)\" and c\\<^sub>C1=\"fst (cms\\<^sub>C ! i)\" in preserves_modes_memD[THEN conjunct2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A !\n           i), ?mem\\<^sub>A36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>C !\n  i), snd (cms\\<^sub>C !\n           i), ?mem\\<^sub>C36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "using secure_refinements"], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A !\n           i), ?mem\\<^sub>A36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>C !\n  i), snd (cms\\<^sub>C !\n           i), ?mem\\<^sub>C36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  ?i < length cms \\<Longrightarrow>\n  closed_others (\\<R>_rel (cms ! ?i)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! ?i)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! ?i)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! ?i)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! ?i) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! ?i) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! ?i) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! ?i))))))\n\ngoal (4 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> preserves_modes_mem (\\<R>_rel (cms ! i))\n 2. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A !\n           i), ?mem\\<^sub>A36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>C !\n  i), snd (cms\\<^sub>C !\n           i), ?mem\\<^sub>C36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 3. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 4. modes_respect_priv (map snd cms\\<^sub>C)", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>fst (cms\\<^sub>A !\n  i), snd (cms\\<^sub>A !\n           i), ?mem\\<^sub>A36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>A,\n                          \\<langle>fst (cms\\<^sub>C !\n  i), snd (cms\\<^sub>C !\n           i), ?mem\\<^sub>C36 i mem\\<^sub>C mem\\<^sub>C'\\<rangle>\\<^sub>C)\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 3. modes_respect_priv (map snd cms\\<^sub>C)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i,\n                           ?mem\\<^sub>A36 i mem\\<^sub>C mem\\<^sub>C'),\n                          cms\\<^sub>C ! i,\n                          ?mem\\<^sub>C36 i mem\\<^sub>C mem\\<^sub>C')\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 3. modes_respect_priv (map snd cms\\<^sub>C)", "using in_\\<R>"], ["proof (prove)\nusing this:\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A ! ?i7, mem\\<^sub>A_of ?mem\\<^sub>C7), cms\\<^sub>C ! ?i7,\n   ?mem\\<^sub>C7)\n  \\<in> \\<R>_rel (cms ! ?i7)\n\ngoal (3 subgoals):\n 1. \\<And>i mem\\<^sub>C mem\\<^sub>C'.\n       \\<lbrakk>i < length cms;\n        conc.low_mds_eq (snd (cms\\<^sub>C ! i)) mem\\<^sub>C\n         mem\\<^sub>C'\\<rbrakk>\n       \\<Longrightarrow> ((cms\\<^sub>A ! i,\n                           ?mem\\<^sub>A36 i mem\\<^sub>C mem\\<^sub>C'),\n                          cms\\<^sub>C ! i,\n                          ?mem\\<^sub>C36 i mem\\<^sub>C mem\\<^sub>C')\n                         \\<in> \\<R>_rel (cms ! i)\n 2. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 3. modes_respect_priv (map snd cms\\<^sub>C)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A)\n 2. modes_respect_priv (map snd cms\\<^sub>C)", "apply(blast intro: sound_mode_use\\<^sub>A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. modes_respect_priv (map snd cms\\<^sub>C)", "by(rule modes_respect_priv)"], ["", "end"], ["", "context sifum_security begin"], ["", "definition\n  reachable_mems :: \"('Com \\<times> (Mode \\<Rightarrow> 'Var set)) list \\<Rightarrow> ('Var,'Val) Mem \\<Rightarrow> ('Var,'Val) Mem set\"\nwhere\n  \"reachable_mems cms mem \\<equiv> {mem'. \\<exists>sched cms'. meval_sched sched (cms,mem) (cms',mem')}\""], ["", "lemma reachable_mems_refl:\n  \"mem \\<in> reachable_mems cms mem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem \\<in> reachable_mems cms mem", "apply(clarsimp simp: reachable_mems_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sched cms'.\n       (cms, mem) \\<rightarrow>\\<^bsub>sched\\<^esub> (cms', mem)", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>cms'. (cms, mem) \\<rightarrow>\\<^bsub>[]\\<^esub> (cms', mem)", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context sifum_refinement_sys begin"], ["", "lemma reachable_mems_refinement:\n  assumes sys_nonempty: \"length cms > 0\"\n  assumes len\\<^sub>A [simp]: \"length cms\\<^sub>C = length cms\"\n  assumes len\\<^sub>C [simp]: \"length cms\\<^sub>A = length cms\"\n  assumes in_\\<R>: \"(\\<And>i mem\\<^sub>C. i < length cms \\<Longrightarrow> ((cms\\<^sub>A ! i,mem\\<^sub>A_of mem\\<^sub>C),(cms\\<^sub>C ! i, mem\\<^sub>C)) \\<in> \\<R>_rel (cms ! i))\"\n  assumes sound_mode_use\\<^sub>A: \"(\\<And> mem\\<^sub>A. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A))\"\n  assumes modes_respect_priv: \"modes_respect_priv (map snd cms\\<^sub>C)\"\n  assumes reachable\\<^sub>C: \"mem\\<^sub>C' \\<in> conc.reachable_mems cms\\<^sub>C mem\\<^sub>C\"\n  shows \"mem\\<^sub>A_of mem\\<^sub>C' \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "from reachable\\<^sub>C"], ["proof (chain)\npicking this:\n  mem\\<^sub>C' \\<in> conc.reachable_mems cms\\<^sub>C mem\\<^sub>C", "obtain sched\\<^sub>C cms\\<^sub>C' where\n    meval_sched\\<^sub>C: \"conc.meval_sched sched\\<^sub>C (cms\\<^sub>C, mem\\<^sub>C) (cms\\<^sub>C', mem\\<^sub>C')\""], ["proof (prove)\nusing this:\n  mem\\<^sub>C' \\<in> conc.reachable_mems cms\\<^sub>C mem\\<^sub>C\n\ngoal (1 subgoal):\n 1. (\\<And>sched\\<^sub>C cms\\<^sub>C'.\n        conc.meval_sched_abv (cms\\<^sub>C, mem\\<^sub>C) sched\\<^sub>C\n         (cms\\<^sub>C', mem\\<^sub>C') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: conc.reachable_mems_def)"], ["proof (state)\nthis:\n  conc.meval_sched_abv (cms\\<^sub>C, mem\\<^sub>C) sched\\<^sub>C\n   (cms\\<^sub>C', mem\\<^sub>C')\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "let ?mem\\<^sub>A = \"mem\\<^sub>A_of mem\\<^sub>C\""], ["proof (state)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "have sound_mode_use\\<^sub>A: \"abs.sound_mode_use (cms\\<^sub>A, ?mem\\<^sub>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)", "by(rule sound_mode_use\\<^sub>A)"], ["proof (state)\nthis:\n  abs.sound_mode_use (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "from traces_refinement[where gc\\<^sub>A=\"(cms\\<^sub>A,?mem\\<^sub>A)\", OF meval_sched\\<^sub>C, OF _ _ _ sound_mode_use\\<^sub>A]\n       in_\\<R>[of _ mem\\<^sub>C]\n       modes_respect_priv"], ["proof (chain)\npicking this:\n  \\<lbrakk>length (fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)) =\n           length cms;\n   length (fst (cms\\<^sub>C, mem\\<^sub>C)) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) ! i,\n        snd (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)),\n       fst (cms\\<^sub>C, mem\\<^sub>C) ! i, snd (cms\\<^sub>C, mem\\<^sub>C))\n      \\<in> \\<R>_rel (cms ! i);\n   modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv\n                        (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n                        sched\\<^sub>A gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst (cms\\<^sub>C', mem\\<^sub>C') ! i,\n                            snd (cms\\<^sub>C', mem\\<^sub>C'))\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A ! ?i7, mem\\<^sub>A_of mem\\<^sub>C), cms\\<^sub>C ! ?i7,\n   mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  modes_respect_priv (map snd cms\\<^sub>C)", "obtain sched\\<^sub>A cms\\<^sub>A' mem\\<^sub>A' where\n    meval_sched\\<^sub>A: \"abs.meval_sched sched\\<^sub>A (cms\\<^sub>A, ?mem\\<^sub>A) (cms\\<^sub>A', mem\\<^sub>A')\" and\n    in_\\<R>': \"(\\<forall>i<length cms.\n               ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C') \\<in> \\<R>_rel (cms ! i))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length (fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)) =\n           length cms;\n   length (fst (cms\\<^sub>C, mem\\<^sub>C)) = length cms;\n   \\<And>i.\n      i < length cms \\<Longrightarrow>\n      ((fst (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) ! i,\n        snd (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)),\n       fst (cms\\<^sub>C, mem\\<^sub>C) ! i, snd (cms\\<^sub>C, mem\\<^sub>C))\n      \\<in> \\<R>_rel (cms ! i);\n   modes_respect_priv (map snd (fst (cms\\<^sub>C, mem\\<^sub>C)))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sched\\<^sub>A gc\\<^sub>A'.\n                       abs.meval_sched_abv\n                        (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n                        sched\\<^sub>A gc\\<^sub>A' \\<and>\n                       (\\<forall>i<length cms.\n                           ((fst gc\\<^sub>A' ! i, snd gc\\<^sub>A'),\n                            fst (cms\\<^sub>C', mem\\<^sub>C') ! i,\n                            snd (cms\\<^sub>C', mem\\<^sub>C'))\n                           \\<in> \\<R>_rel (cms ! i)) \\<and>\n                       abs.sound_mode_use gc\\<^sub>A'\n  ?i7 < length cms \\<Longrightarrow>\n  ((cms\\<^sub>A ! ?i7, mem\\<^sub>A_of mem\\<^sub>C), cms\\<^sub>C ! ?i7,\n   mem\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! ?i7)\n  modes_respect_priv (map snd cms\\<^sub>C)\n\ngoal (1 subgoal):\n 1. (\\<And>sched\\<^sub>A cms\\<^sub>A' mem\\<^sub>A'.\n        \\<lbrakk>abs.meval_sched_abv\n                  (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C) sched\\<^sub>A\n                  (cms\\<^sub>A', mem\\<^sub>A');\n         \\<forall>i<length cms.\n            ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i,\n             mem\\<^sub>C')\n            \\<in> \\<R>_rel (cms ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  abs.meval_sched_abv (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n   sched\\<^sub>A (cms\\<^sub>A', mem\\<^sub>A')\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C')\n     \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "hence reachable\\<^sub>A: \"mem\\<^sub>A' \\<in> abs.reachable_mems cms\\<^sub>A ?mem\\<^sub>A\""], ["proof (prove)\nusing this:\n  abs.meval_sched_abv (cms\\<^sub>A, mem\\<^sub>A_of mem\\<^sub>C)\n   sched\\<^sub>A (cms\\<^sub>A', mem\\<^sub>A')\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C')\n     \\<in> \\<R>_rel (cms ! i)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "by(fastforce simp: abs.reachable_mems_def)"], ["proof (state)\nthis:\n  mem\\<^sub>A'\n  \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "from sys_nonempty"], ["proof (chain)\npicking this:\n  0 < length cms", "obtain i where ilen: \"i < length cms\""], ["proof (prove)\nusing this:\n  0 < length cms\n\ngoal (1 subgoal):\n 1. (\\<And>i. i < length cms \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < length cms\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "let ?\\<R>i = \"\\<R>_rel (cms ! i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "from ilen secure_refinements"], ["proof (chain)\npicking this:\n  i < length cms\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))", "have \"preserves_modes_mem ?\\<R>i\""], ["proof (prove)\nusing this:\n  i < length cms\n  ?i < length cms \\<Longrightarrow>\n  secure_refinement (\\<R>\\<^sub>A_rel (cms ! ?i)) (\\<R>_rel (cms ! ?i))\n   (P_rel (cms ! ?i))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! i))", "unfolding secure_refinement_def"], ["proof (prove)\nusing this:\n  i < length cms\n  ?i < length cms \\<Longrightarrow>\n  closed_others (\\<R>_rel (cms ! ?i)) \\<and>\n  preserves_modes_mem (\\<R>_rel (cms ! ?i)) \\<and>\n  new_vars_private (\\<R>_rel (cms ! ?i)) \\<and>\n  conc.closed_glob_consistent (P_rel (cms ! ?i)) \\<and>\n  (\\<forall>c\\<^sub>1\\<^sub>A mds\\<^sub>A mem\\<^sub>1\\<^sub>A\n      c\\<^sub>1\\<^sub>C mds\\<^sub>C mem\\<^sub>1\\<^sub>C.\n      (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n       \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C)\n      \\<in> \\<R>_rel (cms ! ?i) \\<longrightarrow>\n      (\\<forall>c\\<^sub>1\\<^sub>C' mds\\<^sub>C' mem\\<^sub>1\\<^sub>C'.\n          \\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n          \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C \\<longrightarrow>\n          (\\<exists>n c\\<^sub>1\\<^sub>A' mds\\<^sub>A' mem\\<^sub>1\\<^sub>A'.\n              abs.neval\n               \\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A\n               n \\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A \\<and>\n              (\\<langle>c\\<^sub>1\\<^sub>A', mds\\<^sub>A', mem\\<^sub>1\\<^sub>A'\\<rangle>\\<^sub>A,\n               \\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C)\n              \\<in> \\<R>_rel (cms ! ?i) \\<and>\n              (\\<forall>c\\<^sub>2\\<^sub>A mem\\<^sub>2\\<^sub>A\n                  c\\<^sub>2\\<^sub>C mem\\<^sub>2\\<^sub>C c\\<^sub>2\\<^sub>A'\n                  mem\\<^sub>2\\<^sub>A'.\n                  (\\<langle>c\\<^sub>1\\<^sub>A, mds\\<^sub>A, mem\\<^sub>1\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A)\n                  \\<in> \\<R>\\<^sub>A_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                  (\\<langle>c\\<^sub>1\\<^sub>C, mds\\<^sub>C, mem\\<^sub>1\\<^sub>C\\<rangle>\\<^sub>C,\n                   \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C)\n                  \\<in> P_rel (cms ! ?i) \\<and>\n                  abs.neval\n                   \\<langle>c\\<^sub>2\\<^sub>A, mds\\<^sub>A, mem\\<^sub>2\\<^sub>A\\<rangle>\\<^sub>A\n                   n \\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A \\<longrightarrow>\n                  (\\<exists>c\\<^sub>2\\<^sub>C' mem\\<^sub>2\\<^sub>C'.\n                      \\<langle>c\\<^sub>2\\<^sub>C, mds\\<^sub>C, mem\\<^sub>2\\<^sub>C\\<rangle>\\<^sub>C \\<leadsto>\\<^sub>C\n                      \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C \\<and>\n                      (\\<langle>c\\<^sub>2\\<^sub>A', mds\\<^sub>A', mem\\<^sub>2\\<^sub>A'\\<rangle>\\<^sub>A,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> \\<R>_rel (cms ! ?i) \\<and>\n                      (\\<langle>c\\<^sub>1\\<^sub>C', mds\\<^sub>C', mem\\<^sub>1\\<^sub>C'\\<rangle>\\<^sub>C,\n                       \\<langle>c\\<^sub>2\\<^sub>C', mds\\<^sub>C', mem\\<^sub>2\\<^sub>C'\\<rangle>\\<^sub>C)\n                      \\<in> P_rel (cms ! ?i))))))\n\ngoal (1 subgoal):\n 1. preserves_modes_mem (\\<R>_rel (cms ! i))", "by blast"], ["proof (state)\nthis:\n  preserves_modes_mem (\\<R>_rel (cms ! i))\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "from ilen in_\\<R>' preserves_modes_memD[OF this]"], ["proof (chain)\npicking this:\n  i < length cms\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C')\n     \\<in> \\<R>_rel (cms ! i)\n  (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i) \\<Longrightarrow>\n  ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n  ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C", "have\n    mem\\<^sub>A'_def: \"mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\""], ["proof (prove)\nusing this:\n  i < length cms\n  \\<forall>i<length cms.\n     ((cms\\<^sub>A' ! i, mem\\<^sub>A'), cms\\<^sub>C' ! i, mem\\<^sub>C')\n     \\<in> \\<R>_rel (cms ! i)\n  (\\<langle>?c\\<^sub>A, ?mds\\<^sub>A, ?mem\\<^sub>A\\<rangle>\\<^sub>A,\n   \\<langle>?c\\<^sub>C, ?mds\\<^sub>C, ?mem\\<^sub>C\\<rangle>\\<^sub>C)\n  \\<in> \\<R>_rel (cms ! i) \\<Longrightarrow>\n  ?mem\\<^sub>A = mem\\<^sub>A_of ?mem\\<^sub>C \\<and>\n  ?mds\\<^sub>A = mds\\<^sub>A_of ?mds\\<^sub>C\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'", "by(metis surjective_pairing)"], ["proof (state)\nthis:\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "with reachable\\<^sub>A"], ["proof (chain)\npicking this:\n  mem\\<^sub>A'\n  \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'", "show ?thesis"], ["proof (prove)\nusing this:\n  mem\\<^sub>A'\n  \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)\n  mem\\<^sub>A' = mem\\<^sub>A_of mem\\<^sub>C'\n\ngoal (1 subgoal):\n 1. mem\\<^sub>A_of mem\\<^sub>C'\n    \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)", "by simp"], ["proof (state)\nthis:\n  mem\\<^sub>A_of mem\\<^sub>C'\n  \\<in> abs.reachable_mems cms\\<^sub>A (mem\\<^sub>A_of mem\\<^sub>C)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}