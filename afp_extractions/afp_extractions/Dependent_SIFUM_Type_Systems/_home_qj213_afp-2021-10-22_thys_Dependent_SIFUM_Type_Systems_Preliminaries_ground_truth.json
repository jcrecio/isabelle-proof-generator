{"file_name": "/home/qj213/afp-2021-10-22/thys/Dependent_SIFUM_Type_Systems/Preliminaries.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dependent_SIFUM_Type_Systems", "problem_names": ["lemma \\<C>_vars_subset_\\<C>:\n  \"\\<C>_vars x \\<subseteq> \\<C>\"", "lemma dma_\\<C>:\n  \"\\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow> dma mem\\<^sub>1 = dma mem\\<^sub>2\"", "lemma my_trancl_induct [consumes 1, case_names base step]:\n  \"\\<lbrakk>(a, b) \\<in> r\\<^sup>+; \n    P a ; \n   \\<And>x y. \\<lbrakk>(x, y) \\<in> r; P x\\<rbrakk> \\<Longrightarrow> P y\\<rbrakk> \\<Longrightarrow> P b\"", "lemma my_trancl_step_induct [consumes 1, case_names base step]:\n  \"\\<lbrakk>(a, b) \\<in> r\\<^sup>+; \n   \\<And>x y. (x, y) \\<in> r \\<Longrightarrow> P x y;\n   \\<And>x y z. P x y \\<Longrightarrow> (y, z) \\<in> r \\<Longrightarrow> P x z\\<rbrakk> \\<Longrightarrow> P a b\"", "lemma my_trancl_big_step_induct [consumes 1, case_names base step]:\n  \"\\<lbrakk>(a, b) \\<in> r\\<^sup>+; \n   \\<And>x y. (x, y) \\<in> r \\<Longrightarrow> P x y;\n   \\<And>x y z. (x, y) \\<in> r\\<^sup>+ \\<Longrightarrow> P x y \\<Longrightarrow> (y, z) \\<in> r \\<Longrightarrow> P y z \\<Longrightarrow> P x z\\<rbrakk> \\<Longrightarrow> P a b\"", "lemmas my_trancl_step_induct3 = \n  my_trancl_step_induct[of \"((ax,ay), az)\" \"((bx,by), bz)\", split_format (complete),\n                 consumes 1, case_names step]", "lemmas my_trancl_big_step_induct3 = \n  my_trancl_big_step_induct[of \"((ax,ay), az)\" \"((bx,by), bz)\", split_format (complete),\n                 consumes 1, case_names base step]"], "translations": [["", "lemma \\<C>_vars_subset_\\<C>:\n  \"\\<C>_vars x \\<subseteq> \\<C>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C>_vars x \\<subseteq> \\<C>", "by(force simp: \\<C>_def)"], ["", "lemma dma_\\<C>:\n  \"\\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow> dma mem\\<^sub>1 = dma mem\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow>\n    dma mem\\<^sub>1 = dma mem\\<^sub>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow>\n       dma mem\\<^sub>1 x = dma mem\\<^sub>2 x", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow>\n       dma mem\\<^sub>1 x = dma mem\\<^sub>2 x", "assume \"\\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow>\n       dma mem\\<^sub>1 x = dma mem\\<^sub>2 x", "hence \"\\<forall>x\\<in>\\<C>_vars y. mem\\<^sub>1 x = mem\\<^sub>2 x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<C>_vars y. mem\\<^sub>1 x = mem\\<^sub>2 x", "using \\<C>_vars_subset_\\<C>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x\n  \\<C>_vars ?x \\<subseteq> \\<C>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<C>_vars y. mem\\<^sub>1 x = mem\\<^sub>2 x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<C>_vars y. mem\\<^sub>1 x = mem\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x\\<in>\\<C>. mem\\<^sub>1 x = mem\\<^sub>2 x \\<Longrightarrow>\n       dma mem\\<^sub>1 x = dma mem\\<^sub>2 x", "thus \"dma mem\\<^sub>1 y = dma mem\\<^sub>2 y\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<C>_vars y. mem\\<^sub>1 x = mem\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. dma mem\\<^sub>1 y = dma mem\\<^sub>2 y", "by(rule dma_\\<C>_vars)"], ["proof (state)\nthis:\n  dma mem\\<^sub>1 y = dma mem\\<^sub>2 y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* induction tools, moved up as far as possible *)"], ["", "lemma my_trancl_induct [consumes 1, case_names base step]:\n  \"\\<lbrakk>(a, b) \\<in> r\\<^sup>+; \n    P a ; \n   \\<And>x y. \\<lbrakk>(x, y) \\<in> r; P x\\<rbrakk> \\<Longrightarrow> P y\\<rbrakk> \\<Longrightarrow> P b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> r\\<^sup>+; P a;\n     \\<And>x y.\n        \\<lbrakk>(x, y) \\<in> r; P x\\<rbrakk> \\<Longrightarrow> P y\\<rbrakk>\n    \\<Longrightarrow> P b", "by (induct rule: trancl.induct, blast+)"], ["", "lemma my_trancl_step_induct [consumes 1, case_names base step]:\n  \"\\<lbrakk>(a, b) \\<in> r\\<^sup>+; \n   \\<And>x y. (x, y) \\<in> r \\<Longrightarrow> P x y;\n   \\<And>x y z. P x y \\<Longrightarrow> (y, z) \\<in> r \\<Longrightarrow> P x z\\<rbrakk> \\<Longrightarrow> P a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> r\\<^sup>+;\n     \\<And>x y. (x, y) \\<in> r \\<Longrightarrow> P x y;\n     \\<And>x y z.\n        \\<lbrakk>P x y; (y, z) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> P x z\\<rbrakk>\n    \\<Longrightarrow> P a b", "by (induct rule: trancl_induct, blast+)"], ["", "lemma my_trancl_big_step_induct [consumes 1, case_names base step]:\n  \"\\<lbrakk>(a, b) \\<in> r\\<^sup>+; \n   \\<And>x y. (x, y) \\<in> r \\<Longrightarrow> P x y;\n   \\<And>x y z. (x, y) \\<in> r\\<^sup>+ \\<Longrightarrow> P x y \\<Longrightarrow> (y, z) \\<in> r \\<Longrightarrow> P y z \\<Longrightarrow> P x z\\<rbrakk> \\<Longrightarrow> P a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> r\\<^sup>+;\n     \\<And>x y. (x, y) \\<in> r \\<Longrightarrow> P x y;\n     \\<And>x y z.\n        \\<lbrakk>(x, y) \\<in> r\\<^sup>+; P x y; (y, z) \\<in> r;\n         P y z\\<rbrakk>\n        \\<Longrightarrow> P x z\\<rbrakk>\n    \\<Longrightarrow> P a b", "by (induct rule: trancl.induct, blast+)"], ["", "lemmas my_trancl_step_induct3 = \n  my_trancl_step_induct[of \"((ax,ay), az)\" \"((bx,by), bz)\", split_format (complete),\n                 consumes 1, case_names step]"], ["", "lemmas my_trancl_big_step_induct3 = \n  my_trancl_big_step_induct[of \"((ax,ay), az)\" \"((bx,by), bz)\", split_format (complete),\n                 consumes 1, case_names base step]"], ["", "end"]]}