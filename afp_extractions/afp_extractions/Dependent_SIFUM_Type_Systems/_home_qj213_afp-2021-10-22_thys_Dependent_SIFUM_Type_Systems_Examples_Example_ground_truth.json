{"file_name": "/home/qj213/afp-2021-10-22/thys/Dependent_SIFUM_Type_Systems/Examples/Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dependent_SIFUM_Type_Systems", "problem_names": ["lemma [simp]:\n  \"control_var \\<in> \\<C>\"", "lemma low_mds_eq_control_var_eq:\n  \"low_mds_eq mds mem mem' \\<Longrightarrow> mem control_var = mem' control_var\"", "lemma inv_low_mds_eq:\n  \"\\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem'; inv \\<langle>c,mds,mem\\<rangle>\\<rbrakk>  \\<Longrightarrow>\n   inv \\<langle>c',mds',mem'\\<rangle>\"", "lemma rel_inv_sym:\n  \"low_mds_eq mds mem mem' \\<Longrightarrow> (\\<langle>c, mds, mem\\<rangle>, \\<langle>c, mds, mem'\\<rangle>) \\<in> rel_inv \\<Longrightarrow>\n    (\\<langle>c, mds, mem'\\<rangle>, \\<langle>c, mds, mem\\<rangle>) \\<in> rel_inv\"", "lemma R_sym':\n  \"(\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>) \\<in> R \\<Longrightarrow>\n   (\\<langle>c', mds', mem'\\<rangle>, \\<langle>c, mds, mem\\<rangle>) \\<in> R\"", "lemma R_sym:\n  \"sym R\"", "lemma inv_closed_glob_consistent:\n  \"inv \\<langle>c', mds', mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x. case A x of None \\<Rightarrow> True | Some (v, v') \\<Rightarrow> mem x \\<noteq> v \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n       \\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq> dma mem x \\<longrightarrow> \\<not> var_asm_not_written mds' x  \\<Longrightarrow>\n       inv \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\"", "lemma updates_to_control_var:\n  \"\\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq> dma mem x \\<longrightarrow> \\<not> var_asm_not_written mds' x  \\<Longrightarrow>\n    buffer \\<in> mds' AsmNoWrite \\<Longrightarrow>\n    case A control_var of Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0) | _ \\<Rightarrow> True\"", "lemma blah:\n  \"\\<forall>x a b. A x = Some (a, b) \\<longrightarrow> (mem x = a \\<longrightarrow> mem' x \\<noteq> b) \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n    mem x = mem' x \\<Longrightarrow>\n    x \\<in> mds' AsmNoReadOrWrite \\<or> x \\<in> mds' AsmNoWrite \\<Longrightarrow>  mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x\"", "lemma rel_inv_closed_glob_consistent:\n  \"inv \\<langle>c', mds', mem\\<rangle> \\<Longrightarrow> (\\<langle>c', mds', mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>) \\<in> rel_inv \\<Longrightarrow>\n       \\<forall>x a b.\n          A x = Some (a, b) \\<longrightarrow>\n          (mem x = a \\<longrightarrow> mem' x \\<noteq> b) \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n       \\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq> dma mem x \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n       \\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and> (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow> x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x \\<Longrightarrow>\n       (\\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>, \\<langle>c', mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>) \\<in> rel_inv\"", "lemma R_closed_glob_consistent:\n  \"closed_glob_consistent R\"", "lemma R_low_mds_eq:\n  \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>) \\<in> R \\<Longrightarrow>\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\"", "lemma decl_eval\\<^sub>w':\n  assumes mem_unchanged: \"mem' = mem\"\n  assumes upd: \"mds' = update_modes upd mds\"\n  shows \"(\\<langle>Skip@[upd], mds, mem\\<rangle>, \\<langle>Stop, mds', mem'\\<rangle>) \\<in> eval\\<^sub>w\"", "lemmas decl_eval\\<^sub>w = decl[OF unannotated, OF skip, where E=\"[]\", simplified, where E1=\"[]\", simplified]", "lemmas seq_stop_eval\\<^sub>w = unannotated[OF seq_stop, where E=\"[]\", simplified]", "lemmas assign_eval\\<^sub>w = unannotated[OF assign, where E=\"[]\", simplified]", "lemmas if_eval\\<^sub>w = unannotated[OF cond, where E=\"[]\", simplified]", "lemmas if_false_eval\\<^sub>w = unannotated[OF if_false, where E=\"[]\", simplified]", "lemma \\<C>_simp [simp]:\n  \"\\<C> = {control_var}\"", "lemma buffer_eq:\n  \"mem\\<^sub>1 control_var = 0 \\<Longrightarrow> buffer \\<notin> mds' AsmNoReadOrWrite \\<Longrightarrow> low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2  \\<Longrightarrow>\n  mem\\<^sub>1 buffer = mem\\<^sub>2 buffer\"", "lemma rel_inv_init:\n  \"buffer \\<notin> mds' AsmNoReadOrWrite \\<Longrightarrow> low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>Stop ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp), mds', mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n     \\<langle>Stop ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp), mds', mem\\<^sub>2\n     (temp := ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n    \\<in> rel_inv\"", "lemma R_inv:\n  notes ev\\<^sub>A.simps[simp del]\n  shows  \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>) \\<in> R \\<Longrightarrow>\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>) \\<in> eval\\<^sub>w \\<Longrightarrow>\n       \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n          (\\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>, \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>) \\<in> eval\\<^sub>w \\<and>\n          (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>, \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>) \\<in> R\"", "lemma strong_low_bisim_mm_R:\n  \"strong_low_bisim_mm R\"", "lemma read_buffer_secure':\n  \"low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n       (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>, \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>) \\<in> R\"", "lemma \"com_sifum_secure (read_buffer,mds\\<^sub>s)\""], "translations": [["", "lemma [simp]:\n  \"control_var \\<in> \\<C>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. control_var \\<in> \\<C>", "apply(simp add: \\<C>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. control_var \\<in> \\<C>_vars x", "apply(rule_tac x=buffer in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. control_var \\<in> \\<C>_vars buffer", "apply(simp add: \\<C>_vars_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma low_mds_eq_control_var_eq:\n  \"low_mds_eq mds mem mem' \\<Longrightarrow> mem control_var = mem' control_var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. low_mds_eq mds mem mem' \\<Longrightarrow>\n    mem control_var = mem' control_var", "apply(auto simp: low_mds_eq_def dma_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inv_low_mds_eq:\n  \"\\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem'; inv \\<langle>c,mds,mem\\<rangle>\\<rbrakk>  \\<Longrightarrow>\n   inv \\<langle>c',mds',mem'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n     local.inv \\<langle>c, mds, mem\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>", "apply(erule inv.cases)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca = read_buffer; mdsa AsmNoReadOrWrite = {};\n        mdsa AsmNoWrite = {}\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 2. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 3. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 4. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 5. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 6. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 7. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 8. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mema control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 9. \\<And>ca mdsa mema.\n       \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n        \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n        ca = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>\n 10. \\<And>ca mdsa mema.\n        \\<lbrakk>c = c'; mds = mds'; low_mds_eq mds mem mem';\n         \\<langle>c, mds, mem\\<rangle> = \\<langle>ca, mdsa, mema\\<rangle>;\n         ca = Stop\\<rbrakk>\n        \\<Longrightarrow> local.inv \\<langle>c', mds', mem'\\<rangle>", "apply(auto intro: inv.intros dest!: low_mds_eq_control_var_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_inv_sym:\n  \"low_mds_eq mds mem mem' \\<Longrightarrow> (\\<langle>c, mds, mem\\<rangle>, \\<langle>c, mds, mem'\\<rangle>) \\<in> rel_inv \\<Longrightarrow>\n    (\\<langle>c, mds, mem'\\<rangle>, \\<langle>c, mds, mem\\<rangle>) \\<in> rel_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low_mds_eq mds mem mem';\n     (\\<langle>c, mds, mem\\<rangle>, \\<langle>c, mds, mem'\\<rangle>)\n     \\<in> rel_inv\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c, mds, mem'\\<rangle>,\n                       \\<langle>c, mds, mem\\<rangle>)\n                      \\<in> rel_inv", "apply(auto elim!: rel_inv.cases intro: rel_inv.intros simp: low_mds_eq_control_var_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma R_sym':\n  \"(\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>) \\<in> R \\<Longrightarrow>\n   (\\<langle>c', mds', mem'\\<rangle>, \\<langle>c, mds, mem\\<rangle>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    (\\<langle>c', mds', mem'\\<rangle>, \\<langle>c, mds, mem\\<rangle>)\n    \\<in> R", "apply(rule R.intros)"], ["proof (prove)\ngoal (5 subgoals):\n 1. (\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    c' = c\n 2. (\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    mds' = mds\n 3. (\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    low_mds_eq mds' mem' mem\n 4. (\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    local.inv \\<langle>c', mds', mem'\\<rangle>\n 5. (\\<langle>c, mds, mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    (\\<langle>c', mds', mem'\\<rangle>, \\<langle>c, mds, mem\\<rangle>)\n    \\<in> rel_inv", "apply(blast elim: R.cases dest: low_mds_eq_sym intro: inv_low_mds_eq dest: rel_inv_sym)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma R_sym:\n  \"sym R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym R", "by(rule symI, clarify, erule R_sym')"], ["", "lemma inv_closed_glob_consistent:\n  \"inv \\<langle>c', mds', mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x. case A x of None \\<Rightarrow> True | Some (v, v') \\<Rightarrow> mem x \\<noteq> v \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n       \\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq> dma mem x \\<longrightarrow> \\<not> var_asm_not_written mds' x  \\<Longrightarrow>\n       inv \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.inv \\<langle>c', mds', mem\\<rangle>;\n     \\<forall>x.\n        case A x of None \\<Rightarrow> True\n        | Some (v, v') \\<Rightarrow>\n            mem x \\<noteq> v \\<longrightarrow>\n            \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(erule inv.cases)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = read_buffer; mds AsmNoReadOrWrite = {};\n        mds AsmNoWrite = {}\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 4. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 5. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 6. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 7. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 8. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var = 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 9. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 10. \\<And>c mds mema.\n        \\<lbrakk>\\<forall>x.\n                    case A x of None \\<Rightarrow> True\n                    | Some (v, v') \\<Rightarrow>\n                        mem x \\<noteq> v \\<longrightarrow>\n                        \\<not> var_asm_not_written mds' x;\n         \\<forall>x.\n            dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n            dma mem x \\<longrightarrow>\n            \\<not> var_asm_not_written mds' x;\n         \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> local.inv\n                           \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(fastforce intro: inv.intros)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var = 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(clarsimp simp: apply_adaptation_def split: option.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x a.\n                (\\<forall>b. A x \\<noteq> Some (a, b)) \\<or>\n                mem x = a \\<or> \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma (\\<lambda>x.\n                case A x of None \\<Rightarrow> mem x\n                | Some (xa, xb) \\<Rightarrow> if True then xa else xb)\n         x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     c' = low_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite; mem control_var = 0;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', \\<lambda>x.\n          case A x of None \\<Rightarrow> mem x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(drule_tac x=control_var in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                dma (\\<lambda>x.\n                        case A x of None \\<Rightarrow> mem x\n                        | Some (xa, xb) \\<Rightarrow>\n                            if True then xa else xb)\n                 x \\<noteq>\n                dma mem x \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     c' = low_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite; mem control_var = 0;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     \\<forall>a.\n        (\\<forall>b. A control_var \\<noteq> Some (a, b)) \\<or>\n        mem control_var = a \\<or>\n        \\<not> var_asm_not_written mds' control_var\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', \\<lambda>x.\n          case A x of None \\<Rightarrow> mem x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                dma (\\<lambda>x.\n                        case A x of None \\<Rightarrow> mem x\n                        | Some (xa, xb) \\<Rightarrow>\n                            if True then xa else xb)\n                 x \\<noteq>\n                dma mem x \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     c' = low_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite; mem control_var = 0;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     \\<forall>a.\n        (\\<forall>b. A control_var \\<noteq> Some (a, b)) \\<or>\n        a = 0 \\<or> \\<not> var_asm_not_written mds' control_var\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', \\<lambda>x.\n          case A x of None \\<Rightarrow> mem x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(drule_tac x=buffer in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c' = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     \\<forall>a.\n        (\\<forall>b. A control_var \\<noteq> Some (a, b)) \\<or>\n        a = 0 \\<or> \\<not> var_asm_not_written mds' control_var;\n     dma (\\<lambda>x.\n             case A x of None \\<Rightarrow> mem x\n             | Some (xa, xb) \\<Rightarrow> if True then xa else xb)\n      buffer \\<noteq>\n     dma mem buffer \\<longrightarrow>\n     \\<not> var_asm_not_written mds' buffer\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', \\<lambda>x.\n          case A x of None \\<Rightarrow> mem x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(clarsimp simp: dma_def dma_control_var_def split: if_splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c' = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     \\<forall>a.\n        (\\<forall>b. A control_var \\<noteq> Some (a, b)) \\<or>\n        a = 0 \\<or> \\<not> var_asm_not_written mds' control_var;\n     (case A control_var of None \\<Rightarrow> mem control_var\n      | Some (xa, xb) \\<Rightarrow> if True then xa else xb) =\n     0\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', \\<lambda>x.\n          case A x of None \\<Rightarrow> mem x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb\\<rangle>\n 2. \\<lbrakk>c' = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     \\<forall>a.\n        (\\<forall>b. A control_var \\<noteq> Some (a, b)) \\<or>\n        a = 0 \\<or> \\<not> var_asm_not_written mds' control_var;\n     0 < (case A control_var of None \\<Rightarrow> mem control_var\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb);\n     \\<not> var_asm_not_written mds' buffer\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', \\<lambda>x.\n          case A x of None \\<Rightarrow> mem x\n          | Some (xa, xb) \\<Rightarrow> if True then xa else xb\\<rangle>\n 3. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 4. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(auto intro: inv.intros simp: var_asm_not_written_def)[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(drule_tac x=control_var in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n                   dma mem x \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite;\n        case A control_var of None \\<Rightarrow> True\n        | Some (v, v') \\<Rightarrow>\n            mem control_var \\<noteq> v \\<longrightarrow>\n            \\<not> var_asm_not_written mds' control_var\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(drule_tac x=buffer in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c mds mema.\n       \\<lbrakk>\\<langle>c', mds', mem\\<rangle> =\n                \\<langle>c, mds, mema\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mds AsmNoWrite;\n        temp \\<in> mds AsmNoReadOrWrite; mema control_var \\<noteq> 0;\n        buffer \\<notin> mds AsmNoReadOrWrite;\n        case A control_var of None \\<Rightarrow> True\n        | Some (v, v') \\<Rightarrow>\n            mem control_var \\<noteq> v \\<longrightarrow>\n            \\<not> var_asm_not_written mds' control_var;\n        dma mem [\\<parallel>\\<^sub>1 A] buffer \\<noteq>\n        dma mem buffer \\<longrightarrow>\n        \\<not> var_asm_not_written mds' buffer\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 2. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(clarsimp simp: dma_def dma_control_var_def split: if_splits option.splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>mem [\\<parallel>\\<^sub>1 A] control_var = 0;\n     \\<not> var_asm_not_written mds' buffer;\n     c' = high_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     buffer \\<notin> mds' AsmNoReadOrWrite; A control_var = None\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>high_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 2. \\<And>a b.\n       \\<lbrakk>mem [\\<parallel>\\<^sub>1 A] control_var = 0;\n        \\<not> var_asm_not_written mds' buffer;\n        c' = high_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n        temp \\<in> mds' AsmNoReadOrWrite; 0 < mem control_var;\n        buffer \\<notin> mds' AsmNoReadOrWrite; A control_var = Some (a, b);\n        mem control_var \\<noteq> a \\<longrightarrow>\n        \\<not> var_asm_not_written mds' control_var\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>high_var \\<leftarrow>\n                                   Load\n                                    temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 3. \\<lbrakk>0 < mem [\\<parallel>\\<^sub>1 A] control_var;\n     c' = high_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     buffer \\<notin> mds' AsmNoReadOrWrite; A control_var = None\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>high_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 4. \\<And>a b.\n       \\<lbrakk>0 < mem [\\<parallel>\\<^sub>1 A] control_var;\n        c' = high_var \\<leftarrow> Load temp; buffer \\<in> mds' AsmNoWrite;\n        temp \\<in> mds' AsmNoReadOrWrite; 0 < mem control_var;\n        buffer \\<notin> mds' AsmNoReadOrWrite; A control_var = Some (a, b);\n        mem control_var \\<noteq> a \\<longrightarrow>\n        \\<not> var_asm_not_written mds' control_var\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>high_var \\<leftarrow>\n                                   Load\n                                    temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>\n 5. \\<And>c mds mema.\n       \\<lbrakk>\\<forall>x.\n                   case A x of None \\<Rightarrow> True\n                   | Some (v, v') \\<Rightarrow>\n                       mem x \\<noteq> v \\<longrightarrow>\n                       \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<langle>c', mds', mem\\<rangle> = \\<langle>c, mds, mema\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> local.inv\n                          \\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>", "apply(auto intro: inv.intros simp: var_asm_not_written_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma updates_to_control_var:\n  \"\\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq> dma mem x \\<longrightarrow> \\<not> var_asm_not_written mds' x  \\<Longrightarrow>\n    buffer \\<in> mds' AsmNoWrite \\<Longrightarrow>\n    case A control_var of Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0) | _ \\<Rightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n                dma mem x \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     buffer \\<in> mds' AsmNoWrite\\<rbrakk>\n    \\<Longrightarrow> case A control_var of None \\<Rightarrow> True\n                      | Some (x, y) \\<Rightarrow>\n                          (x = 0) = (mem control_var = 0)", "apply(drule_tac x=buffer in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>buffer \\<in> mds' AsmNoWrite;\n     dma mem [\\<parallel>\\<^sub>1 A] buffer \\<noteq>\n     dma mem buffer \\<longrightarrow>\n     \\<not> var_asm_not_written mds' buffer\\<rbrakk>\n    \\<Longrightarrow> case A control_var of None \\<Rightarrow> True\n                      | Some (x, y) \\<Rightarrow>\n                          (x = 0) = (mem control_var = 0)", "apply(auto simp: apply_adaptation_def split: option.splits simp: dma_def dma_control_var_def split: if_splits simp: var_asm_not_written_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma blah:\n  \"\\<forall>x a b. A x = Some (a, b) \\<longrightarrow> (mem x = a \\<longrightarrow> mem' x \\<noteq> b) \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n    mem x = mem' x \\<Longrightarrow>\n    x \\<in> mds' AsmNoReadOrWrite \\<or> x \\<in> mds' AsmNoWrite \\<Longrightarrow>  mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     mem x = mem' x;\n     x \\<in> mds' AsmNoReadOrWrite \\<or> x \\<in> mds' AsmNoWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] x =\n                      mem' [\\<parallel>\\<^sub>2 A] x", "apply(auto simp: apply_adaptation_def split: option.splits simp: var_asm_not_written_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_inv_closed_glob_consistent:\n  \"inv \\<langle>c', mds', mem\\<rangle> \\<Longrightarrow> (\\<langle>c', mds', mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>) \\<in> rel_inv \\<Longrightarrow>\n       \\<forall>x a b.\n          A x = Some (a, b) \\<longrightarrow>\n          (mem x = a \\<longrightarrow> mem' x \\<noteq> b) \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n       \\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq> dma mem x \\<longrightarrow> \\<not> var_asm_not_written mds' x \\<Longrightarrow>\n       \\<forall>x. dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and> (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow> x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x \\<Longrightarrow>\n       (\\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>, \\<langle>c', mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>) \\<in> rel_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.inv \\<langle>c', mds', mem\\<rangle>;\n     (\\<langle>c', mds', mem\\<rangle>, \\<langle>c', mds', mem'\\<rangle>)\n     \\<in> rel_inv;\n     \\<forall>x a b.\n        A x = Some (a, b) \\<longrightarrow>\n        (mem x = a \\<longrightarrow> mem' x \\<noteq> b) \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x =\n        mem' [\\<parallel>\\<^sub>2 A] x\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c', mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>c', mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv", "apply(safe elim!: rel_inv.cases elim!: inv.cases)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        read_buffer\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 2. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 3. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; mds' AsmNoReadOrWrite = {};\n        mds' AsmNoWrite = {};\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        read_buffer\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 4. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n        temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 5. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        read_buffer\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 6. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 7. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; mds' AsmNoReadOrWrite = {};\n        mds' AsmNoWrite = {};\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        read_buffer\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 8. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n        temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 9. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' = low_var \\<leftarrow> Load temp; mem control_var = 0;\n        mem temp = mem' temp; mds' AsmNoReadOrWrite = {};\n        mds' AsmNoWrite = {};\n        low_var \\<leftarrow> Load temp = read_buffer\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                   Load\n                                    temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>low_var \\<leftarrow>\n                                   Load\n                                    temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 10. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n        \\<lbrakk>\\<forall>x a b.\n                    A x = Some (a, b) \\<longrightarrow>\n                    (mem x = a \\<longrightarrow>\n                     mem' x \\<noteq> b) \\<longrightarrow>\n                    \\<not> var_asm_not_written mds' x;\n         \\<forall>x.\n            dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n            dma mem x \\<longrightarrow>\n            \\<not> var_asm_not_written mds' x;\n         \\<forall>x.\n            dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n            (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n             x \\<in> \\<C>) \\<longrightarrow>\n            mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n         c' = low_var \\<leftarrow> Load temp; mem control_var = 0;\n         mem temp = mem' temp; buffer \\<in> mds' AsmNoWrite;\n         temp \\<in> mds' AsmNoReadOrWrite; mem control_var = 0;\n         buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n        \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                    Load\n                                     temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                           \\<langle>low_var \\<leftarrow>\n                                    Load\n                                     temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                          \\<in> rel_inv\nA total of 18 subgoals...", "apply(unfold read_buffer_def)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 2. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 3. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; mds' AsmNoReadOrWrite = {};\n        mds' AsmNoWrite = {};\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 4. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n        temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 5. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 6. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mem control_var = 0; mem temp = mem' temp;\n        buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 7. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; mds' AsmNoReadOrWrite = {};\n        mds' AsmNoWrite = {};\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp) =\n        (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 8. \\<And>c mema mds c'a mds'a mem'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n        temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 9. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n       \\<lbrakk>\\<forall>x a b.\n                   A x = Some (a, b) \\<longrightarrow>\n                   (mem x = a \\<longrightarrow>\n                    mem' x \\<noteq> b) \\<longrightarrow>\n                   \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n           dma mem x \\<longrightarrow>\n           \\<not> var_asm_not_written mds' x;\n        \\<forall>x.\n           dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n           (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n            x \\<in> \\<C>) \\<longrightarrow>\n           mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n        c' = low_var \\<leftarrow> Load temp; mem control_var = 0;\n        mem temp = mem' temp; mds' AsmNoReadOrWrite = {};\n        mds' AsmNoWrite = {};\n        low_var \\<leftarrow> Load temp =\n        (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                   Load\n                                    temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                          \\<langle>low_var \\<leftarrow>\n                                   Load\n                                    temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                         \\<in> rel_inv\n 10. \\<And>c mema mem'a mds c'a mds'a ca mdsa memaa.\n        \\<lbrakk>\\<forall>x a b.\n                    A x = Some (a, b) \\<longrightarrow>\n                    (mem x = a \\<longrightarrow>\n                     mem' x \\<noteq> b) \\<longrightarrow>\n                    \\<not> var_asm_not_written mds' x;\n         \\<forall>x.\n            dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n            dma mem x \\<longrightarrow>\n            \\<not> var_asm_not_written mds' x;\n         \\<forall>x.\n            dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n            (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n             x \\<in> \\<C>) \\<longrightarrow>\n            mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n         c' = low_var \\<leftarrow> Load temp; mem control_var = 0;\n         mem temp = mem' temp; buffer \\<in> mds' AsmNoWrite;\n         temp \\<in> mds' AsmNoReadOrWrite; mem control_var = 0;\n         buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n        \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                    Load\n                                     temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                           \\<langle>low_var \\<leftarrow>\n                                    Load\n                                     temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                          \\<in> rel_inv\nA total of 18 subgoals...", "apply(simp_all)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      Stop ;;\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>Stop ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>Stop ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 13 subgoals...", "(* there are actually 14 goals at this point but 8 are solved at the end by auto, so\n          we indent as if there were 6 *)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      Stop ;;\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>Stop ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>Stop ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 13 subgoals...", "apply(rule rel_inv.intros(1), simp+)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] control_var = 0\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 14 subgoals...", "apply(drule updates_to_control_var, simp+)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     case A control_var of None \\<Rightarrow> True\n     | Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0)\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] control_var = 0\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 14 subgoals...", "apply(fastforce split: option.splits simp: apply_adaptation_def)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      Stop ;;\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>Stop ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>Stop ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 13 subgoals...", "apply(fastforce intro!: blah)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 12 subgoals...", "apply(rule rel_inv.intros(2), simp+)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> 0 < mem [\\<parallel>\\<^sub>1 A] control_var\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 12 subgoals...", "apply(drule updates_to_control_var, simp+)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     case A control_var of None \\<Rightarrow> True\n     | Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < mem [\\<parallel>\\<^sub>1 A] control_var\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 12 subgoals...", "apply(fastforce split: option.splits simp: apply_adaptation_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n      c' = high_var \\<leftarrow> Load temp;\n      (\\<langle>high_var \\<leftarrow>\n                Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>high_var \\<leftarrow>\n                Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 11 subgoals...", "apply(rule rel_inv.intros(3), simp+)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] control_var = 0\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 12 subgoals...", "apply(drule updates_to_control_var, simp+)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     case A control_var of None \\<Rightarrow> True\n     | Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0)\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] control_var = 0\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite;\n      c' =\n      (temp \\<leftarrow> Load buffer) ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp);\n      (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow>\n                  Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 12 subgoals...", "apply(fastforce split: option.splits simp: apply_adaptation_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem control_var = 0; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n      buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n      c' = high_var \\<leftarrow> Load temp;\n      (\\<langle>high_var \\<leftarrow>\n                Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n       \\<langle>high_var \\<leftarrow>\n                Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n      \\<notin> rel_inv\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 11 subgoals...", "apply(fastforce intro!: blah)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      c' = Stop\\<rbrakk>\n     \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                        \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                       \\<in> rel_inv", "apply(rule rel_inv.intros(4), simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> 0 < mem [\\<parallel>\\<^sub>1 A] control_var\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      c' = Stop\\<rbrakk>\n     \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                        \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                       \\<in> rel_inv", "apply(drule updates_to_control_var, simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     0 < mem control_var; buffer \\<in> mds' AsmNoWrite;\n     temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     case A control_var of None \\<Rightarrow> True\n     | Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < mem [\\<parallel>\\<^sub>1 A] control_var\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      c' = Stop\\<rbrakk>\n     \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                        \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                       \\<in> rel_inv", "apply(fastforce split: option.splits simp: apply_adaptation_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load\n                                 temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = Stop\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv", "apply(rule rel_inv.intros(5), simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] control_var = 0\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      c' = Stop\\<rbrakk>\n     \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                        \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                       \\<in> rel_inv", "apply(drule updates_to_control_var, simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     case A control_var of None \\<Rightarrow> True\n     | Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0)\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] control_var = 0\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 10. \\<lbrakk>\\<forall>x a b.\n                 A x = Some (a, b) \\<longrightarrow>\n                 (mem x = a \\<longrightarrow>\n                  mem' x \\<noteq> b) \\<longrightarrow>\n                 \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n         dma mem x \\<longrightarrow>\n         \\<not> var_asm_not_written mds' x;\n      \\<forall>x.\n         dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n         (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n          x \\<in> \\<C>) \\<longrightarrow>\n         mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n      c' = Stop\\<rbrakk>\n     \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                        \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                       \\<in> rel_inv", "apply(fastforce split: option.splits simp: apply_adaptation_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = low_var \\<leftarrow> Load temp; mem temp = mem' temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem [\\<parallel>\\<^sub>1 A] temp =\n                      mem' [\\<parallel>\\<^sub>2 A] temp\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = Stop\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv", "apply(fastforce intro!: blah)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     mds' AsmNoReadOrWrite = {}; mds' AsmNoWrite = {};\n     c' =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 8. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = Stop\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv", "apply(rule rel_inv.intros(6), simp+)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = Stop\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv", "apply(drule updates_to_control_var, simp+)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv;\n     case A control_var of None \\<Rightarrow> True\n     | Some (x, y) \\<Rightarrow> (x = 0) = (mem control_var = 0)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite; 0 < mem control_var;\n     c' = high_var \\<leftarrow> Load temp;\n     (\\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n      \\<langle>high_var \\<leftarrow>\n               Load temp, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n     \\<notin> rel_inv\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<lbrakk>\\<forall>x a b.\n                A x = Some (a, b) \\<longrightarrow>\n                (mem x = a \\<longrightarrow>\n                 mem' x \\<noteq> b) \\<longrightarrow>\n                \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x \\<noteq>\n        dma mem x \\<longrightarrow>\n        \\<not> var_asm_not_written mds' x;\n     \\<forall>x.\n        dma mem [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n        (x \\<in> mds' AsmNoReadOrWrite \\<longrightarrow>\n         x \\<in> \\<C>) \\<longrightarrow>\n        mem [\\<parallel>\\<^sub>1 A] x = mem' [\\<parallel>\\<^sub>2 A] x;\n     c' = Stop\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem [\\<parallel>\\<^sub>1 A]\\<rangle>,\n                       \\<langle>Stop, mds', mem' [\\<parallel>\\<^sub>2 A]\\<rangle>)\n                      \\<in> rel_inv", "by (auto intro: rel_inv.intros)"], ["", "lemma R_closed_glob_consistent:\n  \"closed_glob_consistent R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_glob_consistent R", "unfolding closed_glob_consistent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<longrightarrow>\n       (\\<forall>A.\n           (\\<forall>x.\n               case A x of None \\<Rightarrow> True\n               | Some (v, v') \\<Rightarrow>\n                   mem\\<^sub>1 x \\<noteq> v \\<or>\n                   mem\\<^sub>2 x \\<noteq> v' \\<longrightarrow>\n                   \\<not> var_asm_not_written mds x) \\<and>\n           (\\<forall>x.\n               dma mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x \\<noteq>\n               dma mem\\<^sub>1 x \\<longrightarrow>\n               \\<not> var_asm_not_written mds x) \\<and>\n           (\\<forall>x.\n               dma mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x = Low \\<and>\n               (x \\<notin> mds AsmNoReadOrWrite \\<or>\n                x \\<in> \\<C>) \\<longrightarrow>\n               mem\\<^sub>1 [\\<parallel>\\<^sub>1 A] x =\n               mem\\<^sub>2 [\\<parallel>\\<^sub>2 A] x) \\<longrightarrow>\n           (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1 [\\<parallel>\\<^sub>1 A]\\<rangle>,\n            \\<langle>c\\<^sub>2, mds, mem\\<^sub>2 [\\<parallel>\\<^sub>2 A]\\<rangle>)\n           \\<in> R)", "apply(auto elim!: R.cases intro!: R.intros simp: low_mds_eq_def intro!: inv_closed_glob_consistent split: option.splits intro: rel_inv_closed_glob_consistent)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma R_low_mds_eq:\n  \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>) \\<in> R \\<Longrightarrow>\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n     \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n    \\<in> R \\<Longrightarrow>\n    low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2", "apply(blast elim: R.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma decl_eval\\<^sub>w':\n  assumes mem_unchanged: \"mem' = mem\"\n  assumes upd: \"mds' = update_modes upd mds\"\n  shows \"(\\<langle>Skip@[upd], mds, mem\\<rangle>, \\<langle>Stop, mds', mem'\\<rangle>) \\<in> eval\\<^sub>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_abv \\<langle>Skip@[upd], mds, mem\\<rangle>\n     \\<langle>Stop, mds', mem'\\<rangle>", "using decl[OF unannotated, OF skip, where E=\"[]\", simplified, where E1=\"[]\", simplified]\n  assms"], ["proof (prove)\nusing this:\n  eval_abv \\<langle>Skip@[?mu], ?mds, ?mem\\<rangle>\n   \\<langle>Stop, update_modes ?mu ?mds, ?mem\\<rangle>\n  mem' = mem\n  mds' = update_modes upd mds\n\ngoal (1 subgoal):\n 1. eval_abv \\<langle>Skip@[upd], mds, mem\\<rangle>\n     \\<langle>Stop, mds', mem'\\<rangle>", "by auto"], ["", "lemmas decl_eval\\<^sub>w = decl[OF unannotated, OF skip, where E=\"[]\", simplified, where E1=\"[]\", simplified]"], ["", "lemmas seq_stop_eval\\<^sub>w = unannotated[OF seq_stop, where E=\"[]\", simplified]"], ["", "lemmas assign_eval\\<^sub>w = unannotated[OF assign, where E=\"[]\", simplified]"], ["", "lemmas if_eval\\<^sub>w = unannotated[OF cond, where E=\"[]\", simplified]"], ["", "lemmas if_false_eval\\<^sub>w = unannotated[OF if_false, where E=\"[]\", simplified]"], ["", "lemma \\<C>_simp [simp]:\n  \"\\<C> = {control_var}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> = {control_var}", "apply(auto simp: \\<C>_def \\<C>_vars_def split: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma buffer_eq:\n  \"mem\\<^sub>1 control_var = 0 \\<Longrightarrow> buffer \\<notin> mds' AsmNoReadOrWrite \\<Longrightarrow> low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2  \\<Longrightarrow>\n  mem\\<^sub>1 buffer = mem\\<^sub>2 buffer\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mem\\<^sub>1 control_var = 0;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>1 buffer = mem\\<^sub>2 buffer", "apply(clarsimp simp: low_mds_eq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mem\\<^sub>1 control_var = 0;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     \\<forall>x.\n        dma mem\\<^sub>1 x = Low \\<and>\n        (x = control_var \\<or>\n         x \\<notin> mds' AsmNoReadOrWrite) \\<longrightarrow>\n        mem\\<^sub>1 x = mem\\<^sub>2 x\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>1 buffer = mem\\<^sub>2 buffer", "apply(drule spec, erule mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mem\\<^sub>1 control_var = 0;\n     buffer \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> dma mem\\<^sub>1 buffer = Low \\<and>\n                      (buffer = control_var \\<or>\n                       buffer \\<notin> mds' AsmNoReadOrWrite)", "apply(clarsimp simp: dma_def dma_control_var_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_inv_init:\n  \"buffer \\<notin> mds' AsmNoReadOrWrite \\<Longrightarrow> low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>Stop ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp), mds', mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n     \\<langle>Stop ;;\n      Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n       (high_var \\<leftarrow> Load temp), mds', mem\\<^sub>2\n     (temp := ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n    \\<in> rel_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>buffer \\<notin> mds' AsmNoReadOrWrite;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv", "apply(case_tac \"mem\\<^sub>1 control_var = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>buffer \\<notin> mds' AsmNoReadOrWrite;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>buffer \\<notin> mds' AsmNoReadOrWrite;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     mem\\<^sub>1 control_var \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv", "apply(frule (2) buffer_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>buffer \\<notin> mds' AsmNoReadOrWrite;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2; mem\\<^sub>1 control_var = 0;\n     mem\\<^sub>1 buffer = mem\\<^sub>2 buffer\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>buffer \\<notin> mds' AsmNoReadOrWrite;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     mem\\<^sub>1 control_var \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv", "apply(fastforce intro: rel_inv.intros simp: ev\\<^sub>A.simps)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma R_inv:\n  notes ev\\<^sub>A.simps[simp del]\n  shows  \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>) \\<in> R \\<Longrightarrow>\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>) \\<in> eval\\<^sub>w \\<Longrightarrow>\n       \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n          (\\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>, \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>) \\<in> eval\\<^sub>w \\<and>\n          (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>, \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n              \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n             \\<in> R;\n     eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n      \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R", "apply(erule R.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' mdsa mds'a mem mem'.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>1 = c; mds = mdsa; mem\\<^sub>1 = mem; c\\<^sub>2 = c';\n        mds = mds'a; mem\\<^sub>2 = mem'; c = c'; mdsa = mds'a;\n        low_mds_eq mdsa mem mem'; local.inv \\<langle>c, mdsa, mem\\<rangle>;\n        (\\<langle>c, mdsa, mem\\<rangle>, \\<langle>c', mds'a, mem'\\<rangle>)\n        \\<in> rel_inv\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     local.inv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>;\n     (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R", "apply(erule inv.cases)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = read_buffer; mdsa AsmNoReadOrWrite = {};\n        mdsa AsmNoWrite = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>eval_abv \\<langle>read_buffer, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = read_buffer; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>read_buffer, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>read_buffer, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = read_buffer; mds AsmNoReadOrWrite = {};\n     mds AsmNoWrite = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>read_buffer, mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(rule_tac x=c\\<^sub>1' in exI)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>eval_abv \\<langle>read_buffer, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = read_buffer; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>read_buffer, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>read_buffer, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = read_buffer; mds AsmNoReadOrWrite = {};\n     mds AsmNoWrite = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>read_buffer, mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>1', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>1', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(rule_tac x=mem\\<^sub>2 in exI)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>eval_abv \\<langle>read_buffer, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = read_buffer; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>read_buffer, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>read_buffer, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = read_buffer; mds AsmNoReadOrWrite = {};\n     mds AsmNoWrite = {}\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>read_buffer, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(unfold read_buffer_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                       (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                       (temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {}\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(drule seq_elim, simp)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     \\<exists>c\\<^sub>1''.\n        eval_abv\n         \\<langle>Skip@[buffer +=\\<^sub>m\n                        AsmNoWrite], mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1'', mds', mem\\<^sub>1'\\<rangle> \\<and>\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1''.\n       \\<lbrakk>c\\<^sub>2 =\n                (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow> Load temp);\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                  (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                  (temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                  (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                  (temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        c\\<^sub>1 =\n        (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n        eval_abv\n         \\<langle>Skip@[buffer +=\\<^sub>m\n                        AsmNoWrite], mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1'', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> eval_abv\n                          \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                   (Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>1'' ;;\n                                   (Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem\\<^sub>2\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1'' ;;\n                                   (Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>1'' ;;\n                                   (Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds', mem\\<^sub>2\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(drule upd_elim, drule skip_elim, simp)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds(AsmNoWrite := {buffer}) = mds' \\<and>\n     mem\\<^sub>1 = mem\\<^sub>1'\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n         temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n         buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R\nA total of 11 subgoals...", "apply(rule eval\\<^sub>w.seq)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Skip@[buffer +=\\<^sub>m\nAsmNoWrite], mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop, mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n         temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n         buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R\nA total of 11 subgoals...", "apply(rule decl_eval\\<^sub>w', simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> low_mds_eq (mds(AsmNoWrite := {buffer})) mem\\<^sub>1'\n                       mem\\<^sub>2\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n         temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n         buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R\nA total of 12 subgoals...", "apply(fastforce simp: low_mds_eq_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n         temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n         buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R\nA total of 11 subgoals...", "apply(rule inv\\<^sub>1', simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds AsmNoReadOrWrite = {}; mds AsmNoWrite = {};\n     c\\<^sub>1' =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1'; mds' = mds(AsmNoWrite := {buffer})\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoWrite := {buffer}), mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>Stop ;;\n                       (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                       (temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stop ;;\n                                   (Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule seq_stop_elim, clarsimp)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stop ;;\n                                   (Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds, mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>(Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>1\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds, mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'87, mds, ?mem\\<^sub>2'89\\<rangle> \\<and>\n                      (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>?c\\<^sub>2'87, mds, ?mem\\<^sub>2'89\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(intro conjI)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stop ;;\n                                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'87, mds, ?mem\\<^sub>2'89\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>?c\\<^sub>2'87, mds, ?mem\\<^sub>2'89\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(rule seq_stop_eval\\<^sub>w)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(blast intro: inv.intros)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                       (temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>(Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule_tac x=c\\<^sub>1' in exI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                       (temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>(Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>1', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>1', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule_tac x=mem\\<^sub>2 in exI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                       (temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule seq_elim, simp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     \\<exists>c\\<^sub>1''.\n        eval_abv\n         \\<langle>Skip@[temp +=\\<^sub>m\n                        AsmNoReadOrWrite], mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1'', mds', mem\\<^sub>1'\\<rangle> \\<and>\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>c\\<^sub>1', mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c\\<^sub>1''.\n       \\<lbrakk>c\\<^sub>2 =\n                (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow> Load temp);\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                  (temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                  (temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        c\\<^sub>1 =\n        (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n        eval_abv\n         \\<langle>Skip@[temp +=\\<^sub>m\n                        AsmNoReadOrWrite], mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1'', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> eval_abv\n                          \\<langle>(Skip@[temp +=\\<^sub>m\n    AsmNoReadOrWrite]) ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>1'' ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem\\<^sub>2\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1'' ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>1'' ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds', mem\\<^sub>2\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule upd_elim, drule skip_elim, simp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds(AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite)) =\n     mds' \\<and>\n     mem\\<^sub>1 = mem\\<^sub>1'\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule eval\\<^sub>w.seq)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Skip@[temp +=\\<^sub>m\nAsmNoReadOrWrite], mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>Stop, mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule decl_eval\\<^sub>w', simp+)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> low_mds_eq\n                       (mds(AsmNoReadOrWrite :=\n                              insert temp (mds AsmNoReadOrWrite)))\n                       mem\\<^sub>1' mem\\<^sub>2\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 10. \\<And>c mdsa mem.\n        \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                  \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n         c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n         (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n          \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n         \\<in> rel_inv;\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n         \\<langle>c, mdsa, mem\\<rangle>;\n         c = Stop\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                             eval_abv\n                              \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                             (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                              \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                             \\<in> R", "apply(fastforce simp: low_mds_eq_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 9. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule inv\\<^sub>2', simp+)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1' mem\\<^sub>2;\n     (\\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1'\\<rangle>,\n      \\<langle>(Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mem\\<^sub>1 = mem\\<^sub>1';\n     mds' = mds\n     (AsmNoReadOrWrite := insert temp (mds AsmNoReadOrWrite))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow> Load temp), mds\n                       (AsmNoReadOrWrite :=\n                          insert temp\n                           (mds AsmNoReadOrWrite)), mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>Stop ;;\n                       (temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stop ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule seq_stop_elim, clarsimp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stop ;;\n                                   (temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds, mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>1\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds, mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'258, mds, ?mem\\<^sub>2'260\\<rangle> \\<and>\n                      (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>?c\\<^sub>2'258, mds, ?mem\\<^sub>2'260\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(intro conjI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stop ;;\n                                (temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'258, mds, ?mem\\<^sub>2'260\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>?c\\<^sub>2'258, mds, ?mem\\<^sub>2'260\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule seq_stop_eval\\<^sub>w)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(blast intro: inv.intros)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               (temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule seq_elim, simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     \\<exists>c\\<^sub>1''.\n        eval_abv\n         \\<langle>temp \\<leftarrow> Load buffer, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1'', mds', mem\\<^sub>1'\\<rangle> \\<and>\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1''.\n       \\<lbrakk>c\\<^sub>2 =\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow> Load temp);\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        c\\<^sub>1 =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite;\n        eval_abv\n         \\<langle>temp \\<leftarrow> Load buffer, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1'', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp)\\<rbrakk>\n       \\<Longrightarrow> eval_abv\n                          \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1'' ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule assign_elim)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1''.\n       \\<lbrakk>c\\<^sub>2 =\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow> Load temp);\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        c\\<^sub>1 =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n        buffer \\<notin> mds AsmNoReadOrWrite;\n        c\\<^sub>1' =\n        c\\<^sub>1'' ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        c\\<^sub>1'' = Stop \\<and>\n        mds = mds' \\<and>\n        mem\\<^sub>1' = mem\\<^sub>1\n        (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n       \\<Longrightarrow> eval_abv\n                          \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1'' ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load\ntemp), mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle> \\<and>\n                      (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>?c\\<^sub>2'371, mds', ?mem\\<^sub>2'373\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule eval\\<^sub>w.seq)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>temp \\<leftarrow>\n                                Load buffer, mds', mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>1'392, mds', ?mem\\<^sub>2'373\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>?c\\<^sub>1'392 ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load\n                                   temp), mds', ?mem\\<^sub>2'373\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule assign_eval\\<^sub>w)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> low_mds_eq mds'\n                       (mem\\<^sub>1\n                        (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer)))\n                       (mem\\<^sub>2\n                        (temp := ev\\<^sub>A mem\\<^sub>2 (Load buffer)))\n 2. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(clarsimp simp: low_mds_eq_def ev\\<^sub>A.simps)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c\\<^sub>2 =\n                (temp \\<leftarrow> Load buffer) ;;\n                Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                 (high_var \\<leftarrow> Load temp);\n        \\<forall>x.\n           dma mem\\<^sub>1 x = Low \\<and>\n           (x = control_var \\<or>\n            x \\<notin> mds' AsmNoReadOrWrite) \\<longrightarrow>\n           mem\\<^sub>1 x = mem\\<^sub>2 x;\n        (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds', mem\\<^sub>1\\<rangle>,\n         \\<langle>(temp \\<leftarrow> Load buffer) ;;\n                  Stmt.If (Eq control_var 0)\n                   (low_var \\<leftarrow> Load temp)\n                   (high_var \\<leftarrow>\n                    Load temp), mds', mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        c\\<^sub>1 =\n        (temp \\<leftarrow> Load buffer) ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n        buffer \\<notin> mds' AsmNoReadOrWrite;\n        c\\<^sub>1' =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        mds = mds'; mem\\<^sub>1' = mem\\<^sub>1(temp := mem\\<^sub>1 buffer);\n        x \\<noteq> temp;\n        dma (mem\\<^sub>1(temp := mem\\<^sub>1 buffer)) x = Low;\n        x = control_var \\<or> x \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> mem\\<^sub>1 x = mem\\<^sub>2 x\n 2. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 8. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce simp: dma_def split: if_splits)[1]"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule inv\\<^sub>3', simp+)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             (temp \\<leftarrow> Load buffer) ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>(temp \\<leftarrow> Load buffer) ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     (temp \\<leftarrow> Load buffer) ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (temp := ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>1\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load buffer))\\<rangle>,\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds', mem\\<^sub>2\n                       (temp :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load buffer))\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv_init)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stop ;;\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>Stop ;;\n                       Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule seq_stop_elim, clarsimp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stop ;;\n                                   Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds, mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>1\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds, mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'505, mds, ?mem\\<^sub>2'507\\<rangle> \\<and>\n                      (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>?c\\<^sub>2'505, mds, ?mem\\<^sub>2'507\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(intro conjI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stop ;;\n                                Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'505, mds, ?mem\\<^sub>2'507\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>?c\\<^sub>2'505, mds, ?mem\\<^sub>2'507\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule seq_stop_eval\\<^sub>w)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(blast intro: inv.intros)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stop ;;\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stop ;;\n               Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stop ;;\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     mds' = mds; mem\\<^sub>1' = mem\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(auto intro: rel_inv.intros elim!: rel_inv.cases)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c =\n        Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n         (high_var \\<leftarrow> Load temp);\n        buffer \\<in> mdsa AsmNoWrite; temp \\<in> mdsa AsmNoReadOrWrite;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>Stmt.If (Eq control_var 0)\n                                    (low_var \\<leftarrow> Load temp)\n                                    (high_var \\<leftarrow>\n                                     Load temp), mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>Stmt.If (Eq control_var 0)\n                        (low_var \\<leftarrow> Load temp)\n                        (high_var \\<leftarrow>\n                         Load temp), mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(erule if_elim)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 3. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds, ?mem\\<^sub>2'854\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 3. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'852, mds', ?mem\\<^sub>2'854\\<rangle>)\n                      \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule if_eval\\<^sub>w)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> (mem\\<^sub>2 control_var = 0 \\<longrightarrow>\n                       (\\<langle>low_var \\<leftarrow>\n                                 Load temp, mds, mem\\<^sub>1\\<rangle>,\n                        \\<langle>low_var \\<leftarrow>\n                                 Load temp, mds, mem\\<^sub>2\\<rangle>)\n                       \\<in> R) \\<and>\n                      (0 < mem\\<^sub>2 control_var \\<longrightarrow>\n                       (\\<langle>low_var \\<leftarrow>\n                                 Load temp, mds, mem\\<^sub>1\\<rangle>,\n                        \\<langle>high_var \\<leftarrow>\n                                 Load temp, mds, mem\\<^sub>2\\<rangle>)\n                       \\<in> R)\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>2 control_var = 0 \\<longrightarrow>\n                      (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < mem\\<^sub>2 control_var \\<longrightarrow>\n                      (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule impI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds; mem\\<^sub>1 control_var = 0;\n     mem\\<^sub>2 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < mem\\<^sub>2 control_var \\<longrightarrow>\n                      (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds; mem\\<^sub>1 control_var = 0;\n     mem\\<^sub>2 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds; mem\\<^sub>1 control_var = 0;\n     mem\\<^sub>2 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < mem\\<^sub>2 control_var \\<longrightarrow>\n                      (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 4. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 7. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(blast intro: inv.intros)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds; mem\\<^sub>1 control_var = 0;\n     mem\\<^sub>2 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < mem\\<^sub>2 control_var \\<longrightarrow>\n                      (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 6. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(auto intro: rel_inv.intros elim!: rel_inv.cases)[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = low_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     mem\\<^sub>1 control_var = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < mem\\<^sub>2 control_var \\<longrightarrow>\n                      (\\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     \\<not> ev\\<^sub>B mem\\<^sub>1 (Eq control_var 0)\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load\ntemp, mds', mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>if ev\\<^sub>B mem\\<^sub>2 (Eq control_var 0)\n                                then low_var \\<leftarrow> Load temp\n                                else high_var \\<leftarrow>\n                                     Load temp, mds', mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(simp add: low_mds_eq_control_var_eq)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle> \\<and>\n                      (\\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>Stmt.If (Eq control_var 0)\n                                 (low_var \\<leftarrow> Load temp)\n                                 (high_var \\<leftarrow>\n                                  Load temp), mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule if_false_eval\\<^sub>w, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> local.inv\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule inv\\<^sub>6, (simp add: low_mds_eq_control_var_eq)+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 =\n             Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n              (high_var \\<leftarrow> Load temp);\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n                (high_var \\<leftarrow>\n                 Load temp), mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 =\n     Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n      (high_var \\<leftarrow> Load temp);\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = high_var \\<leftarrow> Load temp;\n     mem\\<^sub>1' = mem\\<^sub>1; mds' = mds;\n     0 < mem\\<^sub>2 control_var\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>1\\<rangle>,\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = low_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var = 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>low_var \\<leftarrow>\n                       Load temp, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>low_var \\<leftarrow>\n                                   Load temp, mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>low_var \\<leftarrow>\n                       Load temp, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule assign_elim)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>low_var \\<leftarrow>\n                                Load temp, mds', mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1241, mds', ?mem\\<^sub>2'1243\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule assign_eval\\<^sub>w)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     mem\\<^sub>1 control_var = 0; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(simp add: low_mds_eq_control_var_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> low_mds_eq mds'\n                       (mem\\<^sub>1\n                        (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp)))\n                       (mem\\<^sub>2\n                        (low_var := ev\\<^sub>A mem\\<^sub>2 (Load temp)))\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(clarsimp simp: low_mds_eq_def dma_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     \\<forall>x.\n        (if x = buffer then dma_control_var (mem\\<^sub>1 control_var)\n         else if x = high_var then High else Low) =\n        Low \\<and>\n        (x = control_var \\<or>\n         x \\<notin> mds' AsmNoReadOrWrite) \\<longrightarrow>\n        mem\\<^sub>1 x = mem\\<^sub>2 x;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop; mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp));\n     low_var \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> ev\\<^sub>A mem\\<^sub>1 (Load temp) =\n                      ev\\<^sub>A mem\\<^sub>2 (Load temp)\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(simp add: ev\\<^sub>A.simps)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     \\<forall>x.\n        (if x = buffer then dma_control_var (mem\\<^sub>1 control_var)\n         else if x = high_var then High else Low) =\n        Low \\<and>\n        (x = control_var \\<or>\n         x \\<notin> mds' AsmNoReadOrWrite) \\<longrightarrow>\n        mem\\<^sub>1 x = mem\\<^sub>2 x;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop; mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1(low_var := mem\\<^sub>1 temp);\n     low_var \\<notin> mds' AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>1 temp = mem\\<^sub>2 temp\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(clarsimp split: if_splits)[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x = high_var \\<or>\n                (x = buffer \\<longrightarrow>\n                 dma_control_var (mem\\<^sub>1 control_var) =\n                 Low \\<longrightarrow>\n                 mem\\<^sub>1 buffer = mem\\<^sub>2 buffer) \\<and>\n                (x = buffer \\<or>\n                 x \\<noteq> control_var \\<and>\n                 x \\<in> mds' AsmNoReadOrWrite \\<or>\n                 mem\\<^sub>1 x = mem\\<^sub>2 x);\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop; mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1(low_var := mem\\<^sub>1 temp);\n     low_var \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>2 = low_var \\<leftarrow> Load temp\\<rbrakk>\n    \\<Longrightarrow> mem\\<^sub>1 temp = mem\\<^sub>2 temp\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 5. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce elim: rel_inv.cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: inv.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = low_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>low_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = low_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     mem\\<^sub>2 control_var = 0; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (low_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (low_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = high_var \\<leftarrow> Load temp; buffer \\<in> mdsa AsmNoWrite;\n        temp \\<in> mdsa AsmNoReadOrWrite; mem control_var \\<noteq> 0;\n        buffer \\<notin> mdsa AsmNoReadOrWrite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>high_var \\<leftarrow>\n                       Load temp, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                         eval_abv\n                          \\<langle>high_var \\<leftarrow>\n                                   Load temp, mds, mem\\<^sub>2\\<rangle>\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                         (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                          \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                         \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule exI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>eval_abv\n              \\<langle>high_var \\<leftarrow>\n                       Load temp, mds, mem\\<^sub>1\\<rangle>\n              \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n     c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var;\n     buffer \\<notin> mds AsmNoReadOrWrite\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(drule assign_elim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle> \\<and>\n                      (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds, mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> eval_abv\n                       \\<langle>high_var \\<leftarrow>\n                                Load temp, mds', mem\\<^sub>2\\<rangle>\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>?c\\<^sub>2'1459, mds', ?mem\\<^sub>2'1461\\<rangle>)\n                      \\<in> R\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule assign_eval\\<^sub>w)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds, mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds AsmNoWrite; temp \\<in> mds AsmNoReadOrWrite;\n     0 < mem\\<^sub>1 control_var; buffer \\<notin> mds AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(simp add: low_mds_eq_control_var_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> R\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(rule R.intros, simp+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> low_mds_eq mds'\n                       (mem\\<^sub>1\n                        (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp)))\n                       (mem\\<^sub>2\n                        (high_var := ev\\<^sub>A mem\\<^sub>2 (Load temp)))\n 2. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 3. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 4. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(clarsimp simp: low_mds_eq_def dma_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(simp add: ev\\<^sub>A.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1(high_var := mem\\<^sub>1 temp)\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var := mem\\<^sub>1 temp)\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(clarsimp split: if_splits)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop; mds = mds';\n     mem\\<^sub>1' = mem\\<^sub>1(high_var := mem\\<^sub>1 temp)\\<rbrakk>\n    \\<Longrightarrow> local.inv \\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var := mem\\<^sub>1 temp)\\<rangle>\n 2. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 3. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: inv.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c\\<^sub>2 = high_var \\<leftarrow> Load temp;\n     low_mds_eq mds' mem\\<^sub>1 mem\\<^sub>2;\n     (\\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>1\\<rangle>,\n      \\<langle>high_var \\<leftarrow> Load temp, mds', mem\\<^sub>2\\<rangle>)\n     \\<in> rel_inv;\n     c\\<^sub>1 = high_var \\<leftarrow> Load temp;\n     buffer \\<in> mds' AsmNoWrite; temp \\<in> mds' AsmNoReadOrWrite;\n     0 < mem\\<^sub>2 control_var; buffer \\<notin> mds' AsmNoReadOrWrite;\n     c\\<^sub>1' = Stop \\<and>\n     mds = mds' \\<and>\n     mem\\<^sub>1' = mem\\<^sub>1\n     (high_var := ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>Stop, mds', mem\\<^sub>1\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>1 (Load temp))\\<rangle>,\n                       \\<langle>Stop, mds', mem\\<^sub>2\n                       (high_var :=\n                          ev\\<^sub>A mem\\<^sub>2 (Load temp))\\<rangle>)\n                      \\<in> rel_inv\n 2. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "apply(fastforce intro: rel_inv.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "using stop_no_eval"], ["proof (prove)\nusing this:\n  (\\<langle>Stop, ?mds, ?mem\\<rangle>, \\<langle>?c', ?mds', ?mem'\\<rangle>)\n  \\<notin> eval\\<^sub>w\n\ngoal (1 subgoal):\n 1. \\<And>c mdsa mem.\n       \\<lbrakk>eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n                 \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>;\n        c\\<^sub>2 = c\\<^sub>1; low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2;\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> rel_inv;\n        \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle> =\n        \\<langle>c, mdsa, mem\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>1, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "by fastforce"], ["", "lemma strong_low_bisim_mm_R:\n  \"strong_low_bisim_mm R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strong_low_bisim_mm R", "unfolding strong_low_bisim_mm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sym R \\<and>\n    closed_glob_consistent R \\<and>\n    (\\<forall>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n        (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n         \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n        \\<in> R \\<longrightarrow>\n        low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2 \\<and>\n        (\\<forall>c\\<^sub>1' mds' mem\\<^sub>1'.\n            eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n             \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle> \\<longrightarrow>\n            (\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                eval_abv \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                 \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                 \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                \\<in> R)))", "proof(safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. sym R\n 2. closed_glob_consistent R\n 3. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 4. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "show \"sym R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym R", "by(rule R_sym)"], ["proof (state)\nthis:\n  sym R\n\ngoal (3 subgoals):\n 1. closed_glob_consistent R\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 3. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. closed_glob_consistent R\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 3. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "show \"closed_glob_consistent R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_glob_consistent R", "by(rule R_closed_glob_consistent)"], ["proof (state)\nthis:\n  closed_glob_consistent R\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "fix c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2  mem\\<^sub>2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "assume \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>) \\<in> R\""], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n   \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n  \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2.\n       (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n        \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n       \\<in> R \\<Longrightarrow>\n       low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n 2. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "thus \"low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n   \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n  \\<in> R\n\ngoal (1 subgoal):\n 1. low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2", "by(rule R_low_mds_eq)"], ["proof (state)\nthis:\n  low_mds_eq mds mem\\<^sub>1 mem\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "fix c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2  mem\\<^sub>2 c\\<^sub>1' mds' mem\\<^sub>1'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "assume \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>) \\<in> R\"\n     and \"(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>, \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>) \\<in> eval\\<^sub>w\""], ["proof (state)\nthis:\n  (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n   \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n  \\<in> R\n  eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n   \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 mds mem\\<^sub>1 c\\<^sub>2 mem\\<^sub>2 c\\<^sub>1' mds'\n       mem\\<^sub>1'.\n       \\<lbrakk>(\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n                 \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n                \\<in> R;\n        eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n         \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n                            eval_abv\n                             \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n                            (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n                             \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n                            \\<in> R", "thus \"\\<exists>c\\<^sub>2' mem\\<^sub>2'.\n        (\\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>, \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>) \\<in> eval\\<^sub>w \\<and>\n        (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>, \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>) \\<in> R\""], ["proof (prove)\nusing this:\n  (\\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>,\n   \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>)\n  \\<in> R\n  eval_abv \\<langle>c\\<^sub>1, mds, mem\\<^sub>1\\<rangle>\n   \\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n       eval_abv \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n        \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n       (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n        \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n       \\<in> R", "by(rule R_inv)"], ["proof (state)\nthis:\n  \\<exists>c\\<^sub>2' mem\\<^sub>2'.\n     eval_abv \\<langle>c\\<^sub>2, mds, mem\\<^sub>2\\<rangle>\n      \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle> \\<and>\n     (\\<langle>c\\<^sub>1', mds', mem\\<^sub>1'\\<rangle>,\n      \\<langle>c\\<^sub>2', mds', mem\\<^sub>2'\\<rangle>)\n     \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma read_buffer_secure':\n  \"low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n       (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>, \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>,\n     \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>)\n    \\<in> R", "apply(rule R.intros)"], ["proof (prove)\ngoal (5 subgoals):\n 1. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    read_buffer = read_buffer\n 2. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    mds\\<^sub>s = mds\\<^sub>s\n 3. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2\n 4. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    local.inv \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\n 5. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>,\n     \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>)\n    \\<in> rel_inv", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    local.inv \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\n 2. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>,\n     \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>)\n    \\<in> rel_inv", "apply(rule inv\\<^sub>1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    read_buffer = read_buffer\n 2. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    mds\\<^sub>s AsmNoReadOrWrite = {}\n 3. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    mds\\<^sub>s AsmNoWrite = {}\n 4. low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>,\n     \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>)\n    \\<in> rel_inv", "apply (simp_all add: mds\\<^sub>s_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. low_mds_eq (\\<lambda>_. {}) mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>read_buffer, \\<lambda>_. {}, mem\\<^sub>1\\<rangle>,\n     \\<langle>read_buffer, \\<lambda>_. {}, mem\\<^sub>2\\<rangle>)\n    \\<in> rel_inv", "unfolding read_buffer_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. low_mds_eq (\\<lambda>_. {}) mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n    (\\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n              (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n              (temp \\<leftarrow> Load buffer) ;;\n              Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n               (high_var \\<leftarrow>\n                Load temp), \\<lambda>_. {}, mem\\<^sub>1\\<rangle>,\n     \\<langle>(Skip@[buffer +=\\<^sub>m AsmNoWrite]) ;;\n              (Skip@[temp +=\\<^sub>m AsmNoReadOrWrite]) ;;\n              (temp \\<leftarrow> Load buffer) ;;\n              Stmt.If (Eq control_var 0) (low_var \\<leftarrow> Load temp)\n               (high_var \\<leftarrow>\n                Load temp), \\<lambda>_. {}, mem\\<^sub>2\\<rangle>)\n    \\<in> rel_inv", "by(fastforce intro: rel_inv.intros)"], ["", "lemma \"com_sifum_secure (read_buffer,mds\\<^sub>s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. com_sifum_secure (read_buffer, mds\\<^sub>s)", "unfolding com_sifum_secure_def low_indistinguishable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (read_buffer, mds\\<^sub>s) of\n    (c, mds\\<^sub>s) \\<Rightarrow>\n      \\<forall>mem\\<^sub>1 mem\\<^sub>2.\n         low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<longrightarrow>\n         mm_equiv_abv \\<langle>c, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\n          \\<langle>c, mds\\<^sub>s, mem\\<^sub>2\\<rangle>", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem\\<^sub>1 mem\\<^sub>2.\n       low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n       mm_equiv_abv \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>\n        \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>", "apply(rule mm_equiv_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem\\<^sub>1 mem\\<^sub>2.\n       low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n       strong_low_bisim_mm (?\\<R>3 mem\\<^sub>1 mem\\<^sub>2)\n 2. \\<And>mem\\<^sub>1 mem\\<^sub>2.\n       low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n       (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>,\n        \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>)\n       \\<in> ?\\<R>3 mem\\<^sub>1 mem\\<^sub>2", "apply(rule strong_low_bisim_mm_R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem\\<^sub>1 mem\\<^sub>2.\n       low_mds_eq mds\\<^sub>s mem\\<^sub>1 mem\\<^sub>2 \\<Longrightarrow>\n       (\\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>1\\<rangle>,\n        \\<langle>read_buffer, mds\\<^sub>s, mem\\<^sub>2\\<rangle>)\n       \\<in> R", "by(rule read_buffer_secure')"], ["", "end"], ["", "end"]]}