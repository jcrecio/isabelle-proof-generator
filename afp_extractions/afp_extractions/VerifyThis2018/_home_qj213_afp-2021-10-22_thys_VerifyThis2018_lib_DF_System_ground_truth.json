{"file_name": "/home/qj213/afp-2021-10-22/thys/VerifyThis2018/lib/DF_System.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/VerifyThis2018", "problem_names": ["lemma reachable0[simp]: \"reachable s\\<^sub>0\"", "lemma is_invarI[intro?]: \n      \"\\<lbrakk> I s\\<^sub>0; \\<And>s s'. \\<lbrakk> reachable s; I s; step s s'\\<rbrakk> \\<Longrightarrow> I s' \\<rbrakk> \\<Longrightarrow> is_invar I\"", "lemma invar_reachable: \"is_invar I \\<Longrightarrow> reachable s \\<Longrightarrow> I s\"", "lemmas run_definitions = is_lrun_def is_run_def is_lfair_def is_fair_run_def", "lemma is_run_alt: \"is_run s \\<longleftrightarrow> s 0 = s\\<^sub>0 \\<and> (\\<forall>i. step (s i) (s (Suc i)))\"", "lemma fair_run_is_run: \"is_fair_run s \\<Longrightarrow> is_run s\"", "lemma fair_run_is_fair': \"is_fair_run s \\<Longrightarrow> is_fair' s\"", "lemma run0[simp]: \"s 0 = s\\<^sub>0\"", "lemma run_reachable[simp]: \"reachable (s i)\"", "lemma run_invar: \"is_invar I \\<Longrightarrow> I (s i)\"", "lemma stepE: obtains l where \"lstep l (s i) (s (Suc i))\"", "lemma next_step_step: \n      fixes i l\n      defines \"j\\<equiv>next_step_of l i\" \n      shows \"j \\<ge> i \\<and> (\\<not>can_step l (s j) \\<or> rstep l s j)\"", "lemma nso_nostep: \"\\<lbrakk> \\<not>rstep l s i; can_step l (s i)\\<rbrakk> \n      \\<Longrightarrow> next_step_of l (Suc i) = next_step_of l i\"", "lemma rstep_cases:\n      assumes \"can_step l (s i)\" \n      obtains\n        (other) l' where \"l\\<noteq>l'\" \"\\<not>rstep l s i\" \"rstep l' s i\" \"dist_step l (Suc i) < dist_step l i\"\n      | (this) \"rstep l s i\"", "lemma xfer_reachable: \n      assumes \"C.reachable cs\"\n      obtains as where \"R as cs\" \"A.reachable as\"", "lemma xfer_run:\n      assumes CRUN: \"C.is_run cs\"\n      obtains as where \"A.is_run as\" \"\\<forall>i. R (as i) (cs i)\"", "lemma xfer_fair_run:\n      assumes FAIR: \"C.is_fair_run cs\"\n      obtains as where \"A.is_fair_run as\" \"\\<forall>i. R (as i) (cs i)\"", "lemma sim_trans:\n    assumes \"simulation as\\<^sub>0 alstep bs\\<^sub>0 blstep R\\<^sub>1\"\n    assumes \"simulation bs\\<^sub>0 blstep cs\\<^sub>0 clstep R\\<^sub>2\"\n    shows \"simulation as\\<^sub>0 alstep cs\\<^sub>0 clstep (R\\<^sub>1 OO R\\<^sub>2)\"", "lemma simb': \"\\<lbrakk>A.reachable as; C.reachable cs; R as cs\\<rbrakk> \\<Longrightarrow> C.can_step l cs \\<longleftrightarrow> A.can_step l as\"", "lemma xfer_reachable_aux2: \n      assumes \"C.reachable cs\"\n      obtains as where \"R as cs\" \"A.reachable as\"", "lemma xfer_lrun_aux2:\n        assumes CRUN: \"C.is_lrun cl cs\"\n        obtains as where \"A.is_lrun cl as\" \"\\<forall>i. R (as i) (cs i)\"", "lemma xfer_run_aux2:\n      assumes CRUN: \"C.is_run cs\"\n      obtains as where \"A.is_run as\" \"\\<forall>i. R (as i) (cs i)\"", "lemma xfer_fair_run_aux2:\n      assumes FAIR: \"C.is_fair_run cs\"\n      obtains as where \"A.is_fair_run as\" \"\\<forall>i. R (as i) (cs i)\""], "translations": [["", "lemma reachable0[simp]: \"reachable s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable s\\<^sub>0", "unfolding reachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. step\\<^sup>*\\<^sup>* s\\<^sub>0 s\\<^sub>0", "by auto"], ["", "definition \"is_invar I \\<equiv> I s\\<^sub>0 \\<and> (\\<forall>s s'. reachable s \\<and> I s \\<and> step s s' \\<longrightarrow> I s')\""], ["", "lemma is_invarI[intro?]: \n      \"\\<lbrakk> I s\\<^sub>0; \\<And>s s'. \\<lbrakk> reachable s; I s; step s s'\\<rbrakk> \\<Longrightarrow> I s' \\<rbrakk> \\<Longrightarrow> is_invar I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I s\\<^sub>0;\n     \\<And>s s'.\n        \\<lbrakk>reachable s; I s; step s s'\\<rbrakk>\n        \\<Longrightarrow> I s'\\<rbrakk>\n    \\<Longrightarrow> is_invar I", "by (auto simp: is_invar_def)"], ["", "lemma invar_reachable: \"is_invar I \\<Longrightarrow> reachable s \\<Longrightarrow> I s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_invar I; reachable s\\<rbrakk> \\<Longrightarrow> I s", "unfolding reachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_invar I; step\\<^sup>*\\<^sup>* s\\<^sub>0 s\\<rbrakk>\n    \\<Longrightarrow> I s", "apply (rotate_tac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>step\\<^sup>*\\<^sup>* s\\<^sub>0 s; is_invar I\\<rbrakk>\n    \\<Longrightarrow> I s", "(** Seriously? *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>step\\<^sup>*\\<^sup>* s\\<^sub>0 s; is_invar I\\<rbrakk>\n    \\<Longrightarrow> I s", "apply (induction rule: rtranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_invar I \\<Longrightarrow> I s\\<^sub>0\n 2. \\<And>y z.\n       \\<lbrakk>step\\<^sup>*\\<^sup>* s\\<^sub>0 y; step y z;\n        is_invar I \\<Longrightarrow> I y; is_invar I\\<rbrakk>\n       \\<Longrightarrow> I z", "unfolding is_invar_def reachable_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. I s\\<^sub>0 \\<and>\n    (\\<forall>s s'.\n        step\\<^sup>*\\<^sup>* s\\<^sub>0 s \\<and>\n        I s \\<and> step s s' \\<longrightarrow>\n        I s') \\<Longrightarrow>\n    I s\\<^sub>0\n 2. \\<And>y z.\n       \\<lbrakk>step\\<^sup>*\\<^sup>* s\\<^sub>0 y; step y z;\n        I s\\<^sub>0 \\<and>\n        (\\<forall>s s'.\n            step\\<^sup>*\\<^sup>* s\\<^sub>0 s \\<and>\n            I s \\<and> step s s' \\<longrightarrow>\n            I s') \\<Longrightarrow>\n        I y;\n        I s\\<^sub>0 \\<and>\n        (\\<forall>s s'.\n            step\\<^sup>*\\<^sup>* s\\<^sub>0 s \\<and>\n            I s \\<and> step s s' \\<longrightarrow>\n            I s')\\<rbrakk>\n       \\<Longrightarrow> I z", "by auto"], ["", "definition \"can_step l s \\<equiv> \\<exists>s'. lstep l s s'\""], ["", "end"], ["", "section \\<open>Deadlock Free Transition System\\<close>"], ["", "locale df_system = system +\n    assumes no_deadlock: \"reachable s \\<Longrightarrow> \\<exists>s'. step s s'\"\n  begin"], ["", "paragraph \\<open>Runs\\<close>"], ["", "definition \"is_lrun l s \\<equiv> s 0 = s\\<^sub>0 \\<and> (\\<forall>i. lstep (l i) (s i) (s (Suc i)))\""], ["", "definition \"is_run s \\<equiv> \\<exists>l. is_lrun l s\""], ["", "paragraph \\<open>Weak Fairness\\<close>"], ["", "definition \"is_lfair ls ss \\<equiv> \\<forall>l i. \\<exists>j\\<ge>i. \\<not>can_step l (ss j) \\<or> ls j = l\""], ["", "definition \"is_fair_run s \\<equiv> \\<exists>l. is_lrun l s \\<and> is_lfair l s\""], ["", "text \\<open>Definitions of runs. Used e.g. to clarify TCB of lemmas over systems.\\<close>"], ["", "lemmas run_definitions = is_lrun_def is_run_def is_lfair_def is_fair_run_def"], ["", "lemma is_run_alt: \"is_run s \\<longleftrightarrow> s 0 = s\\<^sub>0 \\<and> (\\<forall>i. step (s i) (s (Suc i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run s = (s 0 = s\\<^sub>0 \\<and> (\\<forall>i. step (s i) (s (Suc i))))", "unfolding is_run_def is_lrun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l.\n        s 0 = s\\<^sub>0 \\<and>\n        (\\<forall>i. lstep (l i) (s i) (s (Suc i)))) =\n    (s 0 = s\\<^sub>0 \\<and> (\\<forall>i. step (s i) (s (Suc i))))", "by metis"], ["", "definition \"rstep l s i \\<equiv> lstep l (s i) (s (Suc i))\""], ["", "lemma fair_run_is_run: \"is_fair_run s \\<Longrightarrow> is_run s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fair_run s \\<Longrightarrow> is_run s", "using is_fair_run_def is_run_def"], ["proof (prove)\nusing this:\n  is_fair_run ?s \\<equiv> \\<exists>l. is_lrun l ?s \\<and> is_lfair l ?s\n  is_run ?s \\<equiv> \\<exists>l. is_lrun l ?s\n\ngoal (1 subgoal):\n 1. is_fair_run s \\<Longrightarrow> is_run s", "by blast"], ["", "text \\<open>Weaker fairness criterion, used internally in proofs only.\\<close>"], ["", "definition \"is_fair' s \\<equiv> \\<forall>l i. \\<exists>j\\<ge>i. \\<not>can_step l (s j) \\<or> rstep l s j\""], ["", "lemma fair_run_is_fair': \"is_fair_run s \\<Longrightarrow> is_fair' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fair_run s \\<Longrightarrow> is_fair' s", "unfolding is_fair_run_def is_run_def is_lrun_def is_fair'_def is_lfair_def rstep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (s 0 = s\\<^sub>0 \\<and>\n        (\\<forall>i. lstep (l i) (s i) (s (Suc i)))) \\<and>\n       (\\<forall>la i.\n           \\<exists>j\\<ge>i.\n              \\<not> can_step la (s j) \\<or> l j = la) \\<Longrightarrow>\n    \\<forall>l i.\n       \\<exists>j\\<ge>i.\n          \\<not> can_step l (s j) \\<or> lstep l (s j) (s (Suc j))", "by metis"], ["", "end"], ["", "subsection \\<open>Run\\<close>"], ["", "locale run = df_system +\n    fixes s\n    assumes RUN: \"is_run s\"\n  begin"], ["", "lemma run0[simp]: \"s 0 = s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s 0 = s\\<^sub>0", "using RUN"], ["proof (prove)\nusing this:\n  is_run s\n\ngoal (1 subgoal):\n 1. s 0 = s\\<^sub>0", "by (auto simp: is_run_alt)"], ["", "lemma run_reachable[simp]: \"reachable (s i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable (s i)", "apply (induction i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. reachable (s 0)\n 2. \\<And>i. reachable (s i) \\<Longrightarrow> reachable (s (Suc i))", "using RUN"], ["proof (prove)\nusing this:\n  is_run s\n\ngoal (2 subgoals):\n 1. reachable (s 0)\n 2. \\<And>i. reachable (s i) \\<Longrightarrow> reachable (s (Suc i))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>reachable (s i); is_run s\\<rbrakk>\n       \\<Longrightarrow> reachable (s (Suc i))", "unfolding is_run_alt reachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>step\\<^sup>*\\<^sup>* s\\<^sub>0 (s i);\n        s 0 = s\\<^sub>0 \\<and> (\\<forall>i. step (s i) (s (Suc i)))\\<rbrakk>\n       \\<Longrightarrow> step\\<^sup>*\\<^sup>* s\\<^sub>0 (s (Suc i))", "by (auto simp: rtranclp.rtrancl_into_rtrancl)"], ["", "lemma run_invar: \"is_invar I \\<Longrightarrow> I (s i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_invar I \\<Longrightarrow> I (s i)", "using run_reachable invar_reachable"], ["proof (prove)\nusing this:\n  reachable (s ?i)\n  \\<lbrakk>is_invar ?I; reachable ?s\\<rbrakk> \\<Longrightarrow> ?I ?s\n\ngoal (1 subgoal):\n 1. is_invar I \\<Longrightarrow> I (s i)", "by blast"], ["", "lemma stepE: obtains l where \"lstep l (s i) (s (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        lstep l (s i) (s (Suc i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using RUN"], ["proof (prove)\nusing this:\n  is_run s\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        lstep l (s i) (s (Suc i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: is_run_alt)"], ["", "end"], ["", "subsection \\<open>Fair Run\\<close>"], ["", "locale fair_run = df_system +\n    fixes s\n    assumes FAIR: \"is_fair_run s\"\n  begin"], ["", "sublocale run"], ["proof (prove)\ngoal (1 subgoal):\n 1. run s\\<^sub>0 lstep s", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run s", "using FAIR fair_run_is_run"], ["proof (prove)\nusing this:\n  is_fair_run s\n  is_fair_run ?s \\<Longrightarrow> is_run ?s\n\ngoal (1 subgoal):\n 1. is_run s", "by blast"], ["", "definition \"next_step_of l i \\<equiv> LEAST j. j\\<ge>i \\<and> (\\<not>can_step l (s j) \\<or> rstep l s j)\""], ["", "lemma next_step_step: \n      fixes i l\n      defines \"j\\<equiv>next_step_of l i\" \n      shows \"j \\<ge> i \\<and> (\\<not>can_step l (s j) \\<or> rstep l s j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)", "using fair_run_is_fair'[OF FAIR]"], ["proof (prove)\nusing this:\n  is_fair' s\n\ngoal (1 subgoal):\n 1. i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)", "unfolding is_fair'_def"], ["proof (prove)\nusing this:\n  \\<forall>l i. \\<exists>j\\<ge>i. \\<not> can_step l (s j) \\<or> rstep l s j\n\ngoal (1 subgoal):\n 1. i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)", "unfolding next_step_of_def j_def"], ["proof (prove)\nusing this:\n  \\<forall>l i. \\<exists>j\\<ge>i. \\<not> can_step l (s j) \\<or> rstep l s j\n\ngoal (1 subgoal):\n 1. i \\<le> (LEAST j.\n                i \\<le> j \\<and>\n                (\\<not> can_step l (s j) \\<or> rstep l s j)) \\<and>\n    (\\<not> can_step l\n             (s (LEAST j.\n                    i \\<le> j \\<and>\n                    (\\<not> can_step l (s j) \\<or> rstep l s j))) \\<or>\n     rstep l s\n      (LEAST j.\n          i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l i.\n       \\<exists>j\\<ge>i.\n          \\<not> can_step l (s j) \\<or> rstep l s j \\<Longrightarrow>\n    i \\<le> (LEAST j.\n                i \\<le> j \\<and>\n                (\\<not> can_step l (s j) \\<or> rstep l s j)) \\<and>\n    (\\<not> can_step l\n             (s (LEAST j.\n                    i \\<le> j \\<and>\n                    (\\<not> can_step l (s j) \\<or> rstep l s j))) \\<or>\n     rstep l s\n      (LEAST j.\n          i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)))", "using LeastI_ex[where P=\"\\<lambda>j. j\\<ge>i \\<and> (\\<not>can_step l (s j) \\<or> rstep l s j)\"]"], ["proof (prove)\nusing this:\n  \\<exists>x\\<ge>i.\n     \\<not> can_step l (s x) \\<or> rstep l s x \\<Longrightarrow>\n  i \\<le> (LEAST j.\n              i \\<le> j \\<and>\n              (\\<not> can_step l (s j) \\<or> rstep l s j)) \\<and>\n  (\\<not> can_step l\n           (s (LEAST j.\n                  i \\<le> j \\<and>\n                  (\\<not> can_step l (s j) \\<or> rstep l s j))) \\<or>\n   rstep l s\n    (LEAST j. i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)))\n\ngoal (1 subgoal):\n 1. \\<forall>l i.\n       \\<exists>j\\<ge>i.\n          \\<not> can_step l (s j) \\<or> rstep l s j \\<Longrightarrow>\n    i \\<le> (LEAST j.\n                i \\<le> j \\<and>\n                (\\<not> can_step l (s j) \\<or> rstep l s j)) \\<and>\n    (\\<not> can_step l\n             (s (LEAST j.\n                    i \\<le> j \\<and>\n                    (\\<not> can_step l (s j) \\<or> rstep l s j))) \\<or>\n     rstep l s\n      (LEAST j.\n          i \\<le> j \\<and> (\\<not> can_step l (s j) \\<or> rstep l s j)))", "by (auto)"], ["", "definition \"dist_step l i \\<equiv> next_step_of l i - i\""], ["", "lemma nso_nostep: \"\\<lbrakk> \\<not>rstep l s i; can_step l (s i)\\<rbrakk> \n      \\<Longrightarrow> next_step_of l (Suc i) = next_step_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> rstep l s i; can_step l (s i)\\<rbrakk>\n    \\<Longrightarrow> next_step_of l (Suc i) = next_step_of l i", "unfolding next_step_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> rstep l s i; can_step l (s i)\\<rbrakk>\n    \\<Longrightarrow> (LEAST j.\n                          Suc i \\<le> j \\<and>\n                          (\\<not> can_step l (s j) \\<or> rstep l s j)) =\n                      (LEAST j.\n                          i \\<le> j \\<and>\n                          (\\<not> can_step l (s j) \\<or> rstep l s j))", "by (metis (full_types) Suc_leD dual_order.antisym not_less_eq_eq)"], ["", "lemma rstep_cases:\n      assumes \"can_step l (s i)\" \n      obtains\n        (other) l' where \"l\\<noteq>l'\" \"\\<not>rstep l s i\" \"rstep l' s i\" \"dist_step l (Suc i) < dist_step l i\"\n      | (this) \"rstep l s i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l \\<noteq> l'; \\<not> rstep l s i; rstep l' s i;\n                 dist_step l (Suc i) < dist_step l i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     rstep l s i \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"rstep l s i\"; clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n                 dist_step l (Suc i) < dist_step l i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> rstep l s i\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule nso_nostep)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>l'.\n        \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n         dist_step l (Suc i) < dist_step l i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    can_step l (s i)\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n                 dist_step l (Suc i) < dist_step l i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     next_step_of l (Suc i) = next_step_of l i\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding dist_step_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>l'.\n        \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n         next_step_of l (Suc i) - Suc i < next_step_of l i - i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    can_step l (s i)\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n                 next_step_of l (Suc i) - Suc i\n                 < next_step_of l i - i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     next_step_of l (Suc i) = next_step_of l i\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  can_step l (s i)\n\ngoal (2 subgoals):\n 1. (\\<And>l'.\n        \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n         next_step_of l (Suc i) - Suc i < next_step_of l i - i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    can_step l (s i)\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n                 next_step_of l (Suc i) - Suc i\n                 < next_step_of l i - i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     next_step_of l (Suc i) = next_step_of l i\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l \\<noteq> l'; rstep l' s i;\n                 next_step_of l (Suc i) - Suc i\n                 < next_step_of l i - i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     next_step_of l (Suc i) = next_step_of l i\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis RUN diff_commute diff_diff_cancel is_run_alt less_Suc_eq next_step_step rstep_def that(2) zero_less_diff)"], ["", "end"], ["", "section \\<open>Simulation\\<close>"], ["", "locale simulation =\n    A: df_system as\\<^sub>0 alstep + C: df_system cs\\<^sub>0 clstep \n      for as\\<^sub>0 :: 'a \n      and alstep :: \"'l \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" \n      and cs\\<^sub>0 :: 'c \n      and clstep :: \"'l \\<Rightarrow> 'c \\<Rightarrow> 'c \\<Rightarrow> bool\"\n  + fixes R\n    assumes xfer_reachable_aux: \"C.reachable c \\<Longrightarrow> \\<exists>a. R a c \\<and> A.reachable a\" (* TODO: Redundant, can be derived from xfer_run. *)\n    assumes xfer_run_aux: \"C.is_run cs \\<Longrightarrow> \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_run as\"\n    assumes xfer_fair_run_aux: \"C.is_fair_run cs \\<Longrightarrow> \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as\"\n  begin"], ["", "lemma xfer_reachable: \n      assumes \"C.reachable cs\"\n      obtains as where \"R as cs\" \"A.reachable as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>R as cs; A.reachable as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms xfer_reachable_aux"], ["proof (prove)\nusing this:\n  C.reachable cs\n  C.reachable ?c \\<Longrightarrow> \\<exists>a. R a ?c \\<and> A.reachable a\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>R as cs; A.reachable as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma xfer_run:\n      assumes CRUN: \"C.is_run cs\"\n      obtains as where \"A.is_run as\" \"\\<forall>i. R (as i) (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xfer_run_aux assms"], ["proof (prove)\nusing this:\n  C.is_run ?cs \\<Longrightarrow>\n  \\<exists>as. (\\<forall>i. R (as i) (?cs i)) \\<and> A.is_run as\n  C.is_run cs\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma xfer_fair_run:\n      assumes FAIR: \"C.is_fair_run cs\"\n      obtains as where \"A.is_fair_run as\" \"\\<forall>i. R (as i) (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xfer_fair_run_aux assms"], ["proof (prove)\nusing this:\n  C.is_fair_run ?cs \\<Longrightarrow>\n  \\<exists>as. (\\<forall>i. R (as i) (?cs i)) \\<and> A.is_fair_run as\n  C.is_fair_run cs\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "end"], ["", "lemma sim_trans:\n    assumes \"simulation as\\<^sub>0 alstep bs\\<^sub>0 blstep R\\<^sub>1\"\n    assumes \"simulation bs\\<^sub>0 blstep cs\\<^sub>0 clstep R\\<^sub>2\"\n    shows \"simulation as\\<^sub>0 alstep cs\\<^sub>0 clstep (R\\<^sub>1 OO R\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation as\\<^sub>0 alstep cs\\<^sub>0 clstep (R\\<^sub>1 OO R\\<^sub>2)", "using assms"], ["proof (prove)\nusing this:\n  simulation as\\<^sub>0 alstep bs\\<^sub>0 blstep R\\<^sub>1\n  simulation bs\\<^sub>0 blstep cs\\<^sub>0 clstep R\\<^sub>2\n\ngoal (1 subgoal):\n 1. simulation as\\<^sub>0 alstep cs\\<^sub>0 clstep (R\\<^sub>1 OO R\\<^sub>2)", "unfolding simulation_def simulation_axioms_def"], ["proof (prove)\nusing this:\n  df_system as\\<^sub>0 alstep \\<and>\n  df_system bs\\<^sub>0 blstep \\<and>\n  (\\<forall>c.\n      system.reachable bs\\<^sub>0 blstep c \\<longrightarrow>\n      (\\<exists>a.\n          R\\<^sub>1 a c \\<and> system.reachable as\\<^sub>0 alstep a)) \\<and>\n  (\\<forall>cs.\n      df_system.is_run bs\\<^sub>0 blstep cs \\<longrightarrow>\n      (\\<exists>as.\n          (\\<forall>i. R\\<^sub>1 (as i) (cs i)) \\<and>\n          df_system.is_run as\\<^sub>0 alstep as)) \\<and>\n  (\\<forall>cs.\n      df_system.is_fair_run bs\\<^sub>0 blstep cs \\<longrightarrow>\n      (\\<exists>as.\n          (\\<forall>i. R\\<^sub>1 (as i) (cs i)) \\<and>\n          df_system.is_fair_run as\\<^sub>0 alstep as))\n  df_system bs\\<^sub>0 blstep \\<and>\n  df_system cs\\<^sub>0 clstep \\<and>\n  (\\<forall>c.\n      system.reachable cs\\<^sub>0 clstep c \\<longrightarrow>\n      (\\<exists>a.\n          R\\<^sub>2 a c \\<and> system.reachable bs\\<^sub>0 blstep a)) \\<and>\n  (\\<forall>cs.\n      df_system.is_run cs\\<^sub>0 clstep cs \\<longrightarrow>\n      (\\<exists>as.\n          (\\<forall>i. R\\<^sub>2 (as i) (cs i)) \\<and>\n          df_system.is_run bs\\<^sub>0 blstep as)) \\<and>\n  (\\<forall>cs.\n      df_system.is_fair_run cs\\<^sub>0 clstep cs \\<longrightarrow>\n      (\\<exists>as.\n          (\\<forall>i. R\\<^sub>2 (as i) (cs i)) \\<and>\n          df_system.is_fair_run bs\\<^sub>0 blstep as))\n\ngoal (1 subgoal):\n 1. df_system as\\<^sub>0 alstep \\<and>\n    df_system cs\\<^sub>0 clstep \\<and>\n    (\\<forall>c.\n        system.reachable cs\\<^sub>0 clstep c \\<longrightarrow>\n        (\\<exists>a.\n            (R\\<^sub>1 OO R\\<^sub>2) a c \\<and>\n            system.reachable as\\<^sub>0 alstep a)) \\<and>\n    (\\<forall>cs.\n        df_system.is_run cs\\<^sub>0 clstep cs \\<longrightarrow>\n        (\\<exists>as.\n            (\\<forall>i. (R\\<^sub>1 OO R\\<^sub>2) (as i) (cs i)) \\<and>\n            df_system.is_run as\\<^sub>0 alstep as)) \\<and>\n    (\\<forall>cs.\n        df_system.is_fair_run cs\\<^sub>0 clstep cs \\<longrightarrow>\n        (\\<exists>as.\n            (\\<forall>i. (R\\<^sub>1 OO R\\<^sub>2) (as i) (cs i)) \\<and>\n            df_system.is_fair_run as\\<^sub>0 alstep as))", "by (auto simp: OO_def; metis)"], ["", "(* Locale to introduce simulation by local argument *)"], ["", "locale simulationI =\n    A: df_system as\\<^sub>0 alstep + C: system cs\\<^sub>0 clstep \n      for as\\<^sub>0 :: 'a \n      and alstep :: \"'l \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" \n      and cs\\<^sub>0 :: 'c \n      and clstep :: \"'l \\<Rightarrow> 'c \\<Rightarrow> 'c \\<Rightarrow> bool\"\n  + fixes R\n    assumes sim0: \"R as\\<^sub>0 cs\\<^sub>0\"\n    assumes sims: \"\\<lbrakk>A.reachable as; C.reachable cs; R as cs; clstep l cs cs'\\<rbrakk> \n      \\<Longrightarrow> \\<exists>as'. R as' cs' \\<and> alstep l as as'\"\n    assumes simb: \"\\<lbrakk>A.reachable as; C.reachable cs; R as cs; A.can_step l as\\<rbrakk> \\<Longrightarrow> C.can_step l cs\"\n  begin"], ["", "lemma simb': \"\\<lbrakk>A.reachable as; C.reachable cs; R as cs\\<rbrakk> \\<Longrightarrow> C.can_step l cs \\<longleftrightarrow> A.can_step l as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A.reachable as; C.reachable cs; R as cs\\<rbrakk>\n    \\<Longrightarrow> C.can_step l cs = A.can_step l as", "using simb sims"], ["proof (prove)\nusing this:\n  \\<lbrakk>A.reachable ?as; C.reachable ?cs; R ?as ?cs;\n   A.can_step ?l ?as\\<rbrakk>\n  \\<Longrightarrow> C.can_step ?l ?cs\n  \\<lbrakk>A.reachable ?as; C.reachable ?cs; R ?as ?cs;\n   clstep ?l ?cs ?cs'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'. R as' ?cs' \\<and> alstep ?l ?as as'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A.reachable as; C.reachable cs; R as cs\\<rbrakk>\n    \\<Longrightarrow> C.can_step l cs = A.can_step l as", "by (fastforce simp: A.can_step_def C.can_step_def)"], ["", "lemma xfer_reachable_aux2: \n      assumes \"C.reachable cs\"\n      obtains as where \"R as cs\" \"A.reachable as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>R as cs; A.reachable as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>R as cs; A.reachable as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  C.reachable cs", "have \"\\<exists>as. R as cs \\<and> A.reachable as\""], ["proof (prove)\nusing this:\n  C.reachable cs\n\ngoal (1 subgoal):\n 1. \\<exists>as. R as cs \\<and> A.reachable as", "unfolding C.reachable_def"], ["proof (prove)\nusing this:\n  C.step\\<^sup>*\\<^sup>* cs\\<^sub>0 cs\n\ngoal (1 subgoal):\n 1. \\<exists>as. R as cs \\<and> A.reachable as", "apply (induction)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>as. R as cs\\<^sub>0 \\<and> A.reachable as\n 2. \\<And>y z.\n       \\<lbrakk>C.step\\<^sup>*\\<^sup>* cs\\<^sub>0 y; C.step y z;\n        \\<exists>as. R as y \\<and> A.reachable as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as. R as z \\<and> A.reachable as", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as. R as cs\\<^sub>0 \\<and> A.reachable as", "using sim0 A.reachable0"], ["proof (prove)\nusing this:\n  R as\\<^sub>0 cs\\<^sub>0\n  A.reachable as\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<exists>as. R as cs\\<^sub>0 \\<and> A.reachable as", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>C.step\\<^sup>*\\<^sup>* cs\\<^sub>0 y; C.step y z;\n        \\<exists>as. R as y \\<and> A.reachable as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as. R as z \\<and> A.reachable as", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z l as.\n       \\<lbrakk>C.step\\<^sup>*\\<^sup>* cs\\<^sub>0 y; clstep l y z; R as y;\n        A.reachable as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as. R as z \\<and> A.reachable as", "subgoal for cs cs' l as"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C.step\\<^sup>*\\<^sup>* cs\\<^sub>0 cs; clstep l cs cs'; R as cs;\n     A.reachable as\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as. R as cs' \\<and> A.reachable as", "using sims[of as cs l cs']"], ["proof (prove)\nusing this:\n  \\<lbrakk>A.reachable as; C.reachable cs; R as cs; clstep l cs cs'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'. R as' cs' \\<and> alstep l as as'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>C.step\\<^sup>*\\<^sup>* cs\\<^sub>0 cs; clstep l cs cs'; R as cs;\n     A.reachable as\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as. R as cs' \\<and> A.reachable as", "by (auto simp: C.reachable_def A.reachable_def intro: rtranclp.rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>as. R as cs \\<and> A.reachable as\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>R as cs; A.reachable as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>R ?as1 cs; A.reachable ?as1\\<rbrakk> \\<Longrightarrow> thesis\n  \\<exists>as. R as cs \\<and> A.reachable as", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>R ?as1 cs; A.reachable ?as1\\<rbrakk> \\<Longrightarrow> thesis\n  \\<exists>as. R as cs \\<and> A.reachable as\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale C: df_system cs\\<^sub>0 clstep"], ["proof (prove)\ngoal (1 subgoal):\n 1. df_system cs\\<^sub>0 clstep", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. C.reachable s \\<Longrightarrow> \\<exists>s'. C.step s s'", "by (metis A.no_deadlock xfer_reachable_aux2 simb system.can_step_def)"], ["", "context begin"], ["", "private"], ["", "primrec arun where\n        \"arun cl cs 0 = as\\<^sub>0\"\n      | \"arun cl cs (Suc i) = (SOME as. C.rstep (cl i) cs i \\<and> alstep (cl i) (arun cl cs i) as  \\<and> R as (cs (Suc i)))\""], ["", "lemma xfer_lrun_aux2:\n        assumes CRUN: \"C.is_lrun cl cs\"\n        obtains as where \"A.is_lrun cl as\" \"\\<forall>i. R (as i) (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from CRUN"], ["proof (chain)\npicking this:\n  C.is_lrun cl cs", "have \"C.is_run cs\""], ["proof (prove)\nusing this:\n  C.is_lrun cl cs\n\ngoal (1 subgoal):\n 1. C.is_run cs", "by (auto simp: C.is_run_def)"], ["proof (state)\nthis:\n  C.is_run cs\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret C: run cs\\<^sub>0 clstep cs"], ["proof (prove)\ngoal (1 subgoal):\n 1. run cs\\<^sub>0 clstep cs", "by unfold_locales fact"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have X1: \"alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and> A.reachable (arun cl cs i) \\<and> R (arun cl cs (Suc i)) (cs (Suc i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n    A.reachable (arun cl cs i) \\<and> R (arun cl cs (Suc i)) (cs (Suc i))", "proof (induction i rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n          A.reachable (arun cl cs m) \\<and>\n          R (arun cl cs (Suc m)) (cs (Suc m)) \\<Longrightarrow>\n       alstep (cl n) (arun cl cs n) (arun cl cs (Suc n)) \\<and>\n       A.reachable (arun cl cs n) \\<and> R (arun cl cs (Suc n)) (cs (Suc n))", "case (1 i)"], ["proof (state)\nthis:\n  \\<forall>m<i.\n     alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n     A.reachable (arun cl cs m) \\<and> R (arun cl cs (Suc m)) (cs (Suc m))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n          A.reachable (arun cl cs m) \\<and>\n          R (arun cl cs (Suc m)) (cs (Suc m)) \\<Longrightarrow>\n       alstep (cl n) (arun cl cs n) (arun cl cs (Suc n)) \\<and>\n       A.reachable (arun cl cs n) \\<and> R (arun cl cs (Suc n)) (cs (Suc n))", "have CR: \"C.reachable (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.reachable (cs i)", "using C.run_reachable"], ["proof (prove)\nusing this:\n  C.reachable (cs ?i)\n\ngoal (1 subgoal):\n 1. C.reachable (cs i)", "."], ["proof (state)\nthis:\n  C.reachable (cs i)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n          A.reachable (arun cl cs m) \\<and>\n          R (arun cl cs (Suc m)) (cs (Suc m)) \\<Longrightarrow>\n       alstep (cl n) (arun cl cs n) (arun cl cs (Suc n)) \\<and>\n       A.reachable (arun cl cs n) \\<and> R (arun cl cs (Suc n)) (cs (Suc n))", "have CS: \"clstep (cl i) (cs i) (cs (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clstep (cl i) (cs i) (cs (Suc i))", "using CRUN"], ["proof (prove)\nusing this:\n  C.is_lrun cl cs\n\ngoal (1 subgoal):\n 1. clstep (cl i) (cs i) (cs (Suc i))", "by (auto simp: C.is_lrun_def)"], ["proof (state)\nthis:\n  clstep (cl i) (cs i) (cs (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n          A.reachable (arun cl cs m) \\<and>\n          R (arun cl cs (Suc m)) (cs (Suc m)) \\<Longrightarrow>\n       alstep (cl n) (arun cl cs n) (arun cl cs (Suc n)) \\<and>\n       A.reachable (arun cl cs n) \\<and> R (arun cl cs (Suc n)) (cs (Suc n))", "have AX: \"A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "then"], ["proof (chain)\npicking this:\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "by (auto simp: CRUN sim0)"], ["proof (state)\nthis:\n  A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "case [simp]: (Suc i')"], ["proof (state)\nthis:\n  i = Suc i'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "from \"1.IH\"[THEN spec, of i']"], ["proof (chain)\npicking this:\n  i' < i \\<longrightarrow>\n  alstep (cl i') (arun cl cs i') (arun cl cs (Suc i')) \\<and>\n  A.reachable (arun cl cs i') \\<and> R (arun cl cs (Suc i')) (cs (Suc i'))", "show ?thesis"], ["proof (prove)\nusing this:\n  i' < i \\<longrightarrow>\n  alstep (cl i') (arun cl cs i') (arun cl cs (Suc i')) \\<and>\n  A.reachable (arun cl cs i') \\<and> R (arun cl cs (Suc i')) (cs (Suc i'))\n\ngoal (1 subgoal):\n 1. A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "by (auto simp del: arun.simps simp: A.reachable_def \n                intro: rtranclp.rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n          A.reachable (arun cl cs m) \\<and>\n          R (arun cl cs (Suc m)) (cs (Suc m)) \\<Longrightarrow>\n       alstep (cl n) (arun cl cs n) (arun cl cs (Suc n)) \\<and>\n       A.reachable (arun cl cs n) \\<and> R (arun cl cs (Suc n)) (cs (Suc n))", "from sims[OF _ CR _ CS, of \"arun cl cs i\"] AX"], ["proof (chain)\npicking this:\n  \\<lbrakk>A.reachable (arun cl cs i); R (arun cl cs i) (cs i)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       R as' (cs (Suc i)) \\<and>\n                       alstep (cl i) (arun cl cs i) as'\n  A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)", "obtain asi where\n            \"R asi (cs (Suc i))\" \"alstep (cl i) (arun cl cs i) asi\""], ["proof (prove)\nusing this:\n  \\<lbrakk>A.reachable (arun cl cs i); R (arun cl cs i) (cs i)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       R as' (cs (Suc i)) \\<and>\n                       alstep (cl i) (arun cl cs i) as'\n  A.reachable (arun cl cs i) \\<and> R (arun cl cs i) (cs i)\n\ngoal (1 subgoal):\n 1. (\\<And>asi.\n        \\<lbrakk>R asi (cs (Suc i));\n         alstep (cl i) (arun cl cs i) asi\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  R asi (cs (Suc i))\n  alstep (cl i) (arun cl cs i) asi\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          alstep (cl m) (arun cl cs m) (arun cl cs (Suc m)) \\<and>\n          A.reachable (arun cl cs m) \\<and>\n          R (arun cl cs (Suc m)) (cs (Suc m)) \\<Longrightarrow>\n       alstep (cl n) (arun cl cs n) (arun cl cs (Suc n)) \\<and>\n       A.reachable (arun cl cs n) \\<and> R (arun cl cs (Suc n)) (cs (Suc n))", "then"], ["proof (chain)\npicking this:\n  R asi (cs (Suc i))\n  alstep (cl i) (arun cl cs i) asi", "show ?case"], ["proof (prove)\nusing this:\n  R asi (cs (Suc i))\n  alstep (cl i) (arun cl cs i) asi\n\ngoal (1 subgoal):\n 1. alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n    A.reachable (arun cl cs i) \\<and> R (arun cl cs (Suc i)) (cs (Suc i))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R asi (cs (Suc i)); alstep (cl i) (arun cl cs i) asi\\<rbrakk>\n    \\<Longrightarrow> alstep (cl i) (arun cl cs i)\n                       (SOME as.\n                           C.rstep (cl i) cs i \\<and>\n                           alstep (cl i) (arun cl cs i) as \\<and>\n                           R as (cs (Suc i))) \\<and>\n                      A.reachable (arun cl cs i) \\<and>\n                      R (SOME as.\n                            C.rstep (cl i) cs i \\<and>\n                            alstep (cl i) (arun cl cs i) as \\<and>\n                            R as (cs (Suc i)))\n                       (cs (Suc i))", "apply (rule someI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>R asi (cs (Suc i)); alstep (cl i) (arun cl cs i) asi\\<rbrakk>\n    \\<Longrightarrow> C.rstep (cl i) cs i \\<and>\n                      alstep (cl i) (arun cl cs i) ?a2 \\<and>\n                      R ?a2 (cs (Suc i))\n 2. \\<And>x.\n       \\<lbrakk>R asi (cs (Suc i)); alstep (cl i) (arun cl cs i) asi;\n        C.rstep (cl i) cs i \\<and>\n        alstep (cl i) (arun cl cs i) x \\<and> R x (cs (Suc i))\\<rbrakk>\n       \\<Longrightarrow> alstep (cl i) (arun cl cs i) x \\<and>\n                         A.reachable (arun cl cs i) \\<and> R x (cs (Suc i))", "using CS"], ["proof (prove)\nusing this:\n  clstep (cl i) (cs i) (cs (Suc i))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R asi (cs (Suc i)); alstep (cl i) (arun cl cs i) asi\\<rbrakk>\n    \\<Longrightarrow> C.rstep (cl i) cs i \\<and>\n                      alstep (cl i) (arun cl cs i) ?a2 \\<and>\n                      R ?a2 (cs (Suc i))\n 2. \\<And>x.\n       \\<lbrakk>R asi (cs (Suc i)); alstep (cl i) (arun cl cs i) asi;\n        C.rstep (cl i) cs i \\<and>\n        alstep (cl i) (arun cl cs i) x \\<and> R x (cs (Suc i))\\<rbrakk>\n       \\<Longrightarrow> alstep (cl i) (arun cl cs i) x \\<and>\n                         A.reachable (arun cl cs i) \\<and> R x (cs (Suc i))", "by (auto simp: C.rstep_def AX)"], ["proof (state)\nthis:\n  alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n  A.reachable (arun cl cs i) \\<and> R (arun cl cs (Suc i)) (cs (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  alstep (cl ?i1) (arun cl cs ?i1) (arun cl cs (Suc ?i1)) \\<and>\n  A.reachable (arun cl cs ?i1) \\<and>\n  R (arun cl cs (Suc ?i1)) (cs (Suc ?i1))\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"R (arun cl cs i) (cs i)\" for i"], ["proof (prove)\nusing this:\n  alstep (cl ?i1) (arun cl cs ?i1) (arun cl cs (Suc ?i1)) \\<and>\n  A.reachable (arun cl cs ?i1) \\<and>\n  R (arun cl cs (Suc ?i1)) (cs (Suc ?i1))\n\ngoal (1 subgoal):\n 1. R (arun cl cs i) (cs i)", "apply (cases i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n                A.reachable (arun cl cs i) \\<and>\n                R (arun cl cs (Suc i)) (cs (Suc i));\n     i = 0\\<rbrakk>\n    \\<Longrightarrow> R (arun cl cs i) (cs i)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>i.\n                   alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n                   A.reachable (arun cl cs i) \\<and>\n                   R (arun cl cs (Suc i)) (cs (Suc i));\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> R (arun cl cs i) (cs i)", "using sim0"], ["proof (prove)\nusing this:\n  R as\\<^sub>0 cs\\<^sub>0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n                A.reachable (arun cl cs i) \\<and>\n                R (arun cl cs (Suc i)) (cs (Suc i));\n     i = 0\\<rbrakk>\n    \\<Longrightarrow> R (arun cl cs i) (cs i)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>i.\n                   alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n                   A.reachable (arun cl cs i) \\<and>\n                   R (arun cl cs (Suc i)) (cs (Suc i));\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> R (arun cl cs i) (cs i)", "by (auto simp: CRUN)"], ["proof (state)\nthis:\n  R (arun cl cs ?i1) (cs ?i1)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with X1"], ["proof (chain)\npicking this:\n  alstep (cl ?i1) (arun cl cs ?i1) (arun cl cs (Suc ?i1)) \\<and>\n  A.reachable (arun cl cs ?i1) \\<and>\n  R (arun cl cs (Suc ?i1)) (cs (Suc ?i1))\n  R (arun cl cs ?i1) (cs ?i1)", "show ?thesis"], ["proof (prove)\nusing this:\n  alstep (cl ?i1) (arun cl cs ?i1) (arun cl cs (Suc ?i1)) \\<and>\n  A.reachable (arun cl cs ?i1) \\<and>\n  R (arun cl cs (Suc ?i1)) (cs (Suc ?i1))\n  R (arun cl cs ?i1) (cs ?i1)\n\ngoal (1 subgoal):\n 1. thesis", "apply (rule_tac that[of \"arun cl cs\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n                A.reachable (arun cl cs i) \\<and>\n                R (arun cl cs (Suc i)) (cs (Suc i));\n     \\<And>i. R (arun cl cs i) (cs i)\\<rbrakk>\n    \\<Longrightarrow> A.is_lrun cl (arun cl cs)\n 2. \\<lbrakk>\\<And>i.\n                alstep (cl i) (arun cl cs i) (arun cl cs (Suc i)) \\<and>\n                A.reachable (arun cl cs i) \\<and>\n                R (arun cl cs (Suc i)) (cs (Suc i));\n     \\<And>i. R (arun cl cs i) (cs i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i. R (arun cl cs i) (cs i)", "by (auto simp: A.is_lrun_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma xfer_run_aux2:\n      assumes CRUN: \"C.is_run cs\"\n      obtains as where \"A.is_run as\" \"\\<forall>i. R (as i) (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson A.is_run_def C.is_run_def assms xfer_lrun_aux2)"], ["", "lemma xfer_fair_run_aux2:\n      assumes FAIR: \"C.is_fair_run cs\"\n      obtains as where \"A.is_fair_run as\" \"\\<forall>i. R (as i) (cs i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from FAIR"], ["proof (chain)\npicking this:\n  C.is_fair_run cs", "obtain cl where \n        CLRUN: \"C.is_lrun cl cs\" and \n        CFAIR: \"C.is_lfair cl cs\""], ["proof (prove)\nusing this:\n  C.is_fair_run cs\n\ngoal (1 subgoal):\n 1. (\\<And>cl.\n        \\<lbrakk>C.is_lrun cl cs; C.is_lfair cl cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: C.is_fair_run_def)"], ["proof (state)\nthis:\n  C.is_lrun cl cs\n  C.is_lfair cl cs\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from xfer_lrun_aux2[OF CLRUN]"], ["proof (chain)\npicking this:\n  (\\<And>as.\n      \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain as where \n        ALRUN: \"A.is_lrun cl as\" and SIM: \"\\<forall>i. R (as i) (cs i)\""], ["proof (prove)\nusing this:\n  (\\<And>as.\n      \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_lrun cl as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  A.is_lrun cl as\n  \\<forall>i. R (as i) (cs i)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret A: run as\\<^sub>0 alstep as\n              + C: run cs\\<^sub>0 clstep cs"], ["proof (prove)\ngoal (1 subgoal):\n 1. run as\\<^sub>0 alstep as &&& run cs\\<^sub>0 clstep cs", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. A.is_run as\n 2. C.is_run cs", "using ALRUN CLRUN"], ["proof (prove)\nusing this:\n  A.is_lrun cl as\n  C.is_lrun cl cs\n\ngoal (2 subgoals):\n 1. A.is_run as\n 2. C.is_run cs", "by (auto simp: A.is_run_def C.is_run_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"A.is_lfair cl as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.is_lfair cl as", "unfolding A.is_lfair_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l i.\n       \\<exists>j\\<ge>i. \\<not> A.can_step l (as j) \\<or> cl j = l", "by (metis A.run_reachable C.is_lfair_def C.run_reachable CFAIR SIM simb')"], ["proof (state)\nthis:\n  A.is_lfair cl as\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (cs i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with ALRUN SIM that"], ["proof (chain)\npicking this:\n  A.is_lrun cl as\n  \\<forall>i. R (as i) (cs i)\n  \\<lbrakk>A.is_fair_run ?as1; \\<forall>i. R (?as1 i) (cs i)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  A.is_lfair cl as", "show ?thesis"], ["proof (prove)\nusing this:\n  A.is_lrun cl as\n  \\<forall>i. R (as i) (cs i)\n  \\<lbrakk>A.is_fair_run ?as1; \\<forall>i. R (?as1 i) (cs i)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  A.is_lfair cl as\n\ngoal (1 subgoal):\n 1. thesis", "unfolding A.is_fair_run_def"], ["proof (prove)\nusing this:\n  A.is_lrun cl as\n  \\<forall>i. R (as i) (cs i)\n  \\<lbrakk>\\<exists>l. A.is_lrun l ?as1 \\<and> A.is_lfair l ?as1;\n   \\<forall>i. R (?as1 i) (cs i)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  A.is_lfair cl as\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale simulation"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation as\\<^sub>0 alstep cs\\<^sub>0 clstep R", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c.\n       C.reachable c \\<Longrightarrow>\n       \\<exists>a. R a c \\<and> A.reachable a\n 2. \\<And>cs.\n       C.is_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_run as\n 3. \\<And>cs.\n       C.is_fair_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as", "using xfer_reachable_aux2"], ["proof (prove)\nusing this:\n  \\<lbrakk>C.reachable ?cs;\n   \\<And>as.\n      \\<lbrakk>R as ?cs; A.reachable as\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (3 subgoals):\n 1. \\<And>c.\n       C.reachable c \\<Longrightarrow>\n       \\<exists>a. R a c \\<and> A.reachable a\n 2. \\<And>cs.\n       C.is_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_run as\n 3. \\<And>cs.\n       C.is_fair_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cs.\n       C.is_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_run as\n 2. \\<And>cs.\n       C.is_fair_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as", "using xfer_run_aux2"], ["proof (prove)\nusing this:\n  \\<lbrakk>C.is_run ?cs;\n   \\<And>as.\n      \\<lbrakk>A.is_run as; \\<forall>i. R (as i) (?cs i)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<And>cs.\n       C.is_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_run as\n 2. \\<And>cs.\n       C.is_fair_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs.\n       C.is_fair_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as", "using xfer_fair_run_aux2"], ["proof (prove)\nusing this:\n  \\<lbrakk>C.is_fair_run ?cs;\n   \\<And>as.\n      \\<lbrakk>A.is_fair_run as; \\<forall>i. R (as i) (?cs i)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>cs.\n       C.is_fair_run cs \\<Longrightarrow>\n       \\<exists>as. (\\<forall>i. R (as i) (cs i)) \\<and> A.is_fair_run as", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}